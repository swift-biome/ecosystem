#!/usr/bin/python3

import os, subprocess, shutil, glob, json
import index

manifest = '''\
// swift-tools-version:5.7
import PackageDescription

let package:Package = .init(
    name: "consumer",
    products: 
    [
        .library(name: "_Consumer", targets: ["_Consumer"])
    ],
    dependencies: 
    [
        .package(url: "https://github.com/kelvin13/swift-package-catalog", from: "0.2.1"),
        .package(url: "{url}", {tag}),
    ],
    targets: 
    [
        .target(name: "_Consumer", 
            dependencies: 
            [
                {dependencies}
            ],
            path: "{sources}", 
            exclude: 
            [
            ]),
    ]
)
'''

def read_file(path):
    if os.path.exists(path):
        with open(path, 'r') as file:
            return file.read()
    return None

toolchain = os.path.join(os.environ['SWIFTENV_ROOT'], 
    'versions', 
    'DEVELOPMENT-SNAPSHOT-2022-06-20-a', 
    'usr', 
    'bin', 
    'swift')

os.chdir(os.path.dirname(os.path.abspath(__file__)))
workspace = 'packages'

os.makedirs(workspace, exist_ok = True)
os.chdir(workspace)

builds = '.builds'
os.makedirs(builds, exist_ok = True)

for organization, package, brand, tags in index.packages:
    for (tag, products, targets) in tags:
        os.chdir(builds)
        
        modules = products + targets
        pinned = '{0}@{1}'.format(package, tag)
        
        dependencies = ','.join('.product(name: "{0}", package: "{1}")'
            .format(product, package) for product in products)
        
        os.makedirs(pinned, exist_ok = True)
        os.chdir(pinned)
        
        sources = 'sources'
        if not os.path.exists(sources):
            os.mkdir(sources)
            with open(os.path.join(sources, '_consumer.swift'), 'w') as file:
                file.write('\n')
        
        old_manifest = read_file('Package.swift')
        new_manifest = manifest.format(url = '{0}/{1}'.format(organization, package), 
            tag = tag.pin, 
            sources = sources, 
            dependencies = dependencies)
        
        if old_manifest != new_manifest:
            with open('Package.swift', 'w') as file:
                file.write(new_manifest)
        
        for module in modules:
            subprocess.run((toolchain, 'build', '--target', module))
        
        output = subprocess.run((toolchain, 'package', 'catalog', * modules ), 
            capture_output = True)
        
        os.chdir('..')
        os.chdir('..')
        
        if os.path.exists(pinned):
            shutil.rmtree(pinned)
        os.makedirs(pinned)
        
        if output.returncode == 0:
            text = output.stdout.decode('utf-8')
            catalog = json.loads(text)
            for package_catalog in catalog:
                assert package_catalog['catalog_tools_version'] == 2 
                assert package_catalog['package'] == package 
                
                if 'brand' not in package_catalog:
                    package_catalog['brand'] = brand 
                
                for module_catalog in package_catalog['modules']:
                    # move the files/directories in the include paths
                    destinations = tuple(os.path.basename(path)
                        for path in module_catalog['include'])
                    for source, destination in zip(module_catalog['include'], destinations):
                        shutil.copytree(source, os.path.join(pinned, destination))
                    module_catalog['include'] = destinations
            text = json.dumps(catalog, indent = 4, sort_keys = True)            
            
            with open(os.path.join(pinned, 'Package.catalog'), 'w') as file:
                file.write(text) 
            
            # if we are ‘faking’ a semver, we need to edit the Package.resolved 
            # file so that the version field exists...
            pins = read_file(os.path.join(builds, pinned, 'Package.resolved'))
            pins = json.loads(pins)
            if type(tag) is index.semver:
                for pin in pins['pins']:
                    if pin['identity'] == package and 'version' not in pin['state']: 
                        pin['state']['version'] = tag.version 
            
            with open(os.path.join(pinned, 'Package.resolved'), 'w') as file:
                file.write(json.dumps(pins, indent = 4, sort_keys = True))
            
            print('generated documentation for {0}'.format(pinned))
        else:
            print(output.stderr.decode('utf-8'))
            print('failed to generate documentation for {0}'.format(pinned))
        
        
        
