{"culture":"Logging","dependencies":[],"extensions":[],"partitions":[{"namespace":"Logging","communities":[{"community":"protocol","startIndex":0,"endIndex":1},{"community":"enum","startIndex":1,"endIndex":4},{"community":"struct","startIndex":4,"endIndex":9},{"community":"enum.case","startIndex":9,"endIndex":20},{"community":"init","startIndex":20,"endIndex":29},{"community":"subscript","startIndex":29,"endIndex":34},{"community":"property","startIndex":34,"endIndex":46},{"community":"type.method","startIndex":46,"endIndex":49},{"community":"method","startIndex":49,"endIndex":72},{"community":"type.op","startIndex":72,"endIndex":74},{"community":"typealias","startIndex":74,"endIndex":80}]}],"identifiers":["s7Logging10LogHandlerP","s7Logging0A6SystemO","s7Logging6LoggerV13MetadataValueO","s7Logging6LoggerV5LevelO","s7Logging012SwiftLogNoOpC7HandlerV","s7Logging16StreamLogHandlerV","s7Logging19MultiplexLogHandlerV","s7Logging6LoggerV","s7Logging6LoggerV7MessageV","s7Logging6LoggerV13MetadataValueO10dictionaryyAESDySSAEGcAEmF","s7Logging6LoggerV13MetadataValueO17stringConvertibleyAEs012CustomStringF0_pcAEmF","s7Logging6LoggerV13MetadataValueO5arrayyAESayAEGcAEmF","s7Logging6LoggerV13MetadataValueO6stringyAESScAEmF","s7Logging6LoggerV5LevelO4infoyA2EmF","s7Logging6LoggerV5LevelO5debugyA2EmF","s7Logging6LoggerV5LevelO5erroryA2EmF","s7Logging6LoggerV5LevelO5traceyA2EmF","s7Logging6LoggerV5LevelO6noticeyA2EmF","s7Logging6LoggerV5LevelO7warningyA2EmF","s7Logging6LoggerV5LevelO8criticalyA2EmF","s7Logging012SwiftLogNoOpC7HandlerVACycfc","s7Logging19MultiplexLogHandlerVyACSayAA0cD0_pGcfc","s7Logging6LoggerV13MetadataValueO12arrayLiteralA2Ed_tcfc","s7Logging6LoggerV13MetadataValueO13stringLiteralAESS_tcfc","s7Logging6LoggerV13MetadataValueO17dictionaryLiteralAESS_AEtd_tcfc","s7Logging6LoggerV5LevelO8rawValueAESgSS_tcfc","s7Logging6LoggerV5label7factoryACSS_AA10LogHandler_pSSXEtcfc","s7Logging6LoggerV5labelACSS_tcfc","s7Logging6LoggerV7MessageV13stringLiteralAESS_tcfc","s7Logging012SwiftLogNoOpC7HandlerV11metadataKeyAA6LoggerV13MetadataValueOSgSS_tcip","s7Logging10LogHandlerP11metadataKeyAA6LoggerV13MetadataValueOSgSS_tcip","s7Logging16StreamLogHandlerV11metadataKeyAA6LoggerV13MetadataValueOSgSS_tcip","s7Logging19MultiplexLogHandlerV11metadataKeyAA6LoggerV13MetadataValueOSgSS_tcip","s7Logging6LoggerV11metadataKeyAC13MetadataValueOSgSS_tcip","s7Logging012SwiftLogNoOpC7HandlerV8logLevelAA6LoggerV0H0Ovp","s7Logging012SwiftLogNoOpC7HandlerV8metadataSDySSAA6LoggerV13MetadataValueOGvp","s7Logging10LogHandlerP8logLevelAA6LoggerV0E0Ovp","s7Logging10LogHandlerP8metadataSDySSAA6LoggerV13MetadataValueOGvp","s7Logging16StreamLogHandlerV8logLevelAA6LoggerV0F0Ovp","s7Logging16StreamLogHandlerV8metadataSDySSAA6LoggerV13MetadataValueOGvp","s7Logging19MultiplexLogHandlerV8logLevelAA6LoggerV0F0Ovp","s7Logging19MultiplexLogHandlerV8metadataSDySSAA6LoggerV13MetadataValueOGvp","s7Logging6LoggerV13MetadataValueO11descriptionSSvp","s7Logging6LoggerV5labelSSvp","s7Logging6LoggerV7MessageV11descriptionSSvp","s7Logging6LoggerV8logLevelAC0D0Ovp","s7Logging0A6SystemO9bootstrapyyAA10LogHandler_pSScFZ","s7Logging16StreamLogHandlerV13standardError5labelACSS_tFZ","s7Logging16StreamLogHandlerV14standardOutput5labelACSS_tFZ","s7Logging012SwiftLogNoOpC7HandlerV3log5level7message8metadata4file8function4lineyAA6LoggerV5LevelO_AL7MessageVSDySSAL13MetadataValueOGSgS2SSutF","s7Logging10LogHandlerP3log5level7message8metadata4file8function4lineyAA6LoggerV5LevelO_AL7MessageVSDySSAL13MetadataValueOGSgS2SSutF","s7Logging10LogHandlerP3log5level7message8metadata6source4file8function4lineyAA6LoggerV5LevelO_AM7MessageVSDySSAM13MetadataValueOGSgS3SSutF","s7Logging10LogHandlerPAAE3log5level7message8metadata4file8function4lineyAA6LoggerV5LevelO_AL7MessageVSDySSAL13MetadataValueOGSgS2SSutF","s7Logging10LogHandlerPAAE3log5level7message8metadata6source4file8function4lineyAA6LoggerV5LevelO_AM7MessageVSDySSAM13MetadataValueOGSgS3SSutF","s7Logging16StreamLogHandlerV3log5level7message8metadata6source4file8function4lineyAA6LoggerV5LevelO_AM7MessageVSDySSAM13MetadataValueOGSgS3SSutF","s7Logging19MultiplexLogHandlerV3log5level7message8metadata6source4file8function4lineyAA6LoggerV5LevelO_AM7MessageVSDySSAM13MetadataValueOGSgS3SSutF","s7Logging6LoggerV3log5level_8metadata4file8function4lineyAC5LevelO_AC7MessageVyXKSDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV3log5level_8metadata6source4file8function4lineyAC5LevelO_AC7MessageVyXKSDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV4info_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV4info_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV5debug_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV5debug_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV5error_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV5error_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV5trace_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV5trace_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV6notice_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV6notice_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV7warning_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV7warning_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV8critical_8metadata4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKS2SSutF","s7Logging6LoggerV8critical_8metadata6source4file8function4lineyAC7MessageVyXK_SDySSAC13MetadataValueOGSgyXKSSSgyXKS2SSutF","s7Logging6LoggerV13MetadataValueO2eeoiySbAE_AEtFZ","s7Logging6LoggerV5LevelO1loiySbAE_AEtFZ","s7Logging6LoggerV13MetadataValueO0D0a","s7Logging6LoggerV13MetadataValueO17StringLiteralTypea","s7Logging6LoggerV13MetadataValueO19ArrayLiteralElementa","s7Logging6LoggerV13MetadataValueO3Keya","s7Logging6LoggerV7MessageV17StringLiteralTypea","s7Logging6LoggerV8Metadataa","sSD3Keya","sSD5Valuea","sSE","sSH","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSY","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSERzSS8RawValueSYRtzrlE6encode2toys7Encoder_p_tKF","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSYsSeRzSS8RawValueSYRtzrlE4fromxs7Decoder_p_tKcfc","sSb","sSe","sSu","ss12CaseIterableP","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByArrayLiteralP0cD7ElementQa","ss26ExpressibleByStringLiteralP","ss26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc","ss26ExpressibleByStringLiteralP0cD4TypeQa","ss26ExpressibleByStringLiteralPs0cD4TypeQz023ExtendedGraphemeClusterdE0RtzrlE08extendedghD0xAF_tcfc","ss30ExpressibleByDictionaryLiteralP","ss30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc","ss30ExpressibleByDictionaryLiteralP3KeyQa","ss30ExpressibleByDictionaryLiteralP5ValueQa","ss32ExpressibleByStringInterpolationP","ss32ExpressibleByStringInterpolationPss07DefaultcD0V0cD0RtzrlE06stringD0xAD_tcfc","ss33ExpressibleByUnicodeScalarLiteralP","ss33ExpressibleByUnicodeScalarLiteralP07unicodedE0x0cdE4TypeQz_tcfc","ss43ExpressibleByExtendedGraphemeClusterLiteralP","ss43ExpressibleByExtendedGraphemeClusterLiteralP08extendeddeF0x0cdeF4TypeQz_tcfc","ss43ExpressibleByExtendedGraphemeClusterLiteralPs013UnicodeScalarF4TypeQz0cdefI0RtzrlE07unicodehF0xAF_tcfc"],"vertices":[{"p":["LogHandler"],"f":[["protocol",12],[" ",17],["LogHandler",7]],"s":[["protocol",12],[" ",17],["LogHandler",7]],"d":"A `LogHandler` is an implementation of a logging backend.\n\nThis type is an implementation detail and should not normally be used, unless implementing your own logging backend.\nTo use the SwiftLog API, please refer to the documentation of `Logger`.\n\n# Implementation requirements\n\nTo implement your own `LogHandler` you should respect a few requirements that are necessary so applications work\nas expected regardless of the selected `LogHandler` implementation.\n\n- The `LogHandler` must be a `struct`.\n- The metadata and `logLevel` properties must be implemented so that setting them on a `Logger` does not affect\n  other `Logger`s.\n\n### Treat log level & metadata as values\n\nWhen developing your `LogHandler`, please make sure the following test works.\n\n```swift\nLoggingSystem.bootstrap(MyLogHandler.init) // your LogHandler might have a different bootstrapping step\nvar logger1 = Logger(label: \"first logger\")\nlogger1.logLevel = .debug\nlogger1[metadataKey: \"only-on\"] = \"first\"\n\nvar logger2 = logger1\nlogger2.logLevel = .error                  // this must not override `logger1`'s log level\nlogger2[metadataKey: \"only-on\"] = \"second\" // this must not override `logger1`'s metadata\n\nXCTAssertEqual(.debug, logger1.logLevel)\nXCTAssertEqual(.error, logger2.logLevel)\nXCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])\nXCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])\n```\n\n### Special cases\n\nIn certain special cases, the log level behaving like a value on `Logger` might not be what you want. For example,\nyou might want to set the log level across _all_ `Logger`s to `.debug` when say a signal (eg. `SIGUSR1`) is received\nto be able to debug special failures in production. This special case is acceptable but we urge you to create a\nsolution specific to your `LogHandler` implementation to achieve that. Please find an example implementation of this\nbehavior below, on reception of the signal you would call\n`LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug`, for example.\n\n```swift\nimport class Foundation.NSLock\n\npublic struct LogHandlerWithGlobalLogLevelOverride: LogHandler {\n    // the static properties hold the globally overridden log level (if overridden)\n    private static let overrideLock = NSLock()\n    private static var overrideLogLevel: Logger.Level? = nil\n\n    // this holds the log level if not overridden\n    private var _logLevel: Logger.Level = .info\n\n    // metadata storage\n    public var metadata: Logger.Metadata = [:]\n\n    public init(label: String) {\n        // [...]\n    }\n\n    public var logLevel: Logger.Level {\n        // when we get asked for the log level, we check if it was globally overridden or not\n        get {\n            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()\n            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }\n            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel\n        }\n        // we set the log level whenever we're asked (note: this might not have an effect if globally\n        // overridden)\n        set {\n            self._logLevel = newValue\n        }\n    }\n\n    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,\n                    source: String, file: String, function: String, line: UInt) {\n        // [...]\n    }\n\n    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {\n        get {\n            return self.metadata[metadataKey]\n        }\n        set(newValue) {\n            self.metadata[metadataKey] = newValue\n        }\n    }\n\n    // this is the function to globally override the log level, it is not part of the `LogHandler` protocol\n    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {\n        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()\n        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }\n        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel\n    }\n}\n```\n\nPlease note that the above `LogHandler` will still pass the 'log level is a value' test above it iff the global log\nlevel has not been overridden. And most importantly it passes the requirement listed above: A change to the log\nlevel on one `Logger` should not affect the log level of another `Logger` variable."},{"p":["LoggingSystem"],"f":[["enum",12],[" ",17],["LoggingSystem",7]],"s":[["enum",12],[" ",17],["LoggingSystem",7]],"d":"The `LoggingSystem` is a global facility where the default logging backend implementation (`LogHandler`) can be\nconfigured. `LoggingSystem` is set up just once in a given program to set up the desired logging backend\nimplementation."},{"p":["Logger","MetadataValue"],"f":[["enum",12],[" ",17],["MetadataValue",7]],"s":[["enum",12],[" ",17],["MetadataValue",7]],"d":"A logging metadata value. `Logger.MetadataValue` is string, array, and dictionary literal convertible.\n\n`MetadataValue` provides convenient conformances to `ExpressibleByStringInterpolation`,\n`ExpressibleByStringLiteral`, `ExpressibleByArrayLiteral`, and `ExpressibleByDictionaryLiteral` which means\nthat when constructing `MetadataValue`s you should default to using Swift's usual literals.\n\nExamples:\n - prefer `logger.info(\"user logged in\", metadata: [\"user-id\": \"\\(user.id)\"])` over\n   `..., metadata: [\"user-id\": .string(user.id.description)])`\n - prefer `logger.info(\"user selected colors\", metadata: [\"colors\": [\"\\(user.topColor)\", \"\\(user.secondColor)\"]])`\n   over `..., metadata: [\"colors\": .array([.string(\"\\(user.topColor)\"), .string(\"\\(user.secondColor)\")])`\n - prefer `logger.info(\"nested info\", metadata: [\"nested\": [\"fave-numbers\": [\"\\(1)\", \"\\(2)\", \"\\(3)\"], \"foo\": \"bar\"]])`\n   over `..., metadata: [\"nested\": .dictionary([\"fave-numbers\": ...])])`"},{"p":["Logger","Level"],"f":[["enum",12],[" ",17],["Level",7]],"s":[["enum",12],[" ",17],["Level",7]],"d":"The log level.\n\nLog levels are ordered by their severity, with `.trace` being the least severe and\n`.critical` being the most severe."},{"p":["SwiftLogNoOpLogHandler"],"f":[["struct",12],[" ",17],["SwiftLogNoOpLogHandler",7]],"s":[["struct",12],[" ",17],["SwiftLogNoOpLogHandler",7]],"d":"No operation LogHandler, used when no logging is required"},{"p":["StreamLogHandler"],"f":[["struct",12],[" ",17],["StreamLogHandler",7]],"s":[["struct",12],[" ",17],["StreamLogHandler",7]],"d":"`StreamLogHandler` is a simple implementation of `LogHandler` for directing\n`Logger` output to either `stderr` or `stdout` via the factory methods."},{"p":["MultiplexLogHandler"],"f":[["struct",12],[" ",17],["MultiplexLogHandler",7]],"s":[["struct",12],[" ",17],["MultiplexLogHandler",7]],"d":"A pseudo-`LogHandler` that can be used to send messages to multiple other `LogHandler`s.\n\n### Effective Logger.Level\n\nWhen first initialized the multiplex log handlers' log level is automatically set to the minimum of all the\npassed in log handlers. This ensures that each of the handlers will be able to log at their appropriate level\nany log events they might be interested in.\n\nExample:\nIf log handler `A` is logging at `.debug` level, and log handler `B` is logging at `.info` level, the constructed\n`MultiplexLogHandler([A, B])`'s effective log level will be set to `.debug`, meaning that debug messages will be\nhandled by this handler, while only logged by the underlying `A` log handler (since `B`'s log level is `.info`\nand thus it would not actually log that log message).\n\nIf the log level is _set_ on a `Logger` backed by an `MultiplexLogHandler` the log level will apply to *all*\nunderlying log handlers, allowing a logger to still select at what level it wants to log regardless of if the underlying\nhandler is a multiplex or a normal one. If for some reason one might want to not allow changing a log level of a specific\nhandler passed into the multiplex log handler, this is possible by wrapping it in a handler which ignores any log level changes.\n\n### Effective Logger.Metadata\n\nSince a `MultiplexLogHandler` is a combination of multiple log handlers, the handling of metadata can be non-obvious.\nFor example, the underlying log handlers may have metadata of their own set before they are used to initialize the multiplex log handler.\n\nThe multiplex log handler acts purely as proxy and does not make any changes to underlying handler metadata other than\nproxying writes that users made on a `Logger` instance backed by this handler.\n\nSetting metadata is always proxied through to _all_ underlying handlers, meaning that if a modification like\n`logger[metadataKey: \"x\"] = \"y\"` is made, all underlying log handlers that this multiplex handler was initiated with\nwill observe this change.\n\nReading metadata from the multiplex log handler MAY need to pick one of conflicting values if the underlying log handlers\nwere already initiated with some metadata before passing them into the multiplex handler. The multiplex handler uses\nthe order in which the handlers were passed in during its initialization as a priority indicator - the first handler's\nvalues are more important than the next handlers values, etc.\n\nExample:\nIf the multiplex log handler was initiated with two handlers like this: `MultiplexLogHandler([handler1, handler2])`.\nThe handlers each have some already set metadata: `handler1` has metadata values for keys `one` and `all`, and `handler2`\nhas values for keys `two` and `all`.\n\nA query through the multiplex log handler the key `one` naturally returns `handler1`'s value, and a query for `two`\nnaturally returns `handler2`'s value. Querying for the key `all` will return `handler1`'s value, as that handler was indicated\n\"more important\" than the second handler. The same rule applies when querying for the `metadata` property of the\nmultiplex log handler - it constructs `Metadata` uniquing values."},{"p":["Logger"],"f":[["struct",12],[" ",17],["Logger",7]],"s":[["struct",12],[" ",17],["Logger",7]],"d":"A `Logger` is the central type in `SwiftLog`. Its central function is to emit log messages using one of the methods\ncorresponding to a log level.\n\n`Logger`s are value types with respect to the `logLevel` and the `metadata` (as well as the immutable `label`\nand the selected `LogHandler`). Therefore, `Logger`s are suitable to be passed around between libraries if you want\nto preserve metadata across libraries.\n\nThe most basic usage of a `Logger` is\n\n    logger.info(\"Hello World!\")\n"},{"p":["Logger","Message"],"f":[["struct",12],[" ",17],["Message",7]],"s":[["struct",12],[" ",17],["Message",7]],"d":"`Logger.Message` represents a log message's text. It is usually created using string literals.\n\nExample creating a `Logger.Message`:\n\n    let world: String = \"world\"\n    let myLogMessage: Logger.Message = \"Hello \\(world)\"\n\nMost commonly, `Logger.Message`s appear simply as the parameter to a logging method such as:\n\n    logger.info(\"Hello \\(world)\")\n"},{"p":["Logger","MetadataValue","dictionary(_:)"],"f":[["case",12],[" ",17],["dictionary",7],["(",17],["Logger",18,7],[".",17],["Metadata",18,79],[")",17]],"s":[["case",12],[" ",17],["dictionary",7],["(",17],["Logger",18],[".",17],["Metadata",18],[")",17]],"d":"A metadata value which is a dictionary from `String` to `Logger.MetadataValue`.\n\nBecause `MetadataValue` implements `ExpressibleByDictionaryLiteral`, you don't need to type\n`.dictionary([\"foo\": .string(\"bar \\(buz)\")])`, you can just use the more natural `[\"foo\": \"bar \\(buz)\"]`."},{"p":["Logger","MetadataValue","stringConvertible(_:)"],"f":[["case",12],[" ",17],["stringConvertible",7],["(",17],["CustomStringConvertible",18,108],[")",17]],"s":[["case",12],[" ",17],["stringConvertible",7],["(",17],["CustomStringConvertible",18],[")",17]],"d":"A metadata value which is some `CustomStringConvertible`."},{"p":["Logger","MetadataValue","array(_:)"],"f":[["case",12],[" ",17],["array",7],["([",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["])",17]],"s":[["case",12],[" ",17],["array",7],["([",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["])",17]],"d":"A metadata value which is an array of `Logger.MetadataValue`s.\n\nBecause `MetadataValue` implements `ExpressibleByArrayLiteral`, you don't need to type\n`.array([.string(\"foo\"), .string(\"bar \\(buz)\")])`, you can just use the more natural `[\"foo\", \"bar \\(buz)\"]`."},{"p":["Logger","MetadataValue","string(_:)"],"f":[["case",12],[" ",17],["string",7],["(",17],["String",18,97],[")",17]],"s":[["case",12],[" ",17],["string",7],["(",17],["String",18],[")",17]],"d":"A metadata value which is a `String`.\n\nBecause `MetadataValue` implements `ExpressibleByStringInterpolation`, and `ExpressibleByStringLiteral`,\nyou don't need to type `.string(someType.description)` you can use the string interpolation `\"\\(someType)\"`."},{"p":["Logger","Level","info"],"f":[["case",12],[" ",17],["info",7]],"s":[["case",12],[" ",17],["info",7]],"d":"Appropriate for informational messages."},{"p":["Logger","Level","debug"],"f":[["case",12],[" ",17],["debug",7]],"s":[["case",12],[" ",17],["debug",7]],"d":"Appropriate for messages that contain information normally of use only when\ndebugging a program."},{"p":["Logger","Level","error"],"f":[["case",12],[" ",17],["error",7]],"s":[["case",12],[" ",17],["error",7]],"d":"Appropriate for error conditions."},{"p":["Logger","Level","trace"],"f":[["case",12],[" ",17],["trace",7]],"s":[["case",12],[" ",17],["trace",7]],"d":"Appropriate for messages that contain information normally of use only when\ntracing the execution of a program."},{"p":["Logger","Level","notice"],"f":[["case",12],[" ",17],["notice",7]],"s":[["case",12],[" ",17],["notice",7]],"d":"Appropriate for conditions that are not error conditions, but that may require\nspecial handling."},{"p":["Logger","Level","warning"],"f":[["case",12],[" ",17],["warning",7]],"s":[["case",12],[" ",17],["warning",7]],"d":"Appropriate for messages that are not error conditions, but more severe than\n`.notice`."},{"p":["Logger","Level","critical"],"f":[["case",12],[" ",17],["critical",7]],"s":[["case",12],[" ",17],["critical",7]],"d":"Appropriate for critical error conditions that usually require immediate\nattention.\n\nWhen a `critical` message is logged, the logging backend (`LogHandler`) is free to perform\nmore heavy-weight operations to capture system state (such as capturing stack traces) to facilitate\ndebugging."},{"p":["SwiftLogNoOpLogHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["MultiplexLogHandler","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["handlers",2],[": [",17],["LogHandler",18,0],["])",17]],"s":[["init",10],["([",17],["LogHandler",18],["])",17]],"d":"Create a `MultiplexLogHandler`.\n\n- parameters:\n   - handlers: An array of `LogHandler`s, each of which will receive the log messages sent to this `Logger`.\n               The array must not be empty."},{"p":["Logger","MetadataValue","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["...)",17]],"o":112},{"p":["Logger","MetadataValue","init(stringLiteral:)"],"f":[["init",10],["(",17],["stringLiteral",1],[" ",17],["value",2],[": ",17],["String",18,97],[")",17]],"s":[["init",10],["(",17],["stringLiteral",1],[": ",17],["String",18],[")",17]],"o":115},{"p":["Logger","MetadataValue","init(dictionaryLiteral:)"],"f":[["init",10],["(",17],["dictionaryLiteral",1],[" ",17],["elements",2],[": (",17],["String",18,97],[", ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],[")...)",17]],"s":[["init",10],["(",17],["dictionaryLiteral",1],[": (",17],["String",18],[", ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],[")...)",17]],"o":119},{"p":["Logger","Level","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,97],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":99},{"p":["Logger","init(label:factory:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,97],[", ",17],["factory",1],[": (",17],["String",18,97],[") -> ",17],["LogHandler",18,0],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["factory",1],[": (",17],["String",18],[") -> ",17],["LogHandler",18],[")",17]],"d":"Construct a `Logger` given a `label` identifying the creator of the `Logger` or a non-standard `LogHandler`.\n\nThe `label` should identify the creator of the `Logger`. This can be an application, a sub-system, or even\na datatype.\n\nThis initializer provides an escape hatch in case the global default logging backend implementation (set up\nusing `LoggingSystem.bootstrap` is not appropriate for this particular logger.\n\n- parameters:\n    - label: An identifier for the creator of a `Logger`.\n    - factory: A closure creating non-standard `LogHandler`s."},{"p":["Logger","init(label:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,97],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[")",17]],"d":"Construct a `Logger` given a `label` identifying the creator of the `Logger`.\n\nThe `label` should identify the creator of the `Logger`. This can be an application, a sub-system, or even\na datatype.\n\n- parameters:\n    - label: An identifier for the creator of a `Logger`."},{"p":["Logger","Message","init(stringLiteral:)"],"f":[["init",10],["(",17],["stringLiteral",1],[" ",17],["value",2],[": ",17],["String",18,97],[")",17]],"s":[["init",10],["(",17],["stringLiteral",1],[": ",17],["String",18],[")",17]],"o":115},{"p":["SwiftLogNoOpLogHandler","subscript(metadataKey:)"],"f":[["subscript",10],["(",17],["metadataKey",1],[" ",17],["_",2],[": ",17],["String",18,97],[") -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["metadataKey",1],[" _: ",17],["String",18],[") -> ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["?",17]],"o":30},{"p":["LogHandler","subscript(metadataKey:)"],"f":[["subscript",10],["(",17],["metadataKey",1],[" ",17],["_",2],[": ",17],["String",18,97],[") -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["metadataKey",1],[" _: ",17],["String",18],[") -> ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["?",17]],"d":"Add, remove, or change the logging metadata.\n\n- note: `LogHandler`s must treat logging metadata as a value type. This means that the change in metadata must\n        only affect this very `LogHandler`.\n\n- parameters:\n   - metadataKey: The key for the metadata item"},{"p":["StreamLogHandler","subscript(metadataKey:)"],"f":[["subscript",10],["(",17],["metadataKey",1],[" ",17],["metadataKey",2],[": ",17],["String",18,97],[") -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["metadataKey",1],[" _: ",17],["String",18],[") -> ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["?",17]],"o":30},{"p":["MultiplexLogHandler","subscript(metadataKey:)"],"f":[["subscript",10],["(",17],["metadataKey",1],[" ",17],["metadataKey",2],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Key",18,80],[") -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["metadataKey",1],[" _: ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Key",18],[") -> ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["?",17]],"o":30},{"p":["Logger","subscript(metadataKey:)"],"f":[["subscript",10],["(",17],["metadataKey",1],[" ",17],["metadataKey",2],[": ",17],["String",18,97],[") -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["metadataKey",1],[" _: ",17],["String",18],[") -> ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],["?",17]],"d":"Add, change, or remove a logging metadata item.\n\n- note: Logging metadata behaves as a value that means a change to the logging metadata will only affect the\n        very `Logger` it was changed on."},{"p":["SwiftLogNoOpLogHandler","logLevel"],"f":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18],[".",17],["Level",18]],"o":36},{"p":["SwiftLogNoOpLogHandler","metadata"],"f":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18],[".",17],["Metadata",18]],"o":37},{"p":["LogHandler","logLevel"],"f":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18],[".",17],["Level",18]],"d":"Get or set the configured log level.\n\n- note: `LogHandler`s must treat the log level as a value type. This means that the change in metadata must\n        only affect this very `LogHandler`. It is acceptable to provide some form of global log level override\n        that means a change in log level on a particular `LogHandler` might not be reflected in any\n       `LogHandler`."},{"p":["LogHandler","metadata"],"f":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18],[".",17],["Metadata",18]],"d":"Get or set the entire metadata storage as a dictionary.\n\n- note: `LogHandler`s must treat logging metadata as a value type. This means that the change in metadata must\n        only affect this very `LogHandler`."},{"p":["StreamLogHandler","logLevel"],"f":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18,7],[".",17],["Level",18,3]],"s":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18],[".",17],["Level",18]],"o":36},{"p":["StreamLogHandler","metadata"],"f":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18],[".",17],["Metadata",18]],"o":37},{"p":["MultiplexLogHandler","logLevel"],"f":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18],[".",17],["Level",18]],"o":36},{"p":["MultiplexLogHandler","metadata"],"f":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["metadata",7],[": ",17],["Logger",18],[".",17],["Metadata",18]],"o":37},{"p":["Logger","MetadataValue","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,97],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":109},{"p":["Logger","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,97]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18]],"d":"An identifier of the creator of this `Logger`."},{"p":["Logger","Message","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,97],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":109},{"p":["Logger","logLevel"],"f":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["logLevel",7],[": ",17],["Logger",18],[".",17],["Level",18]],"d":"Get or set the log level configured for this `Logger`.\n\n- note: `Logger`s treat `logLevel` as a value. This means that a change in `logLevel` will only affect this\n        very `Logger`. It is acceptable for logging backends to have some form of global log level override\n        that affects multiple or even all loggers. This means a change in `logLevel` to one `Logger` might in\n        certain cases have no effect."},{"p":["LoggingSystem","bootstrap(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["bootstrap",7],["(",17],["_",1],[" ",17],["factory",2],[": ",17],["@escaping",12],[" (",17],["String",18,97],[") -> ",17],["LogHandler",18,0],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["bootstrap",7],["((",17],["String",18],[") -> ",17],["LogHandler",18],[")",17]],"d":"`bootstrap` is a one-time configuration function which globally selects the desired logging backend\nimplementation. `bootstrap` can be called at maximum once in any given program, calling it more than once will\nlead to undefined behavior, most likely a crash.\n\n- parameters:\n    - factory: A closure that given a `Logger` identifier, produces an instance of the `LogHandler`."},{"p":["StreamLogHandler","standardError(label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["standardError",7],["(",17],["label",1],[": ",17],["String",18,97],[") -> ",17],["StreamLogHandler",18,5]],"s":[["static",12],[" ",17],["func",12],[" ",17],["standardError",7],["(",17],["label",1],[": ",17],["String",18],[") -> ",17],["StreamLogHandler",18]],"d":"Factory that makes a `StreamLogHandler` to directs its output to `stderr`"},{"p":["StreamLogHandler","standardOutput(label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["standardOutput",7],["(",17],["label",1],[": ",17],["String",18,97],[") -> ",17],["StreamLogHandler",18,5]],"s":[["static",12],[" ",17],["func",12],[" ",17],["standardOutput",7],["(",17],["label",1],[": ",17],["String",18],[") -> ",17],["StreamLogHandler",18]],"d":"Factory that makes a `StreamLogHandler` to directs its output to `stdout`"},{"p":["SwiftLogNoOpLogHandler","log(level:message:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"o":50},{"p":["LogHandler","log(level:message:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"a":{"a":{"d":true,"r":"log(level:message:metadata:source:file:function:line:)"}},"d":"SwiftLog 1.0 compatibility method. Please do _not_ implement, implement\n`log(level:message:metadata:source:file:function:line:)` instead."},{"p":["LogHandler","log(level:message:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["source",1],[": ",17],["String",18,97],[", ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": ",17],["String",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"This method is called when a `LogHandler` must emit a log message. There is no need for the `LogHandler` to\ncheck if the `level` is above or below the configured `logLevel` as `Logger` already performed this check and\ndetermined that a message should be logged.\n\n- parameters:\n    - level: The log level the message was logged at.\n    - message: The message to log. To obtain a `String` representation call `message.description`.\n    - metadata: The metadata associated to this log message.\n    - source: The source where the log message originated, for example the logging module.\n    - file: The file the log message was emitted from.\n    - function: The function the log line was emitted from.\n    - line: The line the log message was emitted from."},{"p":["LogHandler","log(level:message:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"a":{"a":{"d":true,"r":"log(level:message:metadata:source:file:function:line:)"}},"o":50},{"p":["LogHandler","log(level:message:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["source",1],[": ",17],["String",18,97],[", ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": ",17],["String",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"a":{"a":{"d":true,"m":"You should implement this method instead of using the default implementation"}},"o":51},{"p":["StreamLogHandler","log(level:message:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["source",1],[": ",17],["String",18,97],[", ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": ",17],["String",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"o":51},{"p":["MultiplexLogHandler","log(level:message:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["message",1],[": ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],["?, ",17],["source",1],[": ",17],["String",18,97],[", ",17],["file",1],[": ",17],["String",18,97],[", ",17],["function",1],[": ",17],["String",18,97],[", ",17],["line",1],[": ",17],["UInt",18,106],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", ",17],["message",1],[": ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": ",17],["String",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"o":51},{"p":["Logger","log(level:_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", () -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing the log level as a parameter.\n\nIf the `logLevel` passed to this method is more severe than the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - level: The log level to log `message` at. For the available log levels, see `Logger.Level`.\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","log(level:_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["log",7],["(",17],["level",1],[": ",17],["Logger",18],[".",17],["Level",18],[", () -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing the log level as a parameter.\n\nIf the `logLevel` passed to this method is more severe than the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - level: The log level to log `message` at. For the available log levels, see `Logger.Level`.\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","info(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["info",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["info",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.info` log level.\n\nIf `.info` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","info(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["info",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["info",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.info` log level.\n\nIf `.info` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","debug(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["debug",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["debug",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.debug` log level.\n\nIf `.debug` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","debug(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["debug",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["debug",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.debug` log level.\n\nIf `.debug` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","error(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["error",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["error",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.error` log level.\n\nIf `.error` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","error(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["error",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["error",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.error` log level.\n\nIf `.error` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","trace(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["trace",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["trace",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"If `.trace` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","trace(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["trace",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["trace",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.trace` log level.\n\nIf `.trace` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","notice(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["notice",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["notice",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.notice` log level.\n\nIf `.notice` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","notice(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["notice",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["notice",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.notice` log level.\n\nIf `.notice` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","warning(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["warning",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["warning",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.warning` log level.\n\nIf `.warning` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","warning(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["warning",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["warning",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.warning` log level.\n\nIf `.warning` is at least as severe as the `Logger`'s `logLevel`, it will be logged,\notherwise nothing will happen.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","critical(_:metadata:file:function:line:)"],"f":[["func",12],[" ",17],["critical",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["critical",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.critical` log level.\n\n`.critical` messages will always be logged.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","critical(_:metadata:source:file:function:line:)"],"f":[["func",12],[" ",17],["critical",7],["(",17],["_",1],[" ",17],["message",2],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Message",18,8],[", ",17],["metadata",1],[": ",17],["@autoclosure ",3],["() -> ",17],["Logger",18,7],[".",17],["Metadata",18,79],["? = nil, ",17],["source",1],[": ",17],["@autoclosure ",3],["() -> ",17],["String",18,97],["? = nil, ",17],["file",1],[": ",17],["String",18,97],[" = ",17],["#file",12],[", ",17],["function",1],[": ",17],["String",18,97],[" = ",17],["#function",12],[", ",17],["line",1],[": ",17],["UInt",18,106],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["critical",7],["(() -> ",17],["Logger",18],[".",17],["Message",18],[", ",17],["metadata",1],[": () -> ",17],["Logger",18],[".",17],["Metadata",18],["?, ",17],["source",1],[": () -> ",17],["String",18],["?, ",17],["file",1],[": ",17],["String",18],[", ",17],["function",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Log a message passing with the `Logger.Level.critical` log level.\n\n`.critical` messages will always be logged.\n\n- parameters:\n   - message: The message to be logged. `message` can be used with any string interpolation literal.\n   - metadata: One-off metadata to attach to this log message.\n   - source: The source this log messages originates to. Currently, it defaults to the folder containing the\n             file that is emitting the log message, which usually is the module.\n   - file: The file this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#file`).\n   - function: The function this log message originates from (there's usually no need to pass it explicitly as\n               it defaults to `#function`).\n   - line: The line this log message originates from (there's usually no need to pass it explicitly as it\n           defaults to `#line`)."},{"p":["Logger","MetadataValue","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],[", ",17],["rhs",2],[": ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81],[") -> ",17],["Bool",18,104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],[", ",17],["Logger",18],[".",17],["Metadata",18],[".",17],["Value",18],[") -> ",17],["Bool",18]],"o":95},{"p":["Logger","Level","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[", ",17],["rhs",2],[": ",17],["Logger",18,7],[".",17],["Level",18,3],[") -> ",17],["Bool",18,104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["Logger",18],[".",17],["Level",18],[", ",17],["Logger",18],[".",17],["Level",18],[") -> ",17],["Bool",18]],"o":85},{"p":["Logger","MetadataValue","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81]],"s":[["typealias",12],[" ",17],["Value",7]],"o":121},{"p":["Logger","MetadataValue","StringLiteralType"],"f":[["typealias",12],[" ",17],["StringLiteralType",7],[" = ",17],["String",18,97]],"s":[["typealias",12],[" ",17],["StringLiteralType",7]],"o":116},{"p":["Logger","MetadataValue","ArrayLiteralElement"],"f":[["typealias",12],[" ",17],["ArrayLiteralElement",7],[" = ",17],["Logger",18,7],[".",17],["Metadata",18,79],[".",17],["Value",18,81]],"s":[["typealias",12],[" ",17],["ArrayLiteralElement",7]],"o":113},{"p":["Logger","MetadataValue","Key"],"f":[["typealias",12],[" ",17],["Key",7],[" = ",17],["String",18,97]],"s":[["typealias",12],[" ",17],["Key",7]],"o":120},{"p":["Logger","Message","StringLiteralType"],"f":[["typealias",12],[" ",17],["StringLiteralType",7],[" = ",17],["String",18,97]],"s":[["typealias",12],[" ",17],["StringLiteralType",7]],"o":116},{"p":["Logger","Metadata"],"f":[["typealias",12],[" ",17],["Metadata",7],[" = [",17],["String",18,97],[" : ",17],["Logger",18,7],[".",17],["MetadataValue",18,2],["]",17]],"s":[["typealias",12],[" ",17],["Metadata",7]],"d":"`Metadata` is a typealias for `[String: Logger.MetadataValue]` the type of the metadata storage."}],"edges":{"conformer":[2,94,[],2,108,[],2,111,[],2,114,[],2,118,[],2,122,[],2,124,[],2,126,[],3,82,[],3,83,[],3,84,[],3,94,[],3,98,[],3,105,[],3,107,[],4,0,[],5,0,[],6,0,[],8,94,[],8,108,[],8,114,[],8,122,[],8,124,[],8,126,[]],"feature":[52,5,52,6,53,4,86,3,87,3,88,3,89,3,90,3,91,3,92,3,93,3,96,2,96,3,96,8,100,3,101,3,102,3,103,3,110,2,110,8,117,2,117,8,123,2,123,8,128,2,128,8],"member":[2,7,3,7,8,7,9,2,10,2,11,2,12,2,13,3,14,3,15,3,16,3,17,3,18,3,19,3,20,4,21,6,22,2,23,2,24,2,25,3,26,7,27,7,28,8,29,4,31,5,32,6,33,7,34,4,35,4,38,5,39,5,40,6,41,6,42,2,43,7,44,8,45,7,46,1,47,5,48,5,49,4,54,5,55,6,56,7,57,7,58,7,59,7,60,7,61,7,62,7,63,7,64,7,65,7,66,7,67,7,68,7,69,7,70,7,71,7,72,2,73,3,74,2,75,2,76,2,77,2,78,8,79,7],"requirement":[30,0,36,0,37,0,50,0,51,0],"defaultImplementation":[52,50,53,51]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-log@1.4.2/.build/checkouts/swift-log/Sources/Logging/LogHandler.swift","symbols":[115,16,0,128,9,51,139,9,50,148,4,30,154,8,37,162,8,36,167,16,53,178,16,52]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-log@1.4.2/.build/checkouts/swift-log/Sources/Logging/Logging.swift","symbols":[37,14,7,42,15,43,69,16,57,99,16,56,111,11,33,127,15,45,155,16,65,175,16,64,198,16,61,220,16,60,243,16,59,265,16,58,288,16,67,312,16,66,335,16,69,357,16,68,380,16,63,402,16,62,424,16,71,447,16,70,457,12,1,472,23,46,500,21,79,515,16,2,520,13,12,523,13,10,529,13,9,535,13,11,542,16,3,545,13,16,549,13,14,552,13,13,556,13,17,560,13,18,563,13,15,571,13,19,581,11,27,600,11,26,627,23,73,637,23,72,665,18,8,666,25,78,670,15,28,674,19,44,725,14,6,734,11,21,740,15,40,750,16,55,762,15,41,777,11,32,869,14,5,871,23,48,876,23,47,883,15,38,886,15,39,892,11,31,907,16,54,942,14,4,943,11,20,945,27,49,947,22,29,954,26,35,961,26,34,986,21,75,988,11,23,996,15,42,1017,21,77,1018,21,74,1020,11,24,1028,21,76,1030,11,22]}]}