{"culture":"NIOCore","dependencies":[{"package":"swift-nio","modules":["NIOConcurrencyHelpers"]}],"extensions":[],"partitions":[{"namespace":"_Concurrency","communities":[{"community":"method","startIndex":0,"endIndex":4}]},{"namespace":"Dispatch","communities":[{"community":"init","startIndex":4,"endIndex":5},{"community":"method","startIndex":5,"endIndex":6}]},{"namespace":"NIOCore","communities":[{"community":"protocol","startIndex":6,"endIndex":30},{"community":"associatedtype","startIndex":30,"endIndex":39},{"community":"enum","startIndex":39,"endIndex":60},{"community":"struct","startIndex":60,"endIndex":122},{"community":"class","startIndex":122,"endIndex":135},{"community":"enum.case","startIndex":135,"endIndex":195},{"community":"init","startIndex":195,"endIndex":282},{"community":"subscript","startIndex":282,"endIndex":289},{"community":"type.property","startIndex":289,"endIndex":351},{"community":"property","startIndex":351,"endIndex":485},{"community":"type.method","startIndex":485,"endIndex":509},{"community":"method","startIndex":509,"endIndex":1009},{"community":"type.op","startIndex":1009,"endIndex":1031},{"community":"typealias","startIndex":1031,"endIndex":1096}]},{"namespace":"Swift","communities":[{"community":"init","startIndex":1096,"endIndex":1098},{"community":"method","startIndex":1098,"endIndex":1100}]}],"identifiers":["sSci7NIOCoreAA10ByteBufferV7ElementRtzrlE7collect4upTo4intoySi_ACztYaKF","sSci7NIOCoreAA10ByteBufferV7ElementRtzrlE7collect4upToACSi_tYaKF","sSci7NIOCoreSk7ElementRpzs5UInt8VAB_ABRTzrlE7collect4upTo4intoySi_AA10ByteBufferVztYaKF","sSci7NIOCoreSk7ElementRpzs5UInt8VAB_ABRTzrlE7collect4upTo5usingAA10ByteBufferVSi_AA0hI9AllocatorVtYaKF","s8Dispatch0A4DataV7NIOCoreE6bufferAcD10ByteBufferV_tcfc","s8Dispatch0A5QueueC7NIOCoreE15asyncWithFuture9eventLoop_AD05EventhF0CyxGAD0iH0_p_xyKctlF","s7NIOCore11ChannelCoreP","s7NIOCore13ChannelOptionP","s7NIOCore14ChannelHandlerP","s7NIOCore14ChannelInvokerP","s7NIOCore14EventLoopGroupP","s7NIOCore14FileDescriptorP","s7NIOCore16MulticastChannelP","s7NIOCore20ByteToMessageDecoderP","s7NIOCore20MessageToByteEncoderP","s7NIOCore20NIOClientTLSProviderP","s7NIOCore20SocketOptionProviderP","s7NIOCore21ChannelInboundHandlerP","s7NIOCore21ChannelInboundInvokerP","s7NIOCore22ChannelOutboundHandlerP","s7NIOCore22ChannelOutboundInvokerP","s7NIOCore23RecvByteBufferAllocatorP","s7NIOCore23RemovableChannelHandlerP","s7NIOCore25NIOPreconcurrencySendableP","s7NIOCore28NIOSynchronousChannelOptionsP","s7NIOCore29NIOClientTCPBootstrapProtocolP","s7NIOCore33NIOSingleStepByteToMessageDecoderP","s7NIOCore34WriteObservingByteToMessageDecoderP","s7NIOCore7ChannelP","s7NIOCore9EventLoopP","s7NIOCore13ChannelOptionP5ValueQa","s7NIOCore20ByteToMessageDecoderP10InboundOutQa","s7NIOCore20MessageToByteEncoderP10OutboundInQa","s7NIOCore20NIOClientTLSProviderP9BootstrapQa","s7NIOCore21ChannelInboundHandlerP0C2InQa","s7NIOCore21ChannelInboundHandlerP0C3OutQa","s7NIOCore22ChannelOutboundHandlerP0C2InQa","s7NIOCore33NIOSingleStepByteToMessageDecoderP10InboundOutQa","s7NIOCore34WriteObservingByteToMessageDecoderP10OutboundInQa","s7NIOCore10EndiannessO","s7NIOCore12ChannelErrorO","s7NIOCore12ChannelEventO","s7NIOCore12NIOBSDSocketO","s7NIOCore13DecodingStateO","s7NIOCore13SocketAddressO","s7NIOCore14ChannelOptionsV5TypesO","s7NIOCore14ChannelOptionsV5TypesO22ConvenienceOptionValueO","s7NIOCore14EventLoopErrorO","s7NIOCore15ChannelPipelineC8PositionO","s7NIOCore16IdleStateHandlerC0bC5EventO","s7NIOCore18SocketAddressErrorO","s7NIOCore20ChannelPipelineErrorO","s7NIOCore20DatagramChannelErrorO","s7NIOCore25ByteToMessageDecoderErrorO","s7NIOCore25NIOEventLoopGroupProviderO","s7NIOCore38NIOExplicitCongestionNotificationStateO","s7NIOCore6IODataO","s7NIOCore6SystemO","s7NIOCore7IOErrorV18FailureDescriptionO","s7NIOCore9CloseModeO","s7NIOCore10ByteBufferV","s7NIOCore10ByteBufferV14CopyBytesErrorV","s7NIOCore10ByteBufferV17LengthPrefixErrorV","s7NIOCore10FileRegionV","s7NIOCore10TimeAmountV","s7NIOCore11NIODeadlineV","s7NIOCore12NIOBSDSocketO11OptionLevelV","s7NIOCore12NIOBSDSocketO13AddressFamilyV","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV","s7NIOCore12NIOBSDSocketO6OptionV","s7NIOCore13NIOFileHandleC4ModeV","s7NIOCore13NIOFileHandleC5FlagsV","s7NIOCore13NIOPacketInfoV","s7NIOCore13SocketAddressO04IPv4C0V","s7NIOCore13SocketAddressO04IPv6C0V","s7NIOCore13SocketAddressO04UnixbC0V","s7NIOCore14ByteBufferViewV","s7NIOCore14ChannelOptionsV","s7NIOCore14ChannelOptionsV014TCPConvenienceC0V","s7NIOCore14ChannelOptionsV20TCPConvenienceOptionV","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV","s7NIOCore14ChannelOptionsV5TypesO13BacklogOptionV","s7NIOCore14ChannelOptionsV5TypesO14AutoReadOptionV","s7NIOCore14ChannelOptionsV5TypesO15AllocatorOptionV","s7NIOCore14ChannelOptionsV5TypesO15WriteSpinOptionV","s7NIOCore14ChannelOptionsV5TypesO17ReceivePacketInfoV","s7NIOCore14ChannelOptionsV5TypesO19RecvAllocatorOptionV","s7NIOCore14ChannelOptionsV5TypesO20ConnectTimeoutOptionV","s7NIOCore14ChannelOptionsV5TypesO20WriteBufferWaterMarkV","s7NIOCore14ChannelOptionsV5TypesO24MaxMessagesPerReadOptionV","s7NIOCore14ChannelOptionsV5TypesO26WriteBufferWaterMarkOptionV","s7NIOCore14ChannelOptionsV5TypesO28AllowRemoteHalfClosureOptionV","s7NIOCore14ChannelOptionsV5TypesO36DatagramVectorReadMessageCountOptionV","s7NIOCore14ChannelOptionsV5TypesO37ExplicitCongestionNotificationsOptionV","s7NIOCore14ChannelOptionsV7StorageV","s7NIOCore14CircularBufferV","s7NIOCore14CircularBufferV5IndexV","s7NIOCore15ChannelPipelineC21SynchronousOperationsV","s7NIOCore16EventLoopPromiseV","s7NIOCore16NIOInsecureNoTLSV","s7NIOCore16NIONetworkDeviceV","s7NIOCore17AddressedEnvelopeV","s7NIOCore17AddressedEnvelopeV8MetadataV","s7NIOCore17EventLoopIteratorV","s7NIOCore18SocketAddressErrorO25FailedToParseIPByteBufferV","s7NIOCore19ByteBufferAllocatorV","s7NIOCore20DatagramChannelErrorO38WriteOnUnconnectedSocketWithoutAddressV","s7NIOCore20DatagramChannelErrorO40WriteOnConnectedSocketWithInvalidAddressV","s7NIOCore20MarkedCircularBufferV","s7NIOCore20NIOTooManyBytesErrorV","s7NIOCore21ChannelHandlerContextC12RemovalTokenV","s7NIOCore21NIOClientTCPBootstrapV","s7NIOCore25ByteToMessageDecoderErrorO015PayloadTooLargeF0V","s7NIOCore25ChannelShouldQuiesceEventV","s7NIOCore29NIOMulticastNotSupportedErrorV","s7NIOCore31AdaptiveRecvByteBufferAllocatorV","s7NIOCore31NIOMulticastNotImplementedErrorV","s7NIOCore32FixedSizeRecvByteBufferAllocatorV","s7NIOCore45NIOAttemptedToRemoveHandlerMultipleTimesErrorV","s7NIOCore6NIOAnyV","s7NIOCore7IOErrorV","s7NIOCore9ScheduledV","s7NIOCore12RepeatedTaskC","s7NIOCore13NIOFileHandleC","s7NIOCore15ChannelPipelineC","s7NIOCore15EventLoopFutureC","s7NIOCore16IdleStateHandlerC","s7NIOCore19BackPressureHandlerC","s7NIOCore19NIONetworkInterfaceC","s7NIOCore20AcceptBackoffHandlerC","s7NIOCore20ByteToMessageHandlerC","s7NIOCore20MessageToByteHandlerC","s7NIOCore21ChannelHandlerContextC","s7NIOCore22NIOCloseOnErrorHandlerC","s7NIOCore35NIOSingleStepByteToMessageProcessorC","s7NIOCore10EndiannessO3bigyA2CmF","s7NIOCore10EndiannessO6littleyA2CmF","s7NIOCore12ChannelErrorO010ioOnClosedB0yA2CmF","s7NIOCore12ChannelErrorO11inputClosedyA2CmF","s7NIOCore12ChannelErrorO12outputClosedyA2CmF","s7NIOCore12ChannelErrorO13alreadyClosedyA2CmF","s7NIOCore12ChannelErrorO14connectPendingyA2CmF","s7NIOCore12ChannelErrorO14connectTimeoutyAcA10TimeAmountVcACmF","s7NIOCore12ChannelErrorO18unremovableHandleryA2CmF","s7NIOCore12ChannelErrorO19unknownLocalAddressyA2CmF","s7NIOCore12ChannelErrorO20operationUnsupportedyA2CmF","s7NIOCore12ChannelErrorO20writeHostUnreachableyA2CmF","s7NIOCore12ChannelErrorO20writeMessageTooLargeyA2CmF","s7NIOCore12ChannelErrorO21multicastNotSupportedyAcA19NIONetworkInterfaceCcACmF","s7NIOCore12ChannelErrorO23illegalMulticastAddressyAcA06SocketF0OcACmF","s7NIOCore12ChannelErrorO25badInterfaceAddressFamilyyA2CmF","s7NIOCore12ChannelErrorO30badMulticastGroupAddressFamilyyA2CmF","s7NIOCore12ChannelErrorO30inappropriateOperationForStateyA2CmF","s7NIOCore12ChannelErrorO3eofyA2CmF","s7NIOCore12ChannelEventO11inputClosedyA2CmF","s7NIOCore12ChannelEventO12outputClosedyA2CmF","s7NIOCore13DecodingStateO12needMoreDatayA2CmF","s7NIOCore13DecodingStateO8continueyA2CmF","s7NIOCore13SocketAddressO010unixDomainB0yA2C04UnixbC0VcACmF","s7NIOCore13SocketAddressO2v4yA2C04IPv4C0VcACmF","s7NIOCore13SocketAddressO2v6yA2C04IPv6C0VcACmF","s7NIOCore14ChannelOptionsV5TypesO22ConvenienceOptionValueO3setyAGy__xGxcAImlF","s7NIOCore14ChannelOptionsV5TypesO22ConvenienceOptionValueO6notSetyAGy__xGAImlF","s7NIOCore14EventLoopErrorO14shutdownFailedyA2CmF","s7NIOCore14EventLoopErrorO20unsupportedOperationyA2CmF","s7NIOCore14EventLoopErrorO8shutdownyA2CmF","s7NIOCore14EventLoopErrorO9cancelledyA2CmF","s7NIOCore15ChannelPipelineC8PositionO4lastyA2EmF","s7NIOCore15ChannelPipelineC8PositionO5afteryAeA0B7Handler_pcAEmF","s7NIOCore15ChannelPipelineC8PositionO5firstyA2EmF","s7NIOCore15ChannelPipelineC8PositionO6beforeyAeA0B7Handler_pcAEmF","s7NIOCore16IdleStateHandlerC0bC5EventO3allyA2EmF","s7NIOCore16IdleStateHandlerC0bC5EventO4readyA2EmF","s7NIOCore16IdleStateHandlerC0bC5EventO5writeyA2EmF","s7NIOCore18SocketAddressErrorO010unixDomainB11PathTooLongyA2CmF","s7NIOCore18SocketAddressErrorO11unsupportedyA2CmF","s7NIOCore18SocketAddressErrorO21failedToParseIPStringyACSScACmF","s7NIOCore18SocketAddressErrorO7unknownyACSS_SitcACmF","s7NIOCore20ChannelPipelineErrorO14alreadyRemovedyA2CmF","s7NIOCore20ChannelPipelineErrorO8notFoundyA2CmF","s7NIOCore25ByteToMessageDecoderErrorO014dataReceivedInF5StateyACs0F0_p_AA0B6BufferVtcACmF","s7NIOCore25ByteToMessageDecoderErrorO20leftoverDataWhenDoneyAcA0B6BufferVcACmF","s7NIOCore25NIOEventLoopGroupProviderO6sharedyAcA05EventcD0_pcACmF","s7NIOCore25NIOEventLoopGroupProviderO9createNewyA2CmF","s7NIOCore38NIOExplicitCongestionNotificationStateO19transportNotCapableyA2CmF","s7NIOCore38NIOExplicitCongestionNotificationStateO21congestionExperiencedyA2CmF","s7NIOCore38NIOExplicitCongestionNotificationStateO21transportCapableFlag0yA2CmF","s7NIOCore38NIOExplicitCongestionNotificationStateO21transportCapableFlag1yA2CmF","s7NIOCore6IODataO10byteBufferyAcA04ByteD0VcACmF","s7NIOCore6IODataO10fileRegionyAcA04FileD0VcACmF","s7NIOCore7IOErrorV18FailureDescriptionO6reasonyAESScAEmF","s7NIOCore7IOErrorV18FailureDescriptionO8functionyAEs12StaticStringVcAEmF","s7NIOCore9CloseModeO3allyA2CmF","s7NIOCore9CloseModeO5inputyA2CmF","s7NIOCore9CloseModeO6outputyA2CmF","s7NIOCore10ByteBufferV12dispatchDataAC8Dispatch0fE0V_tcfc","s7NIOCore10ByteBufferV12staticStringACs06StaticE0V_tcfc","s7NIOCore10ByteBufferV5bytesACx_tcSTRzs5UInt8V7ElementRtzlufc","s7NIOCore10ByteBufferV6bufferA2C_tcfc","s7NIOCore10ByteBufferV6stringACSS_tcfc","s7NIOCore10ByteBufferV7integer10endianness2asACx_AA10EndiannessOxmtcs17FixedWidthIntegerRzlufc","s7NIOCore10ByteBufferV9repeating5countACs5UInt8V_Sitcfc","s7NIOCore10ByteBufferV9substringACSs_tcfc","s7NIOCore10ByteBufferVACycfc","s7NIOCore10ByteBufferVyAcA0bC4ViewVcfc","s7NIOCore10FileRegionV10fileHandle11readerIndex03endG0AcA07NIOFileE0C_S2itcfc","s7NIOCore10FileRegionV10fileHandleAcA07NIOFileE0C_tKcfc","s7NIOCore12NIOBSDSocketO11OptionLevelV8rawValueAEs5Int32V_tcfc","s7NIOCore12NIOBSDSocketO13AddressFamilyV8rawValueAEs5Int32V_tcfc","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV8rawValueAEs5Int32V_tcfc","s7NIOCore12NIOBSDSocketO6OptionV8rawValueAEs5Int32V_tcfc","s7NIOCore13NIOFileHandleC10descriptorACs5Int32V_tcfc","s7NIOCore13NIOFileHandleC4ModeV8rawValueAEs5UInt8V_tcfc","s7NIOCore13NIOFileHandleC4path4mode5flagsACSS_AC4ModeVAC5FlagsVtKcfc","s7NIOCore13NIOFileHandleC4pathACSS_tKcfc","s7NIOCore13NIOPacketInfoV18destinationAddress14interfaceIndexAcA06SocketE0O_Sitcfc","s7NIOCore13SocketAddressO010unixDomainB4PathACSS_tKcfc","s7NIOCore13SocketAddressO02ipC04portACSS_SitKcfc","s7NIOCore13SocketAddressO15packedIPAddress4portAcA10ByteBufferV_SitKcfc","s7NIOCore13SocketAddressO_4hostACSo11sockaddr_inV_SStcfc","s7NIOCore13SocketAddressO_4hostACSo12sockaddr_in6V_SStcfc","s7NIOCore13SocketAddressOyACSo11sockaddr_inVcfc","s7NIOCore13SocketAddressOyACSo11sockaddr_unVcfc","s7NIOCore13SocketAddressOyACSo12sockaddr_in6Vcfc","s7NIOCore14ByteBufferViewV12arrayLiteralACs5UInt8Vd_tcfc","s7NIOCore14ByteBufferViewVACycfc","s7NIOCore14ByteBufferViewVyAcA0bC0Vcfc","s7NIOCore14ChannelOptionsV014TCPConvenienceC0V12arrayLiteralAeC0D6OptionVd_tcfc","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV5level4nameAGSi_s5Int32Vtcfc","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV5level4nameAgA12NIOBSDSocketO0F5LevelV_AK0F0Vtcfc","s7NIOCore14ChannelOptionsV5TypesO13BacklogOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO14AutoReadOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO15AllocatorOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO15WriteSpinOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO17ReceivePacketInfoVAGycfc","s7NIOCore14ChannelOptionsV5TypesO19RecvAllocatorOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO20ConnectTimeoutOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO20WriteBufferWaterMarkV3low4highAGSi_Sitcfc","s7NIOCore14ChannelOptionsV5TypesO24MaxMessagesPerReadOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO26WriteBufferWaterMarkOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO28AllowRemoteHalfClosureOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO36DatagramVectorReadMessageCountOptionVAGycfc","s7NIOCore14ChannelOptionsV5TypesO37ExplicitCongestionNotificationsOptionVAGycfc","s7NIOCore14ChannelOptionsV7StorageVAEycfc","s7NIOCore14CircularBufferV12arrayLiteralACyxGxd_tcfc","s7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","s7NIOCore14CircularBufferVACyxGycfc","s7NIOCore15ChannelPipelineC7channelAcA0B0_p_tcfc","s7NIOCore16IdleStateHandlerC11readTimeout05writeF003allF0AcA10TimeAmountVSg_A2Itcfc","s7NIOCore16NIOInsecureNoTLSVACyxGycfc","s7NIOCore16NIONetworkDeviceV4name7address7netmask16broadcastAddress023pointToPointDestinationH018multicastSupported14interfaceIndexACSS_AA06SocketH0OSgA2mLSbSitcfc","s7NIOCore16NIONetworkDeviceVyAcA0B9InterfaceCcfc","s7NIOCore17AddressedEnvelopeV13remoteAddress4data8metadataACyxGAA06SocketE0O_xAC8MetadataVyx_GSgtcfc","s7NIOCore17AddressedEnvelopeV13remoteAddress4dataACyxGAA06SocketE0O_xtcfc","s7NIOCore17AddressedEnvelopeV8MetadataV8ecnState10packetInfoAEyx_GAA033NIOExplicitCongestionNotificationF0O_AA09NIOPacketH0VSgtcfc","s7NIOCore17AddressedEnvelopeV8MetadataV8ecnStateAEyx_GAA033NIOExplicitCongestionNotificationF0O_tcfc","s7NIOCore17EventLoopIteratorVyACSayAA0bC0_pGcfc","s7NIOCore18SocketAddressErrorO25FailedToParseIPByteBufferV7addressAeA04ByteI0V_tcfc","s7NIOCore19BackPressureHandlerCACycfc","s7NIOCore19ByteBufferAllocatorVACycfc","s7NIOCore20AcceptBackoffHandlerC15backoffProviderAcA10TimeAmountVSgAA7IOErrorVc_tcfc","s7NIOCore20ByteToMessageHandlerC_17maximumBufferSizeACyxGx_SiSgtcfc","s7NIOCore20ByteToMessageHandlerCyACyxGxcfc","s7NIOCore20DatagramChannelErrorO38WriteOnUnconnectedSocketWithoutAddressVAEycfc","s7NIOCore20DatagramChannelErrorO40WriteOnConnectedSocketWithInvalidAddressV014envelopeRemoteK009connectedmK0AeA0hK0O_AItcfc","s7NIOCore20MarkedCircularBufferV15initialCapacityACyxGSi_tcfc","s7NIOCore20MessageToByteHandlerCyACyxGxcfc","s7NIOCore20NIOTooManyBytesErrorVACycfc","s7NIOCore21NIOClientTCPBootstrapV_3tlsACx_q_tcAA0bC8ProtocolRz9BootstrapQy_RszAA0B11TLSProviderR_r0_lufc","s7NIOCore22NIOCloseOnErrorHandlerCACycfc","s7NIOCore25ByteToMessageDecoderErrorO015PayloadTooLargeF0VAEycfc","s7NIOCore25ChannelShouldQuiesceEventVACycfc","s7NIOCore29NIOMulticastNotSupportedErrorV6deviceAcA16NIONetworkDeviceV_tcfc","s7NIOCore31AdaptiveRecvByteBufferAllocatorV7minimum7initial7maximumACSi_S2itcfc","s7NIOCore31AdaptiveRecvByteBufferAllocatorVACycfc","s7NIOCore31NIOMulticastNotImplementedErrorVACycfc","s7NIOCore32FixedSizeRecvByteBufferAllocatorV8capacityACSi_tcfc","s7NIOCore35NIOSingleStepByteToMessageProcessorC_17maximumBufferSizeACyxGx_SiSgtcfc","s7NIOCore6NIOAnyVyACxclufc","s7NIOCore7IOErrorV9errnoCode6reasonACs5Int32V_SStcfc","s7NIOCore7IOErrorV9errnoCode8functionACs5Int32V_s12StaticStringVtcfc","s7NIOCore9ScheduledV7promise16cancellationTaskACyxGAA16EventLoopPromiseVyxG_yyctcfc","s7NIOCore14ByteBufferViewVyACSnySiGcip","s7NIOCore14ByteBufferViewVys5UInt8VSicip","s7NIOCore14CircularBufferV6offsetxSi_tcip","s7NIOCore14CircularBufferVyACyxGSnyAC5IndexVyx_GGcip","s7NIOCore14CircularBufferVyxAC5IndexVyx_Gcip","s7NIOCore20MarkedCircularBufferVyAA0cD0VyxGSnyAE5IndexVyx_GGcip","s7NIOCore20MarkedCircularBufferVyxAA0cD0V5IndexVyx_Gcip","s7NIOCore10ByteBufferV14CopyBytesErrorV016unreadableSourceE0AEvpZ","s7NIOCore10ByteBufferV14CopyBytesErrorV14negativeLengthAEvpZ","s7NIOCore10ByteBufferV17LengthPrefixErrorV07messageD42DoesNotFitExactlyIntoRequiredIntegerFormatAEvpZ","s7NIOCore10ByteBufferV17LengthPrefixErrorV33messageCouldNotBeReadSuccessfullyAEvpZ","s7NIOCore10EndiannessO4hostACvpZ","s7NIOCore10TimeAmountV4zeroACvpZ","s7NIOCore11NIODeadlineV11distantPastACvpZ","s7NIOCore11NIODeadlineV13distantFutureACvpZ","s7NIOCore12NIOBSDSocketO11OptionLevelV2ipAEvpZ","s7NIOCore12NIOBSDSocketO11OptionLevelV3tcpAEvpZ","s7NIOCore12NIOBSDSocketO11OptionLevelV4ipv6AEvpZ","s7NIOCore12NIOBSDSocketO11OptionLevelV6socketAEvpZ","s7NIOCore12NIOBSDSocketO13AddressFamilyV4inetAEvpZ","s7NIOCore12NIOBSDSocketO13AddressFamilyV4unixAEvpZ","s7NIOCore12NIOBSDSocketO13AddressFamilyV5inet6AEvpZ","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV4inetAEvpZ","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV4unixAEvpZ","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV5inet6AEvpZ","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV5localAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV11ipv6_v6onlyAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV11so_rcvtimeoAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV11tcp_nodelayAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV12so_keepaliveAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV12so_reuseaddrAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV12so_timestampAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV15ip_multicast_ifAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV15ipv6_join_groupAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV16ip_multicast_ttlAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV16ipv6_leave_groupAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV17ip_add_membershipAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV17ip_multicast_loopAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV17ipv6_multicast_ifAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV18ip_drop_membershipAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV19ipv6_multicast_hopsAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV19ipv6_multicast_loopAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV8so_errorAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV8tcp_infoAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV9so_lingerAEvpZ","s7NIOCore12NIOBSDSocketO6OptionV9so_rcvbufAEvpZ","s7NIOCore13NIOFileHandleC4ModeV4readAEvpZ","s7NIOCore13NIOFileHandleC4ModeV5writeAEvpZ","s7NIOCore13NIOFileHandleC5FlagsV18defaultPermissionss6UInt32VvpZ","s7NIOCore13NIOFileHandleC5FlagsV7defaultAEvpZ","s7NIOCore14ChannelOptionsV12socketOptionyAC5TypesO06SocketE0VAA12NIOBSDSocketO0E0VcvpZ","s7NIOCore14ChannelOptionsV13recvAllocatorAC5TypesO04RecvE6OptionVvpZ","s7NIOCore14ChannelOptionsV14connectTimeoutAC5TypesO07ConnectE6OptionVvpZ","s7NIOCore14ChannelOptionsV17receivePacketInfoAC5TypesO07ReceiveeF0VvpZ","s7NIOCore14ChannelOptionsV18maxMessagesPerReadAC5TypesO03MaxefG6OptionVvpZ","s7NIOCore14ChannelOptionsV20TCPConvenienceOptionV15disableAutoReadAEvpZ","s7NIOCore14ChannelOptionsV20TCPConvenienceOptionV22allowRemoteHalfClosureAEvpZ","s7NIOCore14ChannelOptionsV20TCPConvenienceOptionV23allowLocalEndpointReuseAEvpZ","s7NIOCore14ChannelOptionsV20writeBufferWaterMarkAC5TypesO05WriteefG6OptionVvpZ","s7NIOCore14ChannelOptionsV22allowRemoteHalfClosureAC5TypesO05AllowefG6OptionVvpZ","s7NIOCore14ChannelOptionsV30datagramVectorReadMessageCountAC5TypesO08DatagramefgH6OptionVvpZ","s7NIOCore14ChannelOptionsV30explicitCongestionNotificationAC5TypesO08ExplicitE19NotificationsOptionVvpZ","s7NIOCore14ChannelOptionsV6socketyAC5TypesO12SocketOptionVSi_s5Int32VtcvpZ","s7NIOCore14ChannelOptionsV7backlogAC5TypesO13BacklogOptionVvpZ","s7NIOCore14ChannelOptionsV8autoReadAC5TypesO04AutoE6OptionVvpZ","s7NIOCore14ChannelOptionsV9allocatorAC5TypesO15AllocatorOptionVvpZ","s7NIOCore14ChannelOptionsV9tcpOptionyAC5TypesO06SocketE0VAA12NIOBSDSocketO0E0VcvpZ","s7NIOCore14ChannelOptionsV9writeSpinAC5TypesO05WriteE6OptionVvpZ","s7NIOCore6SystemO9coreCountSivpZ","s7NIOCore10ByteBufferV11descriptionSSvp","s7NIOCore10ByteBufferV11readerIndexSivp","s7NIOCore10ByteBufferV11writerIndexSivp","s7NIOCore10ByteBufferV13readableBytesSivp","s7NIOCore10ByteBufferV13writableBytesSivp","s7NIOCore10ByteBufferV14CopyBytesErrorV16debugDescriptionSSvp","s7NIOCore10ByteBufferV15storageCapacitySivp","s7NIOCore10ByteBufferV16debugDescriptionSSvp","s7NIOCore10ByteBufferV17readableBytesViewAA0bcF0Vvp","s7NIOCore10ByteBufferV8capacitySivp","s7NIOCore10FileRegionV10fileHandleAA07NIOFileE0Cvp","s7NIOCore10FileRegionV11descriptionSSvp","s7NIOCore10FileRegionV11readerIndexSivp","s7NIOCore10FileRegionV13readableBytesSivp","s7NIOCore10FileRegionV8endIndexSivp","s7NIOCore10TimeAmountV11nanosecondss5Int64Vvp","s7NIOCore11NIODeadlineV11descriptionSSvp","s7NIOCore11NIODeadlineV17uptimeNanosecondss6UInt64Vvp","s7NIOCore12NIOBSDSocketO11OptionLevelV8rawValues5Int32Vvp","s7NIOCore12NIOBSDSocketO13AddressFamilyV8rawValues5Int32Vvp","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV8rawValues5Int32Vvp","s7NIOCore12NIOBSDSocketO6OptionV8rawValues5Int32Vvp","s7NIOCore13NIOFileHandleC11descriptionSSvp","s7NIOCore13NIOFileHandleC4ModeV8rawValues5UInt8Vvp","s7NIOCore13NIOFileHandleC6isOpenSbvp","s7NIOCore13NIOPacketInfoV14interfaceIndexSivp","s7NIOCore13NIOPacketInfoV18destinationAddressAA06SocketE0Ovp","s7NIOCore13SocketAddressO02ipC0SSSgvp","s7NIOCore13SocketAddressO04IPv4C0V4hostSSvp","s7NIOCore13SocketAddressO04IPv4C0V7addressSo11sockaddr_inVvp","s7NIOCore13SocketAddressO04IPv6C0V4hostSSvp","s7NIOCore13SocketAddressO04IPv6C0V7addressSo12sockaddr_in6Vvp","s7NIOCore13SocketAddressO04UnixbC0V7addressSo11sockaddr_unVvp","s7NIOCore13SocketAddressO11descriptionSSvp","s7NIOCore13SocketAddressO11isMulticastSbvp","s7NIOCore13SocketAddressO14protocolFamilys5Int32Vvp","s7NIOCore13SocketAddressO4portSiSgvp","s7NIOCore13SocketAddressO8pathnameSSSgvp","s7NIOCore13SocketAddressO8protocolAA12NIOBSDSocketO14ProtocolFamilyVvp","s7NIOCore14ByteBufferViewV10startIndexSivp","s7NIOCore14ByteBufferViewV5countSivp","s7NIOCore14ByteBufferViewV8endIndexSivp","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV10optionNameAA12NIOBSDSocketO0F0Vvp","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV11optionLevelAA12NIOBSDSocketO0fH0Vvp","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV4names5Int32Vvp","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV5levelSivp","s7NIOCore14ChannelOptionsV5TypesO20WriteBufferWaterMarkV3lowSivp","s7NIOCore14ChannelOptionsV5TypesO20WriteBufferWaterMarkV4highSivp","s7NIOCore14ChannelOptionsV5TypesO22ConvenienceOptionValueOAAytRszlE5isSetSbvp","s7NIOCore14CircularBufferV10startIndexAC0E0Vyx_Gvp","s7NIOCore14CircularBufferV11descriptionSSvp","s7NIOCore14CircularBufferV5countSivp","s7NIOCore14CircularBufferV5firstxSgvp","s7NIOCore14CircularBufferV7isEmptySbvp","s7NIOCore14CircularBufferV8capacitySivp","s7NIOCore14CircularBufferV8endIndexAC0E0Vyx_Gvp","s7NIOCore14EventLoopErrorO11descriptionSSvp","s7NIOCore14EventLoopGroupPAAE11descriptionSSvp","s7NIOCore14FileDescriptorP6isOpenSbvp","s7NIOCore15ChannelPipelineC14syncOperationsAC011SynchronousE0Vvp","s7NIOCore15ChannelPipelineC16debugDescriptionSSvp","s7NIOCore15ChannelPipelineC21SynchronousOperationsV9eventLoopAA05EventG0_pvp","s7NIOCore15ChannelPipelineC9eventLoopAA05EventE0_pvp","s7NIOCore15EventLoopFutureC05eventC0AA0bC0_pvp","s7NIOCore16EventLoopPromiseV12futureResultAA0bC6FutureCyxGvp","s7NIOCore16IdleStateHandlerC10allTimeoutAA10TimeAmountVSgvp","s7NIOCore16IdleStateHandlerC11readTimeoutAA10TimeAmountVSgvp","s7NIOCore16IdleStateHandlerC12writeTimeoutAA10TimeAmountVSgvp","s7NIOCore16NIONetworkDeviceV14interfaceIndexSivp","s7NIOCore16NIONetworkDeviceV16broadcastAddressAA06SocketE0OSgvp","s7NIOCore16NIONetworkDeviceV16debugDescriptionSSvp","s7NIOCore16NIONetworkDeviceV18multicastSupportedSbvp","s7NIOCore16NIONetworkDeviceV30pointToPointDestinationAddressAA06SocketH0OSgvp","s7NIOCore16NIONetworkDeviceV4nameSSvp","s7NIOCore16NIONetworkDeviceV7addressAA13SocketAddressOSgvp","s7NIOCore16NIONetworkDeviceV7netmaskAA13SocketAddressOSgvp","s7NIOCore17AddressedEnvelopeV11descriptionSSvp","s7NIOCore17AddressedEnvelopeV13remoteAddressAA06SocketE0Ovp","s7NIOCore17AddressedEnvelopeV4dataxvp","s7NIOCore17AddressedEnvelopeV8MetadataV10packetInfoAA09NIOPacketF0VSgvp","s7NIOCore17AddressedEnvelopeV8MetadataV8ecnStateAA033NIOExplicitCongestionNotificationF0Ovp","s7NIOCore17AddressedEnvelopeV8metadataAC8MetadataVyx_GSgvp","s7NIOCore18SocketAddressErrorO25FailedToParseIPByteBufferV7addressAA04ByteI0Vvp","s7NIOCore19NIONetworkInterfaceC14interfaceIndexSivp","s7NIOCore19NIONetworkInterfaceC16broadcastAddressAA06SocketE0OSgvp","s7NIOCore19NIONetworkInterfaceC16debugDescriptionSSvp","s7NIOCore19NIONetworkInterfaceC18multicastSupportedSbvp","s7NIOCore19NIONetworkInterfaceC30pointToPointDestinationAddressAA06SocketH0OSgvp","s7NIOCore19NIONetworkInterfaceC4nameSSvp","s7NIOCore19NIONetworkInterfaceC7addressAA13SocketAddressOvp","s7NIOCore19NIONetworkInterfaceC7netmaskAA13SocketAddressOSgvp","s7NIOCore20MarkedCircularBufferV10startIndexAA0cD0V0F0Vyx_Gvp","s7NIOCore20MarkedCircularBufferV11descriptionSSvp","s7NIOCore20MarkedCircularBufferV13markedElementxSgvp","s7NIOCore20MarkedCircularBufferV18markedElementIndexAA0cD0V0G0Vyx_GSgvp","s7NIOCore20MarkedCircularBufferV5countSivp","s7NIOCore20MarkedCircularBufferV5firstxSgvp","s7NIOCore20MarkedCircularBufferV7hasMarkSbvp","s7NIOCore20MarkedCircularBufferV7isEmptySbvp","s7NIOCore20MarkedCircularBufferV8endIndexAA0cD0V0F0Vyx_Gvp","s7NIOCore20SocketOptionProviderP9eventLoopAA05EventF0_pvp","s7NIOCore21ChannelHandlerContextC12localAddressAA06SocketF0OSgvp","s7NIOCore21ChannelHandlerContextC13remoteAddressAA06SocketF0OSgvp","s7NIOCore21ChannelHandlerContextC4nameSSvp","s7NIOCore21ChannelHandlerContextC7channelAA0B0_pvp","s7NIOCore21ChannelHandlerContextC7handlerAA0bC0_pvp","s7NIOCore21ChannelHandlerContextC8pipelineAA0B8PipelineCvp","s7NIOCore21ChannelHandlerContextC9eventLoopAA05EventF0_pvp","s7NIOCore21NIOClientTCPBootstrapV19underlyingBootstrapAA0bC8Protocol_pvp","s7NIOCore22ChannelOutboundInvokerP9eventLoopAA05EventF0_pvp","s7NIOCore29NIOMulticastNotSupportedErrorV6deviceAA16NIONetworkDeviceVvp","s7NIOCore31AdaptiveRecvByteBufferAllocatorV7initialSivp","s7NIOCore31AdaptiveRecvByteBufferAllocatorV7maximumSivp","s7NIOCore31AdaptiveRecvByteBufferAllocatorV7minimumSivp","s7NIOCore32FixedSizeRecvByteBufferAllocatorV8capacitySivp","s7NIOCore6IODataO11descriptionSSvp","s7NIOCore6IODataO13readableBytesSivp","s7NIOCore6NIOAnyV11descriptionSSvp","s7NIOCore7ChannelP10isWritableSbvp","s7NIOCore7ChannelP11closeFutureAA09EventLoopD0CyytGvp","s7NIOCore7ChannelP11syncOptionsAA014NIOSynchronousbD0_pSgvp","s7NIOCore7ChannelP12localAddressAA06SocketD0OSgvp","s7NIOCore7ChannelP13remoteAddressAA06SocketD0OSgvp","s7NIOCore7ChannelP6parentAaB_pSgvp","s7NIOCore7ChannelP8isActiveSbvp","s7NIOCore7ChannelP8pipelineAA0B8PipelineCvp","s7NIOCore7ChannelP9allocatorAA19ByteBufferAllocatorVvp","s7NIOCore7ChannelPAAE11syncOptionsAA014NIOSynchronousbD0_pSgvp","s7NIOCore7IOErrorV11descriptionSSvp","s7NIOCore7IOErrorV20localizedDescriptionSSvp","s7NIOCore7IOErrorV6reasonAC18FailureDescriptionOvp","s7NIOCore7IOErrorV9errnoCodes5Int32Vvp","s7NIOCore9EventLoopP02inbC0Sbvp","s7NIOCore9ScheduledV12futureResultAA15EventLoopFutureCyxGvp","s7NIOCore10TimeAmountV11nanosecondsyACs5Int64VFZ","s7NIOCore10TimeAmountV12microsecondsyACs5Int64VFZ","s7NIOCore10TimeAmountV12millisecondsyACs5Int64VFZ","s7NIOCore10TimeAmountV5hoursyACs5Int64VFZ","s7NIOCore10TimeAmountV7minutesyACs5Int64VFZ","s7NIOCore10TimeAmountV7secondsyACs5Int64VFZ","s7NIOCore11NIODeadlineV17uptimeNanosecondsyACs6UInt64VFZ","s7NIOCore11NIODeadlineV3nowACyFZ","s7NIOCore13NIOFileHandleC5FlagsV17allowFileCreation9posixModeAEs6UInt32V_tFZ","s7NIOCore13NIOFileHandleC5FlagsV5posix5flags4modeAEs5Int32V_s6UInt32VtFZ","s7NIOCore13SocketAddressO04makeC13ResolvingHost_4portACSS_SitKFZ","s7NIOCore15EventLoopFutureC13andAllSucceed_2onACyytGSayACyxGG_AA0bC0_ptFZ","s7NIOCore15EventLoopFutureC13andAllSucceed_7promiseySayACyxGG_AA0bC7PromiseVyytGtFZ","s7NIOCore15EventLoopFutureC14andAllComplete_2onACyytGSayACyxGG_AA0bC0_ptFZ","s7NIOCore15EventLoopFutureC14andAllComplete_7promiseySayACyxGG_AA0bC7PromiseVyytGtFZ","s7NIOCore15EventLoopFutureC14whenAllSucceed_2onACySayxGGSayACyxGG_AA0bC0_ptFZ","s7NIOCore15EventLoopFutureC14whenAllSucceed_7promiseySayACyxGG_AA0bC7PromiseVySayxGGtFZ","s7NIOCore15EventLoopFutureC15whenAllComplete_2onACySays6ResultOyxs5Error_pGGGSayACyxGG_AA0bC0_ptFZ","s7NIOCore15EventLoopFutureC15whenAllComplete_7promiseySayACyxGG_AA0bC7PromiseVySays6ResultOyxs5Error_pGGGtFZ","s7NIOCore15EventLoopFutureC6reduce4into_2on_ACyxGx_SayACyqd__GGAA0bC0_pyxz_qd__tctlFZ","s7NIOCore15EventLoopFutureC6reduce__2on_ACyxGx_SayACyqd__GGAA0bC0_pxx_qd__tctlFZ","s7NIOCore20AcceptBackoffHandlerC07defaultC8Provider5errorAA10TimeAmountVSgAA7IOErrorV_tFZ","s7NIOCore6SystemO16enumerateDevicesSayAA16NIONetworkDeviceVGyKFZ","s7NIOCore6SystemO19enumerateInterfacesSayAA19NIONetworkInterfaceCGyKFZ","s7NIOCore10ByteBufferV012setRepeatingB0_5count2atSis5UInt8V_S2itF","s7NIOCore10ByteBufferV014writeImmutableC0ySiACF","s7NIOCore10ByteBufferV014writeRepeatingB0_5countSis5UInt8V_SitF","s7NIOCore10ByteBufferV03setC0_2atSiAC_SitF","s7NIOCore10ByteBufferV05writeC0ySiACzF","s7NIOCore10ByteBufferV10getInteger2at10endianness2asxSgSi_AA10EndiannessOxmts010FixedWidthE0RzlF","s7NIOCore10ByteBufferV10readString6lengthSSSgSi_tF","s7NIOCore10ByteBufferV10setInteger_2at10endianness2asSix_SiAA10EndiannessOxmts010FixedWidthE0RzlF","s7NIOCore10ByteBufferV10writeBytesySiSWF","s7NIOCore10ByteBufferV10writeBytesySixSTRzs5UInt8V7ElementRtzlF","s7NIOCore10ByteBufferV11readInteger10endianness2asxSgAA10EndiannessO_xmts010FixedWidthE0RzlF","s7NIOCore10ByteBufferV11writeStringySiSSF","s7NIOCore10ByteBufferV12setSubstring_2atSiSs_SitF","s7NIOCore10ByteBufferV12writeInteger_10endianness2asSix_AA10EndiannessOxmts010FixedWidthE0RzlF","s7NIOCore10ByteBufferV14writeSubstringySiSsF","s7NIOCore10ByteBufferV15getDispatchData2at6length0E00eF0VSgSi_SitF","s7NIOCore10ByteBufferV15moveReaderIndex2toySi_tF","s7NIOCore10ByteBufferV15moveReaderIndex9forwardByySi_tF","s7NIOCore10ByteBufferV15moveWriterIndex2toySi_tF","s7NIOCore10ByteBufferV15moveWriterIndex9forwardByySi_tF","s7NIOCore10ByteBufferV15reserveCapacity20minimumWritableBytesySi_tF","s7NIOCore10ByteBufferV15reserveCapacityyySiF","s7NIOCore10ByteBufferV15setDispatchData_2atSi0E00eF0V_SitF","s7NIOCore10ByteBufferV15setStaticString_2atSis0eF0V_SitF","s7NIOCore10ByteBufferV16discardReadBytesSbyF","s7NIOCore10ByteBufferV16readDispatchData6length0E00eF0VSgSi_tF","s7NIOCore10ByteBufferV17writeDispatchDataySi0E00eF0VF","s7NIOCore10ByteBufferV17writeStaticStringySis0eF0VF","s7NIOCore10ByteBufferV18readLengthPrefixed10endianness2as0D7Messageq_SgAA10EndiannessO_xmAhCKXEtKs17FixedWidthIntegerRzr0_lF","s7NIOCore10ByteBufferV19withVeryUnsafeBytesyxxSWKXEKlF","s7NIOCore10ByteBufferV19writeLengthPrefixed10endianness2as0D7MessageSiAA10EndiannessO_xmSiACzKXEtKs17FixedWidthIntegerRzlF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_sAJR8_sAJR9_sAJR10_sAJR11_sAJR12_r13_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_sAJR8_sAJR9_sAJR10_sAJR11_r12_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_sAJR8_sAJR9_sAJR10_r11_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_sAJR8_sAJR9_r10_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_sAJR8_r9_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_q7_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_q7_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_sAJR7_r8_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_q6_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_q6_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_sAJR6_r7_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_q5_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_q5_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_sAJR5_r6_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_q4_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_q4_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_sAJR4_r5_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_q3_tSgAA10EndiannessO_x_q_q0_q1_q2_q3_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_sAJR3_r4_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_q2_tSgAA10EndiannessO_x_q_q0_q1_q2_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_sAJR2_r3_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_q1_tSgAA10EndiannessO_x_q_q0_q1_tmts17FixedWidthIntegerRzsAJR_sAJR0_sAJR1_r2_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_q0_tSgAA10EndiannessO_x_q_q0_tmts17FixedWidthIntegerRzsAJR_sAJR0_r1_lF","s7NIOCore10ByteBufferV20readMultipleIntegers10endianness2asx_q_tSgAA10EndiannessO_x_q_tmts17FixedWidthIntegerRzsAJR_r0_lF","s7NIOCore10ByteBufferV21modifyIfUniquelyOwnedyxSgxACzKXEKlF","s7NIOCore10ByteBufferV21writeMultipleIntegers__10endianness2asSix_q_AA10EndiannessOx_q_tmts17FixedWidthIntegerRzsAIR_r0_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers___10endianness2asSix_q_q0_AA10EndiannessOx_q_q0_tmts17FixedWidthIntegerRzsAIR_sAIR0_r1_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers____10endianness2asSix_q_q0_q1_AA10EndiannessOx_q_q0_q1_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_r2_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers_____10endianness2asSix_q_q0_q1_q2_AA10EndiannessOx_q_q0_q1_q2_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_r3_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers______10endianness2asSix_q_q0_q1_q2_q3_AA10EndiannessOx_q_q0_q1_q2_q3_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_r4_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers_______10endianness2asSix_q_q0_q1_q2_q3_q4_AA10EndiannessOx_q_q0_q1_q2_q3_q4_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_r5_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_r6_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers_________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_r7_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers__________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_r8_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers___________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_sAIR8_r9_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers____________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_sAIR8_sAIR9_r10_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers_____________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_sAIR8_sAIR9_sAIR10_r11_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers______________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_sAIR8_sAIR9_sAIR10_sAIR11_r12_lF","s7NIOCore10ByteBufferV21writeMultipleIntegers_______________10endianness2asSix_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_AA10EndiannessOx_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_tmts17FixedWidthIntegerRzsAIR_sAIR0_sAIR1_sAIR2_sAIR3_sAIR4_sAIR5_sAIR6_sAIR7_sAIR8_sAIR9_sAIR10_sAIR11_sAIR12_r13_lF","s7NIOCore10ByteBufferV22getLengthPrefixedSlice2at10endianness2asACSgSi_AA10EndiannessOxmts17FixedWidthIntegerRzlF","s7NIOCore10ByteBufferV23getNullTerminatedString2atSSSgSi_tF","s7NIOCore10ByteBufferV23readLengthPrefixedSlice10endianness2asACSgAA10EndiannessO_xmts17FixedWidthIntegerRzlF","s7NIOCore10ByteBufferV23setNullTerminatedString_2atSiSS_SitF","s7NIOCore10ByteBufferV23withUnsafeReadableBytesyxxSWKXEKlF","s7NIOCore10ByteBufferV24readNullTerminatedStringSSSgyF","s7NIOCore10ByteBufferV25writeNullTerminatedStringySiSSF","s7NIOCore10ByteBufferV26withVeryUnsafeMutableBytesyxxSwKXEKlF","s7NIOCore10ByteBufferV27readWithUnsafeReadableBytesyS2iSWKXEKF","s7NIOCore10ByteBufferV27readWithUnsafeReadableBytesyxSi_xtSWKXEKlF","s7NIOCore10ByteBufferV27writeWithUnsafeMutableBytes015minimumWritableH0_S2i_SiSwKXEtKF","s7NIOCore10ByteBufferV27writeWithUnsafeMutableBytesyS2iSwKXEKF","s7NIOCore10ByteBufferV30withUnsafeMutableReadableBytesyxxSwKXEKlF","s7NIOCore10ByteBufferV30withUnsafeMutableWritableBytesyxxSwKXEKlF","s7NIOCore10ByteBufferV34readWithUnsafeMutableReadableBytesyS2iSwKXEKF","s7NIOCore10ByteBufferV34readWithUnsafeMutableReadableBytesyxSi_xtSwKXEKlF","s7NIOCore10ByteBufferV3set6buffer2atSiAC_SitF","s7NIOCore10ByteBufferV40withVeryUnsafeBytesWithStorageManagementyxxSW_s9UnmanagedVyyXlGtKXEKlF","s7NIOCore10ByteBufferV44withUnsafeReadableBytesWithStorageManagementyxxSW_s9UnmanagedVyyXlGtKXEKlF","s7NIOCore10ByteBufferV4hash4intoys6HasherVz_tF","s7NIOCore10ByteBufferV5clear15minimumCapacityySi_tF","s7NIOCore10ByteBufferV5clear15minimumCapacityys6UInt32V_tF","s7NIOCore10ByteBufferV5clearyyF","s7NIOCore10ByteBufferV5sliceACyF","s7NIOCore10ByteBufferV8getBytes2at6lengthSays5UInt8VGSgSi_SitF","s7NIOCore10ByteBufferV8getSlice2at6lengthACSgSi_SitF","s7NIOCore10ByteBufferV8setBytes_2atSiSW_SitF","s7NIOCore10ByteBufferV8setBytes_2atSix_SitSTRzs5UInt8V7ElementRtzlF","s7NIOCore10ByteBufferV9copyBytes2at2to6lengthS2i_S2itKF","s7NIOCore10ByteBufferV9getString2at6lengthSSSgSi_SitF","s7NIOCore10ByteBufferV9readBytes6lengthSays5UInt8VGSgSi_tF","s7NIOCore10ByteBufferV9readSlice6lengthACSgSi_tF","s7NIOCore10ByteBufferV9setString_2atSiSS_SitF","s7NIOCore10ByteBufferV9viewBytes2at6lengthAA0bC4ViewVSgSi_SitF","s7NIOCore10FileRegionV15moveReaderIndex9forwardByySi_tF","s7NIOCore11ChannelCoreP12channelRead0yyAA6NIOAnyVF","s7NIOCore11ChannelCoreP12errorCaught00D0ys5Error_p_tF","s7NIOCore11ChannelCoreP13localAddress0AA13SocketAddressOyKF","s7NIOCore11ChannelCoreP14remoteAddress0AA13SocketAddressOyKF","s7NIOCore11ChannelCoreP25triggerUserOutboundEvent0_7promiseyyp_AA16EventLoopPromiseVyytGSgtF","s7NIOCore11ChannelCoreP26registerAlreadyConfigured07promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore11ChannelCoreP5bind02to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore11ChannelCoreP5read0yyF","s7NIOCore11ChannelCoreP6close05error4mode7promiseys5Error_p_AA9CloseModeOAA16EventLoopPromiseVyytGSgtF","s7NIOCore11ChannelCoreP6flush0yyF","s7NIOCore11ChannelCoreP6write0_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore11ChannelCoreP8connect02to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore11ChannelCoreP9register07promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore11ChannelCorePAAE10unwrapData_2asqd__AA6NIOAnyV_qd__mtlF","s7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF","s7NIOCore11ChannelCorePAAE14removeHandlers7channelyAA0B0_p_tF","s7NIOCore11ChannelCorePAAE14removeHandlers8pipelineyAA0B8PipelineC_tF","s7NIOCore12RepeatedTaskC6cancel7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore13NIOFileHandleC23takeDescriptorOwnerships5Int32VyKF","s7NIOCore13NIOFileHandleC24withUnsafeFileDescriptoryxxs5Int32VKXEKlF","s7NIOCore13NIOFileHandleC5closeyyKF","s7NIOCore13NIOFileHandleC9duplicateACyKF","s7NIOCore13SocketAddressO12withSockAddryxxSPySo8sockaddrVG_SitKXEKlF","s7NIOCore13SocketAddressO4hash4intoys6HasherVz_tF","s7NIOCore14ByteBufferViewV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlF","s7NIOCore14ByteBufferViewV15withUnsafeBytesyxxSWKXEKlF","s7NIOCore14ByteBufferViewV32withContiguousStorageIfAvailableyxSgxSRys5UInt8VGKXEKlF","s7NIOCore14ByteBufferViewV4hash4intoys6HasherVz_tF","s7NIOCore14ByteBufferViewV5index5afterS2i_tF","s7NIOCore14ChannelHandlerP12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerP14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelOptionsV014TCPConvenienceC0V22consumeDisableAutoReadAC5TypesO22ConvenienceOptionValueOy__ytGyF","s7NIOCore14ChannelOptionsV014TCPConvenienceC0V29consumeAllowRemoteHalfClosureAC5TypesO22ConvenienceOptionValueOy__ytGyF","s7NIOCore14ChannelOptionsV014TCPConvenienceC0V30consumeAllowLocalEndpointReuseAC5TypesO22ConvenienceOptionValueOy__ytGyF","s7NIOCore14ChannelOptionsV7StorageV08applyAllbC02toAA15EventLoopFutureCyytGAA0B0_p_tF","s7NIOCore14ChannelOptionsV7StorageV6append3key5valueyx_5ValueQztAA0B6OptionRzlF","s7NIOCore14CircularBufferV10removeLastxyF","s7NIOCore14CircularBufferV10removeLastyySiF","s7NIOCore14CircularBufferV11removeFirstxyF","s7NIOCore14CircularBufferV11removeFirstyySiF","s7NIOCore14CircularBufferV14removeSubrangeyySnyAC5IndexVyx_GGF","s7NIOCore14CircularBufferV15replaceSubrange_4withySnyAC5IndexVyx_GG_qd__t7ElementQyd__RszSlRd__lF","s7NIOCore14CircularBufferV15reserveCapacityyySiF","s7NIOCore14CircularBufferV5index5afterAC5IndexVyx_GAH_tF","s7NIOCore14CircularBufferV5index6beforeAC5IndexVyx_GAH_tF","s7NIOCore14CircularBufferV5index_8offsetByAC5IndexVyx_GAH_SitF","s7NIOCore14CircularBufferV6appendyyxF","s7NIOCore14CircularBufferV6modifyyqd__AC5IndexVyx_G_qd__xzKXEtKlF","s7NIOCore14CircularBufferV6remove2atxAC5IndexVyx_G_tF","s7NIOCore14CircularBufferV7popLastxSgyF","s7NIOCore14CircularBufferV7prependyyxF","s7NIOCore14CircularBufferV8distance4from2toSiAC5IndexVyx_G_AItF","s7NIOCore14CircularBufferV8popFirstxSgyF","s7NIOCore14CircularBufferV9removeAll15keepingCapacityySb_tF","s7NIOCore14CircularBufferVAASHRzlE4hash4intoys6HasherVz_tF","s7NIOCore14EventLoopGroupP12makeIteratorAA0bcF0VyF","s7NIOCore14EventLoopGroupP18shutdownGracefully5queue_y8Dispatch0H5QueueC_ys5Error_pSgctF","s7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","s7NIOCore14EventLoopGroupP4nextAA0bC0_pyF","s7NIOCore14EventLoopGroupPAAE18shutdownGracefullyyyYaKF","s7NIOCore14EventLoopGroupPAAE18shutdownGracefullyyyys5Error_pSgcF","s7NIOCore14EventLoopGroupPAAE22syncShutdownGracefullyyyKF","s7NIOCore14EventLoopGroupPAAE3anyAA0bC0_pyF","s7NIOCore14FileDescriptorP010withUnsafebC0yqd__qd__s5Int32VKXEKlF","s7NIOCore14FileDescriptorP5closeyyKF","s7NIOCore15ChannelPipelineC04fireB10RegisteredyyF","s7NIOCore15ChannelPipelineC04fireB12ReadCompleteyyF","s7NIOCore15ChannelPipelineC04fireB12UnregisteredyyF","s7NIOCore15ChannelPipelineC04fireB18WritabilityChangedyyF","s7NIOCore15ChannelPipelineC04fireB4ReadyyAA6NIOAnyVF","s7NIOCore15ChannelPipelineC04fireB6ActiveyyF","s7NIOCore15ChannelPipelineC04fireB8InactiveyyF","s7NIOCore15ChannelPipelineC10addHandler_4name8positionAA15EventLoopFutureCyytGAA0bE0_p_SSSgAC8PositionOtF","s7NIOCore15ChannelPipelineC10addHandler_4name8positionyAA0bE0_p_SSSgAC8PositionOtYaKF","s7NIOCore15ChannelPipelineC11addHandlers_8positionAA15EventLoopFutureCyytGAA0B7Handler_pd_AC8PositionOtF","s7NIOCore15ChannelPipelineC11addHandlers_8positionAA15EventLoopFutureCyytGSayAA0B7Handler_pG_AC8PositionOtF","s7NIOCore15ChannelPipelineC11addHandlers_8positionyAA0B7Handler_pd_AC8PositionOtYaKF","s7NIOCore15ChannelPipelineC11addHandlers_8positionySayAA0B7Handler_pG_AC8PositionOtYaKF","s7NIOCore15ChannelPipelineC13removeHandler4name7promiseySS_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC13removeHandler4nameAA15EventLoopFutureCyytGSS_tF","s7NIOCore15ChannelPipelineC13removeHandler4nameySS_tYaKF","s7NIOCore15ChannelPipelineC13removeHandler7context7promiseyAA0bE7ContextC_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC13removeHandler7contextAA15EventLoopFutureCyytGAA0bE7ContextC_tF","s7NIOCore15ChannelPipelineC13removeHandler7contextyAA0bE7ContextC_tYaKF","s7NIOCore15ChannelPipelineC13removeHandler_7promiseyAA09RemovablebE0_p_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC13removeHandleryAA15EventLoopFutureCyytGAA09RemovablebE0_pF","s7NIOCore15ChannelPipelineC13removeHandleryyAA09RemovablebE0_pYaKF","s7NIOCore15ChannelPipelineC13writeAndFlush_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC15fireErrorCaughtyys0E0_pF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB10RegisteredyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB12ReadCompleteyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB12UnregisteredyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB18WritabilityChangedyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB4ReadyyAA6NIOAnyVF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB6ActiveyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV04fireB8InactiveyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV10addHandler_4name8positionyAA0bG0_p_SSSgAC8PositionOtKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV11addHandlers_8positionyAA0B7Handler_pd_AC8PositionOtKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV11addHandlers_8positionySayAA0B7Handler_pG_AC8PositionOtKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV13writeAndFlush_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV15fireErrorCaughtyys0G0_pF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV24triggerUserOutboundEvent_7promiseyyp_AA0I11LoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV29fireUserInboundEventTriggeredyyypF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV4bind2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV4readyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV5close4mode7promiseyAA9CloseModeO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV5flushyyF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV5write_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV7connect2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV7context11handlerTypeAA0B14HandlerContextCxm_tKAA0bI0RzlF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV7context4nameAA0B14HandlerContextCSS_tKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV7context7handlerAA0B14HandlerContextCAA0bH0_p_tKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV7handler4typexxm_tKAA0B7HandlerRzlF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV8register7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore15ChannelPipelineC24triggerUserOutboundEvent_7promiseyyp_AA0G11LoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC29fireUserInboundEventTriggeredyyypF","s7NIOCore15ChannelPipelineC4bind2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC4readyyF","s7NIOCore15ChannelPipelineC5close4mode7promiseyAA9CloseModeO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC5flushyyF","s7NIOCore15ChannelPipelineC5write_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC7connect2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore15ChannelPipelineC7context11handlerTypeAA0B14HandlerContextCxm_tYaKAA0bG0RzlF","s7NIOCore15ChannelPipelineC7context11handlerTypeAA15EventLoopFutureCyAA0B14HandlerContextCGxm_tAA0bJ0RzlF","s7NIOCore15ChannelPipelineC7context4nameAA0B14HandlerContextCSS_tYaKF","s7NIOCore15ChannelPipelineC7context4nameAA15EventLoopFutureCyAA0B14HandlerContextCGSS_tF","s7NIOCore15ChannelPipelineC7context7handlerAA0B14HandlerContextCAA0bF0_p_tYaKF","s7NIOCore15ChannelPipelineC7context7handlerAA15EventLoopFutureCyAA0B14HandlerContextCGAA0bI0_p_tF","s7NIOCore15ChannelPipelineC7handler4typeAA15EventLoopFutureCyxGxm_tAA0B7HandlerRzlF","s7NIOCore15ChannelPipelineC8register7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore15EventLoopFutureC011flatMapWithbC0yACyqd__GAEx_AA0bC0_ptclF","s7NIOCore15EventLoopFutureC016flatMapErrorWithbC0yACyxGAEs0G0_p_AA0bC0_ptcF","s7NIOCore15EventLoopFutureC08foldWithbC0_4withACyxGSayACyqd__GG_AFx_qd__AA0bC0_ptctlF","s7NIOCore15EventLoopFutureC11whenFailureyyys5Error_pcF","s7NIOCore15EventLoopFutureC11whenSuccessyyyxcF","s7NIOCore15EventLoopFutureC12flatMapError4file4line_ACyxGs12StaticStringV_SuAGs0G0_pctF","s7NIOCore15EventLoopFutureC12flatMapErroryACyxGAEs0G0_pcF","s7NIOCore15EventLoopFutureC12whenCompleteyyys6ResultOyxs5Error_pGcF","s7NIOCore15EventLoopFutureC13flatMapResult4file4line_ACyqd__Gs12StaticStringV_Sus0G0Oyqd__qd_0_Gxcts5ErrorRd_0_r0_lF","s7NIOCore15EventLoopFutureC13flatMapResultyACyqd__Gs0G0Oyqd__qd_0_Gxcs5ErrorRd_0_r0_lF","s7NIOCore15EventLoopFutureC14cascadeFailure2toyAA0bC7PromiseVyqd__GSg_tlF","s7NIOCore15EventLoopFutureC14cascadeSuccess2toyAA0bC7PromiseVyxGSg_tF","s7NIOCore15EventLoopFutureC15flatMapBlocking4onto_ACyqd__G8Dispatch0I5QueueC_qd__xKctlF","s7NIOCore15EventLoopFutureC15flatMapThrowing4file4line_ACyqd__Gs12StaticStringV_Suqd__xKctlF","s7NIOCore15EventLoopFutureC15flatMapThrowingyACyqd__Gqd__xKclF","s7NIOCore15EventLoopFutureC19whenFailureBlocking4onto_y8Dispatch0I5QueueC_ys5Error_pctF","s7NIOCore15EventLoopFutureC19whenSuccessBlocking4onto_y8Dispatch0I5QueueC_yxctF","s7NIOCore15EventLoopFutureC20flatMapErrorThrowing4file4line_ACyxGs12StaticStringV_Suxs0G0_pKctF","s7NIOCore15EventLoopFutureC20flatMapErrorThrowingyACyxGxs0G0_pKcF","s7NIOCore15EventLoopFutureC20whenCompleteBlocking4onto_y8Dispatch0I5QueueC_ys6ResultOyxs5Error_pGctF","s7NIOCore15EventLoopFutureC3and5value4file4lineACyx_qd__tGqd___s12StaticStringVSutlF","s7NIOCore15EventLoopFutureC3and5valueACyx_qd__tGqd___tlF","s7NIOCore15EventLoopFutureC3and_4file4lineACyx_qd__tGACyqd__G_s12StaticStringVSutlF","s7NIOCore15EventLoopFutureC3andyACyx_qd__tGACyqd__GlF","s7NIOCore15EventLoopFutureC3getxyYaKF","s7NIOCore15EventLoopFutureC3hop2toACyxGAA0bC0_p_tF","s7NIOCore15EventLoopFutureC3map4file4line_ACyqd__Gs12StaticStringV_Suqd__xctlF","s7NIOCore15EventLoopFutureC3mapyACyqd__Gqd__xclF","s7NIOCore15EventLoopFutureC4fold_4withACyxGSayACyqd__GG_AFx_qd__tctlF","s7NIOCore15EventLoopFutureC4wait4file4linexs12StaticStringV_SutKF","s7NIOCore15EventLoopFutureC6alwaysyACyxGys6ResultOyxs5Error_pGcF","s7NIOCore15EventLoopFutureC6unwrap6orElseACyqd__Gqd__yc_tqd__SgRszlF","s7NIOCore15EventLoopFutureC6unwrap7orErrorACyqd__Gs0G0_p_tqd__SgRszlF","s7NIOCore15EventLoopFutureC6unwrap9orReplaceACyqd__Gqd___tqd__SgRszlF","s7NIOCore15EventLoopFutureC7cascade2toyAA0bC7PromiseVyxGSg_tF","s7NIOCore15EventLoopFutureC7flatMap4file4line_ACyqd__Gs12StaticStringV_SuAGxctlF","s7NIOCore15EventLoopFutureC7flatMapyACyqd__GAExclF","s7NIOCore15EventLoopFutureC7recover4file4line_ACyxGs12StaticStringV_Suxs5Error_pctF","s7NIOCore15EventLoopFutureC7recoveryACyxGxs5Error_pcF","s7NIOCore16EventLoopPromiseV12completeWithyyAA0bC6FutureCyxGF","s7NIOCore16EventLoopPromiseV12completeWithyys6ResultOyxs5Error_pGF","s7NIOCore16EventLoopPromiseV16completeWithTaskyScTyyts5NeverOGxyYaYbKcF","s7NIOCore16EventLoopPromiseV4failyys5Error_pF","s7NIOCore16EventLoopPromiseV7succeedyyxF","s7NIOCore16IdleStateHandlerC11channelRead7context4datayAA07ChannelD7ContextC_AA6NIOAnyVtF","s7NIOCore16IdleStateHandlerC12handlerAdded7contextyAA07ChannelD7ContextC_tF","s7NIOCore16IdleStateHandlerC13channelActive7contextyAA07ChannelD7ContextC_tF","s7NIOCore16IdleStateHandlerC14handlerRemoved7contextyAA07ChannelD7ContextC_tF","s7NIOCore16IdleStateHandlerC19channelReadComplete7contextyAA07ChannelD7ContextC_tF","s7NIOCore16IdleStateHandlerC5write7context4data7promiseyAA07ChannelD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP10leaveGroup_6device7promiseyAA13SocketAddressO_AA16NIONetworkDeviceVSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP10leaveGroup_7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP10leaveGroup_9interface7promiseyAA13SocketAddressO_AA19NIONetworkInterfaceCSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP9joinGroup_6device7promiseyAA13SocketAddressO_AA16NIONetworkDeviceVSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP9joinGroup_7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelP9joinGroup_9interface7promiseyAA13SocketAddressO_AA19NIONetworkInterfaceCSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelPAAE10leaveGroup_6device7promiseyAA13SocketAddressO_AA16NIONetworkDeviceVSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelPAAE10leaveGroup_6deviceAA15EventLoopFutureCyytGAA13SocketAddressO_AA16NIONetworkDeviceVSgtF","s7NIOCore16MulticastChannelPAAE10leaveGroup_7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelPAAE10leaveGroup_9interfaceAA15EventLoopFutureCyytGAA13SocketAddressO_AA19NIONetworkInterfaceCSgtF","s7NIOCore16MulticastChannelPAAE10leaveGroupyAA15EventLoopFutureCyytGAA13SocketAddressOF","s7NIOCore16MulticastChannelPAAE9joinGroup_6device7promiseyAA13SocketAddressO_AA16NIONetworkDeviceVSgAA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelPAAE9joinGroup_6deviceAA15EventLoopFutureCyytGAA13SocketAddressO_AA16NIONetworkDeviceVSgtF","s7NIOCore16MulticastChannelPAAE9joinGroup_7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore16MulticastChannelPAAE9joinGroup_9interfaceAA15EventLoopFutureCyytGAA13SocketAddressO_AA19NIONetworkInterfaceCSgtF","s7NIOCore16MulticastChannelPAAE9joinGroupyAA15EventLoopFutureCyytGAA13SocketAddressOF","s7NIOCore16NIOInsecureNoTLSV06enableD0yxxF","s7NIOCore16NIONetworkDeviceV4hash4intoys6HasherVz_tF","s7NIOCore17EventLoopIteratorV4nextAA0bC0_pSgyF","s7NIOCore19BackPressureHandlerC14handlerRemoved7contextyAA07ChannelD7ContextC_tF","s7NIOCore19BackPressureHandlerC25channelWritabilityChanged7contextyAA07ChannelD7ContextC_tF","s7NIOCore19BackPressureHandlerC4read7contextyAA07ChannelD7ContextC_tF","s7NIOCore19ByteBufferAllocatorV6buffer12dispatchDataAA0bC0V8Dispatch0hG0V_tF","s7NIOCore19ByteBufferAllocatorV6buffer12staticStringAA0bC0Vs06StaticG0V_tF","s7NIOCore19ByteBufferAllocatorV6buffer5bytesAA0bC0Vx_tSTRzs5UInt8V7ElementRtzlF","s7NIOCore19ByteBufferAllocatorV6buffer6stringAA0bC0VSS_tF","s7NIOCore19ByteBufferAllocatorV6buffer7integer10endianness2asAA0bC0Vx_AA10EndiannessOxmts17FixedWidthIntegerRzlF","s7NIOCore19ByteBufferAllocatorV6buffer8capacityAA0bC0VSi_tF","s7NIOCore19ByteBufferAllocatorV6buffer9repeating5countAA0bC0Vs5UInt8V_SitF","s7NIOCore19ByteBufferAllocatorV6buffer9substringAA0bC0VSs_tF","s7NIOCore19ByteBufferAllocatorV6bufferAdA0bC0VAF_tF","s7NIOCore20AcceptBackoffHandlerC11errorCaught7context0E0yAA07ChannelD7ContextC_s5Error_ptF","s7NIOCore20AcceptBackoffHandlerC14handlerRemoved7contextyAA07ChannelD7ContextC_tF","s7NIOCore20AcceptBackoffHandlerC15channelInactive7contextyAA07ChannelD7ContextC_tF","s7NIOCore20AcceptBackoffHandlerC4read7contextyAA07ChannelD7ContextC_tF","s7NIOCore20ByteToMessageDecoderP10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVzSbtKF","s7NIOCore20ByteToMessageDecoderP12decoderAdded7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP14decoderRemoved7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP18shouldReclaimBytes6bufferSbAA0B6BufferV_tF","s7NIOCore20ByteToMessageDecoderP6decode7context6bufferAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVztKF","s7NIOCore20ByteToMessageDecoderPAAE10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVzSbtKF","s7NIOCore20ByteToMessageDecoderPAAE12decoderAdded7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderPAAE14decoderRemoved7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderPAAE14wrapInboundOutyAA6NIOAnyV0gH0QzF","s7NIOCore20ByteToMessageDecoderPAAE18shouldReclaimBytes6bufferSbAA0B6BufferV_tF","s7NIOCore20ByteToMessageHandlerC06removeE07context12removalTokenyAA07ChannelE7ContextC_AH07RemovalI0VtF","s7NIOCore20ByteToMessageHandlerC11channelRead7context4datayAA07ChannelE7ContextC_AA6NIOAnyVtF","s7NIOCore20ByteToMessageHandlerC12handlerAdded7contextyAA07ChannelE7ContextC_tF","s7NIOCore20ByteToMessageHandlerC14handlerRemoved7contextyAA07ChannelE7ContextC_tF","s7NIOCore20ByteToMessageHandlerC15channelInactive7contextyAA07ChannelE7ContextC_tF","s7NIOCore20ByteToMessageHandlerC25userInboundEventTriggered7context5eventyAA07ChannelE7ContextC_yptF","s7NIOCore20ByteToMessageHandlerCA2A014WriteObservingbcD7DecoderRzrlE5write7context4data7promiseyAA07ChannelE7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore20MarkedCircularBufferV02isB05indexSbAA0cD0V5IndexVyx_G_tF","s7NIOCore20MarkedCircularBufferV11removeFirstxyF","s7NIOCore20MarkedCircularBufferV4markyyF","s7NIOCore20MarkedCircularBufferV5index5afterAA0cD0V5IndexVyx_GAJ_tF","s7NIOCore20MarkedCircularBufferV5index6beforeAA0cD0V5IndexVyx_GAJ_tF","s7NIOCore20MarkedCircularBufferV5index_8offsetByAA0cD0V5IndexVyx_GAJ_SitF","s7NIOCore20MarkedCircularBufferV6appendyyxF","s7NIOCore20MarkedCircularBufferV8distance4from2toSiAA0cD0V5IndexVyx_G_AKtF","s7NIOCore20MarkedCircularBufferV8popFirstxSgyF","s7NIOCore20MessageToByteEncoderP6encode4data3outy10OutboundInQz_AA0D6BufferVztKF","s7NIOCore20MessageToByteHandlerC12handlerAdded7contextyAA07ChannelE7ContextC_tF","s7NIOCore20MessageToByteHandlerC14handlerRemoved7contextyAA07ChannelE7ContextC_tF","s7NIOCore20MessageToByteHandlerC5write7context4data7promiseyAA07ChannelE7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore20NIOClientTLSProviderP9enableTLSy9BootstrapQzAFF","s7NIOCore20SocketOptionProviderP09unsafeGetbC05level4nameAA15EventLoopFutureCyqd__GAA12NIOBSDSocketO0C5LevelV_AK0C0VtlF","s7NIOCore20SocketOptionProviderP09unsafeGetbC05level4nameAA15EventLoopFutureCyqd__GSi_s5Int32VtlF","s7NIOCore20SocketOptionProviderP09unsafeSetbC05level4name5valueAA15EventLoopFutureCyytGAA12NIOBSDSocketO0C5LevelV_AL0C0Vqd__tlF","s7NIOCore20SocketOptionProviderP09unsafeSetbC05level4name5valueAA15EventLoopFutureCyytGSi_s5Int32Vqd__tlF","s7NIOCore20SocketOptionProviderPAAE10getTCPInfoAA15EventLoopFutureCySo8tcp_infoVGyF","s7NIOCore20SocketOptionProviderPAAE11getSoLingerAA15EventLoopFutureCySo6lingerVGyF","s7NIOCore20SocketOptionProviderPAAE11setSoLingeryAA15EventLoopFutureCyytGSo6lingerVF","s7NIOCore20SocketOptionProviderPAAE16getIPMulticastIFAA15EventLoopFutureCySo7in_addrVGyF","s7NIOCore20SocketOptionProviderPAAE16setIPMulticastIFyAA15EventLoopFutureCyytGSo7in_addrVF","s7NIOCore20SocketOptionProviderPAAE17getIPMulticastTTLAA15EventLoopFutureCys5UInt8VGyF","s7NIOCore20SocketOptionProviderPAAE17setIPMulticastTTLyAA15EventLoopFutureCyytGs5UInt8VF","s7NIOCore20SocketOptionProviderPAAE18getIPMulticastLoopAA05EventG6FutureCys5UInt8VGyF","s7NIOCore20SocketOptionProviderPAAE18getIPv6MulticastIFAA15EventLoopFutureCys6UInt32VGyF","s7NIOCore20SocketOptionProviderPAAE18setIPMulticastLoopyAA05EventG6FutureCyytGs5UInt8VF","s7NIOCore20SocketOptionProviderPAAE18setIPv6MulticastIFyAA15EventLoopFutureCyytGs6UInt32VF","s7NIOCore20SocketOptionProviderPAAE20getIPv6MulticastHopsAA15EventLoopFutureCys5Int32VGyF","s7NIOCore20SocketOptionProviderPAAE20getIPv6MulticastLoopAA05EventH6FutureCys6UInt32VGyF","s7NIOCore20SocketOptionProviderPAAE20setIPv6MulticastHopsyAA15EventLoopFutureCyytGs5Int32VF","s7NIOCore20SocketOptionProviderPAAE20setIPv6MulticastLoopyAA05EventH6FutureCyytGs6UInt32VF","s7NIOCore21ChannelHandlerContextC04fireB10RegisteredyyF","s7NIOCore21ChannelHandlerContextC04fireB12ReadCompleteyyF","s7NIOCore21ChannelHandlerContextC04fireB12UnregisteredyyF","s7NIOCore21ChannelHandlerContextC04fireB18WritabilityChangedyyF","s7NIOCore21ChannelHandlerContextC04fireB4ReadyyAA6NIOAnyVF","s7NIOCore21ChannelHandlerContextC04fireB6ActiveyyF","s7NIOCore21ChannelHandlerContextC04fireB8InactiveyyF","s7NIOCore21ChannelHandlerContextC13leavePipeline12removalTokenyAC07RemovalH0V_tF","s7NIOCore21ChannelHandlerContextC13writeAndFlush_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC15fireErrorCaughtyys0F0_pF","s7NIOCore21ChannelHandlerContextC24triggerUserOutboundEvent_7promiseyyp_AA0H11LoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC29fireUserInboundEventTriggeredyyypF","s7NIOCore21ChannelHandlerContextC4bind2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC4readyyF","s7NIOCore21ChannelHandlerContextC5close4mode7promiseyAA9CloseModeO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC5flushyyF","s7NIOCore21ChannelHandlerContextC5write_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC7connect2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore21ChannelHandlerContextC8register7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore21ChannelInboundHandlerP04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore21ChannelInboundInvokerP04fireB10RegisteredyyF","s7NIOCore21ChannelInboundInvokerP04fireB12ReadCompleteyyF","s7NIOCore21ChannelInboundInvokerP04fireB12UnregisteredyyF","s7NIOCore21ChannelInboundInvokerP04fireB18WritabilityChangedyyF","s7NIOCore21ChannelInboundInvokerP04fireB4ReadyyAA6NIOAnyVF","s7NIOCore21ChannelInboundInvokerP04fireB6ActiveyyF","s7NIOCore21ChannelInboundInvokerP04fireB8InactiveyyF","s7NIOCore21ChannelInboundInvokerP08fireUserC14EventTriggeredyyypF","s7NIOCore21ChannelInboundInvokerP15fireErrorCaughtyys0F0_pF","s7NIOCore21NIOClientTCPBootstrapV13channelOption_5valueACx_5ValueQztAA07ChannelE0RzlF","s7NIOCore21NIOClientTCPBootstrapV14connectTimeoutyAcA10TimeAmountVF","s7NIOCore21NIOClientTCPBootstrapV18channelInitializeryAcA15EventLoopFutureCyytGAA7Channel_pcF","s7NIOCore21NIOClientTCPBootstrapV25channelConvenienceOptionsyAcA07ChannelF0V014TCPConvenienceF0VF","s7NIOCore21NIOClientTCPBootstrapV7connect20unixDomainSocketPathAA15EventLoopFutureCyAA7Channel_pGSS_tF","s7NIOCore21NIOClientTCPBootstrapV7connect2toAA15EventLoopFutureCyAA7Channel_pGAA13SocketAddressO_tF","s7NIOCore21NIOClientTCPBootstrapV7connect4host4portAA15EventLoopFutureCyAA7Channel_pGSS_SitF","s7NIOCore21NIOClientTCPBootstrapV9enableTLSACyF","s7NIOCore22ChannelOutboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundInvokerP011triggerUserC5Event_7promiseyyp_AA0G11LoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP13writeAndFlush_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP4bind2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP4readyyF","s7NIOCore22ChannelOutboundInvokerP5close4mode7promiseyAA9CloseModeO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP5flushyyF","s7NIOCore22ChannelOutboundInvokerP5write_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP7connect2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore22ChannelOutboundInvokerP8register7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore22ChannelOutboundInvokerPAAE011triggerUserC5Event_4file4lineAA0G10LoopFutureCyytGyp_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE011triggerUserC5Event_4file4lineyyp_s12StaticStringVSutYaKF","s7NIOCore22ChannelOutboundInvokerPAAE13writeAndFlush_4file4lineAA15EventLoopFutureCyytGAA6NIOAnyV_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE13writeAndFlush_4file4lineyAA6NIOAnyV_s12StaticStringVSutYaKF","s7NIOCore22ChannelOutboundInvokerPAAE4bind2to4file4lineAA15EventLoopFutureCyytGAA13SocketAddressO_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE4bind2to4file4lineyAA13SocketAddressO_s12StaticStringVSutYaKF","s7NIOCore22ChannelOutboundInvokerPAAE5close4mode4file4lineAA15EventLoopFutureCyytGAA9CloseModeO_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE5close4mode4file4lineyAA9CloseModeO_s12StaticStringVSutYaKF","s7NIOCore22ChannelOutboundInvokerPAAE5write_4file4lineAA15EventLoopFutureCyytGAA6NIOAnyV_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE7connect2to4file4lineAA15EventLoopFutureCyytGAA13SocketAddressO_s12StaticStringVSutF","s7NIOCore22ChannelOutboundInvokerPAAE7connect2to4file4lineyAA13SocketAddressO_s12StaticStringVSutYaKF","s7NIOCore22ChannelOutboundInvokerPAAE8register4file4lineAA15EventLoopFutureCyytGs12StaticStringV_SutF","s7NIOCore22ChannelOutboundInvokerPAAE8register4file4lineys12StaticStringV_SutYaKF","s7NIOCore22NIOCloseOnErrorHandlerC11errorCaught7context0F0yAA07ChannelE7ContextC_s0D0_ptF","s7NIOCore23RecvByteBufferAllocatorP6buffer9allocatorAA0cD0VAA0cdE0V_tF","s7NIOCore23RecvByteBufferAllocatorP6record15actualReadBytesSbSi_tF","s7NIOCore23RemovableChannelHandlerP06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore23RemovableChannelHandlerPAAE06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore28NIOSynchronousChannelOptionsP9getOptiony5ValueQyd__qd__KAA0cF0Rd__lF","s7NIOCore28NIOSynchronousChannelOptionsP9setOption_5valueyqd___5ValueQyd__tKAA0cF0Rd__lF","s7NIOCore29NIOClientTCPBootstrapProtocolP13channelOption_5valuexqd___5ValueQyd__tAA07ChannelF0Rd__lF","s7NIOCore29NIOClientTCPBootstrapProtocolP14connectTimeoutyxAA10TimeAmountVF","s7NIOCore29NIOClientTCPBootstrapProtocolP16protocolHandlersyxSayAA14ChannelHandler_pGycF","s7NIOCore29NIOClientTCPBootstrapProtocolP18channelInitializeryxAA15EventLoopFutureCyytGAA7Channel_pcF","s7NIOCore29NIOClientTCPBootstrapProtocolP7connect20unixDomainSocketPathAA15EventLoopFutureCyAA7Channel_pGSS_tF","s7NIOCore29NIOClientTCPBootstrapProtocolP7connect2toAA15EventLoopFutureCyAA7Channel_pGAA13SocketAddressO_tF","s7NIOCore29NIOClientTCPBootstrapProtocolP7connect4host4portAA15EventLoopFutureCyAA7Channel_pGSS_SitF","s7NIOCore31AdaptiveRecvByteBufferAllocatorV6buffer9allocatorAA0dE0VAA0deF0V_tF","s7NIOCore31AdaptiveRecvByteBufferAllocatorV6record15actualReadBytesSbSi_tF","s7NIOCore32FixedSizeRecvByteBufferAllocatorV6buffer9allocatorAA0eF0VAA0efG0V_tF","s7NIOCore32FixedSizeRecvByteBufferAllocatorV6record15actualReadBytesSbSi_tF","s7NIOCore33NIOSingleStepByteToMessageDecoderP10decodeLast6buffer7seenEOF10InboundOutQzSgAA0D6BufferVz_SbtKF","s7NIOCore33NIOSingleStepByteToMessageDecoderP6decode6buffer10InboundOutQzSgAA0D6BufferVz_tKF","s7NIOCore33NIOSingleStepByteToMessageDecoderPAAE10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0D6BufferVzSbtKF","s7NIOCore33NIOSingleStepByteToMessageDecoderPAAE6decode7context6bufferAA13DecodingStateOAA21ChannelHandlerContextC_AA0D6BufferVztKF","s7NIOCore34WriteObservingByteToMessageDecoderP5write4datay10OutboundInQz_tF","s7NIOCore35NIOSingleStepByteToMessageProcessorC16finishProcessing7seenEOF_ySb_y10InboundOutQzKXEtKF","s7NIOCore35NIOSingleStepByteToMessageProcessorC7process6buffer_yAA0D6BufferV_y10InboundOutQzKXEtKF","s7NIOCore6IODataO15moveReaderIndex9forwardByySi_tF","s7NIOCore7ChannelP9getOptionyAA15EventLoopFutureCy5ValueQyd__Gqd__AA0bD0Rd__lF","s7NIOCore7ChannelP9setOption_5valueAA15EventLoopFutureCyytGqd___5ValueQyd__tAA0bD0Rd__lF","s7NIOCore7ChannelPAAE13writeAndFlush_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE13writeAndFlush_7promiseyqd___AA16EventLoopPromiseVyytGSgtlF","s7NIOCore7ChannelPAAE13writeAndFlushyAA15EventLoopFutureCyytGqd__lF","s7NIOCore7ChannelPAAE13writeAndFlushyyqd__YaKlF","s7NIOCore7ChannelPAAE24triggerUserOutboundEvent_7promiseyyp_AA0F11LoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE26registerAlreadyConfigured07promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore7ChannelPAAE4bind2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE4readyyF","s7NIOCore7ChannelPAAE5close4mode7promiseyAA9CloseModeO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE5flushyyF","s7NIOCore7ChannelPAAE5write_7promiseyAA6NIOAnyV_AA16EventLoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE5write_7promiseyqd___AA16EventLoopPromiseVyytGSgtlF","s7NIOCore7ChannelPAAE5writeyAA15EventLoopFutureCyytGqd__lF","s7NIOCore7ChannelPAAE7connect2to7promiseyAA13SocketAddressO_AA16EventLoopPromiseVyytGSgtF","s7NIOCore7ChannelPAAE8register7promiseyAA16EventLoopPromiseVyytGSg_tF","s7NIOCore7ChannelPAAE9getOptiony5ValueQyd__qd__YaKAA0bD0Rd__lF","s7NIOCore7ChannelPAAE9setOption_5valueyqd___5ValueQyd__tYaKAA0bD0Rd__lF","s7NIOCore9EventLoopP014preconditionInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopP017preconditionNotInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopP12scheduleTask2in_AA9ScheduledVyqd__GAA10TimeAmountV_qd__yKctlF","s7NIOCore9EventLoopP12scheduleTask8deadline_AA9ScheduledVyqd__GAA11NIODeadlineV_qd__yKctlF","s7NIOCore9EventLoopP23makeSucceededVoidFutureAA0bcG0CyytGyF","s7NIOCore9EventLoopP6submityAA0bC6FutureCyqd__Gqd__yKclF","s7NIOCore9EventLoopP7executeyyyycF","s7NIOCore9EventLoopPAAE011assertNotInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopPAAE014preconditionInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopPAAE017preconditionNotInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopPAAE08assertInbC04file4lineys12StaticStringV_SutF","s7NIOCore9EventLoopPAAE10flatSubmityAA0bC6FutureCyqd__GAGyclF","s7NIOCore9EventLoopPAAE11makePromise2of4file4lineAA0bcE0Vyqd__Gqd__m_s12StaticStringVSutlF","s7NIOCore9EventLoopPAAE12makeIteratorAA0bcE0VyF","s7NIOCore9EventLoopPAAE16flatScheduleTask2in4file4line_AA9ScheduledVyqd__GAA10TimeAmountV_s12StaticStringVSuAA0bC6FutureCyqd__GyKctlF","s7NIOCore9EventLoopPAAE16flatScheduleTask8deadline4file4line_AA9ScheduledVyqd__GAA11NIODeadlineV_s12StaticStringVSuAA0bC6FutureCyqd__GyKctlF","s7NIOCore9EventLoopPAAE16makeFailedFuture_4file4lineAA0bcF0Cyqd__Gs5Error_p_s12StaticStringVSutlF","s7NIOCore9EventLoopPAAE16makeFailedFutureyAA0bcF0Cyqd__Gs5Error_plF","s7NIOCore9EventLoopPAAE19makeCompletedFutureyAA0bcF0Cyqd__Gs6ResultOyqd__s5Error_pGlF","s7NIOCore9EventLoopPAAE19makeSucceededFuture_4file4lineAA0bcF0Cyqd__Gqd___s12StaticStringVSutlF","s7NIOCore9EventLoopPAAE19makeSucceededFutureyAA0bcF0Cyqd__Gqd__lF","s7NIOCore9EventLoopPAAE20scheduleRepeatedTask12initialDelay5delay9notifying_AA0eF0CAA10TimeAmountV_AkA0bC7PromiseVyytGSgyAIKctF","s7NIOCore9EventLoopPAAE23makeSucceededVoidFutureAA0bcG0CyytGyF","s7NIOCore9EventLoopPAAE25scheduleRepeatedAsyncTask12initialDelay5delay9notifying_AA0eG0CAA10TimeAmountV_AkA0bC7PromiseVyytGSgAA0bC6FutureCyytGAIctF","s7NIOCore9EventLoopPAAE3anyAaB_pyF","s7NIOCore9EventLoopPAAE4nextAaB_pyF","s7NIOCore9EventLoopPAAE5closeyyKF","s7NIOCore9EventLoopPAAE6submityAA0bC6FutureCyqd__Gqd__yKclF","s7NIOCore9ScheduledV6cancelyyF","s7NIOCore10ByteBufferV2eeoiySbAC_ACtFZ","s7NIOCore10FileRegionV2eeoiySbAC_ACtFZ","s7NIOCore10TimeAmountV1loiySbAC_ACtFZ","s7NIOCore10TimeAmountV1moiyA2C_xtSzRzlFZ","s7NIOCore10TimeAmountV1moiyACx_ACtSzRzlFZ","s7NIOCore10TimeAmountV1poiyA2C_ACtFZ","s7NIOCore10TimeAmountV1soiyA2C_ACtFZ","s7NIOCore10TimeAmountV2peoiyyACz_ACtFZ","s7NIOCore10TimeAmountV2seoiyyACz_ACtFZ","s7NIOCore11NIODeadlineV1goiySbAC_ACtFZ","s7NIOCore11NIODeadlineV1loiySbAC_ACtFZ","s7NIOCore11NIODeadlineV1poiyA2C_AA10TimeAmountVtFZ","s7NIOCore11NIODeadlineV1soiyA2C_AA10TimeAmountVtFZ","s7NIOCore11NIODeadlineV1soiyAA10TimeAmountVAC_ACtFZ","s7NIOCore13SocketAddressO2eeoiySbAC_ACtFZ","s7NIOCore14ByteBufferViewV2eeoiySbAC_ACtFZ","s7NIOCore14CircularBufferV5IndexV1loiySbAEyx_G_AGtFZ","s7NIOCore14CircularBufferV5IndexV2eeoiySbAEyx_G_AGtFZ","s7NIOCore14CircularBufferVAASQRzlE2eeoiySbACyxG_AEtFZ","s7NIOCore15EventLoopFutureC2eeoiySbACyxG_AEtFZ","s7NIOCore16NIONetworkDeviceV2eeoiySbAC_ACtFZ","s7NIOCore19NIONetworkInterfaceC2eeoiySbAC_ACtFZ","s7NIOCore10TimeAmountV5Valuea","s7NIOCore11NIODeadlineV5Valuea","s7NIOCore11NIOSendablea","s7NIOCore12NIOBSDSocketO11OptionLevelV8RawValuea","s7NIOCore12NIOBSDSocketO13AddressFamilyV8RawValuea","s7NIOCore12NIOBSDSocketO14ProtocolFamilyV8RawValuea","s7NIOCore12NIOBSDSocketO6Handlea","s7NIOCore12NIOBSDSocketO6OptionV8RawValuea","s7NIOCore12SocketOptiona","s7NIOCore13BacklogOptiona","s7NIOCore14AutoReadOptiona","s7NIOCore14ByteBufferViewV11SubSequencea","s7NIOCore14ByteBufferViewV5Indexa","s7NIOCore14ByteBufferViewV7Elementa","s7NIOCore14ChannelOptionsV5TypesO12SocketOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO13BacklogOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO14AutoReadOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO15AllocatorOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO15WriteSpinOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO17ReceivePacketInfoV5Valuea","s7NIOCore14ChannelOptionsV5TypesO19RecvAllocatorOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO20ConnectTimeoutOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO24MaxMessagesPerReadOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO26WriteBufferWaterMarkOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO28AllowRemoteHalfClosureOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO36DatagramVectorReadMessageCountOptionV5Valuea","s7NIOCore14ChannelOptionsV5TypesO37ExplicitCongestionNotificationsOptionV5Valuea","s7NIOCore14CircularBufferV11SubSequencea","s7NIOCore14CircularBufferV7Elementa","s7NIOCore14CircularBufferV7Indicesa","s7NIOCore14CircularBufferV9RangeTypea","s7NIOCore15AllocatorOptiona","s7NIOCore15WriteSpinOptiona","s7NIOCore16IdleStateHandlerC10InboundOuta","s7NIOCore16IdleStateHandlerC10OutboundIna","s7NIOCore16IdleStateHandlerC11OutboundOuta","s7NIOCore16IdleStateHandlerC9InboundIna","s7NIOCore16NIOPOSIXFileModea","s7NIOCore16SocketOptionNamea","s7NIOCore17EventLoopIteratorV7Elementa","s7NIOCore17SocketOptionLevela","s7NIOCore17SocketOptionValuea","s7NIOCore19BackPressureHandlerC10InboundOuta","s7NIOCore19BackPressureHandlerC10OutboundIna","s7NIOCore19BackPressureHandlerC11OutboundOuta","s7NIOCore19BackPressureHandlerC9InboundIna","s7NIOCore19RecvAllocatorOptiona","s7NIOCore20AcceptBackoffHandlerC10OutboundIna","s7NIOCore20AcceptBackoffHandlerC9InboundIna","s7NIOCore20ByteToMessageHandlerC10InboundOuta","s7NIOCore20ByteToMessageHandlerC9InboundIna","s7NIOCore20ByteToMessageHandlerCA2A014WriteObservingbcD7DecoderRzrlE10OutboundIna","s7NIOCore20ChannelDuplexHandlera","s7NIOCore20ConnectTimeoutOptiona","s7NIOCore20MarkedCircularBufferV11SubSequencea","s7NIOCore20MarkedCircularBufferV5Indexa","s7NIOCore20MarkedCircularBufferV9RangeTypea","s7NIOCore20MessageToByteHandlerC10OutboundIna","s7NIOCore20MessageToByteHandlerC11OutboundOuta","s7NIOCore20WriteBufferWaterMarka","s7NIOCore22NIOCloseOnErrorHandlerC9InboundIna","s7NIOCore24MaxMessagesPerReadOptiona","s7NIOCore26WriteBufferWaterMarkOptiona","s7NIOCore28AllowRemoteHalfClosureOptiona","s7NIOCore36DatagramVectorReadMessageCountOptiona","sSS7NIOCoreE6bufferSSAA10ByteBufferV_tcfc","sSa7NIOCores5UInt8VRszlE6bufferSayACGAA10ByteBufferV_tcfc","sSq7NIOCoreAA10ByteBufferVRszlE010setOrWriteC0ySiACzF","sSq7NIOCoreAA10ByteBufferVRszlE019setOrWriteImmutableC0ySiACF","c@S@in_addr","c@S@linger","c@S@sockaddr","c@S@sockaddr_in","c@S@sockaddr_in6","c@S@sockaddr_un","c@S@tcp_info","c@T@mode_t","s7NIOCore22_ChannelInboundHandlerP04userC14EventTriggered7context5eventyAA0bD7ContextC_yptF","s7NIOCore22_ChannelInboundHandlerP11channelRead7context4datayAA0bD7ContextC_AA6NIOAnyVtF","s7NIOCore22_ChannelInboundHandlerP11errorCaught7context0E0yAA0bD7ContextC_s5Error_ptF","s7NIOCore22_ChannelInboundHandlerP13channelActive7contextyAA0bD7ContextC_tF","s7NIOCore22_ChannelInboundHandlerP15channelInactive7contextyAA0bD7ContextC_tF","s7NIOCore22_ChannelInboundHandlerP19channelReadComplete7contextyAA0bD7ContextC_tF","s7NIOCore22_ChannelInboundHandlerP25channelWritabilityChanged7contextyAA0bD7ContextC_tF","s7NIOCore23_ChannelOutboundHandlerP4read7contextyAA0bD7ContextC_tF","s7NIOCore23_ChannelOutboundHandlerP5write7context4data7promiseyAA0bD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore23_EmittingChannelHandlerP11OutboundOutQa","s8Dispatch0A4DataV","s8Dispatch0A5QueueC","sSH","sSH4hash4intoys6HasherVz_tF","sSI","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSK9formIndex6beforey0B0Qzz_tF","sSKs11SubSequenceQzRszrlE10removeLast7ElementQzyF","sSKs11SubSequenceQzRszrlE10removeLastyySiF","sSKs11SubSequenceQzRszrlE7popLast7ElementQzSgyF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSKsSS7ElementRtzrlE6joined9separatorS2S_tF","sSL","sSL1goiySbx_xtFZ","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSM","sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF","sSMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF","sSMsE6swapAtyy5IndexQz_ACtF","sSMsE9partition2by5IndexQzSb7ElementQzKXE_tKF","sSMsEy11SubSequenceQzSny5IndexQzGcip","sSMsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSMsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSMsEys5SliceVyxGSny5IndexQzGcip","sSMsSKRzrlE7reverseyyF","sSMsSKRzrlE9partition2by5IndexSlQzSb7ElementSTQzKXE_tKF","sSMsSkRzSL7ElementSTRpzrlE4sortyyF","sSMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF","sSMsSkRzrlE7shuffle5usingyqd__z_tSGRd__lF","sSMsSkRzrlE7shuffleyyF","sSP","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSR","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sSTs8IteratorSTQzRszrlE04makeA0xyF","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6prefix5whileSay7ElementQzGSbADKXE_tKF","sSTsE6prefixys14PrefixSequenceVyxGSiF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE6suffixySay7ElementQzGSiF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8dropLastySay7ElementQzGSiF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsE9dropFirstys04DropB8SequenceVyxGSiF","sSTsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF","sSTsSL7ElementRpzrlE3maxABSgyF","sSTsSL7ElementRpzrlE3minABSgyF","sSTsSL7ElementRpzrlE6sortedSayABGyF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSTsST7ElementRpzrlE6joined9separators14JoinedSequenceVyxGqd___tSTRd__AA_AAQZAARtd__lF","sSTsST7ElementRpzrlE6joineds15FlattenSequenceVyxGyF","sSTsSy7ElementRpzrlE6joined9separatorS2S_tF","sSW","sSY","sSY8RawValueQa","sSY8rawValue03RawB0Qzvp","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSZ","sSa","sSb","sScT","sSci","sSi","sSk","sSk5index5after5IndexQzAD_tF","sSk5index6before5IndexQzAD_tF","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSky11SubSequenceQzSny5IndexQzGcip","sSl","sSl10startIndex0B0Qzvp","sSl11SubSequenceQa","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessing11SubSequenceQzRszSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ADQyd__AERSlF","sSl17_StringProcessing11SubSequenceQzRszrlE10trimPrefix5whileySb7ElementQzKXE_tKF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGqd___SiSbtSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE8containsySbqd__SlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5countSivp","sSl5index5after5IndexQzAD_tF","sSl5index_8offsetBy5IndexQzAD_SitF","sSl7IndicesQa","sSl7isEmptySbvp","sSl8distance4from2toSi5IndexQz_AEtF","sSl8endIndex0B0Qzvp","sSls11SubSequenceQzRszrlE11removeFirst7ElementQzyF","sSls11SubSequenceQzRszrlE11removeFirstyySiF","sSls11SubSequenceQzRszrlE8popFirst7ElementQzSgyF","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSly11SubSequenceQzSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSm","sSm11removeFirst7ElementQzyF","sSm11removeFirstyySiF","sSm14removeSubrangeyySny5IndexQzGF","sSm15replaceSubrange_4withySny5IndexQzG_qd__ntSlRd__7ElementQyd__AFRtzlF","sSm15reserveCapacityyySiF","sSm17_StringProcessingE10trimPrefix5whileySb7ElementQzKXE_tKF","sSm17_StringProcessingSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ABQyd__ACRSlF","sSm17_StringProcessingSQ7ElementRpzrlE7replace_4with15maxReplacementsyqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with15maxReplacementsxqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with8subrange15maxReplacementsxqd___qd_0_Sny5IndexQzGSitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AKRSr0_lF","sSm6appendyy7ElementQznF","sSm6remove2at7ElementQz5IndexQz_tF","sSm9removeAll15keepingCapacityySb_tF","sSms11SubSequenceQzRszrlE11removeFirst7ElementQzyF","sSms11SubSequenceQzRszrlE11removeFirstyySiF","sSmsE11removeFirst7ElementQzyF","sSmsE11removeFirstyySiF","sSmsE14removeSubrangeyySny5IndexQzGF","sSmsE14removeSubrangeyyqd__SXRd__5BoundQyd__5IndexRtzlF","sSmsE15replaceSubrange_4withySny5IndexQzG_qd__tSlRd__7ElementQyd__AFRtzlF","sSmsE15replaceSubrange_4withyqd_0__qd__ntSlRd__SXRd_0_7ElementQyd__ACRtz5BoundQyd_0_5IndexRtzr0_lF","sSmsE15reserveCapacityyySiF","sSmsE1poiyxqd___xtSTRd__7ElementQyd__ABRtzlFZ","sSmsE1poiyxx_qd__tSTRd__7ElementQyd__ABRtzlFZ","sSmsE1poiyxx_qd__tSmRd__7ElementQyd__ABRtzlFZ","sSmsE2peoiyyxz_qd__tSTRd__7ElementQyd__ABRtzlFZ","sSmsE6append10contentsOfyqd__n_tSTRd__7ElementQyd__ACRtzlF","sSmsE6appendyy7ElementQznF","sSmsE6filteryxSb7ElementQzKXEKF","sSmsE6insert10contentsOf2atyqd__n_5IndexQztSlRd__7ElementQyd__AFRtzlF","sSmsE6insert_2aty7ElementQzn_5IndexQztF","sSmsE6remove2at7ElementQz5IndexQz_tF","sSmsE8applyingyxSgs20CollectionDifferenceVy7ElementQzGF","sSmsE9removeAll15keepingCapacityySb_tF","sSmsE9removeAll5whereySb7ElementQzKXE_tKF","sSmsE9repeating5countx7ElementQz_Sitcfc","sSmsEyxqd__cSTRd__7ElementQyd__AARtzlufc","sSmsSKRz11SubSequenceSlQzRszrlE10removeLast7ElementSTQzyF","sSmsSKRz11SubSequenceSlQzRszrlE10removeLastyySiF","sSmsSKRz11SubSequenceSlQzRszrlE7popLast7ElementSTQzSgyF","sSmsSKRzrlE10removeLast7ElementSTQzyF","sSmsSKRzrlE10removeLastyySiF","sSmsSKRzrlE7popLast7ElementSTQzSgyF","sSmsSMRzrlE9removeAll5whereySb7ElementSTQzKXE_tKF","sSmxycfc","sSn","sSq","sSs","sSt","sSt4next7ElementQzSgyF","sSu","sSw","sSx","sSz","ss10SetAlgebraP","ss10SetAlgebraPs7ElementQz012ArrayLiteralC0RtzrlE05arrayE0xAFd_tcfc","ss10SetAlgebraPsE10isDisjoint4withSbx_tF","ss10SetAlgebraPsE10isSuperset2ofSbx_tF","ss10SetAlgebraPsE11subtractingyxxF","ss10SetAlgebraPsE14isStrictSubset2ofSbx_tF","ss10SetAlgebraPsE16isStrictSuperset2ofSbx_tF","ss10SetAlgebraPsE7isEmptySbvp","ss10SetAlgebraPsE8isSubset2ofSbx_tF","ss10SetAlgebraPsE8subtractyyxF","ss10SetAlgebraPsEyxqd__ncSTRd__7ElementQyd__ACRtzlufc","ss12CUnsignedInta","ss12StaticStringV","ss13CUnsignedChara","ss17FixedWidthIntegerP","ss18AdditiveArithmeticP","ss18AdditiveArithmeticP1poiyxx_xtFZ","ss18AdditiveArithmeticP1soiyxx_xtFZ","ss18AdditiveArithmeticP2peoiyyxz_xtFZ","ss18AdditiveArithmeticP2seoiyyxz_xtFZ","ss18AdditiveArithmeticP4zeroxvpZ","ss18AdditiveArithmeticPsE1popyxxFZ","ss18AdditiveArithmeticPsE2peoiyyxz_xtFZ","ss18AdditiveArithmeticPsE2seoiyyxz_xtFZ","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss4CInta","ss4Voida","ss5ErrorP","ss5Int32V","ss5Int64V","ss5NeverO","ss5UInt8V","ss6HasherV","ss6ResultO","ss6UInt32V","ss6UInt64V","ss8SendableP","ss9AnyObjecta","ss9OptionSetP","ss9OptionSetP8rawValuex03RawD0Qz_tcfc","ss9OptionSetPs7ElementQzRszrlE6insertySb8inserted_x17memberAfterInserttxF","ss9OptionSetPs7ElementQzRszrlE6removeyxSgxF","ss9OptionSetPs7ElementQzRszrlE6update4withxSgx_tF","ss9OptionSetPs7ElementQzRszrlE8containsySbxF","ss9OptionSetPsE12intersectionyxxF","ss9OptionSetPsE19symmetricDifferenceyxxF","ss9OptionSetPsE5unionyxxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE16formIntersectionyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE23formSymmetricDifferenceyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE9formUnionyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlExycfc","ss9UnmanagedV"],"vertices":[{"p":["AsyncSequence","collect(upTo:into:)"],"f":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[" ",17],["maxBytes",2],[": ",17],["Int",18,1235],[", ",17],["into",1],[" ",17],["accumulationBuffer",2],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[": ",17],["Int",18],[", ",17],["into",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"e":[["Self.Element",2,"ByteBuffer",60]],"c":[["Self.Element",2,"ByteBuffer",60]],"d":"Accumulates an ``Swift/AsyncSequence`` of ``ByteBuffer``s into a single `accumulationBuffer`.\n- Parameters:\n  - accumulationBuffer: buffer to write all the elements of `self` into\n  - maxBytes: The maximum number of bytes this method is allowed to write into `accumulationBuffer`\n- Throws: ``NIOTooManyBytesError`` if the the sequence contains more than `maxBytes`.\nNote that previous elements of `self` might be already write to `accumulationBuffer`."},{"p":["AsyncSequence","collect(upTo:)"],"f":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[" ",17],["maxBytes",2],[": ",17],["Int",18,1235],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[": ",17],["Int",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ByteBuffer",18]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"e":[["Self.Element",2,"ByteBuffer",60]],"c":[["Self.Element",2,"ByteBuffer",60]],"d":"Accumulates an ``Swift/AsyncSequence`` of ``ByteBuffer``s into a single ``ByteBuffer``.\n- Parameters:\n  - maxBytes: The maximum number of bytes this method is allowed to accumulate\n- Throws: `NIOTooManyBytesError` if the the sequence contains more than `maxBytes`."},{"p":["AsyncSequence","collect(upTo:into:)"],"f":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[" ",17],["maxBytes",2],[": ",17],["Int",18,1235],[", ",17],["into",1],[" ",17],["accumulationBuffer",2],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[": ",17],["Int",18],[", ",17],["into",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"e":[["Self.Element",1,"RandomAccessCollection",1236],["Self.Element.Element",2,"UInt8",1392]],"c":[["Self.Element",1,"RandomAccessCollection",1236],["Self.Element.Element",2,"UInt8",1392]],"d":"Accumulates an ``Swift/AsyncSequence`` of ``Swift/RandomAccessCollection``s into a single `accumulationBuffer`.\n- Parameters:\n  - accumulationBuffer: buffer to write all the elements of `self` into\n  - maxBytes: The maximum number of bytes this method is allowed to write into `accumulationBuffer`\n- Throws: `NIOTooManyBytesError` if the the sequence contains more than `maxBytes`.\nNote that previous elements of `self` might already be write to `accumulationBuffer`."},{"p":["AsyncSequence","collect(upTo:using:)"],"f":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[" ",17],["maxBytes",2],[": ",17],["Int",18,1235],[", ",17],["using",1],[" ",17],["allocator",2],[": ",17],["ByteBufferAllocator",18,105],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["collect",7],["(",17],["upTo",1],[": ",17],["Int",18],[", ",17],["using",1],[": ",17],["ByteBufferAllocator",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ByteBuffer",18]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"e":[["Self.Element",1,"RandomAccessCollection",1236],["Self.Element.Element",2,"UInt8",1392]],"c":[["Self.Element",1,"RandomAccessCollection",1236],["Self.Element.Element",2,"UInt8",1392]],"d":"Accumulates an ``Swift/AsyncSequence`` of ``Swift/RandomAccessCollection``s into a single ``ByteBuffer``.\n- Parameters:\n  - maxBytes: The maximum number of bytes this method is allowed to accumulate\n  - allocator: Allocator used for allocating the result `ByteBuffer`\n- Throws: `NIOTooManyBytesError` if the the sequence contains more than `maxBytes`."},{"p":["DispatchData","init(buffer:)"],"f":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[")",17]],"d":"Creates a `DispatchData` from a given `ByteBuffer`. The entire readable portion of the buffer will be read.\n- parameter buffer: The buffer to read."},{"p":["DispatchQueue","asyncWithFuture(eventLoop:_:)"],"f":[["func",12],[" ",17],["asyncWithFuture",7],["<",17],["NewValue",0],[">(",17],["eventLoop",1],[": ",17],["EventLoop",18,29],[", ",17],["_",1],[" ",17],["callbackMayBlock",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["asyncWithFuture",7],["<",17],["NewValue",0],[">(",17],["eventLoop",1],[": ",17],["EventLoop",18],[", () ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["NewValue",0,0]],"d":"Schedules a work item for immediate execution and immediately returns with an `EventLoopFuture` providing the\nresult. For example:\n\n    let futureResult = DispatchQueue.main.asyncWithFuture(eventLoop: myEventLoop) { () -> String in\n        callbackMayBlock()\n    }\n    try let value = futureResult.wait()\n\n- parameters:\n    - eventLoop: the `EventLoop` on which to processes the IO / task specified by `callbackMayBlock`.\n    - callbackMayBlock: The scheduled callback for the IO / task.\n- returns a new `EventLoopFuture<ReturnType>` with value returned by the `block` parameter."},{"p":["ChannelCore"],"f":[["protocol",12],[" ",17],["ChannelCore",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["ChannelCore",7]],"d":"The core `Channel` methods that are for internal use of the `Channel` implementation only.\n\n- warning: If you are not implementing a custom `Channel` type, you should never call any of these.\n\n- note: All methods must be called from the `EventLoop` thread."},{"p":["ChannelOption"],"f":[["protocol",12],[" ",17],["ChannelOption",7],[" : ",17],["NIOPreconcurrencySendable",18,23],[", ",17],["Equatable",18,1169]],"s":[["protocol",12],[" ",17],["ChannelOption",7]],"d":"A configuration option that can be set on a `Channel` to configure different behaviour."},{"p":["ChannelHandler"],"f":[["protocol",12],[" ",17],["ChannelHandler",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["ChannelHandler",7]],"d":"You should _never_ implement this protocol directly. Please implement one of its sub-protocols."},{"p":["ChannelInvoker"],"f":[["protocol",12],[" ",17],["ChannelInvoker",7],[" : ",17],["ChannelInboundInvoker",18,18],[", ",17],["ChannelOutboundInvoker",18,20]],"s":[["protocol",12],[" ",17],["ChannelInvoker",7]],"d":"A protocol that signals that outbound and inbound events are triggered by this invoker."},{"p":["EventLoopGroup"],"f":[["protocol",12],[" ",17],["EventLoopGroup",7],[" : AnyObject, ",17],["NIOPreconcurrencySendable",18,23]],"s":[["protocol",12],[" ",17],["EventLoopGroup",7]],"d":"Provides an endless stream of `EventLoop`s to use."},{"p":["FileDescriptor"],"f":[["protocol",12],[" ",17],["FileDescriptor",7]],"s":[["protocol",12],[" ",17],["FileDescriptor",7]]},{"p":["MulticastChannel"],"f":[["protocol",12],[" ",17],["MulticastChannel",7],[" : ",17],["Channel",18,28]],"s":[["protocol",12],[" ",17],["MulticastChannel",7]],"d":"A `MulticastChannel` is a `Channel` that supports IP multicast operations: that is, a channel that can join multicast\ngroups.\n\n- note: As with `Channel`, all operations on a `MulticastChannel` are thread-safe."},{"p":["ByteToMessageDecoder"],"f":[["protocol",12],[" ",17],["ByteToMessageDecoder",7]],"s":[["protocol",12],[" ",17],["ByteToMessageDecoder",7]],"d":"`ByteToMessageDecoder`s decode bytes in a stream-like fashion from `ByteBuffer` to another message type.\n\n### Purpose\n\nA `ByteToMessageDecoder` provides a simplified API for handling streams of incoming data that can be broken\nup into messages. This API boils down to two methods: `decode`, and `decodeLast`. These two methods, when\nimplemented, will be used by a `ByteToMessageHandler` paired with a `ByteToMessageDecoder` to decode the\nincoming byte stream into a sequence of messages.\n\nThe reason this helper exists is to smooth away some of the boilerplate and edge case handling code that\nis often necessary when implementing parsers in a SwiftNIO `ChannelPipeline`. A `ByteToMessageDecoder`\nnever needs to worry about how inbound bytes will be buffered, as `ByteToMessageHandler` deals with that\nautomatically. A `ByteToMessageDecoder` also never needs to worry about memory exclusivity violations\nthat can occur when re-entrant `ChannelPipeline` operations occur, as `ByteToMessageHandler` will deal with\nthose as well.\n\n### Implementing ByteToMessageDecoder\n\nA type that implements `ByteToMessageDecoder` may implement two methods: decode and decodeLast. Implementations\nmust implement decode: if they do not implement decodeLast, a default implementation will be used that \nsimply calls decode.\n\n`decode` is the main decoding method, and is the one that will be called most often. `decode` is invoked\nwhenever data is received by the wrapping `ByteToMessageHandler`. It is invoked with a `ByteBuffer` containing\nall the received data (including any data previously buffered), as well as a `ChannelHandlerContext` that can be\nused in the `decode` function.\n\n`decode` is called in a loop by the `ByteToMessageHandler`. This loop continues until one of two cases occurs:\n\n1. The input `ByteBuffer` has no more readable bytes (i.e. `.readableBytes == 0`); OR\n2. The `decode` method returns `.needMoreData`.\n\nThe reason this method is invoked in a loop is to ensure that the stream-like properties of inbound data are\nrespected. It is entirely possible for `ByteToMessageDecoder` to receive either fewer bytes than a single message,\nor multiple messages in one go. Rather than have the `ByteToMessageDecoder` handle all of the complexity of this,\nthe logic can be boiled down to a single choice: has the `ByteToMessageDecoder` been able to move the state forward\nor not? If it has, rather than containing an internal loop it may simply return `.continue` in order to request that\n`decode` be invoked again immediately. If it has not, it can return `.needMoreData` to ask to be left alone until more\ndata has been returned from the network.\n\nEssentially, if the next parsing step could not be taken because there wasn't enough data available, return `.needMoreData`.\nOtherwise, return `.continue`. This will allow a `ByteToMessageDecoder` implementation to ignore the awkward way data\narrives from the network, and to just treat it as a series of `decode` calls.\n\n`decodeLast` is a cousin of `decode`. It is also called in a loop, but unlike with `decode` this loop will only ever\noccur once: when the `ChannelHandlerContext` belonging to this `ByteToMessageDecoder` is about to become invalidated.\nThis invalidation happens in two situations: when EOF is received from the network, or when the `ByteToMessageDecoder`\nis being removed from the `ChannelPipeline`. The distinction between these two states is captured by the value of\n`seenEOF`.\n\nIn this condition, the `ByteToMessageDecoder` must now produce any final messages it can with the bytes it has\navailable. In protocols where EOF is used as a message delimiter, having `decodeLast` called with `seenEOF == true`\nmay produce further messages. In other cases, `decodeLast` may choose to deliver any buffered bytes as \"leftovers\",\neither in error messages or via `channelRead`. This can occur if, for example, a protocol upgrade is occurring.\n\nAs with `decode`, `decodeLast` is invoked in a loop. This allows the same simplification as `decode` allows: when\na message is completely parsed, the `decodeLast` function can return `.continue` and be re-invoked from the top,\nrather than containing an internal loop.\n\nNote that the value of `seenEOF` may change between calls to `decodeLast` in some rare situations.\n\n### Implementers Notes\n\n/// `ByteToMessageHandler` will turn your `ByteToMessageDecoder` into a `ChannelInboundHandler`. `ByteToMessageHandler`\nalso solves a couple of tricky issues for you. Most importantly, in a `ByteToMessageDecoder` you do _not_ need to\nworry about re-entrancy. Your code owns the passed-in `ByteBuffer` for the duration of the `decode`/`decodeLast` call and\ncan modify it at will.\n\nIf a custom frame decoder is required, then one needs to be careful when implementing\none with `ByteToMessageDecoder`. Ensure there are enough bytes in the buffer for a\ncomplete frame by checking `buffer.readableBytes`. If there are not enough bytes\nfor a complete frame, return without modifying the reader index to allow more bytes to arrive.\n\nTo check for complete frames without modifying the reader index, use methods like `buffer.getInteger`.\nYou  _MUST_ use the reader index when using methods like `buffer.getInteger`.\nFor example calling `buffer.getInteger(at: 0)` is assuming the frame starts at the beginning of the buffer, which\nis not always the case. Use `buffer.getInteger(at: buffer.readerIndex)` instead.\n\nIf you move the reader index forward, either manually or by using one of `buffer.read*` methods, you must ensure\nthat you no longer need to see those bytes again as they will not be returned to you the next time `decode` is\ncalled. If you still need those bytes to come back, consider taking a local copy of buffer inside the function to\nperform your read operations on.\n\nThe `ByteBuffer` passed in as `buffer` is a slice of a larger buffer owned by the `ByteToMessageDecoder`\nimplementation. Some aspects of this buffer are preserved across calls to `decode`, meaning that any changes to\nthose properties you make in your `decode` method will be reflected in the next call to decode. In particular,\nmoving the reader index forward persists across calls. When your method returns, if the reader index has advanced,\nthose bytes are considered \"consumed\" and will not be available in future calls to `decode`.\nPlease note, however, that the numerical value of the `readerIndex` itself is not preserved, and may not be the same\nfrom one call to the next. Please do not rely on this numerical value: if you need\nto recall where a byte is relative to the `readerIndex`, use an offset rather than an absolute value.\n\n### Using ByteToMessageDecoder\n\nTo add a `ByteToMessageDecoder` to the `ChannelPipeline` use\n\n    channel.pipeline.addHandler(ByteToMessageHandler(MyByteToMessageDecoder()))\n"},{"p":["MessageToByteEncoder"],"f":[["protocol",12],[" ",17],["MessageToByteEncoder",7]],"s":[["protocol",12],[" ",17],["MessageToByteEncoder",7]],"d":"A protocol for straightforward encoders which encode custom messages to `ByteBuffer`s.\nTo add a `MessageToByteEncoder` to a `ChannelPipeline`, use\n`channel.pipeline.addHandler(MessageToByteHandler(myEncoder)`."},{"p":["NIOClientTLSProvider"],"f":[["protocol",12],[" ",17],["NIOClientTLSProvider",7]],"s":[["protocol",12],[" ",17],["NIOClientTLSProvider",7]]},{"p":["SocketOptionProvider"],"f":[["protocol",12],[" ",17],["SocketOptionProvider",7],[" : ",17],["NIOPreconcurrencySendable",18,23]],"s":[["protocol",12],[" ",17],["SocketOptionProvider",7]],"d":"This protocol defines an object, most commonly a `Channel`, that supports\nsetting and getting socket options (via `setsockopt`/`getsockopt` or similar).\nIt provides a strongly typed API that makes working with larger, less-common\nsocket options easier than the `ChannelOption` API allows.\n\nThe API is divided into two portions. For socket options that NIO has prior\nknowledge about, the API has strongly and safely typed APIs that only allow\nusers to use the exact correct type for the socket option. This will ensure\nthat the API is safe to use, and these are encouraged where possible.\n\nThese safe APIs are built on top of an \"unsafe\" API that is also exposed to\nusers as part of this protocol. The \"unsafe\" API is unsafe in the same way\nthat `UnsafePointer` is: incorrect use of the API allows all kinds of\nmemory-unsafe behaviour. This API is necessary for socket options that NIO\ndoes not have prior knowledge of, but wherever possible users are discouraged\nfrom using it.\n\n### Relationship to SocketOption\n\nAll `Channel` objects that implement this protocol should also support the\n`SocketOption` `ChannelOption` for simple socket options (those with C `int`\nvalues). These are the most common socket option types, and so this `ChannelOption`\nrepresents a convenient shorthand for using this protocol where the type allows,\nas well as avoiding the need to cast to this protocol.\n\n- note: Like the `Channel` protocol, all methods in this protocol are\n    thread-safe."},{"p":["ChannelInboundHandler"],"f":[["protocol",12],[" ",17],["ChannelInboundHandler",7],[" : ",17],["_ChannelInboundHandler",18],[", ",17],["_EmittingChannelHandler",18]],"s":[["protocol",12],[" ",17],["ChannelInboundHandler",7]],"d":"`ChannelHandler` which handles inbound I/O events for a `Channel`.\n\nPlease refer to `_ChannelInboundHandler` and `_EmittingChannelHandler` for more details on the provided methods."},{"p":["ChannelInboundInvoker"],"f":[["protocol",12],[" ",17],["ChannelInboundInvoker",7]],"s":[["protocol",12],[" ",17],["ChannelInboundInvoker",7]],"d":"Fire inbound events related to a `Channel` through the `ChannelPipeline` until its end is reached or it's consumed by a `ChannelHandler`."},{"p":["ChannelOutboundHandler"],"f":[["protocol",12],[" ",17],["ChannelOutboundHandler",7],[" : ",17],["_ChannelOutboundHandler",18],[", ",17],["_EmittingChannelHandler",18]],"s":[["protocol",12],[" ",17],["ChannelOutboundHandler",7]],"d":"`ChannelHandler` which handles outbound I/O events or intercept an outbound I/O operation for a `Channel`.\n\nPlease refer to `_ChannelOutboundHandler` and `_EmittingChannelHandler` for more details on the provided methods."},{"p":["ChannelOutboundInvoker"],"f":[["protocol",12],[" ",17],["ChannelOutboundInvoker",7]],"s":[["protocol",12],[" ",17],["ChannelOutboundInvoker",7]],"d":"Allows users to invoke an \"outbound\" operation related to a `Channel` that will flow through the `ChannelPipeline` until\nit will finally be executed by the the `ChannelCore` implementation."},{"p":["RecvByteBufferAllocator"],"f":[["protocol",12],[" ",17],["RecvByteBufferAllocator",7],[" : ",17],["NIOPreconcurrencySendable",18,23]],"s":[["protocol",12],[" ",17],["RecvByteBufferAllocator",7]],"d":"Allocates `ByteBuffer`s to be used to read bytes from a `Channel` and records the number of the actual bytes that were used."},{"p":["RemovableChannelHandler"],"f":[["protocol",12],[" ",17],["RemovableChannelHandler",7],[" : ",17],["ChannelHandler",18,8]],"s":[["protocol",12],[" ",17],["RemovableChannelHandler",7]],"d":"A `RemovableChannelHandler` is a `ChannelHandler` that can be dynamically removed from a `ChannelPipeline` whilst\nthe `Channel` is operating normally.\nA `RemovableChannelHandler` is required to remove itself from the `ChannelPipeline` (using\n`ChannelHandlerContext.removeHandler`) as soon as possible.\n\n- note: When a `Channel` gets torn down, every `ChannelHandler` in the `Channel`'s `ChannelPipeline` will be\n        removed from the `ChannelPipeline`. Those removals however happen synchronously and are not going through\n        the methods of this protocol."},{"p":["NIOPreconcurrencySendable"],"f":[["@preconcurrency",3],[" ",17],["protocol",12],[" ",17],["NIOPreconcurrencySendable",7],[" : ",17],["Sendable",18,1397]],"s":[["protocol",12],[" ",17],["NIOPreconcurrencySendable",7]]},{"p":["NIOSynchronousChannelOptions"],"f":[["protocol",12],[" ",17],["NIOSynchronousChannelOptions",7]],"s":[["protocol",12],[" ",17],["NIOSynchronousChannelOptions",7]]},{"p":["NIOClientTCPBootstrapProtocol"],"f":[["protocol",12],[" ",17],["NIOClientTCPBootstrapProtocol",7]],"s":[["protocol",12],[" ",17],["NIOClientTCPBootstrapProtocol",7]],"d":"`NIOClientTCPBootstrapProtocol` is implemented by various underlying transport mechanisms. Typically,\nthis will be the BSD Sockets API implemented by `ClientBootstrap`."},{"p":["NIOSingleStepByteToMessageDecoder"],"f":[["protocol",12],[" ",17],["NIOSingleStepByteToMessageDecoder",7],[" : ",17],["ByteToMessageDecoder",18,13]],"s":[["protocol",12],[" ",17],["NIOSingleStepByteToMessageDecoder",7]],"d":"A simplified version of `ByteToMessageDecoder` that can generate zero or one messages for each invocation of `decode` or `decodeLast`.\nHaving `decode` and `decodeLast` return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access\nto the `ByteBuffer` when returning. This allows for greatly simplified processing.\n\nMany `ByteToMessageDecoder`'s can trivially be translated to `NIOSingleStepByteToMessageDecoder`'s. You should not implement\n`ByteToMessageDecoder`'s `decode` and `decodeLast` methods."},{"p":["WriteObservingByteToMessageDecoder"],"f":[["protocol",12],[" ",17],["WriteObservingByteToMessageDecoder",7],[" : ",17],["ByteToMessageDecoder",18,13]],"s":[["protocol",12],[" ",17],["WriteObservingByteToMessageDecoder",7]],"d":"Some `ByteToMessageDecoder`s need to observe `write`s (which are outbound events). `ByteToMessageDecoder`s which\nimplement the `WriteObservingByteToMessageDecoder` protocol will be notified about every outbound write.\n\n`WriteObservingByteToMessageDecoder` may only observe a `write` and must not try to transform or block it in any\nway. After the `write` method returns the `write` will be forwarded to the next outbound handler."},{"p":["Channel"],"f":[["protocol",12],[" ",17],["Channel",7],[" : AnyObject, ",17],["ChannelOutboundInvoker",18,20],[", ",17],["NIOPreconcurrencySendable",18,23]],"s":[["protocol",12],[" ",17],["Channel",7]],"d":"A `Channel` is easiest thought of as a network socket. But it can be anything that is capable of I/O operations such\nas read, write, connect, and bind.\n\n- note: All operations on `Channel` are thread-safe.\n\nIn SwiftNIO, all I/O operations are asynchronous and hence all operations on `Channel` are asynchronous too. This means\nthat all I/O operations will return immediately, usually before the work has been completed. The `EventLoopPromise`s\npassed to or returned by the operations are used to retrieve the result of an operation after it has completed.\n\nA `Channel` owns its `ChannelPipeline` which handles all I/O events and requests associated with the `Channel`."},{"p":["EventLoop"],"f":[["protocol",12],[" ",17],["EventLoop",7],[" : ",17],["EventLoopGroup",18,10]],"s":[["protocol",12],[" ",17],["EventLoop",7]],"d":"An EventLoop processes IO / tasks in an endless loop for `Channel`s until it's closed.\n\nUsually multiple `Channel`s share the same `EventLoop` for processing IO / tasks and so share the same processing `NIOThread`.\nFor a better understanding of how such an `EventLoop` works internally the following pseudo code may be helpful:\n\n```\nwhile eventLoop.isOpen {\n    /// Block until there is something to process for 1...n Channels\n    let readyChannels = blockUntilIoOrTasksAreReady()\n    /// Loop through all the Channels\n    for channel in readyChannels {\n        /// Process IO and / or tasks for the Channel.\n        /// This may include things like:\n        ///    - accept new connection\n        ///    - connect to a remote host\n        ///    - read from socket\n        ///    - write to socket\n        ///    - tasks that were submitted via EventLoop methods\n        /// and others.\n        processIoAndTasks(channel)\n    }\n}\n```\n\nBecause an `EventLoop` may be shared between multiple `Channel`s it's important to _NOT_ block while processing IO / tasks. This also includes long running computations which will have the same\neffect as blocking in this case."},{"p":["ChannelOption","Value"],"f":[["associatedtype",12],[" ",17],["Value",7]],"s":[["associatedtype",12],[" ",17],["Value",7]],"d":"The type of the `ChannelOption`'s value."},{"p":["ByteToMessageDecoder","InboundOut"],"f":[["associatedtype",12],[" ",17],["InboundOut",7]],"s":[["associatedtype",12],[" ",17],["InboundOut",7]],"d":"The type of the messages this `ByteToMessageDecoder` decodes to."},{"p":["MessageToByteEncoder","OutboundIn"],"f":[["associatedtype",12],[" ",17],["OutboundIn",7]],"s":[["associatedtype",12],[" ",17],["OutboundIn",7]]},{"p":["NIOClientTLSProvider","Bootstrap"],"f":[["associatedtype",12],[" ",17],["Bootstrap",7]],"s":[["associatedtype",12],[" ",17],["Bootstrap",7]]},{"p":["ChannelInboundHandler","InboundIn"],"f":[["associatedtype",12],[" ",17],["InboundIn",7]],"s":[["associatedtype",12],[" ",17],["InboundIn",7]],"d":"The type of the inbound data which is wrapped in `NIOAny`."},{"p":["ChannelInboundHandler","InboundOut"],"f":[["associatedtype",12],[" ",17],["InboundOut",7],[" = ",17],["Never",18,1391]],"s":[["associatedtype",12],[" ",17],["InboundOut",7],[" = ",17],["Never",18]],"d":"The type of the inbound data which will be forwarded to the next `ChannelInboundHandler` in the `ChannelPipeline`."},{"p":["ChannelOutboundHandler","OutboundIn"],"f":[["associatedtype",12],[" ",17],["OutboundIn",7]],"s":[["associatedtype",12],[" ",17],["OutboundIn",7]],"d":"The type of the outbound data which is wrapped in `NIOAny`."},{"p":["NIOSingleStepByteToMessageDecoder","InboundOut"],"f":[["associatedtype",12],[" ",17],["InboundOut",7]],"s":[["associatedtype",12],[" ",17],["InboundOut",7]],"d":"The decoded type this `NIOSingleStepByteToMessageDecoder` decodes to. To conform to `ByteToMessageDecoder` it must be called\n`InboundOut` - see https://bugs.swift.org/browse/SR-11868."},{"p":["WriteObservingByteToMessageDecoder","OutboundIn"],"f":[["associatedtype",12],[" ",17],["OutboundIn",7]],"s":[["associatedtype",12],[" ",17],["OutboundIn",7]],"d":"The type of `write`s."},{"p":["Endianness"],"f":[["enum",12],[" ",17],["Endianness",7]],"s":[["enum",12],[" ",17],["Endianness",7]],"d":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in\nmemory or when transmitted over digital links."},{"p":["ChannelError"],"f":[["enum",12],[" ",17],["ChannelError",7]],"s":[["enum",12],[" ",17],["ChannelError",7]],"d":"An error that can occur on `Channel` operations."},{"p":["ChannelEvent"],"f":[["enum",12],[" ",17],["ChannelEvent",7]],"s":[["enum",12],[" ",17],["ChannelEvent",7]],"d":"An `Channel` related event that is passed through the `ChannelPipeline` to notify the user."},{"p":["NIOBSDSocket"],"f":[["enum",12],[" ",17],["NIOBSDSocket",7]],"s":[["enum",12],[" ",17],["NIOBSDSocket",7]]},{"p":["DecodingState"],"f":[["enum",12],[" ",17],["DecodingState",7]],"s":[["enum",12],[" ",17],["DecodingState",7]],"d":"State of the current decoding process."},{"p":["SocketAddress"],"f":[["enum",12],[" ",17],["SocketAddress",7]],"s":[["enum",12],[" ",17],["SocketAddress",7]],"d":"Represent a socket address to which we may want to connect or bind."},{"p":["ChannelOptions","Types"],"f":[["enum",12],[" ",17],["Types",7]],"s":[["enum",12],[" ",17],["Types",7]]},{"p":["ChannelOptions","Types","ConvenienceOptionValue"],"f":[["enum",12],[" ",17],["ConvenienceOptionValue",7],["<",17],["ValueType",0],[">",17]],"s":[["enum",12],[" ",17],["ConvenienceOptionValue",7]],"g":[["ValueType",0,0]],"d":"Has an option been set?\nOption has a value of generic type ValueType."},{"p":["EventLoopError"],"f":[["enum",12],[" ",17],["EventLoopError",7]],"s":[["enum",12],[" ",17],["EventLoopError",7]],"d":"Different `Error`s that are specific to `EventLoop` operations / implementations."},{"p":["ChannelPipeline","Position"],"f":[["enum",12],[" ",17],["Position",7]],"s":[["enum",12],[" ",17],["Position",7]],"d":"A `Position` within the `ChannelPipeline` used to insert handlers into the `ChannelPipeline`."},{"p":["IdleStateHandler","IdleStateEvent"],"f":[["enum",12],[" ",17],["IdleStateEvent",7]],"s":[["enum",12],[" ",17],["IdleStateEvent",7]],"d":"A user event triggered by IdleStateHandler when a Channel is idle."},{"p":["SocketAddressError"],"f":[["enum",12],[" ",17],["SocketAddressError",7]],"s":[["enum",12],[" ",17],["SocketAddressError",7]],"d":"Special `Error` that may be thrown if we fail to create a `SocketAddress`."},{"p":["ChannelPipelineError"],"f":[["enum",12],[" ",17],["ChannelPipelineError",7]],"s":[["enum",12],[" ",17],["ChannelPipelineError",7]],"d":"`Error` that is used by the `ChannelPipeline` to inform the user of an error."},{"p":["DatagramChannelError"],"f":[["enum",12],[" ",17],["DatagramChannelError",7]],"s":[["enum",12],[" ",17],["DatagramChannelError",7]]},{"p":["ByteToMessageDecoderError"],"f":[["enum",12],[" ",17],["ByteToMessageDecoderError",7]],"s":[["enum",12],[" ",17],["ByteToMessageDecoderError",7]],"d":"Common errors thrown by `ByteToMessageDecoder`s."},{"p":["NIOEventLoopGroupProvider"],"f":[["enum",12],[" ",17],["NIOEventLoopGroupProvider",7]],"s":[["enum",12],[" ",17],["NIOEventLoopGroupProvider",7]],"d":"This type is intended to be used by libraries which use NIO, and offer their users either the option\nto `.share` an existing event loop group or create (and manage) a new one (`.createNew`) and let it be\nmanaged by given library and its lifecycle."},{"p":["NIOExplicitCongestionNotificationState"],"f":[["enum",12],[" ",17],["NIOExplicitCongestionNotificationState",7]],"s":[["enum",12],[" ",17],["NIOExplicitCongestionNotificationState",7]],"d":"Possible Explicit Congestion Notification States"},{"p":["IOData"],"f":[["enum",12],[" ",17],["IOData",7]],"s":[["enum",12],[" ",17],["IOData",7]],"d":"`IOData` unifies standard SwiftNIO types that are raw bytes of data; currently `ByteBuffer` and `FileRegion`.\n\nMany `ChannelHandler`s receive or emit bytes and in most cases this can be either a `ByteBuffer` or a `FileRegion`\nfrom disk. To still form a well-typed `ChannelPipeline` such handlers should receive and emit value of type `IOData`."},{"p":["System"],"f":[["enum",12],[" ",17],["System",7]],"s":[["enum",12],[" ",17],["System",7]]},{"p":["IOError","FailureDescription"],"f":[["enum",12],[" ",17],["FailureDescription",7]],"s":[["enum",12],[" ",17],["FailureDescription",7]],"a":{"a":{"d":true,"m":"NIO no longer uses FailureDescription."}}},{"p":["CloseMode"],"f":[["enum",12],[" ",17],["CloseMode",7]],"s":[["enum",12],[" ",17],["CloseMode",7]],"d":"Specify what kind of close operation is requested."},{"p":["ByteBuffer"],"f":[["struct",12],[" ",17],["ByteBuffer",7]],"s":[["struct",12],[" ",17],["ByteBuffer",7]],"d":"`ByteBuffer` stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or\nmore bytes (octets).\n\n### Allocation\nUse `allocator.buffer(capacity: desiredCapacity)` to allocate a new `ByteBuffer`.\n\n### Supported types\nA variety of types can be read/written from/to a `ByteBuffer`. Using Swift's `extension` mechanism you can easily\ncreate `ByteBuffer` support for your own data types. Out of the box, `ByteBuffer` supports for example the following\ntypes (non-exhaustive list):\n\n - `String`/`StaticString`\n - Swift's various (unsigned) integer types\n - `Foundation`'s `Data`\n - `[UInt8]` and generally any `Collection` of `UInt8`\n\n### Random Access\nFor every supported type `ByteBuffer` usually contains two methods for random access:\n\n 1. `get<Type>(at: Int, length: Int)` where `<type>` is for example `String`, `Data`, `Bytes` (for `[UInt8]`)\n 2. `set<Type>(at: Int)`\n\nExample:\n\n    var buf = ...\n    buf.setString(\"Hello World\", at: 0)\n    buf.moveWriterIndex(to: 11)\n    let helloWorld = buf.getString(at: 0, length: 11)\n\n    let written = buf.setInteger(17 as Int, at: 11)\n    buf.moveWriterIndex(forwardBy: written)\n    let seventeen: Int? = buf.getInteger(at: 11)\n\nIf needed, `ByteBuffer` will automatically resize its storage to accommodate your `set` request.\n\n### Sequential Access\n`ByteBuffer` provides two properties which are indices into the `ByteBuffer` to support sequential access:\n - `readerIndex`, the index of the next readable byte\n - `writerIndex`, the index of the next byte to write\n\nFor every supported type `ByteBuffer` usually contains two methods for sequential access:\n\n 1. `read<Type>(length: Int)` to read `length` bytes from the current `readerIndex` (and then advance the reader\n    index by `length` bytes)\n 2. `write<Type>(Type)` to write, advancing the `writerIndex` by the appropriate amount\n\nExample:\n\n     var buf = ...\n     buf.writeString(\"Hello World\")\n     buf.writeInteger(17 as Int)\n     let helloWorld = buf.readString(length: 11)\n     let seventeen: Int = buf.readInteger()\n\n### Layout\n    +-------------------+------------------+------------------+\n    | discardable bytes |  readable bytes  |  writable bytes  |\n    |                   |     (CONTENT)    |                  |\n    +-------------------+------------------+------------------+\n    |                   |                  |                  |\n    0      <=      readerIndex   <=   writerIndex    <=    capacity\n\nThe 'discardable bytes' are usually bytes that have already been read, they can however still be accessed using\nthe random access methods. 'Readable bytes' are the bytes currently available to be read using the sequential\naccess interface (`read<Type>`/`write<Type>`). Getting `writableBytes` (bytes beyond the writer index) is undefined\nbehaviour and might yield arbitrary bytes (_not_ `0` initialised).\n\n### Slicing\n`ByteBuffer` supports slicing a `ByteBuffer` without copying the underlying storage.\n\nExample:\n\n    var buf = ...\n    let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]\n    let dataBytesLength = UInt32(dataBytes.count)\n    buf.writeInteger(dataBytesLength) /* the header */\n    buf.writeBytes(dataBytes) /* the data */\n    let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)\n    /* `bufDataByteOnly` and `buf` will share their storage */\n\n### Notes\nAll `ByteBuffer` methods that don't contain the word 'unsafe' will only allow you to access the 'readable bytes'.\n"},{"p":["ByteBuffer","CopyBytesError"],"f":[["struct",12],[" ",17],["CopyBytesError",7]],"s":[["struct",12],[" ",17],["CopyBytesError",7]],"d":"Errors thrown when calling `copyBytes`."},{"p":["ByteBuffer","LengthPrefixError"],"f":[["struct",12],[" ",17],["LengthPrefixError",7]],"s":[["struct",12],[" ",17],["LengthPrefixError",7]]},{"p":["FileRegion"],"f":[["struct",12],[" ",17],["FileRegion",7]],"s":[["struct",12],[" ",17],["FileRegion",7]],"d":"A `FileRegion` represent a readable portion usually created to be sent over the network.\n\nUsually a `FileRegion` will allow the underlying transport to use `sendfile` to transfer its content and so allows transferring\nthe file content without copying it into user-space at all. If the actual transport implementation really can make use of sendfile\nor if it will need to copy the content to user-space first and use `write` / `writev` is an implementation detail. That said\n using `FileRegion` is the recommended way to transfer file content if possible.\n\nOne important note, depending your `ChannelPipeline` setup it may not be possible to use a `FileRegion` as a `ChannelHandler` may\nneed access to the bytes (in a `ByteBuffer`) to transform these.\n\n- note: It is important to manually manage the lifetime of the `NIOFileHandle` used to create a `FileRegion`.\n- warning: `FileRegion` objects are not thread-safe and are mutable. They also cannot be fully thread-safe as they refer to a global underlying file descriptor."},{"p":["TimeAmount"],"f":[["struct",12],[" ",17],["TimeAmount",7]],"s":[["struct",12],[" ",17],["TimeAmount",7]],"d":"Represents a time _interval_.\n\n- note: `TimeAmount` should not be used to represent a point in time."},{"p":["NIODeadline"],"f":[["struct",12],[" ",17],["NIODeadline",7]],"s":[["struct",12],[" ",17],["NIODeadline",7]],"d":"Represents a point in time.\n\nStores the time in nanoseconds as returned by `DispatchTime.now().uptimeNanoseconds`\n\n`NIODeadline` allow chaining multiple tasks with the same deadline without needing to\ncompute new timeouts for each step\n\n```\nfunc doSomething(deadline: NIODeadline) -> EventLoopFuture<Void> {\n    return step1(deadline: deadline).flatMap {\n        step2(deadline: deadline)\n    }\n}\ndoSomething(deadline: .now() + .seconds(5))\n```\n\n- note: `NIODeadline` should not be used to represent a time interval"},{"p":["NIOBSDSocket","OptionLevel"],"f":[["struct",12],[" ",17],["OptionLevel",7]],"s":[["struct",12],[" ",17],["OptionLevel",7]],"d":"Defines socket option levels."},{"p":["NIOBSDSocket","AddressFamily"],"f":[["struct",12],[" ",17],["AddressFamily",7]],"s":[["struct",12],[" ",17],["AddressFamily",7]],"d":"Specifies the addressing scheme that the socket can use."},{"p":["NIOBSDSocket","ProtocolFamily"],"f":[["struct",12],[" ",17],["ProtocolFamily",7]],"s":[["struct",12],[" ",17],["ProtocolFamily",7]],"d":"Specifies the type of protocol that the socket can use."},{"p":["NIOBSDSocket","Option"],"f":[["struct",12],[" ",17],["Option",7]],"s":[["struct",12],[" ",17],["Option",7]],"d":"Defines configuration option names."},{"p":["NIOFileHandle","Mode"],"f":[["struct",12],[" ",17],["Mode",7]],"s":[["struct",12],[" ",17],["Mode",7]],"d":"`Mode` represents file access modes."},{"p":["NIOFileHandle","Flags"],"f":[["struct",12],[" ",17],["Flags",7]],"s":[["struct",12],[" ",17],["Flags",7]],"d":"`Flags` allows to specify additional flags to `Mode`, such as permission for file creation."},{"p":["NIOPacketInfo"],"f":[["struct",12],[" ",17],["NIOPacketInfo",7]],"s":[["struct",12],[" ",17],["NIOPacketInfo",7]]},{"p":["SocketAddress","IPv4Address"],"f":[["struct",12],[" ",17],["IPv4Address",7]],"s":[["struct",12],[" ",17],["IPv4Address",7]],"d":"A single IPv4 address for `SocketAddress`."},{"p":["SocketAddress","IPv6Address"],"f":[["struct",12],[" ",17],["IPv6Address",7]],"s":[["struct",12],[" ",17],["IPv6Address",7]],"d":"A single IPv6 address for `SocketAddress`."},{"p":["SocketAddress","UnixSocketAddress"],"f":[["struct",12],[" ",17],["UnixSocketAddress",7]],"s":[["struct",12],[" ",17],["UnixSocketAddress",7]],"d":"A single Unix socket address for `SocketAddress`."},{"p":["ByteBufferView"],"f":[["struct",12],[" ",17],["ByteBufferView",7]],"s":[["struct",12],[" ",17],["ByteBufferView",7]],"d":"A view into a portion of a `ByteBuffer`.\n\nA `ByteBufferView` is useful whenever a `Collection where Element == UInt8` representing a portion of a\n`ByteBuffer` is needed."},{"p":["ChannelOptions"],"f":[["struct",12],[" ",17],["ChannelOptions",7]],"s":[["struct",12],[" ",17],["ChannelOptions",7]],"d":"Provides `ChannelOption`s to be used with a `Channel`, `Bootstrap` or `ServerBootstrap`."},{"p":["ChannelOptions","TCPConvenienceOptions"],"f":[["struct",12],[" ",17],["TCPConvenienceOptions",7]],"s":[["struct",12],[" ",17],["TCPConvenienceOptions",7]],"d":"A set of `TCPConvenienceOption`s"},{"p":["ChannelOptions","TCPConvenienceOption"],"f":[["struct",12],[" ",17],["TCPConvenienceOption",7]],"s":[["struct",12],[" ",17],["TCPConvenienceOption",7]],"d":"A TCP channel option which can be applied to a bootstrap using convenience notation."},{"p":["ChannelOptions","Types","SocketOption"],"f":[["struct",12],[" ",17],["SocketOption",7]],"s":[["struct",12],[" ",17],["SocketOption",7]],"d":"`SocketOption` allows users to specify configuration settings that are directly applied to the underlying socket file descriptor.\n\nValid options are typically found in the various man pages like `man 4 tcp`."},{"p":["ChannelOptions","Types","BacklogOption"],"f":[["struct",12],[" ",17],["BacklogOption",7]],"s":[["struct",12],[" ",17],["BacklogOption",7]],"d":"`BacklogOption` allows users to configure the `backlog` value as specified in `man 2 listen`. This is only useful for `ServerSocketChannel`s."},{"p":["ChannelOptions","Types","AutoReadOption"],"f":[["struct",12],[" ",17],["AutoReadOption",7]],"s":[["struct",12],[" ",17],["AutoReadOption",7]],"d":"`AutoReadOption` allows users to configure if a `Channel` should automatically call `Channel.read` again once all data was read from the transport or\nif the user is responsible to call `Channel.read` manually."},{"p":["ChannelOptions","Types","AllocatorOption"],"f":[["struct",12],[" ",17],["AllocatorOption",7]],"s":[["struct",12],[" ",17],["AllocatorOption",7]],"d":"`AllocatorOption` allows to specify the `ByteBufferAllocator` to use."},{"p":["ChannelOptions","Types","WriteSpinOption"],"f":[["struct",12],[" ",17],["WriteSpinOption",7]],"s":[["struct",12],[" ",17],["WriteSpinOption",7]],"d":"`WriteSpinOption` allows users to configure the number of repetitions of a only partially successful write call before considering the `Channel` not writable.\nSetting this option to `0` means that we only issue one write call and if that call does not write all the bytes,\nwe consider the `Channel` not writable."},{"p":["ChannelOptions","Types","ReceivePacketInfo"],"f":[["struct",12],[" ",17],["ReceivePacketInfo",7]],"s":[["struct",12],[" ",17],["ReceivePacketInfo",7]],"d":"When set to true IP level Packet Info information will be reported through `AddressedEnvelope.Metadata` for UDP packets."},{"p":["ChannelOptions","Types","RecvAllocatorOption"],"f":[["struct",12],[" ",17],["RecvAllocatorOption",7]],"s":[["struct",12],[" ",17],["RecvAllocatorOption",7]],"d":"`RecvAllocatorOption` allows users to specify the `RecvByteBufferAllocator` to use."},{"p":["ChannelOptions","Types","ConnectTimeoutOption"],"f":[["struct",12],[" ",17],["ConnectTimeoutOption",7]],"s":[["struct",12],[" ",17],["ConnectTimeoutOption",7]],"d":"`ConnectTimeoutOption` allows users to configure the `TimeAmount` after which a connect will fail if it was not established in the meantime. May be\n`nil`, in which case the connection attempt will never time out."},{"p":["ChannelOptions","Types","WriteBufferWaterMark"],"f":[["struct",12],[" ",17],["WriteBufferWaterMark",7]],"s":[["struct",12],[" ",17],["WriteBufferWaterMark",7]],"d":"The watermark used to detect when `Channel.isWritable` returns `true` or `false`."},{"p":["ChannelOptions","Types","MaxMessagesPerReadOption"],"f":[["struct",12],[" ",17],["MaxMessagesPerReadOption",7]],"s":[["struct",12],[" ",17],["MaxMessagesPerReadOption",7]],"d":"`MaxMessagesPerReadOption` allows users to configure the maximum number of read calls to the underlying transport are performed before wait again until\nthere is more to read and be notified."},{"p":["ChannelOptions","Types","WriteBufferWaterMarkOption"],"f":[["struct",12],[" ",17],["WriteBufferWaterMarkOption",7]],"s":[["struct",12],[" ",17],["WriteBufferWaterMarkOption",7]],"d":"`WriteBufferWaterMarkOption` allows users to configure when a `Channel` should be marked as writable or not. Once the amount of bytes queued in a\n`Channel`s outbound buffer is larger than `WriteBufferWaterMark.high` the channel will be marked as non-writable and so\n`Channel.isWritable` will return `false`. Once we were able to write some data out of the outbound buffer and the amount of bytes queued\nfalls below `WriteBufferWaterMark.low` the `Channel` will become writable again. Once this happens `Channel.writable` will return\n`true` again. These writability changes are also propagated through the `ChannelPipeline` and so can be intercepted via `ChannelInboundHandler.channelWritabilityChanged`."},{"p":["ChannelOptions","Types","AllowRemoteHalfClosureOption"],"f":[["struct",12],[" ",17],["AllowRemoteHalfClosureOption",7]],"s":[["struct",12],[" ",17],["AllowRemoteHalfClosureOption",7]],"d":"`AllowRemoteHalfClosureOption` allows users to configure whether the `Channel` will close itself when its remote\npeer shuts down its send stream, or whether it will remain open. If set to `false` (the default), the `Channel`\nwill be closed automatically if the remote peer shuts down its send stream. If set to true, the `Channel` will\nnot be closed: instead, a `ChannelEvent.inboundClosed` user event will be sent on the `ChannelPipeline`,\nand no more data will be received."},{"p":["ChannelOptions","Types","DatagramVectorReadMessageCountOption"],"f":[["struct",12],[" ",17],["DatagramVectorReadMessageCountOption",7]],"s":[["struct",12],[" ",17],["DatagramVectorReadMessageCountOption",7]],"d":"`DatagramVectorReadMessageCountOption` allows users to configure the number of messages to attempt to read in a single syscall on a\ndatagram `Channel`.\n\nSome datagram `Channel`s have extremely high datagram throughput. This can occur when the single datagram socket is encapsulating\nmany logical \"connections\" (e.g. with QUIC) or when the datagram socket is simply serving an enormous number of consumers (e.g.\nwith a public-facing DNS server). In this case the overhead of one syscall per datagram is profoundly limiting. Using this\n`ChannelOption` allows the `Channel` to read multiple datagrams at once.\n\nNote that simply increasing this number will not necessarily bring performance gains and may in fact cause data loss. Any increase\nto this should be matched by increasing the size of the buffers allocated by the `Channel` `RecvByteBufferAllocator` (as set by\n`ChannelOption.recvAllocator`) proportionally. For example, to receive 10 messages at a time, set the size of the buffers allocated\nby the `RecvByteBufferAllocator` to at least 10x the size of the maximum datagram size you wish to receive.\n\nNaturally, this option is only valid on datagram channels.\n\nThis option only works on the following platforms:\n\n- Linux\n- FreeBSD\n- Android\n\nOn all other platforms, setting it has no effect.\n\nSet this option to 0 to disable vector reads and to use serial reads instead."},{"p":["ChannelOptions","Types","ExplicitCongestionNotificationsOption"],"f":[["struct",12],[" ",17],["ExplicitCongestionNotificationsOption",7]],"s":[["struct",12],[" ",17],["ExplicitCongestionNotificationsOption",7]],"d":"When set to true IP level ECN information will be reported through `AddressedEnvelope.Metadata`"},{"p":["ChannelOptions","Storage"],"f":[["struct",12],[" ",17],["Storage",7]],"s":[["struct",12],[" ",17],["Storage",7]],"d":"A type-safe storage facility for `ChannelOption`s. You will only ever need this if you implement your own\n`Channel` that needs to store `ChannelOption`s."},{"p":["CircularBuffer"],"f":[["struct",12],[" ",17],["CircularBuffer",7],["<",17],["Element",0],[">",17]],"s":[["struct",12],[" ",17],["CircularBuffer",7]],"g":[["Element",0,0]],"d":"An automatically expanding ring buffer implementation backed by a `ContiguousArray`. Even though this implementation\nwill automatically expand if more elements than `initialCapacity` are stored, it's advantageous to prevent\nexpansions from happening frequently. Expansions will always force an allocation and a copy to happen."},{"p":["CircularBuffer","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"g":[["Element",0,0]],"d":"An opaque `CircularBuffer` index.\n\nYou may get indices offset from other indices by using `CircularBuffer.index(:offsetBy:)`,\n`CircularBuffer.index(before:)`, or `CircularBuffer.index(after:)`.\n\n- note: Every index is invalidated as soon as you perform a length-changing operating on the `CircularBuffer`\n        but remains valid when you replace one item by another using the subscript.","o":1261},{"p":["ChannelPipeline","SynchronousOperations"],"f":[["struct",12],[" ",17],["SynchronousOperations",7]],"s":[["struct",12],[" ",17],["SynchronousOperations",7]],"d":"A view of a `ChannelPipeline` which may be used to invoke synchronous operations.\n\nAll functions **must** be called from the pipeline's event loop."},{"p":["EventLoopPromise"],"f":[["struct",12],[" ",17],["EventLoopPromise",7],["<",17],["Value",0],[">",17]],"s":[["struct",12],[" ",17],["EventLoopPromise",7]],"g":[["Value",0,0]],"d":"A promise to provide a result later.\n\nThis is the provider API for `EventLoopFuture<Value>`. If you want to return an\nunfulfilled `EventLoopFuture<Value>` -- presumably because you are interfacing to\nsome asynchronous service that will return a real result later, follow this\npattern:\n\n```\nfunc someAsyncOperation(args) -> EventLoopFuture<ResultType> {\n    let promise = eventLoop.makePromise(of: ResultType.self)\n    someAsyncOperationWithACallback(args) { result -> Void in\n        // when finished...\n        promise.succeed(result)\n        // if error...\n        promise.fail(error)\n    }\n    return promise.futureResult\n}\n```\n\nNote that the future result is returned before the async process has provided a value.\n\nIt's actually not very common to use this directly. Usually, you really want one\nof the following:\n\n* If you have an `EventLoopFuture` and want to do something else after it completes,\n    use `.flatMap()`\n* If you already have a value and need an `EventLoopFuture<>` object to plug into\n    some other API, create an already-resolved object with `eventLoop.makeSucceededFuture(result)`\n    or `eventLoop.newFailedFuture(error:)`.\n\n- note: `EventLoopPromise` has reference semantics."},{"p":["NIOInsecureNoTLS"],"f":[["struct",12],[" ",17],["NIOInsecureNoTLS",7],["<",17],["Bootstrap",0],["> ",17],["where",12],[" ",17],["Bootstrap",18],[" : ",17],["NIOClientTCPBootstrapProtocol",18,25]],"s":[["struct",12],[" ",17],["NIOInsecureNoTLS",7]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",25]],"g":[["Bootstrap",0,0]]},{"p":["NIONetworkDevice"],"f":[["struct",12],[" ",17],["NIONetworkDevice",7]],"s":[["struct",12],[" ",17],["NIONetworkDevice",7]],"d":"A representation of a single network device on a system."},{"p":["AddressedEnvelope"],"f":[["struct",12],[" ",17],["AddressedEnvelope",7],["<",17],["DataType",0],[">",17]],"s":[["struct",12],[" ",17],["AddressedEnvelope",7]],"g":[["DataType",0,0]],"d":"A data structure for processing addressed datagrams, such as those used by UDP.\n\nThe AddressedEnvelope is used extensively on `DatagramChannel`s in order to keep track\nof source or destination address metadata: that is, where some data came from or where\nit is going."},{"p":["AddressedEnvelope","Metadata"],"f":[["struct",12],[" ",17],["Metadata",7]],"s":[["struct",12],[" ",17],["Metadata",7]],"g":[["DataType",0,0]],"d":"Any metadata associated with an `AddressedEnvelope`"},{"p":["EventLoopIterator"],"f":[["struct",12],[" ",17],["EventLoopIterator",7]],"s":[["struct",12],[" ",17],["EventLoopIterator",7]],"d":"An iterator over the `EventLoop`s forming an `EventLoopGroup`.\n\nUsually returned by an `EventLoopGroup`'s `makeIterator()` method.\n\n    let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)\n    group.makeIterator().forEach { loop in\n        // Do something with each loop\n    }\n"},{"p":["SocketAddressError","FailedToParseIPByteBuffer"],"f":[["struct",12],[" ",17],["FailedToParseIPByteBuffer",7]],"s":[["struct",12],[" ",17],["FailedToParseIPByteBuffer",7]],"d":"Unable to parse a given IP ByteBuffer"},{"p":["ByteBufferAllocator"],"f":[["struct",12],[" ",17],["ByteBufferAllocator",7]],"s":[["struct",12],[" ",17],["ByteBufferAllocator",7]],"d":"The preferred allocator for `ByteBuffer` values. The allocation strategy is opaque but is currently libc's\n`malloc`, `realloc` and `free`.\n\n- note: `ByteBufferAllocator` is thread-safe."},{"p":["DatagramChannelError","WriteOnUnconnectedSocketWithoutAddress"],"f":[["struct",12],[" ",17],["WriteOnUnconnectedSocketWithoutAddress",7]],"s":[["struct",12],[" ",17],["WriteOnUnconnectedSocketWithoutAddress",7]]},{"p":["DatagramChannelError","WriteOnConnectedSocketWithInvalidAddress"],"f":[["struct",12],[" ",17],["WriteOnConnectedSocketWithInvalidAddress",7]],"s":[["struct",12],[" ",17],["WriteOnConnectedSocketWithInvalidAddress",7]]},{"p":["MarkedCircularBuffer"],"f":[["struct",12],[" ",17],["MarkedCircularBuffer",7],["<",17],["Element",0],[">",17]],"s":[["struct",12],[" ",17],["MarkedCircularBuffer",7]],"g":[["Element",0,0]],"d":"A circular buffer that allows one object at a time to be \"marked\" and easily identified and retrieved later.\n\nThis object is used extensively within SwiftNIO to handle flushable buffers. It can be used to store buffered\nwrites and mark how far through the buffer the user has flushed, and therefore how far through the buffer is\nsafe to write."},{"p":["NIOTooManyBytesError"],"f":[["struct",12],[" ",17],["NIOTooManyBytesError",7]],"s":[["struct",12],[" ",17],["NIOTooManyBytesError",7]]},{"p":["ChannelHandlerContext","RemovalToken"],"f":[["struct",12],[" ",17],["RemovalToken",7]],"s":[["struct",12],[" ",17],["RemovalToken",7]],"d":"A `RemovalToken` is handed to a `RemovableChannelHandler` when its `removeHandler` function is invoked. A\n`RemovableChannelHandler` is then required to remove itself from the `ChannelPipeline`. The removal process\nis finalized by handing the `RemovalToken` to the `ChannelHandlerContext.leavePipeline` function."},{"p":["NIOClientTCPBootstrap"],"f":[["struct",12],[" ",17],["NIOClientTCPBootstrap",7]],"s":[["struct",12],[" ",17],["NIOClientTCPBootstrap",7]],"d":"`NIOClientTCPBootstrap` is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,\nNIO Transport Services, or other ways.\n\nUsually, to bootstrap a connection with SwiftNIO, you have to match the right `EventLoopGroup`, the right bootstrap,\nand the right TLS implementation. Typical choices involve:\n - `MultiThreadedEventLoopGroup`, `ClientBootstrap`, and `NIOSSLClientHandler` (from\n   [`swift-nio-ssl`](https://github.com/apple/swift-nio-ssl)) for NIO on BSD sockets.\n - `NIOTSEventLoopGroup`, `NIOTSConnectionBootstrap`, and the Network.framework TLS implementation (all from\n   [`swift-nio-transport-services`](https://github.com/apple/swift-nio-transport-services).\n\nBootstrapping connections that way works but is quite tedious for packages that support multiple ways of\nbootstrapping. The idea behind `NIOClientTCPBootstrap` is to do all configuration in one place (when you initialize\na `NIOClientTCPBootstrap`) and then have a common API that works for all use-cases.\n\nExample:\n\n    // This function combines the right pieces and returns you a \"universal client bootstrap\"\n    // (`NIOClientTCPBootstrap`). This allows you to bootstrap connections (with or without TLS) using either the\n    // NIO on sockets (`NIO`) or NIO on Network.framework (`NIOTransportServices`) stacks.\n    // The remainder of the code should be platform-independent.\n    func makeUniversalBootstrap(serverHostname: String) throws -> (NIOClientTCPBootstrap, EventLoopGroup) {\n        func useNIOOnSockets() throws -> (NIOClientTCPBootstrap, EventLoopGroup) {\n            let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)\n            let sslContext = try NIOSSLContext(configuration: TLSConfiguration.forClient())\n            let bootstrap = try NIOClientTCPBootstrap(ClientBootstrap(group: group),\n                                                      tls: NIOSSLClientTLSProvider(context: sslContext,\n                                                                                   serverHostname: serverHostname))\n            return (bootstrap, group)\n        }\n\n        #if canImport(Network)\n        if #available(macOS 10.14, iOS 12, tvOS 12, watchOS 3, *) {\n            // We run on a new-enough Darwin so we can use Network.framework\n\n            let group = NIOTSEventLoopGroup()\n            let bootstrap = NIOClientTCPBootstrap(NIOTSConnectionBootstrap(group: group),\n                                                  tls: NIOTSClientTLSProvider())\n            return (bootstrap, group)\n        } else {\n            // We're on Darwin but not new enough for Network.framework, so we fall back on NIO on BSD sockets.\n            return try useNIOOnSockets()\n        }\n        #else\n        // We are on a non-Darwin platform, so we'll use BSD sockets.\n        return try useNIOOnSockets()\n        #endif\n    }\n\n    let (bootstrap, group) = try makeUniversalBootstrap(serverHostname: \"example.com\")\n    let connection = try bootstrap\n            .channelInitializer { channel in\n                channel.pipeline.addHandler(PrintEverythingHandler { _ in })\n            }\n            .enableTLS()\n            .connect(host: \"example.com\", port: 443)\n            .wait()"},{"p":["ByteToMessageDecoderError","PayloadTooLargeError"],"f":[["struct",12],[" ",17],["PayloadTooLargeError",7]],"s":[["struct",12],[" ",17],["PayloadTooLargeError",7]],"d":"This error can be thrown by `ByteToMessageDecoder`s if the incoming payload is larger than the max specified."},{"p":["ChannelShouldQuiesceEvent"],"f":[["struct",12],[" ",17],["ChannelShouldQuiesceEvent",7]],"s":[["struct",12],[" ",17],["ChannelShouldQuiesceEvent",7]],"d":"A `Channel` user event that is sent when the `Channel` has been asked to quiesce.\n\nThe action(s) that should be taken after receiving this event are both application and protocol dependent. If the\nprotocol supports a notion of requests and responses, it might make sense to stop accepting new requests but finish\nprocessing the request currently in flight."},{"p":["NIOMulticastNotSupportedError"],"f":[["struct",12],[" ",17],["NIOMulticastNotSupportedError",7]],"s":[["struct",12],[" ",17],["NIOMulticastNotSupportedError",7]],"d":"Multicast is not supported on this interface."},{"p":["AdaptiveRecvByteBufferAllocator"],"f":[["struct",12],[" ",17],["AdaptiveRecvByteBufferAllocator",7]],"s":[["struct",12],[" ",17],["AdaptiveRecvByteBufferAllocator",7]],"d":"`RecvByteBufferAllocator` which will gracefully increment or decrement the buffer size on the feedback that was recorded."},{"p":["NIOMulticastNotImplementedError"],"f":[["struct",12],[" ",17],["NIOMulticastNotImplementedError",7]],"s":[["struct",12],[" ",17],["NIOMulticastNotImplementedError",7]],"d":"Multicast has not been properly implemented on this channel."},{"p":["FixedSizeRecvByteBufferAllocator"],"f":[["struct",12],[" ",17],["FixedSizeRecvByteBufferAllocator",7]],"s":[["struct",12],[" ",17],["FixedSizeRecvByteBufferAllocator",7]],"d":"`RecvByteBufferAllocator` which will always return a `ByteBuffer` with the same fixed size no matter what was recorded."},{"p":["NIOAttemptedToRemoveHandlerMultipleTimesError"],"f":[["struct",12],[" ",17],["NIOAttemptedToRemoveHandlerMultipleTimesError",7]],"s":[["struct",12],[" ",17],["NIOAttemptedToRemoveHandlerMultipleTimesError",7]],"d":"The removal of a `ChannelHandler` using `ChannelPipeline.removeHandler` has been attempted more than once."},{"p":["NIOAny"],"f":[["struct",12],[" ",17],["NIOAny",7]],"s":[["struct",12],[" ",17],["NIOAny",7]],"d":"`NIOAny` is an opaque container for values of *any* type, similar to Swift's builtin `Any` type. Contrary to\n`Any` the overhead of `NIOAny` depends on the the type of the wrapped value. Certain types that are important\nfor the performance of a SwiftNIO application like `ByteBuffer`, `FileRegion` and `AddressEnvelope<ByteBuffer>` can be expected\nto be wrapped almost without overhead. All others will have similar performance as if they were passed as an `Any` as\n`NIOAny` just like `Any` will contain them within an existential container.\n\nThe most important use-cases for `NIOAny` are values travelling through the `ChannelPipeline` whose type can't\nbe calculated at compile time. For example:\n\n - the `channelRead` of any `ChannelInboundHandler`\n - the `write` method of a `ChannelOutboundHandler`\n\nThe abstraction that delivers a `NIOAny` to user code must provide a mechanism to unwrap a `NIOAny` as a\ncertain type known at run-time. Canonical example:\n\n    class SandwichHandler: ChannelInboundHandler {\n        typealias InboundIn = Bacon /* we expected to be delivered `Bacon` ... */\n        typealias InboundOut = Sandwich /* ... and we will make and deliver a `Sandwich` from that */\n\n        func channelRead(context: ChannelHandlerContext, data: NIOAny) {\n             /* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel\n                pipeline can't be computed. The pipeline can't be computed at compile time as it can change\n                dynamically at run-time. Yet, we assert that in any configuration the channel handler before\n                `SandwichHandler` does actually send us a stream of `Bacon`.\n             */\n             let bacon = self.unwrapInboundIn(data) /* `Bacon` or crash */\n             let sandwich = makeSandwich(bacon)\n             context.fireChannelRead(self.wrapInboundOut(sandwich)) /* as promised we deliver a wrapped `Sandwich` */\n        }\n    }"},{"p":["IOError"],"f":[["struct",12],[" ",17],["IOError",7]],"s":[["struct",12],[" ",17],["IOError",7]],"d":"An `Error` for an IO operation."},{"p":["Scheduled"],"f":[["struct",12],[" ",17],["Scheduled",7],["<",17],["T",0],[">",17]],"s":[["struct",12],[" ",17],["Scheduled",7]],"g":[["T",0,0]],"d":"Returned once a task was scheduled on the `EventLoop` for later execution.\n\nA `Scheduled` allows the user to either `cancel()` the execution of the scheduled task (if possible) or obtain a reference to the `EventLoopFuture` that\nwill be notified once the execution is complete."},{"p":["RepeatedTask"],"f":[["final",12],[" ",17],["class",12],[" ",17],["RepeatedTask",7]],"s":[["class",12],[" ",17],["RepeatedTask",7]],"d":"Returned once a task was scheduled to be repeatedly executed on the `EventLoop`.\n\nA `RepeatedTask` allows the user to `cancel()` the repeated scheduling of further tasks."},{"p":["NIOFileHandle"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOFileHandle",7]],"s":[["class",12],[" ",17],["NIOFileHandle",7]],"d":"A `NIOFileHandle` is a handle to an open file.\n\nWhen creating a `NIOFileHandle` it takes ownership of the underlying file descriptor. When a `NIOFileHandle` is no longer\nneeded you must `close` it or take back ownership of the file descriptor using `takeDescriptorOwnership`.\n\n- note: One underlying file descriptor should usually be managed by one `NIOFileHandle` only.\n\n- warning: Failing to manage the lifetime of a `NIOFileHandle` correctly will result in undefined behaviour.\n\n- warning: `NIOFileHandle` objects are not thread-safe and are mutable. They also cannot be fully thread-safe as they refer to a global underlying file descriptor."},{"p":["ChannelPipeline"],"f":[["final",12],[" ",17],["class",12],[" ",17],["ChannelPipeline",7]],"s":[["class",12],[" ",17],["ChannelPipeline",7]],"d":"A list of `ChannelHandler`s that handle or intercept inbound events and outbound operations of a\n`Channel`. `ChannelPipeline` implements an advanced form of the Intercepting Filter pattern\nto give a user full control over how an event is handled and how the `ChannelHandler`s in a pipeline\ninteract with each other.\n\n# Creation of a pipeline\n\nEach `Channel` has its own `ChannelPipeline` and it is created automatically when a new `Channel` is created.\n\n# How an event flows in a pipeline\n\nThe following diagram describes how I/O events are typically processed by `ChannelHandler`s in a `ChannelPipeline`.\nAn I/O event is handled by either a `ChannelInboundHandler` or a `ChannelOutboundHandler`\nand is forwarded to the next handler in the `ChannelPipeline` by calling the event propagation methods defined in\n`ChannelHandlerContext`, such as `ChannelHandlerContext.fireChannelRead` and\n`ChannelHandlerContext.write`.\n\n```\n                                                   I/O Request\n                                                   via `Channel` or\n                                                   `ChannelHandlerContext`\n                                                     |\n +---------------------------------------------------+---------------+\n |                           ChannelPipeline         |               |\n |                                TAIL              \\|/              |\n |    +---------------------+            +-----------+----------+    |\n |    | Inbound Handler  N  |            | Outbound Handler  1  |    |\n |    +----------+----------+            +-----------+----------+    |\n |              /|\\                                  |               |\n |               |                                  \\|/              |\n |    +----------+----------+            +-----------+----------+    |\n |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |\n |    +----------+----------+            +-----------+----------+    |\n |              /|\\                                  .               |\n |               .                                   .               |\n | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|\n |        [ method call]                       [method call]         |\n |               .                                   .               |\n |               .                                  \\|/              |\n |    +----------+----------+            +-----------+----------+    |\n |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |\n |    +----------+----------+            +-----------+----------+    |\n |              /|\\                                  |               |\n |               |                                  \\|/              |\n |    +----------+----------+            +-----------+----------+    |\n |    | Inbound Handler  1  |            | Outbound Handler  M  |    |\n |    +----------+----------+            +-----------+----------+    |\n |              /|\\             HEAD                 |               |\n +---------------+-----------------------------------+---------------+\n                 |                                  \\|/\n +---------------+-----------------------------------+---------------+\n |               |                                   |               |\n |       [ Socket.read ]                    [ Socket.write ]         |\n |                                                                   |\n |  SwiftNIO Internal I/O Threads (Transport Implementation)         |\n +-------------------------------------------------------------------+\n```\n\nAn inbound event is handled by the inbound handlers in the head-to-tail direction as shown on the left side of the\ndiagram. An inbound handler usually handles the inbound data generated by the I/O thread on the bottom of the\ndiagram. The inbound data is often read from a remote peer via the actual input operation such as\n`Socket.read`. If an inbound event goes beyond the tail inbound handler, it is discarded\nsilently, or logged if it needs your attention.\n\nAn outbound event is handled by the outbound handlers in the tail-to-head direction as shown on the right side of the\ndiagram. An outbound handler usually generates or transforms the outbound traffic such as write requests.\nIf an outbound event goes beyond the head outbound handler, it is handled by an I/O thread associated with the\n`Channel`. The I/O thread often performs the actual output operation such as `Socket.write`.\n\n\nFor example, let us assume that we created the following pipeline:\n\n```\nChannelPipeline p = ...\nlet future = p.add(name: \"1\", handler: InboundHandlerA()).flatMap {\n  p.add(name: \"2\", handler: InboundHandlerB())\n}.flatMap {\n  p.add(name: \"3\", handler: OutboundHandlerA())\n}.flatMap {\n  p.add(name: \"4\", handler: OutboundHandlerB())\n}.flatMap {\n  p.add(name: \"5\", handler: InboundOutboundHandlerX())\n}\n// Handle the future as well ....\n```\n\nIn the example above, a class whose name starts with `Inbound` is an inbound handler.\nA class whose name starts with `Outbound` is an outbound handler.\n\nIn the given example configuration, the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound.\nWhen an event goes outbound, the order is 5, 4, 3, 2, 1.  On top of this principle, `ChannelPipeline` skips\nthe evaluation of certain handlers to shorten the stack depth:\n\n- 3 and 4 don't implement `ChannelInboundHandler`, and therefore the actual evaluation order of an inbound event will be: 1, 2, and 5.\n- 1 and 2 don't implement `ChannelOutboundHandler`, and therefore the actual evaluation order of a outbound event will be: 5, 4, and 3.\n- If 5 implements both `ChannelInboundHandler` and `ChannelOutboundHandler`, the evaluation order of an inbound and a outbound event could be 125 and 543 respectively.\n\nNote:   Handlers may choose not to propagate messages down the pipeline immediately.  For example a handler may need to wait\nfor additional data before sending a protocol event to the next handler in the pipeline.  Due to this you can't assume that later handlers\nin the pipeline will receive the same number of events as were sent, or that events of different types will arrive in the same order.\nFor example - a user event could overtake a data event if a handler is aggregating data events before propagating but immediately\npropagating user events.\n\n# Forwarding an event to the next handler\n\nAs you might noticed in the diagram above, a handler has to invoke the event propagation methods in\n`ChannelHandlerContext` to forward an event to its next handler.\nThose methods include:\n\n- Inbound event propagation methods defined in `ChannelInboundInvoker`\n- Outbound event propagation methods defined in `ChannelOutboundInvoker`.\n\n# Building a pipeline\n\nA user is supposed to have one or more `ChannelHandler`s in a `ChannelPipeline` to receive I/O events (e.g. read) and\nto request I/O operations (e.g. write and close).  For example, a typical server will have the following handlers\nin each channel's pipeline, but your mileage may vary depending on the complexity and characteristics of the\nprotocol and business logic:\n\n- Protocol Decoder - translates binary data (e.g. `ByteBuffer`) into a struct / class\n- Protocol Encoder - translates a struct / class into binary data (e.g. `ByteBuffer`)\n- Business Logic Handler - performs the actual business logic (e.g. database access)\n\n# Thread safety\n\nA `ChannelHandler` can be added or removed at any time because a `ChannelPipeline` is thread safe."},{"p":["EventLoopFuture"],"f":[["final",12],[" ",17],["class",12],[" ",17],["EventLoopFuture",7],["<",17],["Value",0],[">",17]],"s":[["class",12],[" ",17],["EventLoopFuture",7]],"g":[["Value",0,0]],"d":"Holder for a result that will be provided later.\n\nFunctions that promise to do work asynchronously can return an `EventLoopFuture<Value>`.\nThe recipient of such an object can then observe it to be notified when the operation completes.\n\nThe provider of a `EventLoopFuture<Value>` can create and return a placeholder object\nbefore the actual result is available. For example:\n\n```\nfunc getNetworkData(args) -> EventLoopFuture<NetworkResponse> {\n    let promise = eventLoop.makePromise(of: NetworkResponse.self)\n    queue.async {\n        . . . do some work . . .\n        promise.succeed(response)\n        . . . if it fails, instead . . .\n        promise.fail(error)\n    }\n    return promise.futureResult\n}\n```\n\nNote that this function returns immediately; the promise object will be given a value\nlater on. This behaviour is common to Future/Promise implementations in many programming\nlanguages. If you are unfamiliar with this kind of object, the following resources may be\nhelpful:\n\n- [Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n- [Scala](http://docs.scala-lang.org/overviews/core/futures.html)\n- [Python](https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit)\n\nIf you receive a `EventLoopFuture<Value>` from another function, you have a number of options:\nThe most common operation is to use `flatMap()` or `map()` to add a function that will be called\nwith the eventual result.  Both methods returns a new `EventLoopFuture<Value>` immediately\nthat will receive the return value from your function, but they behave differently. If you have\na function that can return synchronously, the `map` function will transform the result of type\n`Value` to a the new result of type `NewValue` and return an `EventLoopFuture<NewValue>`.\n\n```\nlet networkData = getNetworkData(args)\n\n// When network data is received, convert it.\nlet processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in\n    ... parse network data ....\n    return processedResult\n}\n```\n\nIf however you need to do more asynchronous processing, you can call `flatMap()`. The return value of the\nfunction passed to `flatMap` must be a new `EventLoopFuture<NewValue>` object: the return value of `flatMap()` is\na new `EventLoopFuture<NewValue>` that will contain the eventual result of both the original operation and\nthe subsequent one.\n\n```\n// When converted network data is available, begin the database operation.\nlet databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in\n    return someDatabaseOperation(p)\n}\n```\n\nIn essence, future chains created via `flatMap()` provide a form of data-driven asynchronous programming\nthat allows you to dynamically declare data dependencies for your various operations.\n\n`EventLoopFuture` chains created via `flatMap()` are sufficient for most purposes. All of the registered\nfunctions will eventually run in order. If one of those functions throws an error, that error will\nbypass the remaining functions. You can use `flatMapError()` to handle and optionally recover from\nerrors in the middle of a chain.\n\nAt the end of an `EventLoopFuture` chain, you can use `whenSuccess()` or `whenFailure()` to add an\nobserver callback that will be invoked with the result or error at that point. (Note: If you ever\nfind yourself invoking `promise.succeed()` from inside a `whenSuccess()` callback, you probably should\nuse `flatMap()` or `cascade(to:)` instead.)\n\n`EventLoopFuture` objects are typically obtained by:\n* Using `.flatMap()` on an existing future to create a new future for the next step in a series of operations.\n* Initializing an `EventLoopFuture` that already has a value or an error\n\n### Threading and Futures\n\nOne of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will\nby default run multiple event loops at once, on different threads. As most network protocols do not require\nblocking operation, at least in their low level implementations, this provides enormous speedups on machines\nwith many cores such as most modern servers.\n\nHowever, it can present a challenge at higher levels of abstraction when coordination between those threads\nbecomes necessary. This is usually the case whenever the events on one connection (that is, one `Channel`) depend\non events on another one. As these `Channel`s may be scheduled on different event loops (and so different threads)\ncare needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that\navoids concurrent mutation of shared state from multiple loops at once.\n\nThe main primitives NIO provides for this use are the `EventLoopPromise` and `EventLoopFuture`. As their names\nsuggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your\nprograms. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code.\n\n####  Callbacks\n\nThe most important principle of the `EventLoopPromise` and `EventLoopFuture` is this: all callbacks registered on\nan `EventLoopFuture` will execute on the thread corresponding to the event loop that created the `Future`,\n*regardless* of what thread succeeds or fails the corresponding `EventLoopPromise`.\n\nThis means that if *your code* created the `EventLoopPromise`, you can be extremely confident of what thread the\ncallback will execute on: after all, you held the event loop in hand when you created the `EventLoopPromise`.\nHowever, if your code is handed an `EventLoopFuture` or `EventLoopPromise`, and you want to register callbacks\non those objects, you cannot be confident that those callbacks will execute on the same `EventLoop` that your\ncode does.\n\nThis presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary\n`EventLoopFuture`? The short answer is that when you are holding an `EventLoopFuture`, you can always obtain a\nnew `EventLoopFuture` whose callbacks will execute on your event loop. You do this by calling\n`EventLoopFuture.hop(to:)`. This function returns a new `EventLoopFuture` whose callbacks are guaranteed\nto fire on the provided event loop. As an added bonus, `hopTo` will check whether the provided `EventLoopFuture`\nwas already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case.\n\nThis means that for any `EventLoopFuture` that your code did not create itself (via\n`EventLoopPromise.futureResult`), use of `hopTo` is **strongly encouraged** to help guarantee thread-safety. It\nshould only be elided when thread-safety is provably not needed.\n\nThe \"thread affinity\" of `EventLoopFuture`s is critical to writing safe, performant concurrent code without\nboilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural\nsynchronization of the `EventLoop` to manage your thread-safety. In general, if any of your `ChannelHandler`s\nor `EventLoopFuture` callbacks need to invoke a lock (either directly or in the form of `DispatchQueue`) this\nshould be considered a code smell worth investigating: the `EventLoop`-based synchronization guarantees of\n`EventLoopFuture` should be sufficient to guarantee thread-safety."},{"p":["IdleStateHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["IdleStateHandler",7]],"s":[["class",12],[" ",17],["IdleStateHandler",7]],"d":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while."},{"p":["BackPressureHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["BackPressureHandler",7]],"s":[["class",12],[" ",17],["BackPressureHandler",7]],"d":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough.\nIt will start reading again once pending data was written."},{"p":["NIONetworkInterface"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIONetworkInterface",7]],"s":[["class",12],[" ",17],["NIONetworkInterface",7]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"A representation of a single network interface on a system."},{"p":["AcceptBackoffHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["AcceptBackoffHandler",7]],"s":[["class",12],[" ",17],["AcceptBackoffHandler",7]],"d":"A `ChannelHandler` that implements a backoff for a `ServerChannel` when accept produces an `IOError`.\nThese errors are often recoverable by reducing the rate at which we call accept."},{"p":["ByteToMessageHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["ByteToMessageHandler",7],["<",17],["Decoder",0],["> ",17],["where",12],[" ",17],["Decoder",18],[" : ",17],["ByteToMessageDecoder",18,13]],"s":[["class",12],[" ",17],["ByteToMessageHandler",7]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"d":"A handler which turns a given `ByteToMessageDecoder` into a `ChannelInboundHandler` that can then be added to a\n`ChannelPipeline`.\n\nMost importantly, `ByteToMessageHandler` handles the tricky buffer management for you and flattens out all\nre-entrancy on `channelRead` that may happen in the `ChannelPipeline`."},{"p":["MessageToByteHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["MessageToByteHandler",7],["<",17],["Encoder",0],["> ",17],["where",12],[" ",17],["Encoder",18],[" : ",17],["MessageToByteEncoder",18,14]],"s":[["class",12],[" ",17],["MessageToByteHandler",7]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"d":"A handler which turns a given `MessageToByteEncoder` into a `ChannelOutboundHandler` that can then be added to a\n`ChannelPipeline`."},{"p":["ChannelHandlerContext"],"f":[["final",12],[" ",17],["class",12],[" ",17],["ChannelHandlerContext",7]],"s":[["class",12],[" ",17],["ChannelHandlerContext",7]],"d":"Every `ChannelHandler` has -- when added to a `ChannelPipeline` -- a corresponding `ChannelHandlerContext` which is\nthe way `ChannelHandler`s can interact with other `ChannelHandler`s in the pipeline.\n\nMost `ChannelHandler`s need to send events through the `ChannelPipeline` which they do by calling the respective\nmethod on their `ChannelHandlerContext`. In fact all the `ChannelHandler` default implementations just forward\nthe event using the `ChannelHandlerContext`.\n\nMany events are instrumental for a `ChannelHandler`'s life-cycle and it is therefore very important to send them\nat the right point in time. Often, the right behaviour is to react to an event and then forward it to the next\n`ChannelHandler`."},{"p":["NIOCloseOnErrorHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOCloseOnErrorHandler",7]],"s":[["class",12],[" ",17],["NIOCloseOnErrorHandler",7]],"d":"A `ChannelInboundHandler` that closes the channel when an error is caught"},{"p":["NIOSingleStepByteToMessageProcessor"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOSingleStepByteToMessageProcessor",7],["<",17],["Decoder",0],["> ",17],["where",12],[" ",17],["Decoder",18],[" : ",17],["NIOSingleStepByteToMessageDecoder",18,26]],"s":[["class",12],[" ",17],["NIOSingleStepByteToMessageProcessor",7]],"c":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"g":[["Decoder",0,0]],"d":"`NIOSingleStepByteToMessageProcessor` uses a `NIOSingleStepByteToMessageDecoder` to produce messages\nfrom a stream of incoming bytes. It works like `ByteToMessageHandler` but may be used outside of the channel pipeline. This allows\nprocessing of wrapped protocols in a general way.\n\nA `NIOSingleStepByteToMessageProcessor` is first initialized with a `NIOSingleStepByteToMessageDecoder`. Then\ncall `process` as each `ByteBuffer` is received from the stream. The closure is called repeatedly with each message produced by\nthe decoder.\n\nWhen your stream ends, call `finishProcessing` to ensure all buffered data is passed to your decoder. This will call `decodeLast`\none or more times with any remaining data.\n\n### Example\n\nBelow is an example of a protocol decoded by `TwoByteStringCodec` that is sent over HTTP. `RawBodyMessageHandler` forwards the headers\nand trailers directly and uses `NIOSingleStepByteToMessageProcessor` to send whole decoded messages.\n\n    class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {\n        typealias InboundOut = String\n\n        public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {\n            return buffer.readString(length: 2)\n        }\n\n        public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {\n            return try self.decode(buffer: &buffer)\n        }\n    }\n\n    class RawBodyMessageHandler: ChannelInboundHandler {\n        typealias InboundIn = HTTPServerRequestPart // alias for HTTPPart<HTTPRequestHead, ByteBuffer>\n        // This converts the body from ByteBuffer to String, our message type\n        typealias InboundOut = HTTPPart<HTTPRequestHead, String>\n\n        private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil\n\n        func channelRead(context: ChannelHandlerContext, data: NIOAny) {\n            let req = self.unwrapInboundIn(data)\n            do {\n                switch req {\n                case .head(let head):\n                    // simply forward on the head\n                    context.fireChannelRead(self.wrapInboundOut(.head(head)))\n                case .body(let body):\n                    if self.messageProcessor == nil {\n                        self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())\n                    }\n                    try self.messageProcessor!.process(buffer: body) { message in\n                        self.channelReadMessage(context: context, message: message)\n                    }\n                case .end(let trailers):\n                    // Forward on any remaining messages and the trailers\n                    try self.messageProcessor?.finishProcessing(seenEOF: false) { message in\n                        self.channelReadMessage(context: context, message: message)\n                    }\n                    context.fireChannelRead(self.wrapInboundOut(.end(trailers)))\n                }\n            } catch {\n                context.fireErrorCaught(error)\n            }\n        }\n\n        // Forward on the body messages as whole messages\n        func channelReadMessage(context: ChannelHandlerContext, message: String) {\n            context.fireChannelRead(self.wrapInboundOut(.body(message)))\n        }\n    }\n\n    private class DecodedBodyHTTPHandler: ChannelInboundHandler {\n        typealias InboundIn = HTTPPart<HTTPRequestHead, String>\n        typealias OutboundOut = HTTPServerResponsePart\n\n        var msgs: [String] = []\n\n        func channelRead(context: ChannelHandlerContext, data: NIOAny) {\n            let message = self.unwrapInboundIn(data)\n\n            switch message {\n            case .head(let head):\n                print(\"head: \\(head)\")\n            case .body(let msg):\n                self.msgs.append(msg)\n            case .end(let trailers):\n                print(\"trailers: \\(trailers)\")\n                var responseBuffer = context.channel.allocator.buffer(capacity: 32)\n                for msg in msgs {\n                    responseBuffer.writeString(msg)\n                    responseBuffer.writeStaticString(\"\\n\")\n                }\n                var headers = HTTPHeaders()\n                headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))\n\n                context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(\n                    HTTPResponseHead(version: .http1_1,\n                                     status: .ok, headers: headers))), promise: nil)\n\n                context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(\n                    .byteBuffer(responseBuffer))), promise: nil)\n                context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)\n            }\n        }\n    }\n\n    let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)\n    let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in\n        channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in\n            channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])\n        }\n    })\n    let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)\n"},{"p":["Endianness","big"],"f":[["case",12],[" ",17],["big",7]],"s":[["case",12],[" ",17],["big",7]],"d":"big endian, the most significant byte (MSB) is at the lowest address"},{"p":["Endianness","little"],"f":[["case",12],[" ",17],["little",7]],"s":[["case",12],[" ",17],["little",7]],"d":"little endian, the least significant byte (LSB) is at the lowest address"},{"p":["ChannelError","ioOnClosedChannel"],"f":[["case",12],[" ",17],["ioOnClosedChannel",7]],"s":[["case",12],[" ",17],["ioOnClosedChannel",7]],"d":"An I/O operation (e.g. read/write/flush) called on a channel that is already closed."},{"p":["ChannelError","inputClosed"],"f":[["case",12],[" ",17],["inputClosed",7]],"s":[["case",12],[" ",17],["inputClosed",7]],"d":"Input-side of the channel is closed."},{"p":["ChannelError","outputClosed"],"f":[["case",12],[" ",17],["outputClosed",7]],"s":[["case",12],[" ",17],["outputClosed",7]],"d":"Output-side of the channel is closed."},{"p":["ChannelError","alreadyClosed"],"f":[["case",12],[" ",17],["alreadyClosed",7]],"s":[["case",12],[" ",17],["alreadyClosed",7]],"d":"Close was called on a channel that is already closed."},{"p":["ChannelError","connectPending"],"f":[["case",12],[" ",17],["connectPending",7]],"s":[["case",12],[" ",17],["connectPending",7]],"d":"Tried to connect on a `Channel` that is already connecting."},{"p":["ChannelError","connectTimeout(_:)"],"f":[["case",12],[" ",17],["connectTimeout",7],["(",17],["TimeAmount",18,64],[")",17]],"s":[["case",12],[" ",17],["connectTimeout",7],["(",17],["TimeAmount",18],[")",17]],"d":"Connect operation timed out"},{"p":["ChannelError","unremovableHandler"],"f":[["case",12],[" ",17],["unremovableHandler",7]],"s":[["case",12],[" ",17],["unremovableHandler",7]],"d":"An attempt was made to remove a ChannelHandler that is not removable."},{"p":["ChannelError","unknownLocalAddress"],"f":[["case",12],[" ",17],["unknownLocalAddress",7]],"s":[["case",12],[" ",17],["unknownLocalAddress",7]],"d":"The local address of the `Channel` could not be determined."},{"p":["ChannelError","operationUnsupported"],"f":[["case",12],[" ",17],["operationUnsupported",7]],"s":[["case",12],[" ",17],["operationUnsupported",7]],"d":"Unsupported operation triggered on a `Channel`. For example `connect` on a `ServerSocketChannel`."},{"p":["ChannelError","writeHostUnreachable"],"f":[["case",12],[" ",17],["writeHostUnreachable",7]],"s":[["case",12],[" ",17],["writeHostUnreachable",7]],"d":"A `DatagramChannel` `write` was made with an address that was not reachable and so could not be delivered."},{"p":["ChannelError","writeMessageTooLarge"],"f":[["case",12],[" ",17],["writeMessageTooLarge",7]],"s":[["case",12],[" ",17],["writeMessageTooLarge",7]],"d":"A `DatagramChannel` `write` was made with a buffer that is larger than the MTU for the connection, and so the\ndatagram was not written. Either shorten the datagram or manually fragment, and then try again."},{"p":["ChannelError","multicastNotSupported(_:)"],"f":[["case",12],[" ",17],["multicastNotSupported",7],["(",17],["NIONetworkInterface",18,128],[")",17]],"s":[["case",12],[" ",17],["multicastNotSupported",7],["(",17],["NIONetworkInterface",18],[")",17]],"a":{"a":{"d":true,"r":"NIOMulticastNotSupportedError"}},"d":"Multicast is not supported on Interface"},{"p":["ChannelError","illegalMulticastAddress(_:)"],"f":[["case",12],[" ",17],["illegalMulticastAddress",7],["(",17],["SocketAddress",18,44],[")",17]],"s":[["case",12],[" ",17],["illegalMulticastAddress",7],["(",17],["SocketAddress",18],[")",17]],"d":"An attempt was made to join a multicast group that does not correspond to a multicast\naddress."},{"p":["ChannelError","badInterfaceAddressFamily"],"f":[["case",12],[" ",17],["badInterfaceAddressFamily",7]],"s":[["case",12],[" ",17],["badInterfaceAddressFamily",7]],"d":"The address family of the provided multicast group join is not valid for this `Channel`."},{"p":["ChannelError","badMulticastGroupAddressFamily"],"f":[["case",12],[" ",17],["badMulticastGroupAddressFamily",7]],"s":[["case",12],[" ",17],["badMulticastGroupAddressFamily",7]],"d":"The address family of the multicast group was not valid for this `Channel`."},{"p":["ChannelError","inappropriateOperationForState"],"f":[["case",12],[" ",17],["inappropriateOperationForState",7]],"s":[["case",12],[" ",17],["inappropriateOperationForState",7]],"d":"An operation that was inappropriate given the current `Channel` state was attempted."},{"p":["ChannelError","eof"],"f":[["case",12],[" ",17],["eof",7]],"s":[["case",12],[" ",17],["eof",7]],"d":"A read operation reached end-of-file. This usually means the remote peer closed the socket but it's still\nopen locally."},{"p":["ChannelEvent","inputClosed"],"f":[["case",12],[" ",17],["inputClosed",7]],"s":[["case",12],[" ",17],["inputClosed",7]],"d":"`ChannelOptions.allowRemoteHalfClosure` is `true` and input portion of the `Channel` was closed."},{"p":["ChannelEvent","outputClosed"],"f":[["case",12],[" ",17],["outputClosed",7]],"s":[["case",12],[" ",17],["outputClosed",7]],"d":"Output portion of the `Channel` was closed."},{"p":["DecodingState","needMoreData"],"f":[["case",12],[" ",17],["needMoreData",7]],"s":[["case",12],[" ",17],["needMoreData",7]],"d":"Stop decoding until more data is ready to be processed."},{"p":["DecodingState","continue"],"f":[["case",12],[" ",17],["`continue`",7]],"s":[["case",12],[" ",17],["`continue`",7]],"d":"Continue decoding."},{"p":["SocketAddress","unixDomainSocket(_:)"],"f":[["case",12],[" ",17],["unixDomainSocket",7],["(",17],["SocketAddress",18,44],[".",17],["UnixSocketAddress",18,75],[")",17]],"s":[["case",12],[" ",17],["unixDomainSocket",7],["(",17],["SocketAddress",18],[".",17],["UnixSocketAddress",18],[")",17]],"d":"An UNIX Domain `SocketAddress`."},{"p":["SocketAddress","v4(_:)"],"f":[["case",12],[" ",17],["v4",7],["(",17],["SocketAddress",18,44],[".",17],["IPv4Address",18,73],[")",17]],"s":[["case",12],[" ",17],["v4",7],["(",17],["SocketAddress",18],[".",17],["IPv4Address",18],[")",17]],"d":"An IPv4 `SocketAddress`."},{"p":["SocketAddress","v6(_:)"],"f":[["case",12],[" ",17],["v6",7],["(",17],["SocketAddress",18,44],[".",17],["IPv6Address",18,74],[")",17]],"s":[["case",12],[" ",17],["v6",7],["(",17],["SocketAddress",18],[".",17],["IPv6Address",18],[")",17]],"d":"An IPv6 `SocketAddress`."},{"p":["ChannelOptions","Types","ConvenienceOptionValue","set(_:)"],"f":[["case",12],[" ",17],["set",7],["(",17],["ValueType",18],[")",17]],"s":[["case",12],[" ",17],["set",7],["(",17],["ValueType",18],[")",17]],"d":"The option was set with a value of type ValueType."},{"p":["ChannelOptions","Types","ConvenienceOptionValue","notSet"],"f":[["case",12],[" ",17],["notSet",7]],"s":[["case",12],[" ",17],["notSet",7]],"d":"The option was not set."},{"p":["EventLoopError","shutdownFailed"],"f":[["case",12],[" ",17],["shutdownFailed",7]],"s":[["case",12],[" ",17],["shutdownFailed",7]],"d":"Shutting down the `EventLoop` failed."},{"p":["EventLoopError","unsupportedOperation"],"f":[["case",12],[" ",17],["unsupportedOperation",7]],"s":[["case",12],[" ",17],["unsupportedOperation",7]],"d":"An operation was executed that is not supported by the `EventLoop`"},{"p":["EventLoopError","shutdown"],"f":[["case",12],[" ",17],["shutdown",7]],"s":[["case",12],[" ",17],["shutdown",7]],"d":"The `EventLoop` was shutdown already."},{"p":["EventLoopError","cancelled"],"f":[["case",12],[" ",17],["cancelled",7]],"s":[["case",12],[" ",17],["cancelled",7]],"d":"An scheduled task was cancelled."},{"p":["ChannelPipeline","Position","last"],"f":[["case",12],[" ",17],["last",7]],"s":[["case",12],[" ",17],["last",7]],"d":"The last `ChannelHandler` -- the back of the `ChannelPipeline`."},{"p":["ChannelPipeline","Position","after(_:)"],"f":[["case",12],[" ",17],["after",7],["(",17],["ChannelHandler",18,8],[")",17]],"s":[["case",12],[" ",17],["after",7],["(",17],["ChannelHandler",18],[")",17]],"d":"After the given `ChannelHandler`."},{"p":["ChannelPipeline","Position","first"],"f":[["case",12],[" ",17],["first",7]],"s":[["case",12],[" ",17],["first",7]],"d":"The first `ChannelHandler` -- the front of the `ChannelPipeline`."},{"p":["ChannelPipeline","Position","before(_:)"],"f":[["case",12],[" ",17],["before",7],["(",17],["ChannelHandler",18,8],[")",17]],"s":[["case",12],[" ",17],["before",7],["(",17],["ChannelHandler",18],[")",17]],"d":"Before the given `ChannelHandler`."},{"p":["IdleStateHandler","IdleStateEvent","all"],"f":[["case",12],[" ",17],["all",7]],"s":[["case",12],[" ",17],["all",7]],"d":"Will be triggered when neither read nor write was performed for the specified amount of time"},{"p":["IdleStateHandler","IdleStateEvent","read"],"f":[["case",12],[" ",17],["read",7]],"s":[["case",12],[" ",17],["read",7]],"d":"Will be triggered when no read was performed for the specified amount of time"},{"p":["IdleStateHandler","IdleStateEvent","write"],"f":[["case",12],[" ",17],["write",7]],"s":[["case",12],[" ",17],["write",7]],"d":"Will be triggered when no write was performed for the specified amount of time"},{"p":["SocketAddressError","unixDomainSocketPathTooLong"],"f":[["case",12],[" ",17],["unixDomainSocketPathTooLong",7]],"s":[["case",12],[" ",17],["unixDomainSocketPathTooLong",7]],"d":"The requested UDS path is too long."},{"p":["SocketAddressError","unsupported"],"f":[["case",12],[" ",17],["unsupported",7]],"s":[["case",12],[" ",17],["unsupported",7]],"d":"The requested `SocketAddress` is not supported."},{"p":["SocketAddressError","failedToParseIPString(_:)"],"f":[["case",12],[" ",17],["failedToParseIPString",7],["(",17],["String",18,1173],[")",17]],"s":[["case",12],[" ",17],["failedToParseIPString",7],["(",17],["String",18],[")",17]],"d":"Unable to parse a given IP string"},{"p":["SocketAddressError","unknown(host:port:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["host",1],[": ",17],["String",18,1173],[", ",17],["port",1],[": ",17],["Int",18,1235],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["host",1],[": ",17],["String",18],[", ",17],["port",1],[": ",17],["Int",18],[")",17]],"d":"The host is unknown (could not be resolved)."},{"p":["ChannelPipelineError","alreadyRemoved"],"f":[["case",12],[" ",17],["alreadyRemoved",7]],"s":[["case",12],[" ",17],["alreadyRemoved",7]],"d":"`ChannelHandler` was already removed."},{"p":["ChannelPipelineError","notFound"],"f":[["case",12],[" ",17],["notFound",7]],"s":[["case",12],[" ",17],["notFound",7]],"d":"`ChannelHandler` was not found."},{"p":["ByteToMessageDecoderError","dataReceivedInErrorState(_:_:)"],"f":[["case",12],[" ",17],["dataReceivedInErrorState",7],["(",17],["Error",18,1388],[", ",17],["ByteBuffer",18,60],[")",17]],"s":[["case",12],[" ",17],["dataReceivedInErrorState",7],["(",17],["Error",18],[", ",17],["ByteBuffer",18],[")",17]],"d":"More data has been received by a `ByteToMessageHandler` despite the fact that an error has previously been\nemitted. The associated `Error` is the error previously emitted and the `ByteBuffer` is the extra data that has\nbeen received. The common cause for this error to be emitted is the user not having torn down the `Channel`\nafter previously an `Error` has been sent through the pipeline using `fireErrorCaught`."},{"p":["ByteToMessageDecoderError","leftoverDataWhenDone(_:)"],"f":[["case",12],[" ",17],["leftoverDataWhenDone",7],["(",17],["ByteBuffer",18,60],[")",17]],"s":[["case",12],[" ",17],["leftoverDataWhenDone",7],["(",17],["ByteBuffer",18],[")",17]],"d":"This error can be thrown by `ByteToMessageDecoder`s if there was unexpectedly some left-over data when the\n`ByteToMessageDecoder` was removed from the pipeline or the `Channel` was closed."},{"p":["NIOEventLoopGroupProvider","shared(_:)"],"f":[["case",12],[" ",17],["shared",7],["(",17],["EventLoopGroup",18,10],[")",17]],"s":[["case",12],[" ",17],["shared",7],["(",17],["EventLoopGroup",18],[")",17]],"d":"Use an `EventLoopGroup` provided by the user.\nThe owner of this group is responsible for its lifecycle."},{"p":["NIOEventLoopGroupProvider","createNew"],"f":[["case",12],[" ",17],["createNew",7]],"s":[["case",12],[" ",17],["createNew",7]],"d":"Create a new `EventLoopGroup` when necessary.\nThe library which accepts this provider takes ownership of the created event loop group,\nand must ensure its proper shutdown when the library is being shut down."},{"p":["NIOExplicitCongestionNotificationState","transportNotCapable"],"f":[["case",12],[" ",17],["transportNotCapable",7]],"s":[["case",12],[" ",17],["transportNotCapable",7]],"d":"Non-ECN Capable Transport."},{"p":["NIOExplicitCongestionNotificationState","congestionExperienced"],"f":[["case",12],[" ",17],["congestionExperienced",7]],"s":[["case",12],[" ",17],["congestionExperienced",7]],"d":"Congestion Experienced."},{"p":["NIOExplicitCongestionNotificationState","transportCapableFlag0"],"f":[["case",12],[" ",17],["transportCapableFlag0",7]],"s":[["case",12],[" ",17],["transportCapableFlag0",7]],"d":"ECN Capable Transport (flag 0)."},{"p":["NIOExplicitCongestionNotificationState","transportCapableFlag1"],"f":[["case",12],[" ",17],["transportCapableFlag1",7]],"s":[["case",12],[" ",17],["transportCapableFlag1",7]],"d":"ECN Capable Transport (flag 1)."},{"p":["IOData","byteBuffer(_:)"],"f":[["case",12],[" ",17],["byteBuffer",7],["(",17],["ByteBuffer",18,60],[")",17]],"s":[["case",12],[" ",17],["byteBuffer",7],["(",17],["ByteBuffer",18],[")",17]],"d":"A `ByteBuffer`."},{"p":["IOData","fileRegion(_:)"],"f":[["case",12],[" ",17],["fileRegion",7],["(",17],["FileRegion",18,63],[")",17]],"s":[["case",12],[" ",17],["fileRegion",7],["(",17],["FileRegion",18],[")",17]],"d":"A `FileRegion`.\n\nSending a `FileRegion` through the `ChannelPipeline` using `write` can be useful because some `Channel`s can\nuse `sendfile` to send a `FileRegion` more efficiently."},{"p":["IOError","FailureDescription","reason(_:)"],"f":[["case",12],[" ",17],["reason",7],["(",17],["String",18,1173],[")",17]],"s":[["case",12],[" ",17],["reason",7],["(",17],["String",18],[")",17]],"a":{"a":{"d":true,"m":"NIO no longer uses FailureDescription."}}},{"p":["IOError","FailureDescription","function(_:)"],"f":[["case",12],[" ",17],["function",7],["(",17],["StaticString",18,1367],[")",17]],"s":[["case",12],[" ",17],["function",7],["(",17],["StaticString",18],[")",17]],"a":{"a":{"d":true,"m":"NIO no longer uses FailureDescription."}}},{"p":["CloseMode","all"],"f":[["case",12],[" ",17],["all",7]],"s":[["case",12],[" ",17],["all",7]],"d":"Close the whole `Channel (file descriptor)."},{"p":["CloseMode","input"],"f":[["case",12],[" ",17],["input",7]],"s":[["case",12],[" ",17],["input",7]],"d":"Close the input (reading) side of the `Channel` without closing the actual file descriptor.\nThis is an optional mode which means it may not be supported by all `Channel` implementations."},{"p":["CloseMode","output"],"f":[["case",12],[" ",17],["output",7]],"s":[["case",12],[" ",17],["output",7]],"d":"Close the output (writing) side of the `Channel` without closing the actual file descriptor.\nThis is an optional mode which means it may not be supported by all `Channel` implementations."},{"p":["ByteBuffer","init(dispatchData:)"],"f":[["init",10],["(",17],["dispatchData",1],[": ",17],["DispatchData",18,1118],[")",17]],"s":[["init",10],["(",17],["dispatchData",1],[": ",17],["DispatchData",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing the bytes contained in the given `DispatchData`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit the bytes of the `DispatchData` and potentially\nsome extra space using the default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(dispatchData:)`. Or if you want to write multiple items into\n        the buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeDispatchData` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(staticString:)"],"f":[["init",10],["(",17],["staticString",1],[" ",17],["string",2],[": ",17],["StaticString",18,1367],[")",17]],"s":[["init",10],["(",17],["staticString",1],[": ",17],["StaticString",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space using\nthe default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(staticString:)`. Or if you want to write multiple items into\n        the buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeStaticString` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(bytes:)"],"f":[["init",10],["<",17],["Bytes",0],[">(",17],["bytes",1],[": ",17],["Bytes",18],[") ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Sequence",18,1174],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,1392]],"s":[["init",10],["<",17],["Bytes",0],[">(",17],["bytes",1],[": ",17],["Bytes",18],[")",17]],"c":[["Bytes",1,"Sequence",1174],["Bytes.Element",2,"UInt8",1392]],"g":[["Bytes",0,0]],"d":"Create a fresh `ByteBuffer` containing the `bytes`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `bytes` and potentially some extra space using\nthe default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(bytes:)`. Or if you want to write multiple items into the\n        buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeBytes` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(buffer:)"],"f":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing the readable bytes of `buffer`.\n\nThis may allocate a new `ByteBuffer` with enough space to fit `buffer` and potentially some extra space using\nthe default allocator.\n\n- note: Use this method only if you deliberately want to reallocate a potentially smaller `ByteBuffer` than the\n        one you already have. Given that `ByteBuffer` is a value type, defensive copies are not necessary. If\n        you have a `ByteBuffer` but would like the `readerIndex` to start at `0`, consider `readSlice` instead.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(buffer:)`. Or if you want to write multiple items into the\n        buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeImmutableBuffer` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(string:)"],"f":[["init",10],["(",17],["string",1],[": ",17],["String",18,1173],[")",17]],"s":[["init",10],["(",17],["string",1],[": ",17],["String",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space using\nthe default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(string:)`. Or if you want to write multiple items into the\n        buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeString` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(integer:endianness:as:)"],"f":[["init",10],["<",17],["I",0],[">(",17],["integer",1],[": ",17],["I",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": ",17],["I",18],[".Type = I.self) ",17],["where",12],[" ",17],["I",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["init",10],["<",17],["I",0],[">(",17],["integer",1],[": ",17],["I",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["I",18],[".Type)",17]],"c":[["I",1,"FixedWidthInteger",1369]],"g":[["I",0,0]],"d":"Create a fresh `ByteBuffer` containing the bytes of the byte representation in the given `endianness` of\n`integer`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `integer` and potentially some extra space using\nthe default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(integer:)`. Or if you want to write multiple items into the\n        buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeInteger` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(repeating:count:)"],"f":[["init",10],["(",17],["repeating",1],[" ",17],["byte",2],[": ",17],["UInt8",18,1392],[", ",17],["count",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["repeating",1],[": ",17],["UInt8",18],[", ",17],["count",1],[": ",17],["Int",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing `count` repetitions of `byte`.\n\nThis will allocate a new `ByteBuffer` with at least `count` bytes.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(repeating:count:)`. Or if you want to write multiple items\n        into the buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeRepeatingByte` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(substring:)"],"f":[["init",10],["(",17],["substring",1],[" ",17],["string",2],[": ",17],["Substring",18,1348],[")",17]],"s":[["init",10],["(",17],["substring",1],[": ",17],["Substring",18],[")",17]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space using\nthe default allocator.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` we\n        recommend using `channel.allocator.buffer(substring:)`. Or if you want to write multiple items into\n        the buffer use `channel.allocator.buffer(capacity: ...)` to allocate a `ByteBuffer` of the right\n        size followed by a `writeSubstring` instead of using this method. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Return an empty `ByteBuffer` allocated with `ByteBufferAllocator()`.\n\nCalling this constructor will not allocate because it will return a `ByteBuffer` that wraps a shared storage\nobject. As soon as you write to the constructed buffer however, you will incur an allocation because a\ncopy-on-write will happen.\n\n- info: If you have access to a `Channel`, `ChannelHandlerContext`, or `ByteBufferAllocator` it is\n        recommended using `channel.allocator.buffer(capacity: 0)`. This allows SwiftNIO to do\n        accounting and optimisations of resources acquired for operations on a given `Channel` in the future."},{"p":["ByteBuffer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["view",2],[": ",17],["ByteBufferView",18,76],[")",17]],"s":[["init",10],["(",17],["ByteBufferView",18],[")",17]],"d":"Create a `ByteBuffer` from the given `ByteBufferView`s range.\n\n- parameter view: The `ByteBufferView` which you want to get a `ByteBuffer` from."},{"p":["FileRegion","init(fileHandle:readerIndex:endIndex:)"],"f":[["init",10],["(",17],["fileHandle",1],[": ",17],["NIOFileHandle",18,123],[", ",17],["readerIndex",1],[": ",17],["Int",18,1235],[", ",17],["endIndex",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["fileHandle",1],[": ",17],["NIOFileHandle",18],[", ",17],["readerIndex",1],[": ",17],["Int",18],[", ",17],["endIndex",1],[": ",17],["Int",18],[")",17]],"d":"Create a new `FileRegion` from an open `NIOFileHandle`.\n\n- parameters:\n    - fileHandle: the `NIOFileHandle` to use.\n    - readerIndex: the index (offset) on which the reading will start.\n    - endIndex: the index which represent the end of the readable portion."},{"p":["FileRegion","init(fileHandle:)"],"f":[["init",10],["(",17],["fileHandle",1],[": ",17],["NIOFileHandle",18,123],[") ",17],["throws",12]],"s":[["init",10],["(",17],["fileHandle",1],[": ",17],["NIOFileHandle",18],[") ",17],["throws",12]],"d":"Create a new `FileRegion` forming a complete file.\n\n- parameters:\n    - fileHandle: An open `NIOFileHandle` to the file."},{"p":["NIOBSDSocket","OptionLevel","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66],[".",17],["RawValue",18,1034],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18],[".",17],["RawValue",18],[")",17]],"o":1227},{"p":["NIOBSDSocket","AddressFamily","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["AddressFamily",18,67],[".",17],["RawValue",18,1035],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18],[".",17],["AddressFamily",18],[".",17],["RawValue",18],[")",17]],"o":1227},{"p":["NIOBSDSocket","ProtocolFamily","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68],[".",17],["RawValue",18,1036],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18],[".",17],["RawValue",18],[")",17]],"o":1227},{"p":["NIOBSDSocket","Option","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[".",17],["RawValue",18,1038],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18],[".",17],["RawValue",18],[")",17]],"o":1227},{"p":["NIOFileHandle","init(descriptor:)"],"f":[["init",10],["(",17],["descriptor",1],[": ",17],["CInt",18,1386],[")",17]],"s":[["init",10],["(",17],["descriptor",1],[": ",17],["CInt",18],[")",17]],"d":"Create a `NIOFileHandle` taking ownership of `descriptor`. You must call `NIOFileHandle.close` or `NIOFileHandle.takeDescriptorOwnership` before\nthis object can be safely released."},{"p":["NIOFileHandle","Mode","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt8",18,1392],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt8",18],[")",17]],"o":1400},{"p":["NIOFileHandle","init(path:mode:flags:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["path",1],[": ",17],["String",18,1173],[", ",17],["mode",1],[": ",17],["NIOFileHandle",18,123],[".",17],["Mode",18,70],[" = .read, ",17],["flags",1],[": ",17],["NIOFileHandle",18,123],[".",17],["Flags",18,71],[" = .default) ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["path",1],[": ",17],["String",18],[", ",17],["mode",1],[": ",17],["NIOFileHandle",18],[".",17],["Mode",18],[", ",17],["flags",1],[": ",17],["NIOFileHandle",18],[".",17],["Flags",18],[") ",17],["throws",12]],"d":"Open a new `NIOFileHandle`. This operation is blocking.\n\n- parameters:\n    - path: The path of the file to open. The ownership of the file descriptor is transferred to this `NIOFileHandle` and so it will be closed once `close` is called.\n    - mode: Access mode. Default mode is `.read`.\n    - flags: Additional POSIX flags."},{"p":["NIOFileHandle","init(path:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["path",1],[": ",17],["String",18,1173],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["path",1],[": ",17],["String",18],[") ",17],["throws",12]],"d":"Open a new `NIOFileHandle`. This operation is blocking.\n\n- parameters:\n    - path: The path of the file to open. The ownership of the file descriptor is transferred to this `NIOFileHandle` and so it will be closed once `close` is called."},{"p":["NIOPacketInfo","init(destinationAddress:interfaceIndex:)"],"f":[["init",10],["(",17],["destinationAddress",1],[": ",17],["SocketAddress",18,44],[", ",17],["interfaceIndex",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["destinationAddress",1],[": ",17],["SocketAddress",18],[", ",17],["interfaceIndex",1],[": ",17],["Int",18],[")",17]]},{"p":["SocketAddress","init(unixDomainSocketPath:)"],"f":[["init",10],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18,1173],[") ",17],["throws",12]],"s":[["init",10],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18],[") ",17],["throws",12]],"d":"Creates a new UDS `SocketAddress`.\n\n- parameters:\n    - path: the path to use for the `SocketAddress`.\n- returns: the `SocketAddress` for the given path.\n- throws: may throw `SocketAddressError.unixDomainSocketPathTooLong` if the path is too long."},{"p":["SocketAddress","init(ipAddress:port:)"],"f":[["init",10],["(",17],["ipAddress",1],[": ",17],["String",18,1173],[", ",17],["port",1],[": ",17],["Int",18,1235],[") ",17],["throws",12]],"s":[["init",10],["(",17],["ipAddress",1],[": ",17],["String",18],[", ",17],["port",1],[": ",17],["Int",18],[") ",17],["throws",12]],"d":"Create a new `SocketAddress` for an IP address in string form.\n\n- parameters:\n    - string: The IP address, in string form.\n    - port: The target port.\n- returns: the `SocketAddress` corresponding to this string and port combination.\n- throws: may throw `SocketAddressError.failedToParseIPString` if the IP address cannot be parsed."},{"p":["SocketAddress","init(packedIPAddress:port:)"],"f":[["init",10],["(",17],["packedIPAddress",1],[": ",17],["ByteBuffer",18,60],[", ",17],["port",1],[": ",17],["Int",18,1235],[") ",17],["throws",12]],"s":[["init",10],["(",17],["packedIPAddress",1],[": ",17],["ByteBuffer",18],[", ",17],["port",1],[": ",17],["Int",18],[") ",17],["throws",12]],"d":"Create a new `SocketAddress` for an IP address in ByteBuffer form.\n\n- parameters:\n    - packedIPAddress: The IP address, in ByteBuffer form.\n    - port: The target port.\n- returns: the `SocketAddress` corresponding to this string and port combination.\n- throws: may throw `SocketAddressError.failedToParseIPByteBuffer` if the IP address cannot be parsed."},{"p":["SocketAddress","init(_:host:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["addr",2],[": ",17],["sockaddr_in",18,1103],[", ",17],["host",1],[": ",17],["String",18,1173],[")",17]],"s":[["init",10],["(",17],["sockaddr_in",18],[", ",17],["host",1],[": ",17],["String",18],[")",17]],"d":"Creates a new IPv4 `SocketAddress`.\n\n- parameters:\n    - addr: the `sockaddr_in` that holds the ipaddress and port.\n    - host: the hostname that resolved to the ipaddress."},{"p":["SocketAddress","init(_:host:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["addr",2],[": ",17],["sockaddr_in6",18,1104],[", ",17],["host",1],[": ",17],["String",18,1173],[")",17]],"s":[["init",10],["(",17],["sockaddr_in6",18],[", ",17],["host",1],[": ",17],["String",18],[")",17]],"d":"Creates a new IPv6 `SocketAddress`.\n\n- parameters:\n    - addr: the `sockaddr_in` that holds the ipaddress and port.\n    - host: the hostname that resolved to the ipaddress."},{"p":["SocketAddress","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["addr",2],[": ",17],["sockaddr_in",18,1103],[")",17]],"s":[["init",10],["(",17],["sockaddr_in",18],[")",17]],"d":"Creates a new IPv4 `SocketAddress`.\n\n- parameters:\n    - addr: the `sockaddr_in` that holds the ipaddress and port."},{"p":["SocketAddress","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["addr",2],[": ",17],["sockaddr_un",18,1105],[")",17]],"s":[["init",10],["(",17],["sockaddr_un",18],[")",17]],"d":"Creates a new Unix Domain Socket `SocketAddress`.\n\n- parameters:\n    - addr: the `sockaddr_un` that holds the socket path."},{"p":["SocketAddress","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["addr",2],[": ",17],["sockaddr_in6",18,1104],[")",17]],"s":[["init",10],["(",17],["sockaddr_in6",18],[")",17]],"d":"Creates a new IPv6 `SocketAddress`.\n\n- parameters:\n    - addr: the `sockaddr_in` that holds the ipaddress and port."},{"p":["ByteBufferView","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ByteBufferView",18,76],[".",17],["Element",18,1044],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ByteBufferView",18],[".",17],["Element",18],["...)",17]],"d":"required by `ExpressibleByArrayLiteral`","o":1383},{"p":["ByteBufferView","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"o":1345},{"p":["ByteBufferView","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["ByteBuffer",18],[")",17]],"d":"Creates a `ByteBufferView` from the readable bytes of the given `buffer`."},{"p":["ChannelOptions","TCPConvenienceOptions","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ChannelOptions",18,77],[".",17],["TCPConvenienceOption",18,79],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ChannelOptions",18],[".",17],["TCPConvenienceOption",18],["...)",17]],"d":"Construct from an array literal.","o":1383},{"p":["ChannelOptions","Types","SocketOption","init(level:name:)"],"f":[["init",10],["(",17],["level",1],[": ",17],["SocketOptionLevel",18,1071],[", ",17],["name",1],[": ",17],["SocketOptionName",18,1069],[")",17]],"s":[["init",10],["(",17],["level",1],[": ",17],["SocketOptionLevel",18],[", ",17],["name",1],[": ",17],["SocketOptionName",18],[")",17]],"d":"Create a new `SocketOption`.\n\n- parameters:\n    - level: The level for the option as defined in `man setsockopt`, e.g. SO_SOCKET.\n    - name: The name of the option as defined in `man setsockopt`, e.g. `SO_REUSEADDR`."},{"p":["ChannelOptions","Types","SocketOption","init(level:name:)"],"f":[["init",10],["(",17],["level",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[")",17]],"s":[["init",10],["(",17],["level",1],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18],[")",17]],"d":"Create a new `SocketOption`.\n\n- parameters:\n    - level: The level for the option as defined in `man setsockopt`, e.g. SO_SOCKET.\n    - name: The name of the option as defined in `man setsockopt`, e.g. `SO_REUSEADDR`."},{"p":["ChannelOptions","Types","BacklogOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","AutoReadOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","AllocatorOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","WriteSpinOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","ReceivePacketInfo","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","RecvAllocatorOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","ConnectTimeoutOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","WriteBufferWaterMark","init(low:high:)"],"f":[["init",10],["(",17],["low",1],[": ",17],["Int",18,1235],[", ",17],["high",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["low",1],[": ",17],["Int",18],[", ",17],["high",1],[": ",17],["Int",18],[")",17]],"d":"Create a new instance.\n\nValid initialization is restricted to `1 <= low <= high`.\n\n- parameters:\n     - low: The low watermark.\n     - high: The high watermark."},{"p":["ChannelOptions","Types","MaxMessagesPerReadOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","WriteBufferWaterMarkOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","AllowRemoteHalfClosureOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","DatagramVectorReadMessageCountOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Types","ExplicitCongestionNotificationsOption","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelOptions","Storage","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["CircularBuffer","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["Element",18],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["Element",18],["...)",17]],"g":[["Element",0,0]],"o":1383},{"p":["CircularBuffer","init(initialCapacity:)"],"f":[["init",10],["(",17],["initialCapacity",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["initialCapacity",1],[": ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Allocates a buffer that can hold up to `initialCapacity` elements and initialise an empty ring backed by\nthe buffer. When the ring grows to more than `initialCapacity` elements the buffer will be expanded."},{"p":["CircularBuffer","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["Element",0,0]],"d":"Allocates an empty buffer.","o":1345},{"p":["ChannelPipeline","init(channel:)"],"f":[["init",10],["(",17],["channel",1],[": ",17],["Channel",18,28],[")",17]],"s":[["init",10],["(",17],["channel",1],[": ",17],["Channel",18],[")",17]],"d":"Create `ChannelPipeline` for a given `Channel`. This method should never be called by the end-user\ndirectly: it is only intended for use with custom `Channel` implementations. Users should always use\n`channel.pipeline` to access the `ChannelPipeline` for a `Channel`.\n\n- parameters:\n   - channel: The `Channel` this `ChannelPipeline` is created for."},{"p":["IdleStateHandler","init(readTimeout:writeTimeout:allTimeout:)"],"f":[["init",10],["(",17],["readTimeout",1],[": ",17],["TimeAmount",18,64],["? = nil, ",17],["writeTimeout",1],[": ",17],["TimeAmount",18,64],["? = nil, ",17],["allTimeout",1],[": ",17],["TimeAmount",18,64],["? = nil)",17]],"s":[["init",10],["(",17],["readTimeout",1],[": ",17],["TimeAmount",18],["?, ",17],["writeTimeout",1],[": ",17],["TimeAmount",18],["?, ",17],["allTimeout",1],[": ",17],["TimeAmount",18],["?)",17]]},{"p":["NIOInsecureNoTLS","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",25]],"g":[["Bootstrap",0,0]]},{"p":["NIONetworkDevice","init(name:address:netmask:broadcastAddress:pointToPointDestinationAddress:multicastSupported:interfaceIndex:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,1173],[", ",17],["address",1],[": ",17],["SocketAddress",18,44],["?, ",17],["netmask",1],[": ",17],["SocketAddress",18,44],["?, ",17],["broadcastAddress",1],[": ",17],["SocketAddress",18,44],["?, ",17],["pointToPointDestinationAddress",1],[": ",17],["SocketAddress",18,44],[", ",17],["multicastSupported",1],[": ",17],["Bool",18,1232],[", ",17],["interfaceIndex",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["address",1],[": ",17],["SocketAddress",18],["?, ",17],["netmask",1],[": ",17],["SocketAddress",18],["?, ",17],["broadcastAddress",1],[": ",17],["SocketAddress",18],["?, ",17],["pointToPointDestinationAddress",1],[": ",17],["SocketAddress",18],[", ",17],["multicastSupported",1],[": ",17],["Bool",18],[", ",17],["interfaceIndex",1],[": ",17],["Int",18],[")",17]]},{"p":["NIONetworkDevice","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["interface",2],[": ",17],["NIONetworkInterface",18,128],[")",17]],"s":[["init",10],["(",17],["NIONetworkInterface",18],[")",17]],"a":{"a":{"d":true,"m":"This is a compatibility helper, and will be removed in a future release"}},"d":"Convert a `NIONetworkInterface` to a `NIONetworkDevice`. As `NIONetworkDevice`s are a superset of `NIONetworkInterface`s,\nit is always possible to perform this conversion."},{"p":["AddressedEnvelope","init(remoteAddress:data:metadata:)"],"f":[["init",10],["(",17],["remoteAddress",1],[": ",17],["SocketAddress",18,44],[", ",17],["data",1],[": ",17],["DataType",18],[", ",17],["metadata",1],[": ",17],["AddressedEnvelope",18,101],["<",17],["DataType",18],[">.",17],["Metadata",18,102],["?)",17]],"s":[["init",10],["(",17],["remoteAddress",1],[": ",17],["SocketAddress",18],[", ",17],["data",1],[": ",17],["DataType",18],[", ",17],["metadata",1],[": ",17],["AddressedEnvelope",18],["<",17],["DataType",18],[">.",17],["Metadata",18],["?)",17]],"g":[["DataType",0,0]]},{"p":["AddressedEnvelope","init(remoteAddress:data:)"],"f":[["init",10],["(",17],["remoteAddress",1],[": ",17],["SocketAddress",18,44],[", ",17],["data",1],[": ",17],["DataType",18],[")",17]],"s":[["init",10],["(",17],["remoteAddress",1],[": ",17],["SocketAddress",18],[", ",17],["data",1],[": ",17],["DataType",18],[")",17]],"g":[["DataType",0,0]]},{"p":["AddressedEnvelope","Metadata","init(ecnState:packetInfo:)"],"f":[["init",10],["(",17],["ecnState",1],[": ",17],["NIOExplicitCongestionNotificationState",18,55],[", ",17],["packetInfo",1],[": ",17],["NIOPacketInfo",18,72],["?)",17]],"s":[["init",10],["(",17],["ecnState",1],[": ",17],["NIOExplicitCongestionNotificationState",18],[", ",17],["packetInfo",1],[": ",17],["NIOPacketInfo",18],["?)",17]],"g":[["DataType",0,0]]},{"p":["AddressedEnvelope","Metadata","init(ecnState:)"],"f":[["init",10],["(",17],["ecnState",1],[": ",17],["NIOExplicitCongestionNotificationState",18,55],[")",17]],"s":[["init",10],["(",17],["ecnState",1],[": ",17],["NIOExplicitCongestionNotificationState",18],[")",17]],"g":[["DataType",0,0]]},{"p":["EventLoopIterator","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["eventLoops",2],[": [",17],["EventLoop",18,29],["])",17]],"s":[["init",10],["([",17],["EventLoop",18],["])",17]],"d":"Create an `EventLoopIterator` from an array of `EventLoop`s."},{"p":["SocketAddressError","FailedToParseIPByteBuffer","init(address:)"],"f":[["init",10],["(",17],["address",1],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["address",1],[": ",17],["ByteBuffer",18],[")",17]]},{"p":["BackPressureHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ByteBufferAllocator","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Create a fresh `ByteBufferAllocator`. In the future the allocator might use for example allocation pools and\ntherefore it's recommended to reuse `ByteBufferAllocators` where possible instead of creating fresh ones in\nmany places."},{"p":["AcceptBackoffHandler","init(backoffProvider:)"],"f":[["init",10],["(",17],["backoffProvider",1],[": ",17],["@escaping",12],[" (",17],["IOError",18,120],[") -> ",17],["TimeAmount",18,64],["? = AcceptBackoffHandler.defaultBackoffProvider)",17]],"s":[["init",10],["(",17],["backoffProvider",1],[": (",17],["IOError",18],[") -> ",17],["TimeAmount",18],["?)",17]],"d":"Create a new instance\n\n- parameters:\n    - backoffProvider: returns a `TimeAmount` which will be the amount of time to wait before attempting another `read`."},{"p":["ByteToMessageHandler","init(_:maximumBufferSize:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["decoder",2],[": ",17],["Decoder",18],[", ",17],["maximumBufferSize",1],[": ",17],["Int",18,1235],["? = nil)",17]],"s":[["init",10],["(",17],["Decoder",18],[", ",17],["maximumBufferSize",1],[": ",17],["Int",18],["?)",17]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"d":"Initialize a `ByteToMessageHandler`.\n\n- parameters:\n    - decoder: The `ByteToMessageDecoder` to decode the bytes into message.\n    - maximumBufferSize: The maximum number of bytes to aggregate in-memory."},{"p":["ByteToMessageHandler","init(_:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["_",1],[" ",17],["decoder",2],[": ",17],["Decoder",18],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["Decoder",18],[")",17]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"d":"@see: ByteToMessageHandler.init(_:maximumBufferSize)"},{"p":["DatagramChannelError","WriteOnUnconnectedSocketWithoutAddress","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["DatagramChannelError","WriteOnConnectedSocketWithInvalidAddress","init(envelopeRemoteAddress:connectedRemoteAddress:)"],"f":[["init",10],["(",17],["envelopeRemoteAddress",1],[": ",17],["SocketAddress",18,44],[", ",17],["connectedRemoteAddress",1],[": ",17],["SocketAddress",18,44],[")",17]],"s":[["init",10],["(",17],["envelopeRemoteAddress",1],[": ",17],["SocketAddress",18],[", ",17],["connectedRemoteAddress",1],[": ",17],["SocketAddress",18],[")",17]]},{"p":["MarkedCircularBuffer","init(initialCapacity:)"],"f":[["init",10],["(",17],["initialCapacity",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["initialCapacity",1],[": ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Create a new instance.\n\n- parameters:\n    - initialCapacity: The initial capacity of the internal storage."},{"p":["MessageToByteHandler","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["encoder",2],[": ",17],["Encoder",18],[")",17]],"s":[["init",10],["(",17],["Encoder",18],[")",17]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]]},{"p":["NIOTooManyBytesError","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["NIOClientTCPBootstrap","init(_:tls:)"],"f":[["init",10],["<",17],["Bootstrap",0],[", ",17],["TLS",0],[">(",17],["_",1],[" ",17],["bootstrap",2],[": ",17],["Bootstrap",18],[", ",17],["tls",1],[": ",17],["TLS",18],[") ",17],["where",12],[" ",17],["Bootstrap",18],[" : ",17],["NIOClientTCPBootstrapProtocol",18,25],[", ",17],["Bootstrap",18],[" == ",17],["TLS",18],[".",17],["Bootstrap",18],[", ",17],["TLS",18],[" : ",17],["NIOClientTLSProvider",18,15]],"s":[["init",10],["<",17],["Bootstrap",0],[", ",17],["TLS",0],[">(",17],["Bootstrap",18],[", ",17],["tls",1],[": ",17],["TLS",18],[")",17]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",25],["Bootstrap",2,"TLS.Bootstrap"],["TLS",1,"NIOClientTLSProvider",15]],"g":[["Bootstrap",0,0],["TLS",1,0]],"d":"Initialize a `NIOClientTCPBootstrap` using the underlying `Bootstrap` alongside a compatible `TLS`\nimplementation.\n\n- note: If you do not require `TLS`, you can use `NIOInsecureNoTLS` which supports only plain-text\n        connections. We highly recommend to always use TLS.\n\n- parameters:\n    - bootstrap: The underlying bootstrap to use.\n    - tls: The TLS implementation to use, needs to be compatible with `Bootstrap`."},{"p":["NIOCloseOnErrorHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Initialize a `NIOCloseOnErrorHandler`"},{"p":["ByteToMessageDecoderError","PayloadTooLargeError","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["ChannelShouldQuiesceEvent","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["NIOMulticastNotSupportedError","init(device:)"],"f":[["init",10],["(",17],["device",1],[": ",17],["NIONetworkDevice",18,100],[")",17]],"s":[["init",10],["(",17],["device",1],[": ",17],["NIONetworkDevice",18],[")",17]]},{"p":["AdaptiveRecvByteBufferAllocator","init(minimum:initial:maximum:)"],"f":[["init",10],["(",17],["minimum",1],[": ",17],["Int",18,1235],[", ",17],["initial",1],[": ",17],["Int",18,1235],[", ",17],["maximum",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["minimum",1],[": ",17],["Int",18],[", ",17],["initial",1],[": ",17],["Int",18],[", ",17],["maximum",1],[": ",17],["Int",18],[")",17]]},{"p":["AdaptiveRecvByteBufferAllocator","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["NIOMulticastNotImplementedError","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["FixedSizeRecvByteBufferAllocator","init(capacity:)"],"f":[["init",10],["(",17],["capacity",1],[": ",17],["Int",18,1235],[")",17]],"s":[["init",10],["(",17],["capacity",1],[": ",17],["Int",18],[")",17]]},{"p":["NIOSingleStepByteToMessageProcessor","init(_:maximumBufferSize:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["decoder",2],[": ",17],["Decoder",18],[", ",17],["maximumBufferSize",1],[": ",17],["Int",18,1235],["? = nil)",17]],"s":[["init",10],["(",17],["Decoder",18],[", ",17],["maximumBufferSize",1],[": ",17],["Int",18],["?)",17]],"c":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"g":[["Decoder",0,0]],"d":"Initialize a `NIOSingleStepByteToMessageProcessor`.\n\n- parameters:\n    - decoder: The `NIOSingleStepByteToMessageDecoder` to decode the bytes into message.\n    - maximumBufferSize: The maximum number of bytes to aggregate in-memory."},{"p":["NIOAny","init(_:)"],"f":[["init",10],["<",17],["T",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["T",18],[")",17]],"s":[["init",10],["<",17],["T",0],[">(",17],["T",18],[")",17]],"g":[["T",0,0]],"d":"Wrap a value in a `NIOAny`. In most cases you should not create a `NIOAny` directly using this constructor.\nThe abstraction that accepts values of type `NIOAny` must also provide a mechanism to do the wrapping. An\nexample is a `ChannelInboundHandler` which provides `self.wrapInboundOut(aValueOfTypeInboundOut)`."},{"p":["IOError","init(errnoCode:reason:)"],"f":[["init",10],["(",17],["errnoCode",1],[" ",17],["code",2],[": ",17],["CInt",18,1386],[", ",17],["reason",1],[": ",17],["String",18,1173],[")",17]],"s":[["init",10],["(",17],["errnoCode",1],[": ",17],["CInt",18],[", ",17],["reason",1],[": ",17],["String",18],[")",17]],"d":"Creates a new `IOError``\n\n- parameters:\n    - errorCode: the `errno` that was set for the operation.\n    - reason: the actual reason (in an human-readable form)."},{"p":["IOError","init(errnoCode:function:)"],"f":[["init",10],["(",17],["errnoCode",1],[" ",17],["code",2],[": ",17],["CInt",18,1386],[", ",17],["function",1],[": ",17],["StaticString",18,1367],[")",17]],"s":[["init",10],["(",17],["errnoCode",1],[": ",17],["CInt",18],[", ",17],["function",1],[": ",17],["StaticString",18],[")",17]],"a":{"a":{"d":true,"r":"init(errnoCode:reason:)"}},"d":"Creates a new `IOError``\n\n- parameters:\n    - errorCode: the `errno` that was set for the operation.\n    - function: The function the error happened in, the human readable description will be generated automatically when needed."},{"p":["Scheduled","init(promise:cancellationTask:)"],"f":[["@preconcurrency",3],[" ",17],["init",10],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["T",18],[">, ",17],["cancellationTask",1],[": ",17],["@escaping",12],[" () -> ",17],["Void",18,1387],[")",17]],"s":[["init",10],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["T",18],[">, ",17],["cancellationTask",1],[": () -> ",17],["Void",18],[")",17]],"g":[["T",0,0]]},{"p":["ByteBufferView","subscript(_:)"],"f":[["subscript",10],["(",17],["range",2],[": ",17],["Range",18,1346],["<",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[">) -> ",17],["ByteBufferView",18,76],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["Range",18],["<",17],["ByteBufferView",18],[".",17],["Index",18],[">) -> ",17],["ByteBufferView",18]],"o":1240},{"p":["ByteBufferView","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[") -> ",17],["UInt8",18,1392],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["ByteBufferView",18],[".",17],["Index",18],[") -> ",17],["UInt8",18]],"o":1299},{"p":["CircularBuffer","subscript(offset:)"],"f":[["subscript",10],["(",17],["offset",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[") -> ",17],["Element",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["offset",1],[" _: ",17],["Int",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Return element `offset` from first element.\n\n*O(1)*"},{"p":["CircularBuffer","subscript(_:)"],"f":[["subscript",10],["(",17],["bounds",2],[": ",17],["Range",18,1346],["<",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[">) -> ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["SubSequence",18,1058],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["Range",18],["<",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[">) -> ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["SubSequence",18]],"g":[["Element",0,0]],"o":1298},{"p":["CircularBuffer","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["Element",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Accesses the element at the specified index.\n\nYou can subscript `CircularBuffer` with any valid index other than the\n`CircularBuffer`'s end index. The end index refers to the position one\npast the last element of a collection, so it doesn't correspond with an\nelement.\n\n- Parameter position: The position of the element to access. `position`\n  must be a valid index of the collection that is not equal to the\n  `endIndex` property.\n\n- Complexity: O(1)","o":1299},{"p":["MarkedCircularBuffer","subscript(_:)"],"f":[["subscript",10],["(",17],["bounds",2],[": ",17],["Range",18,1346],["<",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[">) -> ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["SubSequence",18,1085],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["Range",18],["<",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[">) -> ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["SubSequence",18]],"g":[["Element",0,0]],"o":1298},{"p":["MarkedCircularBuffer","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[") -> ",17],["Element",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Retrieves the element at the given index from the buffer, without removing it.","o":1299},{"p":["ByteBuffer","CopyBytesError","unreadableSourceBytes"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unreadableSourceBytes",7],[": ",17],["ByteBuffer",18,60],[".",17],["CopyBytesError",18,61]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unreadableSourceBytes",7],[": ",17],["ByteBuffer",18],[".",17],["CopyBytesError",18]],"d":"The bytes to copy are not readable."},{"p":["ByteBuffer","CopyBytesError","negativeLength"],"f":[["static",12],[" ",17],["let",12],[" ",17],["negativeLength",7],[": ",17],["ByteBuffer",18,60],[".",17],["CopyBytesError",18,61]],"s":[["static",12],[" ",17],["let",12],[" ",17],["negativeLength",7],[": ",17],["ByteBuffer",18],[".",17],["CopyBytesError",18]],"d":"The length of the bytes to copy was negative."},{"p":["ByteBuffer","LengthPrefixError","messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat"],"f":[["static",12],[" ",17],["let",12],[" ",17],["messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat",7],[": ",17],["ByteBuffer",18,60],[".",17],["LengthPrefixError",18,62]],"s":[["static",12],[" ",17],["let",12],[" ",17],["messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat",7],[": ",17],["ByteBuffer",18],[".",17],["LengthPrefixError",18]]},{"p":["ByteBuffer","LengthPrefixError","messageCouldNotBeReadSuccessfully"],"f":[["static",12],[" ",17],["let",12],[" ",17],["messageCouldNotBeReadSuccessfully",7],[": ",17],["ByteBuffer",18,60],[".",17],["LengthPrefixError",18,62]],"s":[["static",12],[" ",17],["let",12],[" ",17],["messageCouldNotBeReadSuccessfully",7],[": ",17],["ByteBuffer",18],[".",17],["LengthPrefixError",18]]},{"p":["Endianness","host"],"f":[["static",12],[" ",17],["let",12],[" ",17],["host",7],[": ",17],["Endianness",18,39]],"s":[["static",12],[" ",17],["let",12],[" ",17],["host",7],[": ",17],["Endianness",18]],"d":"The endianness of the machine running this program."},{"p":["TimeAmount","zero"],"f":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["TimeAmount",18,64],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["TimeAmount",18]],"d":"The zero value for `TimeAmount`.","o":1375},{"p":["NIODeadline","distantPast"],"f":[["static",12],[" ",17],["let",12],[" ",17],["distantPast",7],[": ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["let",12],[" ",17],["distantPast",7],[": ",17],["NIODeadline",18]]},{"p":["NIODeadline","distantFuture"],"f":[["static",12],[" ",17],["let",12],[" ",17],["distantFuture",7],[": ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["let",12],[" ",17],["distantFuture",7],[": ",17],["NIODeadline",18]]},{"p":["NIOBSDSocket","OptionLevel","ip"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18]]},{"p":["NIOBSDSocket","OptionLevel","tcp"],"f":[["static",12],[" ",17],["let",12],[" ",17],["tcp",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66]],"s":[["static",12],[" ",17],["let",12],[" ",17],["tcp",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18]]},{"p":["NIOBSDSocket","OptionLevel","ipv6"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18]]},{"p":["NIOBSDSocket","OptionLevel","socket"],"f":[["static",12],[" ",17],["let",12],[" ",17],["socket",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66]],"s":[["static",12],[" ",17],["let",12],[" ",17],["socket",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18]],"d":"Socket options that apply to all sockets."},{"p":["NIOBSDSocket","AddressFamily","inet"],"f":[["static",12],[" ",17],["let",12],[" ",17],["inet",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["AddressFamily",18,67]],"s":[["static",12],[" ",17],["let",12],[" ",17],["inet",7],[": ",17],["NIOBSDSocket",18],[".",17],["AddressFamily",18]],"d":"Address for IP version 4."},{"p":["NIOBSDSocket","AddressFamily","unix"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unix",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["AddressFamily",18,67]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unix",7],[": ",17],["NIOBSDSocket",18],[".",17],["AddressFamily",18]],"d":"Unix local to host address."},{"p":["NIOBSDSocket","AddressFamily","inet6"],"f":[["static",12],[" ",17],["let",12],[" ",17],["inet6",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["AddressFamily",18,67]],"s":[["static",12],[" ",17],["let",12],[" ",17],["inet6",7],[": ",17],["NIOBSDSocket",18],[".",17],["AddressFamily",18]],"d":"Address for IP version 6."},{"p":["NIOBSDSocket","ProtocolFamily","inet"],"f":[["static",12],[" ",17],["let",12],[" ",17],["inet",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68]],"s":[["static",12],[" ",17],["let",12],[" ",17],["inet",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18]],"d":"IP network 4 protocol."},{"p":["NIOBSDSocket","ProtocolFamily","unix"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unix",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unix",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18]],"d":"UNIX local to the host."},{"p":["NIOBSDSocket","ProtocolFamily","inet6"],"f":[["static",12],[" ",17],["let",12],[" ",17],["inet6",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68]],"s":[["static",12],[" ",17],["let",12],[" ",17],["inet6",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18]],"d":"IP network 6 protocol."},{"p":["NIOBSDSocket","ProtocolFamily","local"],"f":[["static",12],[" ",17],["let",12],[" ",17],["local",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68]],"s":[["static",12],[" ",17],["let",12],[" ",17],["local",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18]],"d":"UNIX local to the host, alias for `PF_UNIX` (`.unix`)"},{"p":["NIOBSDSocket","Option","ipv6_v6only"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_v6only",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_v6only",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Indicates if a socket created for the `AF_INET6` address family is\nrestricted to IPv6 only."},{"p":["NIOBSDSocket","Option","so_rcvtimeo"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_rcvtimeo",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_rcvtimeo",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Specifies the receive timeout."},{"p":["NIOBSDSocket","Option","tcp_nodelay"],"f":[["static",12],[" ",17],["let",12],[" ",17],["tcp_nodelay",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["tcp_nodelay",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Disables the Nagle algorithm for send coalescing."},{"p":["NIOBSDSocket","Option","so_keepalive"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_keepalive",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_keepalive",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Use keep-alives."},{"p":["NIOBSDSocket","Option","so_reuseaddr"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_reuseaddr",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_reuseaddr",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Allows the socket to be bound to an address that is already in use."},{"p":["NIOBSDSocket","Option","so_timestamp"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_timestamp",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_timestamp",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Indicate when to generate timestamps."},{"p":["NIOBSDSocket","Option","ip_multicast_if"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_if",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_if",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Set the interface for outgoing multicast packets."},{"p":["NIOBSDSocket","Option","ipv6_join_group"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_join_group",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_join_group",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Add an IPv6 group membership."},{"p":["NIOBSDSocket","Option","ip_multicast_ttl"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_ttl",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_ttl",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Control multicast time-to-live."},{"p":["NIOBSDSocket","Option","ipv6_leave_group"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_leave_group",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_leave_group",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Drop an IPv6 group membership."},{"p":["NIOBSDSocket","Option","ip_add_membership"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip_add_membership",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip_add_membership",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Add a multicast group membership."},{"p":["NIOBSDSocket","Option","ip_multicast_loop"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_loop",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip_multicast_loop",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Control multicast loopback."},{"p":["NIOBSDSocket","Option","ipv6_multicast_if"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_if",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_if",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Set the interface for outgoing multicast packets."},{"p":["NIOBSDSocket","Option","ip_drop_membership"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ip_drop_membership",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ip_drop_membership",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Drop a multicast group membership."},{"p":["NIOBSDSocket","Option","ipv6_multicast_hops"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_hops",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_hops",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Specify the maximum number of router hops for an IPv6 packet."},{"p":["NIOBSDSocket","Option","ipv6_multicast_loop"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_loop",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ipv6_multicast_loop",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Control multicast loopback."},{"p":["NIOBSDSocket","Option","so_error"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_error",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_error",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Get the error status and clear."},{"p":["NIOBSDSocket","Option","tcp_info"],"f":[["static",12],[" ",17],["let",12],[" ",17],["tcp_info",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["tcp_info",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Get information about the TCP connection."},{"p":["NIOBSDSocket","Option","so_linger"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_linger",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_linger",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Linger on close if unsent data is present."},{"p":["NIOBSDSocket","Option","so_rcvbuf"],"f":[["static",12],[" ",17],["let",12],[" ",17],["so_rcvbuf",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["static",12],[" ",17],["let",12],[" ",17],["so_rcvbuf",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]],"d":"Specifies the total per-socket buffer space reserved for receives."},{"p":["NIOFileHandle","Mode","read"],"f":[["static",12],[" ",17],["let",12],[" ",17],["read",7],[": ",17],["NIOFileHandle",18,123],[".",17],["Mode",18,70]],"s":[["static",12],[" ",17],["let",12],[" ",17],["read",7],[": ",17],["NIOFileHandle",18],[".",17],["Mode",18]],"d":"Opens file for reading"},{"p":["NIOFileHandle","Mode","write"],"f":[["static",12],[" ",17],["let",12],[" ",17],["write",7],[": ",17],["NIOFileHandle",18,123],[".",17],["Mode",18,70]],"s":[["static",12],[" ",17],["let",12],[" ",17],["write",7],[": ",17],["NIOFileHandle",18],[".",17],["Mode",18]],"d":"Opens file for writing"},{"p":["NIOFileHandle","Flags","defaultPermissions"],"f":[["static",12],[" ",17],["let",12],[" ",17],["defaultPermissions",7],[": ",17],["mode_t",18,1107]],"s":[["static",12],[" ",17],["let",12],[" ",17],["defaultPermissions",7],[": ",17],["mode_t",18]]},{"p":["NIOFileHandle","Flags","default"],"f":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["NIOFileHandle",18,123],[".",17],["Flags",18,71]],"s":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["NIOFileHandle",18],[".",17],["Flags",18]]},{"p":["ChannelOptions","socketOption"],"f":[["static",12],[" ",17],["let",12],[" ",17],["socketOption",7],[": (",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[") -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["SocketOption",18,80]],"s":[["static",12],[" ",17],["let",12],[" ",17],["socketOption",7],[": (",17],["NIOBSDSocket",18],[".",17],["Option",18],[") -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["SocketOption",18]],"d":"- seealso: `SocketOption`."},{"p":["ChannelOptions","recvAllocator"],"f":[["static",12],[" ",17],["let",12],[" ",17],["recvAllocator",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["RecvAllocatorOption",18,86]],"s":[["static",12],[" ",17],["let",12],[" ",17],["recvAllocator",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["RecvAllocatorOption",18]],"d":"- seealso: `RecvAllocatorOption`."},{"p":["ChannelOptions","connectTimeout"],"f":[["static",12],[" ",17],["let",12],[" ",17],["connectTimeout",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ConnectTimeoutOption",18,87]],"s":[["static",12],[" ",17],["let",12],[" ",17],["connectTimeout",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ConnectTimeoutOption",18]],"d":"- seealso: `ConnectTimeoutOption`."},{"p":["ChannelOptions","receivePacketInfo"],"f":[["static",12],[" ",17],["let",12],[" ",17],["receivePacketInfo",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ReceivePacketInfo",18,85]],"s":[["static",12],[" ",17],["let",12],[" ",17],["receivePacketInfo",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ReceivePacketInfo",18]],"d":"- seealso: `ReceivePacketInfo`"},{"p":["ChannelOptions","maxMessagesPerRead"],"f":[["static",12],[" ",17],["let",12],[" ",17],["maxMessagesPerRead",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["MaxMessagesPerReadOption",18,89]],"s":[["static",12],[" ",17],["let",12],[" ",17],["maxMessagesPerRead",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["MaxMessagesPerReadOption",18]],"d":"- seealso: `MaxMessagesPerReadOption`."},{"p":["ChannelOptions","TCPConvenienceOption","disableAutoRead"],"f":[["static",12],[" ",17],["let",12],[" ",17],["disableAutoRead",7],[": ",17],["ChannelOptions",18,77],[".",17],["TCPConvenienceOption",18,79]],"s":[["static",12],[" ",17],["let",12],[" ",17],["disableAutoRead",7],[": ",17],["ChannelOptions",18],[".",17],["TCPConvenienceOption",18]],"d":"The user will manually call `Channel.read` once all the data is read from the transport."},{"p":["ChannelOptions","TCPConvenienceOption","allowRemoteHalfClosure"],"f":[["static",12],[" ",17],["let",12],[" ",17],["allowRemoteHalfClosure",7],[": ",17],["ChannelOptions",18,77],[".",17],["TCPConvenienceOption",18,79]],"s":[["static",12],[" ",17],["let",12],[" ",17],["allowRemoteHalfClosure",7],[": ",17],["ChannelOptions",18],[".",17],["TCPConvenienceOption",18]],"d":"Allows users to configure whether the `Channel` will close itself when its remote\npeer shuts down its send stream, or whether it will remain open. If set to `false` (the default), the `Channel`\nwill be closed automatically if the remote peer shuts down its send stream. If set to true, the `Channel` will\nnot be closed: instead, a `ChannelEvent.inboundClosed` user event will be sent on the `ChannelPipeline`,\nand no more data will be received."},{"p":["ChannelOptions","TCPConvenienceOption","allowLocalEndpointReuse"],"f":[["static",12],[" ",17],["let",12],[" ",17],["allowLocalEndpointReuse",7],[": ",17],["ChannelOptions",18,77],[".",17],["TCPConvenienceOption",18,79]],"s":[["static",12],[" ",17],["let",12],[" ",17],["allowLocalEndpointReuse",7],[": ",17],["ChannelOptions",18],[".",17],["TCPConvenienceOption",18]],"d":"Allow immediately reusing a local address."},{"p":["ChannelOptions","writeBufferWaterMark"],"f":[["static",12],[" ",17],["let",12],[" ",17],["writeBufferWaterMark",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteBufferWaterMarkOption",18,90]],"s":[["static",12],[" ",17],["let",12],[" ",17],["writeBufferWaterMark",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["WriteBufferWaterMarkOption",18]],"d":"- seealso: `WriteBufferWaterMarkOption`."},{"p":["ChannelOptions","allowRemoteHalfClosure"],"f":[["static",12],[" ",17],["let",12],[" ",17],["allowRemoteHalfClosure",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AllowRemoteHalfClosureOption",18,91]],"s":[["static",12],[" ",17],["let",12],[" ",17],["allowRemoteHalfClosure",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["AllowRemoteHalfClosureOption",18]],"d":"- seealso: `AllowRemoteHalfClosureOption`."},{"p":["ChannelOptions","datagramVectorReadMessageCount"],"f":[["static",12],[" ",17],["let",12],[" ",17],["datagramVectorReadMessageCount",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["DatagramVectorReadMessageCountOption",18,92]],"s":[["static",12],[" ",17],["let",12],[" ",17],["datagramVectorReadMessageCount",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["DatagramVectorReadMessageCountOption",18]],"d":"- seealso: `DatagramVectorReadMessageCountOption`"},{"p":["ChannelOptions","explicitCongestionNotification"],"f":[["static",12],[" ",17],["let",12],[" ",17],["explicitCongestionNotification",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ExplicitCongestionNotificationsOption",18,93]],"s":[["static",12],[" ",17],["let",12],[" ",17],["explicitCongestionNotification",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ExplicitCongestionNotificationsOption",18]],"d":"- seealso: `ExplicitCongestionNotificationsOption`"},{"p":["ChannelOptions","socket"],"f":[["static",12],[" ",17],["let",12],[" ",17],["socket",7],[": (",17],["SocketOptionLevel",18,1071],[", ",17],["SocketOptionName",18,1069],[") -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["SocketOption",18,80]],"s":[["static",12],[" ",17],["let",12],[" ",17],["socket",7],[": (",17],["SocketOptionLevel",18],[", ",17],["SocketOptionName",18],[") -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["SocketOption",18]]},{"p":["ChannelOptions","backlog"],"f":[["static",12],[" ",17],["let",12],[" ",17],["backlog",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["BacklogOption",18,81]],"s":[["static",12],[" ",17],["let",12],[" ",17],["backlog",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["BacklogOption",18]],"d":"- seealso: `BacklogOption`."},{"p":["ChannelOptions","autoRead"],"f":[["static",12],[" ",17],["let",12],[" ",17],["autoRead",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AutoReadOption",18,82]],"s":[["static",12],[" ",17],["let",12],[" ",17],["autoRead",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["AutoReadOption",18]],"d":"- seealso: `AutoReadOption`."},{"p":["ChannelOptions","allocator"],"f":[["static",12],[" ",17],["let",12],[" ",17],["allocator",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AllocatorOption",18,83]],"s":[["static",12],[" ",17],["let",12],[" ",17],["allocator",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["AllocatorOption",18]],"d":"- seealso: `AllocatorOption`."},{"p":["ChannelOptions","tcpOption"],"f":[["static",12],[" ",17],["let",12],[" ",17],["tcpOption",7],[": (",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[") -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["SocketOption",18,80]],"s":[["static",12],[" ",17],["let",12],[" ",17],["tcpOption",7],[": (",17],["NIOBSDSocket",18],[".",17],["Option",18],[") -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["SocketOption",18]],"d":"- seealso: `SocketOption`."},{"p":["ChannelOptions","writeSpin"],"f":[["static",12],[" ",17],["let",12],[" ",17],["writeSpin",7],[": ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteSpinOption",18,84]],"s":[["static",12],[" ",17],["let",12],[" ",17],["writeSpin",7],[": ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["WriteSpinOption",18]],"d":"- seealso: `WriteSpinOption`."},{"p":["System","coreCount"],"f":[["static",12],[" ",17],["var",12],[" ",17],["coreCount",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["coreCount",7],[": ",17],["Int",18]],"d":"A utility function that returns an estimate of the number of *logical* cores\non the system.\n\nThis value can be used to help provide an estimate of how many threads to use with\nthe `MultiThreadedEventLoopGroup`. The exact ratio between this number and the number\nof threads to use is a matter for the programmer, and can be determined based on the\nspecific execution behaviour of the program.\n\n- returns: The logical core count on the system."},{"p":["ByteBuffer","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A `String` describing this `ByteBuffer`. Example:\n\n    ByteBuffer { readerIndex: 0, writerIndex: 4, readableBytes: 4, capacity: 512, storageCapacity: 1024, slice: 256..<768, storage: 0x0000000103001000 (1024 bytes)}\n\nThe format of the description is not API.\n\n- returns: A description of this `ByteBuffer`.","o":1380},{"p":["ByteBuffer","readerIndex"],"f":[["var",12],[" ",17],["readerIndex",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["readerIndex",7],[": ",17],["Int",18]],"d":"The reader index or the number of bytes previously read from this `ByteBuffer`. `readerIndex` is `0` for a\nnewly allocated `ByteBuffer`."},{"p":["ByteBuffer","writerIndex"],"f":[["var",12],[" ",17],["writerIndex",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["writerIndex",7],[": ",17],["Int",18]],"d":"The write index or the number of bytes previously written to this `ByteBuffer`. `writerIndex` is `0` for a\nnewly allocated `ByteBuffer`."},{"p":["ByteBuffer","readableBytes"],"f":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18]],"d":"The number of bytes readable (`readableBytes` = `writerIndex` - `readerIndex`)."},{"p":["ByteBuffer","writableBytes"],"f":[["var",12],[" ",17],["writableBytes",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["writableBytes",7],[": ",17],["Int",18]],"d":"The number of bytes writable until `ByteBuffer` will need to grow its underlying storage which will likely\ntrigger a copy of the bytes."},{"p":["ByteBuffer","CopyBytesError","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":1385},{"p":["ByteBuffer","storageCapacity"],"f":[["var",12],[" ",17],["storageCapacity",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["storageCapacity",7],[": ",17],["Int",18]],"d":"The current capacity of the underlying storage of this `ByteBuffer`.\nA COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original\nbuffer until new data is written."},{"p":["ByteBuffer","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"A `String` describing this `ByteBuffer` with some portion of the readable bytes dumped too. Example:\n\n    ByteBuffer { readerIndex: 0, writerIndex: 4, readableBytes: 4, capacity: 512, slice: 256..<768, storage: 0x0000000103001000 (1024 bytes)}\n    readable bytes (max 1k): [ 00 01 02 03 ]\n\nThe format of the description is not API.\n\n- returns: A description of this `ByteBuffer` useful for debugging."},{"p":["ByteBuffer","readableBytesView"],"f":[["var",12],[" ",17],["readableBytesView",7],[": ",17],["ByteBufferView",18,76],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["readableBytesView",7],[": ",17],["ByteBufferView",18]],"d":"A view into the readable bytes of the `ByteBuffer`."},{"p":["ByteBuffer","capacity"],"f":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18]],"d":"The current capacity of the storage of this `ByteBuffer`, this is not constant and does _not_ signify the number\nof bytes that have been written to this `ByteBuffer`."},{"p":["FileRegion","fileHandle"],"f":[["let",12],[" ",17],["fileHandle",7],[": ",17],["NIOFileHandle",18,123]],"s":[["let",12],[" ",17],["fileHandle",7],[": ",17],["NIOFileHandle",18]],"d":"The `NIOFileHandle` that is used by this `FileRegion`."},{"p":["FileRegion","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["FileRegion","readerIndex"],"f":[["var",12],[" ",17],["readerIndex",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["readerIndex",7],[": ",17],["Int",18]],"d":"The current reader index of this `FileRegion`"},{"p":["FileRegion","readableBytes"],"f":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18]],"d":"The number of readable bytes within this FileRegion (taking the `readerIndex` and `endIndex` into account)."},{"p":["FileRegion","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]],"d":"The end index of this `FileRegion`."},{"p":["TimeAmount","nanoseconds"],"f":[["let",12],[" ",17],["nanoseconds",7],[": ",17],["Int64",18,1390]],"s":[["let",12],[" ",17],["nanoseconds",7],[": ",17],["Int64",18]],"d":"The nanoseconds representation of the `TimeAmount`."},{"p":["NIODeadline","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["NIODeadline","uptimeNanoseconds"],"f":[["var",12],[" ",17],["uptimeNanoseconds",7],[": ",17],["UInt64",18,1396],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["uptimeNanoseconds",7],[": ",17],["UInt64",18]],"d":"The nanoseconds since boot representation of the `NIODeadline`."},{"p":["NIOBSDSocket","OptionLevel","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66],[".",17],["RawValue",18,1034]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18],[".",17],["RawValue",18]],"o":1226},{"p":["NIOBSDSocket","AddressFamily","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["AddressFamily",18,67],[".",17],["RawValue",18,1035]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18],[".",17],["AddressFamily",18],[".",17],["RawValue",18]],"o":1226},{"p":["NIOBSDSocket","ProtocolFamily","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68],[".",17],["RawValue",18,1036]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18],[".",17],["RawValue",18]],"o":1226},{"p":["NIOBSDSocket","Option","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[".",17],["RawValue",18,1038]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18],[".",17],["RawValue",18]],"o":1226},{"p":["NIOFileHandle","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["NIOFileHandle","Mode","rawValue"],"f":[["let",12],[" ",17],["rawValue",7],[": ",17],["UInt8",18,1392]],"s":[["let",12],[" ",17],["rawValue",7],[": ",17],["UInt8",18]],"o":1226},{"p":["NIOFileHandle","isOpen"],"f":[["var",12],[" ",17],["isOpen",7],[": ",17],["Bool",18,1232],[" { get }",17]],"s":[["var",12],[" ",17],["isOpen",7],[": ",17],["Bool",18]],"o":409},{"p":["NIOPacketInfo","interfaceIndex"],"f":[["var",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18,1235]],"s":[["var",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18]]},{"p":["NIOPacketInfo","destinationAddress"],"f":[["var",12],[" ",17],["destinationAddress",7],[": ",17],["SocketAddress",18,44]],"s":[["var",12],[" ",17],["destinationAddress",7],[": ",17],["SocketAddress",18]]},{"p":["SocketAddress","ipAddress"],"f":[["var",12],[" ",17],["ipAddress",7],[": ",17],["String",18,1173],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["ipAddress",7],[": ",17],["String",18],["?",17]],"d":"Get the IP address as a string"},{"p":["SocketAddress","IPv4Address","host"],"f":[["var",12],[" ",17],["host",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["host",7],[": ",17],["String",18]],"d":"The host this address is for, if known."},{"p":["SocketAddress","IPv4Address","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_in",18,1103],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_in",18]],"d":"The libc socket address for an IPv4 address."},{"p":["SocketAddress","IPv6Address","host"],"f":[["var",12],[" ",17],["host",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["host",7],[": ",17],["String",18]],"d":"The host this address is for, if known."},{"p":["SocketAddress","IPv6Address","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_in6",18,1104],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_in6",18]],"d":"The libc socket address for an IPv6 address."},{"p":["SocketAddress","UnixSocketAddress","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_un",18,1105],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["address",7],[": ",17],["sockaddr_un",18]],"d":"The libc socket address for a Unix Domain Socket."},{"p":["SocketAddress","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A human-readable description of this `SocketAddress`. Mostly useful for logging.","o":1380},{"p":["SocketAddress","isMulticast"],"f":[["var",12],[" ",17],["isMulticast",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMulticast",7],[": ",17],["Bool",18]],"d":"Whether this `SocketAddress` corresponds to a multicast address."},{"p":["SocketAddress","protocolFamily"],"f":[["var",12],[" ",17],["protocolFamily",7],[": ",17],["Int32",18,1389],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["protocolFamily",7],[": ",17],["Int32",18]],"a":{"a":{"d":true,"r":"SocketAddress.protocol"}}},{"p":["SocketAddress","port"],"f":[["var",12],[" ",17],["port",7],[": ",17],["Int",18,1235],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["port",7],[": ",17],["Int",18],["?",17]],"d":"Get and set the port associated with the address, if defined.\nWhen setting to `nil` the port will default to `0` for compatible sockets. The rationale for this is that both `nil` and `0` can\nbe interpreted as \"no preference\".\nSetting a non-nil value for a unix domain socket is invalid and will result in a fatal error."},{"p":["SocketAddress","pathname"],"f":[["var",12],[" ",17],["pathname",7],[": ",17],["String",18,1173],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["pathname",7],[": ",17],["String",18],["?",17]],"d":"Get the pathname of a UNIX domain socket as a string"},{"p":["SocketAddress","protocol"],"f":[["var",12],[" ",17],["`protocol`",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["ProtocolFamily",18,68],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["`protocol`",7],[": ",17],["NIOBSDSocket",18],[".",17],["ProtocolFamily",18]],"d":"Returns the protocol family as defined in `man 2 socket` of this `SocketAddress`."},{"p":["ByteBufferView","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["ByteBufferView",18],[".",17],["Index",18]],"o":1242},{"p":["ByteBufferView","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"o":1262},{"p":["ByteBufferView","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["ByteBufferView",18],[".",17],["Index",18]],"o":1268},{"p":["ChannelOptions","Types","SocketOption","optionName"],"f":[["var",12],[" ",17],["optionName",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69]],"s":[["var",12],[" ",17],["optionName",7],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18]]},{"p":["ChannelOptions","Types","SocketOption","optionLevel"],"f":[["var",12],[" ",17],["optionLevel",7],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66]],"s":[["var",12],[" ",17],["optionLevel",7],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18]]},{"p":["ChannelOptions","Types","SocketOption","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["SocketOptionName",18,1069],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["SocketOptionName",18]]},{"p":["ChannelOptions","Types","SocketOption","level"],"f":[["var",12],[" ",17],["level",7],[": ",17],["SocketOptionLevel",18,1071],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["level",7],[": ",17],["SocketOptionLevel",18]]},{"p":["ChannelOptions","Types","WriteBufferWaterMark","low"],"f":[["let",12],[" ",17],["low",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["low",7],[": ",17],["Int",18]],"d":"The low mark setting for a `Channel`.\n\nWhen the amount of buffered bytes in the `Channel`s outbound buffer drops below this value the `Channel` will be\nmarked as writable again (after it was non-writable)."},{"p":["ChannelOptions","Types","WriteBufferWaterMark","high"],"f":[["let",12],[" ",17],["high",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["high",7],[": ",17],["Int",18]],"d":"The high mark setting for a `Channel`.\n\nWhen the amount of buffered bytes in the `Channel`s outbound exceeds this value the `Channel` will be\nmarked as non-writable. It will be marked as writable again once the amount of buffered bytes drops below `low`."},{"p":["ChannelOptions","Types","ConvenienceOptionValue","isSet"],"f":[["var",12],[" ",17],["isSet",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSet",7],[": ",17],["Bool",18]],"e":[["ValueType",2,"()"]],"d":"Convenience method working with bool options as bool values for set."},{"p":["CircularBuffer","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"d":"The position of the first element in a nonempty `CircularBuffer`.\n\nIf the `CircularBuffer` is empty, `startIndex` is equal to `endIndex`.","o":1242},{"p":["CircularBuffer","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"Returns a human readable description of the ring.","o":1380},{"p":["CircularBuffer","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"Returns the number of element in the ring.","o":1262},{"p":["CircularBuffer","first"],"f":[["var",12],[" ",17],["first",7],[": ",17],["Element",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["first",7],[": ",17],["Element",18],["?",17]],"d":"The first `Element` of the `CircularBuffer` (or `nil` if empty)."},{"p":["CircularBuffer","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"d":"Returns whether the ring is empty.","o":1266},{"p":["CircularBuffer","capacity"],"f":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18]],"d":"The total number of elements that the ring can contain without allocating new storage."},{"p":["CircularBuffer","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"d":"The `CircularBuffer`'s \"past the end\" position---that is, the position one\ngreater than the last valid subscript argument.\n\nWhen you need a range that includes the last element of a collection, use\nthe half-open range operator (`..<`) with `endIndex`. The `..<` operator\ncreates a range that doesn't include the upper bound, so it's always\nsafe to use with `endIndex`.\n\nIf the `CircularBuffer` is empty, `endIndex` is equal to `startIndex`.","o":1268},{"p":["EventLoopError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["EventLoopGroup","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["FileDescriptor","isOpen"],"f":[["var",12],[" ",17],["isOpen",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOpen",7],[": ",17],["Bool",18]],"d":"`true` if this `FileDescriptor` is open (which means it was not closed yet)."},{"p":["ChannelPipeline","syncOperations"],"f":[["var",12],[" ",17],["syncOperations",7],[": ",17],["ChannelPipeline",18,124],[".",17],["SynchronousOperations",18,97],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syncOperations",7],[": ",17],["ChannelPipeline",18],[".",17],["SynchronousOperations",18]],"d":"Returns a view of operations which can be performed synchronously on this pipeline. All\noperations **must** be called on the event loop."},{"p":["ChannelPipeline","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":1385},{"p":["ChannelPipeline","SynchronousOperations","eventLoop"],"f":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"d":"The `EventLoop` of the `Channel` this synchronous operations view corresponds to."},{"p":["ChannelPipeline","eventLoop"],"f":[["let",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29]],"s":[["let",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"d":"The `EventLoop` that is used by the underlying `Channel`.","o":460},{"p":["EventLoopFuture","eventLoop"],"f":[["let",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29]],"s":[["let",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"d":"The `EventLoop` which is tied to the `EventLoopFuture` and is used to notify all registered callbacks."},{"p":["EventLoopPromise","futureResult"],"f":[["let",12],[" ",17],["futureResult",7],[": ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["let",12],[" ",17],["futureResult",7],[": ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"d":"The `EventLoopFuture` which is used by the `EventLoopPromise`. You can use it to add callbacks which are notified once the\n`EventLoopPromise` is completed."},{"p":["IdleStateHandler","allTimeout"],"f":[["let",12],[" ",17],["allTimeout",7],[": ",17],["TimeAmount",18,64],["?",17]],"s":[["let",12],[" ",17],["allTimeout",7],[": ",17],["TimeAmount",18],["?",17]]},{"p":["IdleStateHandler","readTimeout"],"f":[["let",12],[" ",17],["readTimeout",7],[": ",17],["TimeAmount",18,64],["?",17]],"s":[["let",12],[" ",17],["readTimeout",7],[": ",17],["TimeAmount",18],["?",17]]},{"p":["IdleStateHandler","writeTimeout"],"f":[["let",12],[" ",17],["writeTimeout",7],[": ",17],["TimeAmount",18,64],["?",17]],"s":[["let",12],[" ",17],["writeTimeout",7],[": ",17],["TimeAmount",18],["?",17]]},{"p":["NIONetworkDevice","interfaceIndex"],"f":[["var",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18]],"d":"The index of the interface, as provided by `if_nametoindex`."},{"p":["NIONetworkDevice","broadcastAddress"],"f":[["var",12],[" ",17],["broadcastAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["broadcastAddress",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The broadcast address associated with this socket interface, if it has one. Some\ninterfaces do not, especially those that have a `pointToPointDestinationAddress`."},{"p":["NIONetworkDevice","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":1385},{"p":["NIONetworkDevice","multicastSupported"],"f":[["var",12],[" ",17],["multicastSupported",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["multicastSupported",7],[": ",17],["Bool",18]],"d":"If the Interface supports Multicast"},{"p":["NIONetworkDevice","pointToPointDestinationAddress"],"f":[["var",12],[" ",17],["pointToPointDestinationAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pointToPointDestinationAddress",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The address of the peer on a point-to-point interface, if this is one. Some\ninterfaces do not have such an address: most of those have a `broadcastAddress`\ninstead."},{"p":["NIONetworkDevice","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["String",18]],"d":"The name of the network device."},{"p":["NIONetworkDevice","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["address",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The address associated with the given network device."},{"p":["NIONetworkDevice","netmask"],"f":[["var",12],[" ",17],["netmask",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["netmask",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The netmask associated with this address, if any."},{"p":["AddressedEnvelope","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["AddressedEnvelope","remoteAddress"],"f":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18,44]],"s":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18]]},{"p":["AddressedEnvelope","data"],"f":[["var",12],[" ",17],["data",7],[": ",17],["DataType",18]],"s":[["var",12],[" ",17],["data",7],[": ",17],["DataType",18]]},{"p":["AddressedEnvelope","Metadata","packetInfo"],"f":[["var",12],[" ",17],["packetInfo",7],[": ",17],["NIOPacketInfo",18,72],["?",17]],"s":[["var",12],[" ",17],["packetInfo",7],[": ",17],["NIOPacketInfo",18],["?",17]]},{"p":["AddressedEnvelope","Metadata","ecnState"],"f":[["var",12],[" ",17],["ecnState",7],[": ",17],["NIOExplicitCongestionNotificationState",18,55]],"s":[["var",12],[" ",17],["ecnState",7],[": ",17],["NIOExplicitCongestionNotificationState",18]],"d":"Details of any congestion state."},{"p":["AddressedEnvelope","metadata"],"f":[["var",12],[" ",17],["metadata",7],[": ",17],["AddressedEnvelope",18,101],["<",17],["DataType",18],[">.",17],["Metadata",18,102],["?",17]],"s":[["var",12],[" ",17],["metadata",7],[": ",17],["AddressedEnvelope",18],["<",17],["DataType",18],[">.",17],["Metadata",18],["?",17]],"d":"Any metadata associated with this `AddressedEnvelope`"},{"p":["SocketAddressError","FailedToParseIPByteBuffer","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["ByteBuffer",18,60]],"s":[["var",12],[" ",17],["address",7],[": ",17],["ByteBuffer",18]]},{"p":["NIONetworkInterface","interfaceIndex"],"f":[["let",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["interfaceIndex",7],[": ",17],["Int",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The index of the interface, as provided by `if_nametoindex`."},{"p":["NIONetworkInterface","broadcastAddress"],"f":[["let",12],[" ",17],["broadcastAddress",7],[": ",17],["SocketAddress",18,44],["?",17]],"s":[["let",12],[" ",17],["broadcastAddress",7],[": ",17],["SocketAddress",18],["?",17]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The broadcast address associated with this socket interface, if it has one. Some\ninterfaces do not, especially those that have a `pointToPointDestinationAddress`."},{"p":["NIONetworkInterface","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"o":1385},{"p":["NIONetworkInterface","multicastSupported"],"f":[["let",12],[" ",17],["multicastSupported",7],[": ",17],["Bool",18,1232]],"s":[["let",12],[" ",17],["multicastSupported",7],[": ",17],["Bool",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"If the Interface supports Multicast"},{"p":["NIONetworkInterface","pointToPointDestinationAddress"],"f":[["let",12],[" ",17],["pointToPointDestinationAddress",7],[": ",17],["SocketAddress",18,44],["?",17]],"s":[["let",12],[" ",17],["pointToPointDestinationAddress",7],[": ",17],["SocketAddress",18],["?",17]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The address of the peer on a point-to-point interface, if this is one. Some\ninterfaces do not have such an address: most of those have a `broadcastAddress`\ninstead."},{"p":["NIONetworkInterface","name"],"f":[["let",12],[" ",17],["name",7],[": ",17],["String",18,1173]],"s":[["let",12],[" ",17],["name",7],[": ",17],["String",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The name of the network interface."},{"p":["NIONetworkInterface","address"],"f":[["let",12],[" ",17],["address",7],[": ",17],["SocketAddress",18,44]],"s":[["let",12],[" ",17],["address",7],[": ",17],["SocketAddress",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The address associated with the given network interface."},{"p":["NIONetworkInterface","netmask"],"f":[["let",12],[" ",17],["netmask",7],[": ",17],["SocketAddress",18,44],["?",17]],"s":[["let",12],[" ",17],["netmask",7],[": ",17],["SocketAddress",18],["?",17]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"d":"The netmask associated with this address, if any."},{"p":["MarkedCircularBuffer","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"o":1242},{"p":["MarkedCircularBuffer","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["MarkedCircularBuffer","markedElement"],"f":[["var",12],[" ",17],["markedElement",7],[": ",17],["Element",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["markedElement",7],[": ",17],["Element",18],["?",17]],"d":"Returns the marked element."},{"p":["MarkedCircularBuffer","markedElementIndex"],"f":[["var",12],[" ",17],["markedElementIndex",7],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["markedElementIndex",7],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],["?",17]],"d":"Returns the index of the marked element."},{"p":["MarkedCircularBuffer","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements in the buffer.","o":1262},{"p":["MarkedCircularBuffer","first"],"f":[["var",12],[" ",17],["first",7],[": ",17],["Element",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["first",7],[": ",17],["Element",18],["?",17]],"d":"The first element in the buffer."},{"p":["MarkedCircularBuffer","hasMark"],"f":[["var",12],[" ",17],["hasMark",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hasMark",7],[": ",17],["Bool",18]],"d":"Returns true if the buffer has been marked at all."},{"p":["MarkedCircularBuffer","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"d":"If the buffer is empty.","o":1266},{"p":["MarkedCircularBuffer","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"o":1268},{"p":["SocketOptionProvider","eventLoop"],"f":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"d":"The `EventLoop` which is used by this `SocketOptionProvider` for execution."},{"p":["ChannelHandlerContext","localAddress"],"f":[["var",12],[" ",17],["localAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["localAddress",7],[": ",17],["SocketAddress",18],["?",17]]},{"p":["ChannelHandlerContext","remoteAddress"],"f":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18],["?",17]]},{"p":["ChannelHandlerContext","name"],"f":[["let",12],[" ",17],["name",7],[": ",17],["String",18,1173]],"s":[["let",12],[" ",17],["name",7],[": ",17],["String",18]]},{"p":["ChannelHandlerContext","channel"],"f":[["var",12],[" ",17],["channel",7],[": ",17],["Channel",18,28],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["channel",7],[": ",17],["Channel",18]]},{"p":["ChannelHandlerContext","handler"],"f":[["var",12],[" ",17],["handler",7],[": ",17],["ChannelHandler",18,8],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["handler",7],[": ",17],["ChannelHandler",18]]},{"p":["ChannelHandlerContext","pipeline"],"f":[["let",12],[" ",17],["pipeline",7],[": ",17],["ChannelPipeline",18,124]],"s":[["let",12],[" ",17],["pipeline",7],[": ",17],["ChannelPipeline",18]]},{"p":["ChannelHandlerContext","eventLoop"],"f":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"o":460},{"p":["NIOClientTCPBootstrap","underlyingBootstrap"],"f":[["let",12],[" ",17],["underlyingBootstrap",7],[": ",17],["NIOClientTCPBootstrapProtocol",18,25]],"s":[["let",12],[" ",17],["underlyingBootstrap",7],[": ",17],["NIOClientTCPBootstrapProtocol",18]]},{"p":["ChannelOutboundInvoker","eventLoop"],"f":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18,29],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["eventLoop",7],[": ",17],["EventLoop",18]],"d":"The `EventLoop` which is used by this `ChannelOutboundInvoker` for execution."},{"p":["NIOMulticastNotSupportedError","device"],"f":[["var",12],[" ",17],["device",7],[": ",17],["NIONetworkDevice",18,100]],"s":[["var",12],[" ",17],["device",7],[": ",17],["NIONetworkDevice",18]]},{"p":["AdaptiveRecvByteBufferAllocator","initial"],"f":[["let",12],[" ",17],["initial",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["initial",7],[": ",17],["Int",18]]},{"p":["AdaptiveRecvByteBufferAllocator","maximum"],"f":[["let",12],[" ",17],["maximum",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["maximum",7],[": ",17],["Int",18]]},{"p":["AdaptiveRecvByteBufferAllocator","minimum"],"f":[["let",12],[" ",17],["minimum",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["minimum",7],[": ",17],["Int",18]]},{"p":["FixedSizeRecvByteBufferAllocator","capacity"],"f":[["let",12],[" ",17],["capacity",7],[": ",17],["Int",18,1235]],"s":[["let",12],[" ",17],["capacity",7],[": ",17],["Int",18]]},{"p":["IOData","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["IOData","readableBytes"],"f":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18,1235],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["readableBytes",7],[": ",17],["Int",18]],"d":"Returns the number of readable bytes in this `IOData`."},{"p":["NIOAny","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["Channel","isWritable"],"f":[["var",12],[" ",17],["isWritable",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWritable",7],[": ",17],["Bool",18]],"d":"Returns if this `Channel` is currently writable."},{"p":["Channel","closeFuture"],"f":[["var",12],[" ",17],["closeFuture",7],[": ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["closeFuture",7],[": ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"The `closeFuture` will fire when the `Channel` has been closed."},{"p":["Channel","syncOptions"],"f":[["var",12],[" ",17],["syncOptions",7],[": ",17],["NIOSynchronousChannelOptions",18,24],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syncOptions",7],[": ",17],["NIOSynchronousChannelOptions",18],["?",17]],"d":"Returns a view of the `Channel` exposing synchronous versions of `setOption` and `getOption`.\nThe default implementation returns `nil`, and `Channel` implementations must opt in to\nsupport this behavior."},{"p":["Channel","localAddress"],"f":[["var",12],[" ",17],["localAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["localAddress",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The local `SocketAddress`."},{"p":["Channel","remoteAddress"],"f":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18,44],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["remoteAddress",7],[": ",17],["SocketAddress",18],["?",17]],"d":"The remote peer's `SocketAddress`."},{"p":["Channel","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["Channel",18,28],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["Channel",18],["?",17]],"d":"`Channel`s are hierarchical and might have a parent `Channel`. `Channel` hierarchies are in use for certain\nprotocols such as HTTP/2."},{"p":["Channel","isActive"],"f":[["var",12],[" ",17],["isActive",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isActive",7],[": ",17],["Bool",18]],"d":"Returns if this `Channel` is currently active. Active is defined as the period of time after the\n`channelActive` and before `channelInactive` has fired. The main use for this is to know if `channelActive`\nor `channelInactive` can be expected next when `handlerAdded` was received."},{"p":["Channel","pipeline"],"f":[["var",12],[" ",17],["pipeline",7],[": ",17],["ChannelPipeline",18,124],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["pipeline",7],[": ",17],["ChannelPipeline",18]],"d":"The `ChannelPipeline` which handles all I/O events and requests associated with this `Channel`."},{"p":["Channel","allocator"],"f":[["var",12],[" ",17],["allocator",7],[": ",17],["ByteBufferAllocator",18,105],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["allocator",7],[": ",17],["ByteBufferAllocator",18]],"d":"The `Channel`'s `ByteBuffer` allocator. This is _the only_ supported way of allocating `ByteBuffer`s to be used with this `Channel`."},{"p":["Channel","syncOptions"],"f":[["var",12],[" ",17],["syncOptions",7],[": ",17],["NIOSynchronousChannelOptions",18,24],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syncOptions",7],[": ",17],["NIOSynchronousChannelOptions",18],["?",17]],"d":"Default implementation: `NIOSynchronousChannelOptions` are not supported."},{"p":["IOError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":1380},{"p":["IOError","localizedDescription"],"f":[["var",12],[" ",17],["localizedDescription",7],[": ",17],["String",18,1173],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["localizedDescription",7],[": ",17],["String",18]]},{"p":["IOError","reason"],"f":[["var",12],[" ",17],["reason",7],[": ",17],["IOError",18,120],[".",17],["FailureDescription",18,58],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["reason",7],[": ",17],["IOError",18],[".",17],["FailureDescription",18]],"a":{"a":{"d":true,"m":"NIO no longer uses FailureDescription, use IOError.description for a human-readable error description"}}},{"p":["IOError","errnoCode"],"f":[["var",12],[" ",17],["errnoCode",7],[": ",17],["CInt",18,1386],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["errnoCode",7],[": ",17],["CInt",18]],"d":"The `errno` that was set for the operation."},{"p":["EventLoop","inEventLoop"],"f":[["var",12],[" ",17],["inEventLoop",7],[": ",17],["Bool",18,1232],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["inEventLoop",7],[": ",17],["Bool",18]],"d":"Returns `true` if the current `NIOThread` is the same as the `NIOThread` that is tied to this `EventLoop`. `false` otherwise."},{"p":["Scheduled","futureResult"],"f":[["var",12],[" ",17],["futureResult",7],[": ",17],["EventLoopFuture",18,125],["<",17],["T",18],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["futureResult",7],[": ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"d":"Returns the `EventLoopFuture` which will be notified once the execution of the scheduled task completes."},{"p":["TimeAmount","nanoseconds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["nanoseconds",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["nanoseconds",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of nanoseconds.\n\n- parameters:\n    - amount: the amount of nanoseconds this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["TimeAmount","microseconds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["microseconds",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["microseconds",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of microseconds.\n\n- parameters:\n    - amount: the amount of microseconds this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["TimeAmount","milliseconds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["milliseconds",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["milliseconds",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of milliseconds.\n\n- parameters:\n    - amount: the amount of milliseconds this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["TimeAmount","hours(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hours",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hours",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of hours.\n\n- parameters:\n    - amount: the amount of hours this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["TimeAmount","minutes(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["minutes",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["minutes",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of minutes.\n\n- parameters:\n    - amount: the amount of minutes this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["TimeAmount","seconds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["seconds",7],["(",17],["_",1],[" ",17],["amount",2],[": ",17],["Int64",18,1390],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["seconds",7],["(",17],["Int64",18],[") -> ",17],["TimeAmount",18]],"d":"Creates a new `TimeAmount` for the given amount of seconds.\n\n- parameters:\n    - amount: the amount of seconds this `TimeAmount` represents.\n- returns: the `TimeAmount` for the given amount."},{"p":["NIODeadline","uptimeNanoseconds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["uptimeNanoseconds",7],["(",17],["_",1],[" ",17],["nanoseconds",2],[": ",17],["UInt64",18,1396],[") -> ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["uptimeNanoseconds",7],["(",17],["UInt64",18],[") -> ",17],["NIODeadline",18]]},{"p":["NIODeadline","now()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["now",7],["() -> ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["now",7],["() -> ",17],["NIODeadline",18]]},{"p":["NIOFileHandle","Flags","allowFileCreation(posixMode:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["allowFileCreation",7],["(",17],["posixMode",1],[": ",17],["NIOPOSIXFileMode",18,1068],[" = defaultPermissions) -> ",17],["NIOFileHandle",18,123],[".",17],["Flags",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["allowFileCreation",7],["(",17],["posixMode",1],[": ",17],["NIOPOSIXFileMode",18],[") -> ",17],["NIOFileHandle",18],[".",17],["Flags",18]],"d":"Allows file creation when opening file for writing. File owner is set to the effective user ID of the process.\n\n- parameters:\n    - posixMode: `file mode` applied when file is created. Default permissions are: read and write for fileowner, read for owners group and others."},{"p":["NIOFileHandle","Flags","posix(flags:mode:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["posix",7],["(",17],["flags",1],[": ",17],["CInt",18,1386],[", ",17],["mode",1],[": ",17],["NIOPOSIXFileMode",18,1068],[") -> ",17],["NIOFileHandle",18,123],[".",17],["Flags",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["posix",7],["(",17],["flags",1],[": ",17],["CInt",18],[", ",17],["mode",1],[": ",17],["NIOPOSIXFileMode",18],[") -> ",17],["NIOFileHandle",18],[".",17],["Flags",18]],"d":"Allows the specification of POSIX flags (e.g. `O_TRUNC`) and mode (e.g. `S_IWUSR`)\n\n- parameters:\n    - flags: The POSIX open flags (the second parameter for `open(2)`).\n    - mode: The POSIX mode (the third parameter for `open(2)`).\n- returns: A `NIOFileHandle.Mode` equivalent to the given POSIX flags and mode."},{"p":["SocketAddress","makeAddressResolvingHost(_:port:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAddressResolvingHost",7],["(",17],["_",1],[" ",17],["host",2],[": ",17],["String",18,1173],[", ",17],["port",1],[": ",17],["Int",18,1235],[") ",17],["throws",12],[" -> ",17],["SocketAddress",18,44]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAddressResolvingHost",7],["(",17],["String",18],[", ",17],["port",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["SocketAddress",18]],"d":"Creates a new `SocketAddress` for the given host (which will be resolved) and port.\n\n- warning: This is a blocking call, so please avoid calling this from an `EventLoop`.\n\n- parameters:\n    - host: the hostname which should be resolved.\n    - port: the port itself\n- returns: the `SocketAddress` for the host / port pair.\n- throws: a `SocketAddressError.unknown` if we could not resolve the `host`, or `SocketAddressError.unsupported` if the address itself is not supported (yet)."},{"p":["EventLoopFuture","andAllSucceed(_:on:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["andAllSucceed",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["andAllSucceed",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["Value",0,0]],"d":"Returns a new `EventLoopFuture` that succeeds only if all of the provided futures succeed.\n\nThis method acts as a successful completion notifier - values fulfilled by each future are discarded.\n\nThe returned `EventLoopFuture` fails as soon as any of the provided futures fail.\n\nIf it is desired to always succeed, regardless of failures, use `andAllComplete` instead.\n- Parameters:\n    - futures: An array of homogenous `EventLoopFutures`s to wait for.\n    - on: The `EventLoop` on which the new `EventLoopFuture` callbacks will execute on.\n- Returns: A new `EventLoopFuture` that waits for the other futures to succeed."},{"p":["EventLoopFuture","andAllSucceed(_:promise:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["andAllSucceed",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">)",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["andAllSucceed",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">)",17]],"g":[["Value",0,0]],"d":"Succeeds the promise if all of the provided futures succeed. If any of the provided\nfutures fail then the `promise` will be failed -- even if some futures are yet to complete.\n\nIf the results of all futures should be collected use `andAllComplete` instead.\n\n- Parameters:\n    - futures: An array of homogenous `EventLoopFutures`s to wait for.\n    - promise: The `EventLoopPromise` to complete with the result of this call."},{"p":["EventLoopFuture","andAllComplete(_:on:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["andAllComplete",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["andAllComplete",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["Value",0,0]],"d":"Returns a new `EventLoopFuture` that succeeds when all of the provided `EventLoopFuture`s complete.\n\nThe returned `EventLoopFuture` always succeeds, acting as a completion notification.\nValues fulfilled by each future are discarded.\n\nIf the results are needed, use `whenAllComplete` instead.\n- Parameters:\n    - futures: An array of homogenous `EventLoopFuture`s to wait for.\n    - on: The `EventLoop` on which the new `EventLoopFuture` callbacks will execute on.\n- Returns: A new `EventLoopFuture` that succeeds after all futures complete."},{"p":["EventLoopFuture","andAllComplete(_:promise:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["andAllComplete",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">)",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["andAllComplete",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">)",17]],"g":[["Value",0,0]],"d":"Completes a `promise` when all of the provided `EventLoopFuture`s have completed.\n\nThe promise will always be succeeded, regardless of the outcome of the individual futures.\n\nIf the results are required, use `whenAllComplete` instead.\n\n- Parameters:\n    - futures: An array of homogenous `EventLoopFuture`s to wait for.\n    - promise: The `EventLoopPromise` to succeed when all futures have completed."},{"p":["EventLoopFuture","whenAllSucceed(_:on:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["whenAllSucceed",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<[",17],["Value",18],["]>",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["whenAllSucceed",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<[",17],["Value",18],["]>",17]],"g":[["Value",0,0]],"d":"Returns a new `EventLoopFuture` that succeeds only if all of the provided futures succeed.\nThe new `EventLoopFuture` will contain all of the values fulfilled by the futures.\n\nThe returned `EventLoopFuture` will fail as soon as any of the futures fails.\n- Parameters:\n    - futures: An array of homogenous `EventLoopFuture`s to wait on for fulfilled values.\n    - on: The `EventLoop` on which the new `EventLoopFuture` callbacks will fire.\n- Returns: A new `EventLoopFuture` with all of the values fulfilled by the provided futures."},{"p":["EventLoopFuture","whenAllSucceed(_:promise:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["whenAllSucceed",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<[",17],["Value",18],["]>)",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["whenAllSucceed",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<[",17],["Value",18],["]>)",17]],"g":[["Value",0,0]],"d":"Completes the `promise` with the values of all `futures` if all provided futures succeed. If\nany of the provided futures fail then `promise` will be failed.\n\nIf the _results of all futures should be collected use `andAllComplete` instead.\n\n- Parameters:\n    - futures: An array of homogenous `EventLoopFutures`s to wait for.\n    - promise: The `EventLoopPromise` to complete with the result of this call."},{"p":["EventLoopFuture","whenAllComplete(_:on:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["whenAllComplete",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<[",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">]>",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["whenAllComplete",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<[",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">]>",17]],"g":[["Value",0,0]],"d":"Returns a new `EventLoopFuture` that succeeds when all of the provided `EventLoopFuture`s complete.\nThe new `EventLoopFuture` will contain an array of results, maintaining ordering for each of the `EventLoopFuture`s.\n\nThe returned `EventLoopFuture` always succeeds, regardless of any failures from the waiting futures.\n\nIf it is desired to flatten them into a single `EventLoopFuture` that fails on the first `EventLoopFuture` failure,\nuse one of the `reduce` methods instead.\n- Parameters:\n    - futures: An array of homogenous `EventLoopFuture`s to gather results from.\n    - on: The `EventLoop` on which the new `EventLoopFuture` callbacks will fire.\n- Returns: A new `EventLoopFuture` with all the results of the provided futures."},{"p":["EventLoopFuture","whenAllComplete(_:promise:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["whenAllComplete",7],["(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<[",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">]>)",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["whenAllComplete",7],["([",17],["EventLoopFuture",18],["<",17],["Value",18],[">], ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<[",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">]>)",17]],"g":[["Value",0,0]],"d":"Completes a `promise` with the results of all provided `EventLoopFuture`s.\n\nThe promise will always be succeeded, regardless of the outcome of the futures.\n\n- Parameters:\n    - futures: An array of homogenous `EventLoopFuture`s to gather results from.\n    - promise: The `EventLoopPromise` to complete with the result of the futures."},{"p":["EventLoopFuture","reduce(into:_:on:_:)"],"f":[["@preconcurrency",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["reduce",7],["<",17],["InputValue",0],[">(",17],["into",1],[" ",17],["initialResult",2],[": ",17],["Value",18],[", ",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["InputValue",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[", ",17],["_",1],[" ",17],["updateAccumulatingResult",2],[": ",17],["@escaping",12],[" (",17],["inout",12],[" ",17],["Value",18],[", ",17],["InputValue",18],[") -> ",17],["Void",18,1387],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["reduce",7],["<",17],["InputValue",0],[">(",17],["into",1],[": ",17],["Value",18],[", [",17],["EventLoopFuture",18],["<",17],["InputValue",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[", (",17],["inout",12],[" ",17],["Value",18],[", ",17],["InputValue",18],[") -> ",17],["Void",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0],["InputValue",0,1]],"d":"Returns a new `EventLoopFuture` that fires only when all the provided futures complete.\nThe new `EventLoopFuture` contains the result of combining the `initialResult` with the\nvalues of the `[EventLoopFuture<NewValue>]`. This function is analogous to the standard library's\n`reduce(into:)`, which does not make copies of the result type for each `EventLoopFuture`.\n\nThe returned `EventLoopFuture` will fail as soon as a failure is encountered in any of the\n`futures`. However, the failure will not occur until all preceding\n`EventLoopFutures` have completed. At the point the failure is encountered, all subsequent\n`EventLoopFuture` objects will no longer be waited for. This function therefore fails fast: once\na failure is encountered, it will immediately fail the overall `EventLoopFuture`.\n\n- parameters:\n    - initialResult: An initial result to begin the reduction.\n    - futures: An array of `EventLoopFuture` to wait for.\n    - eventLoop: The `EventLoop` on which the new `EventLoopFuture` callbacks will fire.\n    - updateAccumulatingResult: The bifunction used to combine partialResults with new elements.\n- returns: A new `EventLoopFuture` with the combined value."},{"p":["EventLoopFuture","reduce(_:_:on:_:)"],"f":[["@preconcurrency",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["reduce",7],["<",17],["InputValue",0],[">(",17],["_",1],[" ",17],["initialResult",2],[": ",17],["Value",18],[", ",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["InputValue",18],[">], ",17],["on",1],[" ",17],["eventLoop",2],[": ",17],["EventLoop",18,29],[", ",17],["_",1],[" ",17],["nextPartialResult",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[", ",17],["InputValue",18],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["reduce",7],["<",17],["InputValue",0],[">(",17],["Value",18],[", [",17],["EventLoopFuture",18],["<",17],["InputValue",18],[">], ",17],["on",1],[": ",17],["EventLoop",18],[", (",17],["Value",18],[", ",17],["InputValue",18],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0],["InputValue",0,1]],"d":"Returns a new `EventLoopFuture` that fires only when all the provided futures complete.\nThe new `EventLoopFuture` contains the result of reducing the `initialResult` with the\nvalues of the `[EventLoopFuture<NewValue>]`.\n\nThis function makes copies of the result for each EventLoopFuture, for a version which avoids\nmaking copies, check out `reduce<NewValue>(into:)`.\n\nThe returned `EventLoopFuture` will fail as soon as a failure is encountered in any of the\n`futures`. However, the failure will not occur until all preceding\n`EventLoopFutures` have completed. At the point the failure is encountered, all subsequent\n`EventLoopFuture` objects will no longer be waited for. This function therefore fails fast: once\na failure is encountered, it will immediately fail the overall `EventLoopFuture`.\n\n- parameters:\n    - initialResult: An initial result to begin the reduction.\n    - futures: An array of `EventLoopFuture` to wait for.\n    - eventLoop: The `EventLoop` on which the new `EventLoopFuture` callbacks will fire.\n    - nextPartialResult: The bifunction used to produce partial results.\n- returns: A new `EventLoopFuture` with the reduced value."},{"p":["AcceptBackoffHandler","defaultBackoffProvider(error:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["defaultBackoffProvider",7],["(",17],["error",1],[": ",17],["IOError",18,120],[") -> ",17],["TimeAmount",18,64],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["defaultBackoffProvider",7],["(",17],["error",1],[": ",17],["IOError",18],[") -> ",17],["TimeAmount",18],["?",17]],"d":"Default implementation used as `backoffProvider` which delays accept by 1 second."},{"p":["System","enumerateDevices()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["enumerateDevices",7],["() ",17],["throws",12],[" -> [",17],["NIONetworkDevice",18,100],["]",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["enumerateDevices",7],["() ",17],["throws",12],[" -> [",17],["NIONetworkDevice",18],["]",17]],"d":"A utility function that enumerates the available network devices on this machine.\n\nThis function returns values that are true for a brief snapshot in time. These results can\nchange, and the returned values will not change to reflect them. This function must be called\nagain to get new results.\n\n- returns: An array of network devices available on this machine.\n- throws: If an error is encountered while enumerating interfaces."},{"p":["System","enumerateInterfaces()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["enumerateInterfaces",7],["() ",17],["throws",12],[" -> [",17],["NIONetworkInterface",18,128],["]",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["enumerateInterfaces",7],["() ",17],["throws",12],[" -> [",17],["NIONetworkInterface",18],["]",17]],"a":{"a":{"d":true,"r":"enumerateDevices"}},"d":"A utility function that enumerates the available network interfaces on this machine.\n\nThis function returns values that are true for a brief snapshot in time. These results can\nchange, and the returned values will not change to reflect them. This function must be called\nagain to get new results.\n\n- returns: An array of network interfaces available on this machine.\n- throws: If an error is encountered while enumerating interfaces."},{"p":["ByteBuffer","setRepeatingByte(_:count:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setRepeatingByte",7],["(",17],["_",1],[" ",17],["byte",2],[": ",17],["UInt8",18,1392],[", ",17],["count",1],[": ",17],["Int",18,1235],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setRepeatingByte",7],["(",17],["UInt8",18],[", ",17],["count",1],[": ",17],["Int",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Sets the given `byte` `count` times at the given `index`. Will reserve more memory if necessary. Does not move the writer index.\n\n- parameter byte: The `UInt8` byte to repeat.\n- parameter count: How many times to repeat the given `byte`\n- returns: How many bytes were written."},{"p":["ByteBuffer","writeImmutableBuffer(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeImmutableBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,60],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeImmutableBuffer",7],["(",17],["ByteBuffer",18],[") -> ",17],["Int",18]]},{"p":["ByteBuffer","writeRepeatingByte(_:count:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeRepeatingByte",7],["(",17],["_",1],[" ",17],["byte",2],[": ",17],["UInt8",18,1392],[", ",17],["count",1],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeRepeatingByte",7],["(",17],["UInt8",18],[", ",17],["count",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Writes `byte` `count` times. Moves the writer index forward by the number of bytes written.\n\n- parameter byte: The `UInt8` byte to repeat.\n- parameter count: How many times to repeat the given `byte`\n- returns: How many bytes were written."},{"p":["ByteBuffer","setBuffer(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,60],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setBuffer",7],["(",17],["ByteBuffer",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Copy `buffer`'s readable bytes into this `ByteBuffer` starting at `index`. Does not move any of the reader or writer indices.\n\n- parameters:\n    - buffer: The `ByteBuffer` to copy.\n    - index: The index for the first byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeBuffer(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeBuffer",7],["(",17],["inout",12],[" ",17],["ByteBuffer",18],[") -> ",17],["Int",18]],"d":"Write `buffer`'s readable bytes into this `ByteBuffer` starting at `writerIndex`. This will move both this\n`ByteBuffer`'s writer index as well as `buffer`'s reader index by the number of bytes readable in `buffer`.\n\n- parameters:\n    - buffer: The `ByteBuffer` to write.\n- returns: The number of bytes written to this `ByteBuffer` which is equal to the number of bytes read from `buffer`."},{"p":["ByteBuffer","getInteger(at:endianness:as:)"],"f":[["func",12],[" ",17],["getInteger",7],["<",17],["T",0],[">(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = Endianness.big, ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["getInteger",7],["<",17],["T",0],[">(",17],["at",1],[": ",17],["Int",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",1369]],"g":[["T",0,0]],"d":"Get the integer at `index` from this `ByteBuffer`. Does not move the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index of the bytes for the integer into the `ByteBuffer`.\n    - endianness: The endianness of the integer in this `ByteBuffer` (defaults to big endian).\n    - as: the desired `FixedWidthInteger` type (optional parameter)\n- returns: An integer value deserialized from this `ByteBuffer` or `nil` if the bytes of interest are not\n           readable."},{"p":["ByteBuffer","readString(length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readString",7],["(",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["String",18,1173],["?",17]],"s":[["func",12],[" ",17],["readString",7],["(",17],["length",1],[": ",17],["Int",18],[") -> ",17],["String",18],["?",17]],"d":"Read `length` bytes off this `ByteBuffer`, decoding it as `String` using the UTF-8 encoding. Move the reader index forward by `length`.\n\n- parameters:\n    - length: The number of bytes making up the string.\n- returns: A `String` value deserialized from this `ByteBuffer` or `nil` if there aren't at least `length` bytes readable."},{"p":["ByteBuffer","setInteger(_:at:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setInteger",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["integer",2],[": ",17],["T",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["setInteger",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["at",1],[": ",17],["Int",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["Int",18]],"c":[["T",1,"FixedWidthInteger",1369]],"g":[["T",0,0]],"d":"Write `integer` into this `ByteBuffer` starting at `index`. This does not alter the writer index.\n\n- parameters:\n    - integer: The integer to serialize.\n    - index: The index of the first byte to write.\n    - endianness: The endianness to use, defaults to big endian.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeBytes",7],["(",17],["_",1],[" ",17],["bytes",2],[": ",17],["UnsafeRawBufferPointer",18,1223],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeBytes",7],["(",17],["UnsafeRawBufferPointer",18],[") -> ",17],["Int",18]],"d":"Write `bytes` into this `ByteBuffer`. Moves the writer index forward by the number of bytes written.\n\n- parameters:\n    - bytes: An `UnsafeRawBufferPointer`\n- returns: The number of bytes written or `bytes.count`."},{"p":["ByteBuffer","writeBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeBytes",7],["<",17],["Bytes",0],[">(",17],["_",1],[" ",17],["bytes",2],[": ",17],["Bytes",18],[") -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Sequence",18,1174],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,1392]],"s":[["func",12],[" ",17],["writeBytes",7],["<",17],["Bytes",0],[">(",17],["Bytes",18],[") -> ",17],["Int",18]],"c":[["Bytes",1,"Sequence",1174],["Bytes.Element",2,"UInt8",1392]],"g":[["Bytes",0,0]],"d":"Write `bytes`, a `Sequence` of `UInt8` into this `ByteBuffer`. Moves the writer index forward by the number of bytes written.\n\n- parameters:\n    - bytes: A `Collection` of `UInt8` to be written.\n- returns: The number of bytes written or `bytes.count`."},{"p":["ByteBuffer","readInteger(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readInteger",7],["<",17],["T",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readInteger",7],["<",17],["T",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",1369]],"g":[["T",0,0]],"d":"Read an integer off this `ByteBuffer`, move the reader index forward by the integer's byte size and return the result.\n\n- parameters:\n    - endianness: The endianness of the integer in this `ByteBuffer` (defaults to big endian).\n    - as: the desired `FixedWidthInteger` type (optional parameter)\n- returns: An integer value deserialized from this `ByteBuffer` or `nil` if there aren't enough bytes readable."},{"p":["ByteBuffer","writeString(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,1173],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeString",7],["(",17],["String",18],[") -> ",17],["Int",18]],"d":"Write `string` into this `ByteBuffer` using UTF-8 encoding, moving the writer index forward appropriately.\n\n- parameters:\n    - string: The string to write.\n- returns: The number of bytes written."},{"p":["ByteBuffer","setSubstring(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setSubstring",7],["(",17],["_",1],[" ",17],["substring",2],[": ",17],["Substring",18,1348],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setSubstring",7],["(",17],["Substring",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Write `substring` into this `ByteBuffer` at `index` using UTF-8 encoding. Does not move the writer index.\n\n- parameters:\n    - substring: The substring to write.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written"},{"p":["ByteBuffer","writeInteger(_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeInteger",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["integer",2],[": ",17],["T",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeInteger",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["Int",18]],"c":[["T",1,"FixedWidthInteger",1369]],"g":[["T",0,0]],"d":"Write `integer` into this `ByteBuffer`, moving the writer index forward appropriately.\n\n- parameters:\n    - integer: The integer to serialize.\n    - endianness: The endianness to use, defaults to big endian.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeSubstring(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeSubstring",7],["(",17],["_",1],[" ",17],["substring",2],[": ",17],["Substring",18,1348],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeSubstring",7],["(",17],["Substring",18],[") -> ",17],["Int",18]],"d":"Write `substring` into this `ByteBuffer` using UTF-8 encoding, moving the writer index forward appropriately.\n\n- parameters:\n    - substring: The substring to write.\n- returns: The number of bytes written."},{"p":["ByteBuffer","getDispatchData(at:length:)"],"f":[["func",12],[" ",17],["getDispatchData",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["DispatchData",18,1118],["?",17]],"s":[["func",12],[" ",17],["getDispatchData",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> ",17],["DispatchData",18],["?",17]],"d":"Get the bytes at `index` from this `ByteBuffer` as a `DispatchData`. Does not move the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index into `ByteBuffer` containing the string of interest.\n    - length: The number of bytes.\n- returns: A `DispatchData` value deserialized from this `ByteBuffer` or `nil` if the requested bytes\n           are not readable."},{"p":["ByteBuffer","moveReaderIndex(to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveReaderIndex",7],["(",17],["to",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveReaderIndex",7],["(",17],["to",1],[": ",17],["Int",18],[")",17]],"d":"Set the reader index to `offset`.\n\n- warning: By contract the bytes between (including) `readerIndex` and (excluding) `writerIndex` must be\n           initialised, ie. have been written before. Also the `readerIndex` must always be less than or equal\n           to the `writerIndex`. Failing to meet either of these requirements leads to undefined behaviour.\n- parameters:\n  - offset: The offset in bytes to set the reader index to."},{"p":["ByteBuffer","moveReaderIndex(forwardBy:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[": ",17],["Int",18],[")",17]],"d":"Move the reader index forward by `offset` bytes.\n\n- warning: By contract the bytes between (including) `readerIndex` and (excluding) `writerIndex` must be\n           initialised, ie. have been written before. Also the `readerIndex` must always be less than or equal\n           to the `writerIndex`. Failing to meet either of these requirements leads to undefined behaviour.\n- parameters:\n  - offset: The number of bytes to move the reader index forward by."},{"p":["ByteBuffer","moveWriterIndex(to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveWriterIndex",7],["(",17],["to",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveWriterIndex",7],["(",17],["to",1],[": ",17],["Int",18],[")",17]],"d":"Set the writer index to `offset`.\n\n- warning: By contract the bytes between (including) `readerIndex` and (excluding) `writerIndex` must be\n           initialised, ie. have been written before. Also the `readerIndex` must always be less than or equal\n           to the `writerIndex`. Failing to meet either of these requirements leads to undefined behaviour.\n- parameters:\n  - offset: The offset in bytes to set the reader index to."},{"p":["ByteBuffer","moveWriterIndex(forwardBy:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveWriterIndex",7],["(",17],["forwardBy",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveWriterIndex",7],["(",17],["forwardBy",1],[": ",17],["Int",18],[")",17]],"d":"Move the writer index forward by `offset` bytes.\n\n- warning: By contract the bytes between (including) `readerIndex` and (excluding) `writerIndex` must be\n           initialised, ie. have been written before. Also the `readerIndex` must always be less than or equal\n           to the `writerIndex`. Failing to meet either of these requirements leads to undefined behaviour.\n- parameters:\n  - offset: The number of bytes to move the writer index forward by."},{"p":["ByteBuffer","reserveCapacity(minimumWritableBytes:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reserveCapacity",7],["(",17],["minimumWritableBytes",1],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["reserveCapacity",7],["(",17],["minimumWritableBytes",1],[": ",17],["Int",18],[")",17]],"d":"Reserves enough space to write at least the specified number of bytes.\n\nThis method will ensure that the buffer has enough writable space for at least as many bytes\nas requested. If the buffer already has space to write the requested number of bytes, this\nmethod will be a no-op.\n\n- Parameter minimumWritableBytes: The minimum number of writable bytes this buffer must have."},{"p":["ByteBuffer","reserveCapacity(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reserveCapacity",7],["(",17],["_",1],[" ",17],["minimumCapacity",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["reserveCapacity",7],["(",17],["Int",18],[")",17]],"d":"Reserves enough space to store the specified number of bytes.\n\nThis method will ensure that the buffer has space for at least as many bytes as requested.\nThis includes any bytes already stored, and completely disregards the reader/writer indices.\nIf the buffer already has space to store the requested number of bytes, this method will be\na no-op.\n\n- parameters:\n    - minimumCapacity: The minimum number of bytes this buffer must be able to store."},{"p":["ByteBuffer","setDispatchData(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setDispatchData",7],["(",17],["_",1],[" ",17],["dispatchData",2],[": ",17],["DispatchData",18,1118],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setDispatchData",7],["(",17],["DispatchData",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Write `dispatchData` into this `ByteBuffer` at `index`. Does not move the writer index.\n\n- parameters:\n    - dispatchData: The `DispatchData` to write.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","setStaticString(_:at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setStaticString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["StaticString",18,1367],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setStaticString",7],["(",17],["StaticString",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Write the static `string` into this `ByteBuffer` at `index` using UTF-8 encoding, moving the writer index forward appropriately.\n\n- parameters:\n    - string: The string to write.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","discardReadBytes()"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["discardReadBytes",7],["() -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["discardReadBytes",7],["() -> ",17],["Bool",18]],"d":"Discard the bytes before the reader index. The byte at index `readerIndex` before calling this method will be\nat index `0` after the call returns.\n\n- returns: `true` if one or more bytes have been discarded, `false` if there are no bytes to discard."},{"p":["ByteBuffer","readDispatchData(length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readDispatchData",7],["(",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["DispatchData",18,1118],["?",17]],"s":[["func",12],[" ",17],["readDispatchData",7],["(",17],["length",1],[": ",17],["Int",18],[") -> ",17],["DispatchData",18],["?",17]],"d":"Read `length` bytes off this `ByteBuffer` and return them as a `DispatchData`. Move the reader index forward by `length`.\n\n- parameters:\n    - length: The number of bytes.\n- returns: A `DispatchData` value containing the bytes from this `ByteBuffer` or `nil` if there aren't at least `length` bytes readable."},{"p":["ByteBuffer","writeDispatchData(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeDispatchData",7],["(",17],["_",1],[" ",17],["dispatchData",2],[": ",17],["DispatchData",18,1118],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeDispatchData",7],["(",17],["DispatchData",18],[") -> ",17],["Int",18]],"d":"Write `dispatchData` into this `ByteBuffer`, moving the writer index forward appropriately.\n\n- parameters:\n    - dispatchData: The `DispatchData` instance to write to the `ByteBuffer`.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeStaticString(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeStaticString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["StaticString",18,1367],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeStaticString",7],["(",17],["StaticString",18],[") -> ",17],["Int",18]],"d":"Write the static `string` into this `ByteBuffer` using UTF-8 encoding, moving the writer index forward appropriately.\n\n- parameters:\n    - string: The string to write.\n- returns: The number of bytes written."},{"p":["ByteBuffer","readLengthPrefixed(endianness:as:readMessage:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readLengthPrefixed",7],["<",17],["Integer",0],[", ",17],["Result",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[" ",17],["integer",2],[": ",17],["Integer",18],[".Type, ",17],["readMessage",1],[": (",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["Result",18],["?) ",17],["throws",12],[" -> ",17],["Result",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readLengthPrefixed",7],["<",17],["Integer",0],[", ",17],["Result",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, ",17],["readMessage",1],[": (",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["Result",18],["?) ",17],["throws",12],[" -> ",17],["Result",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",1369]],"g":[["Integer",0,0],["Result",1,0]],"d":"Reads an `Integer` from `self`, reads a slice of that length and passes it to `readMessage`. \nIt is checked that `readMessage` returns a non-nil value.\n\nThe `readerIndex` is **not** moved forward if the length prefix could not be read or `self` does not contain enough bytes. Otherwise `readerIndex` is moved forward even if `readMessage` throws or returns nil.\n- Parameters:\n    - endianness: The endianness of the length prefix `Integer` in this `ByteBuffer` (defaults to big endian).\n    - integer: the desired `Integer` type used to read the length prefix\n    - readMessage: A closure that takes a `ByteBuffer` slice which contains the message after the length prefix\n- Throws: if `readMessage` returns nil\n- Returns: `nil` if the length prefix could not be read, \n           the length prefix is negative or\n           the buffer does not contain enough bytes to read a message of this length.\n           Otherwise the result of `readMessage`."},{"p":["ByteBuffer","withVeryUnsafeBytes(_:)"],"f":[["func",12],[" ",17],["withVeryUnsafeBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withVeryUnsafeBytes",7],["<",17],["T",0],[">((",17],["UnsafeRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"This vends a pointer to the storage of the `ByteBuffer`. It's marked as _very unsafe_ because it might contain\nuninitialised memory and it's undefined behaviour to read it. In most cases you should use `withUnsafeReadableBytes`.\n\n- warning: Do not escape the pointer from the closure for later use."},{"p":["ByteBuffer","writeLengthPrefixed(endianness:as:writeMessage:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeLengthPrefixed",7],["<",17],["Integer",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[" ",17],["integer",2],[": ",17],["Integer",18],[".Type, ",17],["writeMessage",1],[": (",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeLengthPrefixed",7],["<",17],["Integer",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, ",17],["writeMessage",1],[": (",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"c":[["Integer",1,"FixedWidthInteger",1369]],"g":[["Integer",0,0]],"d":"Prefixes a message written by `writeMessage` with the number of bytes written as an `Integer`.\n- Parameters:\n    - endianness: The endianness of the length prefix `Integer` in this `ByteBuffer` (defaults to big endian).\n    - integer: the desired `Integer` type used to write the length prefix\n    - writeMessage: A closure that takes a buffer, writes a message to it and returns the number of bytes written\n- Throws: If the number of bytes written during `writeMessage` can not be exactly represented as the given `Integer` i.e. if the number of bytes written is greater than `Integer.max`\n- Returns: Number of total bytes written"},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[", ",17],["T15",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T14",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T15",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[", ",17],["T15",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369],["T14",1,"FixedWidthInteger",1369],["T15",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0],["T14",13,0],["T15",14,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T14",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369],["T14",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0],["T14",13,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[").Type = (T1, T2, T3, T4, T5, T6, T7).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type = (T1, T2, T3, T4, T5, T6).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type = (T1, T2, T3, T4, T5).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type = (T1, T2, T3, T4).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type = (T1, T2, T3).self) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0]]},{"p":["ByteBuffer","readMultipleIntegers(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[").Type = (T1, T2).self) -> (",17],["T1",18],[", ",17],["T2",18],[")? ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[").Type) -> (",17],["T1",18],[", ",17],["T2",18],[")?",17]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0]]},{"p":["ByteBuffer","modifyIfUniquelyOwned(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["modifyIfUniquelyOwned",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["modifyIfUniquelyOwned",7],["<",17],["T",0],[">((",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Modify this `ByteBuffer` if this `ByteBuffer` is known to uniquely own its storage.\n\nIn some cases it is possible that code is holding a `ByteBuffer` that has been shared with other\nparts of the code, and may want to mutate that `ByteBuffer`. In some cases it may be worth modifying\na `ByteBuffer` only if that `ByteBuffer` is guaranteed to not perform a copy-on-write operation to do\nso, for example when a different buffer could be used or more cheaply allocated instead.\n\nThis function will execute the provided block only if it is guaranteed to be able to avoid a copy-on-write\noperation. If it cannot execute the block the returned value will be `nil`.\n\n- parameters:\n    - body: The modification operation to execute, with this `ByteBuffer` passed `inout` as an argument.\n- returns: The return value of `body`."},{"p":["ByteBuffer","writeMultipleIntegers(_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[").Type = (T1, T2).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type = (T1, T2, T3).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type = (T1, T2, T3, T4).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type = (T1, T2, T3, T4, T5).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type = (T1, T2, T3, T4, T5, T6).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[").Type = (T1, T2, T3, T4, T5, T6, T7).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["_",1],[" ",17],["value11",2],[": ",17],["T11",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["_",1],[" ",17],["value11",2],[": ",17],["T11",18],[", ",17],["_",1],[" ",17],["value12",2],[": ",17],["T12",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["_",1],[" ",17],["value11",2],[": ",17],["T11",18],[", ",17],["_",1],[" ",17],["value12",2],[": ",17],["T12",18],[", ",17],["_",1],[" ",17],["value13",2],[": ",17],["T13",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["_",1],[" ",17],["value11",2],[": ",17],["T11",18],[", ",17],["_",1],[" ",17],["value12",2],[": ",17],["T12",18],[", ",17],["_",1],[" ",17],["value13",2],[": ",17],["T13",18],[", ",17],["_",1],[" ",17],["value14",2],[": ",17],["T14",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T14",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369],["T14",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0],["T14",13,0]]},{"p":["ByteBuffer","writeMultipleIntegers(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[", ",17],["T15",0],[">(",17],["_",1],[" ",17],["value1",2],[": ",17],["T1",18],[", ",17],["_",1],[" ",17],["value2",2],[": ",17],["T2",18],[", ",17],["_",1],[" ",17],["value3",2],[": ",17],["T3",18],[", ",17],["_",1],[" ",17],["value4",2],[": ",17],["T4",18],[", ",17],["_",1],[" ",17],["value5",2],[": ",17],["T5",18],[", ",17],["_",1],[" ",17],["value6",2],[": ",17],["T6",18],[", ",17],["_",1],[" ",17],["value7",2],[": ",17],["T7",18],[", ",17],["_",1],[" ",17],["value8",2],[": ",17],["T8",18],[", ",17],["_",1],[" ",17],["value9",2],[": ",17],["T9",18],[", ",17],["_",1],[" ",17],["value10",2],[": ",17],["T10",18],[", ",17],["_",1],[" ",17],["value11",2],[": ",17],["T11",18],[", ",17],["_",1],[" ",17],["value12",2],[": ",17],["T12",18],[", ",17],["_",1],[" ",17],["value13",2],[": ",17],["T13",18],[", ",17],["_",1],[" ",17],["value14",2],[": ",17],["T14",18],[", ",17],["_",1],[" ",17],["value15",2],[": ",17],["T15",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[").Type = (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15).self) -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["T1",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T2",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T3",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T4",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T5",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T6",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T7",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T8",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T9",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T10",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T11",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T12",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T13",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T14",18],[" : ",17],["FixedWidthInteger",18,1369],[", ",17],["T15",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["writeMultipleIntegers",7],["<",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[", ",17],["T7",0],[", ",17],["T8",0],[", ",17],["T9",0],[", ",17],["T10",0],[", ",17],["T11",0],[", ",17],["T12",0],[", ",17],["T13",0],[", ",17],["T14",0],[", ",17],["T15",0],[">(",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": (",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[", ",17],["T7",18],[", ",17],["T8",18],[", ",17],["T9",18],[", ",17],["T10",18],[", ",17],["T11",18],[", ",17],["T12",18],[", ",17],["T13",18],[", ",17],["T14",18],[", ",17],["T15",18],[").Type) -> ",17],["Int",18]],"c":[["T1",1,"FixedWidthInteger",1369],["T2",1,"FixedWidthInteger",1369],["T3",1,"FixedWidthInteger",1369],["T4",1,"FixedWidthInteger",1369],["T5",1,"FixedWidthInteger",1369],["T6",1,"FixedWidthInteger",1369],["T7",1,"FixedWidthInteger",1369],["T8",1,"FixedWidthInteger",1369],["T9",1,"FixedWidthInteger",1369],["T10",1,"FixedWidthInteger",1369],["T11",1,"FixedWidthInteger",1369],["T12",1,"FixedWidthInteger",1369],["T13",1,"FixedWidthInteger",1369],["T14",1,"FixedWidthInteger",1369],["T15",1,"FixedWidthInteger",1369]],"g":[["T1",0,0],["T2",1,0],["T3",2,0],["T4",3,0],["T5",4,0],["T6",5,0],["T7",6,0],["T8",7,0],["T9",8,0],["T10",9,0],["T11",10,0],["T12",11,0],["T13",12,0],["T14",13,0],["T15",14,0]]},{"p":["ByteBuffer","getLengthPrefixedSlice(at:endianness:as:)"],"f":[["func",12],[" ",17],["getLengthPrefixedSlice",7],["<",17],["Integer",0],[">(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[" ",17],["integer",2],[": ",17],["Integer",18],[".Type) -> ",17],["ByteBuffer",18,60],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["getLengthPrefixedSlice",7],["<",17],["Integer",0],[">(",17],["at",1],[": ",17],["Int",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) -> ",17],["ByteBuffer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",1369]],"g":[["Integer",0,0]],"d":"Gets an `Integer` from `self` and gets a slice of that length from `self` and returns it.\n\n- Parameters:\n    - endianness: The endianness of the length prefix `Integer` in this `ByteBuffer` (defaults to big endian).\n    - integer: the desired `Integer` type used to get the length prefix\n- Returns: `nil` if the length prefix could not be read, \n           the length prefix is negative or\n           the buffer does not contain enough bytes to read a message of this length.\n           Otherwise the message after the length prefix."},{"p":["ByteBuffer","getNullTerminatedString(at:)"],"f":[["func",12],[" ",17],["getNullTerminatedString",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["String",18,1173],["?",17]],"s":[["func",12],[" ",17],["getNullTerminatedString",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["String",18],["?",17]],"d":"Get the string at `index` from this `ByteBuffer` decoding using the UTF-8 encoding. Does not move the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index into `ByteBuffer` containing the null terminated string of interest.\n- returns: A `String` value deserialized from this `ByteBuffer` or `nil` if there isn't a complete null-terminated string,\n           including null-terminator, in the readable bytes after `index` in the buffer"},{"p":["ByteBuffer","readLengthPrefixedSlice(endianness:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readLengthPrefixedSlice",7],["<",17],["Integer",0],[">(",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[" ",17],["integer",2],[": ",17],["Integer",18],[".Type) -> ",17],["ByteBuffer",18,60],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["readLengthPrefixedSlice",7],["<",17],["Integer",0],[">(",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) -> ",17],["ByteBuffer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",1369]],"g":[["Integer",0,0]],"d":"Reads an `Integer` from `self` and reads a slice of that length from `self` and returns it.\n\nIf nil is returned, `readerIndex` is **not** moved forward.\n- Parameters:\n    - endianness: The endianness of the length prefix `Integer` in this `ByteBuffer` (defaults to big endian).\n    - integer: the desired `Integer` type used to read the length prefix\n- Returns: `nil` if the length prefix could not be read, \n           the length prefix is negative or\n           the buffer does not contain enough bytes to read a message of this length.\n           Otherwise the message after the length prefix."},{"p":["ByteBuffer","setNullTerminatedString(_:at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setNullTerminatedString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,1173],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setNullTerminatedString",7],["(",17],["String",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Write `string` null terminated into this `ByteBuffer` at `index` using UTF-8 encoding. Does not move the writer index.\n\n- parameters:\n    - string: The string to write.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","withUnsafeReadableBytes(_:)"],"f":[["func",12],[" ",17],["withUnsafeReadableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeReadableBytes",7],["<",17],["T",0],[">((",17],["UnsafeRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields a buffer pointer containing this `ByteBuffer`'s readable bytes.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes.\n- returns: The value returned by `body`."},{"p":["ByteBuffer","readNullTerminatedString()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readNullTerminatedString",7],["() -> ",17],["String",18,1173],["?",17]],"s":[["func",12],[" ",17],["readNullTerminatedString",7],["() -> ",17],["String",18],["?",17]],"d":"Read a null terminated string off this `ByteBuffer`, decoding it as `String` using the UTF-8 encoding. Move the reader index\nforward by the string's length and its null terminator.\n\n- returns: A `String` value deserialized from this `ByteBuffer` or `nil` if there isn't a complete null-terminated string,\n           including null-terminator, in the readable bytes of the buffer"},{"p":["ByteBuffer","writeNullTerminatedString(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeNullTerminatedString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,1173],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeNullTerminatedString",7],["(",17],["String",18],[") -> ",17],["Int",18]],"d":"Write `string` into this `ByteBuffer` null terminated using UTF-8 encoding, moving the writer index forward appropriately.\n\n- parameters:\n    - string: The string to write.\n- returns: The number of bytes written."},{"p":["ByteBuffer","withVeryUnsafeMutableBytes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["withVeryUnsafeMutableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withVeryUnsafeMutableBytes",7],["<",17],["T",0],[">((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"This vends a pointer to the storage of the `ByteBuffer`. It's marked as _very unsafe_ because it might contain\nuninitialised memory and it's undefined behaviour to read it. In most cases you should use `withUnsafeMutableWritableBytes`.\n\n- warning: Do not escape the pointer from the closure for later use."},{"p":["ByteBuffer","readWithUnsafeReadableBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["readWithUnsafeReadableBytes",7],["(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[") ",17],["rethrows",12],[" -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["readWithUnsafeReadableBytes",7],["((",17],["UnsafeRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["Int",18],[") ",17],["rethrows",12],[" -> ",17],["Int",18]],"d":"Yields an immutable buffer pointer containing this `ByteBuffer`'s readable bytes. Will move the reader index\nby the number of bytes returned by `body`.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and returns the number of bytes it processed.\n- returns: The number of bytes read."},{"p":["ByteBuffer","readWithUnsafeReadableBytes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readWithUnsafeReadableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[") ",17],["throws",12],[" -> (",17],["Int",18,1235],[", ",17],["T",18],[")) ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["readWithUnsafeReadableBytes",7],["<",17],["T",0],[">((",17],["UnsafeRawBufferPointer",18],[") ",17],["throws",12],[" -> (",17],["Int",18],[", ",17],["T",18],[")) ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields an immutable buffer pointer containing this `ByteBuffer`'s readable bytes. Will move the reader index\nby the number of bytes `body` returns in the first tuple component.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and returns the number of bytes it processed along with some other value.\n- returns: The value `body` returned in the second tuple component."},{"p":["ByteBuffer","writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeWithUnsafeMutableBytes",7],["(",17],["minimumWritableBytes",1],[": ",17],["Int",18,1235],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[") ",17],["rethrows",12],[" -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeWithUnsafeMutableBytes",7],["(",17],["minimumWritableBytes",1],[": ",17],["Int",18],[", (",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["Int",18],[") ",17],["rethrows",12],[" -> ",17],["Int",18]],"d":"This vends a pointer of the `ByteBuffer` at the `writerIndex` after ensuring that the buffer has at least `minimumWritableBytes` of writable bytes available.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - minimumWritableBytes: The number of writable bytes to reserve capacity for before vending the `ByteBuffer` pointer to `body`.\n    - body: The closure that will accept the yielded bytes and return the number of bytes written.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeWithUnsafeMutableBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeWithUnsafeMutableBytes",7],["(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[") ",17],["rethrows",12],[" -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["writeWithUnsafeMutableBytes",7],["((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["Int",18],[") ",17],["rethrows",12],[" -> ",17],["Int",18]],"a":{"a":{"d":true,"m":"please use writeWithUnsafeMutableBytes(minimumWritableBytes:_:) instead to ensure sufficient write capacity."}}},{"p":["ByteBuffer","withUnsafeMutableReadableBytes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["withUnsafeMutableReadableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeMutableReadableBytes",7],["<",17],["T",0],[">((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields a mutable buffer pointer containing this `ByteBuffer`'s readable bytes. You may modify those bytes.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes.\n- returns: The value returned by `body`."},{"p":["ByteBuffer","withUnsafeMutableWritableBytes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["withUnsafeMutableWritableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeMutableWritableBytes",7],["<",17],["T",0],[">((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields the bytes currently writable (`bytesWritable` = `capacity` - `writerIndex`). Before reading those bytes you must first\nwrite to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.\n\n- note: In almost all cases you should use `writeWithUnsafeMutableBytes` which will move the write pointer instead of this method\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and return the number of bytes written.\n- returns: The number of bytes written."},{"p":["ByteBuffer","readWithUnsafeMutableReadableBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["readWithUnsafeMutableReadableBytes",7],["(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> ",17],["Int",18,1235],[") ",17],["rethrows",12],[" -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["readWithUnsafeMutableReadableBytes",7],["((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["Int",18],[") ",17],["rethrows",12],[" -> ",17],["Int",18]],"d":"Yields a mutable buffer pointer containing this `ByteBuffer`'s readable bytes. You may modify the yielded bytes.\nWill move the reader index by the number of bytes returned by `body` but leave writer index as it was.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and returns the number of bytes it processed.\n- returns: The number of bytes read."},{"p":["ByteBuffer","readWithUnsafeMutableReadableBytes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readWithUnsafeMutableReadableBytes",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeMutableRawBufferPointer",18,1352],[") ",17],["throws",12],[" -> (",17],["Int",18,1235],[", ",17],["T",18],[")) ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["readWithUnsafeMutableReadableBytes",7],["<",17],["T",0],[">((",17],["UnsafeMutableRawBufferPointer",18],[") ",17],["throws",12],[" -> (",17],["Int",18],[", ",17],["T",18],[")) ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields a mutable buffer pointer containing this `ByteBuffer`'s readable bytes. You may modify the yielded bytes.\nWill move the reader index by the number of bytes `body` returns in the first tuple component but leave writer index as it was.\n\n- warning: Do not escape the pointer from the closure for later use.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and returns the number of bytes it processed along with some other value.\n- returns: The value `body` returned in the second tuple component."},{"p":["ByteBuffer","set(buffer:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["set",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["set",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"a":{"a":{"d":true,"r":"setBuffer(_:at:)"}},"d":"Copy `buffer`'s readable bytes into this `ByteBuffer` starting at `index`. Does not move any of the reader or writer indices.\n\n- parameters:\n    - buffer: The `ByteBuffer` to copy.\n    - index: The index for the first byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","withVeryUnsafeBytesWithStorageManagement(_:)"],"f":[["func",12],[" ",17],["withVeryUnsafeBytesWithStorageManagement",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[", ",17],["Unmanaged",18,1412],["<",17],["AnyObject",18,1398],[">) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withVeryUnsafeBytesWithStorageManagement",7],["<",17],["T",0],[">((",17],["UnsafeRawBufferPointer",18],[", ",17],["Unmanaged",18],["<",17],["AnyObject",18],[">) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"See `withUnsafeReadableBytesWithStorageManagement` and `withVeryUnsafeBytes`."},{"p":["ByteBuffer","withUnsafeReadableBytesWithStorageManagement(_:)"],"f":[["func",12],[" ",17],["withUnsafeReadableBytesWithStorageManagement",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[", ",17],["Unmanaged",18,1412],["<",17],["AnyObject",18,1398],[">) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeReadableBytesWithStorageManagement",7],["<",17],["T",0],[">((",17],["UnsafeRawBufferPointer",18],[", ",17],["Unmanaged",18],["<",17],["AnyObject",18],[">) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Yields a buffer pointer containing this `ByteBuffer`'s readable bytes. You may hold a pointer to those bytes\neven after the closure returned iff you model the lifetime of those bytes correctly using the `Unmanaged`\ninstance. If you don't require the pointer after the closure returns, use `withUnsafeReadableBytes`.\n\nIf you escape the pointer from the closure, you _must_ call `storageManagement.retain()` to get ownership to\nthe bytes and you also must call `storageManagement.release()` if you no longer require those bytes. Calls to\n`retain` and `release` must be balanced.\n\n- parameters:\n    - body: The closure that will accept the yielded bytes and the `storageManagement`.\n- returns: The value returned by `body`."},{"p":["ByteBuffer","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,1393],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"d":"The hash value for the readable bytes.","o":1121},{"p":["ByteBuffer","clear(minimumCapacity:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["clear",7],["(",17],["minimumCapacity",1],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["clear",7],["(",17],["minimumCapacity",1],[": ",17],["Int",18],[")",17]],"d":"Set both reader index and writer index to `0`. This will reset the state of this `ByteBuffer` to the state\nof a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a `ByteBuffer`\nfor a new use-case.\n\n- note: This method will allocate if the underlying storage is referenced by another `ByteBuffer`. Even if an\n        allocation is necessary this will be cheaper as the copy of the storage is elided.\n\n- parameters:\n    - minimumCapacity: The minimum capacity that will be (re)allocated for this buffer"},{"p":["ByteBuffer","clear(minimumCapacity:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["clear",7],["(",17],["minimumCapacity",1],[": ",17],["UInt32",18,1395],[")",17]],"s":[["func",12],[" ",17],["clear",7],["(",17],["minimumCapacity",1],[": ",17],["UInt32",18],[")",17]],"a":{"a":{"d":true,"m":"Use an `Int` as the argument"}},"d":"Set both reader index and writer index to `0`. This will reset the state of this `ByteBuffer` to the state\nof a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a `ByteBuffer`\nfor a new use-case.\n\n- note: This method will allocate if the underlying storage is referenced by another `ByteBuffer`. Even if an\n        allocation is necessary this will be cheaper as the copy of the storage is elided.\n\n- parameters:\n    - minimumCapacity: The minimum capacity that will be (re)allocated for this buffer"},{"p":["ByteBuffer","clear()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["clear",7],["()",17]],"s":[["func",12],[" ",17],["clear",7],["()",17]],"d":"Set both reader index and writer index to `0`. This will reset the state of this `ByteBuffer` to the state\nof a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a `ByteBuffer`\nfor a new use-case.\n\n- note: This method will allocate if the underlying storage is referenced by another `ByteBuffer`. Even if an\n        allocation is necessary this will be cheaper as the copy of the storage is elided."},{"p":["ByteBuffer","slice()"],"f":[["func",12],[" ",17],["slice",7],["() -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["slice",7],["() -> ",17],["ByteBuffer",18]],"d":"Slice the readable bytes off this `ByteBuffer` without modifying the reader index. This method will return a\n`ByteBuffer` sharing the underlying storage with the `ByteBuffer` the method was invoked on. The returned\n`ByteBuffer` will contain the bytes in the range `readerIndex..<writerIndex` of the original `ByteBuffer`.\n\n- note: Because `ByteBuffer` implements copy-on-write a copy of the storage will be automatically triggered when either of the `ByteBuffer`s sharing storage is written to.\n\n- returns: A `ByteBuffer` sharing storage containing the readable bytes only."},{"p":["ByteBuffer","getBytes(at:length:)"],"f":[["func",12],[" ",17],["getBytes",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") -> [",17],["UInt8",18,1392],["]?",17]],"s":[["func",12],[" ",17],["getBytes",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> [",17],["UInt8",18],["]?",17]],"d":"Get `length` bytes starting at `index` and return the result as `[UInt8]`. This will not change the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index of the bytes of interest into the `ByteBuffer`.\n    - length: The number of bytes of interest.\n- returns: A `[UInt8]` value containing the bytes of interest or `nil` if the bytes `ByteBuffer` are not readable."},{"p":["ByteBuffer","getSlice(at:length:)"],"f":[["func",12],[" ",17],["getSlice",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["ByteBuffer",18,60],["?",17]],"s":[["func",12],[" ",17],["getSlice",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> ",17],["ByteBuffer",18],["?",17]],"d":"Returns a slice of size `length` bytes, starting at `index`. The `ByteBuffer` this is invoked on and the\n`ByteBuffer` returned will share the same underlying storage. However, the byte at `index` in this `ByteBuffer`\nwill correspond to index `0` in the returned `ByteBuffer`.\nThe `readerIndex` of the returned `ByteBuffer` will be `0`, the `writerIndex` will be `length`.\n\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The index the requested slice starts at.\n    - length: The length of the requested slice.\n- returns: A `ByteBuffer` containing the selected bytes as readable bytes or `nil` if the selected bytes were\n           not readable in the initial `ByteBuffer`."},{"p":["ByteBuffer","setBytes(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setBytes",7],["(",17],["_",1],[" ",17],["bytes",2],[": ",17],["UnsafeRawBufferPointer",18,1223],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setBytes",7],["(",17],["UnsafeRawBufferPointer",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Copy `bytes` into the `ByteBuffer` at `index`. Does not move the writer index."},{"p":["ByteBuffer","setBytes(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setBytes",7],["<",17],["Bytes",0],[">(",17],["_",1],[" ",17],["bytes",2],[": ",17],["Bytes",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Sequence",18,1174],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,1392]],"s":[["func",12],[" ",17],["setBytes",7],["<",17],["Bytes",0],[">(",17],["Bytes",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"c":[["Bytes",1,"Sequence",1174],["Bytes.Element",2,"UInt8",1392]],"g":[["Bytes",0,0]],"d":"Copy the collection of `bytes` into the `ByteBuffer` at `index`. Does not move the writer index."},{"p":["ByteBuffer","copyBytes(at:to:length:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["copyBytes",7],["(",17],["at",1],[" ",17],["fromIndex",2],[": ",17],["Int",18,1235],[", ",17],["to",1],[" ",17],["toIndex",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") ",17],["throws",12],[" -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["copyBytes",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["to",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"d":"Copies `length` `bytes` starting at the `fromIndex` to `toIndex`. Does not move the writer index.\n\n- Note: Overlapping ranges, for example `copyBytes(at: 1, to: 2, length: 5)` are allowed.\n- Precondition: The range represented by `fromIndex` and `length` must be readable bytes,\n    that is: `fromIndex >= readerIndex` and `fromIndex + length <= writerIndex`.\n- Parameter fromIndex: The index of the first byte to copy.\n- Parameter toIndex: The index into to which the first byte will be copied.\n- Parameter length: The number of bytes which should be copied."},{"p":["ByteBuffer","getString(at:length:)"],"f":[["func",12],[" ",17],["getString",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["String",18,1173],["?",17]],"s":[["func",12],[" ",17],["getString",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> ",17],["String",18],["?",17]],"d":"Get the string at `index` from this `ByteBuffer` decoding using the UTF-8 encoding. Does not move the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index into `ByteBuffer` containing the string of interest.\n    - length: The number of bytes making up the string.\n- returns: A `String` value containing the UTF-8 decoded selected bytes from this `ByteBuffer` or `nil` if\n           the requested bytes are not readable."},{"p":["ByteBuffer","readBytes(length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readBytes",7],["(",17],["length",1],[": ",17],["Int",18,1235],[") -> [",17],["UInt8",18,1392],["]?",17]],"s":[["func",12],[" ",17],["readBytes",7],["(",17],["length",1],[": ",17],["Int",18],[") -> [",17],["UInt8",18],["]?",17]],"d":"Read `length` bytes off this `ByteBuffer`, move the reader index forward by `length` bytes and return the result\nas `[UInt8]`.\n\n- parameters:\n    - length: The number of bytes to be read from this `ByteBuffer`.\n- returns: A `[UInt8]` value containing `length` bytes or `nil` if there aren't at least `length` bytes readable."},{"p":["ByteBuffer","readSlice(length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readSlice",7],["(",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["ByteBuffer",18,60],["?",17]],"s":[["func",12],[" ",17],["readSlice",7],["(",17],["length",1],[": ",17],["Int",18],[") -> ",17],["ByteBuffer",18],["?",17]],"d":"Slice `length` bytes off this `ByteBuffer` and move the reader index forward by `length`.\nIf enough bytes are readable the `ByteBuffer` returned by this method will share the underlying storage with\nthe `ByteBuffer` the method was invoked on.\nThe returned `ByteBuffer` will contain the bytes in the range `readerIndex..<(readerIndex + length)` of the\noriginal `ByteBuffer`.\nThe `readerIndex` of the returned `ByteBuffer` will be `0`, the `writerIndex` will be `length`.\n\n- note: Because `ByteBuffer` implements copy-on-write a copy of the storage will be automatically triggered when either of the `ByteBuffer`s sharing storage is written to.\n\n- parameters:\n    - length: The number of bytes to slice off.\n- returns: A `ByteBuffer` sharing storage containing `length` bytes or `nil` if the not enough bytes were readable."},{"p":["ByteBuffer","setString(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,1173],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setString",7],["(",17],["String",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"d":"Write `string` into this `ByteBuffer` at `index` using UTF-8 encoding. Does not move the writer index.\n\n- parameters:\n    - string: The string to write.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","viewBytes(at:length:)"],"f":[["func",12],[" ",17],["viewBytes",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,1235],[", ",17],["length",1],[": ",17],["Int",18,1235],[") -> ",17],["ByteBufferView",18,76],["?",17]],"s":[["func",12],[" ",17],["viewBytes",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> ",17],["ByteBufferView",18],["?",17]],"d":"Returns a view into some portion of the readable bytes of a `ByteBuffer`.\n\n- parameters:\n  - index: The index the view should start at\n  - length: The length of the view (in bytes)\n- returns: A view into a portion of a `ByteBuffer` or `nil` if the requested bytes were not readable."},{"p":["FileRegion","moveReaderIndex(forwardBy:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[" ",17],["offset",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[": ",17],["Int",18],[")",17]],"d":"Move the readerIndex forward by `offset`."},{"p":["ChannelCore","channelRead0(_:)"],"f":[["func",12],[" ",17],["channelRead0",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["channelRead0",7],["(",17],["NIOAny",18],[")",17]],"d":"Called when data was read from the `Channel` but it was not consumed by any `ChannelInboundHandler` in the `ChannelPipeline`.\n\n- parameters:\n    - data: The data that was read, wrapped in a `NIOAny`."},{"p":["ChannelCore","errorCaught0(error:)"],"f":[["func",12],[" ",17],["errorCaught0",7],["(",17],["error",1],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["errorCaught0",7],["(",17],["error",1],[": ",17],["Error",18],[")",17]],"d":"Called when an inbound error was encountered but was not consumed by any `ChannelInboundHandler` in the `ChannelPipeline`.\n\n- parameters:\n    - error: The `Error` that was encountered."},{"p":["ChannelCore","localAddress0()"],"f":[["func",12],[" ",17],["localAddress0",7],["() ",17],["throws",12],[" -> ",17],["SocketAddress",18,44]],"s":[["func",12],[" ",17],["localAddress0",7],["() ",17],["throws",12],[" -> ",17],["SocketAddress",18]],"d":"Returns the local bound `SocketAddress`."},{"p":["ChannelCore","remoteAddress0()"],"f":[["func",12],[" ",17],["remoteAddress0",7],["() ",17],["throws",12],[" -> ",17],["SocketAddress",18,44]],"s":[["func",12],[" ",17],["remoteAddress0",7],["() ",17],["throws",12],[" -> ",17],["SocketAddress",18]],"d":"Return the connected `SocketAddress`."},{"p":["ChannelCore","triggerUserOutboundEvent0(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent0",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent0",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Trigger an outbound event.\n\n- parameters:\n    - event: The triggered event.\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","registerAlreadyConfigured0(promise:)"],"f":[["func",12],[" ",17],["registerAlreadyConfigured0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["registerAlreadyConfigured0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Register channel as already connected or bound socket.\n- parameters:\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","bind0(to:promise:)"],"f":[["func",12],[" ",17],["bind0",7],["(",17],["to",1],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind0",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Bind to a `SocketAddress`.\n\n- parameters:\n    - to: The `SocketAddress` to which we should bind the `Channel`.\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","read0()"],"f":[["func",12],[" ",17],["read0",7],["()",17]],"s":[["func",12],[" ",17],["read0",7],["()",17]],"d":"Request that the `Channel` perform a read when data is ready."},{"p":["ChannelCore","close0(error:mode:promise:)"],"f":[["func",12],[" ",17],["close0",7],["(",17],["error",1],[": ",17],["Error",18,1388],[", ",17],["mode",1],[": ",17],["CloseMode",18,59],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close0",7],["(",17],["error",1],[": ",17],["Error",18],[", ",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Close the `Channel`.\n\n- parameters:\n    - error: The `Error` which will be used to fail any pending writes.\n    - mode: The `CloseMode` to apply.\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","flush0()"],"f":[["func",12],[" ",17],["flush0",7],["()",17]],"s":[["func",12],[" ",17],["flush0",7],["()",17]],"d":"Try to flush out all previous written messages that are pending."},{"p":["ChannelCore","write0(_:promise:)"],"f":[["func",12],[" ",17],["write0",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write0",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Write the given data to the outbound buffer.\n\n- parameters:\n    - data: The data to write, wrapped in a `NIOAny`.\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","connect0(to:promise:)"],"f":[["func",12],[" ",17],["connect0",7],["(",17],["to",1],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect0",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Connect to a `SocketAddress`.\n\n- parameters:\n    - to: The `SocketAddress` to which we should connect the `Channel`.\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","register0(promise:)"],"f":[["func",12],[" ",17],["register0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Register with the `EventLoop` to receive I/O notifications.\n\n- parameters:\n    - promise: The `EventLoopPromise` which should be notified once the operation completes, or nil if no notification should take place."},{"p":["ChannelCore","unwrapData(_:as:)"],"f":[["func",12],[" ",17],["unwrapData",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["T",18]],"s":[["func",12],[" ",17],["unwrapData",7],["<",17],["T",0],[">(",17],["NIOAny",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18]],"g":[["T",0,1]],"d":"Unwraps the given `NIOAny` as a specific concrete type.\n\nThis method is intended for use when writing custom `ChannelCore` implementations.\nThis can safely be called in methods like `write0` to extract data from the `NIOAny`\nprovided in those cases.\n\nNote that if the unwrap fails, this will cause a runtime trap. `ChannelCore`\nimplementations should be concrete about what types they support writing. If multiple\ntypes are supported, consider using a tagged union to store the type information like\nNIO's own `IOData`, which will minimise the amount of runtime type checking.\n\n- parameters:\n    - data: The `NIOAny` to unwrap.\n    - as: The type to extract from the `NIOAny`.\n- returns: The content of the `NIOAny`."},{"p":["ChannelCore","tryUnwrapData(_:as:)"],"f":[["func",12],[" ",17],["tryUnwrapData",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["as",1],[": ",17],["T",18],[".Type = T.self) -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["tryUnwrapData",7],["<",17],["T",0],[">(",17],["NIOAny",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"g":[["T",0,1]],"d":"Attempts to unwrap the given `NIOAny` as a specific concrete type.\n\nThis method is intended for use when writing custom `ChannelCore` implementations.\nThis can safely be called in methods like `write0` to extract data from the `NIOAny`\nprovided in those cases.\n\nIf the unwrap fails, this will return `nil`. `ChannelCore` implementations should almost\nalways support only one runtime type, so in general they should avoid using this and prefer\nusing `unwrapData` instead. This method exists for rare use-cases where tolerating type\nmismatches is acceptable.\n\n- parameters:\n    - data: The `NIOAny` to unwrap.\n    - as: The type to extract from the `NIOAny`.\n- returns: The content of the `NIOAny`, or `nil` if the type is incorrect.\n- warning: If you are implementing a `ChannelCore`, you should use `unwrapData` unless you\n    are doing something _extremely_ unusual."},{"p":["ChannelCore","removeHandlers(channel:)"],"f":[["func",12],[" ",17],["removeHandlers",7],["(",17],["channel",1],[": ",17],["Channel",18,28],[")",17]],"s":[["func",12],[" ",17],["removeHandlers",7],["(",17],["channel",1],[": ",17],["Channel",18],[")",17]],"a":{"a":{"d":true,"r":"removeHandlers(pipeline:)"}},"d":"Removes the `ChannelHandler`s from the `ChannelPipeline` belonging to `channel`, and\ncloses that `ChannelPipeline`.\n\nThis method is intended for use when writing custom `ChannelCore` implementations.\nThis can be called from `close0` to tear down the `ChannelPipeline` when closure is\ncomplete.\n\n- parameters:\n    - channel: The `Channel` whose `ChannelPipeline` will be closed."},{"p":["ChannelCore","removeHandlers(pipeline:)"],"f":[["func",12],[" ",17],["removeHandlers",7],["(",17],["pipeline",1],[": ",17],["ChannelPipeline",18,124],[")",17]],"s":[["func",12],[" ",17],["removeHandlers",7],["(",17],["pipeline",1],[": ",17],["ChannelPipeline",18],[")",17]],"d":"Removes the `ChannelHandler`s from the `ChannelPipeline` `pipeline`, and\ncloses that `ChannelPipeline`.\n\nThis method is intended for use when writing custom `ChannelCore` implementations.\nThis can be called from `close0` to tear down the `ChannelPipeline` when closure is\ncomplete.\n\n- parameters:\n    - pipeline: The `ChannelPipline` to be closed."},{"p":["RepeatedTask","cancel(promise:)"],"f":[["func",12],[" ",17],["cancel",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">? = nil)",17]],"s":[["func",12],[" ",17],["cancel",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Try to cancel the execution of the repeated task.\n\nWhether the execution of the task is immediately canceled depends on whether the execution of a task has already begun.\n This means immediate cancellation is not guaranteed.\n\nThe safest way to cancel is by using the passed reference of `RepeatedTask` inside the task closure.\n\nIf the promise parameter is not `nil`, the passed promise is fulfilled when cancellation is complete.\nPassing a promise does not prevent fulfillment of any promise provided on original task creation."},{"p":["NIOFileHandle","takeDescriptorOwnership()"],"f":[["func",12],[" ",17],["takeDescriptorOwnership",7],["() ",17],["throws",12],[" -> ",17],["CInt",18,1386]],"s":[["func",12],[" ",17],["takeDescriptorOwnership",7],["() ",17],["throws",12],[" -> ",17],["CInt",18]],"d":"Take the ownership of the underlying file descriptor. This is similar to `close()` but the underlying file\ndescriptor remains open. The caller is responsible for closing the file descriptor by some other means.\n\nAfter calling this, the `NIOFileHandle` cannot be used for anything else and all the operations will throw.\n\n- returns: The underlying file descriptor, now owned by the caller."},{"p":["NIOFileHandle","withUnsafeFileDescriptor(_:)"],"f":[["func",12],[" ",17],["withUnsafeFileDescriptor",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["CInt",18,1386],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeFileDescriptor",7],["<",17],["T",0],[">((",17],["CInt",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"o":669},{"p":["NIOFileHandle","close()"],"f":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"o":670},{"p":["NIOFileHandle","duplicate()"],"f":[["func",12],[" ",17],["duplicate",7],["() ",17],["throws",12],[" -> ",17],["NIOFileHandle",18,123]],"s":[["func",12],[" ",17],["duplicate",7],["() ",17],["throws",12],[" -> ",17],["NIOFileHandle",18]],"d":"Duplicates this `NIOFileHandle`. This means that a new `NIOFileHandle` object with a new underlying file descriptor\nis returned. The caller takes ownership of the returned `NIOFileHandle` and is responsible for closing it.\n\n- warning: The returned `NIOFileHandle` is not fully independent, the seek pointer is shared as documented by `dup(2)`.\n\n- returns: A new `NIOFileHandle` with a fresh underlying file descriptor but shared seek pointer."},{"p":["SocketAddress","withSockAddr(_:)"],"f":[["func",12],[" ",17],["withSockAddr",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafePointer",18,1168],["<",17],["sockaddr",18,1102],[">, ",17],["Int",18,1235],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withSockAddr",7],["<",17],["T",0],[">((",17],["UnsafePointer",18],["<",17],["sockaddr",18],[">, ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Calls the given function with a pointer to a `sockaddr` structure and the associated size\nof that structure."},{"p":["SocketAddress","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,1393],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":1121},{"p":["ByteBufferView","replaceSubrange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["_",1],[" ",17],["subrange",2],[": ",17],["Range",18,1346],["<",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[">, ",17],["with",1],[" ",17],["newElements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,1241],[", ",17],["C",18],[".",17],["Element",18],[" == ",17],["UInt8",18,1392]],"s":[["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["Range",18],["<",17],["ByteBufferView",18],[".",17],["Index",18],[">, ",17],["with",1],[": ",17],["C",18],[")",17]],"c":[["C",1,"Collection",1241],["C.Element",2,"UInt8",1392]],"g":[["C",0,0]],"o":1304},{"p":["ByteBufferView","withUnsafeBytes(_:)"],"f":[["func",12],[" ",17],["withUnsafeBytes",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeRawBufferPointer",18,1223],[") ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18]],"s":[["func",12],[" ",17],["withUnsafeBytes",7],["<",17],["R",0],[">((",17],["UnsafeRawBufferPointer",18],[") ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18]],"g":[["R",0,0]]},{"p":["ByteBufferView","withContiguousStorageIfAvailable(_:)"],"f":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeBufferPointer",18,1172],["<",17],["UInt8",18,1392],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"s":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">((",17],["UnsafeBufferPointer",18],["<",17],["UInt8",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"g":[["R",0,0]],"o":1178},{"p":["ByteBufferView","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,1393],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"d":"required by `Hashable`","o":1121},{"p":["ByteBufferView","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["ByteBufferView",18,76],[".",17],["Index",18,1043],[") -> ",17],["ByteBufferView",18,76],[".",17],["Index",18,1043]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["ByteBufferView",18],[".",17],["Index",18],[") -> ",17],["ByteBufferView",18],[".",17],["Index",18]],"o":1237},{"p":["ChannelHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Called when this `ChannelHandler` is added to the `ChannelPipeline`.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ChannelHandler` belongs to."},{"p":["ChannelHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Called when this `ChannelHandler` is removed from the `ChannelPipeline`.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ChannelHandler` belongs to."},{"p":["ChannelHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Do nothing by default."},{"p":["ChannelHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Do nothing by default."},{"p":["ChannelOptions","TCPConvenienceOptions","consumeDisableAutoRead()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["consumeDisableAutoRead",7],["() -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ConvenienceOptionValue",18,46],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["consumeDisableAutoRead",7],["() -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ConvenienceOptionValue",18],["<",17],["Void",18],[">",17]],"d":"Caller is consuming the knowledge that disableAutoRead was set or not.\nThe setting will nolonger be set after this call.\n- Returns: If disableAutoRead was set."},{"p":["ChannelOptions","TCPConvenienceOptions","consumeAllowRemoteHalfClosure()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["consumeAllowRemoteHalfClosure",7],["() -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ConvenienceOptionValue",18,46],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["consumeAllowRemoteHalfClosure",7],["() -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ConvenienceOptionValue",18],["<",17],["Void",18],[">",17]],"d":"Caller is consuming the knowledge that allowRemoteHalfClosure was set or not.\nThe setting will nolonger be set after this call.\n- Returns: If allowRemoteHalfClosure was set."},{"p":["ChannelOptions","TCPConvenienceOptions","consumeAllowLocalEndpointReuse()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["consumeAllowLocalEndpointReuse",7],["() -> ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ConvenienceOptionValue",18,46],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["consumeAllowLocalEndpointReuse",7],["() -> ",17],["ChannelOptions",18],[".",17],["Types",18],[".",17],["ConvenienceOptionValue",18],["<",17],["Void",18],[">",17]],"d":"Caller is consuming the knowledge that `allowLocalEndpointReuse` was set or not.\nThe setting will nolonger be set after this call.\n- Returns: If `allowLocalEndpointReuse` was set."},{"p":["ChannelOptions","Storage","applyAllChannelOptions(to:)"],"f":[["func",12],[" ",17],["applyAllChannelOptions",7],["(",17],["to",1],[" ",17],["channel",2],[": ",17],["Channel",18,28],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["applyAllChannelOptions",7],["(",17],["to",1],[": ",17],["Channel",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Apply all stored `ChannelOption`s to `Channel`.\n\n- parameters:\n   - channel: The `Channel` to apply the `ChannelOption`s to\n- returns:\n   - An `EventLoopFuture` that is fulfilled when all `ChannelOption`s have been applied to the `Channel`."},{"p":["ChannelOptions","Storage","append(key:value:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["<",17],["Option",0],[">(",17],["key",1],[" ",17],["newKey",2],[": ",17],["Option",18],[", ",17],["value",1],[" ",17],["newValue",2],[": ",17],["Option",18],[".",17],["Value",18],[") ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["append",7],["<",17],["Option",0],[">(",17],["key",1],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[")",17]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,0]],"d":"Add `Options`, a `ChannelOption` to the `ChannelOptions.Storage`.\n\n- parameters:\n   - key: the key for the option\n   - value: the value for the option"},{"p":["CircularBuffer","removeLast()"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["removeLast",7],["() -> ",17],["Element",18]],"s":[["func",12],[" ",17],["removeLast",7],["() -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes and returns the last element of the `CircularBuffer`.\n\nThe `CircularBuffer` must not be empty.\n\nCalling this method may invalidate all saved indices of this\n`CircularBuffer`. Do not rely on a previously stored index value after\naltering the `CircularBuffer` with any operation that can change its length.\n\n- Returns: The last element of the `CircularBuffer`.\n\n- Complexity: O(*1*)"},{"p":["CircularBuffer","removeLast(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeLast",7],["(",17],["_",1],[" ",17],["k",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["removeLast",7],["(",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Removes the specified number of elements from the end of the\n`CircularBuffer`.\n\nAttempting to remove more elements than exist in the `CircularBuffer`\ntriggers a runtime error.\n\nCalling this method may invalidate all saved indices of this\n`CircularBuffer`. Do not rely on a previously stored index value after\naltering a `CircularBuffer` with any operation that can change its length.\n\n- Parameter k: The number of elements to remove from the `CircularBuffer`.\n  `k` must be greater than or equal to zero and must not exceed the\n  number of elements in the `CircularBuffer`.\n\n- Complexity: O(*k*), where *k* is the specified number of elements."},{"p":["CircularBuffer","removeFirst()"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"s":[["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes and returns the first element of the `CircularBuffer`.\n\nThe `CircularBuffer` must not be empty.\n\nCalling this method may invalidate any existing indices for use with this\n`CircularBuffer`.\n\n- Returns: The removed element.\n\n- Complexity: O(*1*)","o":1301},{"p":["CircularBuffer","removeFirst(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeFirst",7],["(",17],["_",1],[" ",17],["k",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["removeFirst",7],["(",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Removes the specified number of elements from the beginning of the\n`CircularBuffer`.\n\nCalling this method may invalidate any existing indices for use with this\n`CircularBuffer`.\n\n- Parameter k: The number of elements to remove.\n  `k` must be greater than or equal to zero and must not exceed the\n  number of elements in the `CircularBuffer`.\n\n- Complexity: O(*k*), where *k* is the specified number of elements.","o":1302},{"p":["CircularBuffer","removeSubrange(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeSubrange",7],["(",17],["_",1],[" ",17],["bounds",2],[": ",17],["Range",18,1346],["<",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[">)",17]],"s":[["func",12],[" ",17],["removeSubrange",7],["(",17],["Range",18],["<",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[">)",17]],"g":[["Element",0,0]],"d":"Removes the elements in the specified subrange from the circular buffer.\n\n- Parameter bounds: The range of the circular buffer to be removed. The bounds of the range must be valid indices of the collection.","o":1303},{"p":["CircularBuffer","replaceSubrange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["_",1],[" ",17],["subrange",2],[": ",17],["Range",18,1346],["<",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[">, ",17],["with",1],[" ",17],["newElements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,1241]],"s":[["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["Range",18],["<",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[">, ",17],["with",1],[": ",17],["C",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",1241]],"g":[["Element",0,0],["C",0,1]],"d":"Replaces the specified subrange of elements with the given `CircularBuffer`.\n\n- Parameter subrange: The subrange of the collection to replace. The bounds of the range must be valid indices\n                      of the `CircularBuffer`.\n\n- Parameter newElements: The new elements to add to the `CircularBuffer`.\n\n*O(n)* where _n_ is the length of the new elements collection if the subrange equals to _n_\n\n*O(m)* where _m_ is the combined length of the collection and _newElements_","o":1304},{"p":["CircularBuffer","reserveCapacity(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reserveCapacity",7],["(",17],["_",1],[" ",17],["minimumCapacity",2],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["reserveCapacity",7],["(",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Prepares the `CircularBuffer` to store the specified number of elements.","o":1305},{"p":["CircularBuffer","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"d":"Returns the position immediately after the given index.\n\nThe successor of an index must be well defined. For an index `i` into a\ncollection `c`, calling `c.index(after: i)` returns the same index every\ntime.\n\n- Parameter i: A valid index of the collection. `i` must be less than\n  `endIndex`.\n- Returns: The index value immediately after `i`.","o":1263},{"p":["CircularBuffer","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"d":"Returns the index before `index`.","o":1238},{"p":["CircularBuffer","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,1235],[") -> ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96]],"s":[["func",12],[" ",17],["index",7],["(",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"d":"Returns the index offset by `distance` from `index`.\n\nThe following example obtains an index advanced four positions from a\nstring's starting index and then prints the character at that position.\n\n    let s = \"Swift\"\n    let i = s.index(s.startIndex, offsetBy: 4)\n    print(s[i])\n    // Prints \"t\"\n\nThe value passed as `distance` must not offset `i` beyond the bounds of\nthe collection.\n\n- Parameters:\n  - i: A valid index of the collection.\n  - distance: The distance to offset `i`. `distance` must not be negative\n    unless the collection conforms to the `BidirectionalCollection`\n    protocol.\n- Returns: An index offset by `distance` from the index `i`. If\n  `distance` is positive, this is the same value as the result of\n  `distance` calls to `index(after:)`. If `distance` is negative, this\n  is the same value as the result of `abs(distance)` calls to\n  `index(before:)`.\n\n- Complexity: O(1) if the collection conforms to\n  `RandomAccessCollection`; otherwise, O(*k*), where *k* is the absolute\n  value of `distance`.","o":1264},{"p":["CircularBuffer","append(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Element",18],[")",17]],"s":[["func",12],[" ",17],["append",7],["(",17],["Element",18],[")",17]],"g":[["Element",0,0]],"d":"Append an element to the end of the ring buffer.\n\nAmortized *O(1)*","o":1311},{"p":["CircularBuffer","modify(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["modify",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[", ",17],["_",1],[" ",17],["modifyFunc",2],[": (",17],["inout",12],[" ",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> ",17],["Result",18]],"s":[["func",12],[" ",17],["modify",7],["<",17],["Result",0],[">(",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", (",17],["inout",12],[" ",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> ",17],["Result",18]],"g":[["Element",0,0],["Result",0,1]],"d":"Modify the element at `index`.\n\nThis function exists to provide a method of modifying the element in its underlying backing storage, instead\nof copying it out, modifying it, and copying it back in. This emulates the behaviour of the `_modify` accessor\nthat is part of the generalized accessors work. That accessor is currently underscored and not safe to use, so\nthis is the next best thing.\n\nNote that this function is not guaranteed to be fast. In particular, as it is both generic and accepts a closure\nit is possible that it will be slower than using the get/modify/set path that occurs with the subscript. If you\nare interested in using this function for performance you *must* test and verify that the optimisation applies\ncorrectly in your situation.\n\n- parameters:\n    - index: The index of the object that should be modified. If this index is invalid this function will trap.\n    - modifyFunc: The function to apply to the modified object."},{"p":["CircularBuffer","remove(at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["at",1],[" ",17],["position",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["Element",18]],"s":[["func",12],[" ",17],["remove",7],["(",17],["at",1],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes & returns the item at `position` from the buffer\n\n- Parameter position: The index of the item to be removed from the buffer.\n\n*O(1)* if the position is `headIdx` or `tailIdx`.\notherwise\n*O(n)* where *n* is the number of elements between `position` and `tailIdx`.","o":1312},{"p":["CircularBuffer","popLast()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["popLast",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["popLast",7],["() -> ",17],["Element",18],["?",17]],"g":[["Element",0,0]],"d":"Removes and returns the last element of the `CircularBuffer`.\n\nCalling this method may invalidate all saved indices of this\n`CircularBuffer`. Do not rely on a previously stored index value after\naltering a `CircularBuffer` with any operation that can change its length.\n\n- Returns: The last element of the `CircularBuffer` if the `CircularBuffer` is not\n           empty; otherwise, `nil`.\n\n- Complexity: O(1)"},{"p":["CircularBuffer","prepend(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["prepend",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Element",18],[")",17]],"s":[["func",12],[" ",17],["prepend",7],["(",17],["Element",18],[")",17]],"g":[["Element",0,0]],"d":"Prepend an element to the front of the ring buffer.\n\nAmortized *O(1)*"},{"p":["CircularBuffer","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"d":"Returns the distance between two indices.\n\nUnless the collection conforms to the `BidirectionalCollection` protocol,\n`start` must be less than or equal to `end`.\n\n- Parameters:\n  - start: A valid index of the collection.\n  - end: Another valid index of the collection. If `end` is equal to\n    `start`, the result is zero.\n- Returns: The distance between `start` and `end`. The result can be\n  negative only if the collection conforms to the\n  `BidirectionalCollection` protocol.\n\n- Complexity: O(1) if the collection conforms to\n  `RandomAccessCollection`; otherwise, O(*k*), where *k* is the\n  resulting distance.","o":1267},{"p":["CircularBuffer","popFirst()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"g":[["Element",0,0]],"d":"Removes and returns the first element of the `CircularBuffer`.\n\nCalling this method may invalidate all saved indices of this\n`CircularBuffer`. Do not rely on a previously stored index value after\naltering a `CircularBuffer` with any operation that can change its length.\n\n- Returns: The first element of the `CircularBuffer` if the `CircularBuffer` is not\n           empty; otherwise, `nil`.\n\n- Complexity: O(1)"},{"p":["CircularBuffer","removeAll(keepingCapacity:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeAll",7],["(",17],["keepingCapacity",1],[": ",17],["Bool",18,1232],[" = false)",17]],"s":[["func",12],[" ",17],["removeAll",7],["(",17],["keepingCapacity",1],[": ",17],["Bool",18],[")",17]],"g":[["Element",0,0]],"d":"Removes all members from the circular buffer whist keeping the capacity.","o":1313},{"p":["CircularBuffer","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,1393],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Element",1,"Hashable",1120]],"c":[["Element",1,"Hashable",1120]],"g":[["Element",0,0]],"o":1121},{"p":["EventLoopGroup","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EventLoopIterator",18,103]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EventLoopIterator",18]],"d":"Returns an `EventLoopIterator` over the `EventLoop`s in this `EventLoopGroup`.\n\n- returns: `EventLoopIterator`"},{"p":["EventLoopGroup","shutdownGracefully(queue:_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["shutdownGracefully",7],["(",17],["queue",1],[": ",17],["DispatchQueue",18,1119],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],["?) -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["shutdownGracefully",7],["(",17],["queue",1],[": ",17],["DispatchQueue",18],[", (",17],["Error",18],["?) -> ",17],["Void",18],[")",17]],"d":"Shuts down the eventloop gracefully. This function is clearly an outlier in that it uses a completion\ncallback instead of an EventLoopFuture. The reason for that is that NIO's EventLoopFutures will call back on an event loop.\nThe virtue of this function is to shut the event loop down. To work around that we call back on a DispatchQueue\ninstead."},{"p":["EventLoopGroup","any()"],"f":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18,29]],"s":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18]],"d":"Returns any `EventLoop` from the `EventLoopGroup`, a common choice is the current `EventLoop`.\n\n- warning: You cannot rely on the returned `EventLoop` being the current one, not all `EventLoopGroup`s support\n           choosing the current one. Use this method only if you are truly happy with _any_ `EventLoop` of this\n           `EventLoopGroup` instance.\n\n- note: You will only receive the current `EventLoop` here iff the current `EventLoop` belongs to the\n        `EventLoopGroup` you call `any()` on.\n\nThis method is useful having access to an `EventLoopGroup` without the knowledge of which `EventLoop` would be\nthe best one to select to create a new `EventLoopFuture`. This commonly happens in libraries where the user\ncannot indicate what `EventLoop` they would like their futures on.\n\nTypically, it is faster to kick off a new operation on the _current_ `EventLoop` because that minimised thread\nswitches. Hence, if situations where you don't need precise knowledge of what `EventLoop` some code is running\non, use `any()` to indicate this.\n\nThe rule of thumb is: If you are trying to do _load balancing_, use `next()`. If you just want to create a new\nfuture or kick off some operation, use `any()`."},{"p":["EventLoopGroup","next()"],"f":[["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18,29]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18]],"d":"Returns the next `EventLoop` to use, this is useful for load balancing.\n\nThe algorithm that is used to select the next `EventLoop` is specific to each `EventLoopGroup`. A common choice\nis _round robin_.\n\nPlease note that you should only be using `next()` if you want to load balance over all `EventLoop`s of the\n`EventLoopGroup`. If the actual `EventLoop` does not matter much, `any()` should be preferred because it can\ntry to return you the _current_ `EventLoop` which usually is faster because the number of thread switches can\nbe reduced.\n\nThe rule of thumb is: If you are trying to do _load balancing_, use `next()`. If you just want to create a new\nfuture or kick off some operation, use `any()`."},{"p":["EventLoopGroup","shutdownGracefully()"],"f":[["func",12],[" ",17],["shutdownGracefully",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["shutdownGracefully",7],["() ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Shuts down the event loop gracefully."},{"p":["EventLoopGroup","shutdownGracefully(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["shutdownGracefully",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],["?) -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["shutdownGracefully",7],["((",17],["Error",18],["?) -> ",17],["Void",18],[")",17]]},{"p":["EventLoopGroup","syncShutdownGracefully()"],"f":[["func",12],[" ",17],["syncShutdownGracefully",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["syncShutdownGracefully",7],["() ",17],["throws",12]]},{"p":["EventLoopGroup","any()"],"f":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18,29]],"s":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18]],"d":"The default implementation of `any()` just returns the `next()` EventLoop but it's highly recommended to\noverride this and return the current `EventLoop` if possible."},{"p":["FileDescriptor","withUnsafeFileDescriptor(_:)"],"f":[["func",12],[" ",17],["withUnsafeFileDescriptor",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["CInt",18,1386],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeFileDescriptor",7],["<",17],["T",0],[">((",17],["CInt",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,1]],"d":"Will be called with the file descriptor if still open, if not it will\nthrow an `IOError`.\n\nThe ownership of the file descriptor must not escape the `body` as it's completely managed by the\nimplementation of the `FileDescriptor` protocol.\n\n- parameters:\n    - body: The closure to execute if the `FileDescriptor` is still open.\n- throws: If either the `FileDescriptor` was closed before or the closure throws by itself."},{"p":["FileDescriptor","close()"],"f":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"d":"Close this `FileDescriptor`."},{"p":["ChannelPipeline","fireChannelRegistered()"],"f":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"o":894},{"p":["ChannelPipeline","fireChannelReadComplete()"],"f":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"o":895},{"p":["ChannelPipeline","fireChannelUnregistered()"],"f":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"o":896},{"p":["ChannelPipeline","fireChannelWritabilityChanged()"],"f":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"o":897},{"p":["ChannelPipeline","fireChannelRead(_:)"],"f":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["NIOAny",18],[")",17]],"o":898},{"p":["ChannelPipeline","fireChannelActive()"],"f":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"o":899},{"p":["ChannelPipeline","fireChannelInactive()"],"f":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"o":900},{"p":["ChannelPipeline","addHandler(_:name:position:)"],"f":[["func",12],[" ",17],["addHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["ChannelHandler",18,8],[", ",17],["name",1],[": ",17],["String",18,1173],["? = nil, ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["addHandler",7],["(",17],["ChannelHandler",18],[", ",17],["name",1],[": ",17],["String",18],["?, ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Add a `ChannelHandler` to the `ChannelPipeline`.\n\n- parameters:\n    - name: the name to use for the `ChannelHandler` when it's added. If none is specified it will generate a name.\n    - handler: the `ChannelHandler` to add\n    - position: The position in the `ChannelPipeline` to add `handler`. Defaults to `.last`.\n- returns: the `EventLoopFuture` which will be notified once the `ChannelHandler` was added."},{"p":["ChannelPipeline","addHandler(_:name:position:)"],"f":[["func",12],[" ",17],["addHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["ChannelHandler",18,8],[", ",17],["name",1],[": ",17],["String",18,1173],["? = nil, ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandler",7],["(",17],["ChannelHandler",18],[", ",17],["name",1],[": ",17],["String",18],["?, ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": ",17],["ChannelHandler",18,8],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["addHandlers",7],["(",17],["ChannelHandler",18],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Adds the provided channel handlers to the pipeline in the order given, taking account\nof the behaviour of `ChannelHandler.add(first:)`.\n\n- parameters:\n    - handlers: One or more `ChannelHandler`s to be added.\n    - position: The position in the `ChannelPipeline` to add `handlers`. Defaults to `.last`.\n\n- returns: A future that will be completed when all of the supplied `ChannelHandler`s were added."},{"p":["ChannelPipeline","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": [",17],["ChannelHandler",18,8],["], ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["addHandlers",7],["([",17],["ChannelHandler",18],["], ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Adds the provided channel handlers to the pipeline in the order given, taking account\nof the behaviour of `ChannelHandler.add(first:)`.\n\n- parameters:\n    - handlers: The array of `ChannelHandler`s to be added.\n    - position: The position in the `ChannelPipeline` to add `handlers`. Defaults to `.last`.\n\n- returns: A future that will be completed when all of the supplied `ChannelHandler`s were added."},{"p":["ChannelPipeline","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": ",17],["ChannelHandler",18,8],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandlers",7],["(",17],["ChannelHandler",18],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": [",17],["ChannelHandler",18,8],["], ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandlers",7],["([",17],["ChannelHandler",18],["], ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","removeHandler(name:promise:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18,1173],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - name: the name that was used to add the `ChannelHandler` to the `ChannelPipeline` before.\n    - promise: An `EventLoopPromise` that will complete when the `ChannelHandler` is removed."},{"p":["ChannelPipeline","removeHandler(name:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18,1173],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - name: the name that was used to add the `ChannelHandler` to the `ChannelPipeline` before.\n- returns: the `EventLoopFuture` which will be notified once the `ChannelHandler` was removed."},{"p":["ChannelPipeline","removeHandler(name:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18,1173],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["name",1],[": ",17],["String",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","removeHandler(context:promise:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - context: the `ChannelHandlerContext` that belongs to `ChannelHandler` that should be removed.\n    - promise: An `EventLoopPromise` that will complete when the `ChannelHandler` is removed."},{"p":["ChannelPipeline","removeHandler(context:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - context: the `ChannelHandlerContext` that belongs to `ChannelHandler` that should be removed.\n- returns: the `EventLoopFuture` which will be notified once the `ChannelHandler` was removed."},{"p":["ChannelPipeline","removeHandler(context:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","removeHandler(_:promise:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["RemovableChannelHandler",18,22],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["RemovableChannelHandler",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - handler: the `ChannelHandler` to remove.\n    - promise: An `EventLoopPromise` that will complete when the `ChannelHandler` is removed."},{"p":["ChannelPipeline","removeHandler(_:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["RemovableChannelHandler",18,22],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["RemovableChannelHandler",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Remove a `ChannelHandler` from the `ChannelPipeline`.\n\n- parameters:\n    - handler: the `ChannelHandler` to remove.\n- returns: the `EventLoopFuture` which will be notified once the `ChannelHandler` was removed."},{"p":["ChannelPipeline","removeHandler(_:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["RemovableChannelHandler",18,22],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["RemovableChannelHandler",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":914},{"p":["ChannelPipeline","fireErrorCaught(_:)"],"f":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["Error",18],[")",17]],"o":902},{"p":["ChannelPipeline","SynchronousOperations","fireChannelRegistered()"],"f":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"d":"Fires `channelRegistered` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelReadComplete()"],"f":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"d":"Fires `channelReadComplete` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelUnregistered()"],"f":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"d":"Fires `channelUnregistered` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelWritabilityChanged()"],"f":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"d":"Fires `channelWritabilityChanged` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelRead(_:)"],"f":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["NIOAny",18],[")",17]],"d":"Fires `channelRead` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelActive()"],"f":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"d":"Fires `channelActive` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireChannelInactive()"],"f":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"d":"Fires `channelInactive` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","addHandler(_:name:position:)"],"f":[["func",12],[" ",17],["addHandler",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["ChannelHandler",18,8],[", ",17],["name",1],[": ",17],["String",18,1173],["? = nil, ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandler",7],["(",17],["ChannelHandler",18],[", ",17],["name",1],[": ",17],["String",18],["?, ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["throws",12]],"d":"Add a handler to the pipeline.\n\n- Important: This *must* be called on the event loop.\n- Parameters:\n  - handler: The handler to add.\n  - name: The name to use for the `ChannelHandler` when it's added. If no name is specified the one will be generated.\n  - position: The position in the `ChannelPipeline` to add `handler`. Defaults to `.last`."},{"p":["ChannelPipeline","SynchronousOperations","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": ",17],["ChannelHandler",18,8],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandlers",7],["(",17],["ChannelHandler",18],["..., ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["throws",12]],"d":"Add one or more handlers to the pipeline.\n\n- Important: This *must* be called on the event loop.\n- Parameters:\n  - handlers: The handlers to add.\n  - position: The position in the `ChannelPipeline` to add `handlers`. Defaults to `.last`."},{"p":["ChannelPipeline","SynchronousOperations","addHandlers(_:position:)"],"f":[["func",12],[" ",17],["addHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": [",17],["ChannelHandler",18,8],["], ",17],["position",1],[": ",17],["ChannelPipeline",18,124],[".",17],["Position",18,48],[" = .last) ",17],["throws",12]],"s":[["func",12],[" ",17],["addHandlers",7],["([",17],["ChannelHandler",18],["], ",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[") ",17],["throws",12]],"d":"Add an array of handlers to the pipeline.\n\n- Important: This *must* be called on the event loop.\n- Parameters:\n  - handlers: The handlers to add.\n  - position: The position in the `ChannelPipeline` to add `handlers`. Defaults to `.last`."},{"p":["ChannelPipeline","SynchronousOperations","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `writeAndFlush` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireErrorCaught(_:)"],"f":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["Error",18],[")",17]],"d":"Fires `errorCaught` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","triggerUserOutboundEvent(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `triggerUserOutboundEvent` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","fireUserInboundEventTriggered(_:)"],"f":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["Any",12],[")",17]],"d":"Fires `userInboundEventTriggered` from the head to the tail.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","bind(to:promise:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `bind` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","read()"],"f":[["func",12],[" ",17],["read",7],["()",17]],"s":[["func",12],[" ",17],["read",7],["()",17]],"d":"Fires `read` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","close(mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `close` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","flush()"],"f":[["func",12],[" ",17],["flush",7],["()",17]],"s":[["func",12],[" ",17],["flush",7],["()",17]],"d":"Fires `flush` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `write` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","connect(to:promise:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `connect` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","SynchronousOperations","context(handlerType:)"],"f":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132],[" ",17],["where",12],[" ",17],["Handler",18],[" : ",17],["ChannelHandler",18,8]],"s":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"c":[["Handler",1,"ChannelHandler",8]],"g":[["Handler",0,0]],"d":"Returns the `ChannelHandlerContext` for the handler of given type, if one exists.\n\n- Important: This *must* be called on the event loop.\n- Parameter name: The name of the handler whose context is being fetched.\n- Returns: The `ChannelHandlerContext` associated with the handler."},{"p":["ChannelPipeline","SynchronousOperations","context(name:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18,1173],[") ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132]],"s":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18],[") ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"d":"Returns the `ChannelHandlerContext` for the handler with the given name, if one exists.\n\n- Important: This *must* be called on the event loop.\n- Parameter name: The name of the handler whose context is being fetched.\n- Returns: The `ChannelHandlerContext` associated with the handler."},{"p":["ChannelPipeline","SynchronousOperations","context(handler:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18,8],[") ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132]],"s":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18],[") ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"d":"Returns the `ChannelHandlerContext` for the given handler instance if it is in\nthe `ChannelPipeline`, if it exists.\n\n- Important: This *must* be called on the event loop.\n- Parameter handler: The handler belonging to the context to fetch.\n- Returns: The `ChannelHandlerContext` associated with the handler."},{"p":["ChannelPipeline","SynchronousOperations","handler(type:)"],"f":[["func",12],[" ",17],["handler",7],["<",17],["Handler",0],[">(",17],["type",1],[" ",17],["_",2],[": ",17],["Handler",18],[".Type) ",17],["throws",12],[" -> ",17],["Handler",18],[" ",17],["where",12],[" ",17],["Handler",18],[" : ",17],["ChannelHandler",18,8]],"s":[["func",12],[" ",17],["handler",7],["<",17],["Handler",0],[">(",17],["type",1],[": ",17],["Handler",18],[".Type) ",17],["throws",12],[" -> ",17],["Handler",18]],"c":[["Handler",1,"ChannelHandler",8]],"g":[["Handler",0,0]],"d":"Returns the `ChannelHandler` of the given type from the `ChannelPipeline`, if it exists.\n\n- Important: This *must* be called on the event loop.\n- Returns: A `ChannelHandler` of the given type if one exists in the `ChannelPipeline`."},{"p":["ChannelPipeline","SynchronousOperations","register(promise:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Fires `register` from the tail to the head.\n\nThis method should typically only be called by `Channel` implementations directly."},{"p":["ChannelPipeline","triggerUserOutboundEvent(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":913},{"p":["ChannelPipeline","fireUserInboundEventTriggered(_:)"],"f":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["Any",12],[")",17]],"o":901},{"p":["ChannelPipeline","bind(to:promise:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":915},{"p":["ChannelPipeline","read()"],"f":[["func",12],[" ",17],["read",7],["()",17]],"s":[["func",12],[" ",17],["read",7],["()",17]],"o":916},{"p":["ChannelPipeline","close(mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":917},{"p":["ChannelPipeline","flush()"],"f":[["func",12],[" ",17],["flush",7],["()",17]],"s":[["func",12],[" ",17],["flush",7],["()",17]],"o":918},{"p":["ChannelPipeline","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":919},{"p":["ChannelPipeline","connect(to:promise:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":920},{"p":["ChannelPipeline","context(handlerType:)"],"f":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132],[" ",17],["where",12],[" ",17],["Handler",18],[" : ",17],["ChannelHandler",18,8]],"s":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"a":{"a":{"d":true,"m":"ChannelHandlerContext is not Sendable and it is therefore not safe to be used outside of its EventLoop"},"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"c":[["Handler",1,"ChannelHandler",8]],"g":[["Handler",0,0]]},{"p":["ChannelPipeline","context(handlerType:)"],"f":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) -> ",17],["EventLoopFuture",18,125],["<",17],["ChannelHandlerContext",18,132],["> ",17],["where",12],[" ",17],["Handler",18],[" : ",17],["ChannelHandler",18,8]],"s":[["func",12],[" ",17],["context",7],["<",17],["Handler",0],[">(",17],["handlerType",1],[": ",17],["Handler",18],[".Type) -> ",17],["EventLoopFuture",18],["<",17],["ChannelHandlerContext",18],[">",17]],"c":[["Handler",1,"ChannelHandler",8]],"g":[["Handler",0,0]],"d":"Returns the `ChannelHandlerContext` that belongs to a `ChannelHandler` of the given type.\n\nIf multiple channel handlers of the same type are present in the pipeline, returns the context\nbelonging to the first such handler.\n\n- parameters:\n    - handlerType: The type of the handler to search for.\n- returns: the `EventLoopFuture` which will be notified once the the operation completes."},{"p":["ChannelPipeline","context(name:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18,1173],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132]],"s":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"a":{"a":{"d":true,"m":"ChannelHandlerContext is not Sendable and it is therefore not safe to be used outside of its EventLoop"},"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","context(name:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18,1173],[") -> ",17],["EventLoopFuture",18,125],["<",17],["ChannelHandlerContext",18,132],[">",17]],"s":[["func",12],[" ",17],["context",7],["(",17],["name",1],[": ",17],["String",18],[") -> ",17],["EventLoopFuture",18],["<",17],["ChannelHandlerContext",18],[">",17]],"d":"Returns the `ChannelHandlerContext` that belongs to a `ChannelHandler`.\n\n- parameters:\n    - name: the name that was used to add the `ChannelHandler` to the `ChannelPipeline` before.\n- returns: the `EventLoopFuture` which will be notified once the the operation completes."},{"p":["ChannelPipeline","context(handler:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18,8],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18,132]],"s":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChannelHandlerContext",18]],"a":{"a":{"d":true,"m":"ChannelHandlerContext is not Sendable and it is therefore not safe to be used outside of its EventLoop"},"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}}},{"p":["ChannelPipeline","context(handler:)"],"f":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18,8],[") -> ",17],["EventLoopFuture",18,125],["<",17],["ChannelHandlerContext",18,132],[">",17]],"s":[["func",12],[" ",17],["context",7],["(",17],["handler",1],[": ",17],["ChannelHandler",18],[") -> ",17],["EventLoopFuture",18],["<",17],["ChannelHandlerContext",18],[">",17]],"d":"Returns the `ChannelHandlerContext` that belongs to a `ChannelHandler`.\n\n- parameters:\n    - handler: the `ChannelHandler` for which the `ChannelHandlerContext` should be returned\n- returns: the `EventLoopFuture` which will be notified once the the operation completes."},{"p":["ChannelPipeline","handler(type:)"],"f":[["func",12],[" ",17],["handler",7],["<",17],["Handler",0],[">(",17],["type",1],[" ",17],["_",2],[": ",17],["Handler",18],[".Type) -> ",17],["EventLoopFuture",18,125],["<",17],["Handler",18],["> ",17],["where",12],[" ",17],["Handler",18],[" : ",17],["ChannelHandler",18,8]],"s":[["func",12],[" ",17],["handler",7],["<",17],["Handler",0],[">(",17],["type",1],[": ",17],["Handler",18],[".Type) -> ",17],["EventLoopFuture",18],["<",17],["Handler",18],[">",17]],"c":[["Handler",1,"ChannelHandler",8]],"g":[["Handler",0,0]],"d":"Returns the first `ChannelHandler` of the given type.\n\n- parameters:\n    - type: the type of `ChannelHandler` to return."},{"p":["ChannelPipeline","register(promise:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":921},{"p":["EventLoopFuture","flatMapWithEventLoop(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapWithEventLoop",7],["<",17],["NewValue",0],[">(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[", ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMapWithEventLoop",7],["<",17],["NewValue",0],[">((",17],["Value",18],[", ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"When the current `EventLoopFuture<Value>` is fulfilled, run the provided callback,\nwhich will provide a new `EventLoopFuture` alongside the `EventLoop` associated with this future.\n\nThis allows you to dynamically dispatch new asynchronous tasks as phases in a\nlonger series of processing steps. Note that you can use the results of the\ncurrent `EventLoopFuture<Value>` when determining how to dispatch the next operation.\n\nThis works well when you have APIs that already know how to return `EventLoopFuture`s.\nYou can do something with the result of one and just return the next future:\n\n```\nlet d1 = networkRequest(args).future()\nlet d2 = d1.flatMapWithEventLoop { t, eventLoop -> EventLoopFuture<NewValue> in\n    eventLoop.makeSucceededFuture(t + 1)\n}\nd2.whenSuccess { u in\n    NSLog(\"Result of second request: \\(u)\")\n}\n```\n\nNote: In a sense, the `EventLoopFuture<NewValue>` is returned before it's created.\n\n- parameters:\n    - callback: Function that will receive the value of this `EventLoopFuture` and return\n        a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value."},{"p":["EventLoopFuture","flatMapErrorWithEventLoop(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapErrorWithEventLoop",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[", ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["flatMapErrorWithEventLoop",7],["((",17],["Error",18],[", ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"When the current `EventLoopFuture<Value>` is in an error state, run the provided callback, which\nmay recover from the error by returning an `EventLoopFuture<NewValue>`. The callback is intended to potentially\nrecover from the error by returning a new `EventLoopFuture` that will eventually contain the recovered\nresult.\n\nIf the callback cannot recover it should return a failed `EventLoopFuture`.\n\n- parameters:\n    - callback: Function that will receive the error value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the recovered value."},{"p":["EventLoopFuture","foldWithEventLoop(_:with:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["foldWithEventLoop",7],["<",17],["OtherValue",0],[">(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["OtherValue",18],[">], ",17],["with",1],[" ",17],["combiningFunction",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[", ",17],["OtherValue",18],[", ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["foldWithEventLoop",7],["<",17],["OtherValue",0],[">([",17],["EventLoopFuture",18],["<",17],["OtherValue",18],[">], ",17],["with",1],[": (",17],["Value",18],[", ",17],["OtherValue",18],[", ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0],["OtherValue",0,1]],"d":"Returns a new `EventLoopFuture` that fires only when this `EventLoopFuture` and\nall the provided `futures` complete. It then provides the result of folding the value of this\n`EventLoopFuture` with the values of all the provided `futures`.\n\nThis function is suited when you have APIs that already know how to return `EventLoopFuture`s.\n\nThe returned `EventLoopFuture` will fail as soon as the a failure is encountered in any of the\n`futures` (or in this one). However, the failure will not occur until all preceding\n`EventLoopFutures` have completed. At the point the failure is encountered, all subsequent\n`EventLoopFuture` objects will no longer be waited for. This function therefore fails fast: once\na failure is encountered, it will immediately fail the overall EventLoopFuture.\n\n- parameters:\n    - futures: An array of `EventLoopFuture<NewValue>` to wait for.\n    - with: A function that will be used to fold the values of two `EventLoopFuture`s and return a new value wrapped in an `EventLoopFuture`.\n- returns: A new `EventLoopFuture` with the folded value whose callbacks run on `self.eventLoop`."},{"p":["EventLoopFuture","whenFailure(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["whenFailure",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenFailure",7],["((",17],["Error",18],[") -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has a failure result.\n\nAn observer callback cannot return a value, meaning that this function cannot be chained\nfrom. If you are attempting to create a computation pipeline, consider `recover` or `flatMapError`.\nIf you find yourself passing the results from this `EventLoopFuture` to a new `EventLoopPromise`\nin the body of this function, consider using `cascade` instead.\n\n- parameters:\n    - callback: The callback that is called with the failed result of the `EventLoopFuture`."},{"p":["EventLoopFuture","whenSuccess(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["whenSuccess",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenSuccess",7],["((",17],["Value",18],[") -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has a success result.\n\nAn observer callback cannot return a value, meaning that this function cannot be chained\nfrom. If you are attempting to create a computation pipeline, consider `map` or `flatMap`.\nIf you find yourself passing the results from this `EventLoopFuture` to a new `EventLoopPromise`\nin the body of this function, consider using `cascade` instead.\n\n- parameters:\n    - callback: The callback that is called with the successful result of the `EventLoopFuture`."},{"p":["EventLoopFuture","flatMapError(file:line:_:)"],"f":[["func",12],[" ",17],["flatMapError",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["flatMapError",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Error",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0]]},{"p":["EventLoopFuture","flatMapError(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapError",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["flatMapError",7],["((",17],["Error",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"When the current `EventLoopFuture<Value>` is in an error state, run the provided callback, which\nmay recover from the error by returning an `EventLoopFuture<NewValue>`. The callback is intended to potentially\nrecover from the error by returning a new `EventLoopFuture` that will eventually contain the recovered\nresult.\n\nIf the callback cannot recover it should return a failed `EventLoopFuture`.\n\n- parameters:\n    - callback: Function that will receive the error value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the recovered value."},{"p":["EventLoopFuture","whenComplete(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["whenComplete",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">) -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenComplete",7],["((",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">) -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has any result.\n\n- parameters:\n    - callback: The callback that is called when the `EventLoopFuture` is fulfilled."},{"p":["EventLoopFuture","flatMapResult(file:line:_:)"],"f":[["func",12],[" ",17],["flatMapResult",7],["<",17],["NewValue",0],[", ",17],["SomeError",0],[">(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["body",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["Result",18,1394],["<",17],["NewValue",18],[", ",17],["SomeError",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],["> ",17],["where",12],[" ",17],["SomeError",18],[" : ",17],["Error",18,1388]],"s":[["func",12],[" ",17],["flatMapResult",7],["<",17],["NewValue",0],[", ",17],["SomeError",0],[">(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Value",18],[") -> ",17],["Result",18],["<",17],["NewValue",18],[", ",17],["SomeError",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"c":[["SomeError",1,"Error",1388]],"g":[["Value",0,0],["NewValue",0,1],["SomeError",1,1]]},{"p":["EventLoopFuture","flatMapResult(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapResult",7],["<",17],["NewValue",0],[", ",17],["SomeError",0],[">(",17],["_",1],[" ",17],["body",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["Result",18,1394],["<",17],["NewValue",18],[", ",17],["SomeError",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],["> ",17],["where",12],[" ",17],["SomeError",18],[" : ",17],["Error",18,1388]],"s":[["func",12],[" ",17],["flatMapResult",7],["<",17],["NewValue",0],[", ",17],["SomeError",0],[">((",17],["Value",18],[") -> ",17],["Result",18],["<",17],["NewValue",18],[", ",17],["SomeError",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"c":[["SomeError",1,"Error",1388]],"g":[["Value",0,0],["NewValue",0,1],["SomeError",1,1]],"d":"When the current `EventLoopFuture<Value>` is fulfilled, run the provided callback, which\nperforms a synchronous computation and returns either a new value (of type `NewValue`) or\nan error depending on the `Result` returned by the closure.\n\nOperations performed in `flatMapResult` should not block, or they will block the entire\nevent loop. `flatMapResult` is intended for use when you have a data-driven function that\nperforms a simple data transformation that can potentially error.\n\n\n- parameters:\n    - body: Function that will receive the value of this `EventLoopFuture` and return\n        a new value or error lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value."},{"p":["EventLoopFuture","cascadeFailure(to:)"],"f":[["func",12],[" ",17],["cascadeFailure",7],["<",17],["NewValue",0],[">(",17],["to",1],[" ",17],["promise",2],[": ",17],["EventLoopPromise",18,98],["<",17],["NewValue",18],[">?)",17]],"s":[["func",12],[" ",17],["cascadeFailure",7],["<",17],["NewValue",0],[">(",17],["to",1],[": ",17],["EventLoopPromise",18],["<",17],["NewValue",18],[">?)",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"Fails the given `EventLoopPromise` with the error from this `EventLoopFuture` if encountered.\n\nThis is an alternative variant of `cascade` that allows you to potentially return early failures in\nerror cases, while passing the user `EventLoopPromise` onwards.\n\n- Parameter to: The `EventLoopPromise` that should fail with the error of this `EventLoopFuture`."},{"p":["EventLoopFuture","cascadeSuccess(to:)"],"f":[["func",12],[" ",17],["cascadeSuccess",7],["(",17],["to",1],[" ",17],["promise",2],[": ",17],["EventLoopPromise",18,98],["<",17],["Value",18],[">?)",17]],"s":[["func",12],[" ",17],["cascadeSuccess",7],["(",17],["to",1],[": ",17],["EventLoopPromise",18],["<",17],["Value",18],[">?)",17]],"g":[["Value",0,0]],"d":"Fulfills the given `EventLoopPromise` only when this `EventLoopFuture` succeeds.\n\nIf you are doing work that fulfills a type that doesn't match the expected `EventLoopPromise` value, add an\nintermediate `map`.\n\nFor example:\n```\nlet boolPromise = eventLoop.makePromise(of: Bool.self)\ndoWorkReturningInt().map({ $0 >= 0 }).cascade(to: boolPromise)\n```\n\n- Parameter to: The `EventLoopPromise` to fulfill when a successful result is available."},{"p":["EventLoopFuture","flatMapBlocking(onto:_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapBlocking",7],["<",17],["NewValue",0],[">(",17],["onto",1],[" ",17],["queue",2],[": ",17],["DispatchQueue",18,1119],[", ",17],["_",1],[" ",17],["callbackMayBlock",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMapBlocking",7],["<",17],["NewValue",0],[">(",17],["onto",1],[": ",17],["DispatchQueue",18],[", (",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"Chain an `EventLoopFuture<NewValue>` providing the result of a IO / task that may block. For example:\n\n    promise.futureResult.flatMapBlocking(onto: DispatchQueue.global()) { value in Int\n        blockingTask(value)\n    }\n\n- parameters:\n    - onto: the `DispatchQueue` on which the blocking IO / task specified by `callbackMayBlock` is scheduled.\n    - callbackMayBlock: Function that will receive the value of this `EventLoopFuture` and return\n        a new `EventLoopFuture`."},{"p":["EventLoopFuture","flatMapThrowing(file:line:_:)"],"f":[["func",12],[" ",17],["flatMapThrowing",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMapThrowing",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0],["NewValue",0,1]]},{"p":["EventLoopFuture","flatMapThrowing(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapThrowing",7],["<",17],["NewValue",0],[">(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMapThrowing",7],["<",17],["NewValue",0],[">((",17],["Value",18],[") ",17],["throws",12],[" -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"When the current `EventLoopFuture<Value>` is fulfilled, run the provided callback, which\nperforms a synchronous computation and returns a new value of type `NewValue`. The provided\ncallback may optionally `throw`.\n\nOperations performed in `flatMapThrowing` should not block, or they will block the entire\nevent loop. `flatMapThrowing` is intended for use when you have a data-driven function that\nperforms a simple data transformation that can potentially error.\n\nIf your callback function throws, the returned `EventLoopFuture` will error.\n\n- parameters:\n    - callback: Function that will receive the value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value."},{"p":["EventLoopFuture","whenFailureBlocking(onto:_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["whenFailureBlocking",7],["(",17],["onto",1],[" ",17],["queue",2],[": ",17],["DispatchQueue",18,1119],[", ",17],["_",1],[" ",17],["callbackMayBlock",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenFailureBlocking",7],["(",17],["onto",1],[": ",17],["DispatchQueue",18],[", (",17],["Error",18],[") -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has a failure result. The observer callback is permitted to block.\n\nAn observer callback cannot return a value, meaning that this function cannot be chained\nfrom. If you are attempting to create a computation pipeline, consider `recover` or `flatMapError`.\nIf you find yourself passing the results from this `EventLoopFuture` to a new `EventLoopPromise`\nin the body of this function, consider using `cascade` instead.\n\n- parameters:\n    - onto: the `DispatchQueue` on which the blocking IO / task specified by `callbackMayBlock` is scheduled.\n    - callbackMayBlock: The callback that is called with the failed result of the `EventLoopFuture`."},{"p":["EventLoopFuture","whenSuccessBlocking(onto:_:)"],"f":[["func",12],[" ",17],["whenSuccessBlocking",7],["(",17],["onto",1],[" ",17],["queue",2],[": ",17],["DispatchQueue",18,1119],[", ",17],["_",1],[" ",17],["callbackMayBlock",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenSuccessBlocking",7],["(",17],["onto",1],[": ",17],["DispatchQueue",18],[", (",17],["Value",18],[") -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has a success result. The observer callback is permitted to block.\n\nAn observer callback cannot return a value, meaning that this function cannot be chained\nfrom. If you are attempting to create a computation pipeline, consider `map` or `flatMap`.\nIf you find yourself passing the results from this `EventLoopFuture` to a new `EventLoopPromise`\nin the body of this function, consider using `cascade` instead.\n\n- parameters:\n    - onto: the `DispatchQueue` on which the blocking IO / task specified by `callbackMayBlock` is scheduled.\n    - callbackMayBlock: The callback that is called with the successful result of the `EventLoopFuture`."},{"p":["EventLoopFuture","flatMapErrorThrowing(file:line:_:)"],"f":[["func",12],[" ",17],["flatMapErrorThrowing",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["flatMapErrorThrowing",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Error",18],[") ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0]]},{"p":["EventLoopFuture","flatMapErrorThrowing(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMapErrorThrowing",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["flatMapErrorThrowing",7],["((",17],["Error",18],[") ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"When the current `EventLoopFuture<Value>` is in an error state, run the provided callback, which\nmay recover from the error and returns a new value of type `Value`. The provided callback may optionally `throw`,\nin which case the `EventLoopFuture` will be in a failed state with the new thrown error.\n\nOperations performed in `flatMapErrorThrowing` should not block, or they will block the entire\nevent loop. `flatMapErrorThrowing` is intended for use when you have the ability to synchronously\nrecover from errors.\n\nIf your callback function throws, the returned `EventLoopFuture` will error.\n\n- parameters:\n    - callback: Function that will receive the error value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value or a rethrown error."},{"p":["EventLoopFuture","whenCompleteBlocking(onto:_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["whenCompleteBlocking",7],["(",17],["onto",1],[" ",17],["queue",2],[": ",17],["DispatchQueue",18,1119],[", ",17],["_",1],[" ",17],["callbackMayBlock",2],[": ",17],["@escaping",12],[" (",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">) -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["whenCompleteBlocking",7],["(",17],["onto",1],[": ",17],["DispatchQueue",18],[", (",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">) -> ",17],["Void",18],[")",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has any result. The observer callback is permitted to block.\n\n- parameters:\n    - onto: the `DispatchQueue` on which the blocking IO / task specified by `callbackMayBlock` is scheduled.\n    - callbackMayBlock: The callback that is called when the `EventLoopFuture` is fulfilled."},{"p":["EventLoopFuture","and(value:file:line:)"],"f":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["value",1],[": ",17],["OtherValue",18],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"s":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["value",1],[": ",17],["OtherValue",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0],["OtherValue",0,1]]},{"p":["EventLoopFuture","and(value:)"],"f":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["value",1],[": ",17],["OtherValue",18],[") -> ",17],["EventLoopFuture",18,125],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"s":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["value",1],[": ",17],["OtherValue",18],[") -> ",17],["EventLoopFuture",18],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"g":[["Value",0,0],["OtherValue",0,1]],"d":"Return a new EventLoopFuture that contains this \"and\" another value.\nThis is just syntactic sugar for `future.and(loop.makeSucceedFuture(value))`."},{"p":["EventLoopFuture","and(_:file:line:)"],"f":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["EventLoopFuture",18,125],["<",17],["OtherValue",18],[">, ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"s":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["EventLoopFuture",18],["<",17],["OtherValue",18],[">, ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0],["OtherValue",0,1]]},{"p":["EventLoopFuture","and(_:)"],"f":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["EventLoopFuture",18,125],["<",17],["OtherValue",18],[">) -> ",17],["EventLoopFuture",18,125],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"s":[["func",12],[" ",17],["and",7],["<",17],["OtherValue",0],[">(",17],["EventLoopFuture",18],["<",17],["OtherValue",18],[">) -> ",17],["EventLoopFuture",18],["<(",17],["Value",18],[", ",17],["OtherValue",18],[")>",17]],"g":[["Value",0,0],["OtherValue",0,1]],"d":"Return a new `EventLoopFuture` that succeeds when this \"and\" another\nprovided `EventLoopFuture` both succeed. It then provides the pair\nof results. If either one fails, the combined `EventLoopFuture` will fail with\nthe first error encountered."},{"p":["EventLoopFuture","get()"],"f":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Value",18]],"s":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Value",18]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"g":[["Value",0,0]],"d":"Get the value/error from an `EventLoopFuture` in an `async` context.\n\nThis function can be used to bridge an `EventLoopFuture` into the `async` world. Ie. if you're in an `async`\nfunction and want to get the result of this future."},{"p":["EventLoopFuture","hop(to:)"],"f":[["func",12],[" ",17],["hop",7],["(",17],["to",1],[" ",17],["target",2],[": ",17],["EventLoop",18,29],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["hop",7],["(",17],["to",1],[": ",17],["EventLoop",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"Returns an `EventLoopFuture` that fires when this future completes, but executes its callbacks on the\ntarget event loop instead of the original one.\n\nIt is common to want to \"hop\" event loops when you arrange some work: for example, you're closing one channel\nfrom another, and want to hop back when the close completes. This method lets you spell that requirement\nsuccinctly. It also contains an optimisation for the case when the loop you're hopping *from* is the same as\nthe one you're hopping *to*, allowing you to avoid doing allocations in that case.\n\n- parameters:\n    - to: The `EventLoop` that the returned `EventLoopFuture` will run on.\n- returns: An `EventLoopFuture` whose callbacks run on `target` instead of the original loop."},{"p":["EventLoopFuture","map(file:line:_:)"],"f":[["func",12],[" ",17],["map",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> (",17],["NewValue",18],[")) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["map",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Value",18],[") -> (",17],["NewValue",18],[")) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0],["NewValue",0,1]]},{"p":["EventLoopFuture","map(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["map",7],["<",17],["NewValue",0],[">(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> (",17],["NewValue",18],[")) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["map",7],["<",17],["NewValue",0],[">((",17],["Value",18],[") -> (",17],["NewValue",18],[")) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"When the current `EventLoopFuture<Value>` is fulfilled, run the provided callback, which\nperforms a synchronous computation and returns a new value of type `NewValue`.\n\nOperations performed in `map` should not block, or they will block the entire event\nloop. `map` is intended for use when you have a data-driven function that performs\na simple data transformation that cannot error.\n\nIf you have a data-driven function that can throw, you should use `flatMapThrowing`\ninstead.\n\n```\nlet future1 = eventually()\nlet future2 = future1.map { T -> U in\n    ... stuff ...\n    return u\n}\nlet future3 = future2.map { U -> V in\n    ... stuff ...\n    return v\n}\n```\n\n- parameters:\n    - callback: Function that will receive the value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value."},{"p":["EventLoopFuture","fold(_:with:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["fold",7],["<",17],["OtherValue",0],[">(",17],["_",1],[" ",17],["futures",2],[": [",17],["EventLoopFuture",18,125],["<",17],["OtherValue",18],[">], ",17],["with",1],[" ",17],["combiningFunction",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[", ",17],["OtherValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["fold",7],["<",17],["OtherValue",0],[">([",17],["EventLoopFuture",18],["<",17],["OtherValue",18],[">], ",17],["with",1],[": (",17],["Value",18],[", ",17],["OtherValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0],["OtherValue",0,1]],"d":"Returns a new `EventLoopFuture` that fires only when this `EventLoopFuture` and\nall the provided `futures` complete. It then provides the result of folding the value of this\n`EventLoopFuture` with the values of all the provided `futures`.\n\nThis function is suited when you have APIs that already know how to return `EventLoopFuture`s.\n\nThe returned `EventLoopFuture` will fail as soon as the a failure is encountered in any of the\n`futures` (or in this one). However, the failure will not occur until all preceding\n`EventLoopFutures` have completed. At the point the failure is encountered, all subsequent\n`EventLoopFuture` objects will no longer be waited for. This function therefore fails fast: once\na failure is encountered, it will immediately fail the overall EventLoopFuture.\n\n- parameters:\n    - futures: An array of `EventLoopFuture<NewValue>` to wait for.\n    - with: A function that will be used to fold the values of two `EventLoopFuture`s and return a new value wrapped in an `EventLoopFuture`.\n- returns: A new `EventLoopFuture` with the folded value whose callbacks run on `self.eventLoop`."},{"p":["EventLoopFuture","wait(file:line:)"],"f":[["func",12],[" ",17],["wait",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["throws",12],[" -> ",17],["Value",18]],"s":[["func",12],[" ",17],["wait",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["throws",12],[" -> ",17],["Value",18]],"g":[["Value",0,0]],"d":"Wait for the resolution of this `EventLoopFuture` by blocking the current thread until it\nresolves.\n\nIf the `EventLoopFuture` resolves with a value, that value is returned from `wait()`. If\nthe `EventLoopFuture` resolves with an error, that error will be thrown instead.\n`wait()` will block whatever thread it is called on, so it must not be called on event loop\nthreads: it is primarily useful for testing, or for building interfaces between blocking\nand non-blocking code.\n\n- returns: The value of the `EventLoopFuture` when it completes.\n- throws: The error value of the `EventLoopFuture` if it errors."},{"p":["EventLoopFuture","always(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["always",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">) -> ",17],["Void",18,1387],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["always",7],["((",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">) -> ",17],["Void",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"Adds an observer callback to this `EventLoopFuture` that is called when the\n`EventLoopFuture` has any result.\n\n- parameters:\n    - callback: the callback that is called when the `EventLoopFuture` is fulfilled.   \n- returns: the current `EventLoopFuture`"},{"p":["EventLoopFuture","unwrap(orElse:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orElse",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" () -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],["> ",17],["where",12],[" ",17],["Value",18],[" == ",17],["NewValue",18],["?",17]],"s":[["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orElse",1],[": () -> ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"c":[["Value",2,"NewValue?",1347]],"g":[["Value",0,0],["NewValue",0,1]],"d":"Unwrap an `EventLoopFuture` where its type parameter is an `Optional`.\n\nUnwraps a future returning a new `EventLoopFuture` with either: the value returned by the closure passed in\nthe `orElse` parameter when the future resolved with value Optional.none, or the same value otherwise. For example:\n```\nvar x = 2\npromise.futureResult.unwrap(orElse: { x * 2 }).wait()\n```\n\n- parameters:\n    - orElse: a closure that returns the value of the returned `EventLoopFuture` when then resolved future's value\n        is `Optional.some()`.\n- returns: an new `EventLoopFuture` with new type parameter `NewValue` and with the value returned by the closure\n    passed in the `orElse` parameter."},{"p":["EventLoopFuture","unwrap(orError:)"],"f":[["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orError",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],["> ",17],["where",12],[" ",17],["Value",18],[" == ",17],["NewValue",18],["?",17]],"s":[["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orError",1],[": ",17],["Error",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"c":[["Value",2,"NewValue?",1347]],"g":[["Value",0,0],["NewValue",0,1]],"d":"Unwrap an `EventLoopFuture` where its type parameter is an `Optional`.\n\nUnwrap a future returning a new `EventLoopFuture`. When the resolved future's value is `Optional.some(...)`\nthe new future is created with the identical value. Otherwise the `Error` passed in the `orError` parameter\nis thrown. For example:\n```\ndo {\n    try promise.futureResult.unwrap(orError: ErrorToThrow).wait()\n} catch ErrorToThrow {\n    ...\n}\n```\n\n- parameters:\n    - orError: the `Error` that is thrown when then resolved future's value is `Optional.none`.\n- returns: an new `EventLoopFuture` with new type parameter `NewValue` and the same value as the resolved\n    future.\n- throws: the `Error` passed in the `orError` parameter when the resolved future's value is `Optional.none`."},{"p":["EventLoopFuture","unwrap(orReplace:)"],"f":[["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orReplace",1],[" ",17],["replacement",2],[": ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],["> ",17],["where",12],[" ",17],["Value",18],[" == ",17],["NewValue",18],["?",17]],"s":[["func",12],[" ",17],["unwrap",7],["<",17],["NewValue",0],[">(",17],["orReplace",1],[": ",17],["NewValue",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"c":[["Value",2,"NewValue?",1347]],"g":[["Value",0,0],["NewValue",0,1]],"d":"Unwrap an `EventLoopFuture` where its type parameter is an `Optional`.\n\nUnwraps a future returning a new `EventLoopFuture` with either: the value passed in the `orReplace`\nparameter when the future resolved with value Optional.none, or the same value otherwise. For example:\n```\npromise.futureResult.unwrap(orReplace: 42).wait()\n```\n\n- parameters:\n    - orReplace: the value of the returned `EventLoopFuture` when then resolved future's value is `Optional.some()`.\n- returns: an new `EventLoopFuture` with new type parameter `NewValue` and the value passed in the `orReplace` parameter."},{"p":["EventLoopFuture","cascade(to:)"],"f":[["func",12],[" ",17],["cascade",7],["(",17],["to",1],[" ",17],["promise",2],[": ",17],["EventLoopPromise",18,98],["<",17],["Value",18],[">?)",17]],"s":[["func",12],[" ",17],["cascade",7],["(",17],["to",1],[": ",17],["EventLoopPromise",18],["<",17],["Value",18],[">?)",17]],"g":[["Value",0,0]],"d":"Fulfills the given `EventLoopPromise` with the results from this `EventLoopFuture`.\n\nThis is useful when allowing users to provide promises for you to fulfill, but\nwhen you are calling functions that return their own promises. They allow you to\ntidy up your computational pipelines.\n\nFor example:\n```\ndoWork().flatMap {\n    doMoreWork($0)\n}.flatMap {\n    doYetMoreWork($0)\n}.flatMapError {\n    maybeRecoverFromError($0)\n}.map {\n    transformData($0)\n}.cascade(to: userPromise)\n```\n\n- Parameter to: The `EventLoopPromise` to fulfill with the results of this future.\n- SeeAlso: `EventLoopPromise.completeWith(_:)`"},{"p":["EventLoopFuture","flatMap(file:line:_:)"],"f":[["func",12],[" ",17],["flatMap",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMap",7],["<",17],["NewValue",0],[">(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0],["NewValue",0,1]]},{"p":["EventLoopFuture","flatMap(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatMap",7],["<",17],["NewValue",0],[">(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["NewValue",18],[">",17]],"s":[["func",12],[" ",17],["flatMap",7],["<",17],["NewValue",0],[">((",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["NewValue",18],[">",17]],"g":[["Value",0,0],["NewValue",0,1]],"d":"When the current `EventLoopFuture<Value>` is fulfilled, run the provided callback,\nwhich will provide a new `EventLoopFuture`.\n\nThis allows you to dynamically dispatch new asynchronous tasks as phases in a\nlonger series of processing steps. Note that you can use the results of the\ncurrent `EventLoopFuture<Value>` when determining how to dispatch the next operation.\n\nThis works well when you have APIs that already know how to return `EventLoopFuture`s.\nYou can do something with the result of one and just return the next future:\n\n```\nlet d1 = networkRequest(args).future()\nlet d2 = d1.flatMap { t -> EventLoopFuture<NewValue> in\n    . . . something with t . . .\n    return netWorkRequest(args)\n}\nd2.whenSuccess { u in\n    NSLog(\"Result of second request: \\(u)\")\n}\n```\n\nNote: In a sense, the `EventLoopFuture<NewValue>` is returned before it's created.\n\n- parameters:\n    - callback: Function that will receive the value of this `EventLoopFuture` and return\n        a new `EventLoopFuture`.\n- returns: A future that will receive the eventual value."},{"p":["EventLoopFuture","recover(file:line:_:)"],"f":[["func",12],[" ",17],["recover",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["recover",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", (",17],["Error",18],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Value",0,0]]},{"p":["EventLoopFuture","recover(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["recover",7],["(",17],["_",1],[" ",17],["callback",2],[": ",17],["@escaping",12],[" (",17],["Error",18,1388],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["recover",7],["((",17],["Error",18],[") -> ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,0]],"d":"When the current `EventLoopFuture<Value>` is in an error state, run the provided callback, which\ncan recover from the error and return a new value of type `Value`. The provided callback may not `throw`,\nso this function should be used when the error is always recoverable.\n\nOperations performed in `recover` should not block, or they will block the entire\nevent loop. `recover` is intended for use when you have the ability to synchronously\nrecover from errors.\n\n- parameters:\n    - callback: Function that will receive the error value of this `EventLoopFuture` and return\n        a new value lifted into a new `EventLoopFuture`.\n- returns: A future that will receive the recovered value."},{"p":["EventLoopPromise","completeWith(_:)"],"f":[["func",12],[" ",17],["completeWith",7],["(",17],["_",1],[" ",17],["future",2],[": ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">)",17]],"s":[["func",12],[" ",17],["completeWith",7],["(",17],["EventLoopFuture",18],["<",17],["Value",18],[">)",17]],"g":[["Value",0,0]],"d":"Complete the promise with the passed in `EventLoopFuture<Value>`.\n\nThis method is equivalent to invoking `future.cascade(to: promise)`,\nbut sometimes may read better than its cascade counterpart.\n\n- parameters:\n    - future: The future whose value will be used to succeed or fail this promise.\n- seealso: `EventLoopFuture.cascade(to:)`"},{"p":["EventLoopPromise","completeWith(_:)"],"f":[["func",12],[" ",17],["completeWith",7],["(",17],["_",1],[" ",17],["result",2],[": ",17],["Result",18,1394],["<",17],["Value",18],[", ",17],["Error",18,1388],[">)",17]],"s":[["func",12],[" ",17],["completeWith",7],["(",17],["Result",18],["<",17],["Value",18],[", ",17],["Error",18],[">)",17]],"g":[["Value",0,0]],"d":"Complete the promise with the passed in `Result<Value, Error>`.\n\nThis method is equivalent to invoking:\n```\nswitch result {\ncase .success(let value):\n    promise.succeed(value)\ncase .failure(let error):\n    promise.fail(error)\n}\n```\n\n- parameters:\n    - result: The result which will be used to succeed or fail this promise."},{"p":["EventLoopPromise","completeWithTask(_:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["completeWithTask",7],["(",17],["_",1],[" ",17],["body",2],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["Task",18,1233],["<",17],["Void",18,1387],[", ",17],["Never",18,1391],[">",17]],"s":[["func",12],[" ",17],["completeWithTask",7],["(() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Value",18],[") -> ",17],["Task",18],["<",17],["Void",18],[", ",17],["Never",18],[">",17]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"g":[["Value",0,0]],"d":"Complete a future with the result (or error) of the `async` function `body`.\n\nThis function can be used to bridge the `async` world into an `EventLoopPromise`.\n\n- parameters:\n  - body: The `async` function to run.\n- returns: A `Task` which was created to `await` the `body`."},{"p":["EventLoopPromise","fail(_:)"],"f":[["func",12],[" ",17],["fail",7],["(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["fail",7],["(",17],["Error",18],[")",17]],"g":[["Value",0,0]],"d":"Deliver an error to the associated `EventLoopFuture<Value>` object.\n\n- parameters:\n     - error: The error from the operation."},{"p":["EventLoopPromise","succeed(_:)"],"f":[["func",12],[" ",17],["succeed",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["succeed",7],["(",17],["Value",18],[")",17]],"g":[["Value",0,0]],"d":"Deliver a successful result to the associated `EventLoopFuture<Value>` object.\n\n- parameters:\n    - value: The successful result of the operation."},{"p":["IdleStateHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["data",1],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":1109},{"p":["IdleStateHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":633},{"p":["IdleStateHandler","channelActive(context:)"],"f":[["func",12],[" ",17],["channelActive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["channelActive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1111},{"p":["IdleStateHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":634},{"p":["IdleStateHandler","channelReadComplete(context:)"],"f":[["func",12],[" ",17],["channelReadComplete",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["channelReadComplete",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1113},{"p":["IdleStateHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["data",1],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":1116},{"p":["MulticastChannel","leaveGroup(_:device:promise:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` leave the multicast group given by `group` on the device\ngiven by `device`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - device: The device on which to leave the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","leaveGroup(_:promise:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` leave the multicast group given by `group`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","leaveGroup(_:interface:promise:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18,128],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"a":{"a":{"d":true,"r":"leaveGroup(_:device:promise:)"}},"d":"Request that the `MulticastChannel` leave the multicast group given by `group` on the interface\ngiven by `interface`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - interface: The interface on which to leave the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","joinGroup(_:device:promise:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` join the multicast group given by `group` on the device\ngiven by `device`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - device: The device on which to join the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","joinGroup(_:promise:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` join the multicast group given by `group`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","joinGroup(_:interface:promise:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18,128],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"a":{"a":{"d":true,"r":"joinGroup(_:device:promise:)"}},"d":"Request that the `MulticastChannel` join the multicast group given by `group` on the interface\ngiven by `interface`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - interface: The interface on which to join the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","leaveGroup(_:device:promise:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` leave the multicast group given by `group` on the device\ngiven by `device`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - device: The device on which to leave the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","leaveGroup(_:device:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?) -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]]},{"p":["MulticastChannel","leaveGroup(_:promise:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":787},{"p":["MulticastChannel","leaveGroup(_:interface:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18,128],["?) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18],["?) -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"a":{"a":{"d":true,"r":"leaveGroup(_:device:)"}}},{"p":["MulticastChannel","leaveGroup(_:)"],"f":[["func",12],[" ",17],["leaveGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["leaveGroup",7],["(",17],["SocketAddress",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]]},{"p":["MulticastChannel","joinGroup(_:device:promise:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?, ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Request that the `MulticastChannel` join the multicast group given by `group` on the device\ngiven by `device`.\n\n- parameters:\n    - group: The IP address corresponding to the relevant multicast group.\n    - device: The device on which to join the given group, or `nil` to allow the kernel to choose.\n    - promise: The `EventLoopPromise` that will be notified once the operation is complete, or\n        `nil` if you are not interested in the result of the operation."},{"p":["MulticastChannel","joinGroup(_:device:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18,100],["?) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["device",1],[": ",17],["NIONetworkDevice",18],["?) -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]]},{"p":["MulticastChannel","joinGroup(_:promise:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":790},{"p":["MulticastChannel","joinGroup(_:interface:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18,128],["?) -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[", ",17],["interface",1],[": ",17],["NIONetworkInterface",18],["?) -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"a":{"a":{"d":true,"r":"joinGroup(_:device:)"}}},{"p":["MulticastChannel","joinGroup(_:)"],"f":[["func",12],[" ",17],["joinGroup",7],["(",17],["_",1],[" ",17],["group",2],[": ",17],["SocketAddress",18,44],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["joinGroup",7],["(",17],["SocketAddress",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]]},{"p":["NIOInsecureNoTLS","enableTLS(_:)"],"f":[["func",12],[" ",17],["enableTLS",7],["(",17],["_",1],[" ",17],["bootstrap",2],[": ",17],["Bootstrap",18],[") -> ",17],["Bootstrap",18]],"s":[["func",12],[" ",17],["enableTLS",7],["(",17],["Bootstrap",18],[") -> ",17],["Bootstrap",18]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",25]],"g":[["Bootstrap",0,0]],"o":851},{"p":["NIONetworkDevice","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,1393],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":1121},{"p":["EventLoopIterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18,29],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18],["?",17]],"d":"Advances to the next `EventLoop` and returns it, or `nil` if no next element exists.\n\n- returns: The next `EventLoop` if a next element exists; otherwise, `nil`.","o":1350},{"p":["BackPressureHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":634},{"p":["BackPressureHandler","channelWritabilityChanged(context:)"],"f":[["func",12],[" ",17],["channelWritabilityChanged",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["channelWritabilityChanged",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1114},{"p":["BackPressureHandler","read(context:)"],"f":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1115},{"p":["ByteBufferAllocator","buffer(dispatchData:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["dispatchData",1],[": ",17],["DispatchData",18,1118],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["dispatchData",1],[": ",17],["DispatchData",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the bytes contained in the given `DispatchData`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit the bytes of the `DispatchData` and potentially\nsome extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(staticString:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["staticString",1],[" ",17],["string",2],[": ",17],["StaticString",18,1367],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["staticString",1],[": ",17],["StaticString",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(bytes:)"],"f":[["func",12],[" ",17],["buffer",7],["<",17],["Bytes",0],[">(",17],["bytes",1],[": ",17],["Bytes",18],[") -> ",17],["ByteBuffer",18,60],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Sequence",18,1174],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,1392]],"s":[["func",12],[" ",17],["buffer",7],["<",17],["Bytes",0],[">(",17],["bytes",1],[": ",17],["Bytes",18],[") -> ",17],["ByteBuffer",18]],"c":[["Bytes",1,"Sequence",1174],["Bytes.Element",2,"UInt8",1392]],"g":[["Bytes",0,0]],"d":"Create a fresh `ByteBuffer` containing the `bytes`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `bytes` and potentially some extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(string:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["string",1],[": ",17],["String",18,1173],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["string",1],[": ",17],["String",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(integer:endianness:as:)"],"f":[["func",12],[" ",17],["buffer",7],["<",17],["I",0],[">(",17],["integer",1],[": ",17],["I",18],[", ",17],["endianness",1],[": ",17],["Endianness",18,39],[" = .big, ",17],["as",1],[": ",17],["I",18],[".Type = I.self) -> ",17],["ByteBuffer",18,60],[" ",17],["where",12],[" ",17],["I",18],[" : ",17],["FixedWidthInteger",18,1369]],"s":[["func",12],[" ",17],["buffer",7],["<",17],["I",0],[">(",17],["integer",1],[": ",17],["I",18],[", ",17],["endianness",1],[": ",17],["Endianness",18],[", ",17],["as",1],[": ",17],["I",18],[".Type) -> ",17],["ByteBuffer",18]],"c":[["I",1,"FixedWidthInteger",1369]],"g":[["I",0,0]],"d":"Create a fresh `ByteBuffer` containing the bytes of the byte representation in the given `endianness` of\n`integer`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `integer` and potentially some extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(capacity:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["capacity",1],[": ",17],["Int",18,1235],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["capacity",1],[": ",17],["Int",18],[") -> ",17],["ByteBuffer",18]],"d":"Request a freshly allocated `ByteBuffer` of size `capacity` or larger.\n\n- note: The passed `capacity` is the `ByteBuffer`'s initial capacity, it will grow automatically if necessary.\n\n- note: If `capacity` is `0`, this function will not allocate. If you want to trigger an allocation immediately,\n        also call `.clear()`.\n\n- parameters:\n    - capacity: The initial capacity of the returned `ByteBuffer`."},{"p":["ByteBufferAllocator","buffer(repeating:count:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["repeating",1],[" ",17],["byte",2],[": ",17],["UInt8",18,1392],[", ",17],["count",1],[": ",17],["Int",18,1235],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["repeating",1],[": ",17],["UInt8",18],[", ",17],["count",1],[": ",17],["Int",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing `count` repetitions of `byte`.\n\nThis will allocate a new `ByteBuffer` with at least `count` bytes.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(substring:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["substring",1],[" ",17],["string",2],[": ",17],["Substring",18,1348],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["substring",1],[": ",17],["Substring",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the bytes of the `string` encoded as UTF-8.\n\nThis will allocate a new `ByteBuffer` with enough space to fit `string` and potentially some extra space.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["ByteBufferAllocator","buffer(buffer:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the readable bytes of `buffer`.\n\nThis may allocate a new `ByteBuffer` with enough space to fit `buffer` and potentially some extra space.\n\n- note: Use this method only if you deliberately want to reallocate a potentially smaller `ByteBuffer` than the\n        one you already have. Given that `ByteBuffer` is a value type, defensive copies are not necessary. If\n        you have a `ByteBuffer` but would like the `readerIndex` to start at `0`, consider `readSlice` instead.\n\n- returns: The `ByteBuffer` containing the written bytes."},{"p":["AcceptBackoffHandler","errorCaught(context:error:)"],"f":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["error",1],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["error",1],[": ",17],["Error",18],[")",17]],"o":1110},{"p":["AcceptBackoffHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":634},{"p":["AcceptBackoffHandler","channelInactive(context:)"],"f":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1112},{"p":["AcceptBackoffHandler","read(context:)"],"f":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":1115},{"p":["ByteToMessageDecoder","decodeLast(context:buffer:seenEOF:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[", ",17],["seenEOF",1],[": ",17],["Bool",18,1232],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,43]],"s":[["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[", ",17],["seenEOF",1],[": ",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"d":"Decode from a `ByteBuffer` when no more data is incoming and the `ByteToMessageDecoder` is about to leave\nthe pipeline.\n\nThis method is called in a loop only once, when the `ChannelHandlerContext` goes inactive (i.e. when `channelInactive` is fired or\nthe `ByteToMessageDecoder` is removed from the pipeline).\n\nLike with `decode`, this method will be called in a loop until either `DecodingState.needMoreData` is returned from the method\nor until the input `ByteBuffer` has no more readable bytes. If `DecodingState.continue` is returned and the `ByteBuffer`\ncontains more readable bytes, this method will immediately be invoked again.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ByteToMessageDecoder` belongs to.\n    - buffer: The `ByteBuffer` from which we decode.\n    - seenEOF: `true` if EOF has been seen. Usually if this is `false` the handler has been removed.\n- returns: `DecodingState.continue` if we should continue calling this method or `DecodingState.needMoreData` if it should be called\n           again when more data is present in the `ByteBuffer`."},{"p":["ByteToMessageDecoder","decoderAdded(context:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Called when this `ByteToMessageDecoder` is added to the `ChannelPipeline`.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ByteToMessageDecoder` belongs to."},{"p":["ByteToMessageDecoder","decoderRemoved(context:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"d":"Called once this `ByteToMessageDecoder` is removed from the `ChannelPipeline`.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ByteToMessageDecoder` belongs to."},{"p":["ByteToMessageDecoder","shouldReclaimBytes(buffer:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["shouldReclaimBytes",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["shouldReclaimBytes",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[") -> ",17],["Bool",18]],"d":"Determine if the read bytes in the given `ByteBuffer` should be reclaimed and their associated memory freed.\nBe aware that reclaiming memory may involve memory copies and so is not free.\n\n- parameters:\n    - buffer: The `ByteBuffer` to check\n- return: `true` if memory should be reclaimed, `false` otherwise."},{"p":["ByteToMessageDecoder","decode(context:buffer:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,43]],"s":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"d":"Decode from a `ByteBuffer`.\n\nThis method will be called in a loop until either the input `ByteBuffer` has nothing to read left or\n`DecodingState.needMoreData` is returned. If `DecodingState.continue` is returned and the `ByteBuffer`\ncontains more readable bytes, this method will immediately be invoked again, unless `decodeLast` needs\nto be invoked instead.\n\n- parameters:\n    - context: The `ChannelHandlerContext` which this `ByteToMessageDecoder` belongs to.\n    - buffer: The `ByteBuffer` from which we decode.\n- returns: `DecodingState.continue` if we should continue calling this method or `DecodingState.needMoreData` if it should be called\n           again once more data is present in the `ByteBuffer`."},{"p":["ByteToMessageDecoder","decodeLast(context:buffer:seenEOF:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[", ",17],["seenEOF",1],[": ",17],["Bool",18,1232],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,43]],"s":[["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[", ",17],["seenEOF",1],[": ",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"o":821},{"p":["ByteToMessageDecoder","decoderAdded(context:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":822},{"p":["ByteToMessageDecoder","decoderRemoved(context:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":823},{"p":["ByteToMessageDecoder","wrapInboundOut(_:)"],"f":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18,119]],"s":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18]]},{"p":["ByteToMessageDecoder","shouldReclaimBytes(buffer:)"],"f":[["func",12],[" ",17],["shouldReclaimBytes",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["shouldReclaimBytes",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[") -> ",17],["Bool",18]],"d":"Default implementation to detect once bytes should be reclaimed."},{"p":["ByteToMessageHandler","removeHandler(context:removalToken:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18,132],[".",17],["RemovalToken",18,110],[")",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18],[".",17],["RemovalToken",18],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":938},{"p":["ByteToMessageHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["data",1],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"d":"Calls `decode` until there is nothing left to decode.","o":1109},{"p":["ByteToMessageHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":633},{"p":["ByteToMessageHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":634},{"p":["ByteToMessageHandler","channelInactive(context:)"],"f":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"d":"Call `decodeLast` before forward the event through the pipeline.","o":1112},{"p":["ByteToMessageHandler","userInboundEventTriggered(context:event:)"],"f":[["func",12],[" ",17],["userInboundEventTriggered",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["event",1],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["userInboundEventTriggered",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["event",1],[": ",17],["Any",12],[")",17]],"e":[["Decoder",1,"ByteToMessageDecoder",13]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":1108},{"p":["ByteToMessageHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["data",1],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"e":[["Decoder",1,"WriteObservingByteToMessageDecoder",27]],"c":[["Decoder",1,"WriteObservingByteToMessageDecoder",27]],"g":[["Decoder",0,0]],"o":1116},{"p":["MarkedCircularBuffer","isMarked(index:)"],"f":[["func",12],[" ",17],["isMarked",7],["(",17],["index",1],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["isMarked",7],["(",17],["index",1],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"g":[["Element",0,0]],"d":"Returns true if the buffer is currently marked at the given index."},{"p":["MarkedCircularBuffer","removeFirst()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"s":[["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes the first element from the buffer."},{"p":["MarkedCircularBuffer","mark()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["mark",7],["()",17]],"s":[["func",12],[" ",17],["mark",7],["()",17]],"g":[["Element",0,0]],"d":"Marks the buffer at the current index, making the last index in the buffer marked."},{"p":["MarkedCircularBuffer","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[") -> ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"o":1263},{"p":["MarkedCircularBuffer","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[") -> ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"o":1238},{"p":["MarkedCircularBuffer","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,1235],[") -> ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086]],"s":[["func",12],[" ",17],["index",7],["(",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18]],"g":[["Element",0,0]],"o":1264},{"p":["MarkedCircularBuffer","append(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Element",18],[")",17]],"s":[["func",12],[" ",17],["append",7],["(",17],["Element",18],[")",17]],"g":[["Element",0,0]],"d":"Appends an entry to the buffer, expanding it if needed."},{"p":["MarkedCircularBuffer","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["MarkedCircularBuffer",18,108],["<",17],["Element",18],[">.",17],["Index",18,1086],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["MarkedCircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"o":1267},{"p":["MarkedCircularBuffer","popFirst()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"g":[["Element",0,0]]},{"p":["MessageToByteEncoder","encode(data:out:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["data",1],[": ",17],["Self",18],[".",17],["OutboundIn",18],[", ",17],["out",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["data",1],[": ",17],["Self",18],[".",17],["OutboundIn",18],[", ",17],["out",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12]],"d":"Called once there is data to encode.\n\n- parameters:\n    - data: The data to encode into a `ByteBuffer`.\n    - out: The `ByteBuffer` into which we want to encode."},{"p":["MessageToByteHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"e":[["Encoder",1,"MessageToByteEncoder",14]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"o":633},{"p":["MessageToByteHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"e":[["Encoder",1,"MessageToByteEncoder",14]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"o":634},{"p":["MessageToByteHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["data",1],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"e":[["Encoder",1,"MessageToByteEncoder",14]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"o":1116},{"p":["NIOClientTLSProvider","enableTLS(_:)"],"f":[["func",12],[" ",17],["enableTLS",7],["(",17],["_",1],[" ",17],["bootstrap",2],[": ",17],["Self",18],[".",17],["Bootstrap",18],[") -> ",17],["Self",18],[".",17],["Bootstrap",18]],"s":[["func",12],[" ",17],["enableTLS",7],["(",17],["Self",18],[".",17],["Bootstrap",18],[") -> ",17],["Self",18],[".",17],["Bootstrap",18]]},{"p":["SocketOptionProvider","unsafeGetSocketOption(level:name:)"],"f":[["func",12],[" ",17],["unsafeGetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["unsafeGetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,1]],"d":"Obtain the value of the socket option for the given level and name.\n\nThis function is not memory-safe: if you set the generic type parameter incorrectly,\nthis function will still execute, and this can cause you to incorrectly interpret memory\nand thereby read uninitialized or invalid memory. If at all possible, please use one of\nthe safe functions defined by this protocol.\n\n- parameters:\n    - level: The socket option level, e.g. `SOL_SOCKET` or `IPPROTO_IP`.\n    - name: The name of the socket option, e.g. `SO_REUSEADDR`.\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","unsafeGetSocketOption(level:name:)"],"f":[["func",12],[" ",17],["unsafeGetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["SocketOptionLevel",18,1071],[", ",17],["name",1],[": ",17],["SocketOptionName",18,1069],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">",17]],"s":[["func",12],[" ",17],["unsafeGetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["SocketOptionLevel",18],[", ",17],["name",1],[": ",17],["SocketOptionName",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Value",18],[">",17]],"g":[["Value",0,1]],"d":"Obtain the value of the socket option for the given level and name.\n\nThis function is not memory-safe: if you set the generic type parameter incorrectly,\nthis function will still execute, and this can cause you to incorrectly interpret memory\nand thereby read uninitialized or invalid memory. If at all possible, please use one of\nthe safe functions defined by this protocol.\n\n- parameters:\n    - level: The socket option level, e.g. `SOL_SOCKET` or `IPPROTO_IP`.\n    - name: The name of the socket option, e.g. `SO_REUSEADDR`.\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","unsafeSetSocketOption(level:name:value:)"],"f":[["func",12],[" ",17],["unsafeSetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["OptionLevel",18,66],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18,42],[".",17],["Option",18,69],[", ",17],["value",1],[": ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["unsafeSetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["NIOBSDSocket",18],[".",17],["OptionLevel",18],[", ",17],["name",1],[": ",17],["NIOBSDSocket",18],[".",17],["Option",18],[", ",17],["value",1],[": ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["Value",0,1]],"d":"Set a socket option for a given level and name to the specified value.\n\nThis function is not memory-safe: if you set the generic type parameter incorrectly,\nthis function will still execute, and this can cause you to incorrectly interpret memory\nand thereby read uninitialized or invalid memory. If at all possible, please use one of\nthe safe functions defined by this protocol.\n\n- parameters:\n    - level: The socket option level, e.g. `SOL_SOCKET` or `IPPROTO_IP`.\n    - name: The name of the socket option, e.g. `SO_REUSEADDR`.\n    - value: The value to set the socket option to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","unsafeSetSocketOption(level:name:value:)"],"f":[["func",12],[" ",17],["unsafeSetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["SocketOptionLevel",18,1071],[", ",17],["name",1],[": ",17],["SocketOptionName",18,1069],[", ",17],["value",1],[": ",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["unsafeSetSocketOption",7],["<",17],["Value",0],[">(",17],["level",1],[": ",17],["SocketOptionLevel",18],[", ",17],["name",1],[": ",17],["SocketOptionName",18],[", ",17],["value",1],[": ",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["Value",0,1]],"d":"Set a socket option for a given level and name to the specified value.\n\nThis function is not memory-safe: if you set the generic type parameter incorrectly,\nthis function will still execute, and this can cause you to incorrectly interpret memory\nand thereby read uninitialized or invalid memory. If at all possible, please use one of\nthe safe functions defined by this protocol.\n\n- parameters:\n    - level: The socket option level, e.g. `SOL_SOCKET` or `IPPROTO_IP`.\n    - name: The name of the socket option, e.g. `SO_REUSEADDR`.\n    - value: The value to set the socket option to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","getTCPInfo()"],"f":[["func",12],[" ",17],["getTCPInfo",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["tcp_info",18,1106],[">",17]],"s":[["func",12],[" ",17],["getTCPInfo",7],["() -> ",17],["EventLoopFuture",18],["<",17],["tcp_info",18],[">",17]],"d":"Gets the value of the socket option TCP_INFO.\n\nThis socket option cannot be set.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","getSoLinger()"],"f":[["func",12],[" ",17],["getSoLinger",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["linger",18,1101],[">",17]],"s":[["func",12],[" ",17],["getSoLinger",7],["() -> ",17],["EventLoopFuture",18],["<",17],["linger",18],[">",17]],"d":"Gets the value of the socket option SO_LINGER.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","setSoLinger(_:)"],"f":[["func",12],[" ",17],["setSoLinger",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["linger",18,1101],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setSoLinger",7],["(",17],["linger",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option SO_LINGER to `value`.\n\n- parameters:\n    - value: The value to set SO_LINGER to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","getIPMulticastIF()"],"f":[["func",12],[" ",17],["getIPMulticastIF",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["in_addr",18,1100],[">",17]],"s":[["func",12],[" ",17],["getIPMulticastIF",7],["() -> ",17],["EventLoopFuture",18],["<",17],["in_addr",18],[">",17]],"d":"Gets the value of the socket option IP_MULTICAST_IF.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","setIPMulticastIF(_:)"],"f":[["func",12],[" ",17],["setIPMulticastIF",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["in_addr",18,1100],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPMulticastIF",7],["(",17],["in_addr",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IP_MULTICAST_IF to `value`.\n\n- parameters:\n    - value: The value to set IP_MULTICAST_IF to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","getIPMulticastTTL()"],"f":[["func",12],[" ",17],["getIPMulticastTTL",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["CUnsignedChar",18,1368],[">",17]],"s":[["func",12],[" ",17],["getIPMulticastTTL",7],["() -> ",17],["EventLoopFuture",18],["<",17],["CUnsignedChar",18],[">",17]],"d":"Gets the value of the socket option IP_MULTICAST_TTL.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","setIPMulticastTTL(_:)"],"f":[["func",12],[" ",17],["setIPMulticastTTL",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["CUnsignedChar",18,1368],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPMulticastTTL",7],["(",17],["CUnsignedChar",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IP_MULTICAST_TTL to `value`.\n\n- parameters:\n    - value: The value to set IP_MULTICAST_TTL to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","getIPMulticastLoop()"],"f":[["func",12],[" ",17],["getIPMulticastLoop",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["CUnsignedChar",18,1368],[">",17]],"s":[["func",12],[" ",17],["getIPMulticastLoop",7],["() -> ",17],["EventLoopFuture",18],["<",17],["CUnsignedChar",18],[">",17]],"d":"Gets the value of the socket option IP_MULTICAST_LOOP.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","getIPv6MulticastIF()"],"f":[["func",12],[" ",17],["getIPv6MulticastIF",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["CUnsignedInt",18,1366],[">",17]],"s":[["func",12],[" ",17],["getIPv6MulticastIF",7],["() -> ",17],["EventLoopFuture",18],["<",17],["CUnsignedInt",18],[">",17]],"d":"Gets the value of the socket option IPV6_MULTICAST_IF.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","setIPMulticastLoop(_:)"],"f":[["func",12],[" ",17],["setIPMulticastLoop",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["CUnsignedChar",18,1368],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPMulticastLoop",7],["(",17],["CUnsignedChar",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IP_MULTICAST_LOOP to `value`.\n\n- parameters:\n    - value: The value to set IP_MULTICAST_LOOP to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","setIPv6MulticastIF(_:)"],"f":[["func",12],[" ",17],["setIPv6MulticastIF",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["CUnsignedInt",18,1366],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPv6MulticastIF",7],["(",17],["CUnsignedInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IPV6_MULTICAST_IF to `value`.\n\n- parameters:\n    - value: The value to set IPV6_MULTICAST_IF to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","getIPv6MulticastHops()"],"f":[["func",12],[" ",17],["getIPv6MulticastHops",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["CInt",18,1386],[">",17]],"s":[["func",12],[" ",17],["getIPv6MulticastHops",7],["() -> ",17],["EventLoopFuture",18],["<",17],["CInt",18],[">",17]],"d":"Gets the value of the socket option IPV6_MULTICAST_HOPS.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","getIPv6MulticastLoop()"],"f":[["func",12],[" ",17],["getIPv6MulticastLoop",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["CUnsignedInt",18,1366],[">",17]],"s":[["func",12],[" ",17],["getIPv6MulticastLoop",7],["() -> ",17],["EventLoopFuture",18],["<",17],["CUnsignedInt",18],[">",17]],"d":"Gets the value of the socket option IPV6_MULTICAST_LOOP.\n\n- returns: An `EventLoopFuture` containing the value of the socket option, or\n    any error that occurred while retrieving the socket option."},{"p":["SocketOptionProvider","setIPv6MulticastHops(_:)"],"f":[["func",12],[" ",17],["setIPv6MulticastHops",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["CInt",18,1386],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPv6MulticastHops",7],["(",17],["CInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IPV6_MULTICAST_HOPS to `value`.\n\n- parameters:\n    - value: The value to set IPV6_MULTICAST_HOPS to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["SocketOptionProvider","setIPv6MulticastLoop(_:)"],"f":[["func",12],[" ",17],["setIPv6MulticastLoop",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["CUnsignedInt",18,1366],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["setIPv6MulticastLoop",7],["(",17],["CUnsignedInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Sets the socket option IPV6_MULTICAST_LOOP to `value`.\n\n- parameters:\n    - value: The value to set IPV6_MULTICAST_LOOP to.\n- returns: An `EventLoopFuture` that fires when the option has been set,\n    or if an error has occurred."},{"p":["ChannelHandlerContext","fireChannelRegistered()"],"f":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"d":"Send a `channelRegistered` event to the next (inbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `channelRegistered` event using this method at the right point in time, that is usually when received.","o":894},{"p":["ChannelHandlerContext","fireChannelReadComplete()"],"f":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"d":"Signal to the next `ChannelHandler` that a read burst has finished.","o":895},{"p":["ChannelHandlerContext","fireChannelUnregistered()"],"f":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"d":"Send a `channelUnregistered` event to the next (inbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `channelUnregistered` event using this method at the right point in time, that is usually when received.","o":896},{"p":["ChannelHandlerContext","fireChannelWritabilityChanged()"],"f":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"d":"Send a `writabilityChanged` event to the next (inbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `writabilityChanged` event using this method at the right point in time, that is usually when received.","o":897},{"p":["ChannelHandlerContext","fireChannelRead(_:)"],"f":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["NIOAny",18],[")",17]],"d":"Send data to the next inbound `ChannelHandler`. The data should be of type `ChannelInboundHandler.InboundOut`.","o":898},{"p":["ChannelHandlerContext","fireChannelActive()"],"f":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"d":"Send a `channelActive` event to the next (inbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `channelActive` event using this method at the right point in time, that is often when received.","o":899},{"p":["ChannelHandlerContext","fireChannelInactive()"],"f":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"d":"Send a `channelInactive` event to the next (inbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `channelInactive` event using this method at the right point in time, that is often when received.","o":900},{"p":["ChannelHandlerContext","leavePipeline(removalToken:)"],"f":[["func",12],[" ",17],["leavePipeline",7],["(",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18,132],[".",17],["RemovalToken",18,110],[")",17]],"s":[["func",12],[" ",17],["leavePipeline",7],["(",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18],[".",17],["RemovalToken",18],[")",17]],"d":"Synchronously remove the `ChannelHandler` with the given `ChannelHandlerContext`.\n\n- note: This function must only be used from a `RemovableChannelHandler` to remove itself. Calling this method\n        on any other `ChannelHandlerContext` leads to undefined behaviour.\n\n- parameters:\n   - removalToken: The removal token received from `RemovableChannelHandler.removeHandler`"},{"p":["ChannelHandlerContext","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `write` event followed by a `flush` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `write` event reaches the `HeadChannelHandler` the data will be enqueued to be written when the `flush`\nalso reaches the `HeadChannelHandler`.\n\n- parameters:\n    - data: The data to write, should be of type `ChannelOutboundHandler.OutboundOut`.\n    - promise: The promise fulfilled when the previously written data been written and flushed or if that failed.","o":914},{"p":["ChannelHandlerContext","fireErrorCaught(_:)"],"f":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["Error",18],[")",17]],"d":"Send an error to the next inbound `ChannelHandler`.","o":902},{"p":["ChannelHandlerContext","triggerUserOutboundEvent(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a user event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\n\n- parameters:\n    - event: The user event to send.\n    - promise: The promise fulfilled when the user event has been sent or failed if it couldn't be sent.","o":913},{"p":["ChannelHandlerContext","fireUserInboundEventTriggered(_:)"],"f":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["Any",12],[")",17]],"d":"Send a user event to the next inbound `ChannelHandler`.","o":901},{"p":["ChannelHandlerContext","bind(to:promise:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `bind` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `bind` event reaches the `HeadChannelHandler` a `ServerSocketChannel` will be bound.\n\n- parameters:\n    - address: The address to bind to.\n    - promise: The promise fulfilled when the socket is bound or failed if it cannot be bound.","o":915},{"p":["ChannelHandlerContext","read()"],"f":[["func",12],[" ",17],["read",7],["()",17]],"s":[["func",12],[" ",17],["read",7],["()",17]],"d":"Send a `read` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `read` event reaches the `HeadChannelHandler` the interest to read data will be signalled to the\n`Selector`. This will subsequently -- when data becomes readable -- cause `channelRead` events containing the\ndata being sent through the `ChannelPipeline`.","o":916},{"p":["ChannelHandlerContext","close(mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `close` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `close` event reaches the `HeadChannelHandler` the socket will be closed.\n\n- parameters:\n    - mode: The `CloseMode` to use.\n    - promise: The promise fulfilled when the `Channel` has been closed or failed if it the closing failed.","o":917},{"p":["ChannelHandlerContext","flush()"],"f":[["func",12],[" ",17],["flush",7],["()",17]],"s":[["func",12],[" ",17],["flush",7],["()",17]],"d":"Send a `flush` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `flush` event reaches the `HeadChannelHandler` the data previously enqueued will be attempted to be\nwritten to the socket.\n\n- parameters:\n    - promise: The promise fulfilled when the previously written data been flushed or failed if it cannot be flushed.","o":918},{"p":["ChannelHandlerContext","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `write` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `write` event reaches the `HeadChannelHandler` the data will be enqueued to be written on the next\n`flush` event.\n\n- parameters:\n    - data: The data to write, should be of type `ChannelOutboundHandler.OutboundOut`.\n    - promise: The promise fulfilled when the data has been written or failed if it cannot be written.","o":919},{"p":["ChannelHandlerContext","connect(to:promise:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `connect` event to the next outbound `ChannelHandler` in the `ChannelPipeline`.\nWhen the `connect` event reaches the `HeadChannelHandler` a `SocketChannel` will be connected.\n\n- parameters:\n    - address: The address to connect to.\n    - promise: The promise fulfilled when the socket is connected or failed if it cannot be connected.","o":920},{"p":["ChannelHandlerContext","register(promise:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Send a `register` event to the next (outbound) `ChannelHandler` in the `ChannelPipeline`.\n\n- note: For correct operation it is very important to forward any `register` event using this method at the right point in time, that is usually when received.","o":921},{"p":["ChannelInboundHandler","wrapInboundOut(_:)"],"f":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18,119]],"s":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18]],"d":"Wrap the provided `InboundOut` that will be passed to the next `ChannelInboundHandler` by calling `ChannelHandlerContext.fireChannelRead`."},{"p":["ChannelInboundHandler","unwrapInboundIn(_:)"],"f":[["func",12],[" ",17],["unwrapInboundIn",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["NIOAny",18,119],[") -> ",17],["Self",18],[".",17],["InboundIn",18]],"s":[["func",12],[" ",17],["unwrapInboundIn",7],["(",17],["NIOAny",18],[") -> ",17],["Self",18],[".",17],["InboundIn",18]],"d":"Unwrap the provided `NIOAny` that was passed to `channelRead`."},{"p":["ChannelInboundHandler","wrapInboundOut(_:)"],"f":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18,119]],"s":[["func",12],[" ",17],["wrapInboundOut",7],["(",17],["Self",18],[".",17],["InboundOut",18],[") -> ",17],["NIOAny",18]],"o":890},{"p":["ChannelInboundHandler","unwrapInboundIn(_:)"],"f":[["func",12],[" ",17],["unwrapInboundIn",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["NIOAny",18,119],[") -> ",17],["Self",18],[".",17],["InboundIn",18]],"s":[["func",12],[" ",17],["unwrapInboundIn",7],["(",17],["NIOAny",18],[") -> ",17],["Self",18],[".",17],["InboundIn",18]],"o":891},{"p":["ChannelInboundInvoker","fireChannelRegistered()"],"f":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelRegistered",7],["()",17]],"d":"Called once a `Channel` was registered to its `EventLoop` and so IO will be processed."},{"p":["ChannelInboundInvoker","fireChannelReadComplete()"],"f":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelReadComplete",7],["()",17]],"d":"Called once there is no more data to read immediately on a `Channel`. Any new data received will be handled later."},{"p":["ChannelInboundInvoker","fireChannelUnregistered()"],"f":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelUnregistered",7],["()",17]],"d":"Called once a `Channel` was unregistered from its `EventLoop` which means no IO will be handled for a `Channel` anymore."},{"p":["ChannelInboundInvoker","fireChannelWritabilityChanged()"],"f":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelWritabilityChanged",7],["()",17]],"d":"Called when a `Channel`'s writable state changes.\n\nThe writability state of a Channel depends on watermarks that can be set via `Channel.setOption` and how much data\nis still waiting to be transferred to the remote peer.\nYou should take care to enforce some kind of backpressure if the channel becomes unwritable which means `Channel.isWritable`\nwill return `false` to ensure you do not consume too much memory due to queued writes. What exactly you should do here depends on the\nprotocol and other semantics. But for example you may want to stop writing to the `Channel` until `Channel.writable` becomes\n`true` again or stop reading at all."},{"p":["ChannelInboundInvoker","fireChannelRead(_:)"],"f":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[")",17]],"s":[["func",12],[" ",17],["fireChannelRead",7],["(",17],["NIOAny",18],[")",17]],"d":"Called once there is some data read for a `Channel` that needs processing.\n\n- parameters:\n    - data: the data that was read and is ready to be processed."},{"p":["ChannelInboundInvoker","fireChannelActive()"],"f":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelActive",7],["()",17]],"d":"Called once a `Channel` becomes active.\n\nWhat active means depends on the `Channel` implementation and semantics.\nFor example for TCP it means the `Channel` is connected to the remote peer."},{"p":["ChannelInboundInvoker","fireChannelInactive()"],"f":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"s":[["func",12],[" ",17],["fireChannelInactive",7],["()",17]],"d":"Called once a `Channel` becomes inactive.\n\nWhat inactive means depends on the `Channel` implementation and semantics.\nFor example for TCP it means the `Channel` was disconnected from the remote peer and closed."},{"p":["ChannelInboundInvoker","fireUserInboundEventTriggered(_:)"],"f":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["fireUserInboundEventTriggered",7],["(",17],["Any",12],[")",17]],"d":"Trigger a custom user inbound event which will flow through the `ChannelPipeline`.\n\n- parameters:\n    - event: the event itself."},{"p":["ChannelInboundInvoker","fireErrorCaught(_:)"],"f":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["fireErrorCaught",7],["(",17],["Error",18],[")",17]],"d":"Called when an inbound operation `Error` was caught.\n\nBe aware that for inbound operations this method is called while for outbound operations defined in `ChannelOutboundInvoker`\nthe `EventLoopFuture` or `EventLoopPromise` will be notified.\n\n- parameters:\n    - error: the error we encountered."},{"p":["NIOClientTCPBootstrap","channelOption(_:value:)"],"f":[["func",12],[" ",17],["channelOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["NIOClientTCPBootstrap",18,111],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["channelOption",7],["<",17],["Option",0],[">(",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["NIOClientTCPBootstrap",18]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,0]],"d":"Specifies a `ChannelOption` to be applied to the `SocketChannel`.\n\n- parameters:\n    - option: The option to be applied.\n    - value: The value for the option."},{"p":["NIOClientTCPBootstrap","connectTimeout(_:)"],"f":[["func",12],[" ",17],["connectTimeout",7],["(",17],["_",1],[" ",17],["timeout",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["NIOClientTCPBootstrap",18,111]],"s":[["func",12],[" ",17],["connectTimeout",7],["(",17],["TimeAmount",18],[") -> ",17],["NIOClientTCPBootstrap",18]],"d":"- parameters:\n    - timeout: The timeout that will apply to the connection attempt."},{"p":["NIOClientTCPBootstrap","channelInitializer(_:)"],"f":[["func",12],[" ",17],["channelInitializer",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["@escaping",12],[" (",17],["Channel",18,28],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">) -> ",17],["NIOClientTCPBootstrap",18,111]],"s":[["func",12],[" ",17],["channelInitializer",7],["((",17],["Channel",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">) -> ",17],["NIOClientTCPBootstrap",18]],"d":"Initialize the connected `SocketChannel` with `initializer`. The most common task in initializer is to add\n`ChannelHandler`s to the `ChannelPipeline`.\n\nThe connected `Channel` will operate on `ByteBuffer` as inbound and `IOData` as outbound messages.\n\n- warning: The `handler` closure may be invoked _multiple times_ so it's usually the right choice to instantiate\n           `ChannelHandler`s within `handler`. The reason `handler` may be invoked multiple times is that to\n           successfully set up a connection multiple connections might be setup in the process. Assuming a\n           hostname that resolves to both IPv4 and IPv6 addresses, NIO will follow\n           [_Happy Eyeballs_](https://en.wikipedia.org/wiki/Happy_Eyeballs) and race both an IPv4 and an IPv6\n           connection. It is possible that both connections get fully established before the IPv4 connection\n           will be closed again because the IPv6 connection 'won the race'. Therefore the `channelInitializer`\n           might be called multiple times and it's important not to share stateful `ChannelHandler`s in more\n           than one `Channel`.\n\n- parameters:\n    - handler: A closure that initializes the provided `Channel`."},{"p":["NIOClientTCPBootstrap","channelConvenienceOptions(_:)"],"f":[["func",12],[" ",17],["channelConvenienceOptions",7],["(",17],["_",1],[" ",17],["options",2],[": ",17],["ChannelOptions",18,77],[".",17],["TCPConvenienceOptions",18,78],[") -> ",17],["NIOClientTCPBootstrap",18,111]],"s":[["func",12],[" ",17],["channelConvenienceOptions",7],["(",17],["ChannelOptions",18],[".",17],["TCPConvenienceOptions",18],[") -> ",17],["NIOClientTCPBootstrap",18]],"d":"Specifies some `TCPConvenienceOption`s to be applied to the channel.\nThese are preferred over regular channel options as they are easier to use and restrict\noptions to those which a normal user would consider.\n- Parameter options: Set of convenience options to apply.\n- Returns: The updated bootstrap (`self` being mutated)"},{"p":["NIOClientTCPBootstrap","connect(unixDomainSocketPath:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18,1173],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `unixDomainSocket` path to connect to for the UDS `Channel` that will be established.\n\n- parameters:\n    - unixDomainSocketPath: The _Unix domain socket_ path to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["NIOClientTCPBootstrap","connect(to:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `address` to connect to for the TCP `Channel` that will be established.\n\n- parameters:\n    - address: The address to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["NIOClientTCPBootstrap","connect(host:port:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["host",1],[": ",17],["String",18,1173],[", ",17],["port",1],[": ",17],["Int",18,1235],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["host",1],[": ",17],["String",18],[", ",17],["port",1],[": ",17],["Int",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `host` and `port` to connect to for the TCP `Channel` that will be established.\n\n- parameters:\n    - host: The host to connect to.\n    - port: The port to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["NIOClientTCPBootstrap","enableTLS()"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["enableTLS",7],["() -> ",17],["NIOClientTCPBootstrap",18,111]],"s":[["func",12],[" ",17],["enableTLS",7],["() -> ",17],["NIOClientTCPBootstrap",18]]},{"p":["ChannelOutboundHandler","unwrapOutboundIn(_:)"],"f":[["func",12],[" ",17],["unwrapOutboundIn",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["NIOAny",18,119],[") -> ",17],["Self",18],[".",17],["OutboundIn",18]],"s":[["func",12],[" ",17],["unwrapOutboundIn",7],["(",17],["NIOAny",18],[") -> ",17],["Self",18],[".",17],["OutboundIn",18]],"d":"Unwrap the provided `NIOAny` that was passed to `write`."},{"p":["ChannelOutboundHandler","unwrapOutboundIn(_:)"],"f":[["func",12],[" ",17],["unwrapOutboundIn",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["NIOAny",18,119],[") -> ",17],["Self",18],[".",17],["OutboundIn",18]],"s":[["func",12],[" ",17],["unwrapOutboundIn",7],["(",17],["NIOAny",18],[") -> ",17],["Self",18],[".",17],["OutboundIn",18]],"o":911},{"p":["ChannelOutboundInvoker","triggerUserOutboundEvent(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Trigger a custom user outbound event which will flow through the `ChannelPipeline`.\n\n- parameters:\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Shortcut for calling `write` and `flush`.\n\n- parameters:\n    - data: the data to write\n    - promise: the `EventLoopPromise` that will be notified once the `write` operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","bind(to:promise:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Bind to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should bind the `Channel`.\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","read()"],"f":[["func",12],[" ",17],["read",7],["()",17]],"s":[["func",12],[" ",17],["read",7],["()",17]],"d":"Signal that we want to read from the `Channel` once there is data ready.\n\nIf `ChannelOptions.autoRead` is set for a `Channel` (which is the default) this method is automatically invoked by the transport implementation,\notherwise it's the user's responsibility to call this method manually once new data should be read and processed.\n"},{"p":["ChannelOutboundInvoker","close(mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Close the `Channel` and so the connection if one exists.\n\n- parameters:\n    - mode: the `CloseMode` that is used\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","flush()"],"f":[["func",12],[" ",17],["flush",7],["()",17]],"s":[["func",12],[" ",17],["flush",7],["()",17]],"d":"Flush data that was previously written via `write` to the remote peer."},{"p":["ChannelOutboundInvoker","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Write data to the remote peer.\n\nBe aware that to be sure that data is really written to the remote peer you need to call `flush` or use `writeAndFlush`.\nCalling `write` multiple times and then `flush` may allow the `Channel` to `write` multiple data objects to the remote peer with one syscall.\n\n- parameters:\n    - data: the data to write\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","connect(to:promise:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Connect to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should connect the `Channel`.\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","register(promise:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Register on an `EventLoop` and so have all its IO handled.\n\n- parameters:\n    - promise: the `EventLoopPromise` that will be notified once the operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["ChannelOutboundInvoker","triggerUserOutboundEvent(_:file:line:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Trigger a custom user outbound event which will flow through the `ChannelPipeline`.\n\n- parameters:\n    - event: the event itself.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","triggerUserOutboundEvent(_:file:line:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Trigger a custom user outbound event which will flow through the `ChannelPipeline`.\n\n- parameters:\n    - event: the event itself.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","writeAndFlush(_:file:line:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Shortcut for calling `write` and `flush`.\n\n- parameters:\n    - data: the data to write\n- returns: the future which will be notified once the `write` operation completes."},{"p":["ChannelOutboundInvoker","writeAndFlush(_:file:line:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Shortcut for calling `write` and `flush`.\n\n- parameters:\n    - data: the data to write\n- returns: the future which will be notified once the `write` operation completes."},{"p":["ChannelOutboundInvoker","bind(to:file:line:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Bind to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should bind the `Channel`.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","bind(to:file:line:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Bind to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should bind the `Channel`.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","close(mode:file:line:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Close the `Channel` and so the connection if one exists.\n\n- parameters:\n    - mode: the `CloseMode` that is used\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","close(mode:file:line:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Close the `Channel` and so the connection if one exists.\n\n- parameters:\n    - mode: the `CloseMode` that is used\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","write(_:file:line:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Write data to the remote peer.\n\nBe aware that to be sure that data is really written to the remote peer you need to call `flush` or use `writeAndFlush`.\nCalling `write` multiple times and then `flush` may allow the `Channel` to `write` multiple data objects to the remote peer with one syscall.\n\n- parameters:\n    - data: the data to write\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","connect(to:file:line:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Connect to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should connect the `Channel`.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","connect(to:file:line:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Connect to a `SocketAddress`.\n- parameters:\n    - to: the `SocketAddress` to which we should connect the `Channel`.\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","register(file:line:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Register on an `EventLoop` and so have all its IO handled.\n\n- returns: the future which will be notified once the operation completes."},{"p":["ChannelOutboundInvoker","register(file:line:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["register",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"d":"Register on an `EventLoop` and so have all its IO handled.\n\n- returns: the future which will be notified once the operation completes."},{"p":["NIOCloseOnErrorHandler","errorCaught(context:error:)"],"f":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["error",1],[": ",17],["Error",18,1388],[")",17]],"s":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["error",1],[": ",17],["Error",18],[")",17]],"o":1110},{"p":["RecvByteBufferAllocator","buffer(allocator:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18,105],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18],[") -> ",17],["ByteBuffer",18]],"d":"Allocates a new `ByteBuffer` that will be used to read bytes from a `Channel`."},{"p":["RecvByteBufferAllocator","record(actualReadBytes:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18,1235],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18],[") -> ",17],["Bool",18]],"d":"Records the actual number of bytes that were read by the last socket call.\n\n- parameters:\n    - actualReadBytes: The number of bytes that were used by the previous allocated `ByteBuffer`\n- returns: `true` if the next call to `buffer` may return a bigger buffer then the last call to `buffer`."},{"p":["RemovableChannelHandler","removeHandler(context:removalToken:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18,132],[".",17],["RemovalToken",18,110],[")",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18],[".",17],["RemovalToken",18],[")",17]],"d":"Ask the receiving `RemovableChannelHandler` to remove itself from the `ChannelPipeline` as soon as possible.\nThe receiving `RemovableChannelHandler` may elect to remove itself sometime after this method call, rather than\nimmediately, but if it does so it must take the necessary precautions to handle events arriving between the\ninvocation of this method and the call to `ChannelHandlerContext.removeHandler` that triggers the actual\nremoval.\n\n- note: Like the other `ChannelHandler` methods, this method should not be invoked by the user directly. To\n        remove a `RemovableChannelHandler` from the `ChannelPipeline`, use `ChannelPipeline.remove`.\n\n- parameters:\n   - context: The `ChannelHandlerContext` of the `RemovableChannelHandler` to be removed from the `ChannelPipeline`.\n   - removalToken: The removal token to hand to `ChannelHandlerContext.removeHandler` to trigger the actual\n                   removal from the `ChannelPipeline`."},{"p":["RemovableChannelHandler","removeHandler(context:removalToken:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18,132],[".",17],["RemovalToken",18,110],[")",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18],[".",17],["RemovalToken",18],[")",17]],"o":938},{"p":["NIOSynchronousChannelOptions","getOption(_:)"],"f":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[") ",17],["throws",12],[" -> ",17],["Option",18],[".",17],["Value",18],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["Option",18],[") ",17],["throws",12],[" -> ",17],["Option",18],[".",17],["Value",18]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Get the value of `option` for this `Channel`.\n\n- Important: Must be called on the `EventLoop` the `Channel` is running on."},{"p":["NIOSynchronousChannelOptions","setOption(_:value:)"],"f":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") ",17],["throws",12],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") ",17],["throws",12]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Set `option` to `value` on this `Channel`.\n\n- Important: Must be called on the `EventLoop` the `Channel` is running on."},{"p":["NIOClientTCPBootstrapProtocol","channelOption(_:value:)"],"f":[["func",12],[" ",17],["channelOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["channelOption",7],["<",17],["Option",0],[">(",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["Self",18]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Specifies a `ChannelOption` to be applied to the `SocketChannel`.\n\n- parameters:\n    - option: The option to be applied.\n    - value: The value for the option."},{"p":["NIOClientTCPBootstrapProtocol","connectTimeout(_:)"],"f":[["func",12],[" ",17],["connectTimeout",7],["(",17],["_",1],[" ",17],["timeout",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["connectTimeout",7],["(",17],["TimeAmount",18],[") -> ",17],["Self",18]],"d":"- parameters:\n    - timeout: The timeout that will apply to the connection attempt."},{"p":["NIOClientTCPBootstrapProtocol","protocolHandlers(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["protocolHandlers",7],["(",17],["_",1],[" ",17],["handlers",2],[": ",17],["@escaping",12],[" () -> [",17],["ChannelHandler",18,8],["]) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["protocolHandlers",7],["(() -> [",17],["ChannelHandler",18],["]) -> ",17],["Self",18]],"d":"Sets the protocol handlers that will be added to the front of the `ChannelPipeline` right after the\n`channelInitializer` has been called.\n\nPer bootstrap, you can only set the `protocolHandlers` once. Typically, `protocolHandlers` are used for the TLS\nimplementation. Most notably, `NIOClientTCPBootstrap`, NIO's \"universal bootstrap\" abstraction, uses\n`protocolHandlers` to add the required `ChannelHandler`s for many TLS implementations."},{"p":["NIOClientTCPBootstrapProtocol","channelInitializer(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["channelInitializer",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["@escaping",12],[" (",17],["Channel",18,28],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["channelInitializer",7],["((",17],["Channel",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">) -> ",17],["Self",18]],"d":"Initialize the connected `SocketChannel` with `initializer`. The most common task in initializer is to add\n`ChannelHandler`s to the `ChannelPipeline`.\n\nThe connected `Channel` will operate on `ByteBuffer` as inbound and `IOData` as outbound messages.\n\n- warning: The `handler` closure may be invoked _multiple times_ so it's usually the right choice to instantiate\n           `ChannelHandler`s within `handler`. The reason `handler` may be invoked multiple times is that to\n           successfully set up a connection multiple connections might be setup in the process. Assuming a\n           hostname that resolves to both IPv4 and IPv6 addresses, NIO will follow\n           [_Happy Eyeballs_](https://en.wikipedia.org/wiki/Happy_Eyeballs) and race both an IPv4 and an IPv6\n           connection. It is possible that both connections get fully established before the IPv4 connection\n           will be closed again because the IPv6 connection 'won the race'. Therefore the `channelInitializer`\n           might be called multiple times and it's important not to share stateful `ChannelHandler`s in more\n           than one `Channel`.\n\n- parameters:\n    - handler: A closure that initializes the provided `Channel`."},{"p":["NIOClientTCPBootstrapProtocol","connect(unixDomainSocketPath:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18,1173],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["unixDomainSocketPath",1],[": ",17],["String",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `unixDomainSocket` path to connect to for the UDS `Channel` that will be established.\n\n- parameters:\n    - unixDomainSocketPath: The _Unix domain socket_ path to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["NIOClientTCPBootstrapProtocol","connect(to:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `address` to connect to for the TCP `Channel` that will be established.\n\n- parameters:\n    - address: The address to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["NIOClientTCPBootstrapProtocol","connect(host:port:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["host",1],[": ",17],["String",18,1173],[", ",17],["port",1],[": ",17],["Int",18,1235],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Channel",18,28],[">",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["host",1],[": ",17],["String",18],[", ",17],["port",1],[": ",17],["Int",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Channel",18],[">",17]],"d":"Specify the `host` and `port` to connect to for the TCP `Channel` that will be established.\n\n- parameters:\n    - host: The host to connect to.\n    - port: The port to connect to.\n- returns: An `EventLoopFuture<Channel>` to deliver the `Channel` when connected."},{"p":["AdaptiveRecvByteBufferAllocator","buffer(allocator:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18,105],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18],[") -> ",17],["ByteBuffer",18]],"o":936},{"p":["AdaptiveRecvByteBufferAllocator","record(actualReadBytes:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18,1235],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18],[") -> ",17],["Bool",18]],"o":937},{"p":["FixedSizeRecvByteBufferAllocator","buffer(allocator:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18,105],[") -> ",17],["ByteBuffer",18,60]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18],[") -> ",17],["ByteBuffer",18]],"o":936},{"p":["FixedSizeRecvByteBufferAllocator","record(actualReadBytes:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18,1235],[") -> ",17],["Bool",18,1232]],"s":[["func",12],[" ",17],["record",7],["(",17],["actualReadBytes",1],[": ",17],["Int",18],[") -> ",17],["Bool",18]],"o":937},{"p":["NIOSingleStepByteToMessageDecoder","decodeLast(buffer:seenEOF:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeLast",7],["(",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[", ",17],["seenEOF",1],[": ",17],["Bool",18,1232],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["InboundOut",18],["?",17]],"s":[["func",12],[" ",17],["decodeLast",7],["(",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[", ",17],["seenEOF",1],[": ",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["InboundOut",18],["?",17]],"d":"Decode from a `ByteBuffer` when no more data is incoming.\n\nLike with `decode`, this method will be called in a loop until either `nil` is returned from the method or until the input `ByteBuffer`\nhas no more readable bytes. If non-`nil` is returned and the `ByteBuffer` contains more readable bytes, this method will immediately\nbe invoked again.\n\nOnce `nil` is returned, neither `decode` nor `decodeLast` will be called again. If there are no bytes left, `decodeLast` will be called\nonce with an empty buffer.\n\n- parameters:\n    - buffer: The `ByteBuffer` from which we decode.\n    - seenEOF: `true` if EOF has been seen.\n- returns: A message if one can be decoded or `nil` if no more messages can be produced."},{"p":["NIOSingleStepByteToMessageDecoder","decode(buffer:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["InboundOut",18],["?",17]],"s":[["func",12],[" ",17],["decode",7],["(",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["InboundOut",18],["?",17]],"d":"Decode from a `ByteBuffer`.\n\nThis method will be called in a loop until either the input `ByteBuffer` has nothing to read left or `nil` is returned. If non-`nil` is\nreturned and the `ByteBuffer` contains more readable bytes, this method will immediately be invoked again, unless `decodeLast` needs\nto be invoked instead.\n\n- parameters:\n    - buffer: The `ByteBuffer` from which we decode.\n- returns: A message if one can be decoded or `nil` if it should be called again once more data is present in the `ByteBuffer`."},{"p":["NIOSingleStepByteToMessageDecoder","decodeLast(context:buffer:seenEOF:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[", ",17],["seenEOF",1],[": ",17],["Bool",18,1232],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,43]],"s":[["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[", ",17],["seenEOF",1],[": ",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"o":821},{"p":["NIOSingleStepByteToMessageDecoder","decode(context:buffer:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,132],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,43]],"s":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"o":825},{"p":["WriteObservingByteToMessageDecoder","write(data:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["write",7],["(",17],["data",1],[": ",17],["Self",18],[".",17],["OutboundIn",18],[")",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["data",1],[": ",17],["Self",18],[".",17],["OutboundIn",18],[")",17]],"d":"`write` is called for every incoming `write` incoming to the corresponding `ByteToMessageHandler`.\n\n- parameters:\n   - data: The data that was written."},{"p":["NIOSingleStepByteToMessageProcessor","finishProcessing(seenEOF:_:)"],"f":[["func",12],[" ",17],["finishProcessing",7],["(",17],["seenEOF",1],[": ",17],["Bool",18,1232],[", ",17],["_",1],[" ",17],["messageReceiver",2],[": (",17],["Decoder",18],[".",17],["InboundOut",18],[") ",17],["throws",12],[" -> ",17],["Void",18,1387],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["finishProcessing",7],["(",17],["seenEOF",1],[": ",17],["Bool",18],[", (",17],["Decoder",18],[".",17],["InboundOut",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["throws",12]],"e":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"c":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"g":[["Decoder",0,0]],"d":"Call when there is no data left in the stream. Calls `Decoder`.`decodeLast` one or more times. If there is no data left\n`decodeLast` will be called one time with an empty `ByteBuffer`.\n\n- parameters:\n    - seenEOF: Whether an EOF was seen on the stream.\n    - messageReceiver: A closure called for each message produced by the `Decoder`."},{"p":["NIOSingleStepByteToMessageProcessor","process(buffer:_:)"],"f":[["func",12],[" ",17],["process",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[", ",17],["_",1],[" ",17],["messageReceiver",2],[": (",17],["Decoder",18],[".",17],["InboundOut",18],[") ",17],["throws",12],[" -> ",17],["Void",18,1387],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["process",7],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[", (",17],["Decoder",18],[".",17],["InboundOut",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["throws",12]],"e":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"c":[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]],"g":[["Decoder",0,0]],"d":"Feed data into the `NIOSingleStepByteToMessageProcessor`\n\n- parameters:\n    - buffer: The `ByteBuffer` containing the next data in the stream\n    - messageReceiver: A closure called for each message produced by the `Decoder`"},{"p":["IOData","moveReaderIndex(forwardBy:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[": ",17],["Int",18,1235],[")",17]],"s":[["func",12],[" ",17],["moveReaderIndex",7],["(",17],["forwardBy",1],[": ",17],["Int",18],[")",17]],"d":"Move the readerIndex forward by `offset`."},{"p":["Channel","getOption(_:)"],"f":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Option",18],[".",17],["Value",18],["> ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["Option",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Option",18],[".",17],["Value",18],[">",17]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Get the value of `option` for this `Channel`."},{"p":["Channel","setOption(_:value:)"],"f":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],["> ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Set `option` to `value` on this `Channel`."},{"p":["Channel","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":914},{"p":["Channel","writeAndFlush(_:promise:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["any",2],[": ",17],["T",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"g":[["T",0,1]],"d":"Write and flush data into the `Channel`, automatically wrapping with `NIOAny`.\n\n- seealso: `ChannelOutboundInvoker.writeAndFlush`."},{"p":["Channel","writeAndFlush(_:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["any",2],[": ",17],["T",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["T",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["T",0,1]],"d":"Write and flush data into the `Channel`, automatically wrapping with `NIOAny`.\n\n- seealso: `ChannelOutboundInvoker.writeAndFlush`."},{"p":["Channel","writeAndFlush(_:)"],"f":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["any",2],[": ",17],["T",18],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["writeAndFlush",7],["<",17],["T",0],[">(",17],["T",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"g":[["T",0,1]],"d":"Shortcut for calling `write` and `flush`.\n\n- parameters:\n    - data: the data to write\n    - promise: the `EventLoopPromise` that will be notified once the `write` operation completes,\n               or `nil` if not interested in the outcome of the operation."},{"p":["Channel","triggerUserOutboundEvent(_:promise:)"],"f":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["_",1],[" ",17],["event",2],[": ",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["triggerUserOutboundEvent",7],["(",17],["Any",12],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":913},{"p":["Channel","registerAlreadyConfigured0(promise:)"],"f":[["func",12],[" ",17],["registerAlreadyConfigured0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["registerAlreadyConfigured0",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]]},{"p":["Channel","bind(to:promise:)"],"f":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["bind",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":915},{"p":["Channel","read()"],"f":[["func",12],[" ",17],["read",7],["()",17]],"s":[["func",12],[" ",17],["read",7],["()",17]],"o":916},{"p":["Channel","close(mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18,59],[" = .all, ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":917},{"p":["Channel","flush()"],"f":[["func",12],[" ",17],["flush",7],["()",17]],"s":[["func",12],[" ",17],["flush",7],["()",17]],"o":918},{"p":["Channel","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["NIOAny",18,119],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":919},{"p":["Channel","write(_:promise:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["any",2],[": ",17],["T",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"g":[["T",0,1]],"d":"Write data into the `Channel`, automatically wrapping with `NIOAny`.\n\n- seealso: `ChannelOutboundInvoker.write`."},{"p":["Channel","write(_:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["any",2],[": ",17],["T",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["write",7],["<",17],["T",0],[">(",17],["T",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"g":[["T",0,1]],"d":"Write data into the `Channel`, automatically wrapping with `NIOAny`.\n\n- seealso: `ChannelOutboundInvoker.write`."},{"p":["Channel","connect(to:promise:)"],"f":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[" ",17],["address",2],[": ",17],["SocketAddress",18,44],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["connect",7],["(",17],["to",1],[": ",17],["SocketAddress",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":920},{"p":["Channel","register(promise:)"],"f":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">?)",17]],"s":[["func",12],[" ",17],["register",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":921},{"p":["Channel","getOption(_:)"],"f":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Option",18],[".",17],["Value",18],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["getOption",7],["<",17],["Option",0],[">(",17],["Option",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Option",18],[".",17],["Value",18]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Get the value of `option` for this `Channel`."},{"p":["Channel","setOption(_:value:)"],"f":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["_",1],[" ",17],["option",2],[": ",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Option",18],[" : ",17],["ChannelOption",18,7]],"s":[["func",12],[" ",17],["setOption",7],["<",17],["Option",0],[">(",17],["Option",18],[", ",17],["value",1],[": ",17],["Option",18],[".",17],["Value",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13"},"macOS":{"i":"10.15"},"tvOS":{"i":"13"},"watchOS":{"i":"6"}},"c":[["Option",1,"ChannelOption",7]],"g":[["Option",0,1]],"d":"Set `option` to `value` on this `Channel`."},{"p":["EventLoop","preconditionInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["preconditionInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[", ",17],["line",1],[": ",17],["UInt",18,1351],[")",17]],"s":[["func",12],[" ",17],["preconditionInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Asserts that the current thread is the one tied to this `EventLoop`.\nOtherwise, the process will be abnormally terminated as per the semantics of `preconditionFailure(_:file:line:)`."},{"p":["EventLoop","preconditionNotInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["preconditionNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[", ",17],["line",1],[": ",17],["UInt",18,1351],[")",17]],"s":[["func",12],[" ",17],["preconditionNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Asserts that the current thread is _not_ the one tied to this `EventLoop`.\nOtherwise, the process will be abnormally terminated as per the semantics of `preconditionFailure(_:file:line:)`."},{"p":["EventLoop","scheduleTask(in:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["scheduleTask",7],["<",17],["T",0],[">(",17],["in",1],[": ",17],["TimeAmount",18,64],[", ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Scheduled",18,121],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["scheduleTask",7],["<",17],["T",0],[">(",17],["in",1],[": ",17],["TimeAmount",18],[", () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Scheduled",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Schedule a `task` that is executed by this `EventLoop` after the given amount of time.\n\n- parameters:\n    - task: The synchronous task to run. As with everything that runs on the `EventLoop`, it must not block.\n- returns: A `Scheduled` object which may be used to cancel the task if it has not yet run, or to wait\n           on the completion of the task.\n\n- note: You can only cancel a task before it has started executing.\n- note: The `in` value is clamped to a maximum when running on a Darwin-kernel."},{"p":["EventLoop","scheduleTask(deadline:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["scheduleTask",7],["<",17],["T",0],[">(",17],["deadline",1],[": ",17],["NIODeadline",18,65],[", ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Scheduled",18,121],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["scheduleTask",7],["<",17],["T",0],[">(",17],["deadline",1],[": ",17],["NIODeadline",18],[", () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Scheduled",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Schedule a `task` that is executed by this `EventLoop` at the given time.\n\n- parameters:\n    - task: The synchronous task to run. As with everything that runs on the `EventLoop`, it must not block.\n- returns: A `Scheduled` object which may be used to cancel the task if it has not yet run, or to wait\n           on the completion of the task.\n\n- note: You can only cancel a task before it has started executing."},{"p":["EventLoop","makeSucceededVoidFuture()"],"f":[["func",12],[" ",17],["makeSucceededVoidFuture",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["makeSucceededVoidFuture",7],["() -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Return a succeeded `Void` future.\n\nSemantically, this function is equivalent to calling `makeSucceededFuture(())`.\nContrary to `makeSucceededFuture`, `makeSucceededVoidFuture` is a customization point for `EventLoop`s which\nallows `EventLoop`s to cache a pre-succeeded `Void` future to prevent superfluous allocations."},{"p":["EventLoop","submit(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["submit",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["submit",7],["<",17],["T",0],[">(() ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Submit a given task to be executed by the `EventLoop`. Once the execution is complete the returned `EventLoopFuture` is notified.\n\n- parameters:\n    - task: The closure that will be submitted to the `EventLoop` for execution.\n- returns: `EventLoopFuture` that is notified once the task was executed."},{"p":["EventLoop","execute(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["execute",7],["(",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () -> ",17],["Void",18,1387],[")",17]],"s":[["func",12],[" ",17],["execute",7],["(() -> ",17],["Void",18],[")",17]],"d":"Submit a given task to be executed by the `EventLoop`"},{"p":["EventLoop","assertNotInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["assertNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["assertNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Asserts that the current thread is _not_ the one tied to this `EventLoop`.\nOtherwise, if running in debug mode, the process will be abnormally terminated as per the semantics of\n`preconditionFailure(_:file:line:)`. Never has any effect in release mode.\n\n- note: This is not a customization point so calls to this function can be fully optimized out in release mode."},{"p":["EventLoop","preconditionInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["preconditionInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["preconditionInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Checks the necessary condition of currently running on the called `EventLoop` for making forward progress."},{"p":["EventLoop","preconditionNotInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["preconditionNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["preconditionNotInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Checks the necessary condition of currently _not_ running on the called `EventLoop` for making forward progress."},{"p":["EventLoop","assertInEventLoop(file:line:)"],"f":[["func",12],[" ",17],["assertInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[")",17]],"s":[["func",12],[" ",17],["assertInEventLoop",7],["(",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[")",17]],"d":"Asserts that the current thread is the one tied to this `EventLoop`.\nOtherwise, if running in debug mode, the process will be abnormally terminated as per the semantics of\n`preconditionFailure(_:file:line:)`. Never has any effect in release mode.\n\n- note: This is not a customization point so calls to this function can be fully optimized out in release mode."},{"p":["EventLoop","flatSubmit(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatSubmit",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["flatSubmit",7],["<",17],["T",0],[">(() -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Submit `task` to be run on this `EventLoop`.\n\nThe returned `EventLoopFuture` will be completed when `task` has finished running. It will be identical to\nthe `EventLoopFuture` returned by `task`.\n\n- parameters:\n    - task: The asynchronous task to run. As with everything that runs on the `EventLoop`, it must not block.\n- returns: An `EventLoopFuture` identical to the `EventLoopFuture` returned from `task`."},{"p":["EventLoop","makePromise(of:file:line:)"],"f":[["func",12],[" ",17],["makePromise",7],["<",17],["T",0],[">(",17],["of",1],[" ",17],["type",2],[": ",17],["T",18],[".Type = T.self, ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopPromise",18,98],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["makePromise",7],["<",17],["T",0],[">(",17],["of",1],[": ",17],["T",18],[".Type, ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopPromise",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Creates and returns a new `EventLoopPromise` that will be notified using this `EventLoop` as execution `NIOThread`."},{"p":["EventLoop","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EventLoopIterator",18,103]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EventLoopIterator",18]],"d":"Returns an `EventLoopIterator` over this `EventLoop`.\n\n- returns: `EventLoopIterator`"},{"p":["EventLoop","flatScheduleTask(in:file:line:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatScheduleTask",7],["<",17],["T",0],[">(",17],["in",1],[" ",17],["delay",2],[": ",17],["TimeAmount",18,64],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">) -> ",17],["Scheduled",18,121],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["flatScheduleTask",7],["<",17],["T",0],[">(",17],["in",1],[": ",17],["TimeAmount",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", () ",17],["throws",12],[" -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">) -> ",17],["Scheduled",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Schedule a `task` that is executed by this `EventLoop` after the given amount of time.\n\n- parameters:\n    - task: The asynchronous task to run. As everything that runs on the `EventLoop`, it must not block.\n- returns: A `Scheduled` object which may be used to cancel the task if it has not yet run, or to wait\n           on the full execution of the task, including its returned `EventLoopFuture`.\n\n- note: You can only cancel a task before it has started executing."},{"p":["EventLoop","flatScheduleTask(deadline:file:line:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["flatScheduleTask",7],["<",17],["T",0],[">(",17],["deadline",1],[": ",17],["NIODeadline",18,65],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[", ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">) -> ",17],["Scheduled",18,121],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["flatScheduleTask",7],["<",17],["T",0],[">(",17],["deadline",1],[": ",17],["NIODeadline",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[", () ",17],["throws",12],[" -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">) -> ",17],["Scheduled",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Schedule a `task` that is executed by this `EventLoop` at the given time.\n\n- parameters:\n    - task: The asynchronous task to run. As with everything that runs on the `EventLoop`, it must not block.\n- returns: A `Scheduled` object which may be used to cancel the task if it has not yet run, or to wait\n           on the full execution of the task, including its returned `EventLoopFuture`.\n\n- note: You can only cancel a task before it has started executing."},{"p":["EventLoop","makeFailedFuture(_:file:line:)"],"f":[["func",12],[" ",17],["makeFailedFuture",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["makeFailedFuture",7],["<",17],["T",0],[">(",17],["Error",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["T",0,1]]},{"p":["EventLoop","makeFailedFuture(_:)"],"f":[["func",12],[" ",17],["makeFailedFuture",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["error",2],[": ",17],["Error",18,1388],[") -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["makeFailedFuture",7],["<",17],["T",0],[">(",17],["Error",18],[") -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Creates and returns a new `EventLoopFuture` that is already marked as failed. Notifications will be done using this `EventLoop` as execution `NIOThread`.\n\n- parameters:\n    - error: the `Error` that is used by the `EventLoopFuture`.\n- returns: a failed `EventLoopFuture`."},{"p":["EventLoop","makeCompletedFuture(_:)"],"f":[["func",12],[" ",17],["makeCompletedFuture",7],["<",17],["Success",0],[">(",17],["_",1],[" ",17],["result",2],[": ",17],["Result",18,1394],["<",17],["Success",18],[", ",17],["Error",18,1388],[">) -> ",17],["EventLoopFuture",18,125],["<",17],["Success",18],[">",17]],"s":[["func",12],[" ",17],["makeCompletedFuture",7],["<",17],["Success",0],[">(",17],["Result",18],["<",17],["Success",18],[", ",17],["Error",18],[">) -> ",17],["EventLoopFuture",18],["<",17],["Success",18],[">",17]],"g":[["Success",0,1]],"d":"Creates and returns a new `EventLoopFuture` that is marked as succeeded or failed with the value held by `result`.\n\n- Parameters:\n  - result: The value that is used by the `EventLoopFuture`\n- Returns: A completed `EventLoopFuture`."},{"p":["EventLoop","makeSucceededFuture(_:file:line:)"],"f":[["func",12],[" ",17],["makeSucceededFuture",7],["<",17],["Success",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["Success",18],[", ",17],["file",1],[": ",17],["StaticString",18,1367],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,1351],[" = ",17],["#line",12],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Success",18],[">",17]],"s":[["func",12],[" ",17],["makeSucceededFuture",7],["<",17],["Success",0],[">(",17],["Success",18],[", ",17],["file",1],[": ",17],["StaticString",18],[", ",17],["line",1],[": ",17],["UInt",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Success",18],[">",17]],"a":{"a":{"d":true,"m":"Please don't pass file:line:, there's no point."}},"g":[["Success",0,1]]},{"p":["EventLoop","makeSucceededFuture(_:)"],"f":[["func",12],[" ",17],["makeSucceededFuture",7],["<",17],["Success",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["Success",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Success",18],[">",17]],"s":[["func",12],[" ",17],["makeSucceededFuture",7],["<",17],["Success",0],[">(",17],["Success",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Success",18],[">",17]],"g":[["Success",0,1]],"d":"Creates and returns a new `EventLoopFuture` that is already marked as success. Notifications will be done using this `EventLoop` as execution `NIOThread`.\n\n- parameters:\n    - result: the value that is used by the `EventLoopFuture`.\n- returns: a succeeded `EventLoopFuture`."},{"p":["EventLoop","scheduleRepeatedTask(initialDelay:delay:notifying:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["scheduleRepeatedTask",7],["(",17],["initialDelay",1],[": ",17],["TimeAmount",18,64],[", ",17],["delay",1],[": ",17],["TimeAmount",18,64],[", ",17],["notifying",1],[" ",17],["promise",2],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">? = nil, ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" (",17],["RepeatedTask",18,122],[") ",17],["throws",12],[" -> ",17],["Void",18,1387],[") -> ",17],["RepeatedTask",18,122]],"s":[["func",12],[" ",17],["scheduleRepeatedTask",7],["(",17],["initialDelay",1],[": ",17],["TimeAmount",18],[", ",17],["delay",1],[": ",17],["TimeAmount",18],[", ",17],["notifying",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?, (",17],["RepeatedTask",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") -> ",17],["RepeatedTask",18]],"d":"Schedule a repeated task to be executed by the `EventLoop` with a fixed delay between the end and start of each\ntask.\n\n- parameters:\n    - initialDelay: The delay after which the first task is executed.\n    - delay: The delay between the end of one task and the start of the next.\n    - promise: If non-nil, a promise to fulfill when the task is cancelled and all execution is complete.\n    - task: The closure that will be executed.\n- return: `RepeatedTask`"},{"p":["EventLoop","makeSucceededVoidFuture()"],"f":[["func",12],[" ",17],["makeSucceededVoidFuture",7],["() -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">",17]],"s":[["func",12],[" ",17],["makeSucceededVoidFuture",7],["() -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Default implementation of `makeSucceededVoidFuture`: Return a fresh future (which will allocate)."},{"p":["EventLoop","scheduleRepeatedAsyncTask(initialDelay:delay:notifying:_:)"],"f":[["@discardableResult",3],[" ",17],["@preconcurrency",3],[" ",17],["func",12],[" ",17],["scheduleRepeatedAsyncTask",7],["(",17],["initialDelay",1],[": ",17],["TimeAmount",18,64],[", ",17],["delay",1],[": ",17],["TimeAmount",18,64],[", ",17],["notifying",1],[" ",17],["promise",2],[": ",17],["EventLoopPromise",18,98],["<",17],["Void",18,1387],[">? = nil, ",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" (",17],["RepeatedTask",18,122],[") -> ",17],["EventLoopFuture",18,125],["<",17],["Void",18,1387],[">) -> ",17],["RepeatedTask",18,122]],"s":[["func",12],[" ",17],["scheduleRepeatedAsyncTask",7],["(",17],["initialDelay",1],[": ",17],["TimeAmount",18],[", ",17],["delay",1],[": ",17],["TimeAmount",18],[", ",17],["notifying",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?, (",17],["RepeatedTask",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">) -> ",17],["RepeatedTask",18]],"d":"Schedule a repeated asynchronous task to be executed by the `EventLoop` with a fixed delay between the end and\nstart of each task.\n\n- note: The delay is measured from the completion of one run's returned future to the start of the execution of\n        the next run. For example: If you schedule a task once per second but your task takes two seconds to\n        complete, the time interval between two subsequent runs will actually be three seconds (2s run time plus\n        the 1s delay.)\n\n- parameters:\n    - initialDelay: The delay after which the first task is executed.\n    - delay: The delay between the end of one task and the start of the next.\n    - promise: If non-nil, a promise to fulfill when the task is cancelled and all execution is complete.\n    - task: The closure that will be executed. Task will keep repeating regardless of whether the future\n            gets fulfilled with success or error.\n\n- return: `RepeatedTask`"},{"p":["EventLoop","any()"],"f":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18,29]],"s":[["func",12],[" ",17],["any",7],["() -> ",17],["EventLoop",18]],"d":"An `EventLoop` forms a singular `EventLoopGroup`, returning itself as 'any' `EventLoop`.\n\n- returns: Itself, because an `EventLoop` forms a singular `EventLoopGroup`."},{"p":["EventLoop","next()"],"f":[["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18,29]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["EventLoop",18]],"d":"An `EventLoop` forms a singular `EventLoopGroup`, returning itself as the 'next' `EventLoop`.\n\n- returns: Itself, because an `EventLoop` forms a singular `EventLoopGroup`."},{"p":["EventLoop","close()"],"f":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["close",7],["() ",17],["throws",12]],"d":"Close this `EventLoop`."},{"p":["EventLoop","submit(_:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["submit",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["task",2],[": ",17],["@escaping",12],[" () ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["EventLoopFuture",18,125],["<",17],["T",18],[">",17]],"s":[["func",12],[" ",17],["submit",7],["<",17],["T",0],[">(() ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["EventLoopFuture",18],["<",17],["T",18],[">",17]],"g":[["T",0,1]],"d":"Submit `task` to be run on this `EventLoop`.\n\nThe returned `EventLoopFuture` will be completed when `task` has finished running. It will be succeeded with\n`task`'s return value or failed if the execution of `task` threw an error.\n\n- parameters:\n    - task: The synchronous task to run. As everything that runs on the `EventLoop`, it must not block.\n- returns: An `EventLoopFuture` containing the result of `task`'s execution."},{"p":["Scheduled","cancel()"],"f":[["func",12],[" ",17],["cancel",7],["()",17]],"s":[["func",12],[" ",17],["cancel",7],["()",17]],"g":[["T",0,0]],"d":"Try to cancel the execution of the scheduled task.\n\nWhether this is successful depends on whether the execution of the task already begun.\n This means that cancellation is not guaranteed."},{"p":["ByteBuffer","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["ByteBuffer",18,60],[", ",17],["rhs",2],[": ",17],["ByteBuffer",18,60],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["ByteBuffer",18],[", ",17],["ByteBuffer",18],[") -> ",17],["Bool",18]],"d":"Compare two `ByteBuffer` values. Two `ByteBuffer` values are considered equal if the readable bytes are equal.","o":1170},{"p":["FileRegion","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["FileRegion",18,63],[", ",17],["rhs",2],[": ",17],["FileRegion",18,63],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["FileRegion",18],[", ",17],["FileRegion",18],[") -> ",17],["Bool",18]],"o":1170},{"p":["TimeAmount","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["TimeAmount",18],[", ",17],["TimeAmount",18],[") -> ",17],["Bool",18]],"o":1144},{"p":["TimeAmount","*(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["*",7],[" ",17],["<",17],["T",0],[">(",17],["lhs",2],[": ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["TimeAmount",18,64],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,1354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["*",7],[" ",17],["<",17],["T",0],[">(",17],["TimeAmount",18],[", ",17],["T",18],[") -> ",17],["TimeAmount",18]],"c":[["T",1,"BinaryInteger",1354]],"g":[["T",0,0]]},{"p":["TimeAmount","*(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["*",7],[" ",17],["<",17],["T",0],[">(",17],["lhs",2],[": ",17],["T",18],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["TimeAmount",18,64],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,1354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["*",7],[" ",17],["<",17],["T",0],[">(",17],["T",18],[", ",17],["TimeAmount",18],[") -> ",17],["TimeAmount",18]],"c":[["T",1,"BinaryInteger",1354]],"g":[["T",0,0]]},{"p":["TimeAmount","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["TimeAmount",18],[", ",17],["TimeAmount",18],[") -> ",17],["TimeAmount",18]],"o":1371},{"p":["TimeAmount","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["TimeAmount",18],[", ",17],["TimeAmount",18],[") -> ",17],["TimeAmount",18]],"o":1372},{"p":["TimeAmount","+=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["inout",12],[" ",17],["TimeAmount",18],[", ",17],["TimeAmount",18],[")",17]],"o":1373},{"p":["TimeAmount","-=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["TimeAmount",18,64],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["inout",12],[" ",17],["TimeAmount",18],[", ",17],["TimeAmount",18],[")",17]],"o":1374},{"p":["NIODeadline",">(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],[">",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIODeadline",18,65],[", ",17],["rhs",2],[": ",17],["NIODeadline",18,65],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],[">",7],[" ",17],["(",17],["NIODeadline",18],[", ",17],["NIODeadline",18],[") -> ",17],["Bool",18]],"o":1143},{"p":["NIODeadline","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIODeadline",18,65],[", ",17],["rhs",2],[": ",17],["NIODeadline",18,65],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["NIODeadline",18],[", ",17],["NIODeadline",18],[") -> ",17],["Bool",18]],"o":1144},{"p":["NIODeadline","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIODeadline",18,65],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["NIODeadline",18],[", ",17],["TimeAmount",18],[") -> ",17],["NIODeadline",18]]},{"p":["NIODeadline","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIODeadline",18,65],[", ",17],["rhs",2],[": ",17],["TimeAmount",18,64],[") -> ",17],["NIODeadline",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["NIODeadline",18],[", ",17],["TimeAmount",18],[") -> ",17],["NIODeadline",18]]},{"p":["NIODeadline","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIODeadline",18,65],[", ",17],["rhs",2],[": ",17],["NIODeadline",18,65],[") -> ",17],["TimeAmount",18,64]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["NIODeadline",18],[", ",17],["NIODeadline",18],[") -> ",17],["TimeAmount",18]]},{"p":["SocketAddress","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["SocketAddress",18,44],[", ",17],["rhs",2],[": ",17],["SocketAddress",18,44],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["SocketAddress",18],[", ",17],["SocketAddress",18],[") -> ",17],["Bool",18]],"o":1170},{"p":["ByteBufferView","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["ByteBufferView",18,76],[", ",17],["rhs",2],[": ",17],["ByteBufferView",18,76],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["ByteBufferView",18],[", ",17],["ByteBufferView",18],[") -> ",17],["Bool",18]],"d":"required by `Equatable`","o":1170},{"p":["CircularBuffer","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[", ",17],["rhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"g":[["Element",0,0]],"o":1144},{"p":["CircularBuffer","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[", ",17],["rhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[", ",17],["CircularBuffer",18],["<",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"g":[["Element",0,0]],"o":1170},{"p":["CircularBuffer","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">, ",17],["rhs",2],[": ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">) -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["CircularBuffer",18],["<",17],["Element",18],[">, ",17],["CircularBuffer",18],["<",17],["Element",18],[">) -> ",17],["Bool",18]],"e":[["Element",1,"Equatable",1169]],"c":[["Element",1,"Equatable",1169]],"g":[["Element",0,0]],"o":1170},{"p":["EventLoopFuture","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">, ",17],["rhs",2],[": ",17],["EventLoopFuture",18,125],["<",17],["Value",18],[">) -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["EventLoopFuture",18],["<",17],["Value",18],[">, ",17],["EventLoopFuture",18],["<",17],["Value",18],[">) -> ",17],["Bool",18]],"g":[["Value",0,0]],"o":1170},{"p":["NIONetworkDevice","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIONetworkDevice",18,100],[", ",17],["rhs",2],[": ",17],["NIONetworkDevice",18,100],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIONetworkDevice",18],[", ",17],["NIONetworkDevice",18],[") -> ",17],["Bool",18]],"o":1170},{"p":["NIONetworkInterface","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIONetworkInterface",18,128],[", ",17],["rhs",2],[": ",17],["NIONetworkInterface",18,128],[") -> ",17],["Bool",18,1232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIONetworkInterface",18],[", ",17],["NIONetworkInterface",18],[") -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"NIONetworkDevice"}},"o":1170},{"p":["TimeAmount","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int64",18,1390]],"s":[["typealias",12],[" ",17],["Value",7]],"a":{"a":{"d":true,"m":"This typealias doesn't serve any purpose. Please use Int64 directly."}}},{"p":["NIODeadline","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt64",18,1396]],"s":[["typealias",12],[" ",17],["Value",7]],"a":{"a":{"d":true,"m":"This typealias doesn't serve any purpose, please use UInt64 directly."}}},{"p":["NIOSendable"],"f":[["typealias",12],[" ",17],["NIOSendable",7],[" = ",17],["Sendable",18,1397]],"s":[["typealias",12],[" ",17],["NIOSendable",7]]},{"p":["NIOBSDSocket","OptionLevel","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["CInt",18,1386]],"s":[["typealias",12],[" ",17],["RawValue",7]],"o":1225},{"p":["NIOBSDSocket","AddressFamily","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["CInt",18,1386]],"s":[["typealias",12],[" ",17],["RawValue",7]],"o":1225},{"p":["NIOBSDSocket","ProtocolFamily","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["CInt",18,1386]],"s":[["typealias",12],[" ",17],["RawValue",7]],"o":1225},{"p":["NIOBSDSocket","Handle"],"f":[["typealias",12],[" ",17],["Handle",7],[" = ",17],["CInt",18,1386]],"s":[["typealias",12],[" ",17],["Handle",7]]},{"p":["NIOBSDSocket","Option","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["CInt",18,1386]],"s":[["typealias",12],[" ",17],["RawValue",7]],"o":1225},{"p":["SocketOption"],"f":[["typealias",12],[" ",17],["SocketOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["SocketOption",18,80]],"s":[["typealias",12],[" ",17],["SocketOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.SocketOption"}}},{"p":["BacklogOption"],"f":[["typealias",12],[" ",17],["BacklogOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["BacklogOption",18,81]],"s":[["typealias",12],[" ",17],["BacklogOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.BacklogOption"}}},{"p":["AutoReadOption"],"f":[["typealias",12],[" ",17],["AutoReadOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AutoReadOption",18,82]],"s":[["typealias",12],[" ",17],["AutoReadOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.AutoReadOption"}}},{"p":["ByteBufferView","SubSequence"],"f":[["typealias",12],[" ",17],["SubSequence",7],[" = ",17],["ByteBufferView",18,76]],"s":[["typealias",12],[" ",17],["SubSequence",7]],"o":1243},{"p":["ByteBufferView","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["Int",18,1235]],"s":[["typealias",12],[" ",17],["Index",7]],"o":1261},{"p":["ByteBufferView","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["UInt8",18,1392]],"s":[["typealias",12],[" ",17],["Element",7]],"o":1179},{"p":["ChannelOptions","Types","SocketOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = (",17],["SocketOptionValue",18,1072],[")",17]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","BacklogOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int32",18,1389]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","AutoReadOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Bool",18,1232]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","AllocatorOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["ByteBufferAllocator",18,105]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","WriteSpinOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt",18,1351]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","ReceivePacketInfo","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Bool",18,1232]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","RecvAllocatorOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["RecvByteBufferAllocator",18,21]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","ConnectTimeoutOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["TimeAmount",18,64],["?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","MaxMessagesPerReadOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt",18,1351]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","WriteBufferWaterMarkOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteBufferWaterMark",18,88]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","AllowRemoteHalfClosureOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Bool",18,1232]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","DatagramVectorReadMessageCountOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int",18,1235]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["ChannelOptions","Types","ExplicitCongestionNotificationsOption","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Bool",18,1232]],"s":[["typealias",12],[" ",17],["Value",7]],"o":30},{"p":["CircularBuffer","SubSequence"],"f":[["typealias",12],[" ",17],["SubSequence",7],[" = ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">",17]],"s":[["typealias",12],[" ",17],["SubSequence",7]],"g":[["Element",0,0]],"o":1243},{"p":["CircularBuffer","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"g":[["Element",0,0]],"o":1179},{"p":["CircularBuffer","Indices"],"f":[["typealias",12],[" ",17],["Indices",7],[" = ",17],["DefaultIndices",18,1122],["<",17],["CircularBuffer",18,95],["<",17],["Element",18],[">>",17]],"s":[["typealias",12],[" ",17],["Indices",7]],"g":[["Element",0,0]],"o":1265},{"p":["CircularBuffer","RangeType"],"f":[["typealias",12],[" ",17],["RangeType",7],["<",17],["Bound",0],["> = ",17],["Range",18,1346],["<",17],["Bound",18],["> ",17],["where",12],[" ",17],["Bound",18],[" : ",17],["Strideable",18,1353],[", ",17],["Bound",18],[".",17],["Stride",18],[" : ",17],["SignedInteger",18,1230]],"s":[["typealias",12],[" ",17],["RangeType",7]],"c":[["Bound",1,"Strideable",1353],["Bound.Stride",1,"SignedInteger",1230]],"g":[["Element",0,0],["Bound",0,1]]},{"p":["AllocatorOption"],"f":[["typealias",12],[" ",17],["AllocatorOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AllocatorOption",18,83]],"s":[["typealias",12],[" ",17],["AllocatorOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.AllocatorOption"}}},{"p":["WriteSpinOption"],"f":[["typealias",12],[" ",17],["WriteSpinOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteSpinOption",18,84]],"s":[["typealias",12],[" ",17],["WriteSpinOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.WriteSpinOption"}}},{"p":["IdleStateHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":35},{"p":["IdleStateHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":36},{"p":["IdleStateHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":1117},{"p":["IdleStateHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":34},{"p":["NIOPOSIXFileMode"],"f":[["typealias",12],[" ",17],["NIOPOSIXFileMode",7],[" = ",17],["mode_t",18,1107]],"s":[["typealias",12],[" ",17],["NIOPOSIXFileMode",7]]},{"p":["SocketOptionName"],"f":[["typealias",12],[" ",17],["SocketOptionName",7],[" = ",17],["Int32",18,1389]],"s":[["typealias",12],[" ",17],["SocketOptionName",7]]},{"p":["EventLoopIterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["EventLoop",18,29]],"s":[["typealias",12],[" ",17],["Element",7]],"o":1179},{"p":["SocketOptionLevel"],"f":[["typealias",12],[" ",17],["SocketOptionLevel",7],[" = ",17],["Int",18,1235]],"s":[["typealias",12],[" ",17],["SocketOptionLevel",7]]},{"p":["SocketOptionValue"],"f":[["typealias",12],[" ",17],["SocketOptionValue",7],[" = ",17],["Int",18,1235]],"s":[["typealias",12],[" ",17],["SocketOptionValue",7]]},{"p":["BackPressureHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["ByteBuffer",18,60]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":35},{"p":["BackPressureHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":36},{"p":["BackPressureHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["ByteBuffer",18,60]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":1117},{"p":["BackPressureHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["ByteBuffer",18,60]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":34},{"p":["RecvAllocatorOption"],"f":[["typealias",12],[" ",17],["RecvAllocatorOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["RecvAllocatorOption",18,86]],"s":[["typealias",12],[" ",17],["RecvAllocatorOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.RecvAllocatorOption"}}},{"p":["AcceptBackoffHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["Channel",18,28]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":36},{"p":["AcceptBackoffHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["Channel",18,28]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":34},{"p":["ByteToMessageHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["Decoder",18],[".",17],["InboundOut",18]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":35},{"p":["ByteToMessageHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["ByteBuffer",18,60]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"c":[["Decoder",1,"ByteToMessageDecoder",13]],"g":[["Decoder",0,0]],"o":34},{"p":["ByteToMessageHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["Decoder",18],[".",17],["OutboundIn",18]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"e":[["Decoder",1,"WriteObservingByteToMessageDecoder",27]],"c":[["Decoder",1,"WriteObservingByteToMessageDecoder",27]],"g":[["Decoder",0,0]],"o":36},{"p":["ChannelDuplexHandler"],"f":[["typealias",12],[" ",17],["ChannelDuplexHandler",7],[" = ",17],["ChannelInboundHandler",18,17],[" & ",17],["ChannelOutboundHandler",18,19]],"s":[["typealias",12],[" ",17],["ChannelDuplexHandler",7]],"d":"A combination of `ChannelInboundHandler` and `ChannelOutboundHandler`."},{"p":["ConnectTimeoutOption"],"f":[["typealias",12],[" ",17],["ConnectTimeoutOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["ConnectTimeoutOption",18,87]],"s":[["typealias",12],[" ",17],["ConnectTimeoutOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.ConnectTimeoutOption"}}},{"p":["MarkedCircularBuffer","SubSequence"],"f":[["typealias",12],[" ",17],["SubSequence",7],[" = ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">",17]],"s":[["typealias",12],[" ",17],["SubSequence",7]],"g":[["Element",0,0]],"o":1243},{"p":["MarkedCircularBuffer","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["CircularBuffer",18,95],["<",17],["Element",18],[">.",17],["Index",18,96]],"s":[["typealias",12],[" ",17],["Index",7]],"g":[["Element",0,0]],"o":1261},{"p":["MarkedCircularBuffer","RangeType"],"f":[["typealias",12],[" ",17],["RangeType",7],["<",17],["Bound",0],["> = ",17],["Range",18,1346],["<",17],["Bound",18],["> ",17],["where",12],[" ",17],["Bound",18],[" : ",17],["Strideable",18,1353],[", ",17],["Bound",18],[".",17],["Stride",18],[" : ",17],["SignedInteger",18,1230]],"s":[["typealias",12],[" ",17],["RangeType",7]],"c":[["Bound",1,"Strideable",1353],["Bound.Stride",1,"SignedInteger",1230]],"g":[["Element",0,0],["Bound",0,1]]},{"p":["MessageToByteHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["Encoder",18],[".",17],["OutboundIn",18]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"o":36},{"p":["MessageToByteHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["ByteBuffer",18,60]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"c":[["Encoder",1,"MessageToByteEncoder",14]],"g":[["Encoder",0,0]],"o":1117},{"p":["WriteBufferWaterMark"],"f":[["typealias",12],[" ",17],["WriteBufferWaterMark",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteBufferWaterMark",18,88]],"s":[["typealias",12],[" ",17],["WriteBufferWaterMark",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.WriteBufferWaterMark"}}},{"p":["NIOCloseOnErrorHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["NIOAny",18,119]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":34},{"p":["MaxMessagesPerReadOption"],"f":[["typealias",12],[" ",17],["MaxMessagesPerReadOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["MaxMessagesPerReadOption",18,89]],"s":[["typealias",12],[" ",17],["MaxMessagesPerReadOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.MaxMessagesPerReadOption"}}},{"p":["WriteBufferWaterMarkOption"],"f":[["typealias",12],[" ",17],["WriteBufferWaterMarkOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["WriteBufferWaterMarkOption",18,90]],"s":[["typealias",12],[" ",17],["WriteBufferWaterMarkOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.WriteBufferWaterMarkOption"}}},{"p":["AllowRemoteHalfClosureOption"],"f":[["typealias",12],[" ",17],["AllowRemoteHalfClosureOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["AllowRemoteHalfClosureOption",18,91]],"s":[["typealias",12],[" ",17],["AllowRemoteHalfClosureOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.AllowRemoteHalfClosureOption"}}},{"p":["DatagramVectorReadMessageCountOption"],"f":[["typealias",12],[" ",17],["DatagramVectorReadMessageCountOption",7],[" = ",17],["ChannelOptions",18,77],[".",17],["Types",18,45],[".",17],["DatagramVectorReadMessageCountOption",18,92]],"s":[["typealias",12],[" ",17],["DatagramVectorReadMessageCountOption",7]],"a":{"a":{"d":true,"r":"ChannelOptions.Types.DatagramVectorReadMessageCountOption"}}},{"p":["String","init(buffer:)"],"f":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[")",17]],"d":"Creates a `String` from a given `ByteBuffer`. The entire readable portion of the buffer will be read.\n- parameter buffer: The buffer to read."},{"p":["Array","init(buffer:)"],"f":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,60],[")",17]],"s":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[")",17]],"e":[["Element",2,"UInt8",1392]],"c":[["Element",2,"UInt8",1392]],"g":[["Element",0,0]],"d":"Creates a `[UInt8]` from the given buffer. The entire readable portion of the buffer will be read.\n- parameter buffer: The buffer to read."},{"p":["Optional","setOrWriteBuffer(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setOrWriteBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,60],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setOrWriteBuffer",7],["(",17],["inout",12],[" ",17],["ByteBuffer",18],[") -> ",17],["Int",18]],"e":[["Wrapped",2,"ByteBuffer",60]],"c":[["Wrapped",2,"ByteBuffer",60]],"g":[["Wrapped",0,0]],"d":"If `nil`, replace `self` with `.some(buffer)`. If non-`nil`, write `buffer`'s readable bytes into the\n`ByteBuffer` starting at `writerIndex`.\n\nThis will move both this `ByteBuffer`'s writer index as well as `buffer`'s reader index by the number of bytes\nreadable in `buffer`.\n\n- parameters:\n    - buffer: The `ByteBuffer` to write.\n- returns: The number of bytes written to this `ByteBuffer` which is equal to the number of bytes read from `buffer`."},{"p":["Optional","setOrWriteImmutableBuffer(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setOrWriteImmutableBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,60],[") -> ",17],["Int",18,1235]],"s":[["func",12],[" ",17],["setOrWriteImmutableBuffer",7],["(",17],["ByteBuffer",18],[") -> ",17],["Int",18]],"e":[["Wrapped",2,"ByteBuffer",60]],"c":[["Wrapped",2,"ByteBuffer",60]],"g":[["Wrapped",0,0]],"d":"If `nil`, replace `self` with `.some(buffer)`. If non-`nil`, write `buffer`'s readable bytes into the\n`ByteBuffer` starting at `writerIndex`.\n\n This method will not modify `buffer`, meaning its `readerIndex` and `writerIndex` stays intact.\n\n- parameters:\n    - buffer: The `ByteBuffer` to write.\n- returns: The number of bytes written to this `ByteBuffer` which is equal to the number of `readableBytes` in\n           `buffer`."}],"edges":{"conformer":[7,23,[],7,1169,[],7,1397,[],9,18,[],9,20,[],10,23,[],10,1397,[],12,20,[],12,23,[],12,28,[],12,1397,[],16,23,[],16,1397,[],17,8,[],19,8,[],21,23,[],21,1397,[],22,8,[],23,1397,[],26,13,[],27,13,[],28,20,[],28,23,[],28,1397,[],29,10,[],29,23,[],29,1397,[],39,1120,[],39,1169,[],39,1397,[],40,1169,[],40,1388,[],40,1397,[],41,1120,[],41,1169,[],41,1397,[],43,1120,[],43,1169,[],43,1397,[],44,1120,[],44,1169,[],44,1379,[],44,1397,[],46,1397,[["ValueType",1,"Sendable",1397]],47,1120,[],47,1169,[],47,1379,[],47,1388,[],47,1397,[],48,1397,[],49,1120,[],49,1169,[],49,1397,[],50,1388,[],50,1397,[],51,1120,[],51,1169,[],51,1388,[],51,1397,[],53,1388,[],53,1397,[],54,1397,[],55,1120,[],55,1169,[],55,1397,[],56,1169,[],56,1379,[],59,1120,[],59,1169,[],59,1397,[],60,1120,[],60,1169,[],60,1379,[],60,1397,[],61,1120,[],61,1169,[],61,1384,[],61,1388,[],61,1397,[],62,1388,[],62,1397,[],63,1169,[],63,1379,[],64,1120,[],64,1142,[],64,1169,[],64,1370,[],64,1397,[],65,1120,[],65,1142,[],65,1169,[],65,1379,[],65,1397,[],66,1120,[],66,1169,[],66,1224,[],66,1397,[],67,1120,[],67,1169,[],67,1224,[],67,1397,[],68,1120,[],68,1169,[],68,1224,[],68,1397,[],69,1120,[],69,1169,[],69,1224,[],69,1397,[],70,1169,[],70,1224,[],70,1355,[],70,1382,[],70,1397,[],70,1399,[],71,1397,[],72,1120,[],72,1169,[],72,1397,[],73,1397,[],74,1397,[],75,1397,[],76,1120,[],76,1123,[],76,1153,[],76,1169,[],76,1174,[],76,1236,[],76,1241,[],76,1300,[],76,1382,[],76,1397,[],78,1120,[],78,1169,[],78,1382,[],78,1397,[],79,1120,[],79,1169,[],79,1397,[],80,7,[],80,23,[],80,1169,[],80,1397,[],81,7,[],81,23,[],81,1169,[],81,1397,[],82,7,[],82,23,[],82,1169,[],82,1397,[],83,7,[],83,23,[],83,1169,[],83,1397,[],84,7,[],84,23,[],84,1169,[],84,1397,[],85,7,[],85,23,[],85,1169,[],85,1397,[],86,7,[],86,23,[],86,1169,[],86,1397,[],87,7,[],87,23,[],87,1169,[],87,1397,[],88,1397,[],89,7,[],89,23,[],89,1169,[],89,1397,[],90,7,[],90,23,[],90,1169,[],90,1397,[],91,7,[],91,23,[],91,1169,[],91,1397,[],92,7,[],92,23,[],92,1169,[],92,1397,[],93,7,[],93,23,[],93,1169,[],93,1397,[],94,1397,[],95,1120,[["Element",1,"Hashable",1120]],95,1123,[],95,1153,[],95,1169,[["Element",1,"Equatable",1169]],95,1174,[],95,1236,[],95,1241,[],95,1300,[],95,1379,[],95,1382,[],95,1397,[["Element",1,"Sendable",1397]],96,1142,[],96,1169,[],96,1397,[],97,1397,[],98,1397,[],99,15,[],100,1120,[],100,1169,[],100,1384,[],100,1397,[],101,1120,[["DataType",1,"Hashable",1120]],101,1169,[["DataType",1,"Equatable",1169]],101,1379,[],101,1397,[["DataType",1,"Sendable",1397]],102,1120,[],102,1169,[],102,1397,[],103,1174,[],103,1349,[],103,1397,[],104,1120,[],104,1169,[],104,1388,[],104,1397,[],105,1397,[],106,1388,[],106,1397,[],107,1388,[],107,1397,[],108,1123,[],108,1153,[],108,1174,[],108,1236,[],108,1241,[],108,1379,[],108,1397,[["Element",1,"Sendable",1397]],109,1388,[],109,1397,[],110,1397,[],112,1388,[],112,1397,[],113,1397,[],114,1388,[],114,1397,[],115,21,[],115,23,[],115,1397,[],116,1388,[],116,1397,[],117,21,[],117,23,[],117,1397,[],118,1388,[],118,1397,[],119,1379,[],120,1379,[],120,1388,[],120,1397,[],121,1397,[["T",1,"Sendable",1397]],122,1397,[],123,11,[],123,1379,[],124,9,[],124,18,[],124,20,[],124,1384,[],124,1397,[],125,1169,[],125,1397,[],126,8,[],126,17,[],126,19,[],126,22,[],126,1397,[],127,8,[],127,17,[],127,19,[],127,22,[],127,1397,[],128,1169,[],128,1384,[],129,8,[],129,17,[],129,19,[],129,22,[],129,1397,[],130,8,[["Decoder",1,"ByteToMessageDecoder",13]],130,17,[["Decoder",1,"ByteToMessageDecoder",13]],130,19,[["Decoder",1,"WriteObservingByteToMessageDecoder",27]],130,22,[["Decoder",1,"ByteToMessageDecoder",13]],130,1397,[["Decoder",1,"ByteToMessageDecoder",13]],131,8,[],131,19,[],131,1397,[["Encoder",1,"MessageToByteEncoder",14]],132,9,[],132,18,[],132,20,[],132,1397,[],133,8,[],133,17,[],133,1397,[],134,1397,[["Decoder",1,"NIOSingleStepByteToMessageDecoder",26]]],"feature":[635,127,635,129,635,133,636,133,892,126,892,127,892,129,892,130,892,133,893,126,893,127,893,129,893,130,893,133,912,126,912,127,912,129,912,130,912,131,922,124,922,132,924,124,924,132,926,124,926,132,928,124,928,132,930,124,930,132,931,124,931,132,933,124,933,132,939,126,939,127,939,129,1124,76,1124,95,1124,108,1125,76,1125,95,1125,108,1126,76,1126,95,1126,108,1128,76,1128,95,1129,76,1129,95,1130,76,1130,95,1131,76,1131,95,1131,108,1132,76,1132,95,1132,108,1133,76,1133,95,1133,108,1134,76,1134,95,1134,108,1135,76,1135,95,1135,108,1136,76,1136,95,1136,108,1137,76,1137,95,1137,108,1138,76,1138,95,1138,108,1139,76,1139,95,1139,108,1140,76,1140,95,1140,108,1141,95,1141,108,1145,64,1145,65,1145,96,1146,64,1146,65,1146,96,1147,64,1147,65,1147,96,1148,64,1148,65,1148,96,1149,64,1149,65,1149,96,1150,64,1150,65,1150,96,1151,64,1151,65,1151,96,1152,64,1152,65,1152,96,1155,76,1155,95,1155,108,1156,76,1156,95,1156,108,1157,76,1157,95,1157,108,1158,76,1158,95,1158,108,1159,76,1159,95,1159,108,1160,76,1160,95,1160,108,1161,76,1161,95,1161,108,1162,76,1162,95,1162,108,1163,76,1163,95,1163,108,1164,76,1164,95,1164,108,1165,76,1165,95,1165,108,1166,76,1166,95,1166,108,1167,76,1167,95,1167,108,1171,39,1171,40,1171,41,1171,43,1171,44,1171,47,1171,49,1171,51,1171,55,1171,56,1171,59,1171,60,1171,61,1171,63,1171,64,1171,65,1171,66,1171,67,1171,68,1171,69,1171,70,1171,72,1171,76,1171,78,1171,79,1171,80,1171,81,1171,82,1171,83,1171,84,1171,85,1171,86,1171,87,1171,89,1171,90,1171,91,1171,92,1171,93,1171,95,1171,96,1171,100,1171,101,1171,102,1171,104,1171,125,1171,128,1175,76,1175,95,1175,103,1175,108,1176,76,1176,95,1176,103,1176,108,1177,76,1177,95,1177,103,1177,108,1180,103,1181,76,1181,95,1181,103,1181,108,1182,76,1182,95,1182,103,1182,108,1183,76,1183,95,1183,103,1183,108,1184,76,1184,95,1184,103,1184,108,1185,76,1185,95,1185,103,1185,108,1186,76,1186,95,1186,103,1186,108,1187,76,1187,95,1187,103,1187,108,1188,76,1188,95,1188,103,1188,108,1189,76,1189,95,1189,103,1189,108,1190,76,1190,95,1190,103,1190,108,1191,103,1192,76,1192,95,1192,103,1192,108,1193,76,1193,95,1193,103,1193,108,1194,103,1195,103,1195,108,1196,103,1197,103,1198,76,1198,95,1198,103,1198,108,1199,76,1199,95,1199,103,1199,108,1200,76,1200,95,1200,103,1200,108,1201,76,1201,95,1201,103,1201,108,1202,103,1203,76,1203,95,1203,103,1203,108,1204,76,1204,95,1204,103,1204,108,1205,76,1205,95,1205,103,1205,108,1206,76,1206,95,1206,103,1206,108,1207,103,1208,103,1209,76,1209,95,1209,103,1209,108,1210,76,1210,95,1210,103,1210,108,1211,103,1212,76,1212,95,1212,108,1213,76,1213,95,1213,108,1214,76,1214,95,1214,108,1215,76,1215,95,1215,108,1216,76,1216,95,1216,108,1217,95,1217,108,1218,76,1218,95,1218,108,1219,76,1219,95,1219,108,1220,95,1220,108,1221,95,1221,108,1222,95,1222,108,1228,66,1228,67,1228,68,1228,69,1229,66,1229,67,1229,68,1229,69,1239,76,1239,95,1239,108,1244,76,1244,95,1244,108,1245,76,1245,95,1245,108,1246,76,1246,95,1246,108,1247,76,1247,95,1247,108,1248,76,1248,95,1248,108,1249,76,1249,95,1249,108,1250,76,1250,95,1250,108,1251,76,1251,95,1251,108,1252,76,1252,95,1252,108,1253,76,1253,95,1254,76,1254,95,1255,76,1255,95,1255,108,1256,76,1256,95,1256,108,1257,76,1257,95,1257,108,1258,95,1258,108,1259,76,1259,95,1259,108,1260,95,1260,108,1269,76,1269,95,1270,76,1270,95,1271,76,1271,95,1272,76,1272,95,1272,108,1273,76,1273,95,1273,108,1274,76,1274,95,1274,108,1275,76,1275,95,1275,108,1276,76,1276,95,1276,108,1277,76,1277,95,1277,108,1278,76,1278,95,1278,108,1279,76,1279,95,1279,108,1280,76,1280,95,1280,108,1281,76,1281,95,1281,108,1282,76,1282,95,1282,108,1283,76,1283,95,1283,108,1284,76,1284,95,1284,108,1285,76,1285,95,1285,108,1286,76,1286,95,1286,108,1287,76,1287,95,1287,108,1288,76,1288,95,1288,108,1289,76,1289,95,1289,108,1290,76,1290,95,1290,108,1291,76,1291,95,1291,108,1292,76,1292,95,1292,108,1293,95,1293,108,1294,76,1294,95,1294,108,1295,76,1295,95,1295,108,1296,76,1296,95,1296,108,1297,76,1297,95,1297,108,1306,76,1306,95,1307,76,1307,95,1308,76,1308,95,1309,76,1309,95,1310,76,1310,95,1314,76,1314,95,1315,76,1315,95,1316,76,1316,95,1317,76,1317,95,1318,76,1318,95,1319,76,1319,95,1320,76,1320,95,1321,76,1321,95,1322,76,1322,95,1323,76,1323,95,1324,76,1324,95,1325,76,1325,95,1326,76,1326,95,1327,76,1327,95,1328,76,1328,95,1329,76,1329,95,1330,76,1330,95,1331,76,1331,95,1332,76,1332,95,1333,76,1333,95,1334,76,1334,95,1335,76,1335,95,1336,76,1336,95,1337,76,1337,95,1338,76,1338,95,1339,76,1339,95,1340,76,1340,95,1341,76,1341,95,1342,76,1342,95,1343,76,1343,95,1344,76,1344,95,1356,70,1357,70,1358,70,1359,70,1360,70,1361,70,1362,70,1363,70,1364,70,1365,70,1376,64,1377,64,1378,64,1381,44,1381,47,1381,56,1381,60,1381,63,1381,65,1381,95,1381,101,1381,108,1381,119,1381,120,1381,123,1401,70,1402,70,1403,70,1404,70,1405,70,1406,70,1407,70,1408,70,1409,70,1410,70,1411,70],"member":[0,1234,1,1234,2,1234,3,1234,4,1118,5,1119,45,77,46,45,48,124,49,126,58,120,61,60,62,60,66,42,67,42,68,42,69,42,70,123,71,123,73,44,74,44,75,44,78,77,79,77,80,45,81,45,82,45,83,45,84,45,85,45,86,45,87,45,88,45,89,45,90,45,91,45,92,45,93,45,94,77,96,95,97,124,102,101,104,50,106,52,107,52,110,132,112,53,135,39,136,39,137,40,138,40,139,40,140,40,141,40,142,40,143,40,144,40,145,40,146,40,147,40,148,40,149,40,150,40,151,40,152,40,153,40,154,41,155,41,156,43,157,43,158,44,159,44,160,44,161,46,162,46,163,47,164,47,165,47,166,47,167,48,168,48,169,48,170,48,171,49,172,49,173,49,174,50,175,50,176,50,177,50,178,51,179,51,180,53,181,53,182,54,183,54,184,55,185,55,186,55,187,55,188,56,189,56,190,58,191,58,192,59,193,59,194,59,195,60,196,60,197,60,198,60,199,60,200,60,201,60,202,60,203,60,204,60,205,63,206,63,207,66,208,67,209,68,210,69,211,123,212,70,213,123,214,123,215,72,216,44,217,44,218,44,219,44,220,44,221,44,222,44,223,44,224,76,225,76,226,76,227,78,228,80,229,80,230,81,231,82,232,83,233,84,234,85,235,86,236,87,237,88,238,89,239,90,240,91,241,92,242,93,243,94,244,95,245,95,246,95,247,124,248,126,249,99,250,100,251,100,252,101,253,101,254,102,255,102,256,103,257,104,258,127,259,105,260,129,261,130,262,130,263,106,264,107,265,108,266,131,267,109,268,111,269,133,270,112,271,113,272,114,273,115,274,115,275,116,276,117,277,134,278,119,279,120,280,120,281,121,282,76,283,76,284,95,285,95,286,95,287,108,288,108,289,61,290,61,291,62,292,62,293,39,294,64,295,65,296,65,297,66,298,66,299,66,300,66,301,67,302,67,303,67,304,68,305,68,306,68,307,68,308,69,309,69,310,69,311,69,312,69,313,69,314,69,315,69,316,69,317,69,318,69,319,69,320,69,321,69,322,69,323,69,324,69,325,69,326,69,327,69,328,70,329,70,330,71,331,71,332,77,333,77,334,77,335,77,336,77,337,79,338,79,339,79,340,77,341,77,342,77,343,77,344,77,345,77,346,77,347,77,348,77,349,77,350,57,351,60,352,60,353,60,354,60,355,60,356,61,357,60,358,60,359,60,360,60,361,63,362,63,363,63,364,63,365,63,366,64,367,65,368,65,369,66,370,67,371,68,372,69,373,123,374,70,375,123,376,72,377,72,378,44,379,73,380,73,381,74,382,74,383,75,384,44,385,44,386,44,387,44,388,44,389,44,390,76,391,76,392,76,393,80,394,80,395,80,396,80,397,88,398,88,399,46,400,95,401,95,402,95,403,95,404,95,405,95,406,95,407,47,408,10,410,124,411,124,412,97,413,124,414,125,415,98,416,126,417,126,418,126,419,100,420,100,421,100,422,100,423,100,424,100,425,100,426,100,427,101,428,101,429,101,430,102,431,102,432,101,433,104,434,128,435,128,436,128,437,128,438,128,439,128,440,128,441,128,442,108,443,108,444,108,445,108,446,108,447,108,448,108,449,108,450,108,452,132,453,132,454,132,455,132,456,132,457,132,458,132,459,111,461,114,462,115,463,115,464,115,465,117,466,56,467,56,468,119,479,120,480,120,481,120,482,120,484,121,485,64,486,64,487,64,488,64,489,64,490,64,491,65,492,65,493,71,494,71,495,44,496,125,497,125,498,125,499,125,500,125,501,125,502,125,503,125,504,125,505,125,506,129,507,57,508,57,509,60,510,60,511,60,512,60,513,60,514,60,515,60,516,60,517,60,518,60,519,60,520,60,521,60,522,60,523,60,524,60,525,60,526,60,527,60,528,60,529,60,530,60,531,60,532,60,533,60,534,60,535,60,536,60,537,60,538,60,539,60,540,60,541,60,542,60,543,60,544,60,545,60,546,60,547,60,548,60,549,60,550,60,551,60,552,60,553,60,554,60,555,60,556,60,557,60,558,60,559,60,560,60,561,60,562,60,563,60,564,60,565,60,566,60,567,60,568,60,569,60,570,60,571,60,572,60,573,60,574,60,575,60,576,60,577,60,578,60,579,60,580,60,581,60,582,60,583,60,584,60,585,60,586,60,587,60,588,60,589,60,590,60,591,60,592,60,593,60,594,60,595,60,596,60,597,60,598,60,599,60,600,60,601,60,602,60,603,63,617,6,618,6,619,6,620,6,621,122,622,123,623,123,624,123,625,123,626,44,627,44,628,76,629,76,630,76,631,76,632,76,637,78,638,78,639,78,640,94,641,94,642,95,643,95,644,95,645,95,646,95,647,95,648,95,649,95,650,95,651,95,652,95,653,95,654,95,655,95,656,95,657,95,658,95,659,95,660,95,665,10,666,10,667,10,671,124,672,124,673,124,674,124,675,124,676,124,677,124,678,124,679,124,680,124,681,124,682,124,683,124,684,124,685,124,686,124,687,124,688,124,689,124,690,124,691,124,692,124,693,124,694,124,695,97,696,97,697,97,698,97,699,97,700,97,701,97,702,97,703,97,704,97,705,97,706,97,707,97,708,97,709,97,710,97,711,97,712,97,713,97,714,97,715,97,716,97,717,97,718,97,719,97,720,124,721,124,722,124,723,124,724,124,725,124,726,124,727,124,728,124,729,124,730,124,731,124,732,124,733,124,734,124,735,124,736,125,737,125,738,125,739,125,740,125,741,125,742,125,743,125,744,125,745,125,746,125,747,125,748,125,749,125,750,125,751,125,752,125,753,125,754,125,755,125,756,125,757,125,758,125,759,125,760,125,761,125,762,125,763,125,764,125,765,125,766,125,767,125,768,125,769,125,770,125,771,125,772,125,773,125,774,125,775,98,776,98,777,98,778,98,779,98,780,126,781,126,782,126,783,126,784,126,785,126,793,12,795,12,796,12,798,12,800,12,801,12,802,99,803,100,804,103,805,127,806,127,807,127,808,105,809,105,810,105,811,105,812,105,813,105,814,105,815,105,816,105,817,129,818,129,819,129,820,129,829,13,831,130,832,130,833,130,834,130,835,130,836,130,837,130,838,108,839,108,840,108,841,108,842,108,843,108,844,108,845,108,846,108,848,131,849,131,850,131,856,16,857,16,858,16,859,16,860,16,861,16,862,16,863,16,864,16,865,16,866,16,867,16,868,16,869,16,870,16,871,132,872,132,873,132,874,132,875,132,876,132,877,132,878,132,879,132,880,132,881,132,882,132,883,132,884,132,885,132,886,132,887,132,888,132,889,132,903,111,904,111,905,111,906,111,907,111,908,111,909,111,910,111,922,20,923,20,924,20,925,20,926,20,927,20,928,20,929,20,930,20,931,20,932,20,933,20,934,20,935,133,949,115,950,115,951,117,952,117,958,134,959,134,960,56,965,28,966,28,968,28,975,28,987,29,990,29,991,29,992,29,994,29,995,29,996,29,997,29,998,29,999,29,1000,29,1001,29,1003,29,1006,29,1008,121,1009,60,1010,63,1011,64,1012,64,1013,64,1014,64,1015,64,1016,64,1017,64,1018,65,1019,65,1020,65,1021,65,1022,65,1023,44,1024,76,1025,96,1026,96,1027,95,1028,125,1029,100,1030,128,1031,64,1032,65,1034,66,1035,67,1036,68,1037,42,1038,69,1042,76,1043,76,1044,76,1045,80,1046,81,1047,82,1048,83,1049,84,1050,85,1051,86,1052,87,1053,89,1054,90,1055,91,1056,92,1057,93,1058,95,1059,95,1060,95,1061,95,1064,126,1065,126,1066,126,1067,126,1070,103,1073,127,1074,127,1075,127,1076,127,1078,129,1079,129,1080,130,1081,130,1082,130,1085,108,1086,108,1087,108,1088,131,1089,131,1091,133,1096,1173,1097,1231,1098,1347,1099,1347],"override":[37,31],"requirement":[30,7,31,13,32,14,33,15,34,17,35,17,36,19,37,26,38,27,409,11,451,16,460,20,469,28,470,28,471,28,472,28,473,28,474,28,475,28,476,28,477,28,483,29,604,6,605,6,606,6,607,6,608,6,609,6,610,6,611,6,612,6,613,6,614,6,615,6,616,6,633,8,634,8,661,10,662,10,663,10,664,10,669,11,670,11,786,12,787,12,788,12,789,12,790,12,791,12,821,13,822,13,823,13,824,13,825,13,847,14,851,15,852,16,853,16,854,16,855,16,890,17,891,17,894,18,895,18,896,18,897,18,898,18,899,18,900,18,901,18,902,18,911,19,913,20,914,20,915,20,916,20,917,20,918,20,919,20,920,20,921,20,936,21,937,21,938,22,940,24,941,24,942,25,943,25,944,25,945,25,946,25,947,25,948,25,953,26,954,26,957,27,961,28,962,28,980,29,981,29,982,29,983,29,984,29,985,29,986,29],"defaultImplementation":[478,471,635,633,636,634,668,663,792,786,794,787,797,789,799,790,826,821,827,822,828,823,830,824,892,890,893,891,912,911,939,938,955,821,956,825,963,914,964,914,967,913,969,915,970,916,971,917,972,918,973,919,974,919,976,920,977,921,978,961,979,962,988,980,989,981,993,661,1002,984,1004,663,1005,664,1007,985]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/AddressedEnvelope.swift","symbols":[19,14,101,20,15,428,21,15,429,23,15,432,25,11,253,30,11,252,37,18,102,39,19,431,40,19,430,42,15,255,47,15,254,55,15,427,67,12,55,69,9,184,71,9,186,73,9,187,75,9,185,78,14,72,79,15,377,80,15,376,82,11,215]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/AsyncAwaitSupport.swift","symbols":[23,16,760,41,16,665,65,16,777,86,16,966,93,16,979,100,16,978,110,16,934,119,16,927,128,16,932,138,16,925,148,16,929,158,16,923,165,16,679,172,16,692,177,16,686,182,16,689,188,16,732,194,16,730,201,16,728,206,16,683,212,16,682,218,14,109,219,12,267,231,16,2,252,16,3,274,16,0,294,16,1]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/BSDSocketAPI.swift","symbols":[88,12,42,92,21,1037,98,18,67,99,25,1035,100,19,370,101,15,208,115,18,68,116,25,1036,117,19,371,118,15,209,132,18,66,133,25,1034,134,19,369,135,15,207,149,18,69,150,25,1038,151,19,372,152,15,210,167,22,301,171,22,303,175,22,302,182,22,304,186,22,306,190,22,305,197,26,307,207,26,297,216,26,299,228,26,298,239,22,300,246,22,318,250,22,321,254,22,314,258,22,319,262,22,316,269,22,315,273,22,317,277,22,322,281,22,320,285,22,323,290,22,308,297,22,310,304,22,325,320,22,324,324,22,311,328,22,326,332,22,327,336,22,309,340,22,312,347,22,313]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-aux.swift","symbols":[28,16,593,48,25,599,65,25,536,78,25,532,92,25,520,105,25,575,132,25,601,153,25,572,168,16,598,186,16,570,210,25,515,224,25,574,241,25,523,255,25,521,277,25,535,291,25,531,311,16,524,326,25,534,347,25,577,362,25,578,378,25,583,393,25,584,407,25,585,419,25,512,433,25,513,447,25,518,460,25,517,473,25,511,486,25,509,504,16,592,521,25,600,531,25,510,548,11,203,563,11,199,578,11,202,593,11,196,608,11,197,624,11,200,638,11,201,657,11,198,672,11,195,684,16,811,696,16,815,708,16,809,720,16,810,733,16,812,747,16,814,763,16,816,776,16,808,796,25,1099,812,25,1098]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-conversions.swift","symbols":[21,11,1097,33,11,1096,45,11,4]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-core.swift","symbols":[74,14,105,79,22,259,107,16,813,215,14,60,503,26,355,509,26,354,517,15,360,525,15,357,539,25,530,564,25,529,590,25,581,608,25,582,623,25,579,635,25,580,644,16,538,653,25,576,666,16,573,684,16,587,693,16,586,721,16,594,769,44,533,797,15,352,804,15,353,815,25,591,834,25,590,848,25,589,873,15,351,895,15,358,905,25,596,912,25,595,924,25,526,938,25,525,952,25,528,966,25,527,984,25,597,1012,18,61,1021,26,290,1024,26,289,1031,15,356,1041,23,1009,1063,16,588,1089,25,554]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-int.swift","symbols":[32,25,519,50,16,514,79,25,522,96,25,516,161,12,39,163,22,293,171,9,135,174,9,136]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-lengthPrefix.swift","symbols":[15,18,62,22,26,291,23,26,292,37,25,539,85,25,537,110,25,571,131,16,569]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-multi-int.swift","symbols":[19,25,553,55,25,555,85,25,552,127,25,556,163,25,551,211,25,557,253,25,550,307,25,558,355,25,549,415,25,559,469,25,548,535,25,560,595,25,547,667,25,561,733,25,546,811,25,562,883,25,545,967,25,563,1045,25,544,1135,25,564,1219,25,543,1315,25,565,1405,25,542,1507,25,566,1603,25,541,1711,25,567,1813,25,540,1927,25,568]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ByteBuffer-views.swift","symbols":[18,14,76,19,21,1044,20,21,1043,21,21,1042,35,11,226,40,16,629,48,15,390,53,15,392,58,16,632,63,15,391,70,11,283,86,11,282,96,16,630,156,11,225,161,25,628,203,15,359,214,16,602,226,11,204,234,23,1024,252,16,631,262,11,224]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/Channel.swift","symbols":[21,16,6,23,9,606,26,9,607,32,9,616,37,9,609,44,9,610,51,9,615,58,9,614,61,9,613,64,9,611,72,9,612,79,9,608,85,9,604,91,9,605,104,16,28,106,8,477,109,8,470,112,8,476,115,8,472,118,8,473,122,8,474,125,9,962,128,9,961,131,8,469,136,8,475,146,8,471,151,15,478,156,16,24,160,9,941,165,9,940,171,16,969,175,16,976,179,16,973,183,16,972,187,16,963,191,16,970,195,16,971,199,16,977,203,16,968,207,16,967,219,16,975,226,16,974,233,16,965,241,16,964,263,16,617,285,16,618,299,16,619,312,16,620,318,12,40,320,9,141,323,9,142,326,9,145,329,9,137,332,9,140,335,9,139,338,9,138,342,9,153,346,9,147,349,9,146,352,9,144,355,9,151,358,9,150,362,9,149,366,9,148,369,9,152,372,9,143,378,14,118,380,12,52,381,18,106,382,15,263,385,18,107,389,15,264,400,12,41,402,9,154,404,9,155,412,14,113,413,11,271]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ChannelHandler.swift","symbols":[19,16,8,24,9,633,30,9,634,221,16,635,225,16,636,319,16,22,333,9,938,340,16,939]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ChannelHandlers.swift","symbols":[20,19,129,21,21,1079,22,21,1078,29,23,506,37,11,260,43,16,820,61,16,817,74,16,819,83,16,818,116,19,127,117,21,1074,118,21,1076,119,21,1073,120,21,1075,125,11,258,127,16,807,135,16,806,147,16,805,165,19,126,166,21,1067,167,21,1064,168,21,1065,169,21,1066,172,16,49,174,13,173,176,13,172,178,13,171,181,15,417,182,15,418,183,15,416,192,11,248,201,16,781,207,16,783,211,16,782,216,16,780,223,16,784,231,16,785]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ChannelInvoker.swift","symbols":[15,16,20,22,9,921,29,9,915,36,9,920,47,9,919,50,9,918,58,9,914,65,9,916,73,9,917,80,9,913,83,8,460,95,16,933,105,16,926,115,16,931,129,16,930,140,16,924,151,16,928,162,16,922,174,16,18,177,9,894,180,9,896,186,9,899,192,9,900,198,9,898,201,9,895,211,9,897,220,9,902,226,9,901,230,16,9,233,12,59,236,9,194,240,9,193,243,9,192]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ChannelOption.swift","symbols":[15,16,7,17,19,30,20,17,1069,22,21,1071,23,21,1072,30,17,1039,33,17,1062,36,17,1077,39,17,1041,42,17,1063,45,17,1092,48,17,1040,51,17,1095,54,17,1090,57,17,1093,60,17,1084,63,17,1094,66,16,45,71,22,80,72,29,1045,74,23,394,75,23,393,77,23,396,85,23,395,100,23,228,111,19,229,118,22,83,119,29,1048,121,19,232,125,22,86,126,29,1051,128,19,235,133,22,82,134,29,1047,136,19,231,142,22,84,143,29,1049,145,19,233,150,22,89,151,29,1053,153,19,238,157,22,81,158,29,1046,160,19,230,187,22,92,188,29,1056,190,19,241,194,22,93,195,29,1057,196,19,242,200,22,88,205,23,397,211,23,398,220,19,237,233,22,90,234,29,1054,236,19,239,241,22,87,242,29,1052,244,19,236,252,22,91,253,29,1055,255,19,240,259,22,85,260,29,1050,261,19,234,267,14,77,269,26,344,275,22,332,280,22,348,285,22,347,288,22,333,291,22,346,294,22,336,297,22,345,300,22,349,303,22,340,306,22,334,309,22,341,312,22,342,315,22,343,318,22,335,324,18,94,328,15,243,339,29,641,366,20,640]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ChannelPipeline.swift","symbols":[140,19,124,148,15,413,169,16,678,335,16,691,346,16,685,357,16,688,368,16,690,392,16,684,416,16,687,439,16,733,468,16,731,501,16,729,612,16,671,622,16,673,632,16,677,642,16,676,652,16,675,662,16,672,672,16,674,682,16,721,692,16,694,702,16,724,712,16,725,722,16,723,732,16,726,742,16,693,752,16,722,762,16,727,772,16,735,782,16,720,935,11,247,961,16,681,984,16,680,1038,18,97,1047,19,412,1058,20,702,1070,20,704,1081,20,703,1092,20,717,1101,20,716,1111,20,715,1120,20,718,1127,20,695,1135,20,697,1143,20,701,1151,20,700,1159,20,699,1167,20,696,1175,20,698,1183,20,708,1191,20,706,1199,20,711,1207,20,712,1215,20,710,1223,20,713,1231,20,705,1239,20,709,1247,20,714,1255,20,719,1263,20,707,1271,15,410,1283,16,48,1285,13,169,1288,13,167,1291,13,170,1294,13,168,1405,12,51,1407,9,178,1409,9,179,1422,19,132,1427,15,457,1429,15,455,1433,15,456,1437,15,453,1450,15,452,1463,15,458,1467,15,454,1487,16,871,1494,16,873,1501,16,876,1508,16,877,1513,16,875,1518,16,872,1525,16,874,1530,16,880,1535,16,882,1542,16,889,1556,16,883,1570,16,888,1585,16,887,1599,16,886,1612,16,879,1624,16,884,1636,16,885,1649,16,881,1864,18,110,1875,16,878,1893,15,411,1949,16,734]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/CircularBuffer.swift","symbols":[17,14,95,64,18,96,86,27,1026,93,27,1025,114,21,1059,115,21,1060,116,21,1061,117,21,1058,129,16,649,135,16,650,152,11,286,171,15,400,187,15,406,210,16,657,295,16,651,302,11,285,326,11,245,336,11,246,344,25,652,358,25,656,431,11,284,442,15,404,448,15,402,458,15,405,464,25,659,493,25,653,499,15,401,528,25,658,547,25,655,571,25,643,594,25,645,616,25,644,636,25,642,654,25,647,702,25,646,726,25,654,760,15,403,770,25,648,814,23,1027,820,16,660,830,11,244]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/Codec.swift","symbols":[16,12,43,18,9,157,21,9,156,25,12,53,30,9,180,34,9,181,40,18,112,41,15,270,144,16,13,146,19,31,160,18,825,178,18,821,184,18,823,190,18,822,198,18,824,206,16,27,208,19,38,214,18,957,218,25,828,221,25,827,225,16,830,237,16,829,241,25,826,374,19,130,375,21,1081,376,21,1080,463,23,262,472,11,261,614,16,833,626,16,834,642,16,832,678,16,835,686,16,836,697,21,1082,698,16,837,713,16,14,714,19,32,721,9,847,725,16,831,749,19,131,750,21,1089,751,21,1088,773,11,266,784,16,848,791,16,849,796,16,850]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/ConvenienceOptionSupport.swift","symbols":[32,16,906,47,16,46,49,13,162,51,13,161,61,15,399,86,18,79,104,22,339,107,22,337,114,22,338,120,18,78,127,15,227,148,29,639,158,29,637,168,29,638]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/DispatchQueue+WithFuture.swift","symbols":[30,16,5]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/EventLoop+Deprecated.swift","symbols":[17,16,996,23,16,999]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/EventLoop.swift","symbols":[24,14,121,36,11,281,53,16,1008,60,15,484,72,19,122,127,16,621,211,14,103,212,21,1070,216,11,256,223,25,804,258,16,29,260,8,483,265,9,986,278,9,985,300,9,983,327,9,982,344,9,980,348,9,981,355,9,984,394,16,1002,414,15,408,422,14,64,424,21,1031,427,15,366,438,23,485,447,23,486,456,23,487,465,23,490,474,23,489,483,23,488,489,23,1011,496,22,294,500,23,1014,504,23,1016,508,23,1015,512,23,1017,516,23,1013,520,23,1012,542,14,65,544,21,1032,554,15,368,558,22,295,559,22,296,591,23,492,595,23,491,601,23,1019,605,23,1018,611,15,367,617,23,1022,623,23,1020,637,23,1021,666,16,1007,712,16,991,749,16,995,807,16,994,854,16,992,864,16,997,874,16,1000,889,16,998,901,16,1005,908,16,1004,913,16,1006,930,16,1001,997,16,1003,1050,16,993,1060,16,990,1072,16,987,1080,16,988,1086,16,989,1092,16,10,1106,9,664,1127,9,663,1134,25,662,1146,9,661,1158,16,668,1165,32,666,1174,16,667,1204,12,54,1207,9,182,1211,9,183,1219,12,47,1221,9,164,1224,9,166,1227,9,165,1230,9,163,1234,15,407]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/EventLoopFuture+Deprecated.swift","symbols":[17,16,771,23,16,749,31,16,753,37,16,762,43,16,741,49,16,744,57,16,773,63,16,758,71,16,756]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/EventLoopFuture+WithEventLoop.swift","symbols":[44,16,736,118,16,737,182,16,738]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/EventLoopFuture.swift","symbols":[158,14,98,161,15,415,186,16,779,195,16,778,208,16,775,227,16,776,384,19,125,390,15,414,440,23,1028,479,16,772,557,16,750,619,16,754,693,16,763,763,16,742,824,16,745,883,16,774,979,16,740,1024,16,739,1064,16,743,1110,16,759,1151,16,757,1181,16,770,1204,16,747,1216,16,746,1237,16,765,1282,16,764,1371,23,505,1448,23,504,1531,23,496,1546,23,497,1566,23,500,1580,23,501,1688,23,498,1704,23,499,1728,23,502,1743,23,503,1849,16,761,1872,16,766,1919,16,768,1940,16,769,1966,16,767,2025,16,748,2075,16,752,2095,16,751,2135,16,755]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/FileDescriptor.swift","symbols":[14,16,11,25,9,669,28,8,409,31,9,670]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/FileHandle.swift","symbols":[24,17,1068,37,19,123,38,28,375,43,11,211,58,16,625,70,16,622,79,16,624,87,16,623,97,18,70,98,19,374,100,15,212,118,26,328,120,26,329,124,18,71,128,26,331,133,26,330,140,27,493,150,27,494,161,23,213,175,23,214,183,15,373]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/FileRegion.swift","symbols":[34,14,63,37,15,361,43,28,363,53,15,365,63,11,205,72,15,364,77,25,603,89,11,206,101,23,1010,107,15,362]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/IO.swift","symbols":[37,14,120,39,16,58,40,13,191,41,13,190,48,15,481,63,15,482,91,11,279,102,11,280,148,15,479,152,15,480]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/IOData.swift","symbols":[18,12,56,20,9,188,26,9,189,35,15,467,45,25,960,58,15,466]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/Interfaces.swift","symbols":[60,19,128,66,15,439,69,15,440,72,15,441,76,15,435,81,15,438,84,15,437,87,15,434,164,15,436,173,23,1030,202,14,100,206,15,424,217,15,425,228,15,426,240,15,420,253,15,423,264,15,422,275,15,419,312,11,251,325,11,250,465,15,421,474,23,1029,485,16,803]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/MarkedCircularBuffer.swift","symbols":[19,14,108,28,11,265,36,25,844,42,25,839,48,25,846,61,15,447,67,15,449,73,15,446,78,15,443,86,25,840,97,16,838,109,15,445,120,15,444,126,15,448,132,21,1087,133,21,1086,134,21,1085,137,16,841,142,15,442,145,15,450,149,11,288,159,11,287,177,16,843,182,16,845,187,16,842]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/MulticastChannel.swift","symbols":[18,16,12,25,9,790,37,9,791,48,9,789,56,9,787,68,9,788,79,9,786,85,16,799,89,16,801,97,16,800,104,16,798,110,16,794,114,16,796,122,16,795,129,16,793,146,16,797,159,16,792,166,14,114,167,15,461,169,11,272,175,14,116,176,11,275]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/NIOAny.swift","symbols":[44,14,119,52,11,278,260,15,468]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/NIOCloseOnErrorHandler.swift","symbols":[16,19,133,18,21,1091,21,11,269,23,16,935]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/NIOSendable.swift","symbols":[15,17,1033,21,32,23]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/RecvByteBufferAllocator.swift","symbols":[15,16,21,17,9,936,24,18,937,30,14,117,31,15,465,33,11,276,38,25,952,43,16,951,49,14,115,50,15,464,51,15,463,52,15,462,59,11,274,63,11,273,78,16,949,82,25,950]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/SingleStepByteToMessageDecoder.swift","symbols":[21,16,26,24,19,37,35,18,954,50,18,953,56,25,956,65,25,955,186,19,134,208,11,277,289,16,959,301,16,958]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/SocketAddresses.swift","symbols":[51,12,50,53,9,177,55,9,175,57,9,174,59,9,176,64,18,104,65,19,433,67,15,257,74,12,44,77,18,73,81,19,380,84,19,379,92,18,74,96,19,382,99,19,381,107,18,75,111,19,383,119,9,159,122,9,160,125,9,158,128,15,384,160,15,386,165,15,389,177,15,378,196,15,387,226,15,388,246,16,626,262,11,219,271,11,220,279,11,221,287,11,223,295,11,222,305,11,216,331,11,217,375,11,218,450,23,495,513,23,1023,565,16,627,608,15,385]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/SocketOptionProvider.swift","symbols":[48,16,16,50,8,451,66,13,855,82,9,854,97,13,853,112,9,852,141,16,858,149,16,857,159,16,860,167,16,859,177,16,862,185,16,861,195,16,865,203,16,863,213,16,866,221,16,864,231,16,869,239,16,867,249,16,870,257,16,868,268,20,856]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/TypeAssistedChannelHandler.swift","symbols":[37,16,17,39,19,34,42,19,35,46,9,891,50,9,890,56,16,893,61,16,892,69,16,19,71,19,36,75,9,911,81,16,912,87,17,1083]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/UniversalBootstrapSupport.swift","symbols":[16,16,25,36,9,945,66,9,944,82,9,942,93,9,943,101,9,948,108,9,947,115,9,946,174,14,111,175,15,459,187,11,268,223,16,905,233,16,903,240,16,904,251,16,909,260,16,908,269,16,907,275,16,910,281,16,15,282,19,33,284,9,851,287,14,99,288,11,249,290,16,802]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOCore/Utilities.swift","symbols":[56,12,57,66,22,350,117,23,508,147,23,507]}]}