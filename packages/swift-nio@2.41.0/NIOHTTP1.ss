{"culture":"NIOHTTP1","dependencies":[{"package":"swift-atomics","modules":["Atomics"]},{"package":"swift-nio","modules":["NIO","NIOConcurrencyHelpers","NIOCore","NIOEmbedded","NIOPosix","_NIODataStructures"]}],"extensions":[],"partitions":[{"namespace":"NIOCore","communities":[{"community":"method","startIndex":0,"endIndex":5}]},{"namespace":"NIOHTTP1","communities":[{"community":"protocol","startIndex":5,"endIndex":7},{"community":"enum","startIndex":7,"endIndex":15},{"community":"struct","startIndex":15,"endIndex":27},{"community":"class","startIndex":27,"endIndex":36},{"community":"enum.case","startIndex":36,"endIndex":166},{"community":"init","startIndex":166,"endIndex":186},{"community":"subscript","startIndex":186,"endIndex":189},{"community":"type.property","startIndex":189,"endIndex":213},{"community":"property","startIndex":213,"endIndex":246},{"community":"method","startIndex":246,"endIndex":285},{"community":"type.op","startIndex":285,"endIndex":289},{"community":"typealias","startIndex":289,"endIndex":325}]}],"identifiers":["s7NIOCore15ChannelPipelineC21SynchronousOperationsV8NIOHTTP1E019configureHTTPServerC08position24withPipeliningAssistance0J13ServerUpgrade0J13ErrorHandlingyAC8PositionO_SbSayAF0H16ProtocolUpgrader_pG9upgraders_yAA0B14HandlerContextCYbc010completionU0tSgSbtKF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV8NIOHTTP1E21addHTTPClientHandlers8position21leftOverBytesStrategy17withClientUpgradeyAC8PositionO_AF011RemoveAfterqN0OSayAF29NIOHTTPClientProtocolUpgrader_pG9upgraders_yAA0B14HandlerContextCYbc010completionY0tSgtKF","s7NIOCore15ChannelPipelineC8NIOHTTP1E019configureHTTPServerC08position24withPipeliningAssistance0H13ServerUpgrade0H13ErrorHandlingAA15EventLoopFutureCyytGAC8PositionO_SbSayAD0F16ProtocolUpgrader_pG9upgraders_yAA0B14HandlerContextCYbc010completionV0tSgSbtF","s7NIOCore15ChannelPipelineC8NIOHTTP1E21addHTTPClientHandlers8position21leftOverBytesStrategy17withClientUpgradeAA15EventLoopFutureCyytGAC8PositionO_AD011RemoveAfteroL0OSayAD29NIOHTTPClientProtocolUpgrader_pG9upgraders_yAA0B14HandlerContextCYbc010completionZ0tSgtF","s7NIOCore15ChannelPipelineC8NIOHTTP1E21addHTTPClientHandlers8position21leftOverBytesStrategyAA15EventLoopFutureCyytGAC8PositionO_AD018RemoveAfterUpgradeL0OtF","s8NIOHTTP126HTTPServerProtocolUpgraderP","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP","s8NIOHTTP110HTTPMethodO","s8NIOHTTP115HTTPDecoderKindO","s8NIOHTTP115HTTPParserErrorO","s8NIOHTTP118HTTPResponseStatusO","s8NIOHTTP123HTTPServerUpgradeErrorsO","s8NIOHTTP123HTTPServerUpgradeEventsO","s8NIOHTTP126RemoveAfterUpgradeStrategyO","s8NIOHTTP18HTTPPartO","s8NIOHTTP111HTTPHeadersV","s8NIOHTTP111HTTPHeadersV5IndexV","s8NIOHTTP111HTTPVersionV","s8NIOHTTP115HTTPRequestHeadV","s8NIOHTTP116HTTPResponseHeadV","s8NIOHTTP119NIOHTTPDecoderErrorV","s8NIOHTTP124NIOHTTPServerRequestFullV","s8NIOHTTP125NIOHTTPClientResponseFullV","s8NIOHTTP125NIOHTTPClientUpgradeErrorV","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV","s8NIOHTTP128NIOHTTPObjectAggregatorEventV","s8NIOHTTP132NIOInformationalResponseStrategyV","s8NIOHTTP111HTTPDecoderC","s8NIOHTTP118HTTPRequestEncoderC","s8NIOHTTP119HTTPResponseEncoderC","s8NIOHTTP124HTTPServerUpgradeHandlerC","s8NIOHTTP125HTTPServerPipelineHandlerC","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC","s8NIOHTTP130HTTPServerProtocolErrorHandlerC","s8NIOHTTP130NIOHTTPServerRequestAggregatorC","s8NIOHTTP131NIOHTTPClientResponseAggregatorC","s8NIOHTTP110HTTPMethodO10MKACTIVITYyA2CmF","s8NIOHTTP110HTTPMethodO10MKCALENDARyA2CmF","s8NIOHTTP110HTTPMethodO11UNSUBSCRIBEyA2CmF","s8NIOHTTP110HTTPMethodO3ACLyA2CmF","s8NIOHTTP110HTTPMethodO3GETyA2CmF","s8NIOHTTP110HTTPMethodO3PUTyA2CmF","s8NIOHTTP110HTTPMethodO3RAWyACSS_tcACmF","s8NIOHTTP110HTTPMethodO4BINDyA2CmF","s8NIOHTTP110HTTPMethodO4COPYyA2CmF","s8NIOHTTP110HTTPMethodO4HEADyA2CmF","s8NIOHTTP110HTTPMethodO4LINKyA2CmF","s8NIOHTTP110HTTPMethodO4LOCKyA2CmF","s8NIOHTTP110HTTPMethodO4MOVEyA2CmF","s8NIOHTTP110HTTPMethodO4POSTyA2CmF","s8NIOHTTP110HTTPMethodO5MERGEyA2CmF","s8NIOHTTP110HTTPMethodO5MKCOLyA2CmF","s8NIOHTTP110HTTPMethodO5PATCHyA2CmF","s8NIOHTTP110HTTPMethodO5PURGEyA2CmF","s8NIOHTTP110HTTPMethodO5TRACEyA2CmF","s8NIOHTTP110HTTPMethodO6DELETEyA2CmF","s8NIOHTTP110HTTPMethodO6NOTIFYyA2CmF","s8NIOHTTP110HTTPMethodO6REBINDyA2CmF","s8NIOHTTP110HTTPMethodO6REPORTyA2CmF","s8NIOHTTP110HTTPMethodO6SEARCHyA2CmF","s8NIOHTTP110HTTPMethodO6SOURCEyA2CmF","s8NIOHTTP110HTTPMethodO6UNBINDyA2CmF","s8NIOHTTP110HTTPMethodO6UNLINKyA2CmF","s8NIOHTTP110HTTPMethodO6UNLOCKyA2CmF","s8NIOHTTP110HTTPMethodO7CONNECTyA2CmF","s8NIOHTTP110HTTPMethodO7MSEARCHyA2CmF","s8NIOHTTP110HTTPMethodO7OPTIONSyA2CmF","s8NIOHTTP110HTTPMethodO8CHECKOUTyA2CmF","s8NIOHTTP110HTTPMethodO8PROPFINDyA2CmF","s8NIOHTTP110HTTPMethodO9PROPPATCHyA2CmF","s8NIOHTTP110HTTPMethodO9SUBSCRIBEyA2CmF","s8NIOHTTP115HTTPDecoderKindO7requestyA2CmF","s8NIOHTTP115HTTPDecoderKindO8responseyA2CmF","s8NIOHTTP115HTTPParserErrorO10invalidURLyA2CmF","s8NIOHTTP115HTTPParserErrorO10lfExpectedyA2CmF","s8NIOHTTP115HTTPParserErrorO11invalidHostyA2CmF","s8NIOHTTP115HTTPParserErrorO11invalidPathyA2CmF","s8NIOHTTP115HTTPParserErrorO11invalidPortyA2CmF","s8NIOHTTP115HTTPParserErrorO13invalidMethodyA2CmF","s8NIOHTTP115HTTPParserErrorO13invalidStatusyA2CmF","s8NIOHTTP115HTTPParserErrorO14headerOverflowyA2CmF","s8NIOHTTP115HTTPParserErrorO14invalidVersionyA2CmF","s8NIOHTTP115HTTPParserErrorO15invalidConstantyA2CmF","s8NIOHTTP115HTTPParserErrorO15invalidEOFStateyA2CmF","s8NIOHTTP115HTTPParserErrorO15invalidFragmentyA2CmF","s8NIOHTTP115HTTPParserErrorO15trailingGarbageyA2CmF","s8NIOHTTP115HTTPParserErrorO16closedConnectionyA2CmF","s8NIOHTTP115HTTPParserErrorO16invalidChunkSizeyA2CmF","s8NIOHTTP115HTTPParserErrorO18invalidHeaderTokenyA2CmF","s8NIOHTTP115HTTPParserErrorO18invalidQueryStringyA2CmF","s8NIOHTTP115HTTPParserErrorO19strictModeAssertionyA2CmF","s8NIOHTTP115HTTPParserErrorO20invalidContentLengthyA2CmF","s8NIOHTTP115HTTPParserErrorO20invalidInternalStateyA2CmF","s8NIOHTTP115HTTPParserErrorO21invalidCharactersUsedyA2CmF","s8NIOHTTP115HTTPParserErrorO23unexpectedContentLengthyA2CmF","s8NIOHTTP115HTTPParserErrorO6pausedyA2CmF","s8NIOHTTP115HTTPParserErrorO7unknownyA2CmF","s8NIOHTTP118HTTPResponseStatusO05multiC0yA2CmF","s8NIOHTTP118HTTPResponseStatusO10badGatewayyA2CmF","s8NIOHTTP118HTTPResponseStatusO10badRequestyA2CmF","s8NIOHTTP118HTTPResponseStatusO10processingyA2CmF","s8NIOHTTP118HTTPResponseStatusO10uriTooLongyA2CmF","s8NIOHTTP118HTTPResponseStatusO11notExtendedyA2CmF","s8NIOHTTP118HTTPResponseStatusO11notModifiedyA2CmF","s8NIOHTTP118HTTPResponseStatusO12loopDetectedyA2CmF","s8NIOHTTP118HTTPResponseStatusO12resetContentyA2CmF","s8NIOHTTP118HTTPResponseStatusO12unauthorizedyA2CmF","s8NIOHTTP118HTTPResponseStatusO13notAcceptableyA2CmF","s8NIOHTTP118HTTPResponseStatusO14gatewayTimeoutyA2CmF","s8NIOHTTP118HTTPResponseStatusO14lengthRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO14notImplementedyA2CmF","s8NIOHTTP118HTTPResponseStatusO14partialContentyA2CmF","s8NIOHTTP118HTTPResponseStatusO14requestTimeoutyA2CmF","s8NIOHTTP118HTTPResponseStatusO15alreadyReportedyA2CmF","s8NIOHTTP118HTTPResponseStatusO15multipleChoicesyA2CmF","s8NIOHTTP118HTTPResponseStatusO15payloadTooLargeyA2CmF","s8NIOHTTP118HTTPResponseStatusO15paymentRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO15tooManyRequestsyA2CmF","s8NIOHTTP118HTTPResponseStatusO15upgradeRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO16failedDependencyyA2CmF","s8NIOHTTP118HTTPResponseStatusO16methodNotAllowedyA2CmF","s8NIOHTTP118HTTPResponseStatusO16movedPermanentlyyA2CmF","s8NIOHTTP118HTTPResponseStatusO17expectationFailedyA2CmF","s8NIOHTTP118HTTPResponseStatusO17permanentRedirectyA2CmF","s8NIOHTTP118HTTPResponseStatusO17temporaryRedirectyA2CmF","s8NIOHTTP118HTTPResponseStatusO18misdirectedRequestyA2CmF","s8NIOHTTP118HTTPResponseStatusO18preconditionFailedyA2CmF","s8NIOHTTP118HTTPResponseStatusO18serviceUnavailableyA2CmF","s8NIOHTTP118HTTPResponseStatusO18switchingProtocolsyA2CmF","s8NIOHTTP118HTTPResponseStatusO19insufficientStorageyA2CmF","s8NIOHTTP118HTTPResponseStatusO19internalServerErroryA2CmF","s8NIOHTTP118HTTPResponseStatusO19rangeNotSatisfiableyA2CmF","s8NIOHTTP118HTTPResponseStatusO19unprocessableEntityyA2CmF","s8NIOHTTP118HTTPResponseStatusO20preconditionRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO20unsupportedMediaTypeyA2CmF","s8NIOHTTP118HTTPResponseStatusO21variantAlsoNegotiatesyA2CmF","s8NIOHTTP118HTTPResponseStatusO23httpVersionNotSupportedyA2CmF","s8NIOHTTP118HTTPResponseStatusO26unavailableForLegalReasonsyA2CmF","s8NIOHTTP118HTTPResponseStatusO27nonAuthoritativeInformationyA2CmF","s8NIOHTTP118HTTPResponseStatusO27proxyAuthenticationRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO27requestHeaderFieldsTooLargeyA2CmF","s8NIOHTTP118HTTPResponseStatusO29networkAuthenticationRequiredyA2CmF","s8NIOHTTP118HTTPResponseStatusO2okyA2CmF","s8NIOHTTP118HTTPResponseStatusO4goneyA2CmF","s8NIOHTTP118HTTPResponseStatusO5foundyA2CmF","s8NIOHTTP118HTTPResponseStatusO6customyACSu_SStcACmF","s8NIOHTTP118HTTPResponseStatusO6imUsedyA2CmF","s8NIOHTTP118HTTPResponseStatusO6lockedyA2CmF","s8NIOHTTP118HTTPResponseStatusO7createdyA2CmF","s8NIOHTTP118HTTPResponseStatusO8acceptedyA2CmF","s8NIOHTTP118HTTPResponseStatusO8conflictyA2CmF","s8NIOHTTP118HTTPResponseStatusO8continueyA2CmF","s8NIOHTTP118HTTPResponseStatusO8notFoundyA2CmF","s8NIOHTTP118HTTPResponseStatusO8seeOtheryA2CmF","s8NIOHTTP118HTTPResponseStatusO8useProxyyA2CmF","s8NIOHTTP118HTTPResponseStatusO9forbiddenyA2CmF","s8NIOHTTP118HTTPResponseStatusO9imATeapotyA2CmF","s8NIOHTTP118HTTPResponseStatusO9noContentyA2CmF","s8NIOHTTP123HTTPServerUpgradeErrorsO19invalidHTTPOrderingyA2CmF","s8NIOHTTP123HTTPServerUpgradeEventsO15upgradeCompleteyACSS_AA15HTTPRequestHeadVtcACmF","s8NIOHTTP126RemoveAfterUpgradeStrategyO12forwardBytesyA2CmF","s8NIOHTTP126RemoveAfterUpgradeStrategyO9dropBytesyA2CmF","s8NIOHTTP126RemoveAfterUpgradeStrategyO9fireErroryA2CmF","s8NIOHTTP18HTTPPartO3endyACyxq_GAA11HTTPHeadersVSgcAEmSQRzSQR_r0_lF","s8NIOHTTP18HTTPPartO4bodyyACyxq_Gq_cAEmSQRzSQR_r0_lF","s8NIOHTTP18HTTPPartO4headyACyxq_GxcAEmSQRzSQR_r0_lF","s8NIOHTTP110HTTPMethodO8rawValueACSS_tcfc","s8NIOHTTP111HTTPDecoderC21leftOverBytesStrategy021informationalResponseF0ACyxq_GAA018RemoveAfterUpgradeF0O_AA016NIOInformationalhF0Vtcfc","s8NIOHTTP111HTTPDecoderC21leftOverBytesStrategyACyxq_GAA018RemoveAfterUpgradeF0O_tcfc","s8NIOHTTP111HTTPHeadersV17dictionaryLiteralACSS_SStd_tcfc","s8NIOHTTP111HTTPHeadersVyACSaySS_SStGcfc","s8NIOHTTP111HTTPVersionV5major5minorACSi_Sitcfc","s8NIOHTTP115HTTPRequestHeadV7version6method3uri7headersAcA11HTTPVersionV_AA10HTTPMethodOSSAA11HTTPHeadersVtcfc","s8NIOHTTP115HTTPRequestHeadV7version6method3uriAcA11HTTPVersionV_AA10HTTPMethodOSStcfc","s8NIOHTTP116HTTPResponseHeadV7version6status7headersAcA11HTTPVersionV_AA0B6StatusOAA11HTTPHeadersVtcfc","s8NIOHTTP118HTTPRequestEncoderCACycfc","s8NIOHTTP118HTTPResponseStatusO10statusCode12reasonPhraseACSi_SStcfc","s8NIOHTTP119HTTPResponseEncoderCACycfc","s8NIOHTTP124HTTPServerUpgradeHandlerC9upgraders11httpEncoder17extraHTTPHandlers017upgradeCompletionD0ACSayAA0B16ProtocolUpgrader_pG_AA012HTTPResponseG0CSay7NIOCore016RemovableChannelD0_pGyAL0qD7ContextCctcfc","s8NIOHTTP124NIOHTTPServerRequestFullV4head4bodyAcA15HTTPRequestHeadV_7NIOCore10ByteBufferVSgtcfc","s8NIOHTTP125HTTPServerPipelineHandlerCACycfc","s8NIOHTTP125NIOHTTPClientResponseFullV4head4bodyAcA16HTTPResponseHeadV_7NIOCore10ByteBufferVSgtcfc","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC9upgraders12httpHandlers017upgradeCompletionD0ACSayAA0B16ProtocolUpgrader_pG_Say7NIOCore016RemovableChannelD0_pGyAI0nD7ContextCctcfc","s8NIOHTTP130HTTPServerProtocolErrorHandlerCACycfc","s8NIOHTTP130NIOHTTPServerRequestAggregatorC16maxContentLength24closeOnExpectationFailedACSi_Sbtcfc","s8NIOHTTP131NIOHTTPClientResponseAggregatorC16maxContentLengthACSi_tcfc","s8NIOHTTP111HTTPHeadersV13canonicalFormSaySsGSS_tcip","s8NIOHTTP111HTTPHeadersVySS4name_SS5valuetAC5IndexVcip","s8NIOHTTP111HTTPHeadersVySaySSGSScip","s8NIOHTTP111HTTPVersionV5http2ACvpZ","s8NIOHTTP111HTTPVersionV5http3ACvpZ","s8NIOHTTP111HTTPVersionV7http0_9ACvpZ","s8NIOHTTP111HTTPVersionV7http1_0ACvpZ","s8NIOHTTP111HTTPVersionV7http1_1ACvpZ","s8NIOHTTP119NIOHTTPDecoderErrorV19unsolicitedResponseACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV014upgraderDeniedC0ACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV021receivedResponseAfterC9CompletedACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV021writingToHandlerAfterC6FailedACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV021writingToHandlerAfterC9CompletedACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV022writingToHandlerDuringC0ACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV19invalidHTTPOrderingACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV24responseProtocolNotFoundACvpZ","s8NIOHTTP125NIOHTTPClientUpgradeErrorV33receivedResponseBeforeRequestSentACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV12frameTooLongACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV16connectionClosedACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV20endingIgnoredMessageACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV20unexpectedMessageEndACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV21unexpectedMessageBodyACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorErrorV21unexpectedMessageHeadACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorEventV16httpFrameTooLongACvpZ","s8NIOHTTP128NIOHTTPObjectAggregatorEventV21httpExpectationFailedACvpZ","s8NIOHTTP132NIOInformationalResponseStrategyV4dropACvpZ","s8NIOHTTP132NIOInformationalResponseStrategyV7forwardACvpZ","s8NIOHTTP110HTTPMethodO8rawValueSSvp","s8NIOHTTP111HTTPHeadersV10startIndexAC0D0Vvp","s8NIOHTTP111HTTPHeadersV11descriptionSSvp","s8NIOHTTP111HTTPHeadersV8capacitySivp","s8NIOHTTP111HTTPHeadersV8endIndexAC0D0Vvp","s8NIOHTTP111HTTPVersionV11descriptionSSvp","s8NIOHTTP111HTTPVersionV5majorSivp","s8NIOHTTP111HTTPVersionV5minorSivp","s8NIOHTTP115HTTPParserErrorO16debugDescriptionSSvp","s8NIOHTTP115HTTPRequestHeadV11descriptionSSvp","s8NIOHTTP115HTTPRequestHeadV11isKeepAliveSbvp","s8NIOHTTP115HTTPRequestHeadV3uriSSvp","s8NIOHTTP115HTTPRequestHeadV6methodAA10HTTPMethodOvp","s8NIOHTTP115HTTPRequestHeadV7headersAA11HTTPHeadersVvp","s8NIOHTTP115HTTPRequestHeadV7versionAA11HTTPVersionVvp","s8NIOHTTP116HTTPResponseHeadV11descriptionSSvp","s8NIOHTTP116HTTPResponseHeadV11isKeepAliveSbvp","s8NIOHTTP116HTTPResponseHeadV6statusAA0B6StatusOvp","s8NIOHTTP116HTTPResponseHeadV7headersAA11HTTPHeadersVvp","s8NIOHTTP116HTTPResponseHeadV7versionAA11HTTPVersionVvp","s8NIOHTTP118HTTPResponseStatusO12reasonPhraseSSvp","s8NIOHTTP118HTTPResponseStatusO19mayHaveResponseBodySbvp","s8NIOHTTP118HTTPResponseStatusO4codeSuvp","s8NIOHTTP119NIOHTTPDecoderErrorV16debugDescriptionSSvp","s8NIOHTTP124NIOHTTPServerRequestFullV4body7NIOCore10ByteBufferVSgvp","s8NIOHTTP124NIOHTTPServerRequestFullV4headAA15HTTPRequestHeadVvp","s8NIOHTTP125NIOHTTPClientResponseFullV4body7NIOCore10ByteBufferVSgvp","s8NIOHTTP125NIOHTTPClientResponseFullV4headAA16HTTPResponseHeadVvp","s8NIOHTTP125NIOHTTPClientUpgradeErrorV11descriptionSSvp","s8NIOHTTP126HTTPServerProtocolUpgraderP09supportedC0SSvp","s8NIOHTTP126HTTPServerProtocolUpgraderP22requiredUpgradeHeadersSaySSGvp","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP09supportedC0SSvp","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP22requiredUpgradeHeadersSaySSGvp","s8NIOHTTP111HTTPDecoderC10decodeLast7context6buffer7seenEOF7NIOCore13DecodingStateOAH21ChannelHandlerContextC_AH10ByteBufferVzSbtKF","s8NIOHTTP111HTTPDecoderC12decoderAdded7contexty7NIOCore21ChannelHandlerContextC_tF","s8NIOHTTP111HTTPDecoderC14decoderRemoved7contexty7NIOCore21ChannelHandlerContextC_tF","s8NIOHTTP111HTTPDecoderC6decode7context6buffer7NIOCore13DecodingStateOAG21ChannelHandlerContextC_AG10ByteBufferVztKF","s8NIOHTTP111HTTPDecoderCA2A8HTTPPartOyAA16HTTPResponseHeadV7NIOCore10ByteBufferVGRszAEyAA011HTTPRequestE0VAH6IODataOGRs_rlE5write4datayAP_tF","s8NIOHTTP111HTTPHeadersV12replaceOrAdd4name5valueySS_SStF","s8NIOHTTP111HTTPHeadersV15reserveCapacityyySiF","s8NIOHTTP111HTTPHeadersV3add10contentsOfyAC_tF","s8NIOHTTP111HTTPHeadersV3add10contentsOfyx_tSTRzSS_SSt7ElementRtzlF","s8NIOHTTP111HTTPHeadersV3add4name5valueySS_SStF","s8NIOHTTP111HTTPHeadersV5first4nameSSSgSS_tF","s8NIOHTTP111HTTPHeadersV5index5afterAC5IndexVAG_tF","s8NIOHTTP111HTTPHeadersV5index6beforeAC5IndexVAG_tF","s8NIOHTTP111HTTPHeadersV6remove4nameySS_tF","s8NIOHTTP111HTTPHeadersV8contains4nameSbSS_tF","s8NIOHTTP118HTTPRequestEncoderC5write7context4data7promisey7NIOCore21ChannelHandlerContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s8NIOHTTP119HTTPResponseEncoderC5write7context4data7promisey7NIOCore21ChannelHandlerContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s8NIOHTTP124HTTPServerUpgradeHandlerC06removeD07context12removalTokeny7NIOCore07ChannelD7ContextC_AI07RemovalH0VtF","s8NIOHTTP124HTTPServerUpgradeHandlerC11channelRead7context4datay7NIOCore07ChannelD7ContextC_AG6NIOAnyVtF","s8NIOHTTP125HTTPServerPipelineHandlerC11channelRead7context4datay7NIOCore07ChannelD7ContextC_AG6NIOAnyVtF","s8NIOHTTP125HTTPServerPipelineHandlerC11errorCaught7context0E0y7NIOCore07ChannelD7ContextC_s5Error_ptF","s8NIOHTTP125HTTPServerPipelineHandlerC14handlerRemoved7contexty7NIOCore07ChannelD7ContextC_tF","s8NIOHTTP125HTTPServerPipelineHandlerC15channelInactive7contexty7NIOCore07ChannelD7ContextC_tF","s8NIOHTTP125HTTPServerPipelineHandlerC25userInboundEventTriggered7context5eventy7NIOCore07ChannelD7ContextC_yptF","s8NIOHTTP125HTTPServerPipelineHandlerC4read7contexty7NIOCore07ChannelD7ContextC_tF","s8NIOHTTP125HTTPServerPipelineHandlerC5write7context4data7promisey7NIOCore07ChannelD7ContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s8NIOHTTP126HTTPServerProtocolUpgraderP20buildUpgradeResponse7channel14upgradeRequest07initialG7Headers7NIOCore15EventLoopFutureCyAA11HTTPHeadersVGAH7Channel_p_AA15HTTPRequestHeadVALtF","s8NIOHTTP126HTTPServerProtocolUpgraderP7upgrade7context0E7Request7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_AA15HTTPRequestHeadVtF","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC11channelRead7context4datay7NIOCore07ChannelD7ContextC_AG6NIOAnyVtF","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC5write7context4data7promisey7NIOCore07ChannelD7ContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP18shouldAllowUpgrade15upgradeResponseSbAA16HTTPResponseHeadV_tF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP7upgrade7context0E8Response7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_AA16HTTPResponseHeadVtF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP9addCustom21upgradeRequestHeadersyAA11HTTPHeadersVz_tF","s8NIOHTTP130HTTPServerProtocolErrorHandlerC11errorCaught7context0F0y7NIOCore07ChannelE7ContextC_s0D0_ptF","s8NIOHTTP130HTTPServerProtocolErrorHandlerC5write7context4data7promisey7NIOCore07ChannelE7ContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s8NIOHTTP130NIOHTTPServerRequestAggregatorC11channelRead7context4datay7NIOCore21ChannelHandlerContextC_AG6NIOAnyVtF","s8NIOHTTP130NIOHTTPServerRequestAggregatorC12handlerAdded7contexty7NIOCore21ChannelHandlerContextC_tF","s8NIOHTTP131NIOHTTPClientResponseAggregatorC11channelRead7context4datay7NIOCore21ChannelHandlerContextC_AG6NIOAnyVtF","s8NIOHTTP131NIOHTTPClientResponseAggregatorC12handlerAdded7contexty7NIOCore21ChannelHandlerContextC_tF","s8NIOHTTP111HTTPHeadersV2eeoiySbAC_ACtFZ","s8NIOHTTP111HTTPHeadersV5IndexV1loiySbAE_AEtFZ","s8NIOHTTP115HTTPRequestHeadV2eeoiySbAC_ACtFZ","s8NIOHTTP116HTTPResponseHeadV2eeoiySbAC_ACtFZ","s8NIOHTTP111HTTPDecoderC10InboundOuta","s8NIOHTTP111HTTPDecoderCA2A8HTTPPartOyAA16HTTPResponseHeadV7NIOCore10ByteBufferVGRszAEyAA011HTTPRequestE0VAH6IODataOGRs_rlE10OutboundIna","s8NIOHTTP111HTTPHeadersV7Elementa","s8NIOHTTP118HTTPRequestDecodera","s8NIOHTTP118HTTPRequestEncoderC10OutboundIna","s8NIOHTTP118HTTPRequestEncoderC11OutboundOuta","s8NIOHTTP119HTTPResponseDecodera","s8NIOHTTP119HTTPResponseEncoderC10OutboundIna","s8NIOHTTP119HTTPResponseEncoderC11OutboundOuta","s8NIOHTTP121HTTPClientRequestParta","s8NIOHTTP121HTTPServerRequestParta","s8NIOHTTP122HTTPClientResponseParta","s8NIOHTTP122HTTPServerResponseParta","s8NIOHTTP124HTTPServerUpgradeHandlerC10InboundOuta","s8NIOHTTP124HTTPServerUpgradeHandlerC11OutboundOuta","s8NIOHTTP124HTTPServerUpgradeHandlerC9InboundIna","s8NIOHTTP124HTTPUpgradeConfigurationa","s8NIOHTTP125HTTPServerPipelineHandlerC10InboundOuta","s8NIOHTTP125HTTPServerPipelineHandlerC10OutboundIna","s8NIOHTTP125HTTPServerPipelineHandlerC11OutboundOuta","s8NIOHTTP125HTTPServerPipelineHandlerC9InboundIna","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC10InboundOuta","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC10OutboundIna","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC11OutboundOuta","s8NIOHTTP127NIOHTTPClientUpgradeHandlerC9InboundIna","s8NIOHTTP130HTTPServerProtocolErrorHandlerC10InboundOuta","s8NIOHTTP130HTTPServerProtocolErrorHandlerC10OutboundIna","s8NIOHTTP130HTTPServerProtocolErrorHandlerC11OutboundOuta","s8NIOHTTP130HTTPServerProtocolErrorHandlerC9InboundIna","s8NIOHTTP130NIOHTTPServerRequestAggregatorC10InboundOuta","s8NIOHTTP130NIOHTTPServerRequestAggregatorC11OutboundOuta","s8NIOHTTP130NIOHTTPServerRequestAggregatorC9InboundIna","s8NIOHTTP131NIOHTTPClientResponseAggregatorC10InboundOuta","s8NIOHTTP131NIOHTTPClientResponseAggregatorC9InboundIna","s8NIOHTTP133NIOHTTPClientUpgradeConfigurationa","s8NIOHTTP133NIOHTTPServerUpgradeConfigurationa","s7NIOCore10ByteBufferV","s7NIOCore13DecodingStateO","s7NIOCore14ChannelHandlerP","s7NIOCore14ChannelHandlerP12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerP14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore15ChannelPipelineC","s7NIOCore15ChannelPipelineC21SynchronousOperationsV","s7NIOCore15ChannelPipelineC8PositionO","s7NIOCore15EventLoopFutureC","s7NIOCore16EventLoopPromiseV","s7NIOCore20ByteToMessageDecoderP","s7NIOCore20ByteToMessageDecoderP10InboundOutQa","s7NIOCore20ByteToMessageDecoderP10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVzSbtKF","s7NIOCore20ByteToMessageDecoderP12decoderAdded7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP14decoderRemoved7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP6decode7context6bufferAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVztKF","s7NIOCore20ByteToMessageDecoderPAAE14wrapInboundOutyAA6NIOAnyV0gH0QzF","s7NIOCore20ByteToMessageDecoderPAAE18shouldReclaimBytes6bufferSbAA0B6BufferV_tF","s7NIOCore21ChannelHandlerContextC","s7NIOCore21ChannelHandlerContextC12RemovalTokenV","s7NIOCore21ChannelInboundHandlerP","s7NIOCore21ChannelInboundHandlerP04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore21ChannelInboundHandlerP0C2InQa","s7NIOCore21ChannelInboundHandlerP0C3OutQa","s7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP","s7NIOCore22ChannelOutboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP0C2InQa","s7NIOCore22ChannelOutboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22_ChannelInboundHandlerP04userC14EventTriggered7context5eventyAA0bD7ContextC_yptF","s7NIOCore22_ChannelInboundHandlerP11channelRead7context4datayAA0bD7ContextC_AA6NIOAnyVtF","s7NIOCore22_ChannelInboundHandlerP11errorCaught7context0E0yAA0bD7ContextC_s5Error_ptF","s7NIOCore22_ChannelInboundHandlerP15channelInactive7contextyAA0bD7ContextC_tF","s7NIOCore23RemovableChannelHandlerP","s7NIOCore23RemovableChannelHandlerP06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore23RemovableChannelHandlerPAAE06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore23_ChannelOutboundHandlerP4read7contextyAA0bD7ContextC_tF","s7NIOCore23_ChannelOutboundHandlerP5write7context4data7promiseyAA0bD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore23_EmittingChannelHandlerP11OutboundOutQa","s7NIOCore34WriteObservingByteToMessageDecoderP","s7NIOCore34WriteObservingByteToMessageDecoderP10OutboundInQa","s7NIOCore34WriteObservingByteToMessageDecoderP5write4datay10OutboundInQz_tF","s7NIOCore6IODataO","s7NIOCore6NIOAnyV","s7NIOCore7ChannelP","sSH","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE5index_8offsetBy5IndexQzAD_SitF","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8distance4from2toSi5IndexQz_AEtF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSY","sSY8rawValue03RawB0Qzvp","sSY8rawValuexSg03RawB0Qz_tcfc","sSb","sSi","sSk","sSk5index5after5IndexQzAD_tF","sSk5index6before5IndexQzAD_tF","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl5IndexQa","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSs","sSu","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss30ExpressibleByDictionaryLiteralP","ss30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc","ss4Voida","ss5ErrorP","ss8SendableP"],"vertices":[{"p":["ChannelPipeline","SynchronousOperations","configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["configureHTTPServerPipeline",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18,332],[".",17],["Position",18,334],[" = .last, ",17],["withPipeliningAssistance",1],[" ",17],["pipelining",2],[": ",17],["Bool",18,435],[" = true, ",17],["withServerUpgrade",1],[" ",17],["upgrade",2],[": ",17],["NIOHTTPServerUpgradeConfiguration",18,324],["? = nil, ",17],["withErrorHandling",1],[" ",17],["errorHandling",2],[": ",17],["Bool",18,435],[" = true) ",17],["throws",12]],"s":[["func",12],[" ",17],["configureHTTPServerPipeline",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[", ",17],["withPipeliningAssistance",1],[": ",17],["Bool",18],[", ",17],["withServerUpgrade",1],[": ",17],["NIOHTTPServerUpgradeConfiguration",18],["?, ",17],["withErrorHandling",1],[": ",17],["Bool",18],[") ",17],["throws",12]],"d":"Configure a `ChannelPipeline` for use as a HTTP server.\n\nThis function knows how to set up all first-party HTTP channel handlers appropriately\nfor server use. It supports the following features:\n\n1. Providing assistance handling clients that pipeline HTTP requests, using the\n    `HTTPServerPipelineHandler`.\n2. Supporting HTTP upgrade, using the `HTTPServerUpgradeHandler`.\n\nThis method will likely be extended in future with more support for other first-party\nfeatures.\n\n- important: This **must** be called on the Channel's event loop.\n- parameters:\n    - position: Where in the pipeline to add the HTTP server handlers, defaults to `.last`.\n    - pipelining: Whether to provide assistance handling HTTP clients that pipeline\n        their requests. Defaults to `true`. If `false`, users will need to handle\n        clients that pipeline themselves.\n    - upgrade: Whether to add a `HTTPServerUpgradeHandler` to the pipeline, configured for\n        HTTP upgrade. Defaults to `nil`, which will not add the handler to the pipeline. If\n        provided should be a tuple of an array of `HTTPServerProtocolUpgrader` and the upgrade\n        completion handler. See the documentation on `HTTPServerUpgradeHandler` for more\n        details.\n    - errorHandling: Whether to provide assistance handling protocol errors (e.g.\n        failure to parse the HTTP request) by sending 400 errors. Defaults to `true`.\n- throws: If the pipeline could not be configured."},{"p":["ChannelPipeline","SynchronousOperations","addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18,332],[".",17],["Position",18,334],[" = .last, ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18,13],[" = .dropBytes, ",17],["withClientUpgrade",1],[" ",17],["upgrade",2],[": ",17],["NIOHTTPClientUpgradeConfiguration",18,323],["? = nil) ",17],["throws",12]],"s":[["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[", ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18],[", ",17],["withClientUpgrade",1],[": ",17],["NIOHTTPClientUpgradeConfiguration",18],["?) ",17],["throws",12]],"d":"Configure a `ChannelPipeline` for use as a HTTP client with a client upgrader configuration.\n\n- important: This **must** be called on the Channel's event loop.\n- parameters:\n    - position: The position in the `ChannelPipeline` where to add the HTTP client handlers. Defaults to `.last`.\n    - leftOverBytesStrategy: The strategy to use when dealing with leftover bytes after removing the `HTTPDecoder`\n        from the pipeline.\n    - upgrade: Add a `HTTPClientUpgradeHandler` to the pipeline, configured for\n        HTTP upgrade. Should be a tuple of an array of `HTTPClientProtocolUpgrader` and\n        the upgrade completion handler. See the documentation on `HTTPClientUpgradeHandler`\n        for more details.\n- throws: If the pipeline could not be configured."},{"p":["ChannelPipeline","configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["configureHTTPServerPipeline",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18,332],[".",17],["Position",18,334],[" = .last, ",17],["withPipeliningAssistance",1],[" ",17],["pipelining",2],[": ",17],["Bool",18,435],[" = true, ",17],["withServerUpgrade",1],[" ",17],["upgrade",2],[": ",17],["NIOHTTPServerUpgradeConfiguration",18,324],["? = nil, ",17],["withErrorHandling",1],[" ",17],["errorHandling",2],[": ",17],["Bool",18,435],[" = true) -> ",17],["EventLoopFuture",18,335],["<",17],["Void",18,487],[">",17]],"s":[["func",12],[" ",17],["configureHTTPServerPipeline",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[", ",17],["withPipeliningAssistance",1],[": ",17],["Bool",18],[", ",17],["withServerUpgrade",1],[": ",17],["NIOHTTPServerUpgradeConfiguration",18],["?, ",17],["withErrorHandling",1],[": ",17],["Bool",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Configure a `ChannelPipeline` for use as a HTTP server.\n\nThis function knows how to set up all first-party HTTP channel handlers appropriately\nfor server use. It supports the following features:\n\n1. Providing assistance handling clients that pipeline HTTP requests, using the\n    `HTTPServerPipelineHandler`.\n2. Supporting HTTP upgrade, using the `HTTPServerUpgradeHandler`.\n\nThis method will likely be extended in future with more support for other first-party\nfeatures.\n\n- parameters:\n    - position: Where in the pipeline to add the HTTP server handlers, defaults to `.last`.\n    - pipelining: Whether to provide assistance handling HTTP clients that pipeline\n        their requests. Defaults to `true`. If `false`, users will need to handle\n        clients that pipeline themselves.\n    - upgrade: Whether to add a `HTTPServerUpgradeHandler` to the pipeline, configured for\n        HTTP upgrade. Defaults to `nil`, which will not add the handler to the pipeline. If\n        provided should be a tuple of an array of `HTTPServerProtocolUpgrader` and the upgrade\n        completion handler. See the documentation on `HTTPServerUpgradeHandler` for more\n        details.\n    - errorHandling: Whether to provide assistance handling protocol errors (e.g.\n        failure to parse the HTTP request) by sending 400 errors. Defaults to `true`.\n- returns: An `EventLoopFuture` that will fire when the pipeline is configured."},{"p":["ChannelPipeline","addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)"],"f":[["@preconcurrency",3],[" ",17],["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18,332],[".",17],["Position",18,334],[" = .last, ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18,13],[" = .dropBytes, ",17],["withClientUpgrade",1],[" ",17],["upgrade",2],[": ",17],["NIOHTTPClientUpgradeConfiguration",18,323],["?) -> ",17],["EventLoopFuture",18,335],["<",17],["Void",18,487],[">",17]],"s":[["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[", ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18],[", ",17],["withClientUpgrade",1],[": ",17],["NIOHTTPClientUpgradeConfiguration",18],["?) -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Configure a `ChannelPipeline` for use as a HTTP client with a client upgrader configuration.\n\n- parameters:\n    - position: The position in the `ChannelPipeline` where to add the HTTP client handlers. Defaults to `.last`.\n    - leftOverBytesStrategy: The strategy to use when dealing with leftover bytes after removing the `HTTPDecoder`\n        from the pipeline.\n    - upgrade: Add a `HTTPClientUpgradeHandler` to the pipeline, configured for\n        HTTP upgrade. Should be a tuple of an array of `HTTPClientProtocolUpgrader` and\n        the upgrade completion handler. See the documentation on `HTTPClientUpgradeHandler`\n        for more details.\n- returns: An `EventLoopFuture` that will fire when the pipeline is configured."},{"p":["ChannelPipeline","addHTTPClientHandlers(position:leftOverBytesStrategy:)"],"f":[["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18,332],[".",17],["Position",18,334],[" = .last, ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18,13],[" = .dropBytes) -> ",17],["EventLoopFuture",18,335],["<",17],["Void",18,487],[">",17]],"s":[["func",12],[" ",17],["addHTTPClientHandlers",7],["(",17],["position",1],[": ",17],["ChannelPipeline",18],[".",17],["Position",18],[", ",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Configure a `ChannelPipeline` for use as a HTTP client.\n\n- parameters:\n    - position: The position in the `ChannelPipeline` where to add the HTTP client handlers. Defaults to `.last`.\n    - leftOverBytesStrategy: The strategy to use when dealing with leftover bytes after removing the `HTTPDecoder`\n        from the pipeline.\n- returns: An `EventLoopFuture` that will fire when the pipeline is configured."},{"p":["HTTPServerProtocolUpgrader"],"f":[["protocol",12],[" ",17],["HTTPServerProtocolUpgrader",7]],"s":[["protocol",12],[" ",17],["HTTPServerProtocolUpgrader",7]],"d":"An object that implements `HTTPServerProtocolUpgrader` knows how to handle HTTP upgrade to\na protocol on a server-side channel."},{"p":["NIOHTTPClientProtocolUpgrader"],"f":[["protocol",12],[" ",17],["NIOHTTPClientProtocolUpgrader",7]],"s":[["protocol",12],[" ",17],["NIOHTTPClientProtocolUpgrader",7]],"d":"An object that implements `NIOHTTPClientProtocolUpgrader` knows how to handle HTTP upgrade to\na protocol on a client-side channel.\nIt has the option of denying this upgrade based upon the server response."},{"p":["HTTPMethod"],"f":[["enum",12],[" ",17],["HTTPMethod",7]],"s":[["enum",12],[" ",17],["HTTPMethod",7]]},{"p":["HTTPDecoderKind"],"f":[["enum",12],[" ",17],["HTTPDecoderKind",7]],"s":[["enum",12],[" ",17],["HTTPDecoderKind",7]]},{"p":["HTTPParserError"],"f":[["enum",12],[" ",17],["HTTPParserError",7]],"s":[["enum",12],[" ",17],["HTTPParserError",7]],"d":"Errors that can be raised while parsing HTTP/1.1."},{"p":["HTTPResponseStatus"],"f":[["enum",12],[" ",17],["HTTPResponseStatus",7]],"s":[["enum",12],[" ",17],["HTTPResponseStatus",7]],"d":"A HTTP response status code."},{"p":["HTTPServerUpgradeErrors"],"f":[["enum",12],[" ",17],["HTTPServerUpgradeErrors",7]],"s":[["enum",12],[" ",17],["HTTPServerUpgradeErrors",7]],"d":"Errors that may be raised by the `HTTPServerProtocolUpgrader`."},{"p":["HTTPServerUpgradeEvents"],"f":[["enum",12],[" ",17],["HTTPServerUpgradeEvents",7]],"s":[["enum",12],[" ",17],["HTTPServerUpgradeEvents",7]],"d":"User events that may be fired by the `HTTPServerProtocolUpgrader`."},{"p":["RemoveAfterUpgradeStrategy"],"f":[["enum",12],[" ",17],["RemoveAfterUpgradeStrategy",7]],"s":[["enum",12],[" ",17],["RemoveAfterUpgradeStrategy",7]],"d":"Strategy to use when a HTTPDecoder is removed from a pipeline after a HTTP upgrade was detected."},{"p":["HTTPPart"],"f":[["enum",12],[" ",17],["HTTPPart",7],["<",17],["HeadT",0],[", ",17],["BodyT",0],["> ",17],["where",12],[" ",17],["HeadT",18],[" : ",17],["Equatable",18,399],[", ",17],["BodyT",18],[" : ",17],["Equatable",18,399]],"s":[["enum",12],[" ",17],["HTTPPart",7]],"c":[["HeadT",1,"Equatable",399],["BodyT",1,"Equatable",399]],"g":[["HeadT",0,0],["BodyT",1,0]],"d":"The parts of a complete HTTP message, either request or response.\n\nA HTTP message is made up of a request or status line with several headers,\nencoded by `.head`, zero or more body parts, and optionally some trailers. To\nindicate that a complete HTTP message has been sent or received, we use `.end`,\nwhich may also contain any trailers that make up the message."},{"p":["HTTPHeaders"],"f":[["struct",12],[" ",17],["HTTPHeaders",7]],"s":[["struct",12],[" ",17],["HTTPHeaders",7]],"d":"A representation of a block of HTTP header fields.\n\nHTTP header fields are a complex data structure. The most natural representation\nfor these is a sequence of two-tuples of field name and field value, both as\nstrings. This structure preserves that representation, but provides a number of\nconvenience features in addition to it.\n\nFor example, this structure enables access to header fields based on the\ncase-insensitive form of the field name, but preserves the original case of the\nfield when needed. It also supports recomposing headers to a maximally joined\nor split representation, such that header fields that are able to be repeated\ncan be represented appropriately."},{"p":["HTTPHeaders","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"o":451},{"p":["HTTPVersion"],"f":[["struct",12],[" ",17],["HTTPVersion",7]],"s":[["struct",12],[" ",17],["HTTPVersion",7]],"d":"A structure representing a HTTP version."},{"p":["HTTPRequestHead"],"f":[["struct",12],[" ",17],["HTTPRequestHead",7]],"s":[["struct",12],[" ",17],["HTTPRequestHead",7]],"d":"A representation of the request line and header fields of a HTTP request."},{"p":["HTTPResponseHead"],"f":[["struct",12],[" ",17],["HTTPResponseHead",7]],"s":[["struct",12],[" ",17],["HTTPResponseHead",7]],"d":"A representation of the status line and header fields of a HTTP response."},{"p":["NIOHTTPDecoderError"],"f":[["struct",12],[" ",17],["NIOHTTPDecoderError",7]],"s":[["struct",12],[" ",17],["NIOHTTPDecoderError",7]],"d":"Errors thrown by `HTTPRequestDecoder` and `HTTPResponseDecoder` in addition to\n`HTTPParserError`."},{"p":["NIOHTTPServerRequestFull"],"f":[["struct",12],[" ",17],["NIOHTTPServerRequestFull",7]],"s":[["struct",12],[" ",17],["NIOHTTPServerRequestFull",7]],"d":"The parts of a complete HTTP response from the view of the client.\n\nA full HTTP request is made up of a response header encoded by `.head`\nand an optional `.body`."},{"p":["NIOHTTPClientResponseFull"],"f":[["struct",12],[" ",17],["NIOHTTPClientResponseFull",7]],"s":[["struct",12],[" ",17],["NIOHTTPClientResponseFull",7]],"d":"The parts of a complete HTTP response from the view of the client.\n\nA full HTTP response is made up of a response header encoded by `.head`\nand an optional `.body`."},{"p":["NIOHTTPClientUpgradeError"],"f":[["struct",12],[" ",17],["NIOHTTPClientUpgradeError",7]],"s":[["struct",12],[" ",17],["NIOHTTPClientUpgradeError",7]],"d":"Errors that may be raised by the `HTTPClientProtocolUpgrader`."},{"p":["NIOHTTPObjectAggregatorError"],"f":[["struct",12],[" ",17],["NIOHTTPObjectAggregatorError",7]],"s":[["struct",12],[" ",17],["NIOHTTPObjectAggregatorError",7]]},{"p":["NIOHTTPObjectAggregatorEvent"],"f":[["struct",12],[" ",17],["NIOHTTPObjectAggregatorEvent",7]],"s":[["struct",12],[" ",17],["NIOHTTPObjectAggregatorEvent",7]]},{"p":["NIOInformationalResponseStrategy"],"f":[["struct",12],[" ",17],["NIOInformationalResponseStrategy",7]],"s":[["struct",12],[" ",17],["NIOInformationalResponseStrategy",7]],"d":"Strategy to use when a HTTPDecoder receives an informational HTTP response (1xx except 101)"},{"p":["HTTPDecoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPDecoder",7],["<",17],["In",0],[", ",17],["Out",0],[">",17]],"s":[["class",12],[" ",17],["HTTPDecoder",7]],"g":[["In",0,0],["Out",1,0]],"d":"A `ChannelInboundHandler` that parses HTTP/1-style messages, converting them from\nunstructured bytes to a sequence of HTTP messages.\n\nThe `HTTPDecoder` is a generic channel handler which can produce messages in\neither the form of `HTTPClientResponsePart` or `HTTPServerRequestPart`: that is,\nit produces messages that correspond to the semantic units of HTTP produced by\nthe remote peer."},{"p":["HTTPRequestEncoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPRequestEncoder",7]],"s":[["class",12],[" ",17],["HTTPRequestEncoder",7]],"d":"A `ChannelOutboundHandler` that can serialize HTTP requests.\n\nThis channel handler is used to translate messages from a series of\n`HTTPClientRequestPart` into the HTTP/1.1 wire format."},{"p":["HTTPResponseEncoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPResponseEncoder",7]],"s":[["class",12],[" ",17],["HTTPResponseEncoder",7]],"d":"A `ChannelOutboundHandler` that can serialize HTTP responses.\n\nThis channel handler is used to translate messages from a series of\n`HTTPServerResponsePart` into the HTTP/1.1 wire format."},{"p":["HTTPServerUpgradeHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPServerUpgradeHandler",7]],"s":[["class",12],[" ",17],["HTTPServerUpgradeHandler",7]],"d":"A server-side channel handler that receives HTTP requests and optionally performs a HTTP-upgrade.\nRemoves itself from the channel pipeline after the first inbound request on the connection, regardless of\nwhether the upgrade succeeded or not.\n\nThis handler behaves a bit differently from its Netty counterpart because it does not allow upgrade\non any request but the first on a connection. This is primarily to handle clients that pipeline: it's\nsufficiently difficult to ensure that the upgrade happens at a safe time while dealing with pipelined\nrequests that we choose to punt on it entirely and not allow it. As it happens this is mostly fine:\nthe odds of someone needing to upgrade midway through the lifetime of a connection are very low."},{"p":["HTTPServerPipelineHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPServerPipelineHandler",7]],"s":[["class",12],[" ",17],["HTTPServerPipelineHandler",7]],"d":"A `ChannelHandler` that handles HTTP pipelining by buffering inbound data until a\nresponse has been sent.\n\nThis handler ensures that HTTP server pipelines only process one request at a time.\nThis is the safest way for pipelining-unaware code to operate, as it ensures that\nmutation of any shared server state is not parallelised, and that responses are always\nsent for each request in turn. In almost all cases this is the behaviour that a\npipeline will want. This is achieved without doing too much buffering by preventing\nthe `Channel` from reading from the socket until a complete response is processed,\nensuring that a malicious client is not capable of overwhelming a server by shoving\nan enormous amount of data down the `Channel` while a server is processing a\nslow response.\n\nSee [RFC 7320 Section 6.3.2](https://tools.ietf.org/html/rfc7230#section-6.3.2) for\nmore details on safely handling HTTP pipelining.\n\nIn addition to handling the request buffering, this `ChannelHandler` is aware of\nTCP half-close. While there are very few HTTP clients that are capable of TCP\nhalf-close, clients that are not HTTP specific (e.g. `netcat`) may trigger a TCP\nhalf-close. Having this `ChannelHandler` be aware of TCP half-close makes it easier\nto build HTTP servers that are resilient to this kind of behaviour.\n\nThe TCP half-close handling is done by buffering the half-close notification along\nwith the HTTP request parts. The half-close notification will be delivered in order\nwith the rest of the reads. If the half-close occurs either before a request is received\nor during a request body upload, it will be delivered immediately. If a half-close is\nreceived immediately after `HTTPServerRequestPart.end`, it will also be passed along\nimmediately, allowing this signal to be seen by the HTTP server as early as possible."},{"p":["NIOHTTPClientUpgradeHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOHTTPClientUpgradeHandler",7]],"s":[["class",12],[" ",17],["NIOHTTPClientUpgradeHandler",7]],"d":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade.\nWhen the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to\nthe a protocol. It may add headers for a set of protocols in preference order.\nIf the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply\nremoves itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol.\n\nThe request sends an order of preference to request which protocol it would like to use for the upgrade.\nIt will only upgrade to the protocol that is returned first in the list and does not currently\nhave the capability to upgrade to multiple simultaneous layered protocols."},{"p":["HTTPServerProtocolErrorHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["HTTPServerProtocolErrorHandler",7]],"s":[["class",12],[" ",17],["HTTPServerProtocolErrorHandler",7]],"d":"A simple channel handler that catches errors emitted by parsing HTTP requests\nand sends 400 Bad Request responses.\n\nThis channel handler provides the basic behaviour that the majority of simple HTTP\nservers want. This handler does not suppress the parser errors: it allows them to\ncontinue to pass through the pipeline so that other handlers (e.g. logging ones) can\ndeal with the error."},{"p":["NIOHTTPServerRequestAggregator"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOHTTPServerRequestAggregator",7]],"s":[["class",12],[" ",17],["NIOHTTPServerRequestAggregator",7]],"d":"A `ChannelInboundHandler` that handles HTTP chunked `HTTPServerRequestPart`\nmessages by aggregating individual message chunks into a single\n`NIOHTTPServerRequestFull`.\n\nThis is achieved by buffering the contents of all received `HTTPServerRequestPart`\nmessages until `HTTPServerRequestPart.end` is received, then assembling the\nfull message and firing a channel read upstream with it. It is useful for when you do not\nwant to deal with chunked messages and just want to receive everything at once, and\nare happy with the additional memory used and delay handling of the message until\neverything has been received.\n\n`NIOHTTPServerRequestAggregator` may end up sending a `HTTPResponseHead`:\n- Response status `413 Request Entity Too Large` when either the\n    `content-length` or the bytes received so far exceed `maxContentLength`.\n\n`NIOHTTPServerRequestAggregator` may close the connection if it is impossible\nto recover:\n- If `content-length` is too large and `keep-alive` is off.\n- If the bytes received exceed `maxContentLength` and the client didn't signal\n    `content-length`"},{"p":["NIOHTTPClientResponseAggregator"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOHTTPClientResponseAggregator",7]],"s":[["class",12],[" ",17],["NIOHTTPClientResponseAggregator",7]],"d":"A `ChannelInboundHandler` that handles HTTP chunked `HTTPClientResponsePart`\nmessages by aggregating individual message chunks into a single\n`NIOHTTPClientResponseFull`.\n\nThis is achieved by buffering the contents of all received `HTTPClientResponsePart`\nmessages until `HTTPClientResponsePart.end` is received, then assembling the\nfull message and firing a channel read upstream with it. Useful when you do not\nwant to deal with chunked messages and just want to receive everything at once, and\nare happy with the additional memory used and delay handling of the message until\neverything has been received.\n\nIf `NIOHTTPClientResponseAggregator` encounters a message larger than\n`maxContentLength`, it discards the aggregated contents until the next\n`HTTPClientResponsePart.end` and signals that via\n`fireUserInboundEventTriggered`."},{"p":["HTTPMethod","MKACTIVITY"],"f":[["case",12],[" ",17],["MKACTIVITY",7]],"s":[["case",12],[" ",17],["MKACTIVITY",7]]},{"p":["HTTPMethod","MKCALENDAR"],"f":[["case",12],[" ",17],["MKCALENDAR",7]],"s":[["case",12],[" ",17],["MKCALENDAR",7]]},{"p":["HTTPMethod","UNSUBSCRIBE"],"f":[["case",12],[" ",17],["UNSUBSCRIBE",7]],"s":[["case",12],[" ",17],["UNSUBSCRIBE",7]]},{"p":["HTTPMethod","ACL"],"f":[["case",12],[" ",17],["ACL",7]],"s":[["case",12],[" ",17],["ACL",7]]},{"p":["HTTPMethod","GET"],"f":[["case",12],[" ",17],["GET",7]],"s":[["case",12],[" ",17],["GET",7]]},{"p":["HTTPMethod","PUT"],"f":[["case",12],[" ",17],["PUT",7]],"s":[["case",12],[" ",17],["PUT",7]]},{"p":["HTTPMethod","RAW(value:)"],"f":[["case",12],[" ",17],["RAW",7],["(",17],["value",1],[": ",17],["String",18,402],[")",17]],"s":[["case",12],[" ",17],["RAW",7],["(",17],["value",1],[": ",17],["String",18],[")",17]]},{"p":["HTTPMethod","BIND"],"f":[["case",12],[" ",17],["BIND",7]],"s":[["case",12],[" ",17],["BIND",7]]},{"p":["HTTPMethod","COPY"],"f":[["case",12],[" ",17],["COPY",7]],"s":[["case",12],[" ",17],["COPY",7]]},{"p":["HTTPMethod","HEAD"],"f":[["case",12],[" ",17],["HEAD",7]],"s":[["case",12],[" ",17],["HEAD",7]]},{"p":["HTTPMethod","LINK"],"f":[["case",12],[" ",17],["LINK",7]],"s":[["case",12],[" ",17],["LINK",7]]},{"p":["HTTPMethod","LOCK"],"f":[["case",12],[" ",17],["LOCK",7]],"s":[["case",12],[" ",17],["LOCK",7]]},{"p":["HTTPMethod","MOVE"],"f":[["case",12],[" ",17],["MOVE",7]],"s":[["case",12],[" ",17],["MOVE",7]]},{"p":["HTTPMethod","POST"],"f":[["case",12],[" ",17],["POST",7]],"s":[["case",12],[" ",17],["POST",7]]},{"p":["HTTPMethod","MERGE"],"f":[["case",12],[" ",17],["MERGE",7]],"s":[["case",12],[" ",17],["MERGE",7]]},{"p":["HTTPMethod","MKCOL"],"f":[["case",12],[" ",17],["MKCOL",7]],"s":[["case",12],[" ",17],["MKCOL",7]]},{"p":["HTTPMethod","PATCH"],"f":[["case",12],[" ",17],["PATCH",7]],"s":[["case",12],[" ",17],["PATCH",7]]},{"p":["HTTPMethod","PURGE"],"f":[["case",12],[" ",17],["PURGE",7]],"s":[["case",12],[" ",17],["PURGE",7]]},{"p":["HTTPMethod","TRACE"],"f":[["case",12],[" ",17],["TRACE",7]],"s":[["case",12],[" ",17],["TRACE",7]]},{"p":["HTTPMethod","DELETE"],"f":[["case",12],[" ",17],["DELETE",7]],"s":[["case",12],[" ",17],["DELETE",7]]},{"p":["HTTPMethod","NOTIFY"],"f":[["case",12],[" ",17],["NOTIFY",7]],"s":[["case",12],[" ",17],["NOTIFY",7]]},{"p":["HTTPMethod","REBIND"],"f":[["case",12],[" ",17],["REBIND",7]],"s":[["case",12],[" ",17],["REBIND",7]]},{"p":["HTTPMethod","REPORT"],"f":[["case",12],[" ",17],["REPORT",7]],"s":[["case",12],[" ",17],["REPORT",7]]},{"p":["HTTPMethod","SEARCH"],"f":[["case",12],[" ",17],["SEARCH",7]],"s":[["case",12],[" ",17],["SEARCH",7]]},{"p":["HTTPMethod","SOURCE"],"f":[["case",12],[" ",17],["SOURCE",7]],"s":[["case",12],[" ",17],["SOURCE",7]]},{"p":["HTTPMethod","UNBIND"],"f":[["case",12],[" ",17],["UNBIND",7]],"s":[["case",12],[" ",17],["UNBIND",7]]},{"p":["HTTPMethod","UNLINK"],"f":[["case",12],[" ",17],["UNLINK",7]],"s":[["case",12],[" ",17],["UNLINK",7]]},{"p":["HTTPMethod","UNLOCK"],"f":[["case",12],[" ",17],["UNLOCK",7]],"s":[["case",12],[" ",17],["UNLOCK",7]]},{"p":["HTTPMethod","CONNECT"],"f":[["case",12],[" ",17],["CONNECT",7]],"s":[["case",12],[" ",17],["CONNECT",7]]},{"p":["HTTPMethod","MSEARCH"],"f":[["case",12],[" ",17],["MSEARCH",7]],"s":[["case",12],[" ",17],["MSEARCH",7]]},{"p":["HTTPMethod","OPTIONS"],"f":[["case",12],[" ",17],["OPTIONS",7]],"s":[["case",12],[" ",17],["OPTIONS",7]]},{"p":["HTTPMethod","CHECKOUT"],"f":[["case",12],[" ",17],["CHECKOUT",7]],"s":[["case",12],[" ",17],["CHECKOUT",7]]},{"p":["HTTPMethod","PROPFIND"],"f":[["case",12],[" ",17],["PROPFIND",7]],"s":[["case",12],[" ",17],["PROPFIND",7]]},{"p":["HTTPMethod","PROPPATCH"],"f":[["case",12],[" ",17],["PROPPATCH",7]],"s":[["case",12],[" ",17],["PROPPATCH",7]]},{"p":["HTTPMethod","SUBSCRIBE"],"f":[["case",12],[" ",17],["SUBSCRIBE",7]],"s":[["case",12],[" ",17],["SUBSCRIBE",7]]},{"p":["HTTPDecoderKind","request"],"f":[["case",12],[" ",17],["request",7]],"s":[["case",12],[" ",17],["request",7]]},{"p":["HTTPDecoderKind","response"],"f":[["case",12],[" ",17],["response",7]],"s":[["case",12],[" ",17],["response",7]]},{"p":["HTTPParserError","invalidURL"],"f":[["case",12],[" ",17],["invalidURL",7]],"s":[["case",12],[" ",17],["invalidURL",7]]},{"p":["HTTPParserError","lfExpected"],"f":[["case",12],[" ",17],["lfExpected",7]],"s":[["case",12],[" ",17],["lfExpected",7]]},{"p":["HTTPParserError","invalidHost"],"f":[["case",12],[" ",17],["invalidHost",7]],"s":[["case",12],[" ",17],["invalidHost",7]]},{"p":["HTTPParserError","invalidPath"],"f":[["case",12],[" ",17],["invalidPath",7]],"s":[["case",12],[" ",17],["invalidPath",7]]},{"p":["HTTPParserError","invalidPort"],"f":[["case",12],[" ",17],["invalidPort",7]],"s":[["case",12],[" ",17],["invalidPort",7]]},{"p":["HTTPParserError","invalidMethod"],"f":[["case",12],[" ",17],["invalidMethod",7]],"s":[["case",12],[" ",17],["invalidMethod",7]]},{"p":["HTTPParserError","invalidStatus"],"f":[["case",12],[" ",17],["invalidStatus",7]],"s":[["case",12],[" ",17],["invalidStatus",7]]},{"p":["HTTPParserError","headerOverflow"],"f":[["case",12],[" ",17],["headerOverflow",7]],"s":[["case",12],[" ",17],["headerOverflow",7]]},{"p":["HTTPParserError","invalidVersion"],"f":[["case",12],[" ",17],["invalidVersion",7]],"s":[["case",12],[" ",17],["invalidVersion",7]]},{"p":["HTTPParserError","invalidConstant"],"f":[["case",12],[" ",17],["invalidConstant",7]],"s":[["case",12],[" ",17],["invalidConstant",7]]},{"p":["HTTPParserError","invalidEOFState"],"f":[["case",12],[" ",17],["invalidEOFState",7]],"s":[["case",12],[" ",17],["invalidEOFState",7]]},{"p":["HTTPParserError","invalidFragment"],"f":[["case",12],[" ",17],["invalidFragment",7]],"s":[["case",12],[" ",17],["invalidFragment",7]]},{"p":["HTTPParserError","trailingGarbage"],"f":[["case",12],[" ",17],["trailingGarbage",7]],"s":[["case",12],[" ",17],["trailingGarbage",7]]},{"p":["HTTPParserError","closedConnection"],"f":[["case",12],[" ",17],["closedConnection",7]],"s":[["case",12],[" ",17],["closedConnection",7]]},{"p":["HTTPParserError","invalidChunkSize"],"f":[["case",12],[" ",17],["invalidChunkSize",7]],"s":[["case",12],[" ",17],["invalidChunkSize",7]]},{"p":["HTTPParserError","invalidHeaderToken"],"f":[["case",12],[" ",17],["invalidHeaderToken",7]],"s":[["case",12],[" ",17],["invalidHeaderToken",7]]},{"p":["HTTPParserError","invalidQueryString"],"f":[["case",12],[" ",17],["invalidQueryString",7]],"s":[["case",12],[" ",17],["invalidQueryString",7]]},{"p":["HTTPParserError","strictModeAssertion"],"f":[["case",12],[" ",17],["strictModeAssertion",7]],"s":[["case",12],[" ",17],["strictModeAssertion",7]]},{"p":["HTTPParserError","invalidContentLength"],"f":[["case",12],[" ",17],["invalidContentLength",7]],"s":[["case",12],[" ",17],["invalidContentLength",7]]},{"p":["HTTPParserError","invalidInternalState"],"f":[["case",12],[" ",17],["invalidInternalState",7]],"s":[["case",12],[" ",17],["invalidInternalState",7]]},{"p":["HTTPParserError","invalidCharactersUsed"],"f":[["case",12],[" ",17],["invalidCharactersUsed",7]],"s":[["case",12],[" ",17],["invalidCharactersUsed",7]]},{"p":["HTTPParserError","unexpectedContentLength"],"f":[["case",12],[" ",17],["unexpectedContentLength",7]],"s":[["case",12],[" ",17],["unexpectedContentLength",7]]},{"p":["HTTPParserError","paused"],"f":[["case",12],[" ",17],["paused",7]],"s":[["case",12],[" ",17],["paused",7]]},{"p":["HTTPParserError","unknown"],"f":[["case",12],[" ",17],["unknown",7]],"s":[["case",12],[" ",17],["unknown",7]]},{"p":["HTTPResponseStatus","multiStatus"],"f":[["case",12],[" ",17],["multiStatus",7]],"s":[["case",12],[" ",17],["multiStatus",7]]},{"p":["HTTPResponseStatus","badGateway"],"f":[["case",12],[" ",17],["badGateway",7]],"s":[["case",12],[" ",17],["badGateway",7]]},{"p":["HTTPResponseStatus","badRequest"],"f":[["case",12],[" ",17],["badRequest",7]],"s":[["case",12],[" ",17],["badRequest",7]]},{"p":["HTTPResponseStatus","processing"],"f":[["case",12],[" ",17],["processing",7]],"s":[["case",12],[" ",17],["processing",7]]},{"p":["HTTPResponseStatus","uriTooLong"],"f":[["case",12],[" ",17],["uriTooLong",7]],"s":[["case",12],[" ",17],["uriTooLong",7]]},{"p":["HTTPResponseStatus","notExtended"],"f":[["case",12],[" ",17],["notExtended",7]],"s":[["case",12],[" ",17],["notExtended",7]]},{"p":["HTTPResponseStatus","notModified"],"f":[["case",12],[" ",17],["notModified",7]],"s":[["case",12],[" ",17],["notModified",7]]},{"p":["HTTPResponseStatus","loopDetected"],"f":[["case",12],[" ",17],["loopDetected",7]],"s":[["case",12],[" ",17],["loopDetected",7]]},{"p":["HTTPResponseStatus","resetContent"],"f":[["case",12],[" ",17],["resetContent",7]],"s":[["case",12],[" ",17],["resetContent",7]]},{"p":["HTTPResponseStatus","unauthorized"],"f":[["case",12],[" ",17],["unauthorized",7]],"s":[["case",12],[" ",17],["unauthorized",7]]},{"p":["HTTPResponseStatus","notAcceptable"],"f":[["case",12],[" ",17],["notAcceptable",7]],"s":[["case",12],[" ",17],["notAcceptable",7]]},{"p":["HTTPResponseStatus","gatewayTimeout"],"f":[["case",12],[" ",17],["gatewayTimeout",7]],"s":[["case",12],[" ",17],["gatewayTimeout",7]]},{"p":["HTTPResponseStatus","lengthRequired"],"f":[["case",12],[" ",17],["lengthRequired",7]],"s":[["case",12],[" ",17],["lengthRequired",7]]},{"p":["HTTPResponseStatus","notImplemented"],"f":[["case",12],[" ",17],["notImplemented",7]],"s":[["case",12],[" ",17],["notImplemented",7]]},{"p":["HTTPResponseStatus","partialContent"],"f":[["case",12],[" ",17],["partialContent",7]],"s":[["case",12],[" ",17],["partialContent",7]]},{"p":["HTTPResponseStatus","requestTimeout"],"f":[["case",12],[" ",17],["requestTimeout",7]],"s":[["case",12],[" ",17],["requestTimeout",7]]},{"p":["HTTPResponseStatus","alreadyReported"],"f":[["case",12],[" ",17],["alreadyReported",7]],"s":[["case",12],[" ",17],["alreadyReported",7]]},{"p":["HTTPResponseStatus","multipleChoices"],"f":[["case",12],[" ",17],["multipleChoices",7]],"s":[["case",12],[" ",17],["multipleChoices",7]]},{"p":["HTTPResponseStatus","payloadTooLarge"],"f":[["case",12],[" ",17],["payloadTooLarge",7]],"s":[["case",12],[" ",17],["payloadTooLarge",7]]},{"p":["HTTPResponseStatus","paymentRequired"],"f":[["case",12],[" ",17],["paymentRequired",7]],"s":[["case",12],[" ",17],["paymentRequired",7]]},{"p":["HTTPResponseStatus","tooManyRequests"],"f":[["case",12],[" ",17],["tooManyRequests",7]],"s":[["case",12],[" ",17],["tooManyRequests",7]]},{"p":["HTTPResponseStatus","upgradeRequired"],"f":[["case",12],[" ",17],["upgradeRequired",7]],"s":[["case",12],[" ",17],["upgradeRequired",7]]},{"p":["HTTPResponseStatus","failedDependency"],"f":[["case",12],[" ",17],["failedDependency",7]],"s":[["case",12],[" ",17],["failedDependency",7]]},{"p":["HTTPResponseStatus","methodNotAllowed"],"f":[["case",12],[" ",17],["methodNotAllowed",7]],"s":[["case",12],[" ",17],["methodNotAllowed",7]]},{"p":["HTTPResponseStatus","movedPermanently"],"f":[["case",12],[" ",17],["movedPermanently",7]],"s":[["case",12],[" ",17],["movedPermanently",7]]},{"p":["HTTPResponseStatus","expectationFailed"],"f":[["case",12],[" ",17],["expectationFailed",7]],"s":[["case",12],[" ",17],["expectationFailed",7]]},{"p":["HTTPResponseStatus","permanentRedirect"],"f":[["case",12],[" ",17],["permanentRedirect",7]],"s":[["case",12],[" ",17],["permanentRedirect",7]]},{"p":["HTTPResponseStatus","temporaryRedirect"],"f":[["case",12],[" ",17],["temporaryRedirect",7]],"s":[["case",12],[" ",17],["temporaryRedirect",7]]},{"p":["HTTPResponseStatus","misdirectedRequest"],"f":[["case",12],[" ",17],["misdirectedRequest",7]],"s":[["case",12],[" ",17],["misdirectedRequest",7]]},{"p":["HTTPResponseStatus","preconditionFailed"],"f":[["case",12],[" ",17],["preconditionFailed",7]],"s":[["case",12],[" ",17],["preconditionFailed",7]]},{"p":["HTTPResponseStatus","serviceUnavailable"],"f":[["case",12],[" ",17],["serviceUnavailable",7]],"s":[["case",12],[" ",17],["serviceUnavailable",7]]},{"p":["HTTPResponseStatus","switchingProtocols"],"f":[["case",12],[" ",17],["switchingProtocols",7]],"s":[["case",12],[" ",17],["switchingProtocols",7]]},{"p":["HTTPResponseStatus","insufficientStorage"],"f":[["case",12],[" ",17],["insufficientStorage",7]],"s":[["case",12],[" ",17],["insufficientStorage",7]]},{"p":["HTTPResponseStatus","internalServerError"],"f":[["case",12],[" ",17],["internalServerError",7]],"s":[["case",12],[" ",17],["internalServerError",7]]},{"p":["HTTPResponseStatus","rangeNotSatisfiable"],"f":[["case",12],[" ",17],["rangeNotSatisfiable",7]],"s":[["case",12],[" ",17],["rangeNotSatisfiable",7]]},{"p":["HTTPResponseStatus","unprocessableEntity"],"f":[["case",12],[" ",17],["unprocessableEntity",7]],"s":[["case",12],[" ",17],["unprocessableEntity",7]]},{"p":["HTTPResponseStatus","preconditionRequired"],"f":[["case",12],[" ",17],["preconditionRequired",7]],"s":[["case",12],[" ",17],["preconditionRequired",7]]},{"p":["HTTPResponseStatus","unsupportedMediaType"],"f":[["case",12],[" ",17],["unsupportedMediaType",7]],"s":[["case",12],[" ",17],["unsupportedMediaType",7]]},{"p":["HTTPResponseStatus","variantAlsoNegotiates"],"f":[["case",12],[" ",17],["variantAlsoNegotiates",7]],"s":[["case",12],[" ",17],["variantAlsoNegotiates",7]]},{"p":["HTTPResponseStatus","httpVersionNotSupported"],"f":[["case",12],[" ",17],["httpVersionNotSupported",7]],"s":[["case",12],[" ",17],["httpVersionNotSupported",7]]},{"p":["HTTPResponseStatus","unavailableForLegalReasons"],"f":[["case",12],[" ",17],["unavailableForLegalReasons",7]],"s":[["case",12],[" ",17],["unavailableForLegalReasons",7]]},{"p":["HTTPResponseStatus","nonAuthoritativeInformation"],"f":[["case",12],[" ",17],["nonAuthoritativeInformation",7]],"s":[["case",12],[" ",17],["nonAuthoritativeInformation",7]]},{"p":["HTTPResponseStatus","proxyAuthenticationRequired"],"f":[["case",12],[" ",17],["proxyAuthenticationRequired",7]],"s":[["case",12],[" ",17],["proxyAuthenticationRequired",7]]},{"p":["HTTPResponseStatus","requestHeaderFieldsTooLarge"],"f":[["case",12],[" ",17],["requestHeaderFieldsTooLarge",7]],"s":[["case",12],[" ",17],["requestHeaderFieldsTooLarge",7]]},{"p":["HTTPResponseStatus","networkAuthenticationRequired"],"f":[["case",12],[" ",17],["networkAuthenticationRequired",7]],"s":[["case",12],[" ",17],["networkAuthenticationRequired",7]]},{"p":["HTTPResponseStatus","ok"],"f":[["case",12],[" ",17],["ok",7]],"s":[["case",12],[" ",17],["ok",7]]},{"p":["HTTPResponseStatus","gone"],"f":[["case",12],[" ",17],["gone",7]],"s":[["case",12],[" ",17],["gone",7]]},{"p":["HTTPResponseStatus","found"],"f":[["case",12],[" ",17],["found",7]],"s":[["case",12],[" ",17],["found",7]]},{"p":["HTTPResponseStatus","custom(code:reasonPhrase:)"],"f":[["case",12],[" ",17],["custom",7],["(",17],["code",1],[": ",17],["UInt",18,479],[", ",17],["reasonPhrase",1],[": ",17],["String",18,402],[")",17]],"s":[["case",12],[" ",17],["custom",7],["(",17],["code",1],[": ",17],["UInt",18],[", ",17],["reasonPhrase",1],[": ",17],["String",18],[")",17]]},{"p":["HTTPResponseStatus","imUsed"],"f":[["case",12],[" ",17],["imUsed",7]],"s":[["case",12],[" ",17],["imUsed",7]]},{"p":["HTTPResponseStatus","locked"],"f":[["case",12],[" ",17],["locked",7]],"s":[["case",12],[" ",17],["locked",7]]},{"p":["HTTPResponseStatus","created"],"f":[["case",12],[" ",17],["created",7]],"s":[["case",12],[" ",17],["created",7]]},{"p":["HTTPResponseStatus","accepted"],"f":[["case",12],[" ",17],["accepted",7]],"s":[["case",12],[" ",17],["accepted",7]]},{"p":["HTTPResponseStatus","conflict"],"f":[["case",12],[" ",17],["conflict",7]],"s":[["case",12],[" ",17],["conflict",7]]},{"p":["HTTPResponseStatus","continue"],"f":[["case",12],[" ",17],["`continue`",7]],"s":[["case",12],[" ",17],["`continue`",7]]},{"p":["HTTPResponseStatus","notFound"],"f":[["case",12],[" ",17],["notFound",7]],"s":[["case",12],[" ",17],["notFound",7]]},{"p":["HTTPResponseStatus","seeOther"],"f":[["case",12],[" ",17],["seeOther",7]],"s":[["case",12],[" ",17],["seeOther",7]]},{"p":["HTTPResponseStatus","useProxy"],"f":[["case",12],[" ",17],["useProxy",7]],"s":[["case",12],[" ",17],["useProxy",7]]},{"p":["HTTPResponseStatus","forbidden"],"f":[["case",12],[" ",17],["forbidden",7]],"s":[["case",12],[" ",17],["forbidden",7]]},{"p":["HTTPResponseStatus","imATeapot"],"f":[["case",12],[" ",17],["imATeapot",7]],"s":[["case",12],[" ",17],["imATeapot",7]]},{"p":["HTTPResponseStatus","noContent"],"f":[["case",12],[" ",17],["noContent",7]],"s":[["case",12],[" ",17],["noContent",7]]},{"p":["HTTPServerUpgradeErrors","invalidHTTPOrdering"],"f":[["case",12],[" ",17],["invalidHTTPOrdering",7]],"s":[["case",12],[" ",17],["invalidHTTPOrdering",7]]},{"p":["HTTPServerUpgradeEvents","upgradeComplete(toProtocol:upgradeRequest:)"],"f":[["case",12],[" ",17],["upgradeComplete",7],["(",17],["toProtocol",1],[": ",17],["String",18,402],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18,18],[")",17]],"s":[["case",12],[" ",17],["upgradeComplete",7],["(",17],["toProtocol",1],[": ",17],["String",18],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18],[")",17]],"d":"Fired when HTTP upgrade has completed and the\n`HTTPServerProtocolUpgrader` is about to remove itself from the\n`ChannelPipeline`."},{"p":["RemoveAfterUpgradeStrategy","forwardBytes"],"f":[["case",12],[" ",17],["forwardBytes",7]],"s":[["case",12],[" ",17],["forwardBytes",7]],"d":"Forward all the remaining bytes that are currently buffered in the deccoder to the next handler in the pipeline."},{"p":["RemoveAfterUpgradeStrategy","dropBytes"],"f":[["case",12],[" ",17],["dropBytes",7]],"s":[["case",12],[" ",17],["dropBytes",7]],"d":"Discard all the remaining bytes that are currently buffered in the decoder."},{"p":["RemoveAfterUpgradeStrategy","fireError"],"f":[["case",12],[" ",17],["fireError",7]],"s":[["case",12],[" ",17],["fireError",7]],"d":"Fires a `ByteToMessageDecoder.leftoverDataWhenDone` error through the pipeline"},{"p":["HTTPPart","end(_:)"],"f":[["case",12],[" ",17],["end",7],["(",17],["HTTPHeaders",18,15],["?)",17]],"s":[["case",12],[" ",17],["end",7],["(",17],["HTTPHeaders",18],["?)",17]]},{"p":["HTTPPart","body(_:)"],"f":[["case",12],[" ",17],["body",7],["(",17],["BodyT",18],[")",17]],"s":[["case",12],[" ",17],["body",7],["(",17],["BodyT",18],[")",17]]},{"p":["HTTPPart","head(_:)"],"f":[["case",12],[" ",17],["head",7],["(",17],["HeadT",18],[")",17]],"s":[["case",12],[" ",17],["head",7],["(",17],["HeadT",18],[")",17]]},{"p":["HTTPMethod","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["String",18,402],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":434},{"p":["HTTPDecoder","init(leftOverBytesStrategy:informationalResponseStrategy:)"],"f":[["init",10],["(",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18,13],[" = .dropBytes, ",17],["informationalResponseStrategy",1],[": ",17],["NIOInformationalResponseStrategy",18,26],[" = .drop)",17]],"s":[["init",10],["(",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18],[", ",17],["informationalResponseStrategy",1],[": ",17],["NIOInformationalResponseStrategy",18],[")",17]],"g":[["In",0,0],["Out",1,0]],"d":"Creates a new instance of `HTTPDecoder`.\n\n- parameters:\n    - leftOverBytesStrategy: The strategy to use when removing the decoder from the pipeline and an upgrade was,\n                             detected. Note that this does not affect what happens on EOF.\n    - informationalResponseStrategy: Should informational responses (like http status 100) be forwarded or dropped.\n                             Default is `.drop`. This property is only respected when decoding responses."},{"p":["HTTPDecoder","init(leftOverBytesStrategy:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18,13],[" = .dropBytes)",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["leftOverBytesStrategy",1],[": ",17],["RemoveAfterUpgradeStrategy",18],[")",17]],"g":[["In",0,0],["Out",1,0]],"d":"Creates a new instance of `HTTPDecoder`.\n\n- parameters:\n    - leftOverBytesStrategy: The strategy to use when removing the decoder from the pipeline and an upgrade was,\n                             detected. Note that this does not affect what happens on EOF."},{"p":["HTTPHeaders","init(dictionaryLiteral:)"],"f":[["init",10],["(",17],["dictionaryLiteral",1],[" ",17],["elements",2],[": (",17],["String",18,402],[", ",17],["String",18,402],[")...)",17]],"s":[["init",10],["(",17],["dictionaryLiteral",1],[": (",17],["String",18],[", ",17],["String",18],[")...)",17]],"d":"Construct a `HTTPHeaders` structure.\n\n- parameters\n    - elements: name, value pairs provided by a dictionary literal.","o":486},{"p":["HTTPHeaders","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["headers",2],[": [(",17],["String",18,402],[", ",17],["String",18,402],[")] = [])",17]],"s":[["init",10],["([(",17],["String",18],[", ",17],["String",18],[")])",17]],"d":"Construct a `HTTPHeaders` structure.\n\n- parameters\n    - headers: An initial set of headers to use to populate the header block.\n    - allocator: The allocator to use to allocate the underlying storage."},{"p":["HTTPVersion","init(major:minor:)"],"f":[["init",10],["(",17],["major",1],[": ",17],["Int",18,436],[", ",17],["minor",1],[": ",17],["Int",18,436],[")",17]],"s":[["init",10],["(",17],["major",1],[": ",17],["Int",18],[", ",17],["minor",1],[": ",17],["Int",18],[")",17]],"d":"Create a HTTP version.\n\n- Parameter major: The major version number.\n- Parameter minor: The minor version number."},{"p":["HTTPRequestHead","init(version:method:uri:headers:)"],"f":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18,17],[", ",17],["method",1],[": ",17],["HTTPMethod",18,7],[", ",17],["uri",1],[": ",17],["String",18,402],[", ",17],["headers",1],[": ",17],["HTTPHeaders",18,15],[")",17]],"s":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18],[", ",17],["method",1],[": ",17],["HTTPMethod",18],[", ",17],["uri",1],[": ",17],["String",18],[", ",17],["headers",1],[": ",17],["HTTPHeaders",18],[")",17]],"d":"Create a `HTTPRequestHead`\n\n- parameters:\n    - version: The version for this HTTP request.\n    - method: The HTTP method for this request.\n    - uri: The URI used on this request.\n    - headers: This request's HTTP headers."},{"p":["HTTPRequestHead","init(version:method:uri:)"],"f":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18,17],[", ",17],["method",1],[": ",17],["HTTPMethod",18,7],[", ",17],["uri",1],[": ",17],["String",18,402],[")",17]],"s":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18],[", ",17],["method",1],[": ",17],["HTTPMethod",18],[", ",17],["uri",1],[": ",17],["String",18],[")",17]],"d":"Create a `HTTPRequestHead`\n\n- Parameter version: The version for this HTTP request.\n- Parameter method: The HTTP method for this request.\n- Parameter uri: The URI used on this request."},{"p":["HTTPResponseHead","init(version:status:headers:)"],"f":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18,17],[", ",17],["status",1],[": ",17],["HTTPResponseStatus",18,10],[", ",17],["headers",1],[": ",17],["HTTPHeaders",18,15],[" = HTTPHeaders())",17]],"s":[["init",10],["(",17],["version",1],[": ",17],["HTTPVersion",18],[", ",17],["status",1],[": ",17],["HTTPResponseStatus",18],[", ",17],["headers",1],[": ",17],["HTTPHeaders",18],[")",17]],"d":"Create a `HTTPResponseHead`\n\n- Parameter version: The version for this HTTP response.\n- Parameter status: The status for this HTTP response.\n- Parameter headers: The headers for this HTTP response."},{"p":["HTTPRequestEncoder","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["HTTPResponseStatus","init(statusCode:reasonPhrase:)"],"f":[["init",10],["(",17],["statusCode",1],[": ",17],["Int",18,436],[", ",17],["reasonPhrase",1],[": ",17],["String",18,402],[" = \"\")",17]],"s":[["init",10],["(",17],["statusCode",1],[": ",17],["Int",18],[", ",17],["reasonPhrase",1],[": ",17],["String",18],[")",17]],"d":"Initialize a `HTTPResponseStatus` from a given status and reason.\n\n- Parameter statusCode: The integer value of the HTTP response status code\n- Parameter reasonPhrase: The textual reason phrase from the response. This will be\n    discarded in favor of the default if the `statusCode` matches one that we know."},{"p":["HTTPResponseEncoder","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["HTTPServerUpgradeHandler","init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)"],"f":[["@preconcurrency",3],[" ",17],["convenience",12],[" ",17],["init",10],["(",17],["upgraders",1],[": [",17],["HTTPServerProtocolUpgrader",18,5],["], ",17],["httpEncoder",1],[": ",17],["HTTPResponseEncoder",18,29],[", ",17],["extraHTTPHandlers",1],[": [",17],["RemovableChannelHandler",18,362],["], ",17],["upgradeCompletionHandler",1],[": ",17],["@escaping",12],[" (",17],["ChannelHandlerContext",18,345],[") -> ",17],["Void",18,487],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["upgraders",1],[": [",17],["HTTPServerProtocolUpgrader",18],["], ",17],["httpEncoder",1],[": ",17],["HTTPResponseEncoder",18],[", ",17],["extraHTTPHandlers",1],[": [",17],["RemovableChannelHandler",18],["], ",17],["upgradeCompletionHandler",1],[": (",17],["ChannelHandlerContext",18],[") -> ",17],["Void",18],[")",17]],"d":"Create a `HTTPServerUpgradeHandler`.\n\n- Parameter upgraders: All `HTTPServerProtocolUpgrader` objects that this pipeline will be able\n    to use to handle HTTP upgrade.\n- Parameter httpEncoder: The `HTTPResponseEncoder` encoding responses from this handler and which will\n    be removed from the pipeline once the upgrade response is sent. This is used to ensure\n    that the pipeline will be in a clean state after upgrade.\n- Parameter extraHTTPHandlers: Any other handlers that are directly related to handling HTTP. At the very least\n    this should include the `HTTPDecoder`, but should also include any other handler that cannot tolerate\n    receiving non-HTTP data.\n- Parameter upgradeCompletionHandler: A block that will be fired when HTTP upgrade is complete."},{"p":["NIOHTTPServerRequestFull","init(head:body:)"],"f":[["init",10],["(",17],["head",1],[": ",17],["HTTPRequestHead",18,18],[", ",17],["body",1],[": ",17],["ByteBuffer",18,325],["?)",17]],"s":[["init",10],["(",17],["head",1],[": ",17],["HTTPRequestHead",18],[", ",17],["body",1],[": ",17],["ByteBuffer",18],["?)",17]]},{"p":["HTTPServerPipelineHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["NIOHTTPClientResponseFull","init(head:body:)"],"f":[["init",10],["(",17],["head",1],[": ",17],["HTTPResponseHead",18,19],[", ",17],["body",1],[": ",17],["ByteBuffer",18,325],["?)",17]],"s":[["init",10],["(",17],["head",1],[": ",17],["HTTPResponseHead",18],[", ",17],["body",1],[": ",17],["ByteBuffer",18],["?)",17]]},{"p":["NIOHTTPClientUpgradeHandler","init(upgraders:httpHandlers:upgradeCompletionHandler:)"],"f":[["@preconcurrency",3],[" ",17],["convenience",12],[" ",17],["init",10],["(",17],["upgraders",1],[": [",17],["NIOHTTPClientProtocolUpgrader",18,6],["], ",17],["httpHandlers",1],[": [",17],["RemovableChannelHandler",18,362],["], ",17],["upgradeCompletionHandler",1],[": ",17],["@escaping",12],[" (",17],["ChannelHandlerContext",18,345],[") -> ",17],["Void",18,487],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["upgraders",1],[": [",17],["NIOHTTPClientProtocolUpgrader",18],["], ",17],["httpHandlers",1],[": [",17],["RemovableChannelHandler",18],["], ",17],["upgradeCompletionHandler",1],[": (",17],["ChannelHandlerContext",18],[") -> ",17],["Void",18],[")",17]],"d":"Create a `HTTPClientUpgradeHandler`.\n\n- Parameter upgraders: All `HTTPClientProtocolUpgrader` objects that will add their upgrade request\n    headers and handle the upgrade if there is a response for their protocol. They should be placed in\n    order of the preference for the upgrade.\n- Parameter httpHandlers: All `RemovableChannelHandler` objects which will be removed from the pipeline\n    once the upgrade response is sent. This is used to ensure that the pipeline will be in a clean state\n    after the upgrade. It should include any handlers that are directly related to handling HTTP.\n    At the very least this should include the `HTTPEncoder` and `HTTPDecoder`, but should also include\n    any other handler that cannot tolerate receiving non-HTTP data.\n- Parameter upgradeCompletionHandler: A closure that will be fired when HTTP upgrade is complete."},{"p":["HTTPServerProtocolErrorHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["NIOHTTPServerRequestAggregator","init(maxContentLength:closeOnExpectationFailed:)"],"f":[["init",10],["(",17],["maxContentLength",1],[": ",17],["Int",18,436],[", ",17],["closeOnExpectationFailed",1],[": ",17],["Bool",18,435],[" = false)",17]],"s":[["init",10],["(",17],["maxContentLength",1],[": ",17],["Int",18],[", ",17],["closeOnExpectationFailed",1],[": ",17],["Bool",18],[")",17]]},{"p":["NIOHTTPClientResponseAggregator","init(maxContentLength:)"],"f":[["init",10],["(",17],["maxContentLength",1],[": ",17],["Int",18,436],[")",17]],"s":[["init",10],["(",17],["maxContentLength",1],[": ",17],["Int",18],[")",17]]},{"p":["HTTPHeaders","subscript(canonicalForm:)"],"f":[["subscript",10],["(",17],["canonicalForm",1],[" ",17],["name",2],[": ",17],["String",18,402],[") -> [",17],["Substring",18,478],["] { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["canonicalForm",1],[" _: ",17],["String",18],[") -> [",17],["Substring",18],["]",17]],"d":"Retrieves the header values for the given header field in \"canonical form\": that is,\nsplitting them on commas as extensively as possible such that multiple values received on the\none line are returned as separate entries. Also respects the fact that Set-Cookie should not\nbe split in this way.\n\n- Parameter name: The header field name whose values are to be retrieved.\n- Returns: A list of the values for that header field name."},{"p":["HTTPHeaders","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[") -> ",17],["HTTPHeaders",18,15],[".",17],["Element",18,291],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["HTTPHeaders",18],[".",17],["Index",18],[") -> ",17],["HTTPHeaders",18],[".",17],["Element",18]],"o":477},{"p":["HTTPHeaders","subscript(_:)"],"f":[["subscript",10],["(",17],["name",2],[": ",17],["String",18,402],[") -> [",17],["String",18,402],["] { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["String",18],[") -> [",17],["String",18],["]",17]],"d":"Retrieve all of the values for a give header field name from the block.\n\nThis method uses case-insensitive comparisons for the header field name. It\ndoes not return a maximally-decomposed list of the header fields, but instead\nreturns them in their original representation: that means that a comma-separated\nheader field list may contain more than one entry, some of which contain commas\nand some do not. If you want a representation of the header fields suitable for\nperforming computation on, consider `subscript(canonicalForm:)`.\n\n- Parameter name: The header field name whose values are to be retrieved.\n- Returns: A list of the values for that header field name."},{"p":["HTTPVersion","http2"],"f":[["static",12],[" ",17],["let",12],[" ",17],["http2",7],[": ",17],["HTTPVersion",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["http2",7],[": ",17],["HTTPVersion",18]],"d":"HTTP/2"},{"p":["HTTPVersion","http3"],"f":[["static",12],[" ",17],["let",12],[" ",17],["http3",7],[": ",17],["HTTPVersion",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["http3",7],[": ",17],["HTTPVersion",18]],"d":"HTTP/3"},{"p":["HTTPVersion","http0_9"],"f":[["static",12],[" ",17],["let",12],[" ",17],["http0_9",7],[": ",17],["HTTPVersion",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["http0_9",7],[": ",17],["HTTPVersion",18]],"d":"HTTP/0.9 (not supported by SwiftNIO)"},{"p":["HTTPVersion","http1_0"],"f":[["static",12],[" ",17],["let",12],[" ",17],["http1_0",7],[": ",17],["HTTPVersion",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["http1_0",7],[": ",17],["HTTPVersion",18]],"d":"HTTP/1.0"},{"p":["HTTPVersion","http1_1"],"f":[["static",12],[" ",17],["let",12],[" ",17],["http1_1",7],[": ",17],["HTTPVersion",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["http1_1",7],[": ",17],["HTTPVersion",18]],"d":"HTTP/1.1"},{"p":["NIOHTTPDecoderError","unsolicitedResponse"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unsolicitedResponse",7],[": ",17],["NIOHTTPDecoderError",18,20]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unsolicitedResponse",7],[": ",17],["NIOHTTPDecoderError",18]],"d":"A response was received from a server without an associated request having been sent."},{"p":["NIOHTTPClientUpgradeError","upgraderDeniedUpgrade"],"f":[["static",12],[" ",17],["let",12],[" ",17],["upgraderDeniedUpgrade",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["upgraderDeniedUpgrade",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","receivedResponseAfterUpgradeCompleted"],"f":[["static",12],[" ",17],["let",12],[" ",17],["receivedResponseAfterUpgradeCompleted",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["receivedResponseAfterUpgradeCompleted",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","writingToHandlerAfterUpgradeFailed"],"f":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerAfterUpgradeFailed",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerAfterUpgradeFailed",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","writingToHandlerAfterUpgradeCompleted"],"f":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerAfterUpgradeCompleted",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerAfterUpgradeCompleted",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","writingToHandlerDuringUpgrade"],"f":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerDuringUpgrade",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["writingToHandlerDuringUpgrade",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","invalidHTTPOrdering"],"f":[["static",12],[" ",17],["let",12],[" ",17],["invalidHTTPOrdering",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["invalidHTTPOrdering",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","responseProtocolNotFound"],"f":[["static",12],[" ",17],["let",12],[" ",17],["responseProtocolNotFound",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["responseProtocolNotFound",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPClientUpgradeError","receivedResponseBeforeRequestSent"],"f":[["static",12],[" ",17],["let",12],[" ",17],["receivedResponseBeforeRequestSent",7],[": ",17],["NIOHTTPClientUpgradeError",18,23]],"s":[["static",12],[" ",17],["let",12],[" ",17],["receivedResponseBeforeRequestSent",7],[": ",17],["NIOHTTPClientUpgradeError",18]]},{"p":["NIOHTTPObjectAggregatorError","frameTooLong"],"f":[["static",12],[" ",17],["let",12],[" ",17],["frameTooLong",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["frameTooLong",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorError","connectionClosed"],"f":[["static",12],[" ",17],["let",12],[" ",17],["connectionClosed",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["connectionClosed",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorError","endingIgnoredMessage"],"f":[["static",12],[" ",17],["let",12],[" ",17],["endingIgnoredMessage",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["endingIgnoredMessage",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorError","unexpectedMessageEnd"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageEnd",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageEnd",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorError","unexpectedMessageBody"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageBody",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageBody",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorError","unexpectedMessageHead"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageHead",7],[": ",17],["NIOHTTPObjectAggregatorError",18,24]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unexpectedMessageHead",7],[": ",17],["NIOHTTPObjectAggregatorError",18]]},{"p":["NIOHTTPObjectAggregatorEvent","httpFrameTooLong"],"f":[["static",12],[" ",17],["let",12],[" ",17],["httpFrameTooLong",7],[": ",17],["NIOHTTPObjectAggregatorEvent",18,25]],"s":[["static",12],[" ",17],["let",12],[" ",17],["httpFrameTooLong",7],[": ",17],["NIOHTTPObjectAggregatorEvent",18]]},{"p":["NIOHTTPObjectAggregatorEvent","httpExpectationFailed"],"f":[["static",12],[" ",17],["let",12],[" ",17],["httpExpectationFailed",7],[": ",17],["NIOHTTPObjectAggregatorEvent",18,25]],"s":[["static",12],[" ",17],["let",12],[" ",17],["httpExpectationFailed",7],[": ",17],["NIOHTTPObjectAggregatorEvent",18]]},{"p":["NIOInformationalResponseStrategy","drop"],"f":[["static",12],[" ",17],["let",12],[" ",17],["drop",7],[": ",17],["NIOInformationalResponseStrategy",18,26]],"s":[["static",12],[" ",17],["let",12],[" ",17],["drop",7],[": ",17],["NIOInformationalResponseStrategy",18]],"d":"Drop the informational response and only forward the \"real\" response"},{"p":["NIOInformationalResponseStrategy","forward"],"f":[["static",12],[" ",17],["let",12],[" ",17],["forward",7],[": ",17],["NIOInformationalResponseStrategy",18,26]],"s":[["static",12],[" ",17],["let",12],[" ",17],["forward",7],[": ",17],["NIOInformationalResponseStrategy",18]],"d":"Forward the informational response and then forward the \"real\" response. This will result in\nmultiple `head` before an `end` is emitted."},{"p":["HTTPMethod","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["String",18]],"o":433},{"p":["HTTPHeaders","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["HTTPHeaders",18],[".",17],["Index",18]],"o":442},{"p":["HTTPHeaders","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":481},{"p":["HTTPHeaders","capacity"],"f":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18,436],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["capacity",7],[": ",17],["Int",18]],"d":"The total number of headers that can be contained without allocating new storage."},{"p":["HTTPHeaders","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["HTTPHeaders",18],[".",17],["Index",18]],"o":452},{"p":["HTTPVersion","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":481},{"p":["HTTPVersion","major"],"f":[["var",12],[" ",17],["major",7],[": ",17],["Int",18,436],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["major",7],[": ",17],["Int",18]],"d":"The major version number."},{"p":["HTTPVersion","minor"],"f":[["var",12],[" ",17],["minor",7],[": ",17],["Int",18,436],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["minor",7],[": ",17],["Int",18]],"d":"The minor version number."},{"p":["HTTPParserError","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":484},{"p":["HTTPRequestHead","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":481},{"p":["HTTPRequestHead","isKeepAlive"],"f":[["var",12],[" ",17],["isKeepAlive",7],[": ",17],["Bool",18,435],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeepAlive",7],[": ",17],["Bool",18]],"d":"Whether this HTTP request is a keep-alive request: that is, whether the\nconnection should remain open after the request is complete."},{"p":["HTTPRequestHead","uri"],"f":[["var",12],[" ",17],["uri",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["uri",7],[": ",17],["String",18]]},{"p":["HTTPRequestHead","method"],"f":[["var",12],[" ",17],["method",7],[": ",17],["HTTPMethod",18,7],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["method",7],[": ",17],["HTTPMethod",18]],"d":"The HTTP method for this request."},{"p":["HTTPRequestHead","headers"],"f":[["var",12],[" ",17],["headers",7],[": ",17],["HTTPHeaders",18,15]],"s":[["var",12],[" ",17],["headers",7],[": ",17],["HTTPHeaders",18]]},{"p":["HTTPRequestHead","version"],"f":[["var",12],[" ",17],["version",7],[": ",17],["HTTPVersion",18,17],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["version",7],[": ",17],["HTTPVersion",18]],"d":"The version for this HTTP request."},{"p":["HTTPResponseHead","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":481},{"p":["HTTPResponseHead","isKeepAlive"],"f":[["var",12],[" ",17],["isKeepAlive",7],[": ",17],["Bool",18,435],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeepAlive",7],[": ",17],["Bool",18]],"d":"Whether this HTTP response is a keep-alive request: that is, whether the\nconnection should remain open after the request is complete."},{"p":["HTTPResponseHead","status"],"f":[["var",12],[" ",17],["status",7],[": ",17],["HTTPResponseStatus",18,10],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["status",7],[": ",17],["HTTPResponseStatus",18]],"d":"The HTTP response status."},{"p":["HTTPResponseHead","headers"],"f":[["var",12],[" ",17],["headers",7],[": ",17],["HTTPHeaders",18,15]],"s":[["var",12],[" ",17],["headers",7],[": ",17],["HTTPHeaders",18]]},{"p":["HTTPResponseHead","version"],"f":[["var",12],[" ",17],["version",7],[": ",17],["HTTPVersion",18,17],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["version",7],[": ",17],["HTTPVersion",18]],"d":"The HTTP version that corresponds to this response."},{"p":["HTTPResponseStatus","reasonPhrase"],"f":[["var",12],[" ",17],["reasonPhrase",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["reasonPhrase",7],[": ",17],["String",18]],"d":"The string reason phrase for a given HTTP response status."},{"p":["HTTPResponseStatus","mayHaveResponseBody"],"f":[["var",12],[" ",17],["mayHaveResponseBody",7],[": ",17],["Bool",18,435],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["mayHaveResponseBody",7],[": ",17],["Bool",18]],"d":"Whether responses with this status code may have a response body."},{"p":["HTTPResponseStatus","code"],"f":[["var",12],[" ",17],["code",7],[": ",17],["UInt",18,479],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["code",7],[": ",17],["UInt",18]],"d":"The numerical status code for a given HTTP response status."},{"p":["NIOHTTPDecoderError","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":484},{"p":["NIOHTTPServerRequestFull","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["ByteBuffer",18,325],["?",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["ByteBuffer",18],["?",17]]},{"p":["NIOHTTPServerRequestFull","head"],"f":[["var",12],[" ",17],["head",7],[": ",17],["HTTPRequestHead",18,18]],"s":[["var",12],[" ",17],["head",7],[": ",17],["HTTPRequestHead",18]]},{"p":["NIOHTTPClientResponseFull","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["ByteBuffer",18,325],["?",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["ByteBuffer",18],["?",17]]},{"p":["NIOHTTPClientResponseFull","head"],"f":[["var",12],[" ",17],["head",7],[": ",17],["HTTPResponseHead",18,19]],"s":[["var",12],[" ",17],["head",7],[": ",17],["HTTPResponseHead",18]]},{"p":["NIOHTTPClientUpgradeError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":481},{"p":["HTTPServerProtocolUpgrader","supportedProtocol"],"f":[["var",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18]],"d":"The protocol this upgrader knows how to support."},{"p":["HTTPServerProtocolUpgrader","requiredUpgradeHeaders"],"f":[["var",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18,402],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18],["]",17]],"d":"All the header fields the protocol needs in the request to successfully upgrade. These header fields\nwill be provided to the handler when it is asked to handle the upgrade. They will also be validated\n against the inbound request's Connection header field."},{"p":["NIOHTTPClientProtocolUpgrader","supportedProtocol"],"f":[["var",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18,402],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18]],"d":"The protocol this upgrader knows how to support."},{"p":["NIOHTTPClientProtocolUpgrader","requiredUpgradeHeaders"],"f":[["var",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18,402],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18],["]",17]],"d":"All the header fields the protocol requires in the request to successfully upgrade.\nThese header fields will be added to the outbound request's \"Connection\" header field.\nIt is the responsibility of the custom headers call to actually add these required headers."},{"p":["HTTPDecoder","decodeLast(context:buffer:seenEOF:)"],"f":[["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,325],[", ",17],["seenEOF",1],[": ",17],["Bool",18,435],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,326]],"s":[["func",12],[" ",17],["decodeLast",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[", ",17],["seenEOF",1],[": ",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"g":[["In",0,0],["Out",1,0]],"o":339},{"p":["HTTPDecoder","decoderAdded(context:)"],"f":[["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["decoderAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"g":[["In",0,0],["Out",1,0]],"o":340},{"p":["HTTPDecoder","decoderRemoved(context:)"],"f":[["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["decoderRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"g":[["In",0,0],["Out",1,0]],"o":341},{"p":["HTTPDecoder","decode(context:buffer:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,325],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,326]],"s":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]],"g":[["In",0,0],["Out",1,0]],"o":342},{"p":["HTTPDecoder","write(data:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["data",1],[": ",17],["HTTPClientRequestPart",18,298],[")",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["data",1],[": ",17],["HTTPClientRequestPart",18],[")",17]],"e":[["In",2,"HTTPPart<HTTPResponseHead, ByteBuffer>",14],["Out",2,"HTTPPart<HTTPRequestHead, IOData>",14]],"c":[["In",2,"HTTPPart<HTTPResponseHead, ByteBuffer>",14],["Out",2,"HTTPPart<HTTPRequestHead, IOData>",14]],"g":[["In",0,0],["Out",1,0]],"o":370},{"p":["HTTPHeaders","replaceOrAdd(name:value:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceOrAdd",7],["(",17],["name",1],[": ",17],["String",18,402],[", ",17],["value",1],[": ",17],["String",18,402],[")",17]],"s":[["func",12],[" ",17],["replaceOrAdd",7],["(",17],["name",1],[": ",17],["String",18],[", ",17],["value",1],[": ",17],["String",18],[")",17]],"d":"- Parameter value: The header field value to add for the given name."},{"p":["HTTPHeaders","reserveCapacity(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reserveCapacity",7],["(",17],["_",1],[" ",17],["minimumCapacity",2],[": ",17],["Int",18,436],[")",17]],"s":[["func",12],[" ",17],["reserveCapacity",7],["(",17],["Int",18],[")",17]],"d":"Reserves enough space to store the specified number of headers.\n\n- Parameter minimumCapacity: The requested number of headers to store."},{"p":["HTTPHeaders","add(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["add",7],["(",17],["contentsOf",1],[" ",17],["other",2],[": ",17],["HTTPHeaders",18,15],[")",17]],"s":[["func",12],[" ",17],["add",7],["(",17],["contentsOf",1],[": ",17],["HTTPHeaders",18],[")",17]],"d":"Add another block of headers to the block.\n\n- Parameter contentsOf: The block of headers to add to these headers."},{"p":["HTTPHeaders","add(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["add",7],["<",17],["S",0],[">(",17],["contentsOf",1],[" ",17],["other",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["Sequence",18,403],[", ",17],["S",18],[".",17],["Element",18],[" == (",17],["String",18,402],[", ",17],["String",18,402],[")",17]],"s":[["func",12],[" ",17],["add",7],["<",17],["S",0],[">(",17],["contentsOf",1],[": ",17],["S",18],[")",17]],"c":[["S",1,"Sequence",403],["S.Element",2,"(String, String)"]],"g":[["S",0,0]],"d":"Add a sequence of header name/value pairs to the block.\n\nThis method is strictly additive: if there are other entries with the same header\nname already in the block, this will add new entries.\n\n- Parameter contentsOf: The sequence of header name/value pairs. For maximum compatibility\n    the header should be an ASCII string. For future-proofing with HTTP/2 lowercase header\n    names are strongly recommended."},{"p":["HTTPHeaders","add(name:value:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["add",7],["(",17],["name",1],[": ",17],["String",18,402],[", ",17],["value",1],[": ",17],["String",18,402],[")",17]],"s":[["func",12],[" ",17],["add",7],["(",17],["name",1],[": ",17],["String",18],[", ",17],["value",1],[": ",17],["String",18],[")",17]],"d":"Add a header name/value pair to the block.\n\nThis method is strictly additive: if there are other values for the given header name\nalready in the block, this will add a new entry.\n\n- Parameter name: The header field name. For maximum compatibility this should be an\n    ASCII string. For future-proofing with HTTP/2 lowercase header names are strongly\n    recommended.\n- Parameter value: The header field value to add for the given name."},{"p":["HTTPHeaders","first(name:)"],"f":[["func",12],[" ",17],["first",7],["(",17],["name",1],[": ",17],["String",18,402],[") -> ",17],["String",18,402],["?",17]],"s":[["func",12],[" ",17],["first",7],["(",17],["name",1],[": ",17],["String",18],[") -> ",17],["String",18],["?",17]],"d":"Retrieves the first value for a given header field name from the block.\n\nThis method uses case-insensitive comparisons for the header field name. It\ndoes not return the first value from a maximally-decomposed list of the header fields,\nbut instead returns the first value from the original representation: that means\nthat a comma-separated header field list may contain more than one entry, some of\nwhich contain commas and some do not. If you want a representation of the header fields\nsuitable for performing computation on, consider `subscript(canonicalForm:)`.\n\n- Parameter name: The header field name whose first value should be retrieved.\n- Returns: The first value for the header field name."},{"p":["HTTPHeaders","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[") -> ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["HTTPHeaders",18],[".",17],["Index",18],[") -> ",17],["HTTPHeaders",18],[".",17],["Index",18]],"o":438},{"p":["HTTPHeaders","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[") -> ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["HTTPHeaders",18],[".",17],["Index",18],[") -> ",17],["HTTPHeaders",18],[".",17],["Index",18]],"o":439},{"p":["HTTPHeaders","remove(name:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["name",1],[" ",17],["nameToRemove",2],[": ",17],["String",18,402],[")",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["name",1],[": ",17],["String",18],[")",17]],"d":"Remove all values for a given header name from the block.\n\nThis method uses case-insensitive comparisons for the header field name.\n\n- Parameter name: The name of the header field to remove from the block."},{"p":["HTTPHeaders","contains(name:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["name",1],[": ",17],["String",18,402],[") -> ",17],["Bool",18,435]],"s":[["func",12],[" ",17],["contains",7],["(",17],["name",1],[": ",17],["String",18],[") -> ",17],["Bool",18]]},{"p":["HTTPRequestEncoder","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,336],["<",17],["Void",18,487],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":366},{"p":["HTTPResponseEncoder","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,336],["<",17],["Void",18,487],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":366},{"p":["HTTPServerUpgradeHandler","removeHandler(context:removalToken:)"],"f":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18,345],[".",17],["RemovalToken",18,346],[")",17]],"s":[["func",12],[" ",17],["removeHandler",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["removalToken",1],[": ",17],["ChannelHandlerContext",18],[".",17],["RemovalToken",18],[")",17]],"o":363},{"p":["HTTPServerUpgradeHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":359},{"p":["HTTPServerPipelineHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":359},{"p":["HTTPServerPipelineHandler","errorCaught(context:error:)"],"f":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["error",1],[": ",17],["Error",18,488],[")",17]],"s":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["error",1],[": ",17],["Error",18],[")",17]],"o":360},{"p":["HTTPServerPipelineHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":329},{"p":["HTTPServerPipelineHandler","channelInactive(context:)"],"f":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":361},{"p":["HTTPServerPipelineHandler","userInboundEventTriggered(context:event:)"],"f":[["func",12],[" ",17],["userInboundEventTriggered",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["event",1],[": ",17],["Any",12],[")",17]],"s":[["func",12],[" ",17],["userInboundEventTriggered",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["event",1],[": ",17],["Any",12],[")",17]],"o":358},{"p":["HTTPServerPipelineHandler","read(context:)"],"f":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["read",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":365},{"p":["HTTPServerPipelineHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,336],["<",17],["Void",18,487],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":366},{"p":["HTTPServerProtocolUpgrader","buildUpgradeResponse(channel:upgradeRequest:initialResponseHeaders:)"],"f":[["func",12],[" ",17],["buildUpgradeResponse",7],["(",17],["channel",1],[": ",17],["Channel",18,373],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18,18],[", ",17],["initialResponseHeaders",1],[": ",17],["HTTPHeaders",18,15],[") -> ",17],["EventLoopFuture",18,335],["<",17],["HTTPHeaders",18,15],[">",17]],"s":[["func",12],[" ",17],["buildUpgradeResponse",7],["(",17],["channel",1],[": ",17],["Channel",18],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18],[", ",17],["initialResponseHeaders",1],[": ",17],["HTTPHeaders",18],[") -> ",17],["EventLoopFuture",18],["<",17],["HTTPHeaders",18],[">",17]],"d":"Builds the upgrade response headers. Should return any headers that need to be supplied to the client\nin the 101 Switching Protocols response. If upgrade cannot proceed for any reason, this function should\nfail the future."},{"p":["HTTPServerProtocolUpgrader","upgrade(context:upgradeRequest:)"],"f":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18,18],[") -> ",17],["EventLoopFuture",18,335],["<",17],["Void",18,487],[">",17]],"s":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Called when the upgrade response has been flushed. At this time it is safe to mutate the channel pipeline\nto add whatever channel handlers are required. Until the returned `EventLoopFuture` succeeds, all received\ndata will be buffered."},{"p":["NIOHTTPClientUpgradeHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":359},{"p":["NIOHTTPClientUpgradeHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,336],["<",17],["Void",18,487],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":366},{"p":["NIOHTTPClientProtocolUpgrader","shouldAllowUpgrade(upgradeResponse:)"],"f":[["func",12],[" ",17],["shouldAllowUpgrade",7],["(",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18,19],[") -> ",17],["Bool",18,435]],"s":[["func",12],[" ",17],["shouldAllowUpgrade",7],["(",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18],[") -> ",17],["Bool",18]],"d":"Gives the receiving upgrader the chance to deny the upgrade based on the upgrade HTTP response."},{"p":["NIOHTTPClientProtocolUpgrader","upgrade(context:upgradeResponse:)"],"f":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18,19],[") -> ",17],["EventLoopFuture",18,335],["<",17],["Void",18,487],[">",17]],"s":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Called when the upgrade response has been flushed. At this time it is safe to mutate the channel\npipeline to add whatever channel handlers are required.\nUntil the returned `EventLoopFuture` succeeds, all received data will be buffered."},{"p":["NIOHTTPClientProtocolUpgrader","addCustom(upgradeRequestHeaders:)"],"f":[["func",12],[" ",17],["addCustom",7],["(",17],["upgradeRequestHeaders",1],[": ",17],["inout",12],[" ",17],["HTTPHeaders",18,15],[")",17]],"s":[["func",12],[" ",17],["addCustom",7],["(",17],["upgradeRequestHeaders",1],[": ",17],["inout",12],[" ",17],["HTTPHeaders",18],[")",17]],"d":"Additional headers to be added to the request, beyond the \"Upgrade\" and \"Connection\" headers."},{"p":["HTTPServerProtocolErrorHandler","errorCaught(context:error:)"],"f":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["error",1],[": ",17],["Error",18,488],[")",17]],"s":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["error",1],[": ",17],["Error",18],[")",17]],"o":360},{"p":["HTTPServerProtocolErrorHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,336],["<",17],["Void",18,487],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"o":366},{"p":["NIOHTTPServerRequestAggregator","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":359},{"p":["NIOHTTPServerRequestAggregator","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":328},{"p":["NIOHTTPClientResponseAggregator","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[", ",17],["data",1],[": ",17],["NIOAny",18,372],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]],"o":359},{"p":["NIOHTTPClientResponseAggregator","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,345],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]],"o":328},{"p":["HTTPHeaders","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["HTTPHeaders",18,15],[", ",17],["rhs",2],[": ",17],["HTTPHeaders",18,15],[") -> ",17],["Bool",18,435]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["HTTPHeaders",18],[", ",17],["HTTPHeaders",18],[") -> ",17],["Bool",18]],"o":400},{"p":["HTTPHeaders","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[", ",17],["rhs",2],[": ",17],["HTTPHeaders",18,15],[".",17],["Index",18,16],[") -> ",17],["Bool",18,435]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["HTTPHeaders",18],[".",17],["Index",18],[", ",17],["HTTPHeaders",18],[".",17],["Index",18],[") -> ",17],["Bool",18]],"o":390},{"p":["HTTPRequestHead","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["HTTPRequestHead",18,18],[", ",17],["rhs",2],[": ",17],["HTTPRequestHead",18,18],[") -> ",17],["Bool",18,435]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["HTTPRequestHead",18],[", ",17],["HTTPRequestHead",18],[") -> ",17],["Bool",18]],"o":400},{"p":["HTTPResponseHead","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["HTTPResponseHead",18,19],[", ",17],["rhs",2],[": ",17],["HTTPResponseHead",18,19],[") -> ",17],["Bool",18,435]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["HTTPResponseHead",18],[", ",17],["HTTPResponseHead",18],[") -> ",17],["Bool",18]],"o":400},{"p":["HTTPDecoder","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["In",18]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"g":[["In",0,0],["Out",1,0]],"o":338},{"p":["HTTPDecoder","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["Out",18]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"e":[["In",2,"HTTPPart<HTTPResponseHead, ByteBuffer>",14],["Out",2,"HTTPPart<HTTPRequestHead, IOData>",14]],"c":[["In",2,"HTTPPart<HTTPResponseHead, ByteBuffer>",14],["Out",2,"HTTPPart<HTTPRequestHead, IOData>",14]],"g":[["In",0,0],["Out",1,0]],"o":369},{"p":["HTTPHeaders","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = (name",17],[": ",17],["String",18,402],[", value",17],[": ",17],["String",18,402],[")",17]],"s":[["typealias",12],[" ",17],["Element",7]],"o":408},{"p":["HTTPRequestDecoder"],"f":[["typealias",12],[" ",17],["HTTPRequestDecoder",7],[" = ",17],["HTTPDecoder",18,27],["<",17],["HTTPServerRequestPart",18,299],[", ",17],["HTTPServerResponsePart",18,301],[">",17]],"s":[["typealias",12],[" ",17],["HTTPRequestDecoder",7]],"d":"A `ByteToMessageDecoder` used to decode HTTP requests. See the documentation\non `HTTPDecoder` for more.\n\nWhile the `HTTPRequestDecoder` does not currently have a specific ordering requirement in the\n`ChannelPipeline` (unlike `HTTPResponseDecoder`), it is possible that it will develop one. For\nthat reason, applications should try to ensure that the `HTTPRequestDecoder` *later* in the\n`ChannelPipeline` than the `HTTPResponseEncoder`.\n\nRather than set this up manually, consider using `ChannelPipeline.configureHTTPServerPipeline`."},{"p":["HTTPRequestEncoder","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["HTTPClientRequestPart",18,298]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":356},{"p":["HTTPRequestEncoder","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["IOData",18,371]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["HTTPResponseDecoder"],"f":[["typealias",12],[" ",17],["HTTPResponseDecoder",7],[" = ",17],["HTTPDecoder",18,27],["<",17],["HTTPClientResponsePart",18,300],[", ",17],["HTTPClientRequestPart",18,298],[">",17]],"s":[["typealias",12],[" ",17],["HTTPResponseDecoder",7]],"d":"A `ByteToMessageDecoder` used to decode HTTP/1.x responses. See the documentation\non `HTTPDecoder` for more.\n\nThe `HTTPResponseDecoder` must be placed later in the channel pipeline than the `HTTPRequestEncoder`,\nas it needs to see the outbound messages in order to keep track of what the HTTP request methods\nwere for accurate decoding.\n\nRather than set this up manually, consider using `ChannelPipeline.addHTTPClientHandlers`."},{"p":["HTTPResponseEncoder","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":356},{"p":["HTTPResponseEncoder","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["IOData",18,371]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["HTTPClientRequestPart"],"f":[["typealias",12],[" ",17],["HTTPClientRequestPart",7],[" = ",17],["HTTPPart",18,14],["<",17],["HTTPRequestHead",18,18],[", ",17],["IOData",18,371],[">",17]],"s":[["typealias",12],[" ",17],["HTTPClientRequestPart",7]],"d":"The components of a HTTP request from the view of a HTTP client."},{"p":["HTTPServerRequestPart"],"f":[["typealias",12],[" ",17],["HTTPServerRequestPart",7],[" = ",17],["HTTPPart",18,14],["<",17],["HTTPRequestHead",18,18],[", ",17],["ByteBuffer",18,325],[">",17]],"s":[["typealias",12],[" ",17],["HTTPServerRequestPart",7]],"d":"The components of a HTTP request from the view of a HTTP server."},{"p":["HTTPClientResponsePart"],"f":[["typealias",12],[" ",17],["HTTPClientResponsePart",7],[" = ",17],["HTTPPart",18,14],["<",17],["HTTPResponseHead",18,19],[", ",17],["ByteBuffer",18,325],[">",17]],"s":[["typealias",12],[" ",17],["HTTPClientResponsePart",7]],"d":"The components of a HTTP response from the view of a HTTP client."},{"p":["HTTPServerResponsePart"],"f":[["typealias",12],[" ",17],["HTTPServerResponsePart",7],[" = ",17],["HTTPPart",18,14],["<",17],["HTTPResponseHead",18,19],[", ",17],["IOData",18,371],[">",17]],"s":[["typealias",12],[" ",17],["HTTPServerResponsePart",7]],"d":"The components of a HTTP response from the view of a HTTP server."},{"p":["HTTPServerUpgradeHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["HTTPServerUpgradeHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["HTTPServerUpgradeHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["HTTPUpgradeConfiguration"],"f":[["typealias",12],[" ",17],["HTTPUpgradeConfiguration",7],[" = ",17],["NIOHTTPServerUpgradeConfiguration",18,324]],"s":[["typealias",12],[" ",17],["HTTPUpgradeConfiguration",7]],"a":{"a":{"d":true,"r":"NIOHTTPServerUpgradeConfiguration"}},"d":"Configuration required to configure a HTTP server pipeline for upgrade.\n\nSee the documentation for `HTTPServerUpgradeHandler` for details on these\nproperties."},{"p":["HTTPServerPipelineHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["HTTPServerPipelineHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":356},{"p":["HTTPServerPipelineHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["HTTPServerPipelineHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["NIOHTTPClientUpgradeHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["HTTPClientResponsePart",18,300]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["NIOHTTPClientUpgradeHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["HTTPClientRequestPart",18,298]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":356},{"p":["NIOHTTPClientUpgradeHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["HTTPClientRequestPart",18,298]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["NIOHTTPClientUpgradeHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPClientResponsePart",18,300]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["HTTPServerProtocolErrorHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["HTTPServerProtocolErrorHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundIn",7]],"o":356},{"p":["HTTPServerProtocolErrorHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["HTTPServerProtocolErrorHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["NIOHTTPServerRequestAggregator","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["NIOHTTPServerRequestFull",18,21]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["NIOHTTPServerRequestAggregator","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["HTTPServerResponsePart",18,301]],"s":[["typealias",12],[" ",17],["OutboundOut",7]],"o":367},{"p":["NIOHTTPServerRequestAggregator","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPServerRequestPart",18,299]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["NIOHTTPClientResponseAggregator","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["NIOHTTPClientResponseFull",18,22]],"s":[["typealias",12],[" ",17],["InboundOut",7]],"o":351},{"p":["NIOHTTPClientResponseAggregator","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["HTTPClientResponsePart",18,300]],"s":[["typealias",12],[" ",17],["InboundIn",7]],"o":350},{"p":["NIOHTTPClientUpgradeConfiguration"],"f":[["typealias",12],[" ",17],["NIOHTTPClientUpgradeConfiguration",7],[" = (upgraders",17],[": [",17],["NIOHTTPClientProtocolUpgrader",18,6],["], completionHandler",17],[": (",17],["ChannelHandlerContext",18,345],[") -> ",17],["Void",18,487],[")",17]],"s":[["typealias",12],[" ",17],["NIOHTTPClientUpgradeConfiguration",7]],"d":"Configuration required to configure a HTTP client pipeline for upgrade.\n\nSee the documentation for `HTTPClientUpgradeHandler` for details on these\nproperties."},{"p":["NIOHTTPServerUpgradeConfiguration"],"f":[["typealias",12],[" ",17],["NIOHTTPServerUpgradeConfiguration",7],[" = (upgraders",17],[": [",17],["HTTPServerProtocolUpgrader",18,5],["], completionHandler",17],[": (",17],["ChannelHandlerContext",18,345],[") -> ",17],["Void",18,487],[")",17]],"s":[["typealias",12],[" ",17],["NIOHTTPServerUpgradeConfiguration",7]]}],"edges":{"conformer":[7,399,[],7,432,[],7,489,[],8,374,[],8,399,[],8,489,[],9,374,[],9,399,[],9,483,[],9,488,[],9,489,[],10,374,[],10,399,[],10,489,[],11,374,[],11,399,[],11,488,[],11,489,[],12,489,[],13,374,[],13,399,[],13,489,[],14,399,[["HeadT",1,"Equatable",399],["BodyT",1,"Equatable",399]],14,489,[["HeadT",1,"Equatable",399],["HeadT",1,"Sendable",489],["BodyT",1,"Equatable",399],["BodyT",1,"Sendable",489]],15,375,[],15,399,[],15,403,[],15,437,[],15,441,[],15,480,[],15,485,[],15,489,[],16,389,[],16,399,[],17,399,[],17,480,[],17,489,[],18,399,[],18,480,[],18,489,[],19,399,[],19,480,[],19,489,[],20,374,[],20,399,[],20,483,[],20,488,[],20,489,[],21,399,[],21,489,[],22,399,[],22,489,[],23,374,[],23,399,[],23,480,[],23,488,[],23,489,[],24,399,[],24,488,[],24,489,[],25,374,[],25,399,[],25,489,[],26,374,[],26,399,[],26,489,[],27,337,[],27,368,[["In",2,"HTTPPart<HTTPResponseHead, ByteBuffer>",14],["Out",2,"HTTPPart<HTTPRequestHead, IOData>",14]],27,489,[],28,327,[],28,354,[],28,362,[],28,489,[],29,327,[],29,354,[],29,362,[],29,489,[],30,327,[],30,347,[],30,362,[],30,489,[],31,327,[],31,347,[],31,354,[],31,362,[],31,489,[],32,327,[],32,347,[],32,354,[],32,362,[],32,489,[],33,327,[],33,347,[],33,354,[],33,362,[],33,489,[],34,327,[],34,347,[],34,362,[],34,489,[],35,327,[],35,347,[],35,362,[],35,489,[]],"feature":[330,28,330,29,330,30,330,31,330,32,330,33,331,28,331,29,331,30,331,32,331,33,331,34,331,35,343,27,344,27,352,30,352,31,352,32,352,33,352,34,352,35,353,30,353,31,353,32,353,33,353,34,353,35,357,28,357,29,357,31,357,32,357,33,364,28,364,29,364,31,364,32,364,33,364,34,364,35,376,15,377,15,379,15,380,15,381,15,382,15,383,15,384,15,385,15,386,15,387,15,388,15,391,16,392,16,393,16,394,16,395,16,396,16,397,16,398,16,401,7,401,8,401,9,401,10,401,11,401,13,401,14,401,15,401,16,401,17,401,18,401,19,401,20,401,21,401,22,401,23,401,24,401,25,401,26,404,15,405,15,406,15,409,15,410,15,411,15,412,15,413,15,414,15,415,15,416,15,417,15,418,15,419,15,420,15,421,15,422,15,423,15,424,15,425,15,426,15,427,15,428,15,429,15,430,15,431,15,440,15,443,15,444,15,445,15,446,15,447,15,448,15,449,15,450,15,453,15,454,15,455,15,456,15,457,15,458,15,459,15,460,15,461,15,462,15,463,15,464,15,465,15,466,15,467,15,468,15,469,15,470,15,471,15,472,15,473,15,474,15,475,15,476,15,482,15,482,17,482,18,482,19,482,23],"member":[0,333,1,333,2,332,3,332,4,332,16,15,36,7,37,7,38,7,39,7,40,7,41,7,42,7,43,7,44,7,45,7,46,7,47,7,48,7,49,7,50,7,51,7,52,7,53,7,54,7,55,7,56,7,57,7,58,7,59,7,60,7,61,7,62,7,63,7,64,7,65,7,66,7,67,7,68,7,69,7,70,7,71,8,72,8,73,9,74,9,75,9,76,9,77,9,78,9,79,9,80,9,81,9,82,9,83,9,84,9,85,9,86,9,87,9,88,9,89,9,90,9,91,9,92,9,93,9,94,9,95,9,96,9,97,10,98,10,99,10,100,10,101,10,102,10,103,10,104,10,105,10,106,10,107,10,108,10,109,10,110,10,111,10,112,10,113,10,114,10,115,10,116,10,117,10,118,10,119,10,120,10,121,10,122,10,123,10,124,10,125,10,126,10,127,10,128,10,129,10,130,10,131,10,132,10,133,10,134,10,135,10,136,10,137,10,138,10,139,10,140,10,141,10,142,10,143,10,144,10,145,10,146,10,147,10,148,10,149,10,150,10,151,10,152,10,153,10,154,10,155,10,156,10,157,10,158,11,159,12,160,13,161,13,162,13,163,14,164,14,165,14,166,7,167,27,168,27,169,15,170,15,171,17,172,18,173,18,174,19,175,28,176,10,177,29,178,30,179,21,180,31,181,22,182,32,183,33,184,34,185,35,186,15,187,15,188,15,189,17,190,17,191,17,192,17,193,17,194,20,195,23,196,23,197,23,198,23,199,23,200,23,201,23,202,23,203,24,204,24,205,24,206,24,207,24,208,24,209,25,210,25,211,26,212,26,213,7,214,15,215,15,216,15,217,15,218,17,219,17,220,17,221,9,222,18,223,18,224,18,225,18,226,18,227,18,228,19,229,19,230,19,231,19,232,19,233,10,234,10,235,10,236,20,237,21,238,21,239,22,240,22,241,23,246,27,247,27,248,27,249,27,250,27,251,15,252,15,253,15,254,15,255,15,256,15,257,15,258,15,259,15,260,15,261,28,262,29,263,30,264,30,265,31,266,31,267,31,268,31,269,31,270,31,271,31,274,32,275,32,279,33,280,33,281,34,282,34,283,35,284,35,285,15,286,16,287,18,288,19,289,27,290,27,291,15,293,28,294,28,296,29,297,29,302,30,303,30,304,30,306,31,307,31,308,31,309,31,310,32,311,32,312,32,313,32,314,33,315,33,316,33,317,33,318,34,319,34,320,34,321,35,322,35],"requirement":[242,5,243,5,244,6,245,6,272,5,273,5,276,6,277,6,278,6]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPDecoder.swift","symbols":[431,17,295,442,17,292,444,12,8,445,9,71,446,9,72,450,21,290,452,16,250,466,19,27,467,21,289,493,23,168,504,11,167,637,16,247,642,16,248,669,16,249,676,16,246,705,12,13,707,9,160,709,9,162,711,9,161,715,14,26,727,22,211,730,22,212,878,14,20,889,22,194,897,15,236]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPEncoder.swift","symbols":[134,19,28,135,21,293,136,21,294,140,11,175,142,16,261,177,19,29,178,21,296,179,21,297,183,11,177,185,16,262]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPPipelineSetup.swift","symbols":[21,17,323,35,17,305,38,17,324,51,16,4,71,16,3,153,16,2,245,16,1,346,16,0]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPServerPipelineHandler.swift","symbols":[52,19,31,53,21,309,54,21,306,55,21,307,56,21,308,58,11,180,174,16,265,244,16,269,276,16,266,288,16,271,346,16,270,360,16,267,402,16,268]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPServerProtocolErrorHandler.swift","symbols":[22,19,33,23,21,317,24,21,314,25,21,315,26,21,316,30,11,183,32,16,279,56,16,280]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPServerUpgradeHandler.swift","symbols":[16,12,11,17,9,158,21,12,12,25,9,159,31,16,5,33,8,242,38,8,243,43,9,272,48,9,273,60,19,30,61,21,304,62,21,302,63,21,303,97,23,178,143,16,264,176,16,263]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/HTTPTypes.swift","symbols":[37,14,18,58,15,226,61,15,225,72,15,224,83,15,227,100,11,172,110,11,173,114,23,287,135,12,14,136,9,165,137,9,164,138,9,163,148,17,298,151,17,299,154,17,300,157,17,301,162,15,223,170,15,229,176,14,19,193,15,231,196,15,230,207,15,232,222,11,174,227,23,288,300,14,15,305,15,215,327,11,170,337,11,169,350,25,255,367,25,254,377,25,253,397,25,251,410,25,259,434,11,188,454,16,256,467,16,260,483,11,186,502,15,216,509,25,252,532,21,291,534,18,16,536,27,286,541,15,214,545,15,217,549,16,258,553,16,257,557,11,187,595,23,285,615,12,7,622,9,40,623,9,41,624,9,39,625,9,45,626,9,49,627,9,44,628,9,47,629,9,48,630,9,43,631,9,46,632,9,52,633,9,54,634,9,51,635,9,50,636,9,53,637,9,56,638,9,59,639,9,63,640,9,57,641,9,61,642,9,58,643,9,55,644,9,62,645,9,64,646,9,65,647,9,66,648,9,68,649,9,67,650,9,69,651,9,70,652,9,37,653,9,36,654,9,38,655,9,60,656,9,42,674,14,17,679,11,171,688,15,219,698,15,220,708,22,190,711,22,189,714,22,193,717,22,192,720,22,191,724,15,221,779,12,9,780,9,93,781,9,85,783,9,83,784,9,80,785,9,86,786,9,81,787,9,79,788,9,78,789,9,73,790,9,75,791,9,77,792,9,76,793,9,89,794,9,84,795,9,74,796,9,88,797,9,91,798,9,94,799,9,87,800,9,82,801,9,92,802,9,90,803,9,95,804,9,96,809,15,235,939,15,233,1070,12,10,1073,9,145,1078,9,151,1079,9,128,1080,9,100,1084,9,142,1085,9,148,1086,9,149,1087,9,138,1088,9,157,1089,9,105,1090,9,111,1091,9,97,1092,9,113,1093,9,146,1096,9,114,1097,9,121,1098,9,144,1099,9,153,1100,9,103,1101,9,154,1102,9,124,1103,9,123,1106,9,99,1107,9,106,1108,9,116,1109,9,155,1110,9,152,1111,9,120,1112,9,107,1113,9,139,1114,9,112,1115,9,150,1116,9,143,1117,9,109,1118,9,126,1119,9,115,1120,9,101,1121,9,134,1122,9,131,1123,9,122,1124,9,156,1125,9,125,1126,9,132,1127,9,147,1128,9,119,1129,9,118,1130,9,133,1131,9,117,1132,9,140,1133,9,137,1136,9,130,1137,9,110,1138,9,98,1139,9,127,1140,9,108,1141,9,136,1142,9,135,1143,9,129,1144,9,104,1145,9,102,1146,9,141,1149,15,234,1167,11,176,1300,15,222,1306,15,228,1312,15,218,1318,15,213,1393,11,166]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/NIOHTTPClientUpgradeHandler.swift","symbols":[16,14,23,36,22,201,37,22,200,38,22,195,39,22,199,40,22,198,41,22,197,42,22,202,43,22,196,47,15,241,55,16,6,58,8,244,63,8,245,66,9,278,69,9,276,74,9,277,86,19,32,88,21,311,89,21,312,91,21,313,92,21,310,124,23,182,164,16,275,230,16,274]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.41.0/.build/checkouts/swift-nio/Sources/NIOHTTP1/NIOHTTPObjectAggregator.swift","symbols":[19,14,21,20,15,238,21,15,237,23,11,179,35,14,22,36,15,240,37,15,239,39,11,181,47,14,24,63,22,203,64,22,204,65,22,205,66,22,208,67,22,207,68,22,206,71,14,25,83,22,210,84,22,209,180,19,34,181,21,320,182,21,318,185,21,319,193,11,184,200,16,281,298,16,282,323,19,35,324,21,322,325,21,321,332,11,185,338,16,283,400,16,284]}]}