{"culture":"Atomics","dependencies":[],"extensions":[],"partitions":[{"namespace":"Atomics","communities":[{"community":"protocol","startIndex":0,"endIndex":5},{"community":"associatedtype","startIndex":5,"endIndex":8},{"community":"struct","startIndex":8,"endIndex":15},{"community":"class","startIndex":15,"endIndex":17},{"community":"init","startIndex":17,"endIndex":24},{"community":"type.property","startIndex":24,"endIndex":35},{"community":"property","startIndex":35,"endIndex":38},{"community":"type.method","startIndex":38,"endIndex":57},{"community":"method","startIndex":57,"endIndex":117},{"community":"type.op","startIndex":117,"endIndex":120},{"community":"func","startIndex":120,"endIndex":121},{"community":"typealias","startIndex":121,"endIndex":125}]},{"namespace":"_AtomicsShims","communities":[{"community":"init","startIndex":125,"endIndex":127},{"community":"property","startIndex":127,"endIndex":132},{"community":"method","startIndex":132,"endIndex":133},{"community":"type.op","startIndex":133,"endIndex":134}]},{"namespace":"Swift","communities":[{"community":"struct","startIndex":134,"endIndex":155},{"community":"init","startIndex":155,"endIndex":176},{"community":"type.method","startIndex":176,"endIndex":355},{"community":"method","startIndex":355,"endIndex":376},{"community":"typealias","startIndex":376,"endIndex":399}]}],"identifiers":["s7Atomics11AtomicValueP","s7Atomics13AtomicIntegerP","s7Atomics13AtomicStorageP","s7Atomics20AtomicIntegerStorageP","s7Atomics23AtomicOptionalWrappableP","s7Atomics11AtomicValueP0B14RepresentationQa","s7Atomics13AtomicStorageP5ValueQa","s7Atomics23AtomicOptionalWrappableP0bC14RepresentationQa","s7Atomics12UnsafeAtomicV","s7Atomics18AtomicLoadOrderingV","s7Atomics19AtomicStoreOrderingV","s7Atomics20AtomicUpdateOrderingV","s7Atomics25UnsafeAtomicLazyReferenceV","s7Atomics25UnsafeAtomicLazyReferenceV7StorageV","s7Atomics29AtomicRawRepresentableStorageV","s7Atomics13ManagedAtomicC","s7Atomics26ManagedAtomicLazyReferenceC","s7Atomics12UnsafeAtomicV2atACyxGSpy0C14RepresentationQzG_tcfc","s7Atomics13AtomicStoragePyx5ValueQzncfc","s7Atomics13ManagedAtomicCyACyxGxcfc","s7Atomics25UnsafeAtomicLazyReferenceV2atACyxGSpyAC7StorageVyx_GG_tcfc","s7Atomics25UnsafeAtomicLazyReferenceV7StorageVAEyx_Gycfc","s7Atomics26ManagedAtomicLazyReferenceCACyxGycfc","s7Atomics29AtomicRawRepresentableStorageVyACyxGxncfc","s7Atomics18AtomicLoadOrderingV22sequentiallyConsistentACvpZ","s7Atomics18AtomicLoadOrderingV7relaxedACvpZ","s7Atomics18AtomicLoadOrderingV9acquiringACvpZ","s7Atomics19AtomicStoreOrderingV22sequentiallyConsistentACvpZ","s7Atomics19AtomicStoreOrderingV7relaxedACvpZ","s7Atomics19AtomicStoreOrderingV9releasingACvpZ","s7Atomics20AtomicUpdateOrderingV21acquiringAndReleasingACvpZ","s7Atomics20AtomicUpdateOrderingV22sequentiallyConsistentACvpZ","s7Atomics20AtomicUpdateOrderingV7relaxedACvpZ","s7Atomics20AtomicUpdateOrderingV9acquiringACvpZ","s7Atomics20AtomicUpdateOrderingV9releasingACvpZ","s7Atomics18AtomicLoadOrderingV11descriptionSSvp","s7Atomics19AtomicStoreOrderingV11descriptionSSvp","s7Atomics20AtomicUpdateOrderingV11descriptionSSvp","s7Atomics12UnsafeAtomicV6createyACyxGxnFZ","s7Atomics13AtomicStorageP10atomicLoad2at8ordering5ValueQzSpyxG_AA0bE8OrderingVtFZ","s7Atomics13AtomicStorageP11atomicStore_2at8orderingy5ValueQzn_SpyxGAA0bE8OrderingVtFZ","s7Atomics13AtomicStorageP14atomicExchange_2at8ordering5ValueQzAHn_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics13AtomicStorageP21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_5ValueQz8originaltAL_ALnSpyxGAA0b6UpdateK0VAA0b4LoadK0VtFZ","s7Atomics13AtomicStorageP21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_5ValueQz8originaltAK_AKnSpyxGAA0B14UpdateOrderingVtFZ","s7Atomics13AtomicStorageP25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_5ValueQz8originaltAL_ALnSpyxGAA0b6UpdateL0VAA0b4LoadL0VtFZ","s7Atomics20AtomicIntegerStorageP23atomicLoadThenBitwiseOr4with2at8ordering5ValueQzAI_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics20AtomicIntegerStorageP24atomicLoadThenBitwiseAnd4with2at8ordering5ValueQzAI_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics20AtomicIntegerStorageP24atomicLoadThenBitwiseXor4with2at8ordering5ValueQzAI_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics20AtomicIntegerStorageP31atomicLoadThenWrappingDecrement2by2at8ordering5ValueQzAI_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics20AtomicIntegerStorageP31atomicLoadThenWrappingIncrement2by2at8ordering5ValueQzAI_SpyxGAA0B14UpdateOrderingVtFZ","s7Atomics25UnsafeAtomicLazyReferenceV6createACyxGyFZ","s7Atomics29AtomicRawRepresentableStorageV10atomicLoad2at8orderingxSpyACyxGG_AA0bG8OrderingVtFZ","s7Atomics29AtomicRawRepresentableStorageV11atomicStore_2at8orderingyx_SpyACyxGGAA0bG8OrderingVtFZ","s7Atomics29AtomicRawRepresentableStorageV14atomicExchange_2at8orderingxx_SpyACyxGGAA0B14UpdateOrderingVtFZ","s7Atomics29AtomicRawRepresentableStorageV21atomicCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_x8originaltx_xSpyACyxGGAA0b6UpdateM0VAA0b4LoadM0VtFZ","s7Atomics29AtomicRawRepresentableStorageV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_x8originaltx_xSpyACyxGGAA0B14UpdateOrderingVtFZ","s7Atomics29AtomicRawRepresentableStorageV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureN0Sb9exchanged_x8originaltx_xSpyACyxGGAA0b6UpdateN0VAA0b4LoadN0VtFZ","s7Atomics12UnsafeAtomicV15compareExchange8expected7desired15successOrdering07failureI0Sb9exchanged_x8originaltx_xnAA0c6UpdateI0VAA0c4LoadI0VtF","s7Atomics12UnsafeAtomicV15compareExchange8expected7desired8orderingSb9exchanged_x8originaltx_xnAA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicV19weakCompareExchange8expected7desired15successOrdering07failureJ0Sb9exchanged_x8originaltx_xnAA0c6UpdateJ0VAA0c4LoadJ0VtF","s7Atomics12UnsafeAtomicV4load8orderingxAA0C12LoadOrderingV_tF","s7Atomics12UnsafeAtomicV5store_8orderingyxn_AA0C13StoreOrderingVtF","s7Atomics12UnsafeAtomicV7destroyxyF","s7Atomics12UnsafeAtomicV8exchange_8orderingxxn_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE17bitwiseOrThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE17loadThenBitwiseOr4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE17wrappingDecrement2by8orderingyx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE17wrappingIncrement2by8orderingyx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE18bitwiseAndThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE18bitwiseXorThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE18loadThenBitwiseAnd4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE18loadThenBitwiseXor4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE25loadThenWrappingDecrement2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE25loadThenWrappingIncrement2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE25wrappingDecrementThenLoad2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVA2A0C7IntegerRzrlE25wrappingIncrementThenLoad2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE17loadThenLogicalOr4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE17logicalOrThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE18loadThenLogicalAnd4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE18loadThenLogicalXor4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE18logicalAndThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics12UnsafeAtomicVAASbRszrlE18logicalXorThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13AtomicStorageP7dispose5ValueQzyF","s7Atomics13ManagedAtomicC15compareExchange8expected7desired15successOrdering07failureI0Sb9exchanged_x8originaltx_xnAA0c6UpdateI0VAA0c4LoadI0VtF","s7Atomics13ManagedAtomicC15compareExchange8expected7desired8orderingSb9exchanged_x8originaltx_xnAA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicC19weakCompareExchange8expected7desired15successOrdering07failureJ0Sb9exchanged_x8originaltx_xnAA0c6UpdateJ0VAA0c4LoadJ0VtF","s7Atomics13ManagedAtomicC4load8orderingxAA0C12LoadOrderingV_tF","s7Atomics13ManagedAtomicC5store_8orderingyxn_AA0C13StoreOrderingVtF","s7Atomics13ManagedAtomicC8exchange_8orderingxxn_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE17bitwiseOrThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE17loadThenBitwiseOr4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE17wrappingDecrement2by8orderingyx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE17wrappingIncrement2by8orderingyx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE18bitwiseAndThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE18bitwiseXorThenLoad4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE18loadThenBitwiseAnd4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE18loadThenBitwiseXor4with8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE25loadThenWrappingDecrement2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE25loadThenWrappingIncrement2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE25wrappingDecrementThenLoad2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCA2A0C7IntegerRzrlE25wrappingIncrementThenLoad2by8orderingxx_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE17loadThenLogicalOr4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE17logicalOrThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE18loadThenLogicalAnd4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE18loadThenLogicalXor4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE18logicalAndThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics13ManagedAtomicCAASbRszrlE18logicalXorThenLoad4with8orderingS2b_AA0C14UpdateOrderingVtF","s7Atomics18AtomicLoadOrderingV4hash4intoys6HasherVz_tF","s7Atomics19AtomicStoreOrderingV4hash4intoys6HasherVz_tF","s7Atomics20AtomicUpdateOrderingV4hash4intoys6HasherVz_tF","s7Atomics25UnsafeAtomicLazyReferenceV18storeIfNilThenLoadyxxnF","s7Atomics25UnsafeAtomicLazyReferenceV4loadxSgyF","s7Atomics25UnsafeAtomicLazyReferenceV7StorageV7disposexSgyF","s7Atomics25UnsafeAtomicLazyReferenceV7destroyxSgyF","s7Atomics26ManagedAtomicLazyReferenceC18storeIfNilThenLoadyxxnF","s7Atomics26ManagedAtomicLazyReferenceC4loadxSgyF","s7Atomics29AtomicRawRepresentableStorageV7disposexyF","s7Atomics18AtomicLoadOrderingV2eeoiySbAC_ACtFZ","s7Atomics19AtomicStoreOrderingV2eeoiySbAC_ACtFZ","s7Atomics20AtomicUpdateOrderingV2eeoiySbAC_ACtFZ","s7Atomics17atomicMemoryFence8orderingyAA20AtomicUpdateOrderingV_tF","s7Atomics10DoubleWorda","s7Atomics12UnsafeAtomicV7Storagea","s7Atomics25UnsafeAtomicLazyReferenceV5Valuea","s7Atomics26ManagedAtomicLazyReferenceC5Valuea","sSo9_sa_dworda7AtomicsE4high3lowABSu_Sutcfc","sSo9_sa_dworda7AtomicsE5first6secondABSu_Sutcfc","sSo9_sa_dworda7AtomicsE11descriptionSSvp","sSo9_sa_dworda7AtomicsE3lowSuvp","sSo9_sa_dworda7AtomicsE4highSuvp","sSo9_sa_dworda7AtomicsE5firstSuvp","sSo9_sa_dworda7AtomicsE6secondSuvp","sSo9_sa_dworda7AtomicsE4hash4intoys6HasherVz_tF","sSo9_sa_dworda7AtomicsE2eeoiySbAB_ABtFZ","sSP7AtomicsE20AtomicRepresentationV","sSP7AtomicsE28AtomicOptionalRepresentationV","sSV7AtomicsE20AtomicRepresentationV","sSV7AtomicsE28AtomicOptionalRepresentationV","sSb7AtomicsE20AtomicRepresentationV","sSi7AtomicsE20AtomicRepresentationV","sSp7AtomicsE20AtomicRepresentationV","sSp7AtomicsE28AtomicOptionalRepresentationV","sSu7AtomicsE20AtomicRepresentationV","sSv7AtomicsE20AtomicRepresentationV","sSv7AtomicsE28AtomicOptionalRepresentationV","ss4Int8V7AtomicsE20AtomicRepresentationV","ss5Int16V7AtomicsE20AtomicRepresentationV","ss5Int32V7AtomicsE20AtomicRepresentationV","ss5Int64V7AtomicsE20AtomicRepresentationV","ss5UInt8V7AtomicsE20AtomicRepresentationV","ss6UInt16V7AtomicsE20AtomicRepresentationV","ss6UInt32V7AtomicsE20AtomicRepresentationV","ss6UInt64V7AtomicsE20AtomicRepresentationV","ss9UnmanagedV7AtomicsE20AtomicRepresentationV","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV","sSP7AtomicsE20AtomicRepresentationVyACyx_GSPyxGcfc","sSP7AtomicsE28AtomicOptionalRepresentationVyACyx_GSPyxGSgcfc","sSV7AtomicsE20AtomicRepresentationVyACSVcfc","sSV7AtomicsE28AtomicOptionalRepresentationVyACSVSgcfc","sSb7AtomicsE20AtomicRepresentationVyACSbcfc","sSi7AtomicsE20AtomicRepresentationVyACSicfc","sSp7AtomicsE20AtomicRepresentationVyACyx_GSpyxGcfc","sSp7AtomicsE28AtomicOptionalRepresentationVyACyx_GSpyxGSgcfc","sSu7AtomicsE20AtomicRepresentationVyACSucfc","sSv7AtomicsE20AtomicRepresentationVyACSvcfc","sSv7AtomicsE28AtomicOptionalRepresentationVyACSvSgcfc","ss4Int8V7AtomicsE20AtomicRepresentationVyAeBcfc","ss5Int16V7AtomicsE20AtomicRepresentationVyAeBcfc","ss5Int32V7AtomicsE20AtomicRepresentationVyAeBcfc","ss5Int64V7AtomicsE20AtomicRepresentationVyAeBcfc","ss5UInt8V7AtomicsE20AtomicRepresentationVyAeBcfc","ss6UInt16V7AtomicsE20AtomicRepresentationVyAeBcfc","ss6UInt32V7AtomicsE20AtomicRepresentationVyAeBcfc","ss6UInt64V7AtomicsE20AtomicRepresentationVyAeBcfc","ss9UnmanagedV7AtomicsE20AtomicRepresentationVyAEyx_GAByxGcfc","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationVyAEyx_GAByxGSgcfc","sSP7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSPyxGSpyACyx_GG_AA0bE8OrderingVtFZ","sSP7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySPyxG_SpyACyx_GGAA0bE8OrderingVtFZ","sSP7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingSPyxGAG_SpyACyx_GGAA0B14UpdateOrderingVtFZ","sSP7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_SPyxG8originaltAK_AKSpyACyx_GGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSP7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SPyxG8originaltAJ_AJSpyACyx_GGAA0B14UpdateOrderingVtFZ","sSP7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SPyxG8originaltAK_AKSpyACyx_GGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV10atomicLoad2at8orderingSPyxGSgSpyACyx_GG_AA0bF8OrderingVtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV11atomicStore_2at8orderingySPyxGSg_SpyACyx_GGAA0bF8OrderingVtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV14atomicExchange_2at8orderingSPyxGSgAH_SpyACyx_GGAA0B14UpdateOrderingVtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SPyxGSg8originaltAL_ALSpyACyx_GGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SPyxGSg8originaltAK_AKSpyACyx_GGAA0B14UpdateOrderingVtFZ","sSP7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_SPyxGSg8originaltAL_ALSpyACyx_GGAA0b6UpdateM0VAA0b4LoadM0VtFZ","sSV7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSVSpyACG_AA0bE8OrderingVtFZ","sSV7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySV_SpyACGAA0bE8OrderingVtFZ","sSV7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingS2V_SpyACGAA0B14UpdateOrderingVtFZ","sSV7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_SV8originaltSV_SVSpyACGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSV7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SV8originaltSV_SVSpyACGAA0B14UpdateOrderingVtFZ","sSV7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SV8originaltSV_SVSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV10atomicLoad2at8orderingSVSgSpyACG_AA0bF8OrderingVtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV11atomicStore_2at8orderingySVSg_SpyACGAA0bF8OrderingVtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV14atomicExchange_2at8orderingSVSgAG_SpyACGAA0B14UpdateOrderingVtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SVSg8originaltAK_AKSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SVSg8originaltAJ_AJSpyACGAA0B14UpdateOrderingVtFZ","sSV7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_SVSg8originaltAK_AKSpyACGAA0b6UpdateM0VAA0b4LoadM0VtFZ","sSb7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSbSpyACG_AA0bE8OrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySbn_SpyACGAA0bE8OrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingS2bn_SpyACGAA0B14UpdateOrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_Sb8originaltSb_SbnSpyACGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSb7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_Sb8originaltSb_SbnSpyACGAA0B14UpdateOrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV23atomicLoadThenLogicalOr4with2at8orderingS2b_SpyACGAA0B14UpdateOrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV24atomicLoadThenLogicalAnd4with2at8orderingS2b_SpyACGAA0B14UpdateOrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV24atomicLoadThenLogicalXor4with2at8orderingS2b_SpyACGAA0B14UpdateOrderingVtFZ","sSb7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_Sb8originaltSb_SbnSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSi7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSiSpyACG_AA0bE8OrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySi_SpyACGAA0bE8OrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_Si8originaltSi_SiSpyACGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSi7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_Si8originaltSi_SiSpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_Si8originaltSi_SiSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSi7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSi7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingS2i_SpyACGAA0B14UpdateOrderingVtFZ","sSp7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSpyxGSpyACyx_GG_AA0bE8OrderingVtFZ","sSp7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySpyxG_SpyACyx_GGAA0bE8OrderingVtFZ","sSp7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingSpyxGAG_SpyACyx_GGAA0B14UpdateOrderingVtFZ","sSp7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_SpyxG8originaltAK_AKSpyACyx_GGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSp7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SpyxG8originaltAJ_AJSpyACyx_GGAA0B14UpdateOrderingVtFZ","sSp7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SpyxG8originaltAK_AKSpyACyx_GGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV10atomicLoad2at8orderingSpyxGSgSpyACyx_GG_AA0bF8OrderingVtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV11atomicStore_2at8orderingySpyxGSg_SpyACyx_GGAA0bF8OrderingVtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV14atomicExchange_2at8orderingSpyxGSgAH_SpyACyx_GGAA0B14UpdateOrderingVtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SpyxGSg8originaltAL_ALSpyACyx_GGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SpyxGSg8originaltAK_AKSpyACyx_GGAA0B14UpdateOrderingVtFZ","sSp7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_SpyxGSg8originaltAL_ALSpyACyx_GGAA0b6UpdateM0VAA0b4LoadM0VtFZ","sSu7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSuSpyACG_AA0bE8OrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySu_SpyACGAA0bE8OrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_Su8originaltSu_SuSpyACGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSu7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_Su8originaltSu_SuSpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_Su8originaltSu_SuSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSu7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSu7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingS2u_SpyACGAA0B14UpdateOrderingVtFZ","sSv7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingSvSpyACG_AA0bE8OrderingVtFZ","sSv7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingySv_SpyACGAA0bE8OrderingVtFZ","sSv7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingS2v_SpyACGAA0B14UpdateOrderingVtFZ","sSv7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureK0Sb9exchanged_Sv8originaltSv_SvSpyACGAA0b6UpdateK0VAA0b4LoadK0VtFZ","sSv7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_Sv8originaltSv_SvSpyACGAA0B14UpdateOrderingVtFZ","sSv7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_Sv8originaltSv_SvSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV10atomicLoad2at8orderingSvSgSpyACG_AA0bF8OrderingVtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV11atomicStore_2at8orderingySvSg_SpyACGAA0bF8OrderingVtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV14atomicExchange_2at8orderingSvSgAG_SpyACGAA0B14UpdateOrderingVtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_SvSg8originaltAK_AKSpyACGAA0b6UpdateL0VAA0b4LoadL0VtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_SvSg8originaltAJ_AJSpyACGAA0B14UpdateOrderingVtFZ","sSv7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_SvSg8originaltAK_AKSpyACGAA0b6UpdateM0VAA0b4LoadM0VtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss4Int8V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int16V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int32V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5Int64V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss5UInt8V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt16V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt32V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingABSpyAEG_AC0cF8OrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAB_SpyAEGAC0cF8OrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AB8originaltAB_ABSpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV23atomicLoadThenBitwiseOr4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseAnd4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV24atomicLoadThenBitwiseXor4with2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AB8originaltAB_ABSpyAEGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingDecrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss6UInt64V7AtomicsE20AtomicRepresentationV31atomicLoadThenWrappingIncrement2by2at8orderingA2B_SpyAEGAC0C14UpdateOrderingVtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV10atomicLoad2at8orderingAByxGSpyAEyx_GG_AC0cF8OrderingVtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV11atomicStore_2at8orderingyAByxG_SpyAEyx_GGAC0cF8OrderingVtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV14atomicExchange_2at8orderingAByxGAI_SpyAEyx_GGAC0C14UpdateOrderingVtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureL0Sb9exchanged_AByxG8originaltAM_AMSpyAEyx_GGAC0c6UpdateL0VAC0c4LoadL0VtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AByxG8originaltAL_ALSpyAEyx_GGAC0C14UpdateOrderingVtFZ","ss9UnmanagedV7AtomicsE20AtomicRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AByxG8originaltAM_AMSpyAEyx_GGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV10atomicLoad2at8orderingAByxGSgSpyAEyx_GG_AC0cG8OrderingVtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV11atomicStore_2at8orderingyAByxGSg_SpyAEyx_GGAC0cG8OrderingVtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV14atomicExchange_2at8orderingAByxGSgAJ_SpyAEyx_GGAC0C14UpdateOrderingVtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at15successOrdering07failureM0Sb9exchanged_AByxGSg8originaltAN_ANSpyAEyx_GGAC0c6UpdateM0VAC0c4LoadM0VtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV21atomicCompareExchange8expected7desired2at8orderingSb9exchanged_AByxGSg8originaltAM_AMSpyAEyx_GGAC0C14UpdateOrderingVtFZ","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureN0Sb9exchanged_AByxGSg8originaltAN_ANSpyAEyx_GGAC0c6UpdateN0VAC0c4LoadN0VtFZ","sSP7AtomicsE20AtomicRepresentationV7disposeSPyxGyF","sSP7AtomicsE28AtomicOptionalRepresentationV7disposeSPyxGSgyF","sSV7AtomicsE20AtomicRepresentationV7disposeSVyF","sSV7AtomicsE28AtomicOptionalRepresentationV7disposeSVSgyF","sSb7AtomicsE20AtomicRepresentationV7disposeSbyF","sSi7AtomicsE20AtomicRepresentationV7disposeSiyF","sSp7AtomicsE20AtomicRepresentationV7disposeSpyxGyF","sSp7AtomicsE28AtomicOptionalRepresentationV7disposeSpyxGSgyF","sSu7AtomicsE20AtomicRepresentationV7disposeSuyF","sSv7AtomicsE20AtomicRepresentationV7disposeSvyF","sSv7AtomicsE28AtomicOptionalRepresentationV7disposeSvSgyF","ss4Int8V7AtomicsE20AtomicRepresentationV7disposeAByF","ss5Int16V7AtomicsE20AtomicRepresentationV7disposeAByF","ss5Int32V7AtomicsE20AtomicRepresentationV7disposeAByF","ss5Int64V7AtomicsE20AtomicRepresentationV7disposeAByF","ss5UInt8V7AtomicsE20AtomicRepresentationV7disposeAByF","ss6UInt16V7AtomicsE20AtomicRepresentationV7disposeAByF","ss6UInt32V7AtomicsE20AtomicRepresentationV7disposeAByF","ss6UInt64V7AtomicsE20AtomicRepresentationV7disposeAByF","ss9UnmanagedV7AtomicsE20AtomicRepresentationV7disposeAByxGyF","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV7disposeAByxGSgyF","sSP7AtomicsE20AtomicRepresentationV5Valuea","sSP7AtomicsE28AtomicOptionalRepresentationV5Valuea","sSV7AtomicsE20AtomicRepresentationV5Valuea","sSV7AtomicsE28AtomicOptionalRepresentationV5Valuea","sSY7AtomicsAA11AtomicValueRzAaB03RawC0SYRpzrlE0B14Representationa","sSb7AtomicsE20AtomicRepresentationV5Valuea","sSi7AtomicsE20AtomicRepresentationV5Valuea","sSp7AtomicsE20AtomicRepresentationV5Valuea","sSp7AtomicsE28AtomicOptionalRepresentationV5Valuea","sSq7AtomicsAA23AtomicOptionalWrappableRzlE0B14Representationa","sSu7AtomicsE20AtomicRepresentationV5Valuea","sSv7AtomicsE20AtomicRepresentationV5Valuea","sSv7AtomicsE28AtomicOptionalRepresentationV5Valuea","ss4Int8V7AtomicsE20AtomicRepresentationV5Valuea","ss5Int16V7AtomicsE20AtomicRepresentationV5Valuea","ss5Int32V7AtomicsE20AtomicRepresentationV5Valuea","ss5Int64V7AtomicsE20AtomicRepresentationV5Valuea","ss5UInt8V7AtomicsE20AtomicRepresentationV5Valuea","ss6UInt16V7AtomicsE20AtomicRepresentationV5Valuea","ss6UInt32V7AtomicsE20AtomicRepresentationV5Valuea","ss6UInt64V7AtomicsE20AtomicRepresentationV5Valuea","ss9UnmanagedV7AtomicsE20AtomicRepresentationV5Valuea","ss9UnmanagedV7AtomicsE28AtomicOptionalRepresentationV5Valuea","c@SA@_sa_dword","sSH","sSH4hash4intoys6HasherVz_tF","sSL","sSL1goiySbx_xtFZ","sSL1loiySbx_xtFZ","sSL2geoiySbx_xtFZ","sSL2leoiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSP","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSUsE8isSignedSbvpZ","sSUsE9magnitudexvp","sSUss17FixedWidthIntegerRzrlE3maxxvpZ","sSUss17FixedWidthIntegerRzrlE3minxvpZ","sSUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc","sSUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc","sSV","sSY","sSZsE8isSignedSbvpZ","sSZss17FixedWidthIntegerRzrlE10isMultiple2ofSbx_tF","sSZss17FixedWidthIntegerRzrlE3maxxvpZ","sSZss17FixedWidthIntegerRzrlE3minxvpZ","sSZss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc","sSZss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc","sSb","sSi","sSj","sSp","sSq","sSu","sSv","sSx","sSxsE1loiySbx_xtFZ","sSxsE2eeoiySbx_xtFZ","sSxss8_PointerRzrlE1poiyx6StrideQz_xtFZ","sSxss8_PointerRzrlE1poiyxx_6StrideQztFZ","sSxss8_PointerRzrlE1soiy6StrideQzx_xtFZ","sSxss8_PointerRzrlE1soiyxx_6StrideQztFZ","sSxss8_PointerRzrlE2peoiyyxz_6StrideQztFZ","sSxss8_PointerRzrlE2seoiyyxz_6StrideQztFZ","sSz","sSz10isMultiple2ofSbx_tF","sSz12_RegexParserE9assertingxqd___tcSzRd__lufc","sSz3ggeoiyyxz_qd__tSzRd__lFZ","sSz3lleoiyyxz_qd__tSzRd__lFZ","sSzsE10isMultiple2ofSbx_tF","sSzsE11descriptionSSvp","sSzsE1aoiyxx_xtFZ","sSzsE1goiySbx_qd__tSzRd__lFZ","sSzsE1goiySbx_xtFZ","sSzsE1loiySbx_qd__tSzRd__lFZ","sSzsE1ooiyxx_xtFZ","sSzsE1xoiyxx_xtFZ","sSzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF","sSzsE2eeoiySbx_qd__tSzRd__lFZ","sSzsE2geoiySbx_qd__tSzRd__lFZ","sSzsE2geoiySbx_xtFZ","sSzsE2ggoiyxx_qd__tSzRd__lFZ","sSzsE2leoiySbx_qd__tSzRd__lFZ","sSzsE2leoiySbx_xtFZ","sSzsE2lloiyxx_qd__tSzRd__lFZ","sSzsE2neoiySbx_qd__tSzRd__lFZ","sSzsE2neoiySbx_xtFZ","sSzsE8advanced2byxSi_tF","sSzsE8distance2toSix_tF","sSzsExycfc","ss13SignedNumericPsE1sopyxxFZ","ss13SignedNumericPsE6negateyyF","ss17CustomReflectableP12customMirrors0D0Vvp","ss17FixedWidthIntegerP","ss17FixedWidthIntegerPsE03bitB0Sivp","ss17FixedWidthIntegerPsE12littleEndianxvp","ss17FixedWidthIntegerPsE12littleEndianxx_tcfc","ss17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc","ss17FixedWidthIntegerPsE1topyxxFZ","ss17FixedWidthIntegerPsE2amoiyxx_xtFZ","ss17FixedWidthIntegerPsE2apoiyxx_xtFZ","ss17FixedWidthIntegerPsE2asoiyxx_xtFZ","ss17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3aggoiyxx_xtFZ","ss17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3alloiyxx_xtFZ","ss17FixedWidthIntegerPsE3ameoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3apeoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3aseoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ","ss17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ","ss17FixedWidthIntegerPsE6random2inxSNyxG_tFZ","ss17FixedWidthIntegerPsE6random2inxSnyxG_tFZ","ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc","ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc","ss17FixedWidthIntegerPsE9bigEndianxvp","ss17FixedWidthIntegerPsE9bigEndianxx_tcfc","ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc","ss17FixedWidthIntegerPsEyxSgSScfc","ss17FixedWidthIntegerPsEyxqd__cSBRd__lufc","ss18AdditiveArithmeticP","ss18AdditiveArithmeticP2peoiyyxz_xtFZ","ss18AdditiveArithmeticP2seoiyyxz_xtFZ","ss18AdditiveArithmeticPsE1popyxxFZ","ss18AdditiveArithmeticPsE2peoiyyxz_xtFZ","ss18AdditiveArithmeticPsE2seoiyyxz_xtFZ","ss18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25LosslessStringConvertibleP","ss27ExpressibleByIntegerLiteralP","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc","ss27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc","ss4Int8V","ss5Int16V","ss5Int32V","ss5Int64V","ss5UInt8V","ss6HasherV","ss6UInt16V","ss6UInt32V","ss6UInt64V","ss8SendableP","ss8_PointerPsE10bitPatternxSgSi_tcfc","ss8_PointerPsE10bitPatternxSgSu_tcfc","ss8_PointerPsE11predecessorxyF","ss8_PointerPsE12customMirrors0C0Vvp","ss8_PointerPsE16debugDescriptionSSvp","ss8_PointerPsE1goiySbx_qd__tsAARd__lFZ","ss8_PointerPsE1loiySbx_qd__tsAARd__lFZ","ss8_PointerPsE1loiySbx_xtFZ","ss8_PointerPsE2eeoiySbx_qd__tsAARd__lFZ","ss8_PointerPsE2eeoiySbx_xtFZ","ss8_PointerPsE2geoiySbx_qd__tsAARd__lFZ","ss8_PointerPsE2leoiySbx_qd__tsAARd__lFZ","ss8_PointerPsE2neoiySbx_qd__tsAARd__lFZ","ss8_PointerPsE4hash4intoys6HasherVz_tF","ss8_PointerPsE8advanced2byxSi_tF","ss8_PointerPsE8distance2toSix_tF","ss8_PointerPsE9successorxyF","ss8_PointerPsEyxSgACcfc","ss8_PointerPsEyxSgs06OpaqueA0VSgcfc","ss8_PointerPsEyxs06OpaqueA0Vcfc","ss8_PointerPsEyxxcfc","ss9UnmanagedV"],"vertices":[{"p":["AtomicValue"],"f":[["protocol",12],[" ",17],["AtomicValue",7]],"s":[["protocol",12],[" ",17],["AtomicValue",7]],"d":"A type that supports atomic operations through a separate atomic storage\nrepresentation."},{"p":["AtomicInteger"],"f":[["protocol",12],[" ",17],["AtomicInteger",7],[" : ",17],["AtomicValue",18,0],[", ",17],["FixedWidthInteger",18,479],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["AtomicRepresentation",18],[" : ",17],["AtomicIntegerStorage",18,3]],"s":[["protocol",12],[" ",17],["AtomicInteger",7]],"d":"A type that supports atomic integer operations through a separate\natomic storage representation.\n\nAtomic integer types provide a number of additional atomic\noperations beyond the ones supported by `AtomicValue`, such as\natomic increments/decrements as well as atomic bitwise operations.\nThese may be mapped to dedicated instructions that can be more\nefficient than implementations based on the general compare and\nexchange operation; however, this depends on the capabilities of\nthe compiler and the underlying hardware."},{"p":["AtomicStorage"],"f":[["protocol",12],[" ",17],["AtomicStorage",7]],"s":[["protocol",12],[" ",17],["AtomicStorage",7]],"d":"The storage representation for an atomic value, providing pointer-based\natomic operations. This is a low-level implementation detail of atomic\ntypes; instead of directly handling conforming types, it is usually better\nto use the `UnsafeAtomic` or `ManagedAtomic` generics -- these provide more\nconvenient and safer interfaces while also ensuring that the storage is\ncorrectly constructed and destroyed.\n\nLogically, atomic storage representations are neither value- nor reference\ntypes: they should be treated as non-copiable values with a custom\ndestructor. Such constructs cannot currently be modeled directly in Swift,\nso types conforming to this protocol must be handled carefully to prevent\naccidental copying. For example, it usually isn't safe to pass around atomic\nstorage representations as function arguments or return values. Instead,\nthey are usually addressed through unsafe pointers."},{"p":["AtomicIntegerStorage"],"f":[["protocol",12],[" ",17],["AtomicIntegerStorage",7],[" : ",17],["AtomicStorage",18,2]],"s":[["protocol",12],[" ",17],["AtomicIntegerStorage",7]],"d":"The storage representation for an atomic integer value, providing\npointer-based atomic operations.\n\nThis is a low-level implementation detail of atomic types; instead\nof directly handling conforming types, it is usually better to use\nthe `UnsafeAtomic` or `ManagedAtomic` generics -- these provide a\nmore reliable interface while ensuring that the storage is\ncorrectly constructed and destroyed."},{"p":["AtomicOptionalWrappable"],"f":[["protocol",12],[" ",17],["AtomicOptionalWrappable",7],[" : ",17],["AtomicValue",18,0]],"s":[["protocol",12],[" ",17],["AtomicOptionalWrappable",7]],"d":"An atomic value that also supports atomic operations when wrapped\nin an `Optional`. Atomic optional wrappable types come with a\nstandalone atomic representation for their optional-wrapped\nvariants."},{"p":["AtomicValue","AtomicRepresentation"],"f":[["associatedtype",12],[" ",17],["AtomicRepresentation",7],[" : ",17],["AtomicStorage",18,2],[" ",17],["where",12],[" ",17],["Self",18],[" == ",17],["Self",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"s":[["associatedtype",12],[" ",17],["AtomicRepresentation",7],[" : ",17],["AtomicStorage",18]]},{"p":["AtomicStorage","Value"],"f":[["associatedtype",12],[" ",17],["Value",7]],"s":[["associatedtype",12],[" ",17],["Value",7]],"d":"The type whose values this storage representation is representing."},{"p":["AtomicOptionalWrappable","AtomicOptionalRepresentation"],"f":[["associatedtype",12],[" ",17],["AtomicOptionalRepresentation",7],[" : ",17],["AtomicStorage",18,2],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[" == ",17],["Self",18],["?",17]],"s":[["associatedtype",12],[" ",17],["AtomicOptionalRepresentation",7],[" : ",17],["AtomicStorage",18]],"d":"The atomic storage representation for `Optional<Self>`."},{"p":["UnsafeAtomic"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["UnsafeAtomic",7],["<",17],["Value",0],["> ",17],["where",12],[" ",17],["Value",18],[" : ",17],["AtomicValue",18,0]],"s":[["struct",12],[" ",17],["UnsafeAtomic",7]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"An unsafe reference type holding an atomic value, requiring manual memory\nmanagement of the underlying storage representation."},{"p":["AtomicLoadOrdering"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicLoadOrdering",7]],"s":[["struct",12],[" ",17],["AtomicLoadOrdering",7]],"d":"Specifies the memory ordering semantics of an atomic load operation."},{"p":["AtomicStoreOrdering"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicStoreOrdering",7]],"s":[["struct",12],[" ",17],["AtomicStoreOrdering",7]],"d":"Specifies the memory ordering semantics of an atomic store operation."},{"p":["AtomicUpdateOrdering"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicUpdateOrdering",7]],"s":[["struct",12],[" ",17],["AtomicUpdateOrdering",7]],"d":"Specifies the memory ordering semantics of an atomic read-modify-write\noperation."},{"p":["UnsafeAtomicLazyReference"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["UnsafeAtomicLazyReference",7],["<",17],["Instance",0],["> ",17],["where",12],[" ",17],["Instance",18],[" : AnyObject",17]],"s":[["struct",12],[" ",17],["UnsafeAtomicLazyReference",7]],"g":[["Instance",0,0]],"d":"An unsafe reference type holding a lazily initializable atomic\nstrong reference, requiring manual memory management of the\nunderlying storage representation.\n\nThese values can be set (initialized) exactly once, but read many\ntimes."},{"p":["UnsafeAtomicLazyReference","Storage"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Storage",7]],"s":[["struct",12],[" ",17],["Storage",7]],"g":[["Instance",0,0]],"d":"The storage representation for an atomic lazy reference value."},{"p":["AtomicRawRepresentableStorage"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRawRepresentableStorage",7],["<",17],["Value",0],["> ",17],["where",12],[" ",17],["Value",18],[" : ",17],["RawRepresentable",18,427],[", ",17],["Value",18],[".",17],["RawValue",18],[" : ",17],["AtomicValue",18,0]],"s":[["struct",12],[" ",17],["AtomicRawRepresentableStorage",7]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"The default atomic storage representation for an atomic `RawRepresentable`\ntype whose `RawValue` conforms to `AtomicValue`."},{"p":["ManagedAtomic"],"f":[["class",12],[" ",17],["ManagedAtomic",7],["<",17],["Value",0],["> ",17],["where",12],[" ",17],["Value",18],[" : ",17],["AtomicValue",18,0]],"s":[["class",12],[" ",17],["ManagedAtomic",7]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"A reference type holding an atomic value, with automatic memory management."},{"p":["ManagedAtomicLazyReference"],"f":[["class",12],[" ",17],["ManagedAtomicLazyReference",7],["<",17],["Instance",0],["> ",17],["where",12],[" ",17],["Instance",18],[" : AnyObject",17]],"s":[["class",12],[" ",17],["ManagedAtomicLazyReference",7]],"g":[["Instance",0,0]],"d":"A reference type holding a lazily initializable atomic\nstrong reference, with automatic memory management.\n\nThese values can be set (initialized) exactly once, but read many\ntimes."},{"p":["UnsafeAtomic","init(at:)"],"f":[["init",10],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeAtomic",18,8],["<",17],["Value",18],[">.",17],["Storage",18],[">)",17]],"s":[["init",10],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeAtomic",18],["<",17],["Value",18],[">.",17],["Storage",18],[">)",17]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Initialize an unsafe atomic value that uses the supplied memory location\nfor storage. The storage location must already be initialized to\nrepresent a valid atomic value.\n\nAt the end of the lifetime of the atomic value, you must manually ensure\nthat the storage location is correctly `dispose()`d, deinitalized and\ndeallocated.\n\nNote: This is not an atomic operation."},{"p":["AtomicStorage","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"s":[["init",10],["(",17],["Self",18],[".",17],["Value",18],[")",17]],"d":"Encode the supplied value into its atomic storage representation.\n\nNote: This is not an atomic operation. This call may have side effects\n(such as unpaired retains of strong references) that will need to be\nundone by calling `dispose()` before the storage value is deinitialized."},{"p":["ManagedAtomic","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Value",18],[")",17]],"s":[["init",10],["(",17],["Value",18],[")",17]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Initialize a new managed atomic instance holding the specified initial\nvalue."},{"p":["UnsafeAtomicLazyReference","init(at:)"],"f":[["init",10],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeAtomicLazyReference",18,12],["<",17],["Instance",18],[">.",17],["Storage",18,13],[">)",17]],"s":[["init",10],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeAtomicLazyReference",18],["<",17],["Instance",18],[">.",17],["Storage",18],[">)",17]],"g":[["Instance",0,0]],"d":"Initialize an unsafe atomic lazy reference that uses the supplied memory\nlocation for storage. The storage location must already be initialized to\nrepresent a valid atomic value.\n\nAt the end of the lifetime of the atomic value, you must manually ensure\nthat the storage location is correctly `dispose()`d, deinitalized and\ndeallocated.\n\nNote: This is not an atomic operation."},{"p":["UnsafeAtomicLazyReference","Storage","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["Instance",0,0]],"d":"Initialize a new atomic lazy reference storage value holding `nil`.\n\nNote: This is not an atomic operation. This call may have side effects\n(such as unpaired retains of strong references) that will need to be\nundone by calling `dispose()` before the storage value is\ndeinitialized."},{"p":["ManagedAtomicLazyReference","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["Instance",0,0]],"d":"Initializes a new managed atomic lazy reference with a nil value."},{"p":["AtomicRawRepresentableStorage","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Value",18],[")",17]],"s":[["init",10],["(",17],["Value",18],[")",17]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":18},{"p":["AtomicLoadOrdering","sequentiallyConsistent"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicLoadOrdering",18,9],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicLoadOrdering",18]],"d":"A sequentially consistent load performs an acquiring load and\nalso guarantees that it and all other sequentially consistent\natomic operations (loads, stores, updates) appear to be executed\nin a single, total sequential ordering.\n\nThis value corresponds to `std::memory_order_seq_cst` in C++."},{"p":["AtomicLoadOrdering","relaxed"],"f":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicLoadOrdering",18,9],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicLoadOrdering",18]],"d":"Guarantees the atomicity of the specific operation on which it is applied,\nbut imposes no ordering constraints on any other variable accesses.\n\nThis value corresponds to `std::memory_order_relaxed` in C++."},{"p":["AtomicLoadOrdering","acquiring"],"f":[["static",12],[" ",17],["var",12],[" ",17],["acquiring",7],[": ",17],["AtomicLoadOrdering",18,9],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["acquiring",7],[": ",17],["AtomicLoadOrdering",18]],"d":"An acquiring load synchronizes with a releasing operation whose\nvalue its reads. It ensures that the releasing and acquiring\nthreads agree that all subsequent variable accesses on the\nacquiring thread happen after the atomic operation itself.\n\nThis value corresponds to `std::memory_order_acquire` in C++."},{"p":["AtomicStoreOrdering","sequentiallyConsistent"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicStoreOrdering",18,10],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicStoreOrdering",18]],"d":"A sequentially consistent store performs a releasing store and\nalso guarantees that it and all other sequentially consistent\natomic operations (loads, stores, updates) appear to be executed\nin a single, total sequential ordering.\n\nThis value corresponds to `std::memory_order_seq_cst` in C++."},{"p":["AtomicStoreOrdering","relaxed"],"f":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicStoreOrdering",18,10],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicStoreOrdering",18]],"d":"Guarantees the atomicity of the specific operation on which it is applied,\nbut imposes no ordering constraints on any other variable accesses.\n\nThis value corresponds to `std::memory_order_relaxed` in C++."},{"p":["AtomicStoreOrdering","releasing"],"f":[["static",12],[" ",17],["var",12],[" ",17],["releasing",7],[": ",17],["AtomicStoreOrdering",18,10],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["releasing",7],[": ",17],["AtomicStoreOrdering",18]],"d":"A releasing store synchronizes with acquiring operations that\nread the value it stores. It ensures that the releasing and\nacquiring threads agree that all preceding variable accesses on\nthe releasing thread happen before the atomic operation itself.\n\nThis value corresponds to `std::memory_order_release` in C++."},{"p":["AtomicUpdateOrdering","acquiringAndReleasing"],"f":[["static",12],[" ",17],["var",12],[" ",17],["acquiringAndReleasing",7],[": ",17],["AtomicUpdateOrdering",18,11],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["acquiringAndReleasing",7],[": ",17],["AtomicUpdateOrdering",18]],"d":"An acquiring-and-releasing operation is a combination of\n`.acquiring` and `.releasing` operation on the same variable.\n\nThis value corresponds to `std::memory_order_acq_rel` in C++."},{"p":["AtomicUpdateOrdering","sequentiallyConsistent"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicUpdateOrdering",18,11],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sequentiallyConsistent",7],[": ",17],["AtomicUpdateOrdering",18]],"d":"A sequentially consistent update performs an\nacquiring-and-releasing update and also guarantees that it and\nall other sequentially consistent atomic operations (loads, stores,\nupdates) appear to be executed in a single, total sequential\nordering.\n\nThis value corresponds to `std::memory_order_seq_cst` in C++."},{"p":["AtomicUpdateOrdering","relaxed"],"f":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicUpdateOrdering",18,11],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["relaxed",7],[": ",17],["AtomicUpdateOrdering",18]],"d":"Guarantees the atomicity of the specific operation on which it is applied,\nbut imposes no ordering constraints on any other variable accesses.\n\nThis value corresponds to `std::memory_order_relaxed` in C++."},{"p":["AtomicUpdateOrdering","acquiring"],"f":[["static",12],[" ",17],["var",12],[" ",17],["acquiring",7],[": ",17],["AtomicUpdateOrdering",18,11],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["acquiring",7],[": ",17],["AtomicUpdateOrdering",18]],"d":"An acquiring update synchronizes with a releasing operation\nwhose value its reads. It ensures that the releasing and\nacquiring threads agree that all subsequent variable accesses on\nthe acquring thread happen after the atomic operation itself.\n\nThis value corresponds to `std::memory_order_acquire` in C++."},{"p":["AtomicUpdateOrdering","releasing"],"f":[["static",12],[" ",17],["var",12],[" ",17],["releasing",7],[": ",17],["AtomicUpdateOrdering",18,11],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["releasing",7],[": ",17],["AtomicUpdateOrdering",18]],"d":"A releasing update synchronizes with acquiring operations that\nread the value it stores. It ensures that the releasing and\nacquiring threads agree that all preceding variable accesses on\nthe releasing thread happen before the atomic operation itself.\n\nThis value corresponds to `std::memory_order_release` in C++."},{"p":["AtomicLoadOrdering","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,419],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":520},{"p":["AtomicStoreOrdering","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,419],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":520},{"p":["AtomicUpdateOrdering","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,419],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":520},{"p":["UnsafeAtomic","create(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["create",7],["(",17],["_",1],[" ",17],["initialValue",2],[": ",17],["Value",18],[") -> ",17],["UnsafeAtomic",18,8],["<",17],["Value",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["create",7],["(",17],["Value",18],[") -> ",17],["UnsafeAtomic",18],["<",17],["Value",18],[">",17]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Create a new `UnsafeAtomic` value with the supplied initial value by\ndynamically allocating storage for it.\n\nThis call is usually paired with `destroy` to get rid of the allocated\nstorage at the end of its lifetime.\n\nNote: This is not an atomic operation."},{"p":["AtomicStorage","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Atomically loads and returns the value referenced by the given pointer,\napplying the specified memory ordering.\n\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The current value referenced by `pointer`."},{"p":["AtomicStorage","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"d":"Atomically sets the value referenced by `pointer` to `desired`,\napplying the specified memory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["AtomicStorage","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Atomically sets the value referenced by `pointer` to `desired` and returns\nthe original value, applying the specified memory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value."},{"p":["AtomicStorage","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"d":"Perform an atomic compare and exchange operation on the value referenced\nby `pointer`, applying the specified success/failure memory orderings.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThe `successOrdering` argument specifies the memory ordering to use when\nthe operation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareSelf(for:)`.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["AtomicStorage","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"d":"Perform an atomic compare and exchange operation on the value referenced\nby `pointer`, applying the specified memory ordering.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["AtomicStorage","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Self",18],[".",17],["Value",18],[")",17]],"d":"Perform an atomic weak compare and exchange operation on the value\nreferenced by `pointer`, applying the specified success/failure memory\norderings. This compare-exchange variant is allowed to spuriously fail; it\nis designed to be called in a loop until it indicates a successful\nexchange has happened.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\n(In this weak form, transient conditions may cause the `original ==\nexpected` check to sometimes return false when the two values are in fact\nthe same.)\n\nThe `successOrdering` argument specifies the memory ordering to use when the\noperation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["AtomicIntegerStorage","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Perform an atomic bitwise OR operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: An integer value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicIntegerStorage","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Perform an atomic bitwise AND operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: An integer value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicIntegerStorage","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Perform an atomic bitwise XOR operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: An integer value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicIntegerStorage","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Perform an atomic wrapping decrement operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-=` operator does on integer values.\n\n- Parameter operand: The value to subtract from the current value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicIntegerStorage","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Self",18],[".",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Self",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Self",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Self",18],[".",17],["Value",18]],"d":"Perform an atomic wrapping increment operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+=` operator does on integer values.\n\n- Parameter operand: The value to add to the current value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomicLazyReference","create()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["create",7],["() -> ",17],["UnsafeAtomicLazyReference",18,12],["<",17],["Instance",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["create",7],["() -> ",17],["UnsafeAtomicLazyReference",18],["<",17],["Instance",18],[">",17]],"g":[["Instance",0,0]],"d":"Create a new `UnsafeAtomicLazyReference` value by dynamically allocating\nstorage for it.\n\nThis call is usually paired with `destroy` to get rid of the allocated\nstorage at the end of its lifetime.\n\nNote: This is not an atomic operation."},{"p":["AtomicRawRepresentableStorage","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Value",18]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":39},{"p":["AtomicRawRepresentableStorage","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":40},{"p":["AtomicRawRepresentableStorage","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":41},{"p":["AtomicRawRepresentableStorage","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":42},{"p":["AtomicRawRepresentableStorage","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":43},{"p":["AtomicRawRepresentableStorage","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Value",18],[">>, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["AtomicRawRepresentableStorage",18],["<",17],["Value",18],[">>, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":44},{"p":["UnsafeAtomic","compareExchange(expected:desired:successOrdering:failureOrdering:)"],"f":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic compare and exchange operation on the current value,\napplying the specified success/failure memory orderings.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThe `successOrdering` argument specifies the memory ordering to use when\nthe operation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["UnsafeAtomic","compareExchange(expected:desired:ordering:)"],"f":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic compare and exchange operation on the current value,\napplying the specified memory ordering.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["UnsafeAtomic","weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"],"f":[["func",12],[" ",17],["weakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["weakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic weak compare and exchange operation on the current\nvalue, applying the specified success/failure memory orderings. This\ncompare-exchange variant is allowed to spuriously fail; it is designed to\nbe called in a loop until it indicates a successful exchange has happened.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\n(In this weak form, transient conditions may cause the `original ==\nexpected` check to sometimes return false when the two values are in fact\nthe same.)\n\nThe `ordering` argument specifies the memory ordering to use when the\noperation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["UnsafeAtomic","load(ordering:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["load",7],["(",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically loads and returns the current value, applying the specified\nmemory ordering.\n\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The current value."},{"p":["UnsafeAtomic","store(_:ordering:)"],"f":[["func",12],[" ",17],["store",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["func",12],[" ",17],["store",7],["(",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically sets the current value to `desired`, applying the specified\nmemory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["UnsafeAtomic","destroy()"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["destroy",7],["() -> ",17],["Value",18]],"s":[["func",12],[" ",17],["destroy",7],["() -> ",17],["Value",18]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Disposes of the current value of the storage location corresponding to\nthis unsafe atomic value, then deinitializes and deallocates the storage.\n\nNote: This is not an atomic operation.\n\n- Returns: The last value stored in the storage representation before it\n  was destroyed."},{"p":["UnsafeAtomic","exchange(_:ordering:)"],"f":[["func",12],[" ",17],["exchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["exchange",7],["(",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically sets the current value to `desired` and returns the original\nvalue, applying the specified memory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value."},{"p":["UnsafeAtomic","bitwiseOrThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseOrThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseOrThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise OR operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["UnsafeAtomic","loadThenBitwiseOr(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","wrappingDecrement(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[")",17]],"s":[["func",12],[" ",17],["wrappingDecrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[")",17]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping decrement operation applying the\nspecified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-=` operator does on `Int` values.\n\n- Parameter operand: The value to subtract from the current value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["UnsafeAtomic","wrappingIncrement(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[")",17]],"s":[["func",12],[" ",17],["wrappingIncrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[")",17]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping increment operation applying the\nspecified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+=` operator does on `Int` values.\n\n- Parameter operand: The value to add to the current value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["UnsafeAtomic","bitwiseAndThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseAndThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseAndThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise AND operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["UnsafeAtomic","bitwiseXorThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseXorThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseXorThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise XOR operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["UnsafeAtomic","loadThenBitwiseAnd(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","loadThenBitwiseXor(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","loadThenWrappingDecrement(by:ordering:)"],"f":[["func",12],[" ",17],["loadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping subtract operation and return the original value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","loadThenWrappingIncrement(by:ordering:)"],"f":[["func",12],[" ",17],["loadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping add operation and return the original value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","wrappingDecrementThenLoad(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingDecrementThenLoad",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["wrappingDecrementThenLoad",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping subtract operation and return the new value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["UnsafeAtomic","wrappingIncrementThenLoad(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingIncrementThenLoad",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["wrappingIncrementThenLoad",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping add operation and return the new value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["UnsafeAtomic","loadThenLogicalOr(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalOr",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","logicalOrThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalOrThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalOrThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","loadThenLogicalAnd(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalAnd",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","loadThenLogicalXor(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalXor",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","logicalAndThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalAndThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalAndThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["UnsafeAtomic","logicalXorThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalXorThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalXorThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicStorage","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Self",18],[".",17],["Value",18]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Self",18],[".",17],["Value",18]],"d":"Prepare this atomic storage value for deinitialization, extracting the\nlogical value it represents. This invalidates this atomic storage; you\nmust not perform any operations on it after this call (except for\ndeinitialization).\n\nThis call prevents resource leaks when destroying the storage\nrepresentation of certain `AtomicValue` types. (In particular, ones that\nmodel strong references.)\n\nNote: This is not an atomic operation. Logically, it implements a custom\ndestructor for the underlying non-copiable value."},{"p":["ManagedAtomic","compareExchange(expected:desired:successOrdering:failureOrdering:)"],"f":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic compare and exchange operation on the current value,\napplying the specified success/failure memory orderings.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThe `successOrdering` argument specifies the memory ordering to use when\nthe operation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["ManagedAtomic","compareExchange(expected:desired:ordering:)"],"f":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["compareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic compare and exchange operation on the current value,\napplying the specified memory ordering.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\nThis method implements a \"strong\" compare and exchange operation\nthat does not permit spurious failures.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["ManagedAtomic","weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"],"f":[["func",12],[" ",17],["weakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Value",18],[")",17]],"s":[["func",12],[" ",17],["weakCompareExchange",7],["(",17],["expected",1],[": ",17],["Value",18],[", ",17],["desired",1],[": ",17],["Value",18],[", ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Value",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Perform an atomic weak compare and exchange operation on the current\nvalue, applying the specified success/failure memory orderings. This\ncompare-exchange variant is allowed to spuriously fail; it is designed to\nbe called in a loop until it indicates a successful exchange has happened.\n\nThis operation performs the following algorithm as a single atomic\ntransaction:\n\n```\natomic(self) { currentValue in\n  let original = currentValue\n  guard original == expected else { return (false, original) }\n  currentValue = desired\n  return (true, original)\n}\n```\n\n(In this weak form, transient conditions may cause the `original ==\nexpected` check to sometimes return false when the two values are in fact\nthe same.)\n\nThe `ordering` argument specifies the memory ordering to use when the\noperation manages to update the current value, while `failureOrdering`\nwill be used when the operation leaves the value intact.\n\n- Parameter expected: The expected current value.\n- Parameter desired: The desired new value.\n- Parameter successOrdering: The memory ordering to apply if this\n   operation performs the exchange.\n- Parameter failureOrdering: The memory ordering to apply on this\n   operation does not perform the exchange.\n- Returns: A tuple `(exchanged, original)`, where `exchanged` is true if\n  the exchange was successful, and `original` is the original value."},{"p":["ManagedAtomic","load(ordering:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["load",7],["(",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically loads and returns the current value, applying the specified\nmemory ordering.\n\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The current value."},{"p":["ManagedAtomic","store(_:ordering:)"],"f":[["func",12],[" ",17],["store",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["func",12],[" ",17],["store",7],["(",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically sets the current value to `desired`, applying the specified\nmemory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["ManagedAtomic","exchange(_:ordering:)"],"f":[["func",12],[" ",17],["exchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["exchange",7],["(",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicValue",0]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]],"d":"Atomically sets the current value to `desired` and returns the original\nvalue, applying the specified memory ordering.\n\n- Parameter desired: The desired new value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value."},{"p":["ManagedAtomic","bitwiseOrThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseOrThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseOrThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise OR operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["ManagedAtomic","loadThenBitwiseOr(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","wrappingDecrement(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[")",17]],"s":[["func",12],[" ",17],["wrappingDecrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[")",17]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping decrement operation applying the\nspecified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-=` operator does on `Int` values.\n\n- Parameter operand: The value to subtract from the current value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["ManagedAtomic","wrappingIncrement(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[")",17]],"s":[["func",12],[" ",17],["wrappingIncrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[")",17]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping increment operation applying the\nspecified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+=` operator does on `Int` values.\n\n- Parameter operand: The value to add to the current value.\n- Parameter ordering: The memory ordering to apply on this operation."},{"p":["ManagedAtomic","bitwiseAndThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseAndThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseAndThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise AND operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["ManagedAtomic","bitwiseXorThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["bitwiseXorThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["bitwiseXorThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise XOR operation and return the new value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["ManagedAtomic","loadThenBitwiseAnd(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","loadThenBitwiseXor(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic bitwise XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","loadThenWrappingDecrement(by:ordering:)"],"f":[["func",12],[" ",17],["loadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping subtract operation and return the original value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","loadThenWrappingIncrement(by:ordering:)"],"f":[["func",12],[" ",17],["loadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping add operation and return the original value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","wrappingDecrementThenLoad(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingDecrementThenLoad",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["wrappingDecrementThenLoad",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping subtract operation and return the new value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&-` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["ManagedAtomic","wrappingIncrementThenLoad(by:ordering:)"],"f":[["func",12],[" ",17],["wrappingIncrementThenLoad",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Value",18],[" = 1, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["wrappingIncrementThenLoad",7],["(",17],["by",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",1,"AtomicInteger",1]],"c":[["Value",1,"AtomicInteger",1]],"g":[["Value",0,0]],"d":"Perform an atomic wrapping add operation and return the new value, applying\nthe specified memory ordering.\n\nNote: This operation silently wraps around on overflow, like the\n`&+` operator does on `Int` values.\n\n- Parameter operand: An integer value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The new value after the operation."},{"p":["ManagedAtomic","loadThenLogicalOr(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalOr",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","logicalOrThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalOrThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalOrThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical OR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","loadThenLogicalAnd(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalAnd",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","loadThenLogicalXor(with:ordering:)"],"f":[["func",12],[" ",17],["loadThenLogicalXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["loadThenLogicalXor",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","logicalAndThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalAndThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalAndThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical AND operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["ManagedAtomic","logicalXorThenLoad(with:ordering:)"],"f":[["func",12],[" ",17],["logicalXorThenLoad",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Value",18]],"s":[["func",12],[" ",17],["logicalXorThenLoad",7],["(",17],["with",1],[": ",17],["Value",18],[", ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Value",18]],"e":[["Value",2,"Bool",434]],"c":[["Value",2,"Bool",434]],"g":[["Value",0,0]],"d":"Perform an atomic logical XOR operation and return the original value, applying\nthe specified memory ordering.\n\n- Parameter operand: A boolean value.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["AtomicLoadOrdering","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,531],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":401},{"p":["AtomicStoreOrdering","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,531],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":401},{"p":["AtomicUpdateOrdering","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,531],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":401},{"p":["UnsafeAtomicLazyReference","storeIfNilThenLoad(_:)"],"f":[["func",12],[" ",17],["storeIfNilThenLoad",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Instance",18],[") -> ",17],["Instance",18]],"s":[["func",12],[" ",17],["storeIfNilThenLoad",7],["(",17],["Instance",18],[") -> ",17],["Instance",18]],"g":[["Instance",0,0]],"d":"Atomically initializes this reference if its current value is nil, then\nreturns the initialized value. If this reference is already initialized,\nthen `storeIfNilThenLoad(_:)` discards its supplied argument and returns\nthe current value without updating it.\n\nThe following example demonstrates how this can be used to implement a\nthread-safe lazily initialized reference:\n\n```\nclass Image {\n  var _histogram: UnsafeAtomicLazyReference<Histogram> = ...\n\n  // This is safe to call concurrently from multiple threads.\n  var atomicLazyHistogram: Histogram {\n    if let histogram = _histogram.load() { return foo }\n    // Note that code here may run concurrently on\n    // multiple threads, but only one of them will get to\n    // succeed setting the reference.\n    let histogram = ...\n    return _histogram.storeIfNilThenLoad(foo)\n}\n```\n\nThis operation uses acquiring-and-releasing memory ordering."},{"p":["UnsafeAtomicLazyReference","load()"],"f":[["func",12],[" ",17],["load",7],["() -> ",17],["Instance",18],["?",17]],"s":[["func",12],[" ",17],["load",7],["() -> ",17],["Instance",18],["?",17]],"g":[["Instance",0,0]],"d":"Atomically loads and returns the current value of this reference.\n\nThe load operation is performed with the memory ordering\n`AtomicLoadOrdering.acquiring`."},{"p":["UnsafeAtomicLazyReference","Storage","dispose()"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeAtomicLazyReference",18,12],["<",17],["Instance",18],[">.",17],["Value",18,123]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeAtomicLazyReference",18],["<",17],["Instance",18],[">.",17],["Value",18]],"g":[["Instance",0,0]],"d":"Prepare this atomic storage value for deinitialization, extracting the\nlogical value it represents. This invalidates this atomic storage; you\nmust not perform any operations on it after this call (except for\ndeinitialization).\n\nThis call prevents resource leaks when destroying the storage\nrepresentation of certain `AtomicValue` types. (In particular, ones\nthat model strong references.)\n\nNote: This is not an atomic operation. Logically, it implements a\ncustom destructor for the underlying non-copiable value."},{"p":["UnsafeAtomicLazyReference","destroy()"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["destroy",7],["() -> ",17],["UnsafeAtomicLazyReference",18,12],["<",17],["Instance",18],[">.",17],["Value",18,123]],"s":[["func",12],[" ",17],["destroy",7],["() -> ",17],["UnsafeAtomicLazyReference",18],["<",17],["Instance",18],[">.",17],["Value",18]],"g":[["Instance",0,0]],"d":"Disposes of the current value of the storage location corresponding to\nthis unsafe atomic lazy reference, then deinitializes and deallocates the\nstorage.\n\nNote: This is not an atomic operation.\n\n- Returns: The last value stored in the storage representation before it\n  was destroyed."},{"p":["ManagedAtomicLazyReference","storeIfNilThenLoad(_:)"],"f":[["func",12],[" ",17],["storeIfNilThenLoad",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Instance",18],[") -> ",17],["Instance",18]],"s":[["func",12],[" ",17],["storeIfNilThenLoad",7],["(",17],["Instance",18],[") -> ",17],["Instance",18]],"g":[["Instance",0,0]],"d":"Atomically initializes this reference if its current value is nil, then\nreturns the initialized value. If this reference is already initialized,\nthen `storeIfNilThenLoad(_:)` discards its supplied argument and returns\nthe current value without updating it.\n\nThe following example demonstrates how this can be used to implement a\nthread-safe lazily initialized reference:\n\n```\nclass Image {\n  var _histogram: UnsafeAtomicLazyReference<Histogram> = ...\n\n  // This is safe to call concurrently from multiple threads.\n  var atomicLazyHistogram: Histogram {\n    if let histogram = _histogram.load() { return foo }\n    // Note that code here may run concurrently on\n    // multiple threads, but only one of them will get to\n    // succeed setting the reference.\n    let histogram = ...\n    return _histogram.storeIfNilThenLoad(foo)\n}\n```\n\nThis operation uses acquiring-and-releasing memory ordering."},{"p":["ManagedAtomicLazyReference","load()"],"f":[["func",12],[" ",17],["load",7],["() -> ",17],["Instance",18],["?",17]],"s":[["func",12],[" ",17],["load",7],["() -> ",17],["Instance",18],["?",17]],"g":[["Instance",0,0]],"d":"Atomically loads and returns the current value of this reference.\n\nThe load operation is performed with the memory ordering\n`AtomicLoadOrdering.acquiring`."},{"p":["AtomicRawRepresentableStorage","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Value",18]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Value",18]],"c":[["Value",1,"RawRepresentable",427],["Value.RawValue",1,"AtomicValue",0]],"g":[["Value",0,0]],"o":82},{"p":["AtomicLoadOrdering","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["left",2],[": ",17],["AtomicLoadOrdering",18,9],[", ",17],["right",2],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["AtomicLoadOrdering",18],[", ",17],["AtomicLoadOrdering",18],[") -> ",17],["Bool",18]],"o":417},{"p":["AtomicStoreOrdering","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["left",2],[": ",17],["AtomicStoreOrdering",18,10],[", ",17],["right",2],[": ",17],["AtomicStoreOrdering",18,10],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["AtomicStoreOrdering",18],[", ",17],["AtomicStoreOrdering",18],[") -> ",17],["Bool",18]],"o":417},{"p":["AtomicUpdateOrdering","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["left",2],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["right",2],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["AtomicUpdateOrdering",18],[", ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Bool",18]],"o":417},{"p":["atomicMemoryFence(ordering:)"],"f":[["func",12],[" ",17],["atomicMemoryFence",7],["(",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[")",17]],"s":[["func",12],[" ",17],["atomicMemoryFence",7],["(",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[")",17]],"d":"Establishes a memory ordering without associating it with a\nparticular atomic operation.\n\n- A relaxed fence has no effect.\n- An acquiring fence ties to any preceding atomic operation that\n  reads a value, and synchronizes with any releasing operation whose\n  value was read.\n- A releasing fence ties to any subsequent atomic operation that\n  modifies a value, and synchronizes with any acquiring operation\n  that reads the result.\n- An acquiring and releasing fence is a combination of an\n  acquiring and a releasing fence.\n- A sequentially consistent fence behaves like an acquiring and\n  releasing fence, and ensures that the fence itself is part of\n  the single, total ordering for all sequentially consistent\n  operations.\n\nThis operation corresponds to `std::atomic_thread_fence` in C++."},{"p":["DoubleWord"],"f":[["typealias",12],[" ",17],["DoubleWord",7],[" = ",17],["DoubleWord",18,399]],"s":[["typealias",12],[" ",17],["DoubleWord",7]]},{"p":["UnsafeAtomic","Storage"],"f":[["typealias",12],[" ",17],["Storage",7],[" = ",17],["Value",18],[".",17],["AtomicRepresentation",18]],"s":[["typealias",12],[" ",17],["Storage",7]],"c":[["Value",1,"AtomicValue",0]],"g":[["Value",0,0]]},{"p":["UnsafeAtomicLazyReference","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Instance",18],["?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Instance",0,0]],"d":"The value logically stored in an atomic lazy reference value."},{"p":["ManagedAtomicLazyReference","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Instance",18],["?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Instance",0,0]],"d":"The value logically stored in an atomic lazy reference value."},{"p":["DoubleWord","init(high:low:)"],"f":[["init",10],["(",17],["high",1],[": ",17],["UInt",18,439],[", ",17],["low",1],[": ",17],["UInt",18,439],[")",17]],"s":[["init",10],["(",17],["high",1],[": ",17],["UInt",18],[", ",17],["low",1],[": ",17],["UInt",18],[")",17]],"d":"Initialize a new `DoubleWord` value given its high- and\nlow-order words."},{"p":["DoubleWord","init(first:second:)"],"f":[["init",10],["(",17],["first",1],[": ",17],["UInt",18,439],[", ",17],["second",1],[": ",17],["UInt",18,439],[")",17]],"s":[["init",10],["(",17],["first",1],[": ",17],["UInt",18],[", ",17],["second",1],[": ",17],["UInt",18],[")",17]],"d":"Initialize a new `DoubleWord` value given its component words,\nin the order in which they are laid out in memory."},{"p":["DoubleWord","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,419],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":520},{"p":["DoubleWord","low"],"f":[["var",12],[" ",17],["low",7],[": ",17],["UInt",18,439],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["low",7],[": ",17],["UInt",18]],"d":"The least significant word in `self`, considering it as a\nsingle, wide integer value. This may correspond to either\n`first` or `second`, depending on the endianness of the\nunderlying architecture."},{"p":["DoubleWord","high"],"f":[["var",12],[" ",17],["high",7],[": ",17],["UInt",18,439],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["high",7],[": ",17],["UInt",18]],"d":"The most significant word in `self`, considering it as a single,\nwide integer value. This may correspond to either `first` or\n`second`, depending on the endianness of the underlying\narchitecture."},{"p":["DoubleWord","first"],"f":[["var",12],[" ",17],["first",7],[": ",17],["UInt",18,439],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["first",7],[": ",17],["UInt",18]],"d":"The first word in `self` in its underlying binary\nrepresentation."},{"p":["DoubleWord","second"],"f":[["var",12],[" ",17],["second",7],[": ",17],["UInt",18,439],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["second",7],[": ",17],["UInt",18]],"d":"The second word in `self` in its underlying binary\nrepresentation."},{"p":["DoubleWord","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,531],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":401},{"p":["DoubleWord","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["left",2],[": ",17],["DoubleWord",18,399],[", ",17],["right",2],[": ",17],["DoubleWord",18,399],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["DoubleWord",18],[", ",17],["DoubleWord",18],[") -> ",17],["Bool",18]],"o":417},{"p":["UnsafePointer","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"g":[["Pointee",0,0]],"o":5},{"p":["UnsafePointer","AtomicOptionalRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"g":[["Pointee",0,0]],"o":7},{"p":["UnsafeRawPointer","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"o":7},{"p":["Bool","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["Int","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UnsafeMutablePointer","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"g":[["Pointee",0,0]],"o":5},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"g":[["Pointee",0,0]],"o":7},{"p":["UInt","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UnsafeMutableRawPointer","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"o":7},{"p":["Int8","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["Int16","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["Int32","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["Int64","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UInt8","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UInt16","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UInt32","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["UInt64","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"o":5},{"p":["Unmanaged","AtomicRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicRepresentation",7]],"g":[["Instance",0,0]],"o":5},{"p":["Unmanaged","AtomicOptionalRepresentation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"s":[["struct",12],[" ",17],["AtomicOptionalRepresentation",7]],"g":[["Instance",0,0]],"o":7},{"p":["UnsafePointer","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[")",17]],"s":[["init",10],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":18},{"p":["UnsafePointer","AtomicOptionalRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[")",17]],"s":[["init",10],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":18},{"p":["UnsafeRawPointer","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[")",17]],"s":[["init",10],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[")",17]],"s":[["init",10],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Bool","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Bool",18,434],[")",17]],"s":[["init",10],["(",17],["Bool",18],[")",17]],"o":18},{"p":["Int","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[")",17]],"s":[["init",10],["(",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UnsafeMutablePointer","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[")",17]],"s":[["init",10],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":18},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[")",17]],"s":[["init",10],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":18},{"p":["UInt","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[")",17]],"s":[["init",10],["(",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[")",17]],"s":[["init",10],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[")",17]],"s":[["init",10],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Int8","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[")",17]],"s":[["init",10],["(",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Int16","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[")",17]],"s":[["init",10],["(",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Int32","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[")",17]],"s":[["init",10],["(",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Int64","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[")",17]],"s":[["init",10],["(",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UInt8","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[")",17]],"s":[["init",10],["(",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UInt16","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[")",17]],"s":[["init",10],["(",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UInt32","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[")",17]],"s":[["init",10],["(",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["UInt64","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[")",17]],"s":[["init",10],["(",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":18},{"p":["Unmanaged","AtomicRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[")",17]],"s":[["init",10],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":18},{"p":["Unmanaged","AtomicOptionalRepresentation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[")",17]],"s":[["init",10],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":18},{"p":["UnsafePointer","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":39},{"p":["UnsafePointer","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Pointee",0,0]],"o":40},{"p":["UnsafePointer","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":41},{"p":["UnsafePointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":42},{"p":["UnsafePointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":43},{"p":["UnsafePointer","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":44},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":39},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Pointee",0,0]],"o":40},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":41},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":42},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":43},{"p":["UnsafePointer","AtomicOptionalRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["desired",1],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":44},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UnsafeRawPointer","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Bool","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Bool",18]],"o":39},{"p":["Bool","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Bool",18,434],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Bool",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Bool","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Bool",18,434],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Bool",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Bool",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Bool",18]],"o":41},{"p":["Bool","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18,434],[", ",17],["desired",1],[": ",17],["Bool",18,434],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Bool",18,434],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18],[", ",17],["desired",1],[": ",17],["Bool",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Bool",18],[")",17]],"o":42},{"p":["Bool","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18,434],[", ",17],["desired",1],[": ",17],["Bool",18,434],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Bool",18,434],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18],[", ",17],["desired",1],[": ",17],["Bool",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Bool",18],[")",17]],"o":43},{"p":["Bool","AtomicRepresentation","atomicLoadThenLogicalOr(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalOr",7],["(",17],["with",1],[": ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"d":"Perform an atomic logical OR operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: A boolean value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["Bool","AtomicRepresentation","atomicLoadThenLogicalAnd(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalAnd",7],["(",17],["with",1],[": ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"d":"Perform an atomic logical AND operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: A boolean value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["Bool","AtomicRepresentation","atomicLoadThenLogicalXor(with:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenLogicalXor",7],["(",17],["with",1],[": ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"d":"Perform an atomic logical XOR operation on the value referenced by\n`pointer` and return the original value, applying the specified memory\nordering.\n\n- Parameter operand: A boolean value.\n- Parameter pointer: A memory location previously initialized with a value\n  returned by `prepareAtomicRepresentation(for:)`.\n- Parameter ordering: The memory ordering to apply on this operation.\n- Returns: The original value before the operation."},{"p":["Bool","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18,434],[", ",17],["desired",1],[": ",17],["Bool",18,434],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Bool",18,434],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Bool",18],[", ",17],["desired",1],[": ",17],["Bool",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Bool",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Bool",18],[")",17]],"o":44},{"p":["Int","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["Int","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Int","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["Int","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["desired",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["Int","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["desired",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["Int","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["Int","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["Int","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["Int","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["desired",1],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["Int","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":39},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Pointee",0,0]],"o":40},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":41},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":42},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":43},{"p":["UnsafeMutablePointer","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":44},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":39},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Pointee",0,0]],"o":40},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":41},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":42},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":43},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Pointee",0,0]],"o":44},{"p":["UInt","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UInt","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UInt","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UInt","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["desired",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UInt","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["desired",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UInt","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["UInt","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["UInt","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["UInt","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["desired",1],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UInt","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["UInt","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int8","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["Int8","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Int8","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["Int8","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["desired",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["Int8","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["desired",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["Int8","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["Int8","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["Int8","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["Int8","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["desired",1],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int8","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["Int8","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["Int16","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["Int16","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Int16","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["Int16","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["desired",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["Int16","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["desired",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["Int16","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["Int16","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["Int16","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["Int16","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["desired",1],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int16","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["Int16","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["Int32","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["Int32","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Int32","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["Int32","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["desired",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["Int32","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["desired",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["Int32","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["Int32","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["Int32","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["Int32","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["desired",1],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int32","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["Int32","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["Int64","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["Int64","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["Int64","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["Int64","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["desired",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["Int64","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["desired",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["Int64","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["Int64","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["Int64","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["Int64","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["desired",1],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["Int64","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["Int64","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Int64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UInt8","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UInt8","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UInt8","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UInt8","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["desired",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UInt8","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["desired",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UInt8","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["UInt8","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["UInt8","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["UInt8","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["desired",1],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UInt8","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["UInt8","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UInt16","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UInt16","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UInt16","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UInt16","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["desired",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UInt16","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["desired",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UInt16","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["UInt16","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["UInt16","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["UInt16","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["desired",1],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UInt16","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["UInt16","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UInt32","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UInt32","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UInt32","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UInt32","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["desired",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UInt32","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["desired",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UInt32","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["UInt32","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["UInt32","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["UInt32","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["desired",1],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UInt32","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["UInt32","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["UInt64","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":39},{"p":["UInt64","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"o":40},{"p":["UInt64","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":41},{"p":["UInt64","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["desired",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":42},{"p":["UInt64","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["desired",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":43},{"p":["UInt64","AtomicRepresentation","atomicLoadThenBitwiseOr(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseOr",7],["(",17],["with",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":45},{"p":["UInt64","AtomicRepresentation","atomicLoadThenBitwiseAnd(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseAnd",7],["(",17],["with",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":46},{"p":["UInt64","AtomicRepresentation","atomicLoadThenBitwiseXor(with:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[" ",17],["operand",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenBitwiseXor",7],["(",17],["with",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":47},{"p":["UInt64","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["desired",1],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"o":44},{"p":["UInt64","AtomicRepresentation","atomicLoadThenWrappingDecrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingDecrement",7],["(",17],["by",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":48},{"p":["UInt64","AtomicRepresentation","atomicLoadThenWrappingIncrement(by:at:ordering:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[" ",17],["operand",2],[": ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396],[" = 1, ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoadThenWrappingIncrement",7],["(",17],["by",1],[": ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":49},{"p":["Unmanaged","AtomicRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":39},{"p":["Unmanaged","AtomicRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Instance",0,0]],"o":40},{"p":["Unmanaged","AtomicRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":41},{"p":["Unmanaged","AtomicRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":42},{"p":["Unmanaged","AtomicRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":43},{"p":["Unmanaged","AtomicRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":44},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicLoad(at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicLoad",7],["(",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicLoadOrdering",18],[") -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":39},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicStore(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18,10],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicStore",7],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicStoreOrdering",18],[")",17]],"g":[["Instance",0,0]],"o":40},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicExchange(_:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["_",1],[" ",17],["desired",2],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicExchange",7],["(",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":41},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":42},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicCompareExchange(expected:desired:at:ordering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18,11],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["ordering",1],[": ",17],["AtomicUpdateOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":43},{"p":["Unmanaged","AtomicOptionalRepresentation","atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["desired",1],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[", ",17],["at",1],[" ",17],["pointer",2],[": ",17],["UnsafeMutablePointer",18,437],["<",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18,11],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18,9],[") -> (exchanged",17],[": ",17],["Bool",18,434],[", original",17],[": ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atomicWeakCompareExchange",7],["(",17],["expected",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["desired",1],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[", ",17],["at",1],[": ",17],["UnsafeMutablePointer",18],["<",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[">, ",17],["successOrdering",1],[": ",17],["AtomicUpdateOrdering",18],[", ",17],["failureOrdering",1],[": ",17],["AtomicLoadOrdering",18],[") -> (exchanged",17],[": ",17],["Bool",18],[", original",17],[": ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18],[")",17]],"g":[["Instance",0,0]],"o":44},{"p":["UnsafePointer","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,134],[".",17],["Value",18,376]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":82},{"p":["UnsafePointer","AtomicOptionalRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,135],[".",17],["Value",18,377]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":82},{"p":["UnsafeRawPointer","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicRepresentation",18,136],[".",17],["Value",18,378]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeRawPointer",18,426],[".",17],["AtomicOptionalRepresentation",18,137],[".",17],["Value",18,379]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Bool","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Bool",18,434],[".",17],["AtomicRepresentation",18,138],[".",17],["Value",18,381]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Bool",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Int","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int",18,435],[".",17],["AtomicRepresentation",18,139],[".",17],["Value",18,382]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UnsafeMutablePointer","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18,140],[".",17],["Value",18,383]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":82},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18,141],[".",17],["Value",18,384]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutablePointer",18],["<",17],["Pointee",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Pointee",0,0]],"o":82},{"p":["UInt","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt",18,439],[".",17],["AtomicRepresentation",18,142],[".",17],["Value",18,386]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicRepresentation",18,143],[".",17],["Value",18,387]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutableRawPointer",18,440],[".",17],["AtomicOptionalRepresentation",18,144],[".",17],["Value",18,388]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UnsafeMutableRawPointer",18],[".",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Int8","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int8",18,526],[".",17],["AtomicRepresentation",18,145],[".",17],["Value",18,389]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Int16","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int16",18,527],[".",17],["AtomicRepresentation",18,146],[".",17],["Value",18,390]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Int32","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int32",18,528],[".",17],["AtomicRepresentation",18,147],[".",17],["Value",18,391]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Int64","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int64",18,529],[".",17],["AtomicRepresentation",18,148],[".",17],["Value",18,392]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Int64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UInt8","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt8",18,530],[".",17],["AtomicRepresentation",18,149],[".",17],["Value",18,393]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt8",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UInt16","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt16",18,532],[".",17],["AtomicRepresentation",18,150],[".",17],["Value",18,394]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt16",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UInt32","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt32",18,533],[".",17],["AtomicRepresentation",18,151],[".",17],["Value",18,395]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt32",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["UInt64","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt64",18,534],[".",17],["AtomicRepresentation",18,152],[".",17],["Value",18,396]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["UInt64",18],[".",17],["AtomicRepresentation",18],[".",17],["Value",18]],"o":82},{"p":["Unmanaged","AtomicRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18,153],[".",17],["Value",18,397]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":82},{"p":["Unmanaged","AtomicOptionalRepresentation","dispose()"],"f":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18,154],[".",17],["Value",18,398]],"s":[["func",12],[" ",17],["dispose",7],["() -> ",17],["Unmanaged",18],["<",17],["Instance",18],[">.",17],["AtomicOptionalRepresentation",18],[".",17],["Value",18]],"g":[["Instance",0,0]],"o":82},{"p":["UnsafePointer","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Pointee",0,0]],"o":6},{"p":["UnsafePointer","AtomicOptionalRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafePointer",18,415],["<",17],["Pointee",18],[">?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Pointee",0,0]],"o":6},{"p":["UnsafeRawPointer","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeRawPointer",18,426]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UnsafeRawPointer","AtomicOptionalRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeRawPointer",18,426],["?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["RawRepresentable","AtomicRepresentation"],"f":[["typealias",12],[" ",17],["AtomicRepresentation",7],[" = ",17],["AtomicRawRepresentableStorage",18,14],["<",17],["Self",18],[">",17]],"s":[["typealias",12],[" ",17],["AtomicRepresentation",7]],"e":[["Self",1,"AtomicValue",0],["Self.RawValue",1,"AtomicValue",0]],"c":[["Self",1,"AtomicValue",0],["Self.RawValue",1,"AtomicValue",0]]},{"p":["Bool","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Bool",18,434]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Int","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int",18,435]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UnsafeMutablePointer","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Pointee",0,0]],"o":6},{"p":["UnsafeMutablePointer","AtomicOptionalRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeMutablePointer",18,437],["<",17],["Pointee",18],[">?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Pointee",0,0]],"o":6},{"p":["Optional","AtomicRepresentation"],"f":[["typealias",12],[" ",17],["AtomicRepresentation",7],[" = ",17],["Wrapped",18],[".",17],["AtomicOptionalRepresentation",18]],"s":[["typealias",12],[" ",17],["AtomicRepresentation",7]],"e":[["Wrapped",1,"AtomicOptionalWrappable",4]],"c":[["Wrapped",1,"AtomicOptionalWrappable",4]],"g":[["Wrapped",0,0]],"o":5},{"p":["UInt","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt",18,439]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UnsafeMutableRawPointer","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeMutableRawPointer",18,440]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UnsafeMutableRawPointer","AtomicOptionalRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UnsafeMutableRawPointer",18,440],["?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Int8","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int8",18,526]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Int16","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int16",18,527]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Int32","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int32",18,528]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Int64","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int64",18,529]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UInt8","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt8",18,530]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UInt16","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt16",18,532]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UInt32","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt32",18,533]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["UInt64","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["UInt64",18,534]],"s":[["typealias",12],[" ",17],["Value",7]],"o":6},{"p":["Unmanaged","AtomicRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Instance",0,0]],"o":6},{"p":["Unmanaged","AtomicOptionalRepresentation","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Unmanaged",18,557],["<",17],["Instance",18],[">?",17]],"s":[["typealias",12],[" ",17],["Value",7]],"g":[["Instance",0,0]],"o":6}],"edges":{"conformer":[1,0,[],1,400,[],1,402,[],1,416,[],1,436,[],1,441,[],1,450,[],1,479,[],1,512,[],1,519,[],1,522,[],1,523,[],3,2,[],4,0,[],8,535,[["Value",1,"AtomicValue",0],["Value",1,"Sendable",535]],9,400,[],9,416,[],9,519,[],9,535,[],10,400,[],10,416,[],10,519,[],10,535,[],11,400,[],11,416,[],11,519,[],11,535,[],12,535,[["Instance",1,"Sendable",535]],13,535,[],14,2,[],134,2,[],134,2,[],134,535,[],135,2,[],135,2,[],135,535,[],136,2,[],136,2,[],136,535,[],137,2,[],137,2,[],137,535,[],138,2,[],138,2,[],138,535,[],139,2,[],139,2,[],139,3,[],139,3,[],139,535,[],140,2,[],140,2,[],140,535,[],141,2,[],141,2,[],141,535,[],142,2,[],142,2,[],142,3,[],142,3,[],142,535,[],143,2,[],143,2,[],143,535,[],144,2,[],144,2,[],144,535,[],145,2,[],145,2,[],145,3,[],145,3,[],145,535,[],146,2,[],146,2,[],146,3,[],146,3,[],146,535,[],147,2,[],147,2,[],147,3,[],147,3,[],147,535,[],148,2,[],148,2,[],148,3,[],148,3,[],148,535,[],149,2,[],149,2,[],149,3,[],149,3,[],149,535,[],150,2,[],150,2,[],150,3,[],150,3,[],150,535,[],151,2,[],151,2,[],151,3,[],151,3,[],151,535,[],152,2,[],152,2,[],152,3,[],152,3,[],152,535,[],153,2,[],153,2,[],153,535,[],154,2,[],154,2,[],154,535,[],399,400,[],399,416,[],399,519,[],415,0,[],415,4,[],426,0,[],426,4,[],434,0,[],435,0,[],435,1,[],437,0,[],437,4,[],438,0,[["Wrapped",1,"AtomicOptionalWrappable",4]],439,0,[],439,1,[],440,0,[],440,4,[],526,0,[],526,1,[],527,0,[],527,1,[],528,0,[],528,1,[],529,0,[],529,1,[],530,0,[],530,1,[],532,0,[],532,1,[],533,0,[],533,1,[],534,0,[],534,1,[],557,0,[],557,4,[]],"feature":[407,415,407,435,407,437,407,439,407,526,407,527,407,528,407,529,407,530,407,532,407,533,407,534,408,415,408,435,408,437,408,439,408,526,408,527,408,528,408,529,408,530,408,532,408,533,408,534,409,415,409,435,409,437,409,439,409,526,409,527,409,528,409,529,409,530,409,532,409,533,409,534,410,415,410,435,410,437,410,439,410,526,410,527,410,528,410,529,410,530,410,532,410,533,410,534,411,415,411,435,411,437,411,439,411,526,411,527,411,528,411,529,411,530,411,532,411,533,411,534,412,415,412,435,412,437,412,439,412,526,412,527,412,528,412,529,412,530,412,532,412,533,412,534,413,415,413,435,413,437,413,439,413,526,413,527,413,528,413,529,413,530,413,532,413,533,413,534,414,415,414,435,414,437,414,439,414,526,414,527,414,528,414,529,414,530,414,532,414,533,414,534,418,9,418,10,418,11,418,399,418,415,418,437,420,439,420,530,420,532,420,533,420,534,421,439,421,530,421,532,421,533,421,534,422,439,422,530,422,532,422,533,422,534,423,439,423,530,423,532,423,533,423,534,424,439,424,530,424,532,424,533,424,534,425,439,425,530,425,532,425,533,425,534,428,435,428,526,428,527,428,528,428,529,429,435,429,526,429,527,429,528,429,529,430,435,430,526,430,527,430,528,430,529,431,435,431,526,431,527,431,528,431,529,432,435,432,526,432,527,432,528,432,529,433,435,433,526,433,527,433,528,433,529,442,415,442,435,442,437,442,439,442,526,442,527,442,528,442,529,442,530,442,532,442,533,442,534,443,415,443,435,443,437,443,439,443,526,443,527,443,528,443,529,443,530,443,532,443,533,443,534,444,415,444,437,445,415,445,437,446,415,446,437,447,415,447,437,448,415,448,437,449,415,449,437,452,435,452,439,452,526,452,527,452,528,452,529,452,530,452,532,452,533,452,534,455,439,455,530,455,532,455,533,455,534,456,435,456,439,456,526,456,527,456,528,456,529,456,530,456,532,456,533,456,534,457,435,457,439,457,526,457,527,457,528,457,529,457,530,457,532,457,533,457,534,458,435,458,439,458,526,458,527,458,528,458,529,458,530,458,532,458,533,458,534,459,435,459,439,459,526,459,527,459,528,459,529,459,530,459,532,459,533,459,534,460,435,460,439,460,526,460,527,460,528,460,529,460,530,460,532,460,533,460,534,461,435,461,439,461,526,461,527,461,528,461,529,461,530,461,532,461,533,461,534,462,435,462,439,462,526,462,527,462,528,462,529,462,530,462,532,462,533,462,534,463,435,463,439,463,526,463,527,463,528,463,529,463,530,463,532,463,533,463,534,464,435,464,439,464,526,464,527,464,528,464,529,464,530,464,532,464,533,464,534,465,435,465,439,465,526,465,527,465,528,465,529,465,530,465,532,465,533,465,534,466,435,466,439,466,526,466,527,466,528,466,529,466,530,466,532,466,533,466,534,467,435,467,439,467,526,467,527,467,528,467,529,467,530,467,532,467,533,467,534,468,435,468,439,468,526,468,527,468,528,468,529,468,530,468,532,468,533,468,534,469,435,469,439,469,526,469,527,469,528,469,529,469,530,469,532,469,533,469,534,470,435,470,439,470,526,470,527,470,528,470,529,470,530,470,532,470,533,470,534,471,435,471,439,471,526,471,527,471,528,471,529,471,530,471,532,471,533,471,534,472,435,472,439,472,526,472,527,472,528,472,529,472,530,472,532,472,533,472,534,473,439,473,526,473,527,473,528,473,529,473,530,473,532,473,533,473,534,474,439,474,526,474,527,474,528,474,529,474,530,474,532,474,533,474,534,475,435,475,439,475,526,475,527,475,528,475,529,475,530,475,532,475,533,475,534,476,435,476,526,476,527,476,528,476,529,477,435,477,526,477,527,477,528,477,529,480,435,480,439,480,526,480,527,480,528,480,529,480,530,480,532,480,533,480,534,481,435,481,439,481,526,481,527,481,528,481,529,481,530,481,532,481,533,481,534,482,435,482,439,482,526,482,527,482,528,482,529,482,530,482,532,482,533,482,534,483,435,483,439,483,526,483,527,483,528,483,529,483,530,483,532,483,533,483,534,484,435,484,439,484,526,484,527,484,528,484,529,484,530,484,532,484,533,484,534,485,435,485,439,485,526,485,527,485,528,485,529,485,530,485,532,485,533,485,534,486,435,486,439,486,526,486,527,486,528,486,529,486,530,486,532,486,533,486,534,487,435,487,439,487,526,487,527,487,528,487,529,487,530,487,532,487,533,487,534,488,435,488,439,488,526,488,527,488,528,488,529,488,530,488,532,488,533,488,534,489,435,489,439,489,526,489,527,489,528,489,529,489,530,489,532,489,533,489,534,490,435,490,439,490,526,490,527,490,528,490,529,490,530,490,532,490,533,490,534,491,435,491,439,491,526,491,527,491,528,491,529,491,530,491,532,491,533,491,534,492,435,492,439,492,526,492,527,492,528,492,529,492,530,492,532,492,533,492,534,493,435,493,439,493,526,493,527,493,528,493,529,493,530,493,532,493,533,493,534,494,435,494,439,494,526,494,527,494,528,494,529,494,530,494,532,494,533,494,534,495,435,495,439,495,526,495,527,495,528,495,529,495,530,495,532,495,533,495,534,496,435,496,439,496,526,496,527,496,528,496,529,496,530,496,532,496,533,496,534,497,435,497,439,497,526,497,527,497,528,497,529,497,530,497,532,497,533,497,534,498,435,498,439,498,526,498,527,498,528,498,529,498,530,498,532,498,533,498,534,499,435,499,439,499,526,499,527,499,528,499,529,499,530,499,532,499,533,499,534,500,435,500,439,500,526,500,527,500,528,500,529,500,530,500,532,500,533,500,534,501,435,501,439,501,526,501,527,501,528,501,529,501,530,501,532,501,533,501,534,502,435,502,439,502,526,502,527,502,528,502,529,502,530,502,532,502,533,502,534,503,435,503,439,503,526,503,527,503,528,503,529,503,530,503,532,503,533,503,534,504,435,504,439,504,526,504,527,504,528,504,529,504,530,504,532,504,533,504,534,505,435,505,439,505,526,505,527,505,528,505,529,505,530,505,532,505,533,505,534,506,435,506,439,506,526,506,527,506,528,506,529,506,530,506,532,506,533,506,534,507,435,507,439,507,526,507,527,507,528,507,529,507,530,507,532,507,533,507,534,508,435,508,439,508,526,508,527,508,528,508,529,508,530,508,532,508,533,508,534,509,435,509,439,509,526,509,527,509,528,509,529,509,530,509,532,509,533,509,534,510,435,510,439,510,526,510,527,510,528,510,529,510,530,510,532,510,533,510,534,511,435,511,439,511,526,511,527,511,528,511,529,511,530,511,532,511,533,511,534,515,435,515,439,515,526,515,527,515,528,515,529,515,530,515,532,515,533,515,534,516,435,516,439,516,526,516,527,516,528,516,529,516,530,516,532,516,533,516,534,517,435,517,439,517,526,517,527,517,528,517,529,517,530,517,532,517,533,517,534,518,435,518,439,518,526,518,527,518,528,518,529,518,530,518,532,518,533,518,534,521,9,521,10,521,11,521,399,521,435,521,439,521,526,521,527,521,528,521,529,521,530,521,532,521,533,521,534,525,435,525,439,525,526,525,527,525,528,525,529,525,530,525,532,525,533,525,534,536,415,536,426,536,437,536,440,537,415,537,426,537,437,537,440,538,415,538,426,538,437,538,440,539,415,539,426,539,437,539,440,540,415,540,426,540,437,540,440,541,415,541,426,541,437,541,440,542,415,542,426,542,437,542,440,543,415,543,426,543,437,543,440,544,415,544,426,544,437,544,440,545,415,545,426,545,437,545,440,546,415,546,426,546,437,546,440,547,415,547,426,547,437,547,440,548,415,548,426,548,437,548,440,549,415,549,426,549,437,549,440,550,415,550,437,551,415,551,426,551,437,551,440,552,415,552,426,552,437,552,440,553,415,553,426,553,437,553,440,554,415,554,426,554,437,554,440,555,415,555,426,555,437,555,440,556,415,556,426,556,437,556,440],"member":[13,12,17,8,19,15,20,12,21,13,22,16,23,14,24,9,25,9,26,9,27,10,28,10,29,10,30,11,31,11,32,11,33,11,34,11,35,9,36,10,37,11,38,8,50,12,51,14,52,14,53,14,54,14,55,14,56,14,57,8,58,8,59,8,60,8,61,8,62,8,63,8,64,8,65,8,66,8,67,8,68,8,69,8,70,8,71,8,72,8,73,8,74,8,75,8,76,8,77,8,78,8,79,8,80,8,81,8,83,15,84,15,85,15,86,15,87,15,88,15,89,15,90,15,91,15,92,15,93,15,94,15,95,15,96,15,97,15,98,15,99,15,100,15,101,15,102,15,103,15,104,15,105,15,106,15,107,9,108,10,109,11,110,12,111,12,112,13,113,12,114,16,115,16,116,14,117,9,118,10,119,11,122,8,123,12,124,16,125,399,126,399,127,399,128,399,129,399,130,399,131,399,132,399,133,399,134,415,135,415,136,426,137,426,138,434,139,435,140,437,141,437,142,439,143,440,144,440,145,526,146,527,147,528,148,529,149,530,150,532,151,533,152,534,153,557,154,557,155,134,156,135,157,136,158,137,159,138,160,139,161,140,162,141,163,142,164,143,165,144,166,145,167,146,168,147,169,148,170,149,171,150,172,151,173,152,174,153,175,154,176,134,177,134,178,134,179,134,180,134,181,134,182,135,183,135,184,135,185,135,186,135,187,135,188,136,189,136,190,136,191,136,192,136,193,136,194,137,195,137,196,137,197,137,198,137,199,137,200,138,201,138,202,138,203,138,204,138,205,138,206,138,207,138,208,138,209,139,210,139,211,139,212,139,213,139,214,139,215,139,216,139,217,139,218,139,219,139,220,140,221,140,222,140,223,140,224,140,225,140,226,141,227,141,228,141,229,141,230,141,231,141,232,142,233,142,234,142,235,142,236,142,237,142,238,142,239,142,240,142,241,142,242,142,243,143,244,143,245,143,246,143,247,143,248,143,249,144,250,144,251,144,252,144,253,144,254,144,255,145,256,145,257,145,258,145,259,145,260,145,261,145,262,145,263,145,264,145,265,145,266,146,267,146,268,146,269,146,270,146,271,146,272,146,273,146,274,146,275,146,276,146,277,147,278,147,279,147,280,147,281,147,282,147,283,147,284,147,285,147,286,147,287,147,288,148,289,148,290,148,291,148,292,148,293,148,294,148,295,148,296,148,297,148,298,148,299,149,300,149,301,149,302,149,303,149,304,149,305,149,306,149,307,149,308,149,309,149,310,150,311,150,312,150,313,150,314,150,315,150,316,150,317,150,318,150,319,150,320,150,321,151,322,151,323,151,324,151,325,151,326,151,327,151,328,151,329,151,330,151,331,151,332,152,333,152,334,152,335,152,336,152,337,152,338,152,339,152,340,152,341,152,342,152,343,153,344,153,345,153,346,153,347,153,348,153,349,154,350,154,351,154,352,154,353,154,354,154,355,134,356,135,357,136,358,137,359,138,360,139,361,140,362,141,363,142,364,143,365,144,366,145,367,146,368,147,369,148,370,149,371,150,372,151,373,152,374,153,375,154,376,134,377,135,378,136,379,137,380,427,381,138,382,139,383,140,384,141,385,438,386,142,387,143,388,144,389,145,390,146,391,147,392,148,393,149,394,150,395,151,396,152,397,153,398,154],"requirement":[5,0,6,2,7,4,18,2,39,2,40,2,41,2,42,2,43,2,44,2,45,3,46,3,47,3,48,3,49,3,82,2]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/AtomicInteger.swift","symbols":[22,16,1,33,16,3,47,14,49,66,14,48,82,14,46,98,14,45,114,14,47]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/AtomicMemoryOrderings.swift","symbols":[16,14,9,39,20,25,52,20,26,65,20,24,72,21,117,79,14,107,85,13,35,99,14,10,122,20,28,135,20,29,148,20,27,155,21,118,162,14,108,168,13,36,183,14,11,206,20,32,219,20,33,232,20,34,243,20,30,257,20,31,264,21,119,271,14,109,277,13,37,309,12,120]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/AtomicOptional.swift","symbols":[16,16,4,18,17,7,23,19,385]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/AtomicRawRepresentable.swift","symbols":[13,19,380,19,14,14,26,9,23,31,14,116,45,21,51,55,21,52,65,21,53,76,21,55,92,21,54,110,21,56]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/AtomicValue.swift","symbols":[14,16,0,15,17,5,33,16,2,35,17,6,42,2,18,55,19,82,65,14,39,78,14,40,93,14,41,125,14,43,165,14,42,210,14,44]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/DoubleWord.swift","symbols":[14,17,121,20,9,125,27,9,126,40,13,129,50,13,128,59,13,130,79,13,131,99,21,133,106,14,132,113,13,127]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/autogenerated/AtomicBool.swift","symbols":[24,16,138,25,21,381,30,11,159,35,16,359,56,21,200,74,21,201,93,21,202,116,21,204,153,21,203,250,21,208,361,21,206,402,21,205,443,21,207,484,14,78,501,14,76,518,14,79,538,14,80,556,14,77,574,14,81,594,14,103,611,14,101,628,14,104,648,14,105,666,14,102,684,14,106]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/autogenerated/AtomicLazyReference.swift","symbols":[26,14,12,28,19,123,46,9,20,60,16,13,71,11,21,88,25,112,104,21,50,120,14,113,135,13,16,137,19,124,147,9,22,182,14,110,202,14,111,232,14,114,252,14,115]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/autogenerated/HighLevelTypes.swift","symbols":[22,14,8,23,19,122,38,9,17,52,21,38,67,14,62,81,13,15,88,9,19,112,14,60,125,14,61,140,14,63,172,14,58,216,14,57,265,14,59,292,14,73,312,14,72,329,14,70,346,14,65,363,14,71,384,14,75,405,14,74,423,14,68,441,14,64,459,14,69,480,14,67,500,14,66,518,14,86,531,14,87,546,14,88,578,14,84,622,14,83,671,14,85,698,14,98,718,14,97,735,14,95,752,14,90,769,14,96,790,14,100,811,14,99,829,14,93,847,14,89,865,14,94,886,14,92,906,14,91]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/autogenerated/IntegerConformances.swift","symbols":[23,16,139,24,21,382,30,11,160,35,16,360,54,21,209,72,21,210,91,21,211,114,21,213,151,21,212,248,21,217,350,21,219,383,21,218,416,21,215,449,21,214,482,21,216,516,16,148,517,21,392,523,11,169,528,16,369,547,21,288,565,21,289,584,21,290,607,21,292,644,21,291,741,21,296,843,21,298,876,21,297,909,21,294,942,21,293,975,21,295,1009,16,147,1010,21,391,1016,11,168,1021,16,368,1040,21,277,1058,21,278,1077,21,279,1100,21,281,1137,21,280,1234,21,285,1336,21,287,1369,21,286,1402,21,283,1435,21,282,1468,21,284,1502,16,146,1503,21,390,1509,11,167,1514,16,367,1533,21,266,1551,21,267,1570,21,268,1593,21,270,1630,21,269,1727,21,274,1829,21,276,1862,21,275,1895,21,272,1928,21,271,1961,21,273,1995,16,145,1996,21,389,2002,11,166,2007,16,366,2026,21,255,2044,21,256,2063,21,257,2086,21,259,2123,21,258,2220,21,263,2322,21,265,2355,21,264,2388,21,261,2421,21,260,2454,21,262,2488,16,142,2489,21,386,2495,11,163,2500,16,363,2519,21,232,2537,21,233,2556,21,234,2579,21,236,2616,21,235,2713,21,240,2815,21,242,2848,21,241,2881,21,238,2914,21,237,2947,21,239,2981,16,152,2982,21,396,2988,11,173,2993,16,373,3012,21,332,3030,21,333,3049,21,334,3072,21,336,3109,21,335,3206,21,340,3308,21,342,3341,21,341,3374,21,338,3407,21,337,3440,21,339,3474,16,151,3475,21,395,3481,11,172,3486,16,372,3505,21,321,3523,21,322,3542,21,323,3565,21,325,3602,21,324,3699,21,329,3801,21,331,3834,21,330,3867,21,327,3900,21,326,3933,21,328,3967,16,150,3968,21,394,3974,11,171,3979,16,371,3998,21,310,4016,21,311,4035,21,312,4058,21,314,4095,21,313,4192,21,318,4294,21,320,4327,21,319,4360,21,316,4393,21,315,4426,21,317,4460,16,149,4461,21,393,4467,11,170,4472,16,370,4491,21,299,4509,21,300,4528,21,301,4551,21,303,4588,21,302,4685,21,307,4787,21,309,4820,21,308,4853,21,305,4886,21,304,4919,21,306]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-atomics@1.0.2/.build/checkouts/swift-atomics/Sources/Atomics/autogenerated/PointerConformances.swift","symbols":[22,16,136,23,21,378,30,11,157,35,16,357,66,21,188,76,21,189,86,21,190,96,21,192,112,21,191,130,21,193,148,16,143,149,21,387,156,11,164,161,16,364,192,21,243,202,21,244,212,21,245,222,21,247,238,21,246,256,21,248,274,16,134,275,21,376,282,11,155,287,16,355,318,21,176,328,21,177,338,21,178,348,21,180,364,21,179,382,21,181,400,16,140,401,21,383,408,11,161,413,16,361,444,21,220,454,21,221,464,21,222,474,21,224,490,21,223,508,21,225,526,16,153,527,21,397,534,11,174,539,16,374,570,21,343,580,21,344,590,21,345,600,21,347,616,21,346,634,21,348,654,16,137,655,21,379,662,11,158,667,16,358,699,21,194,709,21,195,719,21,196,729,21,198,745,21,197,763,21,199,781,16,144,782,21,388,789,11,165,794,16,365,826,21,249,836,21,250,846,21,251,856,21,253,872,21,252,890,21,254,908,16,135,909,21,377,916,11,156,921,16,356,953,21,182,963,21,183,973,21,184,983,21,186,999,21,185,1017,21,187,1035,16,141,1036,21,384,1043,11,162,1048,16,362,1080,21,226,1090,21,227,1100,21,228,1110,21,230,1126,21,229,1144,21,231,1162,16,154,1163,21,398,1170,11,175,1175,16,375,1210,21,349,1220,21,350,1230,21,351,1240,21,353,1256,21,352,1274,21,354]}]}