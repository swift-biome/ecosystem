{"culture":"SwiftSyntaxBuilder","dependencies":[{"package":"swift-syntax","modules":["SwiftSyntax"]}],"extensions":[],"partitions":[{"namespace":"Swift","communities":[{"community":"method","startIndex":0,"endIndex":50}]},{"namespace":"SwiftSyntax","communities":[{"community":"type.property","startIndex":50,"endIndex":157},{"community":"type.method","startIndex":157,"endIndex":171},{"community":"method","startIndex":171,"endIndex":178}]},{"namespace":"SwiftSyntaxBuilder","communities":[{"community":"protocol","startIndex":178,"endIndex":439},{"community":"struct","startIndex":439,"endIndex":725},{"community":"init","startIndex":725,"endIndex":1141},{"community":"property","startIndex":1141,"endIndex":1142},{"community":"type.method","startIndex":1142,"endIndex":1486},{"community":"method","startIndex":1486,"endIndex":2916},{"community":"typealias","startIndex":2916,"endIndex":3045}]}],"identifiers":["sSS18SwiftSyntaxBuilderE06createB9BuildableAA0bE0_pyF","sSS18SwiftSyntaxBuilderE18createReturnClauseAA0eF0VyF","sSS18SwiftSyntaxBuilderE19createExprBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE19createTypeBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE20createIdentifierExprAA0eF0VyF","sSS18SwiftSyntaxBuilderE22createPatternBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE23createIdentifierPatternAA0eF0VyF","sSS18SwiftSyntaxBuilderE23createStringLiteralExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE24createBinaryOperatorExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE25createAccessPathComponentAA0efG0VyF","sSS18SwiftSyntaxBuilderE26createSimpleTypeIdentifierAA0efG0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE014createNonEmptyD4ListAA0fgdH0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE06createD4ListAA0dF0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE20createIdentifierListAA0fG0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE19createAttributeListAA0hI0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE20createSwitchCaseListAA0hiJ0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE27createStringLiteralSegmentsAA0hiJ0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE33createSpecializeAttributeSpecListAA0hijK0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE34createPrecedenceGroupAttributeListAA0hijK0VyF","sSa18SwiftSyntaxBuilderAA21ExpressibleAsCaseItem_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA22ExpressibleAsCatchItem_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA24ExpressibleAsCatchClause_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA25ExpressibleAsArrayElement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA25ExpressibleAsClosureParam_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA25ExpressibleAsDeclModifier_pRszlE06createG4ListAA0gI0VyF","sSa18SwiftSyntaxBuilderAA26ExpressibleAsInheritedType_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA26ExpressibleAsObjcNamePiece_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA27ExpressibleAsIfConfigClause_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA27ExpressibleAsPatternBinding_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA28ExpressibleAsEnumCaseElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA28ExpressibleAsGenericArgument_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsConditionElement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsDeclNameArgument_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsGenericParameter_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsTupleExprElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsTupleTypeElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsDictionaryElement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsFunctionParameter_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsObjCSelectorPiece_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA31ExpressibleAsClosureCaptureItem_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA31ExpressibleAsGenericRequirement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA32ExpressibleAsAccessPathComponent_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA32ExpressibleAsTuplePatternElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA33ExpressibleAsAvailabilityArgument_pRszlE06createF8SpecListAA0fiJ0VyF","sSa18SwiftSyntaxBuilderAA34ExpressibleAsPrimaryAssociatedType_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA35ExpressibleAsCompositionTypeElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA35ExpressibleAsDifferentiabilityParam_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA38ExpressibleAsBackDeployVersionArgument_pRszlE06createfgH4ListAA0fghK0VyF","sSa18SwiftSyntaxBuilderAA39ExpressibleAsPrecedenceGroupNameElement_pRszlE06createfgH4ListAA0fghK0VyF","sSa18SwiftSyntaxBuilderAA43ExpressibleAsMultipleTrailingClosureElement_pRszlE06createfghI4ListAA0fghiK0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundEndifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundErrorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11capitalSelfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fallthroughACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fileprivateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundAssertACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundColumnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundElseifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundFileIDACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11singleQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11stringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundKeyPathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundWarningACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12prefixPeriodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFilePathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFunctionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundSelectorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14associatedtypeACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundAvailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundDsohandleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15exclamationMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15precedencegroupACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15prefixAmpersandACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundFileLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundUnavailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17infixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17leftSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundColorLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundImageLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE18rightSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19postfixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19poundSourceLocationACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE20multilineStringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE25stringInterpolationAnchorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2asACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2doACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2ifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2inACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2isACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3anyACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3eofACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3forACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3letACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3nilACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3tryACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3varACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4caseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4elseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4enumACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4funcACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4initACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4openACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4selfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4trueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5arrowACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5breakACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5catchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5classACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5colonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5commaACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5deferACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5equalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5falseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5guardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5inoutACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5poundACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5superACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5throwACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whereACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5yieldACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6atSignACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6deinitACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6importACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6periodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6publicACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6repeatACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6returnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6staticACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6structACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6switchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6throwsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7defaultACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7poundIfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7privateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8backtickACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8continueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8ellipsisACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8internalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8operatorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8protocolACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8rethrowsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8wildcardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9backslashACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9extensionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundElseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundFileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundLineACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9semicolonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9subscriptACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9typealiasACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10identifieryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12regexLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13stringLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13stringSegmentyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14integerLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14prefixOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15floatingLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15postfixOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16dollarIdentifieryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17contextualKeywordyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE18rawStringDelimiteryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE20spacedBinaryOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE22unspacedBinaryOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7unknownyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE014createNonEmptyC4ListAD0fgcH0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createB9BuildableAD0bF0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createC4ListAD0cF0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE18createDeclModifierAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE19createExprBuildableAD0fG0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE20createIdentifierExprAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE24createBinaryOperatorExprAD0fgH0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP","s18SwiftSyntaxBuilder0B13ListBuildableP","s18SwiftSyntaxBuilder0B9BuildableP","s18SwiftSyntaxBuilder13DeclBuildableP","s18SwiftSyntaxBuilder13ExprBuildableP","s18SwiftSyntaxBuilder13StmtBuildableP","s18SwiftSyntaxBuilder13TypeBuildableP","s18SwiftSyntaxBuilder16HasTrailingCommaP","s18SwiftSyntaxBuilder16PatternBuildableP","s18SwiftSyntaxBuilder17DeclListBuildableP","s18SwiftSyntaxBuilder17ExprListBuildableP","s18SwiftSyntaxBuilder17StmtListBuildableP","s18SwiftSyntaxBuilder17TypeListBuildableP","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP","s18SwiftSyntaxBuilder20PatternListBuildableP","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP","s18SwiftSyntaxBuilder21ExpressibleAsExprListP","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypeP","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP","s18SwiftSyntaxBuilder34ExpressibleAsBackDeployVersionListP","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentP","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListP","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClauseP","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP","s18SwiftSyntaxBuilder010AccessPathC0V","s18SwiftSyntaxBuilder012AccessorListC0V","s18SwiftSyntaxBuilder012CaseItemListC0V","s18SwiftSyntaxBuilder012ModifierListC0V","s18SwiftSyntaxBuilder012ObjCSelectorC0V","s18SwiftSyntaxBuilder013AttributeListC0V","s18SwiftSyntaxBuilder013CatchItemListC0V","s18SwiftSyntaxBuilder014IdentifierListC0V","s18SwiftSyntaxBuilder014MemberDeclListC0V","s18SwiftSyntaxBuilder014SwitchCaseListC0V","s18SwiftSyntaxBuilder015CatchClauseListC0V","s18SwiftSyntaxBuilder016ArrayElementListC0V","s18SwiftSyntaxBuilder016ClosureParamListC0V","s18SwiftSyntaxBuilder017CodeBlockItemListC0V","s18SwiftSyntaxBuilder017InheritedTypeListC0V","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V","s18SwiftSyntaxBuilder018IfConfigClauseListC0V","s18SwiftSyntaxBuilder018PatternBindingListC0V","s18SwiftSyntaxBuilder019EnumCaseElementListC0V","s18SwiftSyntaxBuilder019GenericArgumentListC0V","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V","s18SwiftSyntaxBuilder020ConditionElementListC0V","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V","s18SwiftSyntaxBuilder020GenericParameterListC0V","s18SwiftSyntaxBuilder020TupleExprElementListC0V","s18SwiftSyntaxBuilder020TupleTypeElementListC0V","s18SwiftSyntaxBuilder021BackDeployVersionListC0V","s18SwiftSyntaxBuilder021DictionaryElementListC0V","s18SwiftSyntaxBuilder021FunctionParameterListC0V","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V","s18SwiftSyntaxBuilder022GenericRequirementListC0V","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V","s18SwiftSyntaxBuilder023TuplePatternElementListC0V","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V","s18SwiftSyntaxBuilder08ExprListC0V","s18SwiftSyntaxBuilder08ObjcNameC0V","s18SwiftSyntaxBuilder09TokenListC0V","s18SwiftSyntaxBuilder10AccessPathV","s18SwiftSyntaxBuilder10ImportDeclV","s18SwiftSyntaxBuilder10ReturnStmtV","s18SwiftSyntaxBuilder10SourceFileV","s18SwiftSyntaxBuilder10StructDeclV","s18SwiftSyntaxBuilder10SwitchCaseV","s18SwiftSyntaxBuilder10SwitchStmtV","s18SwiftSyntaxBuilder11CatchClauseV","s18SwiftSyntaxBuilder11ClosureExprV","s18SwiftSyntaxBuilder11KeyPathExprV","s18SwiftSyntaxBuilder11TernaryExprV","s18SwiftSyntaxBuilder11WhereClauseV","s18SwiftSyntaxBuilder12AccessorDeclV","s18SwiftSyntaxBuilder12AccessorListV","s18SwiftSyntaxBuilder12ArrayElementV","s18SwiftSyntaxBuilder12CaseItemListV","s18SwiftSyntaxBuilder12ClosureParamV","s18SwiftSyntaxBuilder12ContinueStmtV","s18SwiftSyntaxBuilder12DeclModifierV","s18SwiftSyntaxBuilder12EnumCaseDeclV","s18SwiftSyntaxBuilder12FunctionDeclV","s18SwiftSyntaxBuilder12FunctionTypeV","s18SwiftSyntaxBuilder12IfConfigDeclV","s18SwiftSyntaxBuilder12MetatypeTypeV","s18SwiftSyntaxBuilder12ModifierListV","s18SwiftSyntaxBuilder12ObjCSelectorV","s18SwiftSyntaxBuilder12OperatorDeclV","s18SwiftSyntaxBuilder12OptionalTypeV","s18SwiftSyntaxBuilder12ProtocolDeclV","s18SwiftSyntaxBuilder12ReturnClauseV","s18SwiftSyntaxBuilder12SequenceExprV","s18SwiftSyntaxBuilder12SuperRefExprV","s18SwiftSyntaxBuilder12TuplePatternV","s18SwiftSyntaxBuilder12VariableDeclV","s18SwiftSyntaxBuilder12VersionTupleV","s18SwiftSyntaxBuilder13AccessorBlockV","s18SwiftSyntaxBuilder13AsTypePatternV","s18SwiftSyntaxBuilder13AttributeListV","s18SwiftSyntaxBuilder13CatchItemListV","s18SwiftSyntaxBuilder13CodeBlockItemV","s18SwiftSyntaxBuilder13ExtensionDeclV","s18SwiftSyntaxBuilder13InheritedTypeV","s18SwiftSyntaxBuilder13IsTypePatternV","s18SwiftSyntaxBuilder13ObjcNamePieceV","s18SwiftSyntaxBuilder13PoundFileExprV","s18SwiftSyntaxBuilder13PoundLineExprV","s18SwiftSyntaxBuilder13StringSegmentV","s18SwiftSyntaxBuilder13SubscriptDeclV","s18SwiftSyntaxBuilder13SubscriptExprV","s18SwiftSyntaxBuilder13TypealiasDeclV","s18SwiftSyntaxBuilder14AssignmentExprV","s18SwiftSyntaxBuilder14AttributedTypeV","s18SwiftSyntaxBuilder14DictionaryExprV","s18SwiftSyntaxBuilder14DictionaryTypeV","s18SwiftSyntaxBuilder14ExpressionStmtV","s18SwiftSyntaxBuilder14IdentifierExprV","s18SwiftSyntaxBuilder14IdentifierListV","s18SwiftSyntaxBuilder14IfConfigClauseV","s18SwiftSyntaxBuilder14MemberDeclListV","s18SwiftSyntaxBuilder14NilLiteralExprV","s18SwiftSyntaxBuilder14PatternBindingV","s18SwiftSyntaxBuilder14PoundErrorDeclV","s18SwiftSyntaxBuilder14SpecializeExprV","s18SwiftSyntaxBuilder14SwitchCaseListV","s18SwiftSyntaxBuilder14TypeAnnotationV","s18SwiftSyntaxBuilder15CatchClauseListV","s18SwiftSyntaxBuilder15CompositionTypeV","s18SwiftSyntaxBuilder15CustomAttributeV","s18SwiftSyntaxBuilder15DeclarationStmtV","s18SwiftSyntaxBuilder15EnumCaseElementV","s18SwiftSyntaxBuilder15EnumCasePatternV","s18SwiftSyntaxBuilder15FallthroughStmtV","s18SwiftSyntaxBuilder15ForcedValueExprV","s18SwiftSyntaxBuilder15GenericArgumentV","s18SwiftSyntaxBuilder15InitializerDeclV","s18SwiftSyntaxBuilder15KeyPathBaseExprV","s18SwiftSyntaxBuilder15MemberDeclBlockV","s18SwiftSyntaxBuilder15ObjcKeyPathExprV","s18SwiftSyntaxBuilder15OptionalPatternV","s18SwiftSyntaxBuilder15ParameterClauseV","s18SwiftSyntaxBuilder15PoundAssertStmtV","s18SwiftSyntaxBuilder15PoundColumnExprV","s18SwiftSyntaxBuilder15PoundFileIDExprV","s18SwiftSyntaxBuilder15RepeatWhileStmtV","s18SwiftSyntaxBuilder15SwitchCaseLabelV","s18SwiftSyntaxBuilder15WildcardPatternV","s18SwiftSyntaxBuilder16ArrayElementListV","s18SwiftSyntaxBuilder16ClosureParamListV","s18SwiftSyntaxBuilder16ClosureSignatureV","s18SwiftSyntaxBuilder16ConditionElementV","s18SwiftSyntaxBuilder16DeclNameArgumentV","s18SwiftSyntaxBuilder16FloatLiteralExprV","s18SwiftSyntaxBuilder16FunctionCallExprV","s18SwiftSyntaxBuilder16FunctionDeclNameV","s18SwiftSyntaxBuilder16GenericParameterV","s18SwiftSyntaxBuilder16MemberAccessExprV","s18SwiftSyntaxBuilder16ObjcSelectorExprV","s18SwiftSyntaxBuilder16PostfixUnaryExprV","s18SwiftSyntaxBuilder16PoundWarningDeclV","s18SwiftSyntaxBuilder16RegexLiteralExprV","s18SwiftSyntaxBuilder16TupleExprElementV","s18SwiftSyntaxBuilder16TupleTypeElementV","s18SwiftSyntaxBuilder17AccessorParameterV","s18SwiftSyntaxBuilder17AvailabilityEntryV","s18SwiftSyntaxBuilder17CodeBlockItemListV","s18SwiftSyntaxBuilder17DeclNameArgumentsV","s18SwiftSyntaxBuilder17DeinitializerDeclV","s18SwiftSyntaxBuilder17DictionaryElementV","s18SwiftSyntaxBuilder17ExpressionPatternV","s18SwiftSyntaxBuilder17ExpressionSegmentV","s18SwiftSyntaxBuilder17FunctionParameterV","s18SwiftSyntaxBuilder17FunctionSignatureV","s18SwiftSyntaxBuilder17IdentifierPatternV","s18SwiftSyntaxBuilder17InheritedTypeListV","s18SwiftSyntaxBuilder17InitializerClauseV","s18SwiftSyntaxBuilder17NonEmptyTokenListV","s18SwiftSyntaxBuilder17ObjCSelectorPieceV","s18SwiftSyntaxBuilder17ObjectLiteralExprV","s18SwiftSyntaxBuilder17PoundFilePathExprV","s18SwiftSyntaxBuilder17PoundFunctionExprV","s18SwiftSyntaxBuilder17QualifiedDeclNameV","s18SwiftSyntaxBuilder17StringLiteralExprV","s18SwiftSyntaxBuilder18AssociatedtypeDeclV","s18SwiftSyntaxBuilder18BinaryOperatorExprV","s18SwiftSyntaxBuilder18BooleanLiteralExprV","s18SwiftSyntaxBuilder18ClosureCaptureItemV","s18SwiftSyntaxBuilder18ElseIfContinuationV","s18SwiftSyntaxBuilder18GenericRequirementV","s18SwiftSyntaxBuilder18GenericWhereClauseV","s18SwiftSyntaxBuilder18IfConfigClauseListV","s18SwiftSyntaxBuilder18IntegerLiteralExprV","s18SwiftSyntaxBuilder18MemberDeclListItemV","s18SwiftSyntaxBuilder18PatternBindingListV","s18SwiftSyntaxBuilder18PoundDsohandleExprV","s18SwiftSyntaxBuilder18PrefixOperatorExprV","s18SwiftSyntaxBuilder18SwitchDefaultLabelV","s18SwiftSyntaxBuilder19AccessLevelModifierV","s18SwiftSyntaxBuilder19AccessPathComponentV","s18SwiftSyntaxBuilder19EnumCaseElementListV","s18SwiftSyntaxBuilder19GenericArgumentListV","s18SwiftSyntaxBuilder19PostfixIfConfigExprV","s18SwiftSyntaxBuilder19PoundSourceLocationV","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV","s18SwiftSyntaxBuilder19SameTypeRequirementV","s18SwiftSyntaxBuilder19TargetFunctionEntryV","s18SwiftSyntaxBuilder19TuplePatternElementV","s18SwiftSyntaxBuilder19ValueBindingPatternV","s18SwiftSyntaxBuilder20AvailabilityArgumentV","s18SwiftSyntaxBuilder20AvailabilitySpecListV","s18SwiftSyntaxBuilder20ClassRestrictionTypeV","s18SwiftSyntaxBuilder20ConditionElementListV","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV","s18SwiftSyntaxBuilder20DeclNameArgumentListV","s18SwiftSyntaxBuilder20GenericParameterListV","s18SwiftSyntaxBuilder20MemberTypeIdentifierV","s18SwiftSyntaxBuilder20OptionalChainingExprV","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV","s18SwiftSyntaxBuilder20TupleExprElementListV","s18SwiftSyntaxBuilder20TupleTypeElementListV","s18SwiftSyntaxBuilder21AvailabilityConditionV","s18SwiftSyntaxBuilder21BackDeployVersionListV","s18SwiftSyntaxBuilder21DictionaryElementListV","s18SwiftSyntaxBuilder21DiscardAssignmentExprV","s18SwiftSyntaxBuilder21EditorPlaceholderExprV","s18SwiftSyntaxBuilder21FunctionParameterListV","s18SwiftSyntaxBuilder21GenericArgumentClauseV","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV","s18SwiftSyntaxBuilder21StringLiteralSegmentsV","s18SwiftSyntaxBuilder21SymbolicReferenceExprV","s18SwiftSyntaxBuilder21TypeInheritanceClauseV","s18SwiftSyntaxBuilder21TypeInitializerClauseV","s18SwiftSyntaxBuilder21UnresolvedPatternExprV","s18SwiftSyntaxBuilder22ClosureCaptureItemListV","s18SwiftSyntaxBuilder22CompositionTypeElementV","s18SwiftSyntaxBuilder22ConformanceRequirementV","s18SwiftSyntaxBuilder22DifferentiabilityParamV","s18SwiftSyntaxBuilder22GenericParameterClauseV","s18SwiftSyntaxBuilder22GenericRequirementListV","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV","s18SwiftSyntaxBuilder23DifferentiabilityParamsV","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV","s18SwiftSyntaxBuilder23TuplePatternElementListV","s18SwiftSyntaxBuilder23UnavailabilityConditionV","s18SwiftSyntaxBuilder24MatchingPatternConditionV","s18SwiftSyntaxBuilder24OptionalBindingConditionV","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV","s18SwiftSyntaxBuilder26CompositionTypeElementListV","s18SwiftSyntaxBuilder26DifferentiabilityParamListV","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV","s18SwiftSyntaxBuilder6AsExprV","s18SwiftSyntaxBuilder6DoStmtV","s18SwiftSyntaxBuilder6FormatV","s18SwiftSyntaxBuilder6IfStmtV","s18SwiftSyntaxBuilder6IsExprV","s18SwiftSyntaxBuilder7TryExprV","s18SwiftSyntaxBuilder8CaseItemV","s18SwiftSyntaxBuilder8DeclNameV","s18SwiftSyntaxBuilder8EnumDeclV","s18SwiftSyntaxBuilder8ExprListV","s18SwiftSyntaxBuilder8ObjcNameV","s18SwiftSyntaxBuilder8TypeExprV","s18SwiftSyntaxBuilder9ArrayExprV","s18SwiftSyntaxBuilder9ArrayTypeV","s18SwiftSyntaxBuilder9ArrowExprV","s18SwiftSyntaxBuilder9AttributeV","s18SwiftSyntaxBuilder9AwaitExprV","s18SwiftSyntaxBuilder9BreakStmtV","s18SwiftSyntaxBuilder9CatchItemV","s18SwiftSyntaxBuilder9ClassDeclV","s18SwiftSyntaxBuilder9CodeBlockV","s18SwiftSyntaxBuilder9DeferStmtV","s18SwiftSyntaxBuilder9ElseBlockV","s18SwiftSyntaxBuilder9ForInStmtV","s18SwiftSyntaxBuilder9GuardStmtV","s18SwiftSyntaxBuilder9InOutExprV","s18SwiftSyntaxBuilder9ThrowStmtV","s18SwiftSyntaxBuilder9TokenListV","s18SwiftSyntaxBuilder9TupleExprV","s18SwiftSyntaxBuilder9TupleTypeV","s18SwiftSyntaxBuilder9WhileStmtV","s18SwiftSyntaxBuilder9YieldListV","s18SwiftSyntaxBuilder9YieldStmtV","s18SwiftSyntaxBuilder10AccessPathV12arrayLiteralAcA013ExpressibleAsdE9Component_pd_tcfc","s18SwiftSyntaxBuilder10AccessPathVyACSayAA013ExpressibleAsdE9Component_pGcfc","s18SwiftSyntaxBuilder10ImportDeclV10attributes9modifiers9importTok0H4Kind4pathAcA26ExpressibleAsAttributeList_pSg_AA0lm8ModifierO0_pSg0aB005TokenB0VAOSgAA0lM10AccessPath_ptcfc","s18SwiftSyntaxBuilder10ImportDeclV9importTok0F4Kind010attributesC009modifiersC004pathC0AC0aB005TokenB0V_AKSgAA26ExpressibleAsAttributeList_pSgyXEAA0mn8ModifierP0_pSgyXEAA0mN10AccessPath_pyXEtcfc","s18SwiftSyntaxBuilder10ReturnStmtV13returnKeyword10expressionAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_pSgtcfc","s18SwiftSyntaxBuilder10SourceFileV10statements8eofTokenAcA30ExpressibleAsCodeBlockItemList_p_0aB00hB0Vtcfc","s18SwiftSyntaxBuilder10SourceFileV8eofToken010statementsC0AC0aB00gB0V_AA30ExpressibleAsCodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10StructDeclV10attributes9modifiers13structKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr7GenericlM0_pSgAA0qr15TypeInheritanceM0_pSgAA0qrwoM0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder10StructDeclV13structKeyword10identifier22genericParameterClause011inheritanceK00i5WhereK0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0rs15TypeInheritanceK0_pSgAA0rstmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEAA0rs6MembereX0_pyXEtcfc","s18SwiftSyntaxBuilder10StructDeclV13structKeyword10identifier22genericParameterClause011inheritanceK00i5WhereK07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0rs15TypeInheritanceK0_pSgAA0rstmK0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rs8ModifierZ0_pSgyXEtcfc","s18SwiftSyntaxBuilder10SwitchCaseV11unknownAttr5label010statementsC0AcA22ExpressibleAsAttribute_pSg_AA0jkB9Buildable_pAA0jK17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchCaseV11unknownAttr5label10statementsAcA22ExpressibleAsAttribute_pSg_AA0jkB9Buildable_pAA0jK17CodeBlockItemList_ptcfc","s18SwiftSyntaxBuilder10SwitchStmtV9labelName0F5Colon13switchKeyword10expression9leftBrace05rightM005casesC0ACSSSg_0aB005TokenB0VSgAnA26ExpressibleAsExprBuildable_pA2nA0qrD8CaseList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchStmtV9labelName0F5Colon13switchKeyword10expression9leftBrace5cases05rightM0AC0aB005TokenB0VSg_AnmA26ExpressibleAsExprBuildable_pAmA0qrD8CaseList_pAMtcfc","s18SwiftSyntaxBuilder11CatchClauseV12catchKeyword0F5Items4bodyAC0aB005TokenB0V_AA013ExpressibleAsD8ItemList_pSgAA0kL9CodeBlock_ptcfc","s18SwiftSyntaxBuilder11CatchClauseV12catchKeyword4body0f5ItemsC0AC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_pAA0klD8ItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV9leftBrace9signature05rightG0010statementsC0AC0aB005TokenB0V_AA013ExpressibleAsD9Signature_pSgAjA0lM17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV9leftBrace9signature10statements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD9Signature_pSgAA0lM17CodeBlockItemList_pAJtcfc","s18SwiftSyntaxBuilder11KeyPathExprV9backslash04rootF010expressionAC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_pSgAaJ_ptcfc","s18SwiftSyntaxBuilder11TernaryExprV19conditionExpression12questionMark11firstChoice05colonI006secondK0AcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAaI_pAlaI_ptcfc","s18SwiftSyntaxBuilder11WhereClauseV12whereKeyword11guardResultAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder12AccessorDeclV10attributes8modifier12accessorKind9parameter12asyncKeyword06throwsL04bodyAcA26ExpressibleAsAttributeList_pSg_AA0opE8Modifier_pSg0aB005TokenB0VAA0opD9Parameter_pSgAQSgAtA0oP9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12AccessorDeclV8modifier12accessorKind9parameter12asyncKeyword06throwsK04body010attributesC0AcA013ExpressibleAsE8Modifier_pSg_0aB005TokenB0VAA0opD9Parameter_pSgSSSgAOSgAA0oP9CodeBlock_pSgAA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder12AccessorListV12arrayLiteralAcA013ExpressibleAsD4Decl_pd_tcfc","s18SwiftSyntaxBuilder12AccessorListVyACSayAA013ExpressibleAsD4Decl_pGcfc","s18SwiftSyntaxBuilder12ArrayElementV10expression13trailingCommaAcA26ExpressibleAsExprBuildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder12CaseItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder12CaseItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder12ClosureParamV4name13trailingCommaAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV15continueKeyword5labelAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV15continueKeyword5labelAC0aB005TokenB0V_SSSgtcfc","s18SwiftSyntaxBuilder12DeclModifierV4name15detailLeftParen0G00g5RightI0AC0aB005TokenB0V_AJSgA2Ktcfc","s18SwiftSyntaxBuilder12DeclModifierV4name15detailLeftParen0G00g5RightI0AC0aB005TokenB0V_AJSgSSSgAKtcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV10attributes9modifiers11caseKeyword8elementsAcA26ExpressibleAsAttributeList_pSg_AA0lm8ModifierO0_pSg0aB005TokenB0VAA0lmde7ElementO0_ptcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV11caseKeyword010attributesC009modifiersC008elementsC0AC0aB005TokenB0V_AA26ExpressibleAsAttributeList_pSgyXEAA0mn8ModifierP0_pSgyXEAA0mnde7ElementP0_pyXEtcfc","s18SwiftSyntaxBuilder12FunctionDeclV10attributes9modifiers11funcKeyword10identifier22genericParameterClause9signature0k5WhereM04bodyAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr7GenericlM0_pSgAA0qrD9Signature_pAA0qrwoM0_pSgAA0qR9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12FunctionDeclV11funcKeyword10identifier22genericParameterClause9signature0i5WhereK0010attributesC009modifiersC004bodyC0AC0aB005TokenB0V_AnA020ExpressibleAsGenericjK0_pSgAA0rsD9Signature_pAA0rstmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierW0_pSgyXEAA013CodeBlockItemW0VSgyXEtcfc","s18SwiftSyntaxBuilder12FunctionDeclV11funcKeyword10identifier22genericParameterClause9signature0i5WhereK04body010attributesC009modifiersC0AC0aB005TokenB0V_AnA020ExpressibleAsGenericjK0_pSgAA0rsD9Signature_pAA0rstmK0_pSgAA0rS9CodeBlock_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierY0_pSgyXEtcfc","s18SwiftSyntaxBuilder12FunctionTypeV9leftParen05rightG012asyncKeyword016throwsOrRethrowsJ05arrow06returnE009argumentsC0AC0aB005TokenB0V_A2MSgAnmA013ExpressibleAsE9Buildable_pAA0rs5TupleE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder12FunctionTypeV9leftParen9arguments05rightG012asyncKeyword016throwsOrRethrowsK05arrow06returnE0AC0aB005TokenB0V_AA018ExpressibleAsTupleE11ElementList_pA2MSgAomA0rsE9Buildable_ptcfc","s18SwiftSyntaxBuilder12IfConfigDeclV10poundEndif07clausesC0AC0aB005TokenB0V_AA013ExpressibleAsdE10ClauseList_pyXEtcfc","s18SwiftSyntaxBuilder12IfConfigDeclV7clauses10poundEndifAcA013ExpressibleAsdE10ClauseList_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder12MetatypeTypeV04baseE06period14typeOrProtocolAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAJtcfc","s18SwiftSyntaxBuilder12MetatypeTypeV04baseE06period14typeOrProtocolAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSStcfc","s18SwiftSyntaxBuilder12ModifierListV12arrayLiteralAcA017ExpressibleAsDeclD0_pd_tcfc","s18SwiftSyntaxBuilder12ModifierListVyACSayAA017ExpressibleAsDeclD0_pGcfc","s18SwiftSyntaxBuilder12ObjCSelectorV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder12ObjCSelectorVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder12OperatorDeclV10attributes9modifiers15operatorKeyword10identifier0H18PrecedenceAndTypesAcA26ExpressibleAsAttributeList_pSg_AA0no8ModifierQ0_pSg0aB005TokenB0VAoA0nodklM0_pSgtcfc","s18SwiftSyntaxBuilder12OperatorDeclV15operatorKeyword10identifier0F18PrecedenceAndTypes010attributesC009modifiersC0AC0aB005TokenB0V_AkA013ExpressibleAsdijK0_pSgAA0oP13AttributeList_pSgyXEAA0op8ModifierR0_pSgyXEtcfc","s18SwiftSyntaxBuilder12OptionalTypeV07wrappedE012questionMarkAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV10attributes9modifiers15protocolKeyword10identifier27primaryAssociatedTypeClause011inheritanceN0012genericWhereN07membersAcA26ExpressibleAsAttributeList_pSg_AA0st8ModifierV0_pSg0aB005TokenB0VArA0st7PrimarylmN0_pSgAA0stm11InheritanceN0_pSgAA0st7GenericqN0_pSgAA0st6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder12ProtocolDeclV15protocolKeyword10identifier17inheritanceClause012genericWhereJ0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA028ExpressibleAsTypeInheritanceJ0_pSgAA0qr7GenericlJ0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierW0_pSgyXEAA0qr6MembereW0_pyXEtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV15protocolKeyword10identifier27primaryAssociatedTypeClause011inheritanceL0012genericWhereL07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsPrimaryjkL0_pSgAA0tuk11InheritanceL0_pSgAA0tu7GenericoL0_pSgAA0tu6MemberE5Block_pAA0tU13AttributeList_pSgyXEAA0tU12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder12ReturnClauseV5arrow10returnTypeAC0aB005TokenB0V_AA013ExpressibleAsH9Buildable_ptcfc","s18SwiftSyntaxBuilder12SequenceExprV08elementsC0AcA013ExpressibleAsE4List_pyXE_tcfc","s18SwiftSyntaxBuilder12SequenceExprV8elementsAcA013ExpressibleAsE4List_p_tcfc","s18SwiftSyntaxBuilder12SuperRefExprV12superKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder12TuplePatternV9leftParen05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder12TuplePatternV9leftParen8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE11ElementList_pAItcfc","s18SwiftSyntaxBuilder12VariableDeclV10attributes9modifiers15letOrVarKeyword8bindingsAcA26ExpressibleAsAttributeList_pSg_AA0mn8ModifierP0_pSg0aB005TokenB0VAA0mn14PatternBindingP0_ptcfc","s18SwiftSyntaxBuilder12VariableDeclV15letOrVarKeyword010attributesC009modifiersC008bindingsC0AC0aB005TokenB0V_AA26ExpressibleAsAttributeList_pSgyXEAA0no8ModifierQ0_pSgyXEAA0no14PatternBindingQ0_pyXEtcfc","s18SwiftSyntaxBuilder12VariableDeclV_4name4typeAC0aB005TokenB0V_AA30ExpressibleAsIdentifierPattern_pAA0iJ14TypeAnnotation_ptcfc","s18SwiftSyntaxBuilder12VersionTupleV10majorMinor11patchPeriod0hD0AcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgAKtcfc","s18SwiftSyntaxBuilder12VersionTupleV10majorMinor11patchPeriod0hD0AcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgSSSgtcfc","s18SwiftSyntaxBuilder13AccessorBlockV9leftBrace05rightG009accessorsC0AC0aB005TokenB0V_AiA013ExpressibleAsD4List_pyXEtcfc","s18SwiftSyntaxBuilder13AccessorBlockV9leftBrace9accessors05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD4List_pAItcfc","s18SwiftSyntaxBuilder13AsTypePatternV7pattern9asKeyword4typeAcA011ExpressibledF9Buildable_p_0aB005TokenB0VAA0kdeL0_ptcfc","s18SwiftSyntaxBuilder13AttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder13AttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder13CatchItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder13CatchItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder13CodeBlockItemV4item9semicolon11errorTokensAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgAaG_pSgtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV10attributes9modifiers16extensionKeyword12extendedType17inheritanceClause012genericWhereM07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VAA0qrK9Buildable_pAA0qrk11InheritanceM0_pSgAA0qr7GenericoM0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder13ExtensionDeclV16extensionKeyword12extendedType17inheritanceClause012genericWhereK0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_AA013ExpressibleAsI9Buildable_pAA0rsi11InheritanceK0_pSgAA0rs7GenericmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEAA0rs6MembereX0_pyXEtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV16extensionKeyword12extendedType17inheritanceClause012genericWhereK07members010attributesC009modifiersC0AC0aB005TokenB0V_AA013ExpressibleAsI9Buildable_pAA0rsi11InheritanceK0_pSgAA0rs7GenericmK0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rs8ModifierZ0_pSgyXEtcfc","s18SwiftSyntaxBuilder13InheritedTypeV8typeName13trailingCommaAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder13IsTypePatternV9isKeyword4typeAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV4name3dotAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV4name3dotACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder13PoundFileExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13PoundLineExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13StringSegmentV7contentAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13StringSegmentV7contentACSS_tcfc","s18SwiftSyntaxBuilder13SubscriptDeclV10attributes9modifiers16subscriptKeyword22genericParameterClause7indices6result0j5WhereL08accessorAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VAA0qr7GenerickL0_pSgAA0qrkL0_pAA0qr6ReturnL0_pAA0qrwoL0_pSgAA0qrB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder13SubscriptDeclV16subscriptKeyword22genericParameterClause7indices6result0h5WhereJ08accessor010attributesC009modifiersC0AC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgAA0rsiJ0_pAA0rs6ReturnJ0_pAA0rstmJ0_pSgAA0rsB9Buildable_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEtcfc","s18SwiftSyntaxBuilder13SubscriptExprV16calledExpression11leftBracket05rightI015trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAmA0rslE0_pSgAA0rs5Tuplee7ElementN0_pyXEAA0rs8MultipleplwN0_pSgyXEtcfc","s18SwiftSyntaxBuilder13SubscriptExprV16calledExpression11leftBracket12argumentList05rightI015trailingClosure26additionalTrailingClosuresAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAA0rs5Tuplee7ElementK0_pAmA0rsnE0_pSgAA0rs8MultiplepnwK0_pSgtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV10attributes9modifiers16typealiasKeyword10identifier22genericParameterClause11initializer0k5WhereM0AcA26ExpressibleAsAttributeList_pSg_AA0pq8ModifierS0_pSg0aB005TokenB0VAqA0pq7GenericlM0_pSgAA0pq15TypeInitializerM0_pSgAA0pqvoM0_pSgtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV16typealiasKeyword10identifier22genericParameterClause11initializer0i5WhereK0010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0qr15TypeInitializerK0_pSgAA0qrsmK0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierW0_pSgyXEtcfc","s18SwiftSyntaxBuilder14AssignmentExprV11assignTokenAC0aB00gB0V_tcfc","s18SwiftSyntaxBuilder14AttributedTypeV9specifier04baseE0010attributesC0AC0aB005TokenB0VSg_AA013ExpressibleAsE9Buildable_pAA0jK13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder14AttributedTypeV9specifier10attributes04baseE0AC0aB005TokenB0VSg_AA26ExpressibleAsAttributeList_pSgAA0jkE9Buildable_ptcfc","s18SwiftSyntaxBuilder14DictionaryExprV10leftSquare05rightG007contentC0AC0aB005TokenB0V_AiA013ExpressibleAsD11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder14DictionaryExprV10leftSquare7content05rightG0AC0aB005TokenB0V_AA013ExpressibleAsB9Buildable_pAItcfc","s18SwiftSyntaxBuilder14DictionaryTypeV17leftSquareBracket03keyE05colon05valueE005rightgH0AC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAkaL_pAKtcfc","s18SwiftSyntaxBuilder14ExpressionStmtV10expressionAcA26ExpressibleAsExprBuildable_p_tcfc","s18SwiftSyntaxBuilder14IdentifierExprV10identifier17declNameArgumentsAC0aB005TokenB0V_AA017ExpressibleAsDeclhI0_pSgtcfc","s18SwiftSyntaxBuilder14IdentifierExprVyACSScfc","s18SwiftSyntaxBuilder14IdentifierListV12arrayLiteralAC0aB005TokenB0Vd_tcfc","s18SwiftSyntaxBuilder14IdentifierListVyACSay0aB005TokenB0VGcfc","s18SwiftSyntaxBuilder14IfConfigClauseV12poundKeyword9condition8elementsAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_pSgAA0lmbO0_ptcfc","s18SwiftSyntaxBuilder14MemberDeclListV12arrayLiteralAcA013ExpressibleAsdeF4Item_pd_tcfc","s18SwiftSyntaxBuilder14MemberDeclListVyACSayAA013ExpressibleAsdeF4Item_pGcfc","s18SwiftSyntaxBuilder14NilLiteralExprV10nilKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder14PatternBindingV7pattern14typeAnnotation11initializer8accessor13trailingCommaAcA013ExpressibleAsD9Buildable_p_AA0mn4TypeH0_pSgAA0mN17InitializerClause_pSgAA0mnbO0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder14PoundErrorDeclV05poundE09leftParen7message05rightI0AC0aB005TokenB0V_AjA30ExpressibleAsStringLiteralExpr_pAJtcfc","s18SwiftSyntaxBuilder14SpecializeExprV10expression21genericArgumentClauseAcA013ExpressibleAsE9Buildable_p_AA0jk7GenerichI0_ptcfc","s18SwiftSyntaxBuilder14SwitchCaseListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder14SwitchCaseListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder14TypeAnnotationV5colon4typeAC0aB005TokenB0V_AA013ExpressibleAsD9Buildable_ptcfc","s18SwiftSyntaxBuilder14TypeAnnotationVyACSScfc","s18SwiftSyntaxBuilder15CatchClauseListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder15CatchClauseListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder15CompositionTypeV08elementsC0AcA013ExpressibleAsdE11ElementList_pyXE_tcfc","s18SwiftSyntaxBuilder15CompositionTypeV8elementsAcA013ExpressibleAsdE11ElementList_p_tcfc","s18SwiftSyntaxBuilder15CustomAttributeV11atSignToken13attributeName9leftParen05rightL0012argumentListC0AC0aB00hB0V_AA26ExpressibleAsTypeBuildable_pAKSgAmA0pq16TupleExprElementO0_pSgyXEtcfc","s18SwiftSyntaxBuilder15CustomAttributeV11atSignToken13attributeName9leftParen12argumentList05rightL0AC0aB00hB0V_AA26ExpressibleAsTypeBuildable_pAKSgAA0pq16TupleExprElementN0_pSgAMtcfc","s18SwiftSyntaxBuilder15DeclarationStmtV11declarationAcA26ExpressibleAsDeclBuildable_p_tcfc","s18SwiftSyntaxBuilder15EnumCaseElementV10identifier15associatedValue03rawI013trailingCommaAC0aB005TokenB0V_AA28ExpressibleAsParameterClause_pSgAA0no11InitializerQ0_pSgAJSgtcfc","s18SwiftSyntaxBuilder15EnumCaseElementV10identifier15associatedValue03rawI013trailingCommaACSS_AA28ExpressibleAsParameterClause_pSgAA0mn11InitializerP0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV4type6period8caseName15associatedTupleAcA26ExpressibleAsTypeBuildable_pSg_0aB005TokenB0VAlA0mnlF0_pSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV4type6period8caseName15associatedTupleAcA26ExpressibleAsTypeBuildable_pSg_0aB005TokenB0VSSAA0mnlF0_pSgtcfc","s18SwiftSyntaxBuilder15FallthroughStmtV18fallthroughKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15ForcedValueExprV10expression15exclamationMarkAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder15GenericArgumentV12argumentType13trailingCommaAcA013ExpressibleAsG9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder15InitializerDeclV10attributes9modifiers11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsI00l5WhereN04bodyAcA26ExpressibleAsAttributeList_pSg_AA0uv8ModifierX0_pSg0aB005TokenB0VASSgAA0uv7GenericmN0_pSgAA0uvmN0_pAtA0uv7GenericsN0_pSgAA0uV9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder15InitializerDeclV11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsG00j5WhereL04body010attributesC009modifiersC0AC0aB005TokenB0V_AOSgAA020ExpressibleAsGenerickL0_pSgAA0vwkL0_pApA0vwxqL0_pSgAA0vW9CodeBlock_pSgAA0vW13AttributeList_pSgyXEAA0vW12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder15KeyPathBaseExprV6periodAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV9leftBrace05rightH007membersC0AC0aB005TokenB0V_AiA013ExpressibleAsdE4List_pyXEtcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV9leftBrace7members05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE4List_pAItcfc","s18SwiftSyntaxBuilder15ObjcKeyPathExprV03keyF09leftParen05rightJ004nameC0AC0aB005TokenB0V_A2jA013ExpressibleAsD4Name_pyXEtcfc","s18SwiftSyntaxBuilder15ObjcKeyPathExprV03keyF09leftParen4name05rightJ0AC0aB005TokenB0V_AjA013ExpressibleAsD4Name_pAJtcfc","s18SwiftSyntaxBuilder15OptionalPatternV03subE012questionMarkAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder15ParameterClauseV9leftParen05rightG0013parameterListC0AC0aB005TokenB0V_AiA021ExpressibleAsFunctiondJ0_pyXEtcfc","s18SwiftSyntaxBuilder15ParameterClauseV9leftParen13parameterList05rightG0AC0aB005TokenB0V_AA021ExpressibleAsFunctiondI0_pAItcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV05poundE09leftParen9condition5comma7message05rightI0AC0aB005TokenB0V_AlA26ExpressibleAsExprBuildable_pALSgAnLtcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV05poundE09leftParen9condition5comma7message05rightI0AC0aB005TokenB0V_AlA26ExpressibleAsExprBuildable_pALSgSSSgALtcfc","s18SwiftSyntaxBuilder15PoundColumnExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15PoundFileIDExprV05poundE2IDAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV9labelName0G5Colon13repeatKeyword4body05whileK09conditionAC0aB005TokenB0VSg_AmlA22ExpressibleAsCodeBlock_pAlA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV9labelName0G5Colon13repeatKeyword4body05whileK09conditionACSSSg_0aB005TokenB0VSgAmA22ExpressibleAsCodeBlock_pAmA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV11caseKeyword0G5Items5colonAC0aB005TokenB0V_AA013ExpressibleAsE8ItemList_pAItcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV11caseKeyword5colon0g5ItemsC0AC0aB005TokenB0V_AiA013ExpressibleAsE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder15WildcardPatternV8wildcard14typeAnnotationAC0aB005TokenB0V_AA017ExpressibleAsTypeH0_pSgtcfc","s18SwiftSyntaxBuilder16ArrayElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ArrayElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ClosureParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureSignatureV10attributes7capture5input12asyncKeyword9throwsTok6output02inL0AcA26ExpressibleAsAttributeList_pSg_AA0opd7CaptureE0_pSgAA0opB9Buildable_pSg0aB005TokenB0VSgAtA0oP12ReturnClause_pSgAStcfc","s18SwiftSyntaxBuilder16ClosureSignatureV7capture5input12asyncKeyword9throwsTok6output02inK0010attributesC0AcA013ExpressibleAsd7CaptureE0_pSg_AA0opB9Buildable_pSgSSSg0aB005TokenB0VSgAA0oP12ReturnClause_pSgArA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder16ConditionElementV9condition13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder16DeclNameArgumentV4name5colonAC0aB005TokenB0V_AHtcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV05floatE0ACSf_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV14floatingDigitsAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV14floatingDigitsACSS_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprVyACSfcfc","s18SwiftSyntaxBuilder16FunctionCallExprV16calledExpression9leftParen05rightJ015trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA013ExpressibleAsF9Buildable_p_0aB005TokenB0VSgAnA0stmF0_pSgAA0st5Tuplef7ElementO0_pyXEAA0st8MultipleqmxO0_pSgyXEtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV16calledExpression9leftParen12argumentList05rightJ015trailingClosure26additionalTrailingClosuresAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0VSgAA0st5Tuplef7ElementL0_pAnA0stoF0_pSgAA0st8MultipleqoxL0_pSgtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV_15trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA013ExpressibleAsF9Buildable_p_AA0nohF0_pSgAA0no5Tuplef7ElementJ0_pyXEAA08MultiplelhrJ0VSgyXEtcfc","s18SwiftSyntaxBuilder16FunctionDeclNameV4name9argumentsAcA013ExpressibleAsB9Buildable_p_AA0ijeF9Arguments_pSgtcfc","s18SwiftSyntaxBuilder16GenericParameterV10attributes4name5colon13inheritedType13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VAMSgAA0mnJ9Buildable_pSgANtcfc","s18SwiftSyntaxBuilder16GenericParameterV4name5colon13inheritedType13trailingComma010attributesC0ACSS_0aB005TokenB0VSgAA013ExpressibleAsI9Buildable_pSgAlA0nO13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder16MemberAccessExprV4base3dot4name17declNameArgumentsAcA013ExpressibleAsF9Buildable_pSg_0aB005TokenB0VAlA0mn4DeclkL0_pSgtcfc","s18SwiftSyntaxBuilder16MemberAccessExprV4base3dot4name17declNameArgumentsAcA013ExpressibleAsF9Buildable_pSg_0aB005TokenB0VSSAA0mn4DeclkL0_pSgtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV05poundE09leftParen4kind5colon4name05rightI0AC0aB005TokenB0V_A2LSgAmA013ExpressibleAsF9Buildable_pALtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV05poundE09leftParen4kind5colon4name05rightI0AC0aB005TokenB0V_ALSSSgALSgAA013ExpressibleAsF9Buildable_pALtcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV10expression13operatorTokenAcA013ExpressibleAsF9Buildable_p_0aB00iB0Vtcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV10expression13operatorTokenAcA013ExpressibleAsF9Buildable_p_SStcfc","s18SwiftSyntaxBuilder16PoundWarningDeclV05poundE09leftParen7message05rightI0AC0aB005TokenB0V_AjA30ExpressibleAsStringLiteralExpr_pAJtcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV5regexAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV5regexACSS_tcfc","s18SwiftSyntaxBuilder16TupleExprElementV5label5colon10expression13trailingCommaAC0aB005TokenB0VSg_AkA013ExpressibleAsE9Buildable_pAKtcfc","s18SwiftSyntaxBuilder16TupleTypeElementV5inOut4name10secondName5colon4type8ellipsis11initializer13trailingCommaAC0aB005TokenB0VSg_A3oA013ExpressibleAsE9Buildable_pAoA0sT17InitializerClause_pSgAOtcfc","s18SwiftSyntaxBuilder17AccessorParameterV9leftParen4name05rightG0AC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder17AccessorParameterV9leftParen4name05rightG0AC0aB005TokenB0V_SSAItcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV5label5colon16availabilityList9semicolonAC0aB005TokenB0V_AjA013ExpressibleAsd4SpecI0_pAJtcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV5label5colon9semicolon016availabilityListC0ACSS_0aB005TokenB0VAjA013ExpressibleAsd4SpecJ0_pyXEtcfc","s18SwiftSyntaxBuilder17CodeBlockItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder17CodeBlockItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder17DeclNameArgumentsV9leftParen05rightH009argumentsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE12ArgumentList_pyXEtcfc","s18SwiftSyntaxBuilder17DeclNameArgumentsV9leftParen9arguments05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE12ArgumentList_pAItcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV10attributes9modifiers13deinitKeyword4bodyAcA26ExpressibleAsAttributeList_pSg_AA0kl8ModifierN0_pSg0aB005TokenB0VAA0kL9CodeBlock_ptcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV13deinitKeyword4body010attributesC009modifiersC0AC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_pAA0lM13AttributeList_pSgyXEAA0lm8ModifierQ0_pSgyXEtcfc","s18SwiftSyntaxBuilder17DictionaryElementV13keyExpression5colon05valueG013trailingCommaAcA26ExpressibleAsExprBuildable_p_0aB005TokenB0VAaH_pAKSgtcfc","s18SwiftSyntaxBuilder17ExpressionPatternV10expressionAcA26ExpressibleAsExprBuildable_p_tcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV9backslash9delimiter9leftParen05rightI0011expressionsC0AC0aB005TokenB0V_SSSgA2kA33ExpressibleAsTupleExprElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV9backslash9delimiter9leftParen11expressions05rightI0AC0aB005TokenB0V_AKSgAkA33ExpressibleAsTupleExprElementList_pAKtcfc","s18SwiftSyntaxBuilder17FunctionParameterV10attributes9firstName06secondH05colon4type8ellipsis15defaultArgument13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VSgA2qA0qR13TypeBuildable_pSgAqA0qR17InitializerClause_pSgAQtcfc","s18SwiftSyntaxBuilder17FunctionParameterV9firstName06secondG05colon4type8ellipsis15defaultArgument13trailingComma010attributesC0AC0aB005TokenB0VSg_A2oA26ExpressibleAsTypeBuildable_pSgAoA0rS17InitializerClause_pSgAoA0rS13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder17FunctionSignatureV5input21asyncOrReasyncKeyword06throwsh8RethrowsJ06outputAcA28ExpressibleAsParameterClause_p_0aB005TokenB0VSgAlA0no6ReturnQ0_pSgtcfc","s18SwiftSyntaxBuilder17FunctionSignatureV5input21asyncOrReasyncKeyword06throwsh8RethrowsJ06outputAcA28ExpressibleAsParameterClause_p_SSSg0aB005TokenB0VSgAA0no6ReturnQ0_pSgtcfc","s18SwiftSyntaxBuilder17IdentifierPatternV10identifierAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17IdentifierPatternVyACSScfc","s18SwiftSyntaxBuilder17InheritedTypeListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder17InheritedTypeListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder17InitializerClauseV5equal5valueAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListV12arrayLiteralAC0aB00fB0Vd_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListVyACSay0aB00fB0VGcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV4name5colonAC0aB005TokenB0VSg_AItcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV4name5colonACSSSg_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV10identifier9leftParen05rightI009argumentsC0AC0aB005TokenB0V_A2jA018ExpressibleAsTupleF11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV10identifier9leftParen9arguments05rightI0AC0aB005TokenB0V_AjA018ExpressibleAsTupleF11ElementList_pAJtcfc","s18SwiftSyntaxBuilder17PoundFilePathExprV05poundeF0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17PoundFunctionExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17QualifiedDeclNameV8baseType3dot4name9argumentsAcA013ExpressibleAsH9Buildable_pSg_0aB005TokenB0VSgAlA0lmeF9Arguments_pSgtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13openDelimiter0G5Quote05closeI00jH008segmentsC0ACSSSg_0aB005TokenB0VAliA013ExpressibleAsdE8Segments_pyXEtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13openDelimiter0G5Quote8segments05closeI00kH0AC0aB005TokenB0VSg_AkA013ExpressibleAsdE8Segments_pAkLtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV_9openQuote05closeH0ACSS_0aB005TokenB0VAHtcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV10attributes9modifiers21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereL0AcA26ExpressibleAsAttributeList_pSg_AA0pq8ModifierS0_pSg0aB005TokenB0VAqA0pq15TypeInheritanceL0_pSgAA0pqv11InitializerL0_pSgAA0pq7GenericoL0_pSgtcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereJ0010attributesC009modifiersC0AC0aB005TokenB0V_SSAA028ExpressibleAsTypeInheritanceJ0_pSgAA0qrs11InitializerJ0_pSgAA0qr7GenericmJ0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierX0_pSgyXEtcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprV13operatorTokenAC0aB00hB0V_tcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprVyACSScfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV07booleanE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV07booleanE0ACSb_tcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprVyACSbcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV4name11assignToken10expression13trailingComma09specifierC0ACSSSg_0aB00iB0VSgAA26ExpressibleAsExprBuildable_pAmA0noI4List_pSgyXEtcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV9specifier4name11assignToken10expression13trailingCommaAcA013ExpressibleAsJ4List_pSg_0aB00jB0VSgAnA0nO13ExprBuildable_pANtcfc","s18SwiftSyntaxBuilder18ElseIfContinuationV11ifStatementAcA013ExpressibleAsE4Stmt_p_tcfc","s18SwiftSyntaxBuilder18GenericRequirementV4body13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV12whereKeyword015requirementListC0AC0aB005TokenB0V_AA013ExpressibleAsd11RequirementJ0_pyXEtcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV12whereKeyword15requirementListAC0aB005TokenB0V_AA013ExpressibleAsd11RequirementJ0_ptcfc","s18SwiftSyntaxBuilder18IfConfigClauseListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder18IfConfigClauseListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV07integerE0ACSi_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV6digitsAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV6digitsACSS_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprVyACSicfc","s18SwiftSyntaxBuilder18MemberDeclListItemV4decl9semicolonAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder18PatternBindingListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder18PatternBindingListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder18PoundDsohandleExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13operatorToken17postfixExpressionAC0aB00hB0VSg_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13operatorToken17postfixExpressionACSSSg_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18SwitchDefaultLabelV14defaultKeyword5colonAC0aB005TokenB0V_AHtcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV4name9leftParen8modifier05rightI0AC0aB005TokenB0V_AJSgA2Ktcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV4name9leftParen8modifier05rightI0ACSS_0aB005TokenB0VSgSSSgAKtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV4name11trailingDotAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV4name11trailingDotACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder19EnumCaseElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder19EnumCaseElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder19GenericArgumentListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder19GenericArgumentListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder19PostfixIfConfigExprV4base6configAcA013ExpressibleAsG9Buildable_pSg_AA0jkeF4Decl_ptcfc","s18SwiftSyntaxBuilder19PoundSourceLocationV05poundeF09leftParen4args05rightI0AC0aB005TokenB0V_AjA013ExpressibleAsdeF4Args_pSgAJtcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV10attributes9modifiers22precedencegroupKeyword10identifier9leftBrace15groupAttributes05rightM0AcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VA2qA0qrdesT0_pAQtcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV22precedencegroupKeyword10identifier9leftBrace05rightK0010attributesC009modifiersC0015groupAttributesC0AC0aB005TokenB0V_SSA2mA26ExpressibleAsAttributeList_pSgyXEAA0rs8ModifierU0_pSgyXEAA0rsdetU0_pyXEtcfc","s18SwiftSyntaxBuilder19SameTypeRequirementV04leftE10Identifier13equalityToken05righteH0AcA013ExpressibleAsE9Buildable_p_0aB00jB0VAaG_ptcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV5label5colon8declname13trailingCommaAC0aB005TokenB0V_AjA21ExpressibleAsDeclName_pAJSgtcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV5label5colon8declname13trailingCommaACSS_0aB005TokenB0VAA21ExpressibleAsDeclName_pAJSgtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV9labelName0G5Colon7pattern13trailingCommaAC0aB005TokenB0VSg_AkA013ExpressibleAsE9Buildable_pAKtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV9labelName0G5Colon7pattern13trailingCommaACSSSg_0aB005TokenB0VSgAA013ExpressibleAsE9Buildable_pALtcfc","s18SwiftSyntaxBuilder19ValueBindingPatternV15letOrVarKeyword05valueF0AC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder20AvailabilityArgumentV5entry13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListV12arrayLiteralAcA013ExpressibleAsD8Argument_pd_tcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListVyACSayAA013ExpressibleAsD8Argument_pGcfc","s18SwiftSyntaxBuilder20ClassRestrictionTypeV12classKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder20ConditionElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20ConditionElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV18someOrAnySpecifier04baseF0AC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV18someOrAnySpecifier04baseF0ACSS_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20GenericParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20GenericParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20MemberTypeIdentifierV04baseE06period4name21genericArgumentClauseAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAkA0mn7GenerickL0_pSgtcfc","s18SwiftSyntaxBuilder20OptionalChainingExprV10expression12questionMarkAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV4name21genericArgumentClauseAC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierVyACSScfc","s18SwiftSyntaxBuilder20TupleExprElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleExprElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20TupleTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder21AvailabilityConditionV21poundAvailableKeyword9leftParen05rightJ0016availabilitySpecC0AC0aB005TokenB0V_A2jA013ExpressibleAsdM4List_pyXEtcfc","s18SwiftSyntaxBuilder21AvailabilityConditionV21poundAvailableKeyword9leftParen16availabilitySpec05rightJ0AC0aB005TokenB0V_AjA013ExpressibleAsdL4List_pAJtcfc","s18SwiftSyntaxBuilder21BackDeployVersionListV12arrayLiteralAcA013ExpressibleAsdeF8Argument_pd_tcfc","s18SwiftSyntaxBuilder21BackDeployVersionListVyACSayAA013ExpressibleAsdeF8Argument_pGcfc","s18SwiftSyntaxBuilder21DictionaryElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21DictionaryElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21DiscardAssignmentExprV8wildcardAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV10identifierAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV10identifierACSS_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV16leftAngleBracket05righthI009argumentsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE4List_pyXEtcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV16leftAngleBracket9arguments05righthI0AC0aB005TokenB0V_AA013ExpressibleAsdE4List_pAItcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV10attributes4name5colon09inheritedF011initializer13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VANSgAA0noF9Buildable_pSgAA0noF17InitializerClause_pSgAOtcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV4name5colon09inheritedF011initializer13trailingComma010attributesC0ACSS_0aB005TokenB0VSgAA013ExpressibleAsF9Buildable_pSgAA0opF17InitializerClause_pSgAmA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05arrayE0AcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV10identifier21genericArgumentClauseAC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV10identifier21genericArgumentClauseACSS_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV5colon09inheritedD10CollectionAC0aB005TokenB0V_AA022ExpressibleAsInheritedD4List_ptcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV5colon09inheritedd10CollectionC0AC0aB005TokenB0V_AA022ExpressibleAsInheritedD4List_pyXEtcfc","s18SwiftSyntaxBuilder21TypeInitializerClauseV5equal5valueAC0aB005TokenB0V_AA013ExpressibleAsD9Buildable_ptcfc","s18SwiftSyntaxBuilder21UnresolvedPatternExprV7patternAcA013ExpressibleAsE9Buildable_p_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder22CompositionTypeElementV4type9ampersandAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder22ConformanceRequirementV18leftTypeIdentifier5colon05rightgH0AcA013ExpressibleAsG9Buildable_p_0aB005TokenB0VAaG_ptcfc","s18SwiftSyntaxBuilder22DifferentiabilityParamV9parameter13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV16leftAngleBracket05righthI007generice4ListC0AC0aB005TokenB0V_AiA013ExpressibleAsdeL0_pyXEtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV16leftAngleBracket07genericE4List05righthI0AC0aB005TokenB0V_AA013ExpressibleAsdeK0_pAItcfc","s18SwiftSyntaxBuilder22GenericRequirementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder22GenericRequirementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV5label5colon5value13trailingCommaAC0aB005TokenB0V_A3JSgtcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV5label5colon5value13trailingCommaACSS_0aB005TokenB0VA2JSgtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV10leftSquare05rightH005itemsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE8ItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV10leftSquare5items05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE8ItemList_pSgAItcfc","s18SwiftSyntaxBuilder23DifferentiabilityParamsV9leftParen04diffE005rightG0AC0aB005TokenB0V_AA013ExpressibleAsD9ParamList_pAItcfc","s18SwiftSyntaxBuilder23DifferentiabilityParamsV9leftParen05rightG004diffeC0AC0aB005TokenB0V_AiA013ExpressibleAsD9ParamList_pyXEtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV12fileArgLabel0hI5Colon0H4Name5comma04lineiJ00niK00N6NumberAC0aB005TokenB0V_A6Mtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV12fileArgLabel0hI5Colon0H4Name5comma04lineiJ00niK00N6NumberACSS_0aB005TokenB0VSSAMSSAMSStcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV12arrayLiteralAcA013ExpressibleAsdeF7Element_pd_tcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListVyACSayAA013ExpressibleAsdeF7Element_pGcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV017higherThanOrLowerH05colon010otherNamesC0ACSS_0aB005TokenB0VAA013ExpressibleAsdE8NameList_pyXEtcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV017higherThanOrLowerH05colon10otherNamesAC0aB005TokenB0V_AiA013ExpressibleAsdE8NameList_ptcfc","s18SwiftSyntaxBuilder23TuplePatternElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder23TuplePatternElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder23UnavailabilityConditionV23poundUnavailableKeyword9leftParen05rightJ0016availabilitySpecC0AC0aB005TokenB0V_A2jA025ExpressibleAsAvailabilityM4List_pyXEtcfc","s18SwiftSyntaxBuilder23UnavailabilityConditionV23poundUnavailableKeyword9leftParen16availabilitySpec05rightJ0AC0aB005TokenB0V_AjA025ExpressibleAsAvailabilityL4List_pAJtcfc","s18SwiftSyntaxBuilder24MatchingPatternConditionV11caseKeyword7pattern14typeAnnotation11initializerAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAA0no4TypeK0_pSgAA0nO17InitializerClause_ptcfc","s18SwiftSyntaxBuilder24OptionalBindingConditionV15letOrVarKeyword7pattern14typeAnnotation11initializerAC0aB005TokenB0V_AA29ExpressibleAsPatternBuildable_pAA0pq4TypeM0_pSgAA0pQ17InitializerClause_ptcfc","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV012availabilityF11Restriction13trailingCommaAcA025ExpressibleAsAvailabilityfI0_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV17assignmentKeyword5colon4flagAC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV17assignmentKeyword5colon4flagACSS_0aB005TokenB0VAItcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV5colon015precedenceGroupf10DesignatedG0AC0aB005TokenB0V_AA27ExpressibleAsIdentifierList_ptcfc","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV5colon015precedenceGroupf10DesignatedgC0AC0aB005TokenB0V_AA27ExpressibleAsIdentifierList_pyXEtcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV4name13trailingCommaAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV4name13trailingCommaACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV5label5colon5valueAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV5label5colon5valueACSS_0aB005TokenB0VAA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV11beforeLabel5colon07versionH0AC0aB005TokenB0V_AiA013ExpressibleAsde7VersionH0_ptcfc","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV11beforeLabel5colon07versionhC0ACSS_0aB005TokenB0VAA013ExpressibleAsde7VersionH0_pyXEtcfc","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV16leftAngleBracket05rightiJ007primaryef4ListC0AC0aB005TokenB0V_AiA013ExpressibleAsdefM0_pyXEtcfc","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV16leftAngleBracket07primaryeF4List05rightiJ0AC0aB005TokenB0V_AA013ExpressibleAsdefL0_pAItcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV4type5comma12declBaseName0ikF0AcA33ExpressibleAsSimpleTypeIdentifier_p_0aB005TokenB0VAA0lmB9Buildable_pAA0lm4DeclkF0_pSgtcfc","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV7nameTok5colon16stringOrDeclnameAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV20associativityKeyword5colon5valueAC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV20associativityKeyword5colon5valueACSS_0aB005TokenB0VSStcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV8wrtLabel5colon10parametersAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV8wrtLabel5colon10parametersACSS_0aB005TokenB0VAA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV8platform7versionAC0aB005TokenB0V_AA013ExpressibleAsE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV8platform7versionACSS_AA013ExpressibleAsE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV5label5colon7closureAC0aB005TokenB0V_AiA013ExpressibleAsF4Expr_ptcfc","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV07wrappedG015exclamationMarkAcA013ExpressibleAsG9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV8diffKind0gH5Comma0G6Params0gjI011whereClauseAC0aB005TokenB0VSg_AlA030ExpressibleAsDifferentiabilityjL0_pSgAlA0no12GenericWhereL0_pSgtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV8diffKind0gH5Comma0G6Params0gjI011whereClauseACSSSg_0aB005TokenB0VSgAA030ExpressibleAsDifferentiabilityjL0_pSgAmA0no12GenericWhereL0_pSgtcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV12arrayLiteralAcA013ExpressibleAsdefG0_pd_tcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListVyACSayAA013ExpressibleAsdefG0_pGcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsAC0aB005TokenB0V_AmA022ExpressibleAsQualifiedlM0_pAMSgA2oA0uv17DifferentiabilityS6Clause_pSgtcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsACSS_0aB005TokenB0VAA022ExpressibleAsQualifiedlM0_pAMSgSSSgAoA0uv17DifferentiabilityS6Clause_pSgtcfc","s18SwiftSyntaxBuilder6AsExprV5asTok25questionOrExclamationMark8typeNameAC0aB005TokenB0V_AISgAA011ExpressibleD13TypeBuildable_ptcfc","s18SwiftSyntaxBuilder6DoStmtV9labelName0F5Colon9doKeyword4body012catchClausesC0ACSSSg_0aB005TokenB0VSgAlA22ExpressibleAsCodeBlock_pAA0oP15CatchClauseList_pSgyXEtcfc","s18SwiftSyntaxBuilder6DoStmtV9labelName0F5Colon9doKeyword4body12catchClausesAC0aB005TokenB0VSg_AlkA22ExpressibleAsCodeBlock_pAA0oP15CatchClauseList_pSgtcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthACSi_tcfc","s18SwiftSyntaxBuilder6IfStmtV9labelName0F5Colon9ifKeyword10conditions4body04elseJ00M4BodyAC0aB005TokenB0VSg_AnmA33ExpressibleAsConditionElementList_pAA0pQ9CodeBlock_pAnA0pqB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder6IfStmtV9labelName0F5Colon9ifKeyword4body04elseJ00L4Body010conditionsC0ACSSSg_0aB005TokenB0VSgAnA22ExpressibleAsCodeBlock_pAoA0pqB9Buildable_pSgAA0pQ20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder6IsExprV5isTok8typeNameAC0aB005TokenB0V_AA26ExpressibleAsTypeBuildable_ptcfc","s18SwiftSyntaxBuilder7TryExprV10tryKeyword25questionOrExclamationMark10expressionAC0aB005TokenB0V_AISgAA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder8CaseItemV7pattern11whereClause13trailingCommaAcA29ExpressibleAsPatternBuildable_p_AA0kl5WhereH0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder8DeclNameV08declBaseE00fE9ArgumentsAcA013ExpressibleAsB9Buildable_p_AA0ijdeH0_pSgtcfc","s18SwiftSyntaxBuilder8EnumDeclV10attributes9modifiers11enumKeyword10identifier17genericParameters17inheritanceClause0k5WhereN07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr16GenericParameterN0_pSgAA0qr15TypeInheritanceN0_pSgAA0qrwoN0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder8EnumDeclV11enumKeyword10identifier17genericParameters17inheritanceClause0i5WhereL0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA029ExpressibleAsGenericParameterL0_pSgAA0rs15TypeInheritanceL0_pSgAA0rstmL0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierY0_pSgyXEAA0rs6MembereY0_pyXEtcfc","s18SwiftSyntaxBuilder8EnumDeclV11enumKeyword10identifier17genericParameters17inheritanceClause0i5WhereL07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA029ExpressibleAsGenericParameterL0_pSgAA0rs15TypeInheritanceL0_pSgAA0rstmL0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rS12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder8ExprListV12arrayLiteralAcA013ExpressibleAsD9Buildable_pd_tcfc","s18SwiftSyntaxBuilder8ExprListVyACSayAA013ExpressibleAsD9Buildable_pGcfc","s18SwiftSyntaxBuilder8ObjcNameV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder8ObjcNameVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder8TypeExprV4typeAcA013ExpressibleAsD9Buildable_p_tcfc","s18SwiftSyntaxBuilder9ArrayExprV10leftSquare05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsD11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder9ArrayExprV10leftSquare8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD11ElementList_pAItcfc","s18SwiftSyntaxBuilder9ArrayTypeV17leftSquareBracket07elementE005rightgH0AC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAItcfc","s18SwiftSyntaxBuilder9ArrowExprV12asyncKeyword11throwsToken05arrowI0AC0aB00iB0VSg_AjItcfc","s18SwiftSyntaxBuilder9ArrowExprV12asyncKeyword11throwsToken05arrowI0ACSSSg_0aB00iB0VSgAJtcfc","s18SwiftSyntaxBuilder9AttributeV11atSignToken13attributeName9leftParen8argument05rightK009tokenListC0AC0aB00gB0V_A2LSgAA013ExpressibleAsB9Buildable_pSgAmA0pqgO0_pSgyXEtcfc","s18SwiftSyntaxBuilder9AttributeV11atSignToken13attributeName9leftParen8argument05rightK09tokenListAC0aB00gB0V_A2LSgAA013ExpressibleAsB9Buildable_pSgAmA0pqgO0_pSgtcfc","s18SwiftSyntaxBuilder9AwaitExprV12awaitKeyword10expressionAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder9AwaitExprV12awaitKeyword10expressionACSS_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder9BreakStmtV12breakKeyword5labelAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder9BreakStmtV12breakKeyword5labelAC0aB005TokenB0V_SSSgtcfc","s18SwiftSyntaxBuilder9CatchItemV7pattern11whereClause13trailingCommaAcA29ExpressibleAsPatternBuildable_pSg_AA0kl5WhereH0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder9ClassDeclV10attributes9modifiers19classOrActorKeyword10identifier22genericParameterClause011inheritanceO00m5WhereO07membersAcA26ExpressibleAsAttributeList_pSg_AA0st8ModifierV0_pSg0aB005TokenB0VArA0st7GenericnO0_pSgAA0st15TypeInheritanceO0_pSgAA0styqO0_pSgAA0st6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder9ClassDeclV19classOrActorKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericlM0_pSgAA0tu15TypeInheritanceM0_pSgAA0tuvoM0_pSgAA0tU13AttributeList_pSgyXEAA0tu8ModifierZ0_pSgyXEAA0tu6MembereZ0_pyXEtcfc","s18SwiftSyntaxBuilder9ClassDeclV19classOrActorKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericlM0_pSgAA0tu15TypeInheritanceM0_pSgAA0tuvoM0_pSgAA0tu6MemberE5Block_pAA0tU13AttributeList_pSgyXEAA0tU12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder9CodeBlockV9leftBrace05rightG0010statementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder9CodeBlockV9leftBrace10statements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE8ItemList_pAItcfc","s18SwiftSyntaxBuilder9DeferStmtV12deferKeyword4bodyAC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_ptcfc","s18SwiftSyntaxBuilder9ElseBlockV11elseKeyword4bodyAC0aB005TokenB0V_AA017ExpressibleAsCodeE0_ptcfc","s18SwiftSyntaxBuilder9ForInStmtV9labelName0G5Colon10forKeyword03tryK005awaitK004caseK07pattern14typeAnnotation02inK012sequenceExpr11whereClause4bodyAC0aB005TokenB0VSg_Asr3sA29ExpressibleAsPatternBuildable_pAA0yz4TypeQ0_pSgArA0yzT9Buildable_pAA0yz5WhereV0_pSgAA0yZ9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9ForInStmtV9labelName0G5Colon10forKeyword03tryK005awaitK004caseK07pattern14typeAnnotation02inK012sequenceExpr11whereClause4bodyACSSSg_0aB005TokenB0VSgAstptA29ExpressibleAsPatternBuildable_pAA0yz4TypeQ0_pSgAsA0yzT9Buildable_pAA0yz5WhereV0_pSgAA0yZ9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9GuardStmtV12guardKeyword04elseG04body010conditionsC0AC0aB005TokenB0V_AjA22ExpressibleAsCodeBlock_pAA0lM20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder9GuardStmtV12guardKeyword10conditions04elseG04bodyAC0aB005TokenB0V_AA33ExpressibleAsConditionElementList_pAjA0lM9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9InOutExprV9ampersand10expressionAC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder9ThrowStmtV12throwKeyword10expressionAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder9TokenListV12arrayLiteralAC0aB00dB0Vd_tcfc","s18SwiftSyntaxBuilder9TokenListVyACSay0aB00dB0VGcfc","s18SwiftSyntaxBuilder9TupleExprV9leftParen05rightG0011elementListC0AC0aB005TokenB0V_AiA013ExpressibleAsde7ElementJ0_pyXEtcfc","s18SwiftSyntaxBuilder9TupleExprV9leftParen11elementList05rightG0AC0aB005TokenB0V_AA013ExpressibleAsde7ElementI0_pAItcfc","s18SwiftSyntaxBuilder9TupleTypeV9leftParen05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder9TupleTypeV9leftParen8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE11ElementList_pAItcfc","s18SwiftSyntaxBuilder9WhileStmtV9labelName0F5Colon12whileKeyword10conditions4bodyAC0aB005TokenB0VSg_AlkA33ExpressibleAsConditionElementList_pAA0nO9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9WhileStmtV9labelName0F5Colon12whileKeyword4body010conditionsC0ACSSSg_0aB005TokenB0VSgAlA22ExpressibleAsCodeBlock_pAA0nO20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder9YieldListV9leftParen07elementE013trailingComma05rightG0AC0aB005TokenB0V_AA017ExpressibleAsExprE0_pAJSgAJtcfc","s18SwiftSyntaxBuilder9YieldListV9leftParen13trailingComma05rightG007elementeC0AC0aB005TokenB0V_AJSgAjA017ExpressibleAsExprE0_pyXEtcfc","s18SwiftSyntaxBuilder9YieldStmtV12yieldKeyword6yieldsAC0aB005TokenB0V_AA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthSivp","s18SwiftSyntaxBuilder010AccessPathC0V10buildArrayySayAA013ExpressibleAsdE9Component_pGSayAFGFZ","s18SwiftSyntaxBuilder010AccessPathC0V10buildBlockySayAA013ExpressibleAsdE9Component_pGAFd_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither5firstSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither6secondSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V13buildOptionalySayAA013ExpressibleAsdE9Component_pGAFSgFZ","s18SwiftSyntaxBuilder010AccessPathC0V15buildExpressionySayAA013ExpressibleAsdE9Component_pGAaE_pFZ","s18SwiftSyntaxBuilder010AccessPathC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE9Component_pGFZ","s18SwiftSyntaxBuilder010AccessPathC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE9Component_pGAFFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildArrayySayAA013ExpressibleAsD4Decl_pGSayAFGFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildBlockySayAA013ExpressibleAsD4Decl_pGAFd_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither5firstSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither6secondSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V13buildOptionalySayAA013ExpressibleAsD4Decl_pGAFSgFZ","s18SwiftSyntaxBuilder012AccessorListC0V15buildExpressionySayAA013ExpressibleAsD4Decl_pGAaE_pFZ","s18SwiftSyntaxBuilder012AccessorListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD4Decl_pGFZ","s18SwiftSyntaxBuilder012AccessorListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD4Decl_pGAFFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder012CaseItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder012CaseItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildArrayySayAA017ExpressibleAsDeclD0_pGSayAFGFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildBlockySayAA017ExpressibleAsDeclD0_pGAFd_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither5firstSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither6secondSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V13buildOptionalySayAA017ExpressibleAsDeclD0_pGAFSgFZ","s18SwiftSyntaxBuilder012ModifierListC0V15buildExpressionySayAA017ExpressibleAsDeclD0_pGAaE_pFZ","s18SwiftSyntaxBuilder012ModifierListC0V16buildFinalResultyAA0dE0VSayAA017ExpressibleAsDeclD0_pGFZ","s18SwiftSyntaxBuilder012ModifierListC0V24buildLimitedAvailabilityySayAA017ExpressibleAsDeclD0_pGAFFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder013AttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder013AttributeListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder013AttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder013CatchItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder013CatchItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildArrayySay0aB005TokenB0VGSayAHGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildBlockySay0aB005TokenB0VGAHd_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither5firstSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither6secondSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V13buildOptionalySay0aB005TokenB0VGAHSgFZ","s18SwiftSyntaxBuilder014IdentifierListC0V15buildExpressionySay0aB005TokenB0VGAGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V16buildFinalResultyAA0dE0VSay0aB005TokenB0VGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V24buildLimitedAvailabilityySay0aB005TokenB0VGAHFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildArrayySayAA013ExpressibleAsdeF4Item_pGSayAFGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildBlockySayAA013ExpressibleAsdeF4Item_pGAFd_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither5firstSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither6secondSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V13buildOptionalySayAA013ExpressibleAsdeF4Item_pGAFSgFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V15buildExpressionySayAA013ExpressibleAsdeF4Item_pGAaE_pFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdeF4Item_pGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF4Item_pGAFFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V05buildD0ySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V05buildE0ySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildArrayySay0aB00fB0VGSayAHGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildBlockySay0aB00fB0VGAHd_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither5firstSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither6secondSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V13buildOptionalySay0aB00fB0VGAHSgFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V15buildExpressionySay0aB00fB0VGAGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V16buildFinalResultyAA0defG0VSay0aB00fB0VGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V24buildLimitedAvailabilityySay0aB00fB0VGAHFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V012buildLimitedD0ySayAA013ExpressibleAsD8Argument_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildArrayySayAA013ExpressibleAsD8Argument_pGSayAFGFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildBlockySayAA013ExpressibleAsD8Argument_pGAFd_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither5firstSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither6secondSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V13buildOptionalySayAA013ExpressibleAsD8Argument_pGAFSgFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V15buildExpressionySayAA013ExpressibleAsD8Argument_pGAaE_pFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsD8Argument_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10buildArrayySayAA013ExpressibleAsdeF8Argument_pGSayAFGFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10buildBlockySayAA013ExpressibleAsdeF8Argument_pGAFd_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11buildEither5firstSayAA013ExpressibleAsdeF8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11buildEither6secondSayAA013ExpressibleAsdeF8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V13buildOptionalySayAA013ExpressibleAsdeF8Argument_pGAFSgFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V15buildExpressionySayAA013ExpressibleAsdeF8Argument_pGAaE_pFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF8Argument_pGFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF8Argument_pGAFFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildArrayySayAA013ExpressibleAsdeF7Element_pGSayAFGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildBlockySayAA013ExpressibleAsdeF7Element_pGAFd_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither5firstSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither6secondSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V13buildOptionalySayAA013ExpressibleAsdeF7Element_pGAFSgFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V15buildExpressionySayAA013ExpressibleAsdeF7Element_pGAaE_pFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF7Element_pGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF7Element_pGAFFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildArrayySayAA013ExpressibleAsdefG0_pGSayAFGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildBlockySayAA013ExpressibleAsdefG0_pGAFd_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither5firstSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither6secondSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V13buildOptionalySayAA013ExpressibleAsdefG0_pGAFSgFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V15buildExpressionySayAA013ExpressibleAsdefG0_pGAaE_pFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V16buildFinalResultyAA0defgH0VSayAA013ExpressibleAsdefG0_pGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdefG0_pGAFFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildArrayySayAA013ExpressibleAsD9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildBlockySayAA013ExpressibleAsD9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither5firstSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither6secondSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V13buildOptionalySayAA013ExpressibleAsD9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder08ExprListC0V15buildExpressionySayAA013ExpressibleAsD9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder08ExprListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD9Buildable_pGFZ","s18SwiftSyntaxBuilder08ExprListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD9Buildable_pGAFFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder08ObjcNameC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder08ObjcNameC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildArrayySay0aB00dB0VGSayAHGFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildBlockySay0aB00dB0VGAHd_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither5firstSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither6secondSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V13buildOptionalySay0aB00dB0VGAHSgFZ","s18SwiftSyntaxBuilder09TokenListC0V15buildExpressionySay0aB00dB0VGAGFZ","s18SwiftSyntaxBuilder09TokenListC0V16buildFinalResultyAA0dE0VSay0aB00dB0VGFZ","s18SwiftSyntaxBuilder09TokenListC0V24buildLimitedAvailabilityySay0aB00dB0VGAHFZ","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP06createbF0AA0bF0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE19createAttributeListAA0hI0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE20createSwitchCaseListAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE27createStringLiteralSegmentsAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE33createSpecializeAttributeSpecListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE34createPrecedenceGroupAttributeListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP06createefG0AA0efG0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP06createeF0AA0eF0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprPAAE06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder0B13ListBuildableP05buildbD06format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildableP05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE05buildB4List6format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE06createbD0AaB_pyF","s18SwiftSyntaxBuilder10AccessPathV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10AccessPathV06createdE0ACyF","s18SwiftSyntaxBuilder10ImportDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ImportDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10ReturnStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ReturnStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createdE0ACyF","s18SwiftSyntaxBuilder10SourceFileV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SourceFileV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SourceFileV06createdE0ACyF","s18SwiftSyntaxBuilder10StructDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10StructDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchCaseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchCaseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchCaseV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createdE0ACyF","s18SwiftSyntaxBuilder11CatchClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11CatchClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11CatchClauseV06createdE0ACyF","s18SwiftSyntaxBuilder11ClosureExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11ClosureExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createdE0ACyF","s18SwiftSyntaxBuilder11KeyPathExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder11KeyPathExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createdeF0ACyF","s18SwiftSyntaxBuilder11TernaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11TernaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder11WhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11WhereClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11WhereClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorListV06createdE0ACyF","s18SwiftSyntaxBuilder12ArrayElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ArrayElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ArrayElementV06createdE0ACyF","s18SwiftSyntaxBuilder12ArrayElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder12CaseItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12CaseItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder12ClosureParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ClosureParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ClosureParamV06createdE0ACyF","s18SwiftSyntaxBuilder12ClosureParamV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder12ContinueStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ContinueStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createdE0ACyF","s18SwiftSyntaxBuilder12DeclModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12DeclModifierV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12DeclModifierV06createdE0ACyF","s18SwiftSyntaxBuilder12EnumCaseDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12FunctionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12FunctionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12IfConfigDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12IfConfigDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12MetatypeTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12MetatypeTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ModifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ModifierListV06createdE0ACyF","s18SwiftSyntaxBuilder12ObjCSelectorV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ObjCSelectorV06createdE0ACyF","s18SwiftSyntaxBuilder12OperatorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OperatorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12OptionalTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OptionalTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ProtocolDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ProtocolDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12ReturnClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ReturnClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ReturnClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12SequenceExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12SequenceExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createdE0ACyF","s18SwiftSyntaxBuilder12SuperRefExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12SuperRefExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createdeF0ACyF","s18SwiftSyntaxBuilder12TuplePatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12TuplePatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createdE0ACyF","s18SwiftSyntaxBuilder12VariableDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VariableDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12VersionTupleV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VersionTupleV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VersionTupleV06createdE0ACyF","s18SwiftSyntaxBuilder13AccessorBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AccessorBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AccessorBlockV06createdE0ACyF","s18SwiftSyntaxBuilder13AsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13AsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13AttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AttributeListV06createdE0ACyF","s18SwiftSyntaxBuilder13CatchItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CatchItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder13CodeBlockItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CodeBlockItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CodeBlockItemV06createdeF0ACyF","s18SwiftSyntaxBuilder13DeclBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExprBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExtensionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13InheritedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13InheritedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13InheritedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder13InheritedTypeV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder13IsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13IsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13ObjcNamePieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundFileExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundFileExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundLineExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundLineExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13StmtBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13StringSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StringSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13StringSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createdE0ACyF","s18SwiftSyntaxBuilder13TypeBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypealiasDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createdE0ACyF","s18SwiftSyntaxBuilder14AssignmentExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AssignmentExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createdE0ACyF","s18SwiftSyntaxBuilder14AttributedTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AttributedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14ExpressionStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14ExpressionStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierListV06createdE0ACyF","s18SwiftSyntaxBuilder14IfConfigClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14IfConfigClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14IfConfigClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder14MemberDeclListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14MemberDeclListV06createdeF0ACyF","s18SwiftSyntaxBuilder14NilLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14NilLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder14PatternBindingV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14PatternBindingV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14PatternBindingV06createdE0ACyF","s18SwiftSyntaxBuilder14PatternBindingV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder14PoundErrorDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder14SpecializeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14SpecializeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createdE0ACyF","s18SwiftSyntaxBuilder14SwitchCaseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14SwitchCaseListV06createdeF0ACyF","s18SwiftSyntaxBuilder14TypeAnnotationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14TypeAnnotationV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14TypeAnnotationV06createdE0ACyF","s18SwiftSyntaxBuilder15CatchClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15CatchClauseListV06createdeF0ACyF","s18SwiftSyntaxBuilder15CompositionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CompositionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder15CustomAttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CustomAttributeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CustomAttributeV06createdE0ACyF","s18SwiftSyntaxBuilder15DeclarationStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15DeclarationStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15EnumCaseElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCaseElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCaseElementV06createdeF0ACyF","s18SwiftSyntaxBuilder15EnumCaseElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder15EnumCasePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCasePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder15FallthroughStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15FallthroughStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15ForcedValueExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15ForcedValueExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15GenericArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15GenericArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15GenericArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder15GenericArgumentV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder15InitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15InitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15MemberDeclBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createdeF0ACyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15OptionalPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15OptionalPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createdE0ACyF","s18SwiftSyntaxBuilder15ParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15ParameterClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15ParameterClauseV06createdE0ACyF","s18SwiftSyntaxBuilder15PoundAssertStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundColumnExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundColumnExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV19createExprBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV9buildExpr6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder15WildcardPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15WildcardPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createdE0ACyF","s18SwiftSyntaxBuilder16ArrayElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ArrayElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ClosureParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ClosureSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ClosureSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder16ConditionElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ConditionElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ConditionElementV06createdE0ACyF","s18SwiftSyntaxBuilder16ConditionElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16DeclNameArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder16FloatLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionCallExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionCallExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder16GenericParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16GenericParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16GenericParameterV06createdE0ACyF","s18SwiftSyntaxBuilder16GenericParameterV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16HasTrailingCommaP04witheF0yxSbF","s18SwiftSyntaxBuilder16MemberAccessExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16MemberAccessExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PatternBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PoundWarningDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder16RegexLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleExprElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleExprElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleExprElementV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleExprElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16TupleTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleTypeElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17AccessorParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AccessorParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AccessorParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17AvailabilityEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createdE0ACyF","s18SwiftSyntaxBuilder17CodeBlockItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder17DeclListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder17DeinitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder17DictionaryElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DictionaryElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DictionaryElementV06createdE0ACyF","s18SwiftSyntaxBuilder17DictionaryElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17ExprListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17ExpressionSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionParameterV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17FunctionSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder17IdentifierPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17IdentifierPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17InheritedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17InheritedTypeListV06createdeF0ACyF","s18SwiftSyntaxBuilder17InitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17InitializerClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17InitializerClauseV06createdE0ACyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createdefG0ACyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createdeF0ACyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17PoundFilePathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder17PoundFunctionExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder17StmtListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17TypeListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createdE0ACyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createdeF0ACyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder18ElseIfContinuationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createdeF0ACyF","s18SwiftSyntaxBuilder18GenericRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18GenericRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18GenericRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder18GenericRequirementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder18GenericWhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder18IfConfigClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createdefG0ACyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18MemberDeclListItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createdefG0ACyF","s18SwiftSyntaxBuilder18PatternBindingListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PatternBindingListV06createdeF0ACyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessLevelModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessPathComponentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessPathComponentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessPathComponentV06createdeF0ACyF","s18SwiftSyntaxBuilder19EnumCaseElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV06createdeF0ACyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createdefG0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createdeF0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV19createDeclBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV9buildDecl6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder19SameTypeRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createdeF0ACyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder19TuplePatternElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TuplePatternElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TuplePatternElementV06createdeF0ACyF","s18SwiftSyntaxBuilder19TuplePatternElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder19ValueBindingPatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createdeF0ACyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createdeF0ACyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder20ConditionElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ConditionElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createdefG0ACyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20OptionalChainingExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createdeF0ACyF","s18SwiftSyntaxBuilder20PatternListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20TupleExprElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleExprElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder20TupleTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder21AvailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder21BackDeployVersionListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder21BackDeployVersionListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder21BackDeployVersionListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21BackDeployVersionListV06createdefG0ACyF","s18SwiftSyntaxBuilder21DictionaryElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DictionaryElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNamePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListPAAE22createConditionElementAA0iJ0VyF","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createdeF0ACyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createdeF0ACyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder22CompositionTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder22ConformanceRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createdE0ACyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypePAAE06createG10AnnotationAA0gI0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP06createF0AA0F0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributePAAE06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder22GenericRequirementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericRequirementListV06createdeF0ACyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createdeF0ACyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createdE0ACyF","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFilePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCasePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createdeF0ACyF","s18SwiftSyntaxBuilder23TuplePatternElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV06createdefG0ACyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListPAAE06createF5BlockAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createG4ListAA0gI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE011createTupleG7ElementAA0igJ0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTuplePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createdeF0ACyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createdefG0ACyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE012createMemberF8ListItemAA0ifjK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildablePAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildablePAAE18createReturnClauseAA0iJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createdefG0ACyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createdefG0ACyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV06createdefgH0ACyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypePAAE06createG10AnnotationAA0gI0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListPAAE06createfG5BlockAA0fgJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV06createdefG0ACyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createdefG0ACyF","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprPAAE19createExprBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createdefG0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createdeF0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createdefG0ACyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprPAAE19createCodeBlockItemAA0jkL0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createdeF0ACyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createdefG0ACyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createdefG0ACyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationPAAE19createDeclBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createF8SpecListAA0fiJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypePAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypePAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG10AnnotationAA0gJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG4ExprAA0gJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsBackDeployVersionListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05builddefgH06format13leadingTrivia0aB00defghB0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createdefgH0ACyF","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignaturePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentPAAE06createfgH4ListAA0fghK0VyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createfgH4ListAA0fghK0VyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createdefG0ACyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListP06createfghiJ0AA0fghiJ0VyF","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListPAAE06createB9BuildableAA0bL0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClauseP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClausePAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createfghI4ListAA0fghiK0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypePAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP06createfghiJ0AA0fghiJ0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder6AsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6AsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createdE0ACyF","s18SwiftSyntaxBuilder6DoStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6DoStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IfStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IfStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createdE0ACyF","s18SwiftSyntaxBuilder7TryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder7TryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createdE0ACyF","s18SwiftSyntaxBuilder8CaseItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8CaseItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8CaseItemV06createdE0ACyF","s18SwiftSyntaxBuilder8CaseItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder8DeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8DeclNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8DeclNameV06createdE0ACyF","s18SwiftSyntaxBuilder8EnumDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8EnumDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createdE0ACyF","s18SwiftSyntaxBuilder8ExprListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ExprListV06createdE0ACyF","s18SwiftSyntaxBuilder8ObjcNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ObjcNameV06createdE0ACyF","s18SwiftSyntaxBuilder8TypeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8TypeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrowExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrowExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createdE0ACyF","s18SwiftSyntaxBuilder9AttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder9AttributeV06createB9BuildableAA0bF0_pyF","s18SwiftSyntaxBuilder9AttributeV06createD0ACyF","s18SwiftSyntaxBuilder9AwaitExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9AwaitExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createdE0ACyF","s18SwiftSyntaxBuilder9BreakStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9BreakStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9CatchItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CatchItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CatchItemV06createdE0ACyF","s18SwiftSyntaxBuilder9CatchItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder9ClassDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ClassDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createdE0ACyF","s18SwiftSyntaxBuilder9CodeBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CodeBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CodeBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9DeferStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9DeferStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9ElseBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ElseBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ElseBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9ForInStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9ForInStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder9GuardStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9GuardStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9InOutExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9InOutExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createdeF0ACyF","s18SwiftSyntaxBuilder9ThrowStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ThrowStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9TokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TokenListV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9WhileStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9WhileStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldListV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createdE0ACyF","s18SwiftSyntaxBuilder010AccessPathC0V10Expressiona","s18SwiftSyntaxBuilder010AccessPathC0V11FinalResulta","s18SwiftSyntaxBuilder010AccessPathC0V9Componenta","s18SwiftSyntaxBuilder012AccessorListC0V10Expressiona","s18SwiftSyntaxBuilder012AccessorListC0V11FinalResulta","s18SwiftSyntaxBuilder012AccessorListC0V9Componenta","s18SwiftSyntaxBuilder012CaseItemListC0V10Expressiona","s18SwiftSyntaxBuilder012CaseItemListC0V11FinalResulta","s18SwiftSyntaxBuilder012CaseItemListC0V9Componenta","s18SwiftSyntaxBuilder012ModifierListC0V10Expressiona","s18SwiftSyntaxBuilder012ModifierListC0V11FinalResulta","s18SwiftSyntaxBuilder012ModifierListC0V9Componenta","s18SwiftSyntaxBuilder012ObjCSelectorC0V10Expressiona","s18SwiftSyntaxBuilder012ObjCSelectorC0V11FinalResulta","s18SwiftSyntaxBuilder012ObjCSelectorC0V9Componenta","s18SwiftSyntaxBuilder013AttributeListC0V10Expressiona","s18SwiftSyntaxBuilder013AttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder013AttributeListC0V9Componenta","s18SwiftSyntaxBuilder013CatchItemListC0V10Expressiona","s18SwiftSyntaxBuilder013CatchItemListC0V11FinalResulta","s18SwiftSyntaxBuilder013CatchItemListC0V9Componenta","s18SwiftSyntaxBuilder014IdentifierListC0V10Expressiona","s18SwiftSyntaxBuilder014IdentifierListC0V11FinalResulta","s18SwiftSyntaxBuilder014IdentifierListC0V9Componenta","s18SwiftSyntaxBuilder014MemberDeclListC0V10Expressiona","s18SwiftSyntaxBuilder014MemberDeclListC0V11FinalResulta","s18SwiftSyntaxBuilder014MemberDeclListC0V9Componenta","s18SwiftSyntaxBuilder014SwitchCaseListC0V10Expressiona","s18SwiftSyntaxBuilder014SwitchCaseListC0V11FinalResulta","s18SwiftSyntaxBuilder014SwitchCaseListC0V9Componenta","s18SwiftSyntaxBuilder015CatchClauseListC0V10Expressiona","s18SwiftSyntaxBuilder015CatchClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder015CatchClauseListC0V9Componenta","s18SwiftSyntaxBuilder016ArrayElementListC0V10Expressiona","s18SwiftSyntaxBuilder016ArrayElementListC0V11FinalResulta","s18SwiftSyntaxBuilder016ArrayElementListC0V9Componenta","s18SwiftSyntaxBuilder016ClosureParamListC0V10Expressiona","s18SwiftSyntaxBuilder016ClosureParamListC0V11FinalResulta","s18SwiftSyntaxBuilder016ClosureParamListC0V9Componenta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10Expressiona","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11FinalResulta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V9Componenta","s18SwiftSyntaxBuilder017InheritedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder017InheritedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder017InheritedTypeListC0V9Componenta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10Expressiona","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11FinalResulta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V9Componenta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10Expressiona","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V9Componenta","s18SwiftSyntaxBuilder018PatternBindingListC0V10Expressiona","s18SwiftSyntaxBuilder018PatternBindingListC0V11FinalResulta","s18SwiftSyntaxBuilder018PatternBindingListC0V9Componenta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10Expressiona","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11FinalResulta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V9Componenta","s18SwiftSyntaxBuilder019GenericArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder019GenericArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder019GenericArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10Expressiona","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11FinalResulta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V9Componenta","s18SwiftSyntaxBuilder020ConditionElementListC0V10Expressiona","s18SwiftSyntaxBuilder020ConditionElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020ConditionElementListC0V9Componenta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020GenericParameterListC0V10Expressiona","s18SwiftSyntaxBuilder020GenericParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder020GenericParameterListC0V9Componenta","s18SwiftSyntaxBuilder020TupleExprElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleExprElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleExprElementListC0V9Componenta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10Expressiona","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11FinalResulta","s18SwiftSyntaxBuilder021BackDeployVersionListC0V9Componenta","s18SwiftSyntaxBuilder021DictionaryElementListC0V10Expressiona","s18SwiftSyntaxBuilder021DictionaryElementListC0V11FinalResulta","s18SwiftSyntaxBuilder021DictionaryElementListC0V9Componenta","s18SwiftSyntaxBuilder021FunctionParameterListC0V10Expressiona","s18SwiftSyntaxBuilder021FunctionParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder021FunctionParameterListC0V9Componenta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10Expressiona","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11FinalResulta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V9Componenta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10Expressiona","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11FinalResulta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V9Componenta","s18SwiftSyntaxBuilder022GenericRequirementListC0V10Expressiona","s18SwiftSyntaxBuilder022GenericRequirementListC0V11FinalResulta","s18SwiftSyntaxBuilder022GenericRequirementListC0V9Componenta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10Expressiona","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11FinalResulta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V9Componenta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10Expressiona","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11FinalResulta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V9Componenta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V9Componenta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10Expressiona","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11FinalResulta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V9Componenta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10Expressiona","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11FinalResulta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V9Componenta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10Expressiona","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V9Componenta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10Expressiona","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11FinalResulta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V9Componenta","s18SwiftSyntaxBuilder08ExprListC0V10Expressiona","s18SwiftSyntaxBuilder08ExprListC0V11FinalResulta","s18SwiftSyntaxBuilder08ExprListC0V9Componenta","s18SwiftSyntaxBuilder08ObjcNameC0V10Expressiona","s18SwiftSyntaxBuilder08ObjcNameC0V11FinalResulta","s18SwiftSyntaxBuilder08ObjcNameC0V9Componenta","s18SwiftSyntaxBuilder09TokenListC0V10Expressiona","s18SwiftSyntaxBuilder09TokenListC0V11FinalResulta","s18SwiftSyntaxBuilder09TokenListC0V9Componenta","s11SwiftSyntax010AccessPathB0V","s11SwiftSyntax012AccessorListB0V","s11SwiftSyntax012CaseItemListB0V","s11SwiftSyntax012ModifierListB0V","s11SwiftSyntax012ObjCSelectorB0V","s11SwiftSyntax013AttributeListB0V","s11SwiftSyntax013CatchItemListB0V","s11SwiftSyntax014IdentifierListB0V","s11SwiftSyntax014MemberDeclListB0V","s11SwiftSyntax014SwitchCaseListB0V","s11SwiftSyntax015CatchClauseListB0V","s11SwiftSyntax016ArrayElementListB0V","s11SwiftSyntax016ClosureParamListB0V","s11SwiftSyntax017CodeBlockItemListB0V","s11SwiftSyntax017InheritedTypeListB0V","s11SwiftSyntax017NonEmptyTokenListB0V","s11SwiftSyntax018IfConfigClauseListB0V","s11SwiftSyntax018PatternBindingListB0V","s11SwiftSyntax019EnumCaseElementListB0V","s11SwiftSyntax019GenericArgumentListB0V","s11SwiftSyntax020AvailabilitySpecListB0V","s11SwiftSyntax020ConditionElementListB0V","s11SwiftSyntax020DeclNameArgumentListB0V","s11SwiftSyntax020GenericParameterListB0V","s11SwiftSyntax020TupleExprElementListB0V","s11SwiftSyntax020TupleTypeElementListB0V","s11SwiftSyntax021BackDeployVersionListB0V","s11SwiftSyntax021DictionaryElementListB0V","s11SwiftSyntax021FunctionParameterListB0V","s11SwiftSyntax021StringLiteralSegmentsB0V","s11SwiftSyntax022ClosureCaptureItemListB0V","s11SwiftSyntax022GenericRequirementListB0V","s11SwiftSyntax023PrecedenceGroupNameListB0V","s11SwiftSyntax023TuplePatternElementListB0V","s11SwiftSyntax025PrimaryAssociatedTypeListB0V","s11SwiftSyntax026CompositionTypeElementListB0V","s11SwiftSyntax026DifferentiabilityParamListB0V","s11SwiftSyntax027SpecializeAttributeSpecListB0V","s11SwiftSyntax028PrecedenceGroupAttributeListB0V","s11SwiftSyntax034MultipleTrailingClosureElementListB0V","s11SwiftSyntax04DeclB0V","s11SwiftSyntax04ExprB0V","s11SwiftSyntax04StmtB0V","s11SwiftSyntax04TypeB0V","s11SwiftSyntax05TokenB0V","s11SwiftSyntax07PatternB0V","s11SwiftSyntax08ExprListB0V","s11SwiftSyntax08ObjcNameB0V","s11SwiftSyntax09TokenListB0V","s11SwiftSyntax0B0V","s11SwiftSyntax0B8HashablePAAE2eeoiySbx_xtFZ","s11SwiftSyntax0B8HashablePAAE4hash4intoys6HasherVz_tF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013ParenthesizedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014IdentifiedDeclB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014WithStatementsB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA017WithTrailingCommaB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA07LabeledB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA09DeclGroupB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013ParenthesizedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013WithCodeBlockB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014IdentifiedDeclB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014WithStatementsB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA017WithTrailingCommaB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA06BracedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA07LabeledB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA09DeclGroupB0_pmF","s11SwiftSyntax0B8ProtocolPAAE10firstTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp","s11SwiftSyntax0B8ProtocolPAAE11descriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE11endLocation9converter19afterTrailingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE11sourceRange9converter18afterLeadingTrivia0g8TrailingI0AA06SourceE0VAA0K17LocationConverterC_S2btF","s11SwiftSyntax0B8ProtocolPAAE11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE12isCollectionSbvp","s11SwiftSyntax0B8ProtocolPAAE13contentLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE13indexInParentSivp","s11SwiftSyntax0B8ProtocolPAAE13leadingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13previousTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13startLocation9converter18afterLeadingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgAA16AbsolutePositionV_tF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgSi_tF","s11SwiftSyntax0B8ProtocolPAAE14trailingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE15classifications2inAA0B15ClassificationsVAA15ByteSourceRangeV_tF","s11SwiftSyntax0B8ProtocolPAAE15classificationsAA0B15ClassificationsVvp","s11SwiftSyntax0B8ProtocolPAAE16debugDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE27byteSizeAfterTrimmingTriviaSivp","s11SwiftSyntax0B8ProtocolPAAE2idAA0B10IdentifierVvp","s11SwiftSyntax0B8ProtocolPAAE31endPositionBeforeTrailingTriviaAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE34positionAfterSkippingLeadingTriviaAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE4rootAA0B0Vvp","s11SwiftSyntax0B8ProtocolPAAE5indexAA0B13ChildrenIndexVvp","s11SwiftSyntax0B8ProtocolPAAE5write2toyqd__z_ts16TextOutputStreamRd__lF","s11SwiftSyntax0B8ProtocolPAAE6parentAA0B0VSgvp","s11SwiftSyntax0B8ProtocolPAAE6tokensAA13TokenSequenceVvp","s11SwiftSyntax0B8ProtocolPAAE7isTokenSbvp","s11SwiftSyntax0B8ProtocolPAAE8byteSizeSivp","s11SwiftSyntax0B8ProtocolPAAE8childrenAA0B8ChildrenVvp","s11SwiftSyntax0B8ProtocolPAAE8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE9hasParentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isMissingSbvp","s11SwiftSyntax0B8ProtocolPAAE9isPresentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isUnknownSbvp","s11SwiftSyntax0B8ProtocolPAAE9lastTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE9nextTokenAA0eB0VSgvp","s11SwiftSyntax6TriviaV","sSH4hash4intoys6HasherVz_tF","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSa","sSb","sSf","sSi","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByFloatLiteralP","ss25ExpressibleByFloatLiteralP05floatD0x0cD4TypeQz_tcfc","ss27ExpressibleByBooleanLiteralP","ss27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc","ss27ExpressibleByIntegerLiteralP","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc"],"vertices":[{"p":["String","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["String","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,511]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]]},{"p":["String","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["String","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["String","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,537]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]]},{"p":["String","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["String","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,594]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]]},{"p":["String","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,603]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]]},{"p":["String","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,605]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]]},{"p":["String","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,619]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]]},{"p":["String","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,638]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]]},{"p":["Array","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,597]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"e":[["Element",2,"TokenSyntax",3089]],"c":[["Element",2,"TokenSyntax",3089]],"g":[["Element",0,0]]},{"p":["Array","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,719]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"e":[["Element",2,"TokenSyntax",3089]],"c":[["Element",2,"TokenSyntax",3089]],"g":[["Element",0,0]]},{"p":["Array","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,538]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]],"e":[["Element",2,"TokenSyntax",3089]],"c":[["Element",2,"TokenSyntax",3089]],"g":[["Element",0,0]]},{"p":["Array","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,519]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"g":[["Element",0,0]]},{"p":["Array","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,545]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"g":[["Element",0,0]]},{"p":["Array","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,649]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"g":[["Element",0,0]]},{"p":["Array","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,680]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"g":[["Element",0,0]]},{"p":["Array","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,684]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",178]],"g":[["Element",0,0]]},{"p":["Array","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,497]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"e":[["Element",2,"ExpressibleAsCaseItem",198]],"c":[["Element",2,"ExpressibleAsCaseItem",198]],"g":[["Element",0,0]]},{"p":["Array","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,520]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"e":[["Element",2,"ExpressibleAsCatchItem",210]],"c":[["Element",2,"ExpressibleAsCatchItem",210]],"g":[["Element",0,0]]},{"p":["Array","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,547]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"e":[["Element",2,"ExpressibleAsCatchClause",232]],"c":[["Element",2,"ExpressibleAsCatchClause",232]],"g":[["Element",0,0]]},{"p":["Array","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,568]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"e":[["Element",2,"ExpressibleAsArrayElement",239]],"c":[["Element",2,"ExpressibleAsArrayElement",239]],"g":[["Element",0,0]]},{"p":["Array","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,569]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"e":[["Element",2,"ExpressibleAsClosureParam",241]],"c":[["Element",2,"ExpressibleAsClosureParam",241]],"g":[["Element",0,0]]},{"p":["Array","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,506]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"e":[["Element",2,"ExpressibleAsDeclModifier",243]],"c":[["Element",2,"ExpressibleAsDeclModifier",243]],"g":[["Element",0,0]]},{"p":["Array","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,595]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"e":[["Element",2,"ExpressibleAsInheritedType",267]],"c":[["Element",2,"ExpressibleAsInheritedType",267]],"g":[["Element",0,0]]},{"p":["Array","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"e":[["Element",2,"ExpressibleAsObjcNamePiece",269]],"c":[["Element",2,"ExpressibleAsObjcNamePiece",269]],"g":[["Element",0,0]]},{"p":["Array","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,611]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"e":[["Element",2,"ExpressibleAsIfConfigClause",285]],"c":[["Element",2,"ExpressibleAsIfConfigClause",285]],"g":[["Element",0,0]]},{"p":["Array","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,614]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"e":[["Element",2,"ExpressibleAsPatternBinding",288]],"c":[["Element",2,"ExpressibleAsPatternBinding",288]],"g":[["Element",0,0]]},{"p":["Array","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,620]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"e":[["Element",2,"ExpressibleAsEnumCaseElement",297]],"c":[["Element",2,"ExpressibleAsEnumCaseElement",297]],"g":[["Element",0,0]]},{"p":["Array","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,621]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"e":[["Element",2,"ExpressibleAsGenericArgument",301]],"c":[["Element",2,"ExpressibleAsGenericArgument",301]],"g":[["Element",0,0]]},{"p":["Array","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,632]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"e":[["Element",2,"ExpressibleAsConditionElement",317]],"c":[["Element",2,"ExpressibleAsConditionElement",317]],"g":[["Element",0,0]]},{"p":["Array","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,634]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"e":[["Element",2,"ExpressibleAsDeclNameArgument",318]],"c":[["Element",2,"ExpressibleAsDeclNameArgument",318]],"g":[["Element",0,0]]},{"p":["Array","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,635]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"e":[["Element",2,"ExpressibleAsGenericParameter",322]],"c":[["Element",2,"ExpressibleAsGenericParameter",322]],"g":[["Element",0,0]]},{"p":["Array","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,639]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"e":[["Element",2,"ExpressibleAsTupleExprElement",329]],"c":[["Element",2,"ExpressibleAsTupleExprElement",329]],"g":[["Element",0,0]]},{"p":["Array","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,640]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"e":[["Element",2,"ExpressibleAsTupleTypeElement",330]],"c":[["Element",2,"ExpressibleAsTupleTypeElement",330]],"g":[["Element",0,0]]},{"p":["Array","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,643]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"e":[["Element",2,"ExpressibleAsDictionaryElement",336]],"c":[["Element",2,"ExpressibleAsDictionaryElement",336]],"g":[["Element",0,0]]},{"p":["Array","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,646]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"e":[["Element",2,"ExpressibleAsFunctionParameter",339]],"c":[["Element",2,"ExpressibleAsFunctionParameter",339]],"g":[["Element",0,0]]},{"p":["Array","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,507]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"e":[["Element",2,"ExpressibleAsObjCSelectorPiece",345]],"c":[["Element",2,"ExpressibleAsObjCSelectorPiece",345]],"g":[["Element",0,0]]},{"p":["Array","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,654]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"e":[["Element",2,"ExpressibleAsClosureCaptureItem",354]],"c":[["Element",2,"ExpressibleAsClosureCaptureItem",354]],"g":[["Element",0,0]]},{"p":["Array","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,659]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"e":[["Element",2,"ExpressibleAsGenericRequirement",356]],"c":[["Element",2,"ExpressibleAsGenericRequirement",356]],"g":[["Element",0,0]]},{"p":["Array","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,482]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"e":[["Element",2,"ExpressibleAsAccessPathComponent",366]],"c":[["Element",2,"ExpressibleAsAccessPathComponent",366]],"g":[["Element",0,0]]},{"p":["Array","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,666]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"e":[["Element",2,"ExpressibleAsTuplePatternElement",374]],"c":[["Element",2,"ExpressibleAsTuplePatternElement",374]],"g":[["Element",0,0]]},{"p":["Array","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,630]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"e":[["Element",2,"ExpressibleAsAvailabilityArgument",376]],"c":[["Element",2,"ExpressibleAsAvailabilityArgument",376]],"g":[["Element",0,0]]},{"p":["Array","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,672]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"e":[["Element",2,"ExpressibleAsPrimaryAssociatedType",395]],"c":[["Element",2,"ExpressibleAsPrimaryAssociatedType",395]],"g":[["Element",0,0]]},{"p":["Array","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,673]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"e":[["Element",2,"ExpressibleAsCompositionTypeElement",402]],"c":[["Element",2,"ExpressibleAsCompositionTypeElement",402]],"g":[["Element",0,0]]},{"p":["Array","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,674]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"e":[["Element",2,"ExpressibleAsDifferentiabilityParam",404]],"c":[["Element",2,"ExpressibleAsDifferentiabilityParam",404]],"g":[["Element",0,0]]},{"p":["Array","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,642]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"e":[["Element",2,"ExpressibleAsBackDeployVersionArgument",417]],"c":[["Element",2,"ExpressibleAsBackDeployVersionArgument",417]],"g":[["Element",0,0]]},{"p":["Array","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"e":[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",423]],"c":[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",423]],"g":[["Element",0,0]]},{"p":["Array","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,690]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"e":[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",434]],"c":[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",434]],"g":[["Element",0,0]]},{"p":["TokenSyntax","poundEndif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18]],"d":"The `#endif` keyword"},{"p":["TokenSyntax","poundError"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18]],"d":"The `#error` keyword"},{"p":["TokenSyntax","rightAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `>` token"},{"p":["TokenSyntax","rightBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `}` token"},{"p":["TokenSyntax","rightParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","capitalSelf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18]],"d":"The `Self` keyword"},{"p":["TokenSyntax","fallthrough"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18]],"d":"The `fallthrough` keyword"},{"p":["TokenSyntax","fileprivate"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18]],"d":"The `fileprivate` keyword"},{"p":["TokenSyntax","poundAssert"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18]],"d":"The `#assert` keyword"},{"p":["TokenSyntax","poundColumn"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18]],"d":"The `#column` keyword"},{"p":["TokenSyntax","poundElseif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18]],"d":"The `#elseif` keyword"},{"p":["TokenSyntax","poundFileID"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileID` keyword"},{"p":["TokenSyntax","singleQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `'` token"},{"p":["TokenSyntax","stringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"` token"},{"p":["TokenSyntax","poundKeyPath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18]],"d":"The `#keyPath` keyword"},{"p":["TokenSyntax","poundWarning"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18]],"d":"The `#warning` keyword"},{"p":["TokenSyntax","prefixPeriod"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","poundFilePath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18]],"d":"The `#filePath` keyword"},{"p":["TokenSyntax","poundFunction"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18]],"d":"The `#function` keyword"},{"p":["TokenSyntax","poundSelector"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18]],"d":"The `#selector` keyword"},{"p":["TokenSyntax","associatedtype"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18]],"d":"The `associatedtype` keyword"},{"p":["TokenSyntax","poundAvailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#available` keyword"},{"p":["TokenSyntax","poundDsohandle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18]],"d":"The `#dsohandle` keyword"},{"p":["TokenSyntax","exclamationMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]],"d":"The `!` token"},{"p":["TokenSyntax","precedencegroup"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18]],"d":"The `precedencegroup` keyword"},{"p":["TokenSyntax","prefixAmpersand"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18]],"d":"The `&` token"},{"p":["TokenSyntax","poundFileLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileLiteral` keyword"},{"p":["TokenSyntax","poundUnavailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#unavailable` keyword"},{"p":["TokenSyntax","infixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","leftSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `[` token"},{"p":["TokenSyntax","poundColorLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#colorLiteral` keyword"},{"p":["TokenSyntax","poundImageLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#imageLiteral` keyword"},{"p":["TokenSyntax","rightSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `]` token"},{"p":["TokenSyntax","postfixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","poundSourceLocation"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18]],"d":"The `#sourceLocation` keyword"},{"p":["TokenSyntax","multilineStringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"\"\"` token"},{"p":["TokenSyntax","stringInterpolationAnchor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","as"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18]],"d":"The `as` keyword"},{"p":["TokenSyntax","do"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18]],"d":"The `do` keyword"},{"p":["TokenSyntax","if"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18]],"d":"The `if` keyword"},{"p":["TokenSyntax","in"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18]],"d":"The `in` keyword"},{"p":["TokenSyntax","is"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18]],"d":"The `is` keyword"},{"p":["TokenSyntax","any"],"f":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18]],"d":"The `Any` keyword"},{"p":["TokenSyntax","eof"],"f":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18]],"d":"The `eof` token"},{"p":["TokenSyntax","for"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18]],"d":"The `for` keyword"},{"p":["TokenSyntax","let"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18]],"d":"The `let` keyword"},{"p":["TokenSyntax","nil"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18]],"d":"The `nil` keyword"},{"p":["TokenSyntax","try"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18]],"d":"The `try` keyword"},{"p":["TokenSyntax","var"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18]],"d":"The `var` keyword"},{"p":["TokenSyntax","case"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18]],"d":"The `case` keyword"},{"p":["TokenSyntax","else"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18]],"d":"The `else` keyword"},{"p":["TokenSyntax","enum"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18]],"d":"The `enum` keyword"},{"p":["TokenSyntax","func"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18]],"d":"The `func` keyword"},{"p":["TokenSyntax","init"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18]],"d":"The `init` keyword"},{"p":["TokenSyntax","open"],"f":[["static",12],[" ",17],["var",12],[" ",17],["open",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["open",7],[": ",17],["TokenSyntax",18]],"d":"The `open` contextual token"},{"p":["TokenSyntax","self"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18]],"d":"The `self` keyword"},{"p":["TokenSyntax","true"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18]],"d":"The `true` keyword"},{"p":["TokenSyntax","arrow"],"f":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]],"d":"The `->` token"},{"p":["TokenSyntax","break"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18]],"d":"The `break` keyword"},{"p":["TokenSyntax","catch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18]],"d":"The `catch` keyword"},{"p":["TokenSyntax","class"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18]],"d":"The `class` keyword"},{"p":["TokenSyntax","colon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The `:` token"},{"p":["TokenSyntax","comma"],"f":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]],"d":"The `,` token"},{"p":["TokenSyntax","defer"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18]],"d":"The `defer` keyword"},{"p":["TokenSyntax","equal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]],"d":"The `=` token"},{"p":["TokenSyntax","false"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18]],"d":"The `false` keyword"},{"p":["TokenSyntax","guard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18]],"d":"The `guard` keyword"},{"p":["TokenSyntax","inout"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18]],"d":"The `inout` keyword"},{"p":["TokenSyntax","pound"],"f":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18]],"d":"The `#` token"},{"p":["TokenSyntax","super"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18]],"d":"The `super` keyword"},{"p":["TokenSyntax","throw"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18]],"d":"The `throw` keyword"},{"p":["TokenSyntax","where"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18]],"d":"The `where` keyword"},{"p":["TokenSyntax","while"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18]],"d":"The `while` keyword"},{"p":["TokenSyntax","yield"],"f":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18]],"d":"The `yield` token"},{"p":["TokenSyntax","atSign"],"f":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18]],"d":"The `@` token"},{"p":["TokenSyntax","deinit"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18]],"d":"The `deinit` keyword"},{"p":["TokenSyntax","import"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18]],"d":"The `import` keyword"},{"p":["TokenSyntax","period"],"f":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","public"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18]],"d":"The `public` keyword"},{"p":["TokenSyntax","repeat"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18]],"d":"The `repeat` keyword"},{"p":["TokenSyntax","return"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18]],"d":"The `return` keyword"},{"p":["TokenSyntax","static"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18]],"d":"The `static` keyword"},{"p":["TokenSyntax","struct"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18]],"d":"The `struct` keyword"},{"p":["TokenSyntax","switch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18]],"d":"The `switch` keyword"},{"p":["TokenSyntax","throws"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18]],"d":"The `throws` keyword"},{"p":["TokenSyntax","default"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18]],"d":"The `default` keyword"},{"p":["TokenSyntax","poundIf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18]],"d":"The `#if` keyword"},{"p":["TokenSyntax","private"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18]],"d":"The `private` keyword"},{"p":["TokenSyntax","backtick"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18]],"d":"The ``` token"},{"p":["TokenSyntax","continue"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18]],"d":"The `continue` keyword"},{"p":["TokenSyntax","ellipsis"],"f":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18]],"d":"The `...` token"},{"p":["TokenSyntax","internal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18]],"d":"The `internal` keyword"},{"p":["TokenSyntax","operator"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18]],"d":"The `operator` keyword"},{"p":["TokenSyntax","protocol"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18]],"d":"The `protocol` keyword"},{"p":["TokenSyntax","rethrows"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18]],"d":"The `rethrows` keyword"},{"p":["TokenSyntax","wildcard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]],"d":"The `_` keyword"},{"p":["TokenSyntax","backslash"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]],"d":"The `\\` token"},{"p":["TokenSyntax","extension"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18]],"d":"The `extension` keyword"},{"p":["TokenSyntax","leftAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `<` token"},{"p":["TokenSyntax","leftBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `{` token"},{"p":["TokenSyntax","leftParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"d":"The `(` token"},{"p":["TokenSyntax","poundElse"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18]],"d":"The `#else` keyword"},{"p":["TokenSyntax","poundFile"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18]],"d":"The `#file` keyword"},{"p":["TokenSyntax","poundLine"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18]],"d":"The `#line` keyword"},{"p":["TokenSyntax","semicolon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18]],"d":"The `;` token"},{"p":["TokenSyntax","subscript"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18]],"d":"The `subscript` keyword"},{"p":["TokenSyntax","typealias"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18,3089],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18]],"d":"The `typealias` keyword"},{"p":["TokenSyntax","identifier(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["identifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["identifier",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","regexLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["regexLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["regexLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","stringLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["stringLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["stringLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","stringSegment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["stringSegment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["stringSegment",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","integerLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["integerLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["integerLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","prefixOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["prefixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["prefixOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","floatingLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["floatingLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["floatingLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","postfixOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["postfixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["postfixOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","dollarIdentifier(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["dollarIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","contextualKeyword(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["contextualKeyword",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["contextualKeyword",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","rawStringDelimiter(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["rawStringDelimiter",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","spacedBinaryOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["spacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","unspacedBinaryOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","unknown(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["unknown",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[") -> ",17],["TokenSyntax",18,3089]],"s":[["static",12],[" ",17],["func",12],[" ",17],["unknown",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,597]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to `ExpressibleAsNonEmptyTokenList`."},{"p":["TokenSyntax","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["TokenSyntax","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,719]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to `ExpressibleAsTokenList`."},{"p":["TokenSyntax","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,500]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to `ExpressibleAsDeclModifier`."},{"p":["TokenSyntax","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["TokenSyntax","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,537]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to `ExpressibleAsIdentifierExpr`."},{"p":["TokenSyntax","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,605]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to `ExpressibleAsBinaryOperatorExpr`."},{"p":["ExpressibleAsSyntaxBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7],[" : ",17],["ExpressibleAsAttributeList",18,261],[", ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,431],[", ",17],["ExpressibleAsSpecializeAttributeSpecList",18,427],[", ",17],["ExpressibleAsStringLiteralSegments",18,396],[", ",17],["ExpressibleAsSwitchCaseList",18,291]],"s":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7]]},{"p":["ExpressibleAsAsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7]]},{"p":["ExpressibleAsAsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7]]},{"p":["SyntaxListBuildable"],"f":[["protocol",12],[" ",17],["SyntaxListBuildable",7]],"s":[["protocol",12],[" ",17],["SyntaxListBuildable",7]]},{"p":["SyntaxBuildable"],"f":[["protocol",12],[" ",17],["SyntaxBuildable",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["SyntaxBuildable",7]]},{"p":["DeclBuildable"],"f":[["protocol",12],[" ",17],["DeclBuildable",7],[" : ",17],["DeclListBuildable",18,189],[", ",17],["ExpressibleAsDeclBuildable",18,264],[", ",17],["SyntaxBuildable",18,182]],"s":[["protocol",12],[" ",17],["DeclBuildable",7]]},{"p":["ExprBuildable"],"f":[["protocol",12],[" ",17],["ExprBuildable",7],[" : ",17],["ExprListBuildable",18,190],[", ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["SyntaxBuildable",18,182]],"s":[["protocol",12],[" ",17],["ExprBuildable",7]]},{"p":["StmtBuildable"],"f":[["protocol",12],[" ",17],["StmtBuildable",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272],[", ",17],["StmtListBuildable",18,191],[", ",17],["SyntaxBuildable",18,182]],"s":[["protocol",12],[" ",17],["StmtBuildable",7]]},{"p":["TypeBuildable"],"f":[["protocol",12],[" ",17],["TypeBuildable",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["SyntaxBuildable",18,182],[", ",17],["TypeListBuildable",18,192]],"s":[["protocol",12],[" ",17],["TypeBuildable",7]]},{"p":["HasTrailingComma"],"f":[["protocol",12],[" ",17],["HasTrailingComma",7]],"s":[["protocol",12],[" ",17],["HasTrailingComma",7]]},{"p":["PatternBuildable"],"f":[["protocol",12],[" ",17],["PatternBuildable",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["PatternListBuildable",18,197],[", ",17],["SyntaxBuildable",18,182]],"s":[["protocol",12],[" ",17],["PatternBuildable",7]]},{"p":["DeclListBuildable"],"f":[["protocol",12],[" ",17],["DeclListBuildable",7],[" : ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["DeclListBuildable",7]]},{"p":["ExprListBuildable"],"f":[["protocol",12],[" ",17],["ExprListBuildable",7],[" : ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["ExprListBuildable",7]]},{"p":["StmtListBuildable"],"f":[["protocol",12],[" ",17],["StmtListBuildable",7],[" : ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["StmtListBuildable",7]]},{"p":["TypeListBuildable"],"f":[["protocol",12],[" ",17],["TypeListBuildable",7],[" : ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["TypeListBuildable",7]]},{"p":["ExpressibleAsDoStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7]]},{"p":["ExpressibleAsIfStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7]]},{"p":["ExpressibleAsIsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7]]},{"p":["ExpressibleAsTryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7]]},{"p":["PatternListBuildable"],"f":[["protocol",12],[" ",17],["PatternListBuildable",7],[" : ",17],["SyntaxListBuildable",18,181]],"s":[["protocol",12],[" ",17],["PatternListBuildable",7]]},{"p":["ExpressibleAsCaseItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7],[" : ",17],["ExpressibleAsCaseItemList",18,240],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7]]},{"p":["ExpressibleAsDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7]]},{"p":["ExpressibleAsEnumDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7]]},{"p":["ExpressibleAsExprList"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprList",7],[" : ",17],["ExpressibleAsConditionElement",18,317]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprList",7]]},{"p":["ExpressibleAsObjcName"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]]},{"p":["ExpressibleAsTypeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7]]},{"p":["ExpressibleAsArrayExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7]]},{"p":["ExpressibleAsArrayType"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7],[" : ",17],["ExpressibleAsTypeAnnotation",18,292],[", ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7]]},{"p":["ExpressibleAsArrowExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7]]},{"p":["ExpressibleAsAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7]]},{"p":["ExpressibleAsAwaitExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7]]},{"p":["ExpressibleAsBreakStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7]]},{"p":["ExpressibleAsCatchItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7],[" : ",17],["ExpressibleAsCatchItemList",18,262],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7]]},{"p":["ExpressibleAsClassDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7]]},{"p":["ExpressibleAsCodeBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7]]},{"p":["ExpressibleAsDeferStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7]]},{"p":["ExpressibleAsElseBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7]]},{"p":["ExpressibleAsForInStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7]]},{"p":["ExpressibleAsGuardStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7]]},{"p":["ExpressibleAsInOutExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7]]},{"p":["ExpressibleAsThrowStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7]]},{"p":["ExpressibleAsTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]]},{"p":["ExpressibleAsTupleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7]]},{"p":["ExpressibleAsTupleType"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7]]},{"p":["ExpressibleAsWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7]]},{"p":["ExpressibleAsYieldList"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7]]},{"p":["ExpressibleAsYieldStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7]]},{"p":["ExpressibleAsAccessPath"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]]},{"p":["ExpressibleAsImportDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7]]},{"p":["ExpressibleAsReturnStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7]]},{"p":["ExpressibleAsSourceFile"],"f":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7]]},{"p":["ExpressibleAsStructDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7]]},{"p":["ExpressibleAsSwitchCase"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7]]},{"p":["ExpressibleAsSwitchStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7]]},{"p":["ExpressibleAsCatchClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7],[" : ",17],["ExpressibleAsCatchClauseList",18,293],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7]]},{"p":["ExpressibleAsClosureExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7]]},{"p":["ExpressibleAsKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7]]},{"p":["ExpressibleAsTernaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7]]},{"p":["ExpressibleAsWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7]]},{"p":["ExpressibleAsAccessorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7],[" : ",17],["ExpressibleAsAccessorList",18,238],[", ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7]]},{"p":["ExpressibleAsAccessorList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7],[" : ",17],["ExpressibleAsAccessorBlock",18,260]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7]]},{"p":["ExpressibleAsArrayElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7],[" : ",17],["ExpressibleAsArrayElementList",18,314],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7]]},{"p":["ExpressibleAsCaseItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]]},{"p":["ExpressibleAsClosureParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7],[" : ",17],["ExpressibleAsClosureParamList",18,315],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7]]},{"p":["ExpressibleAsContinueStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7]]},{"p":["ExpressibleAsDeclModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7],[" : ",17],["ExpressibleAsModifierList",18,249],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7]]},{"p":["ExpressibleAsEnumCaseDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7]]},{"p":["ExpressibleAsFunctionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7]]},{"p":["ExpressibleAsFunctionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7]]},{"p":["ExpressibleAsIfConfigDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7]]},{"p":["ExpressibleAsMetatypeType"],"f":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7]]},{"p":["ExpressibleAsModifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]]},{"p":["ExpressibleAsObjCSelector"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]]},{"p":["ExpressibleAsOperatorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7]]},{"p":["ExpressibleAsOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7]]},{"p":["ExpressibleAsProtocolDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7]]},{"p":["ExpressibleAsReturnClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7]]},{"p":["ExpressibleAsSequenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,263],[", ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["ExpressibleAsTupleExprElement",18,329]],"s":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7]]},{"p":["ExpressibleAsSuperRefExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7]]},{"p":["ExpressibleAsTuplePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7]]},{"p":["ExpressibleAsVariableDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7]]},{"p":["ExpressibleAsVersionTuple"],"f":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7]]},{"p":["ExpressibleAsAccessorBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7]]},{"p":["ExpressibleAsAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]]},{"p":["ExpressibleAsCatchItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]]},{"p":["ExpressibleAsCodeBlockItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7],[" : ",17],["ExpressibleAsCodeBlockItemList",18,333]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7]]},{"p":["ExpressibleAsDeclBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,263],[", ",17],["ExpressibleAsMemberDeclListItem",18,360]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7]]},{"p":["ExpressibleAsExprBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7],[" : ",17],["ExpressibleAsExprList",18,201]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7]]},{"p":["ExpressibleAsExtensionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7]]},{"p":["ExpressibleAsInheritedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7],[" : ",17],["ExpressibleAsInheritedTypeList",18,342],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7]]},{"p":["ExpressibleAsIsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7]]},{"p":["ExpressibleAsObjcNamePiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7],[" : ",17],["ExpressibleAsObjcName",18,202],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7]]},{"p":["ExpressibleAsPoundFileExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7]]},{"p":["ExpressibleAsPoundLineExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7]]},{"p":["ExpressibleAsStmtBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,263]],"s":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7]]},{"p":["ExpressibleAsStringSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7]]},{"p":["ExpressibleAsSubscriptDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7]]},{"p":["ExpressibleAsSubscriptExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7]]},{"p":["ExpressibleAsTypeBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7],[" : ",17],["ExpressibleAsReturnClause",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7]]},{"p":["ExpressibleAsTypealiasDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7]]},{"p":["ExpressibleAsAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7]]},{"p":["ExpressibleAsAttributedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7]]},{"p":["ExpressibleAsDictionaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7]]},{"p":["ExpressibleAsDictionaryType"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7],[" : ",17],["ExpressibleAsTypeAnnotation",18,292],[", ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7]]},{"p":["ExpressibleAsExpressionStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7]]},{"p":["ExpressibleAsIdentifierExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7]]},{"p":["ExpressibleAsIdentifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]]},{"p":["ExpressibleAsIfConfigClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7],[" : ",17],["ExpressibleAsIfConfigClauseList",18,358],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7]]},{"p":["ExpressibleAsMemberDeclList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7],[" : ",17],["ExpressibleAsMemberDeclBlock",18,304]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7]]},{"p":["ExpressibleAsNilLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7]]},{"p":["ExpressibleAsPatternBinding"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7],[" : ",17],["ExpressibleAsPatternBindingList",18,361],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7]]},{"p":["ExpressibleAsPoundErrorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7]]},{"p":["ExpressibleAsSpecializeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7]]},{"p":["ExpressibleAsSwitchCaseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]]},{"p":["ExpressibleAsTypeAnnotation"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7]]},{"p":["ExpressibleAsCatchClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]]},{"p":["ExpressibleAsCompositionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7]]},{"p":["ExpressibleAsCustomAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7]]},{"p":["ExpressibleAsDeclarationStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7]]},{"p":["ExpressibleAsEnumCaseElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7],[" : ",17],["ExpressibleAsEnumCaseElementList",18,367],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7]]},{"p":["ExpressibleAsEnumCasePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7]]},{"p":["ExpressibleAsFallthroughStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7]]},{"p":["ExpressibleAsForcedValueExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7]]},{"p":["ExpressibleAsGenericArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7],[" : ",17],["ExpressibleAsGenericArgumentList",18,368],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7]]},{"p":["ExpressibleAsInitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7]]},{"p":["ExpressibleAsKeyPathBaseExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7]]},{"p":["ExpressibleAsMemberDeclBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7]]},{"p":["ExpressibleAsObjcKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7]]},{"p":["ExpressibleAsOptionalPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7]]},{"p":["ExpressibleAsParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7]]},{"p":["ExpressibleAsPoundAssertStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7]]},{"p":["ExpressibleAsPoundColumnExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7]]},{"p":["ExpressibleAsPoundFileIDExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7]]},{"p":["ExpressibleAsRepeatWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,272]],"s":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7]]},{"p":["ExpressibleAsSwitchCaseLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7]]},{"p":["ExpressibleAsWildcardPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7]]},{"p":["ExpressibleAsArrayElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7]]},{"p":["ExpressibleAsClosureParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]]},{"p":["ExpressibleAsClosureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7]]},{"p":["ExpressibleAsConditionElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7],[" : ",17],["ExpressibleAsConditionElementList",18,379],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7]]},{"p":["ExpressibleAsDeclNameArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7],[" : ",17],["ExpressibleAsDeclNameArgumentList",18,381],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7]]},{"p":["ExpressibleAsFloatLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7]]},{"p":["ExpressibleAsFunctionCallExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,263],[", ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7]]},{"p":["ExpressibleAsFunctionDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7]]},{"p":["ExpressibleAsGenericParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7],[" : ",17],["ExpressibleAsGenericParameterList",18,382],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7]]},{"p":["ExpressibleAsMemberAccessExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7]]},{"p":["ExpressibleAsObjcSelectorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7]]},{"p":["ExpressibleAsPatternBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]]},{"p":["ExpressibleAsPostfixUnaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7]]},{"p":["ExpressibleAsPoundWarningDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7]]},{"p":["ExpressibleAsRegexLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7]]},{"p":["ExpressibleAsTupleExprElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["ExpressibleAsTupleExprElementList",18,386]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7]]},{"p":["ExpressibleAsTupleTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["ExpressibleAsTupleTypeElementList",18,387]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7]]},{"p":["ExpressibleAsAccessorParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7]]},{"p":["ExpressibleAsAvailabilityEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7]]},{"p":["ExpressibleAsCodeBlockItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7],[" : ",17],["ExpressibleAsCodeBlock",18,212]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7]]},{"p":["ExpressibleAsDeclNameArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7]]},{"p":["ExpressibleAsDeinitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7]]},{"p":["ExpressibleAsDictionaryElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7],[" : ",17],["ExpressibleAsDictionaryElementList",18,390],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7]]},{"p":["ExpressibleAsExpressionPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7]]},{"p":["ExpressibleAsExpressionSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7]]},{"p":["ExpressibleAsFunctionParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7],[" : ",17],["ExpressibleAsFunctionParameterList",18,393],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7]]},{"p":["ExpressibleAsFunctionSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7]]},{"p":["ExpressibleAsIdentifierPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7]]},{"p":["ExpressibleAsInheritedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]]},{"p":["ExpressibleAsInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7]]},{"p":["ExpressibleAsNonEmptyTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]]},{"p":["ExpressibleAsObjCSelectorPiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7],[" : ",17],["ExpressibleAsObjCSelector",18,250],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7]]},{"p":["ExpressibleAsObjectLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7]]},{"p":["ExpressibleAsPoundFilePathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7]]},{"p":["ExpressibleAsPoundFunctionExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7]]},{"p":["ExpressibleAsQualifiedDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7]]},{"p":["ExpressibleAsStringLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7]]},{"p":["ExpressibleAsAssociatedtypeDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7]]},{"p":["ExpressibleAsBinaryOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7]]},{"p":["ExpressibleAsBooleanLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7]]},{"p":["ExpressibleAsClosureCaptureItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7],[" : ",17],["ExpressibleAsClosureCaptureItemList",18,401],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7]]},{"p":["ExpressibleAsElseIfContinuation"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7]]},{"p":["ExpressibleAsGenericRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7],[" : ",17],["ExpressibleAsGenericRequirementList",18,406],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7]]},{"p":["ExpressibleAsGenericWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7]]},{"p":["ExpressibleAsIfConfigClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]]},{"p":["ExpressibleAsIntegerLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7]]},{"p":["ExpressibleAsMemberDeclListItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7],[" : ",17],["ExpressibleAsMemberDeclList",18,286]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7]]},{"p":["ExpressibleAsPatternBindingList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]]},{"p":["ExpressibleAsPoundDsohandleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7]]},{"p":["ExpressibleAsPrefixOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7]]},{"p":["ExpressibleAsSwitchDefaultLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7]]},{"p":["ExpressibleAsAccessLevelModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7]]},{"p":["ExpressibleAsAccessPathComponent"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7],[" : ",17],["ExpressibleAsAccessPath",18,225],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7]]},{"p":["ExpressibleAsEnumCaseElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]]},{"p":["ExpressibleAsGenericArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]]},{"p":["ExpressibleAsPostfixIfConfigExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7]]},{"p":["ExpressibleAsPoundSourceLocation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7]]},{"p":["ExpressibleAsPrecedenceGroupDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7]]},{"p":["ExpressibleAsSameTypeRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7]]},{"p":["ExpressibleAsTargetFunctionEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7]]},{"p":["ExpressibleAsTuplePatternElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["ExpressibleAsTuplePatternElementList",18,413]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7]]},{"p":["ExpressibleAsValueBindingPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,325]],"s":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7]]},{"p":["ExpressibleAsAvailabilityArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7],[" : ",17],["ExpressibleAsAvailabilitySpecList",18,377],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7]]},{"p":["ExpressibleAsAvailabilitySpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]]},{"p":["ExpressibleAsClassRestrictionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7]]},{"p":["ExpressibleAsConditionElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]]},{"p":["ExpressibleAsConstrainedSugarType"],"f":[["protocol",12],[" ",17],["ExpressibleAsConstrainedSugarType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsConstrainedSugarType",7]]},{"p":["ExpressibleAsDeclNameArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]]},{"p":["ExpressibleAsGenericParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]]},{"p":["ExpressibleAsMemberTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7]]},{"p":["ExpressibleAsOptionalChainingExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7]]},{"p":["ExpressibleAsSimpleTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeAnnotation",18,292],[", ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["ExpressibleAsTypeExpr",18,203]],"s":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7]]},{"p":["ExpressibleAsTupleExprElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]]},{"p":["ExpressibleAsTupleTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]]},{"p":["ExpressibleAsAvailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7]]},{"p":["ExpressibleAsBackDeployVersionList"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionList",7]]},{"p":["ExpressibleAsDictionaryElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]]},{"p":["ExpressibleAsDiscardAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7]]},{"p":["ExpressibleAsEditorPlaceholderExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7]]},{"p":["ExpressibleAsFunctionParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]]},{"p":["ExpressibleAsGenericArgumentClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7]]},{"p":["ExpressibleAsPrimaryAssociatedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7],[" : ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,419],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7]]},{"p":["ExpressibleAsStringLiteralSegments"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]]},{"p":["ExpressibleAsSymbolicReferenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7]]},{"p":["ExpressibleAsTypeInheritanceClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7]]},{"p":["ExpressibleAsTypeInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7]]},{"p":["ExpressibleAsUnresolvedPatternExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7]]},{"p":["ExpressibleAsClosureCaptureItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]]},{"p":["ExpressibleAsCompositionTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7],[" : ",17],["ExpressibleAsCompositionTypeElementList",18,420],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7]]},{"p":["ExpressibleAsConformanceRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7]]},{"p":["ExpressibleAsDifferentiabilityParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7],[" : ",17],["ExpressibleAsDifferentiabilityParamList",18,421],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7]]},{"p":["ExpressibleAsGenericParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7]]},{"p":["ExpressibleAsGenericRequirementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]]},{"p":["ExpressibleAsLabeledSpecializeEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7]]},{"p":["ExpressibleAsClosureCaptureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7]]},{"p":["ExpressibleAsDifferentiabilityParams"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7]]},{"p":["ExpressibleAsPoundSourceLocationArgs"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7]]},{"p":["ExpressibleAsPrecedenceGroupNameList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]]},{"p":["ExpressibleAsPrecedenceGroupRelation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7]]},{"p":["ExpressibleAsTuplePatternElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]]},{"p":["ExpressibleAsUnavailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7]]},{"p":["ExpressibleAsMatchingPatternCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7]]},{"p":["ExpressibleAsOptionalBindingCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7]]},{"p":["ExpressibleAsBackDeployVersionArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionArgument",7],[" : ",17],["ExpressibleAsBackDeployVersionList",18,389],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionArgument",7]]},{"p":["ExpressibleAsPrecedenceGroupAssignment"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]]},{"p":["ExpressibleAsCompositionTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]]},{"p":["ExpressibleAsDifferentiabilityParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7]]},{"p":["ExpressibleAsPrecedenceGroupNameElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7],[" : ",17],["ExpressibleAsPrecedenceGroupNameList",18,411],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7]]},{"p":["ExpressibleAsAvailabilityLabeledArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7]]},{"p":["ExpressibleAsBackDeployAttributeSpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployAttributeSpecList",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployAttributeSpecList",7]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeClause",7]]},{"p":["ExpressibleAsSpecializeAttributeSpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]]},{"p":["ExpressibleAsImplementsAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7]]},{"p":["ExpressibleAsNamedAttributeStringArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]]},{"p":["ExpressibleAsDifferentiabilityParamsClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7]]},{"p":["ExpressibleAsAvailabilityVersionRestriction"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7],[" : ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,437],[", ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7]]},{"p":["ExpressibleAsDifferentiableAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7]]},{"p":["AccessPathBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessPathBuilder",7]],"s":[["struct",12],[" ",17],["AccessPathBuilder",7]]},{"p":["AccessorListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessorListBuilder",7]],"s":[["struct",12],[" ",17],["AccessorListBuilder",7]]},{"p":["CaseItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CaseItemListBuilder",7]],"s":[["struct",12],[" ",17],["CaseItemListBuilder",7]]},{"p":["ModifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ModifierListBuilder",7]],"s":[["struct",12],[" ",17],["ModifierListBuilder",7]]},{"p":["ObjCSelectorBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjCSelectorBuilder",7]],"s":[["struct",12],[" ",17],["ObjCSelectorBuilder",7]]},{"p":["AttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AttributeListBuilder",7]],"s":[["struct",12],[" ",17],["AttributeListBuilder",7]]},{"p":["CatchItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchItemListBuilder",7]],"s":[["struct",12],[" ",17],["CatchItemListBuilder",7]]},{"p":["IdentifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IdentifierListBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierListBuilder",7]]},{"p":["MemberDeclListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MemberDeclListBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclListBuilder",7]]},{"p":["SwitchCaseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SwitchCaseListBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseListBuilder",7]]},{"p":["CatchClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchClauseListBuilder",7]],"s":[["struct",12],[" ",17],["CatchClauseListBuilder",7]]},{"p":["ArrayElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ArrayElementListBuilder",7]],"s":[["struct",12],[" ",17],["ArrayElementListBuilder",7]]},{"p":["ClosureParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureParamListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureParamListBuilder",7]]},{"p":["CodeBlockItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CodeBlockItemListBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockItemListBuilder",7]]},{"p":["InheritedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["InheritedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["InheritedTypeListBuilder",7]]},{"p":["NonEmptyTokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]]},{"p":["IfConfigClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IfConfigClauseListBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigClauseListBuilder",7]]},{"p":["PatternBindingListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PatternBindingListBuilder",7]],"s":[["struct",12],[" ",17],["PatternBindingListBuilder",7]]},{"p":["EnumCaseElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["EnumCaseElementListBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseElementListBuilder",7]]},{"p":["GenericArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentListBuilder",7]]},{"p":["AvailabilitySpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]]},{"p":["ConditionElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ConditionElementListBuilder",7]],"s":[["struct",12],[" ",17],["ConditionElementListBuilder",7]]},{"p":["DeclNameArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]]},{"p":["GenericParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericParameterListBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterListBuilder",7]]},{"p":["TupleExprElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleExprElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprElementListBuilder",7]]},{"p":["TupleTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeElementListBuilder",7]]},{"p":["BackDeployVersionListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["BackDeployVersionListBuilder",7]],"s":[["struct",12],[" ",17],["BackDeployVersionListBuilder",7]]},{"p":["DictionaryElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DictionaryElementListBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryElementListBuilder",7]]},{"p":["FunctionParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["FunctionParameterListBuilder",7]],"s":[["struct",12],[" ",17],["FunctionParameterListBuilder",7]]},{"p":["StringLiteralSegmentsBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]],"s":[["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]]},{"p":["ClosureCaptureItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]]},{"p":["GenericRequirementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericRequirementListBuilder",7]],"s":[["struct",12],[" ",17],["GenericRequirementListBuilder",7]]},{"p":["PrecedenceGroupNameListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]]},{"p":["TuplePatternElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TuplePatternElementListBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternElementListBuilder",7]]},{"p":["PrimaryAssociatedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]]},{"p":["CompositionTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]]},{"p":["DifferentiabilityParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]]},{"p":["SpecializeAttributeSpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]]},{"p":["PrecedenceGroupAttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]]},{"p":["MultipleTrailingClosureElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]]},{"p":["ExprListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ExprListBuilder",7]],"s":[["struct",12],[" ",17],["ExprListBuilder",7]]},{"p":["ObjcNameBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjcNameBuilder",7]],"s":[["struct",12],[" ",17],["ObjcNameBuilder",7]]},{"p":["TokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TokenListBuilder",7]],"s":[["struct",12],[" ",17],["TokenListBuilder",7]]},{"p":["AccessPath"],"f":[["struct",12],[" ",17],["AccessPath",7]],"s":[["struct",12],[" ",17],["AccessPath",7]],"d":"`AccessPath` represents a collection of `AccessPathComponent`s."},{"p":["ImportDecl"],"f":[["struct",12],[" ",17],["ImportDecl",7]],"s":[["struct",12],[" ",17],["ImportDecl",7]]},{"p":["ReturnStmt"],"f":[["struct",12],[" ",17],["ReturnStmt",7]],"s":[["struct",12],[" ",17],["ReturnStmt",7]]},{"p":["SourceFile"],"f":[["struct",12],[" ",17],["SourceFile",7]],"s":[["struct",12],[" ",17],["SourceFile",7]]},{"p":["StructDecl"],"f":[["struct",12],[" ",17],["StructDecl",7]],"s":[["struct",12],[" ",17],["StructDecl",7]]},{"p":["SwitchCase"],"f":[["struct",12],[" ",17],["SwitchCase",7]],"s":[["struct",12],[" ",17],["SwitchCase",7]]},{"p":["SwitchStmt"],"f":[["struct",12],[" ",17],["SwitchStmt",7]],"s":[["struct",12],[" ",17],["SwitchStmt",7]]},{"p":["CatchClause"],"f":[["struct",12],[" ",17],["CatchClause",7]],"s":[["struct",12],[" ",17],["CatchClause",7]]},{"p":["ClosureExpr"],"f":[["struct",12],[" ",17],["ClosureExpr",7]],"s":[["struct",12],[" ",17],["ClosureExpr",7]]},{"p":["KeyPathExpr"],"f":[["struct",12],[" ",17],["KeyPathExpr",7]],"s":[["struct",12],[" ",17],["KeyPathExpr",7]]},{"p":["TernaryExpr"],"f":[["struct",12],[" ",17],["TernaryExpr",7]],"s":[["struct",12],[" ",17],["TernaryExpr",7]]},{"p":["WhereClause"],"f":[["struct",12],[" ",17],["WhereClause",7]],"s":[["struct",12],[" ",17],["WhereClause",7]]},{"p":["AccessorDecl"],"f":[["struct",12],[" ",17],["AccessorDecl",7]],"s":[["struct",12],[" ",17],["AccessorDecl",7]]},{"p":["AccessorList"],"f":[["struct",12],[" ",17],["AccessorList",7]],"s":[["struct",12],[" ",17],["AccessorList",7]],"d":"`AccessorList` represents a collection of `AccessorDecl`s."},{"p":["ArrayElement"],"f":[["struct",12],[" ",17],["ArrayElement",7]],"s":[["struct",12],[" ",17],["ArrayElement",7]]},{"p":["CaseItemList"],"f":[["struct",12],[" ",17],["CaseItemList",7]],"s":[["struct",12],[" ",17],["CaseItemList",7]],"d":"`CaseItemList` represents a collection of `CaseItem`s."},{"p":["ClosureParam"],"f":[["struct",12],[" ",17],["ClosureParam",7]],"s":[["struct",12],[" ",17],["ClosureParam",7]]},{"p":["ContinueStmt"],"f":[["struct",12],[" ",17],["ContinueStmt",7]],"s":[["struct",12],[" ",17],["ContinueStmt",7]]},{"p":["DeclModifier"],"f":[["struct",12],[" ",17],["DeclModifier",7]],"s":[["struct",12],[" ",17],["DeclModifier",7]]},{"p":["EnumCaseDecl"],"f":[["struct",12],[" ",17],["EnumCaseDecl",7]],"s":[["struct",12],[" ",17],["EnumCaseDecl",7]],"d":"A `case` declaration of a Swift `enum`. It can have 1 or more`EnumCaseElement`s inside, each declaring a different case of theenum."},{"p":["FunctionDecl"],"f":[["struct",12],[" ",17],["FunctionDecl",7]],"s":[["struct",12],[" ",17],["FunctionDecl",7]]},{"p":["FunctionType"],"f":[["struct",12],[" ",17],["FunctionType",7]],"s":[["struct",12],[" ",17],["FunctionType",7]]},{"p":["IfConfigDecl"],"f":[["struct",12],[" ",17],["IfConfigDecl",7]],"s":[["struct",12],[" ",17],["IfConfigDecl",7]]},{"p":["MetatypeType"],"f":[["struct",12],[" ",17],["MetatypeType",7]],"s":[["struct",12],[" ",17],["MetatypeType",7]]},{"p":["ModifierList"],"f":[["struct",12],[" ",17],["ModifierList",7]],"s":[["struct",12],[" ",17],["ModifierList",7]],"d":"`ModifierList` represents a collection of `DeclModifier`s."},{"p":["ObjCSelector"],"f":[["struct",12],[" ",17],["ObjCSelector",7]],"s":[["struct",12],[" ",17],["ObjCSelector",7]],"d":"`ObjCSelector` represents a collection of `ObjCSelectorPiece`s."},{"p":["OperatorDecl"],"f":[["struct",12],[" ",17],["OperatorDecl",7]],"s":[["struct",12],[" ",17],["OperatorDecl",7]],"d":"A Swift `operator` declaration."},{"p":["OptionalType"],"f":[["struct",12],[" ",17],["OptionalType",7]],"s":[["struct",12],[" ",17],["OptionalType",7]]},{"p":["ProtocolDecl"],"f":[["struct",12],[" ",17],["ProtocolDecl",7]],"s":[["struct",12],[" ",17],["ProtocolDecl",7]]},{"p":["ReturnClause"],"f":[["struct",12],[" ",17],["ReturnClause",7]],"s":[["struct",12],[" ",17],["ReturnClause",7]]},{"p":["SequenceExpr"],"f":[["struct",12],[" ",17],["SequenceExpr",7]],"s":[["struct",12],[" ",17],["SequenceExpr",7]]},{"p":["SuperRefExpr"],"f":[["struct",12],[" ",17],["SuperRefExpr",7]],"s":[["struct",12],[" ",17],["SuperRefExpr",7]]},{"p":["TuplePattern"],"f":[["struct",12],[" ",17],["TuplePattern",7]],"s":[["struct",12],[" ",17],["TuplePattern",7]]},{"p":["VariableDecl"],"f":[["struct",12],[" ",17],["VariableDecl",7]],"s":[["struct",12],[" ",17],["VariableDecl",7]]},{"p":["VersionTuple"],"f":[["struct",12],[" ",17],["VersionTuple",7]],"s":[["struct",12],[" ",17],["VersionTuple",7]],"d":"A version number of the form major.minor.patch in which the minorand patch part may be omitted."},{"p":["AccessorBlock"],"f":[["struct",12],[" ",17],["AccessorBlock",7]],"s":[["struct",12],[" ",17],["AccessorBlock",7]]},{"p":["AsTypePattern"],"f":[["struct",12],[" ",17],["AsTypePattern",7]],"s":[["struct",12],[" ",17],["AsTypePattern",7]]},{"p":["AttributeList"],"f":[["struct",12],[" ",17],["AttributeList",7]],"s":[["struct",12],[" ",17],["AttributeList",7]],"d":"`AttributeList` represents a collection of `SyntaxBuildable`s."},{"p":["CatchItemList"],"f":[["struct",12],[" ",17],["CatchItemList",7]],"s":[["struct",12],[" ",17],["CatchItemList",7]],"d":"`CatchItemList` represents a collection of `CatchItem`s."},{"p":["CodeBlockItem"],"f":[["struct",12],[" ",17],["CodeBlockItem",7]],"s":[["struct",12],[" ",17],["CodeBlockItem",7]],"d":"A CodeBlockItem is any Syntax node that appears on its own line insidea CodeBlock."},{"p":["ExtensionDecl"],"f":[["struct",12],[" ",17],["ExtensionDecl",7]],"s":[["struct",12],[" ",17],["ExtensionDecl",7]]},{"p":["InheritedType"],"f":[["struct",12],[" ",17],["InheritedType",7]],"s":[["struct",12],[" ",17],["InheritedType",7]]},{"p":["IsTypePattern"],"f":[["struct",12],[" ",17],["IsTypePattern",7]],"s":[["struct",12],[" ",17],["IsTypePattern",7]]},{"p":["ObjcNamePiece"],"f":[["struct",12],[" ",17],["ObjcNamePiece",7]],"s":[["struct",12],[" ",17],["ObjcNamePiece",7]]},{"p":["PoundFileExpr"],"f":[["struct",12],[" ",17],["PoundFileExpr",7]],"s":[["struct",12],[" ",17],["PoundFileExpr",7]]},{"p":["PoundLineExpr"],"f":[["struct",12],[" ",17],["PoundLineExpr",7]],"s":[["struct",12],[" ",17],["PoundLineExpr",7]]},{"p":["StringSegment"],"f":[["struct",12],[" ",17],["StringSegment",7]],"s":[["struct",12],[" ",17],["StringSegment",7]]},{"p":["SubscriptDecl"],"f":[["struct",12],[" ",17],["SubscriptDecl",7]],"s":[["struct",12],[" ",17],["SubscriptDecl",7]]},{"p":["SubscriptExpr"],"f":[["struct",12],[" ",17],["SubscriptExpr",7]],"s":[["struct",12],[" ",17],["SubscriptExpr",7]]},{"p":["TypealiasDecl"],"f":[["struct",12],[" ",17],["TypealiasDecl",7]],"s":[["struct",12],[" ",17],["TypealiasDecl",7]]},{"p":["AssignmentExpr"],"f":[["struct",12],[" ",17],["AssignmentExpr",7]],"s":[["struct",12],[" ",17],["AssignmentExpr",7]]},{"p":["AttributedType"],"f":[["struct",12],[" ",17],["AttributedType",7]],"s":[["struct",12],[" ",17],["AttributedType",7]]},{"p":["DictionaryExpr"],"f":[["struct",12],[" ",17],["DictionaryExpr",7]],"s":[["struct",12],[" ",17],["DictionaryExpr",7]]},{"p":["DictionaryType"],"f":[["struct",12],[" ",17],["DictionaryType",7]],"s":[["struct",12],[" ",17],["DictionaryType",7]]},{"p":["ExpressionStmt"],"f":[["struct",12],[" ",17],["ExpressionStmt",7]],"s":[["struct",12],[" ",17],["ExpressionStmt",7]]},{"p":["IdentifierExpr"],"f":[["struct",12],[" ",17],["IdentifierExpr",7]],"s":[["struct",12],[" ",17],["IdentifierExpr",7]]},{"p":["IdentifierList"],"f":[["struct",12],[" ",17],["IdentifierList",7]],"s":[["struct",12],[" ",17],["IdentifierList",7]],"d":"`IdentifierList` represents a collection of `TokenSyntax`s."},{"p":["IfConfigClause"],"f":[["struct",12],[" ",17],["IfConfigClause",7]],"s":[["struct",12],[" ",17],["IfConfigClause",7]]},{"p":["MemberDeclList"],"f":[["struct",12],[" ",17],["MemberDeclList",7]],"s":[["struct",12],[" ",17],["MemberDeclList",7]],"d":"`MemberDeclList` represents a collection of `MemberDeclListItem`s."},{"p":["NilLiteralExpr"],"f":[["struct",12],[" ",17],["NilLiteralExpr",7]],"s":[["struct",12],[" ",17],["NilLiteralExpr",7]]},{"p":["PatternBinding"],"f":[["struct",12],[" ",17],["PatternBinding",7]],"s":[["struct",12],[" ",17],["PatternBinding",7]]},{"p":["PoundErrorDecl"],"f":[["struct",12],[" ",17],["PoundErrorDecl",7]],"s":[["struct",12],[" ",17],["PoundErrorDecl",7]]},{"p":["SpecializeExpr"],"f":[["struct",12],[" ",17],["SpecializeExpr",7]],"s":[["struct",12],[" ",17],["SpecializeExpr",7]]},{"p":["SwitchCaseList"],"f":[["struct",12],[" ",17],["SwitchCaseList",7]],"s":[["struct",12],[" ",17],["SwitchCaseList",7]],"d":"`SwitchCaseList` represents a collection of `SyntaxBuildable`s."},{"p":["TypeAnnotation"],"f":[["struct",12],[" ",17],["TypeAnnotation",7]],"s":[["struct",12],[" ",17],["TypeAnnotation",7]]},{"p":["CatchClauseList"],"f":[["struct",12],[" ",17],["CatchClauseList",7]],"s":[["struct",12],[" ",17],["CatchClauseList",7]],"d":"`CatchClauseList` represents a collection of `CatchClause`s."},{"p":["CompositionType"],"f":[["struct",12],[" ",17],["CompositionType",7]],"s":[["struct",12],[" ",17],["CompositionType",7]]},{"p":["CustomAttribute"],"f":[["struct",12],[" ",17],["CustomAttribute",7]],"s":[["struct",12],[" ",17],["CustomAttribute",7]],"d":"A custom `@` attribute."},{"p":["DeclarationStmt"],"f":[["struct",12],[" ",17],["DeclarationStmt",7]],"s":[["struct",12],[" ",17],["DeclarationStmt",7]]},{"p":["EnumCaseElement"],"f":[["struct",12],[" ",17],["EnumCaseElement",7]],"s":[["struct",12],[" ",17],["EnumCaseElement",7]],"d":"An element of an enum case, containing the name of the case and,optionally, either associated values or an assignment to a raw value."},{"p":["EnumCasePattern"],"f":[["struct",12],[" ",17],["EnumCasePattern",7]],"s":[["struct",12],[" ",17],["EnumCasePattern",7]]},{"p":["FallthroughStmt"],"f":[["struct",12],[" ",17],["FallthroughStmt",7]],"s":[["struct",12],[" ",17],["FallthroughStmt",7]]},{"p":["ForcedValueExpr"],"f":[["struct",12],[" ",17],["ForcedValueExpr",7]],"s":[["struct",12],[" ",17],["ForcedValueExpr",7]]},{"p":["GenericArgument"],"f":[["struct",12],[" ",17],["GenericArgument",7]],"s":[["struct",12],[" ",17],["GenericArgument",7]]},{"p":["InitializerDecl"],"f":[["struct",12],[" ",17],["InitializerDecl",7]],"s":[["struct",12],[" ",17],["InitializerDecl",7]]},{"p":["KeyPathBaseExpr"],"f":[["struct",12],[" ",17],["KeyPathBaseExpr",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExpr",7]]},{"p":["MemberDeclBlock"],"f":[["struct",12],[" ",17],["MemberDeclBlock",7]],"s":[["struct",12],[" ",17],["MemberDeclBlock",7]]},{"p":["ObjcKeyPathExpr"],"f":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]]},{"p":["OptionalPattern"],"f":[["struct",12],[" ",17],["OptionalPattern",7]],"s":[["struct",12],[" ",17],["OptionalPattern",7]]},{"p":["ParameterClause"],"f":[["struct",12],[" ",17],["ParameterClause",7]],"s":[["struct",12],[" ",17],["ParameterClause",7]]},{"p":["PoundAssertStmt"],"f":[["struct",12],[" ",17],["PoundAssertStmt",7]],"s":[["struct",12],[" ",17],["PoundAssertStmt",7]]},{"p":["PoundColumnExpr"],"f":[["struct",12],[" ",17],["PoundColumnExpr",7]],"s":[["struct",12],[" ",17],["PoundColumnExpr",7]]},{"p":["PoundFileIDExpr"],"f":[["struct",12],[" ",17],["PoundFileIDExpr",7]],"s":[["struct",12],[" ",17],["PoundFileIDExpr",7]]},{"p":["RepeatWhileStmt"],"f":[["struct",12],[" ",17],["RepeatWhileStmt",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmt",7]]},{"p":["SwitchCaseLabel"],"f":[["struct",12],[" ",17],["SwitchCaseLabel",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabel",7]]},{"p":["WildcardPattern"],"f":[["struct",12],[" ",17],["WildcardPattern",7]],"s":[["struct",12],[" ",17],["WildcardPattern",7]]},{"p":["ArrayElementList"],"f":[["struct",12],[" ",17],["ArrayElementList",7]],"s":[["struct",12],[" ",17],["ArrayElementList",7]],"d":"`ArrayElementList` represents a collection of `ArrayElement`s."},{"p":["ClosureParamList"],"f":[["struct",12],[" ",17],["ClosureParamList",7]],"s":[["struct",12],[" ",17],["ClosureParamList",7]],"d":"`ClosureParamList` represents a collection of `ClosureParam`s."},{"p":["ClosureSignature"],"f":[["struct",12],[" ",17],["ClosureSignature",7]],"s":[["struct",12],[" ",17],["ClosureSignature",7]]},{"p":["ConditionElement"],"f":[["struct",12],[" ",17],["ConditionElement",7]],"s":[["struct",12],[" ",17],["ConditionElement",7]]},{"p":["DeclNameArgument"],"f":[["struct",12],[" ",17],["DeclNameArgument",7]],"s":[["struct",12],[" ",17],["DeclNameArgument",7]]},{"p":["FloatLiteralExpr"],"f":[["struct",12],[" ",17],["FloatLiteralExpr",7]],"s":[["struct",12],[" ",17],["FloatLiteralExpr",7]]},{"p":["FunctionCallExpr"],"f":[["struct",12],[" ",17],["FunctionCallExpr",7]],"s":[["struct",12],[" ",17],["FunctionCallExpr",7]]},{"p":["FunctionDeclName"],"f":[["struct",12],[" ",17],["FunctionDeclName",7]],"s":[["struct",12],[" ",17],["FunctionDeclName",7]],"d":"A function declaration name (e.g. `foo(_:_:)`)."},{"p":["GenericParameter"],"f":[["struct",12],[" ",17],["GenericParameter",7]],"s":[["struct",12],[" ",17],["GenericParameter",7]]},{"p":["MemberAccessExpr"],"f":[["struct",12],[" ",17],["MemberAccessExpr",7]],"s":[["struct",12],[" ",17],["MemberAccessExpr",7]]},{"p":["ObjcSelectorExpr"],"f":[["struct",12],[" ",17],["ObjcSelectorExpr",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExpr",7]]},{"p":["PostfixUnaryExpr"],"f":[["struct",12],[" ",17],["PostfixUnaryExpr",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExpr",7]]},{"p":["PoundWarningDecl"],"f":[["struct",12],[" ",17],["PoundWarningDecl",7]],"s":[["struct",12],[" ",17],["PoundWarningDecl",7]]},{"p":["RegexLiteralExpr"],"f":[["struct",12],[" ",17],["RegexLiteralExpr",7]],"s":[["struct",12],[" ",17],["RegexLiteralExpr",7]]},{"p":["TupleExprElement"],"f":[["struct",12],[" ",17],["TupleExprElement",7]],"s":[["struct",12],[" ",17],["TupleExprElement",7]]},{"p":["TupleTypeElement"],"f":[["struct",12],[" ",17],["TupleTypeElement",7]],"s":[["struct",12],[" ",17],["TupleTypeElement",7]]},{"p":["AccessorParameter"],"f":[["struct",12],[" ",17],["AccessorParameter",7]],"s":[["struct",12],[" ",17],["AccessorParameter",7]]},{"p":["AvailabilityEntry"],"f":[["struct",12],[" ",17],["AvailabilityEntry",7]],"s":[["struct",12],[" ",17],["AvailabilityEntry",7]],"d":"The availability argument for the _specialize attribute"},{"p":["CodeBlockItemList"],"f":[["struct",12],[" ",17],["CodeBlockItemList",7]],"s":[["struct",12],[" ",17],["CodeBlockItemList",7]],"d":"`CodeBlockItemList` represents a collection of `CodeBlockItem`s."},{"p":["DeclNameArguments"],"f":[["struct",12],[" ",17],["DeclNameArguments",7]],"s":[["struct",12],[" ",17],["DeclNameArguments",7]]},{"p":["DeinitializerDecl"],"f":[["struct",12],[" ",17],["DeinitializerDecl",7]],"s":[["struct",12],[" ",17],["DeinitializerDecl",7]]},{"p":["DictionaryElement"],"f":[["struct",12],[" ",17],["DictionaryElement",7]],"s":[["struct",12],[" ",17],["DictionaryElement",7]]},{"p":["ExpressionPattern"],"f":[["struct",12],[" ",17],["ExpressionPattern",7]],"s":[["struct",12],[" ",17],["ExpressionPattern",7]]},{"p":["ExpressionSegment"],"f":[["struct",12],[" ",17],["ExpressionSegment",7]],"s":[["struct",12],[" ",17],["ExpressionSegment",7]]},{"p":["FunctionParameter"],"f":[["struct",12],[" ",17],["FunctionParameter",7]],"s":[["struct",12],[" ",17],["FunctionParameter",7]]},{"p":["FunctionSignature"],"f":[["struct",12],[" ",17],["FunctionSignature",7]],"s":[["struct",12],[" ",17],["FunctionSignature",7]]},{"p":["IdentifierPattern"],"f":[["struct",12],[" ",17],["IdentifierPattern",7]],"s":[["struct",12],[" ",17],["IdentifierPattern",7]]},{"p":["InheritedTypeList"],"f":[["struct",12],[" ",17],["InheritedTypeList",7]],"s":[["struct",12],[" ",17],["InheritedTypeList",7]],"d":"`InheritedTypeList` represents a collection of `InheritedType`s."},{"p":["InitializerClause"],"f":[["struct",12],[" ",17],["InitializerClause",7]],"s":[["struct",12],[" ",17],["InitializerClause",7]]},{"p":["NonEmptyTokenList"],"f":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"d":"`NonEmptyTokenList` represents a collection of `TokenSyntax`s."},{"p":["ObjCSelectorPiece"],"f":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"d":"A piece of an Objective-C selector. Either consisting of just anidentifier for a nullary selector, an identifier and a colon for alabeled argument or just a colon for an unlabeled argument"},{"p":["ObjectLiteralExpr"],"f":[["struct",12],[" ",17],["ObjectLiteralExpr",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExpr",7]]},{"p":["PoundFilePathExpr"],"f":[["struct",12],[" ",17],["PoundFilePathExpr",7]],"s":[["struct",12],[" ",17],["PoundFilePathExpr",7]]},{"p":["PoundFunctionExpr"],"f":[["struct",12],[" ",17],["PoundFunctionExpr",7]],"s":[["struct",12],[" ",17],["PoundFunctionExpr",7]]},{"p":["QualifiedDeclName"],"f":[["struct",12],[" ",17],["QualifiedDeclName",7]],"s":[["struct",12],[" ",17],["QualifiedDeclName",7]],"d":"An optionally qualified function declaration name (e.g. `+(_:_:)`,`A.B.C.foo(_:_:)`)."},{"p":["StringLiteralExpr"],"f":[["struct",12],[" ",17],["StringLiteralExpr",7]],"s":[["struct",12],[" ",17],["StringLiteralExpr",7]]},{"p":["AssociatedtypeDecl"],"f":[["struct",12],[" ",17],["AssociatedtypeDecl",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDecl",7]]},{"p":["BinaryOperatorExpr"],"f":[["struct",12],[" ",17],["BinaryOperatorExpr",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExpr",7]]},{"p":["BooleanLiteralExpr"],"f":[["struct",12],[" ",17],["BooleanLiteralExpr",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExpr",7]]},{"p":["ClosureCaptureItem"],"f":[["struct",12],[" ",17],["ClosureCaptureItem",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItem",7]]},{"p":["ElseIfContinuation"],"f":[["struct",12],[" ",17],["ElseIfContinuation",7]],"s":[["struct",12],[" ",17],["ElseIfContinuation",7]]},{"p":["GenericRequirement"],"f":[["struct",12],[" ",17],["GenericRequirement",7]],"s":[["struct",12],[" ",17],["GenericRequirement",7]]},{"p":["GenericWhereClause"],"f":[["struct",12],[" ",17],["GenericWhereClause",7]],"s":[["struct",12],[" ",17],["GenericWhereClause",7]]},{"p":["IfConfigClauseList"],"f":[["struct",12],[" ",17],["IfConfigClauseList",7]],"s":[["struct",12],[" ",17],["IfConfigClauseList",7]],"d":"`IfConfigClauseList` represents a collection of `IfConfigClause`s."},{"p":["IntegerLiteralExpr"],"f":[["struct",12],[" ",17],["IntegerLiteralExpr",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExpr",7]]},{"p":["MemberDeclListItem"],"f":[["struct",12],[" ",17],["MemberDeclListItem",7]],"s":[["struct",12],[" ",17],["MemberDeclListItem",7]],"d":"A member declaration of a type consisting of a declaration and anoptional semicolon;"},{"p":["PatternBindingList"],"f":[["struct",12],[" ",17],["PatternBindingList",7]],"s":[["struct",12],[" ",17],["PatternBindingList",7]],"d":"`PatternBindingList` represents a collection of `PatternBinding`s."},{"p":["PoundDsohandleExpr"],"f":[["struct",12],[" ",17],["PoundDsohandleExpr",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExpr",7]]},{"p":["PrefixOperatorExpr"],"f":[["struct",12],[" ",17],["PrefixOperatorExpr",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExpr",7]]},{"p":["SwitchDefaultLabel"],"f":[["struct",12],[" ",17],["SwitchDefaultLabel",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabel",7]]},{"p":["AccessLevelModifier"],"f":[["struct",12],[" ",17],["AccessLevelModifier",7]],"s":[["struct",12],[" ",17],["AccessLevelModifier",7]]},{"p":["AccessPathComponent"],"f":[["struct",12],[" ",17],["AccessPathComponent",7]],"s":[["struct",12],[" ",17],["AccessPathComponent",7]]},{"p":["EnumCaseElementList"],"f":[["struct",12],[" ",17],["EnumCaseElementList",7]],"s":[["struct",12],[" ",17],["EnumCaseElementList",7]],"d":"A collection of 0 or more `EnumCaseElement`s."},{"p":["GenericArgumentList"],"f":[["struct",12],[" ",17],["GenericArgumentList",7]],"s":[["struct",12],[" ",17],["GenericArgumentList",7]],"d":"`GenericArgumentList` represents a collection of `GenericArgument`s."},{"p":["PostfixIfConfigExpr"],"f":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]]},{"p":["PoundSourceLocation"],"f":[["struct",12],[" ",17],["PoundSourceLocation",7]],"s":[["struct",12],[" ",17],["PoundSourceLocation",7]]},{"p":["PrecedenceGroupDecl"],"f":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"d":"A Swift `precedencegroup` declaration."},{"p":["SameTypeRequirement"],"f":[["struct",12],[" ",17],["SameTypeRequirement",7]],"s":[["struct",12],[" ",17],["SameTypeRequirement",7]]},{"p":["TargetFunctionEntry"],"f":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"d":"A labeled argument for the `@_specialize` attribute with a functiondecl value like`target: myFunc(_:)`"},{"p":["TuplePatternElement"],"f":[["struct",12],[" ",17],["TuplePatternElement",7]],"s":[["struct",12],[" ",17],["TuplePatternElement",7]]},{"p":["ValueBindingPattern"],"f":[["struct",12],[" ",17],["ValueBindingPattern",7]],"s":[["struct",12],[" ",17],["ValueBindingPattern",7]]},{"p":["AvailabilityArgument"],"f":[["struct",12],[" ",17],["AvailabilityArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityArgument",7]],"d":"A single argument to an `@available` argument like `*`, `iOS 10.1`,or `message: \"This has been deprecated\"`."},{"p":["AvailabilitySpecList"],"f":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"d":"`AvailabilitySpecList` represents a collection of `AvailabilityArgument`s."},{"p":["ClassRestrictionType"],"f":[["struct",12],[" ",17],["ClassRestrictionType",7]],"s":[["struct",12],[" ",17],["ClassRestrictionType",7]]},{"p":["ConditionElementList"],"f":[["struct",12],[" ",17],["ConditionElementList",7]],"s":[["struct",12],[" ",17],["ConditionElementList",7]],"d":"`ConditionElementList` represents a collection of `ConditionElement`s."},{"p":["ConstrainedSugarType"],"f":[["struct",12],[" ",17],["ConstrainedSugarType",7]],"s":[["struct",12],[" ",17],["ConstrainedSugarType",7]]},{"p":["DeclNameArgumentList"],"f":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"d":"`DeclNameArgumentList` represents a collection of `DeclNameArgument`s."},{"p":["GenericParameterList"],"f":[["struct",12],[" ",17],["GenericParameterList",7]],"s":[["struct",12],[" ",17],["GenericParameterList",7]],"d":"`GenericParameterList` represents a collection of `GenericParameter`s."},{"p":["MemberTypeIdentifier"],"f":[["struct",12],[" ",17],["MemberTypeIdentifier",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifier",7]]},{"p":["OptionalChainingExpr"],"f":[["struct",12],[" ",17],["OptionalChainingExpr",7]],"s":[["struct",12],[" ",17],["OptionalChainingExpr",7]]},{"p":["SimpleTypeIdentifier"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]]},{"p":["TupleExprElementList"],"f":[["struct",12],[" ",17],["TupleExprElementList",7]],"s":[["struct",12],[" ",17],["TupleExprElementList",7]],"d":"`TupleExprElementList` represents a collection of `TupleExprElement`s."},{"p":["TupleTypeElementList"],"f":[["struct",12],[" ",17],["TupleTypeElementList",7]],"s":[["struct",12],[" ",17],["TupleTypeElementList",7]],"d":"`TupleTypeElementList` represents a collection of `TupleTypeElement`s."},{"p":["AvailabilityCondition"],"f":[["struct",12],[" ",17],["AvailabilityCondition",7]],"s":[["struct",12],[" ",17],["AvailabilityCondition",7]]},{"p":["BackDeployVersionList"],"f":[["struct",12],[" ",17],["BackDeployVersionList",7]],"s":[["struct",12],[" ",17],["BackDeployVersionList",7]],"d":"`BackDeployVersionList` represents a collection of `BackDeployVersionArgument`s."},{"p":["DictionaryElementList"],"f":[["struct",12],[" ",17],["DictionaryElementList",7]],"s":[["struct",12],[" ",17],["DictionaryElementList",7]],"d":"`DictionaryElementList` represents a collection of `DictionaryElement`s."},{"p":["DiscardAssignmentExpr"],"f":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]]},{"p":["EditorPlaceholderExpr"],"f":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]]},{"p":["FunctionParameterList"],"f":[["struct",12],[" ",17],["FunctionParameterList",7]],"s":[["struct",12],[" ",17],["FunctionParameterList",7]],"d":"`FunctionParameterList` represents a collection of `FunctionParameter`s."},{"p":["GenericArgumentClause"],"f":[["struct",12],[" ",17],["GenericArgumentClause",7]],"s":[["struct",12],[" ",17],["GenericArgumentClause",7]]},{"p":["PrimaryAssociatedType"],"f":[["struct",12],[" ",17],["PrimaryAssociatedType",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedType",7]]},{"p":["StringLiteralSegments"],"f":[["struct",12],[" ",17],["StringLiteralSegments",7]],"s":[["struct",12],[" ",17],["StringLiteralSegments",7]],"d":"`StringLiteralSegments` represents a collection of `SyntaxBuildable`s."},{"p":["SymbolicReferenceExpr"],"f":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]]},{"p":["TypeInheritanceClause"],"f":[["struct",12],[" ",17],["TypeInheritanceClause",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClause",7]]},{"p":["TypeInitializerClause"],"f":[["struct",12],[" ",17],["TypeInitializerClause",7]],"s":[["struct",12],[" ",17],["TypeInitializerClause",7]]},{"p":["UnresolvedPatternExpr"],"f":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]]},{"p":["ClosureCaptureItemList"],"f":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"d":"`ClosureCaptureItemList` represents a collection of `ClosureCaptureItem`s."},{"p":["CompositionTypeElement"],"f":[["struct",12],[" ",17],["CompositionTypeElement",7]],"s":[["struct",12],[" ",17],["CompositionTypeElement",7]]},{"p":["ConformanceRequirement"],"f":[["struct",12],[" ",17],["ConformanceRequirement",7]],"s":[["struct",12],[" ",17],["ConformanceRequirement",7]]},{"p":["DifferentiabilityParam"],"f":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"d":"A differentiability parameter: either the \"self\" identifier, a functionparameter name, or a function parameter index."},{"p":["GenericParameterClause"],"f":[["struct",12],[" ",17],["GenericParameterClause",7]],"s":[["struct",12],[" ",17],["GenericParameterClause",7]]},{"p":["GenericRequirementList"],"f":[["struct",12],[" ",17],["GenericRequirementList",7]],"s":[["struct",12],[" ",17],["GenericRequirementList",7]],"d":"`GenericRequirementList` represents a collection of `GenericRequirement`s."},{"p":["LabeledSpecializeEntry"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"d":"A labeled argument for the `@_specialize` attribute like`exported: true`"},{"p":["ClosureCaptureSignature"],"f":[["struct",12],[" ",17],["ClosureCaptureSignature",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignature",7]]},{"p":["DifferentiabilityParams"],"f":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"d":"The differentiability parameters."},{"p":["PoundSourceLocationArgs"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]]},{"p":["PrecedenceGroupNameList"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"d":"`PrecedenceGroupNameList` represents a collection of `PrecedenceGroupNameElement`s."},{"p":["PrecedenceGroupRelation"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"d":"Specify the new precedence group's relation to existing precedencegroups."},{"p":["TuplePatternElementList"],"f":[["struct",12],[" ",17],["TuplePatternElementList",7]],"s":[["struct",12],[" ",17],["TuplePatternElementList",7]],"d":"`TuplePatternElementList` represents a collection of `TuplePatternElement`s."},{"p":["UnavailabilityCondition"],"f":[["struct",12],[" ",17],["UnavailabilityCondition",7]],"s":[["struct",12],[" ",17],["UnavailabilityCondition",7]]},{"p":["MatchingPatternCondition"],"f":[["struct",12],[" ",17],["MatchingPatternCondition",7]],"s":[["struct",12],[" ",17],["MatchingPatternCondition",7]]},{"p":["OptionalBindingCondition"],"f":[["struct",12],[" ",17],["OptionalBindingCondition",7]],"s":[["struct",12],[" ",17],["OptionalBindingCondition",7]]},{"p":["BackDeployVersionArgument"],"f":[["struct",12],[" ",17],["BackDeployVersionArgument",7]],"s":[["struct",12],[" ",17],["BackDeployVersionArgument",7]],"d":"A single platform/version pair in a `@_backDeploy` attribute,e.g. `iOS 10.1`."},{"p":["PrecedenceGroupAssignment"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"d":"Specifies the precedence of an operator when used in an operationthat includes optional chaining."},{"p":["PrimaryAssociatedTypeList"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"d":"`PrimaryAssociatedTypeList` represents a collection of `PrimaryAssociatedType`s."},{"p":["CompositionTypeElementList"],"f":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"d":"`CompositionTypeElementList` represents a collection of `CompositionTypeElement`s."},{"p":["DifferentiabilityParamList"],"f":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"d":"`DifferentiabilityParamList` represents a collection of `DifferentiabilityParam`s."},{"p":["OperatorPrecedenceAndTypes"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"d":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration."},{"p":["PrecedenceGroupNameElement"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]]},{"p":["AvailabilityLabeledArgument"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"d":"A argument to an `@available` attribute that consists of a label anda value, e.g. `message: \"This has been deprecated\"`."},{"p":["BackDeployAttributeSpecList"],"f":[["struct",12],[" ",17],["BackDeployAttributeSpecList",7]],"s":[["struct",12],[" ",17],["BackDeployAttributeSpecList",7]],"d":"A collection of arguments for the `@_backDeploy` attribute"},{"p":["PrimaryAssociatedTypeClause"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeClause",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeClause",7]]},{"p":["SpecializeAttributeSpecList"],"f":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"d":"A collection of arguments for the `@_specialize` attribute"},{"p":["ImplementsAttributeArguments"],"f":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"d":"The arguments for the `@_implements` attribute of the form`Type, methodName(arg1Label:arg2Label:)`"},{"p":["NamedAttributeStringArgument"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"d":"The argument for the `@_dynamic_replacement` or `@_private`attribute of the form `for: \"function()\"` or `sourceFile:\"Src.swift\"`"},{"p":["PrecedenceGroupAssociativity"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"d":"Specifies how a sequence of operators with the same precedence levelare grouped together in the absence of grouping parentheses."},{"p":["PrecedenceGroupAttributeList"],"f":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"d":"`PrecedenceGroupAttributeList` represents a collection of `SyntaxBuildable`s."},{"p":["DifferentiabilityParamsClause"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"d":"A clause containing differentiability parameters."},{"p":["AvailabilityVersionRestriction"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"d":"An argument to `@available` that restricts the availability on acertain platform to a version, e.g. `iOS 10` or `swift 3.4`."},{"p":["MultipleTrailingClosureElement"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]]},{"p":["ImplicitlyUnwrappedOptionalType"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]]},{"p":["DifferentiableAttributeArguments"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"d":"The arguments for the `@differentiable` attribute: an optionaldifferentiability kind, an optional differentiability parameter clause,and an optional 'where' clause."},{"p":["MultipleTrailingClosureElementList"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"d":"`MultipleTrailingClosureElementList` represents a collection of `MultipleTrailingClosureElement`s."},{"p":["DerivativeRegistrationAttributeArguments"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"d":"The arguments for the '@derivative(of:)' and '@transpose(of:)'attributes: the 'of:' label, the original declaration name, and anoptional differentiability parameter list."},{"p":["AsExpr"],"f":[["struct",12],[" ",17],["AsExpr",7]],"s":[["struct",12],[" ",17],["AsExpr",7]]},{"p":["DoStmt"],"f":[["struct",12],[" ",17],["DoStmt",7]],"s":[["struct",12],[" ",17],["DoStmt",7]]},{"p":["Format"],"f":[["struct",12],[" ",17],["Format",7]],"s":[["struct",12],[" ",17],["Format",7]]},{"p":["IfStmt"],"f":[["struct",12],[" ",17],["IfStmt",7]],"s":[["struct",12],[" ",17],["IfStmt",7]]},{"p":["IsExpr"],"f":[["struct",12],[" ",17],["IsExpr",7]],"s":[["struct",12],[" ",17],["IsExpr",7]]},{"p":["TryExpr"],"f":[["struct",12],[" ",17],["TryExpr",7]],"s":[["struct",12],[" ",17],["TryExpr",7]]},{"p":["CaseItem"],"f":[["struct",12],[" ",17],["CaseItem",7]],"s":[["struct",12],[" ",17],["CaseItem",7]]},{"p":["DeclName"],"f":[["struct",12],[" ",17],["DeclName",7]],"s":[["struct",12],[" ",17],["DeclName",7]]},{"p":["EnumDecl"],"f":[["struct",12],[" ",17],["EnumDecl",7]],"s":[["struct",12],[" ",17],["EnumDecl",7]],"d":"A Swift `enum` declaration."},{"p":["ExprList"],"f":[["struct",12],[" ",17],["ExprList",7]],"s":[["struct",12],[" ",17],["ExprList",7]],"d":"A list of expressions connected by operators. This list is containedby a `SequenceExprSyntax`."},{"p":["ObjcName"],"f":[["struct",12],[" ",17],["ObjcName",7]],"s":[["struct",12],[" ",17],["ObjcName",7]],"d":"`ObjcName` represents a collection of `ObjcNamePiece`s."},{"p":["TypeExpr"],"f":[["struct",12],[" ",17],["TypeExpr",7]],"s":[["struct",12],[" ",17],["TypeExpr",7]]},{"p":["ArrayExpr"],"f":[["struct",12],[" ",17],["ArrayExpr",7]],"s":[["struct",12],[" ",17],["ArrayExpr",7]]},{"p":["ArrayType"],"f":[["struct",12],[" ",17],["ArrayType",7]],"s":[["struct",12],[" ",17],["ArrayType",7]]},{"p":["ArrowExpr"],"f":[["struct",12],[" ",17],["ArrowExpr",7]],"s":[["struct",12],[" ",17],["ArrowExpr",7]]},{"p":["Attribute"],"f":[["struct",12],[" ",17],["Attribute",7]],"s":[["struct",12],[" ",17],["Attribute",7]],"d":"An `@` attribute."},{"p":["AwaitExpr"],"f":[["struct",12],[" ",17],["AwaitExpr",7]],"s":[["struct",12],[" ",17],["AwaitExpr",7]]},{"p":["BreakStmt"],"f":[["struct",12],[" ",17],["BreakStmt",7]],"s":[["struct",12],[" ",17],["BreakStmt",7]]},{"p":["CatchItem"],"f":[["struct",12],[" ",17],["CatchItem",7]],"s":[["struct",12],[" ",17],["CatchItem",7]]},{"p":["ClassDecl"],"f":[["struct",12],[" ",17],["ClassDecl",7]],"s":[["struct",12],[" ",17],["ClassDecl",7]]},{"p":["CodeBlock"],"f":[["struct",12],[" ",17],["CodeBlock",7]],"s":[["struct",12],[" ",17],["CodeBlock",7]]},{"p":["DeferStmt"],"f":[["struct",12],[" ",17],["DeferStmt",7]],"s":[["struct",12],[" ",17],["DeferStmt",7]]},{"p":["ElseBlock"],"f":[["struct",12],[" ",17],["ElseBlock",7]],"s":[["struct",12],[" ",17],["ElseBlock",7]]},{"p":["ForInStmt"],"f":[["struct",12],[" ",17],["ForInStmt",7]],"s":[["struct",12],[" ",17],["ForInStmt",7]]},{"p":["GuardStmt"],"f":[["struct",12],[" ",17],["GuardStmt",7]],"s":[["struct",12],[" ",17],["GuardStmt",7]]},{"p":["InOutExpr"],"f":[["struct",12],[" ",17],["InOutExpr",7]],"s":[["struct",12],[" ",17],["InOutExpr",7]]},{"p":["ThrowStmt"],"f":[["struct",12],[" ",17],["ThrowStmt",7]],"s":[["struct",12],[" ",17],["ThrowStmt",7]]},{"p":["TokenList"],"f":[["struct",12],[" ",17],["TokenList",7]],"s":[["struct",12],[" ",17],["TokenList",7]],"d":"`TokenList` represents a collection of `TokenSyntax`s."},{"p":["TupleExpr"],"f":[["struct",12],[" ",17],["TupleExpr",7]],"s":[["struct",12],[" ",17],["TupleExpr",7]]},{"p":["TupleType"],"f":[["struct",12],[" ",17],["TupleType",7]],"s":[["struct",12],[" ",17],["TupleType",7]]},{"p":["WhileStmt"],"f":[["struct",12],[" ",17],["WhileStmt",7]],"s":[["struct",12],[" ",17],["WhileStmt",7]]},{"p":["YieldList"],"f":[["struct",12],[" ",17],["YieldList",7]],"s":[["struct",12],[" ",17],["YieldList",7]]},{"p":["YieldStmt"],"f":[["struct",12],[" ",17],["YieldStmt",7]],"s":[["struct",12],[" ",17],["YieldStmt",7]]},{"p":["AccessPath","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessPathComponent",18,366],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessPathComponent",18],["...)",17]]},{"p":["AccessPath","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessPathComponent",18,366],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessPathComponent",18],["])",17]],"d":"Creates a `AccessPath` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessPathComponent`"},{"p":["ImportDecl","init(attributes:modifiers:importTok:importKind:path:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["importTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`import`, ",17],["importKind",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18,225],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18],[")",17]],"d":"Creates a `ImportDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - importTok: \n  - importKind: \n  - path: "},{"p":["ImportDecl","init(importTok:importKind:attributesBuilder:modifiersBuilder:pathBuilder:)"],"f":[["init",10],["(",17],["importTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`import`, ",17],["importKind",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["pathBuilder",1],[": () -> ",17],["ExpressibleAsAccessPath",18,225],[" = { AccessPath([]) })",17]],"s":[["init",10],["(",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["pathBuilder",1],[": () -> ",17],["ExpressibleAsAccessPath",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ReturnStmt","init(returnKeyword:expression:)"],"f":[["init",10],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`return`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil)",17]],"s":[["init",10],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],["?)",17]],"d":"Creates a `ReturnStmt` using the provided parameters.\n- Parameters:\n  - returnKeyword: \n  - expression: "},{"p":["SourceFile","init(statements:eofToken:)"],"f":[["init",10],["(",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,333],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.eof)",17]],"s":[["init",10],["(",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SourceFile` using the provided parameters.\n- Parameters:\n  - statements: \n  - eofToken: "},{"p":["SourceFile","init(eofToken:statementsBuilder:)"],"f":[["init",10],["(",17],["eofToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.eof, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,333],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["eofToken",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StructDecl","init(attributes:modifiers:structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `StructDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - structKeyword: \n  - identifier: \n  - genericParameterClause: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["StructDecl","init(structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["StructDecl","init(structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCase","init(unknownAttr:label:statementsBuilder:)"],"f":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,207],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,333],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCase","init(unknownAttr:label:statements:)"],"f":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,207],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,333],[")",17]],"s":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"Creates a `SwitchCase` using the provided parameters.\n- Parameters:\n  - unknownAttr: \n  - label: \n  - statements: "},{"p":["SwitchStmt","init(labelName:labelColon:switchKeyword:expression:leftBrace:rightBrace:casesBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`switch`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18,291],[" = { SwitchCaseList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchStmt","init(labelName:labelColon:switchKeyword:expression:leftBrace:cases:rightBrace:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`switch`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18,291],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - switchKeyword: \n  - expression: \n  - leftBrace: \n  - cases: \n  - rightBrace: "},{"p":["CatchClause","init(catchKeyword:catchItems:body:)"],"f":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`catch`, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18,262],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `CatchClause` using the provided parameters.\n- Parameters:\n  - catchKeyword: \n  - catchItems: \n  - body: "},{"p":["CatchClause","init(catchKeyword:body:catchItemsBuilder:)"],"f":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`catch`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["catchItemsBuilder",1],[": () -> ",17],["ExpressibleAsCatchItemList",18,262],["? = { nil })",17]],"s":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchItemsBuilder",1],[": () -> ",17],["ExpressibleAsCatchItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureExpr","init(leftBrace:signature:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,316],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,333],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureExpr","init(leftBrace:signature:statements:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,316],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,333],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureExpr` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - signature: \n  - statements: \n  - rightBrace: "},{"p":["KeyPathExpr","init(backslash:rootExpr:expression:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`backslash`, ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `KeyPathExpr` using the provided parameters.\n- Parameters:\n  - backslash: \n  - rootExpr: \n  - expression: "},{"p":["TernaryExpr","init(conditionExpression:questionMark:firstChoice:colonMark:secondChoice:)"],"f":[["init",10],["(",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`infixQuestionMark`, ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[", ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18],[", ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TernaryExpr` using the provided parameters.\n- Parameters:\n  - conditionExpression: \n  - questionMark: \n  - firstChoice: \n  - colonMark: \n  - secondChoice: "},{"p":["WhereClause","init(whereKeyword:guardResult:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`where`, ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `WhereClause` using the provided parameters.\n- Parameters:\n  - whereKeyword: \n  - guardResult: "},{"p":["AccessorDecl","init(attributes:modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,243],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,331],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `AccessorDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifier: \n  - accessorKind: \n  - parameter: \n  - asyncKeyword: \n  - throwsKeyword: \n  - body: "},{"p":["AccessorDecl","init(modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:attributesBuilder:)"],"f":[["init",10],["(",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,243],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,331],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3158],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessorDecl",18,237],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessorDecl",18],["...)",17]]},{"p":["AccessorList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessorDecl",18,237],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessorDecl",18],["])",17]],"d":"Creates a `AccessorList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessorDecl`"},{"p":["ArrayElement","init(expression:trailingComma:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ArrayElement` using the provided parameters.\n- Parameters:\n  - expression: \n  - trailingComma: "},{"p":["CaseItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCaseItem",18,198],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCaseItem",18],["...)",17]]},{"p":["CaseItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCaseItem",18,198],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCaseItem",18],["])",17]],"d":"Creates a `CaseItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCaseItem`"},{"p":["ClosureParam","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureParam` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingComma: "},{"p":["ContinueStmt","init(continueKeyword:label:)"],"f":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`continue`, ",17],["label",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ContinueStmt` using the provided parameters.\n- Parameters:\n  - continueKeyword: \n  - label: "},{"p":["ContinueStmt","init(continueKeyword:label:)"],"f":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`continue`, ",17],["label",1],[": ",17],["String",18,3158],["?)",17]],"s":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclModifier","init(name:detailLeftParen:detail:detailRightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["detail",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DeclModifier` using the provided parameters.\n- Parameters:\n  - name: \n  - detailLeftParen: \n  - detail: \n  - detailRightParen: "},{"p":["DeclModifier","init(name:detailLeftParen:detail:detailRightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["detail",1],[": ",17],["String",18,3158],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["String",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseDecl","init(attributes:modifiers:caseKeyword:elements:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`case`, ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18,367],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"Creates a `EnumCaseDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the case declaration.\n  - modifiers: The declaration modifiers applied to the case declaration.\n  - caseKeyword: The `case` keyword for this case.\n  - elements: The elements this case declares."},{"p":["EnumCaseDecl","init(caseKeyword:attributesBuilder:modifiersBuilder:elementsBuilder:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`case`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18,367],[" = { EnumCaseElementList([]) })",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionDecl","init(attributes:modifiers:funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,340],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `FunctionDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - funcKeyword: \n  - identifier: \n  - genericParameterClause: \n  - signature: \n  - genericWhereClause: \n  - body: "},{"p":["FunctionDecl","init(funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:attributesBuilder:modifiersBuilder:bodyBuilder:)"],"f":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,340],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["bodyBuilder",1],[": () -> ",17],["CodeBlockItemList",18,586],["? = { nil })",17]],"s":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["CodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["FunctionDecl","init(funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,340],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionType","init(leftParen:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18,387],[" = { TupleTypeElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionType","init(leftParen:arguments:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,387],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `FunctionType` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - arguments: \n  - rightParen: \n  - asyncKeyword: \n  - throwsOrRethrowsKeyword: \n  - arrow: \n  - returnType: "},{"p":["IfConfigDecl","init(poundEndif:clausesBuilder:)"],"f":[["init",10],["(",17],["poundEndif",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundEndif`, ",17],["clausesBuilder",1],[": () -> ",17],["ExpressibleAsIfConfigClauseList",18,358],[" = { IfConfigClauseList([]) })",17]],"s":[["init",10],["(",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[", ",17],["clausesBuilder",1],[": () -> ",17],["ExpressibleAsIfConfigClauseList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IfConfigDecl","init(clauses:poundEndif:)"],"f":[["init",10],["(",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18,358],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundEndif`)",17]],"s":[["init",10],["(",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IfConfigDecl` using the provided parameters.\n- Parameters:\n  - clauses: \n  - poundEndif: "},{"p":["MetatypeType","init(baseType:period:typeOrProtocol:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["period",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`period`, ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MetatypeType` using the provided parameters.\n- Parameters:\n  - baseType: \n  - period: \n  - typeOrProtocol: "},{"p":["MetatypeType","init(baseType:period:typeOrProtocol:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["period",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`period`, ",17],["typeOrProtocol",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ModifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclModifier",18,243],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclModifier",18],["...)",17]]},{"p":["ModifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclModifier",18,243],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclModifier",18],["])",17]],"d":"Creates a `ModifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclModifier`"},{"p":["ObjCSelector","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjCSelectorPiece",18,345],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjCSelectorPiece",18],["...)",17]]},{"p":["ObjCSelector","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjCSelectorPiece",18,345],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjCSelectorPiece",18],["])",17]],"d":"Creates a `ObjCSelector` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjCSelectorPiece`"},{"p":["OperatorDecl","init(attributes:modifiers:operatorKeyword:identifier:operatorPrecedenceAndTypes:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`operator`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18,422],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18],["?)",17]],"d":"Creates a `OperatorDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the 'operator' declaration.\n  - modifiers: The declaration modifiers applied to the 'operator'declaration.\n  - operatorKeyword: \n  - identifier: \n  - operatorPrecedenceAndTypes: Optionally specify a precedence group and designated types."},{"p":["OperatorDecl","init(operatorKeyword:identifier:operatorPrecedenceAndTypes:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`operator`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18,422],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["OptionalType","init(wrappedType:questionMark:)"],"f":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalType` using the provided parameters.\n- Parameters:\n  - wrappedType: \n  - questionMark: "},{"p":["ProtocolDecl","init(attributes:modifiers:protocolKeyword:identifier:primaryAssociatedTypeClause:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18,426],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ProtocolDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - protocolKeyword: \n  - identifier: \n  - primaryAssociatedTypeClause: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ProtocolDecl","init(protocolKeyword:identifier:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ProtocolDecl","init(protocolKeyword:identifier:primaryAssociatedTypeClause:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18,426],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ReturnClause","init(arrow:returnType:)"],"f":[["init",10],["(",17],["arrow",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ReturnClause` using the provided parameters.\n- Parameters:\n  - arrow: \n  - returnType: "},{"p":["SequenceExpr","init(elementsBuilder:)"],"f":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,201],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SequenceExpr","init(elements:)"],"f":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsExprList",18,201],[")",17]],"s":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsExprList",18],[")",17]],"d":"Creates a `SequenceExpr` using the provided parameters.\n- Parameters:\n  - elements: "},{"p":["SuperRefExpr","init(superKeyword:)"],"f":[["init",10],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`super`)",17]],"s":[["init",10],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SuperRefExpr` using the provided parameters.\n- Parameters:\n  - superKeyword: "},{"p":["TuplePattern","init(leftParen:rightParen:elementsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18,413],[" = { TuplePatternElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePattern","init(leftParen:elements:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18,413],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TuplePattern` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elements: \n  - rightParen: "},{"p":["VariableDecl","init(attributes:modifiers:letOrVarKeyword:bindings:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18,361],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"Creates a `VariableDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - letOrVarKeyword: \n  - bindings: "},{"p":["VariableDecl","init(letOrVarKeyword:attributesBuilder:modifiersBuilder:bindingsBuilder:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18,361],[" = { PatternBindingList([]) })",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["VariableDecl","init(_:name:type:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["letOrVarKeyword",2],[": ",17],["TokenSyntax",18,3089],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18,341],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],[")",17]],"s":[["init",10],["(",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18],[")",17]]},{"p":["VersionTuple","init(majorMinor:patchPeriod:patchVersion:)"],"f":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `VersionTuple` using the provided parameters.\n- Parameters:\n  - majorMinor: In case the version consists only of the major version, aninteger literal that specifies the major version. In casethe version consists of major and minor version number, afloating literal in which the decimal part is interpretedas the minor version.\n  - patchPeriod: If the version contains a patch number, the periodseparating the minor from the patch number.\n  - patchVersion: The patch version if specified."},{"p":["VersionTuple","init(majorMinor:patchPeriod:patchVersion:)"],"f":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["patchVersion",1],[": ",17],["String",18,3158],["?)",17]],"s":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorBlock","init(leftBrace:rightBrace:accessorsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["accessorsBuilder",1],[": () -> ",17],["ExpressibleAsAccessorList",18,238],[" = { AccessorList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessorsBuilder",1],[": () -> ",17],["ExpressibleAsAccessorList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorBlock","init(leftBrace:accessors:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18,238],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - accessors: \n  - rightBrace: "},{"p":["AsTypePattern","init(pattern:asKeyword:type:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`as`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsTypePattern` using the provided parameters.\n- Parameters:\n  - pattern: \n  - asKeyword: \n  - type: "},{"p":["AttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["AttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,178],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `AttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["CatchItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchItem",18,210],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchItem",18],["...)",17]]},{"p":["CatchItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchItem",18,210],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchItem",18],["])",17]],"d":"Creates a `CatchItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchItem`"},{"p":["CodeBlockItem","init(item:semicolon:errorTokens:)"],"f":[["init",10],["(",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil)",17]],"s":[["init",10],["(",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `CodeBlockItem` using the provided parameters.\n- Parameters:\n  - item: The underlying node inside the code block.\n  - semicolon: If present, the trailing semicolon at the end of the item.\n  - errorTokens: "},{"p":["ExtensionDecl","init(attributes:modifiers:extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ExtensionDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - extensionKeyword: \n  - extendedType: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ExtensionDecl","init(extensionKeyword:extendedType:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ExtensionDecl","init(extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["InheritedType","init(typeName:trailingComma:)"],"f":[["init",10],["(",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `InheritedType` using the provided parameters.\n- Parameters:\n  - typeName: \n  - trailingComma: "},{"p":["IsTypePattern","init(isKeyword:type:)"],"f":[["init",10],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`is`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsTypePattern` using the provided parameters.\n- Parameters:\n  - isKeyword: \n  - type: "},{"p":["ObjcNamePiece","init(name:dot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjcNamePiece` using the provided parameters.\n- Parameters:\n  - name: \n  - dot: "},{"p":["ObjcNamePiece","init(name:dot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundFileExpr","init(poundFile:)"],"f":[["init",10],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundFile`)",17]],"s":[["init",10],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileExpr` using the provided parameters.\n- Parameters:\n  - poundFile: "},{"p":["PoundLineExpr","init(poundLine:)"],"f":[["init",10],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundLine`)",17]],"s":[["init",10],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundLineExpr` using the provided parameters.\n- Parameters:\n  - poundLine: "},{"p":["StringSegment","init(content:)"],"f":[["init",10],["(",17],["content",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["content",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `StringSegment` using the provided parameters.\n- Parameters:\n  - content: "},{"p":["StringSegment","init(content:)"],"f":[["init",10],["(",17],["content",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["content",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptDecl","init(attributes:modifiers:subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`subscript`, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18,254],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `SubscriptDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - subscriptKeyword: \n  - genericParameterClause: \n  - indices: \n  - result: \n  - genericWhereClause: \n  - accessor: "},{"p":["SubscriptDecl","init(subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`subscript`, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18,254],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptExpr","init(calledExpression:leftBracket:rightBracket:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,437],["? = { nil })",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptExpr","init(calledExpression:leftBracket:argumentList:rightBracket:trailingClosure:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,437],["? = nil)",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `SubscriptExpr` using the provided parameters.\n- Parameters:\n  - calledExpression: \n  - leftBracket: \n  - argumentList: \n  - rightBracket: \n  - trailingClosure: \n  - additionalTrailingClosures: "},{"p":["TypealiasDecl","init(attributes:modifiers:typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`typealias`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `TypealiasDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - typealiasKeyword: \n  - identifier: \n  - genericParameterClause: \n  - initializer: \n  - genericWhereClause: "},{"p":["TypealiasDecl","init(typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`typealias`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AssignmentExpr","init(assignToken:)"],"f":[["init",10],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`equal`)",17]],"s":[["init",10],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AssignmentExpr` using the provided parameters.\n- Parameters:\n  - assignToken: "},{"p":["AttributedType","init(specifier:baseType:attributesBuilder:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AttributedType","init(specifier:attributes:baseType:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AttributedType` using the provided parameters.\n- Parameters:\n  - specifier: \n  - attributes: \n  - baseType: "},{"p":["DictionaryExpr","init(leftSquare:rightSquare:contentBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = .`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = .`rightSquareBracket`, ",17],["contentBuilder",1],[": () -> ",17],["ExpressibleAsDictionaryElementList",18,390],[" = { DictionaryElementList([]) })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["contentBuilder",1],[": () -> ",17],["ExpressibleAsDictionaryElementList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder\ninstead of having to wrap them in a `DictionaryElementList`."},{"p":["DictionaryExpr","init(leftSquare:content:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryExpr` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - content: \n  - rightSquare: "},{"p":["DictionaryType","init(leftSquareBracket:keyType:colon:valueType:rightSquareBracket:)"],"f":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryType` using the provided parameters.\n- Parameters:\n  - leftSquareBracket: \n  - keyType: \n  - colon: \n  - valueType: \n  - rightSquareBracket: "},{"p":["ExpressionStmt","init(expression:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionStmt` using the provided parameters.\n- Parameters:\n  - expression: "},{"p":["IdentifierExpr","init(identifier:declNameArguments:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `IdentifierExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - declNameArguments: "},{"p":["IdentifierExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["IdentifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3089],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["IdentifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3089],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `IdentifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["IfConfigClause","init(poundKeyword:condition:elements:)"],"f":[["init",10],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `IfConfigClause` using the provided parameters.\n- Parameters:\n  - poundKeyword: \n  - condition: \n  - elements: "},{"p":["MemberDeclList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMemberDeclListItem",18,360],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMemberDeclListItem",18],["...)",17]]},{"p":["MemberDeclList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMemberDeclListItem",18,360],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMemberDeclListItem",18],["])",17]],"d":"Creates a `MemberDeclList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMemberDeclListItem`"},{"p":["NilLiteralExpr","init(nilKeyword:)"],"f":[["init",10],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`nil`)",17]],"s":[["init",10],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `NilLiteralExpr` using the provided parameters.\n- Parameters:\n  - nilKeyword: "},{"p":["PatternBinding","init(pattern:typeAnnotation:initializer:accessor:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PatternBinding` using the provided parameters.\n- Parameters:\n  - pattern: \n  - typeAnnotation: \n  - initializer: \n  - accessor: \n  - trailingComma: "},{"p":["PoundErrorDecl","init(poundError:leftParen:message:rightParen:)"],"f":[["init",10],["(",17],["poundError",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundError`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,350],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundError",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundErrorDecl` using the provided parameters.\n- Parameters:\n  - poundError: \n  - leftParen: \n  - message: \n  - rightParen: "},{"p":["SpecializeExpr","init(expression:genericArgumentClause:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,394],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],[")",17]],"d":"Creates a `SpecializeExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - genericArgumentClause: "},{"p":["SwitchCaseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["SwitchCaseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,178],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SwitchCaseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["TypeAnnotation","init(colon:type:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeAnnotation` using the provided parameters.\n- Parameters:\n  - colon: \n  - type: "},{"p":["TypeAnnotation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["CatchClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchClause",18,232],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchClause",18],["...)",17]]},{"p":["CatchClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchClause",18,232],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchClause",18],["])",17]],"d":"Creates a `CatchClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchClause`"},{"p":["CompositionType","init(elementsBuilder:)"],"f":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsCompositionTypeElementList",18,420],[" = { CompositionTypeElementList([]) })",17]],"s":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsCompositionTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CompositionType","init(elements:)"],"f":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18,420],[")",17]],"s":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18],[")",17]],"d":"Creates a `CompositionType` using the provided parameters.\n- Parameters:\n  - elements: "},{"p":["CustomAttribute","init(atSignToken:attributeName:leftParen:rightParen:argumentListBuilder:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],["? = { nil })",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CustomAttribute","init(atSignToken:attributeName:leftParen:argumentList:rightParen:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CustomAttribute` using the provided parameters.\n- Parameters:\n  - atSignToken: The `@` sign.\n  - attributeName: The name of the attribute.\n  - leftParen: \n  - argumentList: \n  - rightParen: "},{"p":["DeclarationStmt","init(declaration:)"],"f":[["init",10],["(",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18,264],[")",17]],"s":[["init",10],["(",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18],[")",17]],"d":"Creates a `DeclarationStmt` using the provided parameters.\n- Parameters:\n  - declaration: "},{"p":["EnumCaseElement","init(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,307],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `EnumCaseElement` using the provided parameters.\n- Parameters:\n  - identifier: The name of this case.\n  - associatedValue: The set of associated values of the case.\n  - rawValue: The raw value of this enum element, if present.\n  - trailingComma: The trailing comma of this element, if the case hasmultiple elements."},{"p":["EnumCaseElement","init(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,307],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCasePattern","init(type:period:caseName:associatedTuple:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`period`, ",17],["caseName",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,257],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"Creates a `EnumCasePattern` using the provided parameters.\n- Parameters:\n  - type: \n  - period: \n  - caseName: \n  - associatedTuple: "},{"p":["EnumCasePattern","init(type:period:caseName:associatedTuple:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`period`, ",17],["caseName",1],[": ",17],["String",18,3158],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,257],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["String",18],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FallthroughStmt","init(fallthroughKeyword:)"],"f":[["init",10],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`fallthrough`)",17]],"s":[["init",10],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FallthroughStmt` using the provided parameters.\n- Parameters:\n  - fallthroughKeyword: "},{"p":["ForcedValueExpr","init(expression:exclamationMark:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ForcedValueExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - exclamationMark: "},{"p":["GenericArgument","init(argumentType:trailingComma:)"],"f":[["init",10],["(",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericArgument` using the provided parameters.\n- Parameters:\n  - argumentType: \n  - trailingComma: "},{"p":["InitializerDecl","init(attributes:modifiers:initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`init`, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `InitializerDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - initKeyword: \n  - optionalMark: \n  - genericParameterClause: \n  - parameters: \n  - throwsOrRethrowsKeyword: \n  - genericWhereClause: \n  - body: "},{"p":["InitializerDecl","init(initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["initKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`init`, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["KeyPathBaseExpr","init(period:)"],"f":[["init",10],["(",17],["period",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`period`)",17]],"s":[["init",10],["(",17],["period",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `KeyPathBaseExpr` using the provided parameters.\n- Parameters:\n  - period: "},{"p":["MemberDeclBlock","init(leftBrace:rightBrace:membersBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MemberDeclBlock","init(leftBrace:members:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18,286],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MemberDeclBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - members: \n  - rightBrace: "},{"p":["ObjcKeyPathExpr","init(keyPath:leftParen:rightParen:nameBuilder:)"],"f":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundKeyPath`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["nameBuilder",1],[": () -> ",17],["ExpressibleAsObjcName",18,202],[" = { ObjcName([]) })",17]],"s":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["nameBuilder",1],[": () -> ",17],["ExpressibleAsObjcName",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjcKeyPathExpr","init(keyPath:leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundKeyPath`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18,202],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcKeyPathExpr` using the provided parameters.\n- Parameters:\n  - keyPath: \n  - leftParen: \n  - name: \n  - rightParen: "},{"p":["OptionalPattern","init(subPattern:questionMark:)"],"f":[["init",10],["(",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalPattern` using the provided parameters.\n- Parameters:\n  - subPattern: \n  - questionMark: "},{"p":["ParameterClause","init(leftParen:rightParen:parameterListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18,393],[" = { FunctionParameterList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ParameterClause","init(leftParen:parameterList:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18,393],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ParameterClause` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - parameterList: \n  - rightParen: "},{"p":["PoundAssertStmt","init(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundAssert`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["message",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundAssertStmt` using the provided parameters.\n- Parameters:\n  - poundAssert: \n  - leftParen: \n  - condition: The assertion condition.\n  - comma: The comma after the assertion condition.\n  - message: The assertion message.\n  - rightParen: "},{"p":["PoundAssertStmt","init(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundAssert`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["message",1],[": ",17],["String",18,3158],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["String",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundColumnExpr","init(poundColumn:)"],"f":[["init",10],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundColumn`)",17]],"s":[["init",10],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundColumnExpr` using the provided parameters.\n- Parameters:\n  - poundColumn: "},{"p":["PoundFileIDExpr","init(poundFileID:)"],"f":[["init",10],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundFileID`)",17]],"s":[["init",10],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileIDExpr` using the provided parameters.\n- Parameters:\n  - poundFileID: "},{"p":["RepeatWhileStmt","init(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`repeat`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`while`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `RepeatWhileStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - repeatKeyword: \n  - body: \n  - whileKeyword: \n  - condition: "},{"p":["RepeatWhileStmt","init(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`repeat`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`while`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCaseLabel","init(caseKeyword:caseItems:colon:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`case`, ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18,240],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchCaseLabel` using the provided parameters.\n- Parameters:\n  - caseKeyword: \n  - caseItems: \n  - colon: "},{"p":["SwitchCaseLabel","init(caseKeyword:colon:caseItemsBuilder:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`case`, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18,240],[" = { CaseItemList([]) })",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["WildcardPattern","init(wildcard:typeAnnotation:)"],"f":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`wildcard`, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil)",17]],"s":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?)",17]],"d":"Creates a `WildcardPattern` using the provided parameters.\n- Parameters:\n  - wildcard: \n  - typeAnnotation: "},{"p":["ArrayElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsArrayElement",18,239],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsArrayElement",18],["...)",17]]},{"p":["ArrayElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsArrayElement",18,239],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsArrayElement",18],["])",17]],"d":"Creates a `ArrayElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsArrayElement`"},{"p":["ClosureParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureParam",18,241],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureParam",18],["...)",17]]},{"p":["ClosureParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureParam",18,241],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureParam",18],["])",17]],"d":"Creates a `ClosureParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureParam`"},{"p":["ClosureSignature","init(attributes:capture:input:asyncKeyword:throwsTok:output:inTok:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,408],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,254],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`in`)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureSignature` using the provided parameters.\n- Parameters:\n  - attributes: \n  - capture: \n  - input: \n  - asyncKeyword: \n  - throwsTok: \n  - output: \n  - inTok: "},{"p":["ClosureSignature","init(capture:input:asyncKeyword:throwsTok:output:inTok:attributesBuilder:)"],"f":[["init",10],["(",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,408],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3158],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,254],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`in`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ConditionElement","init(condition:trailingComma:)"],"f":[["init",10],["(",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ConditionElement` using the provided parameters.\n- Parameters:\n  - condition: \n  - trailingComma: "},{"p":["DeclNameArgument","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArgument` using the provided parameters.\n- Parameters:\n  - name: \n  - colon: "},{"p":["FloatLiteralExpr","init(floatLiteral:)"],"f":[["init",10],["(",17],["floatLiteral",1],[" ",17],["value",2],[": ",17],["Float",18,3161],[")",17]],"s":[["init",10],["(",17],["floatLiteral",1],[": ",17],["Float",18],[")",17]]},{"p":["FloatLiteralExpr","init(floatingDigits:)"],"f":[["init",10],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FloatLiteralExpr` using the provided parameters.\n- Parameters:\n  - floatingDigits: "},{"p":["FloatLiteralExpr","init(floatingDigits:)"],"f":[["init",10],["(",17],["floatingDigits",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["floatingDigits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FloatLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Float",18,3161],[")",17]],"s":[["init",10],["(",17],["Float",18],[")",17]]},{"p":["FunctionCallExpr","init(calledExpression:leftParen:rightParen:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,437],["? = { nil })",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionCallExpr","init(calledExpression:leftParen:argumentList:rightParen:trailingClosure:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,437],["? = nil)",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `FunctionCallExpr` using the provided parameters.\n- Parameters:\n  - calledExpression: \n  - leftParen: \n  - argumentList: \n  - rightParen: \n  - trailingClosure: \n  - additionalTrailingClosures: "},{"p":["FunctionCallExpr","init(_:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["calledExpression",2],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18,690],["? = { nil })",17]],"s":[["init",10],["(",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18],["?)",17]],"d":"A convenience initializer that allows passing in arguments using a result builder\ninstead of having to wrap them in a `TupleExprElementList`.\nThe presence of the parenthesis will be inferred based on the presence of arguments and the trailing closure."},{"p":["FunctionDeclName","init(name:arguments:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `FunctionDeclName` using the provided parameters.\n- Parameters:\n  - name: The base name of the referenced function.\n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["GenericParameter","init(attributes:name:colon:inheritedType:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericParameter` using the provided parameters.\n- Parameters:\n  - attributes: \n  - name: \n  - colon: \n  - inheritedType: \n  - trailingComma: "},{"p":["GenericParameter","init(name:colon:inheritedType:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MemberAccessExpr","init(base:dot:name:declNameArguments:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `MemberAccessExpr` using the provided parameters.\n- Parameters:\n  - base: \n  - dot: \n  - name: \n  - declNameArguments: "},{"p":["MemberAccessExpr","init(base:dot:name:declNameArguments:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3089],[" = .period, ",17],["name",1],[": ",17],["String",18,3158],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["String",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `MemberAccessExpr` using the provided parameters."},{"p":["ObjcSelectorExpr","init(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundSelector`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["kind",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcSelectorExpr` using the provided parameters.\n- Parameters:\n  - poundSelector: \n  - leftParen: \n  - kind: \n  - colon: \n  - name: \n  - rightParen: "},{"p":["ObjcSelectorExpr","init(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundSelector`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["kind",1],[": ",17],["String",18,3158],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["String",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PostfixUnaryExpr","init(expression:operatorToken:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PostfixUnaryExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - operatorToken: "},{"p":["PostfixUnaryExpr","init(expression:operatorToken:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["operatorToken",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["operatorToken",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundWarningDecl","init(poundWarning:leftParen:message:rightParen:)"],"f":[["init",10],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundWarning`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,350],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundWarningDecl` using the provided parameters.\n- Parameters:\n  - poundWarning: \n  - leftParen: \n  - message: \n  - rightParen: "},{"p":["RegexLiteralExpr","init(regex:)"],"f":[["init",10],["(",17],["regex",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["regex",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `RegexLiteralExpr` using the provided parameters.\n- Parameters:\n  - regex: "},{"p":["RegexLiteralExpr","init(regex:)"],"f":[["init",10],["(",17],["regex",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["regex",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleExprElement","init(label:colon:expression:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleExprElement` using the provided parameters.\n- Parameters:\n  - label: \n  - colon: \n  - expression: \n  - trailingComma: "},{"p":["TupleTypeElement","init(inOut:name:secondName:colon:type:ellipsis:initializer:trailingComma:)"],"f":[["init",10],["(",17],["inOut",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["inOut",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleTypeElement` using the provided parameters.\n- Parameters:\n  - inOut: \n  - name: \n  - secondName: \n  - colon: \n  - type: \n  - ellipsis: \n  - initializer: \n  - trailingComma: "},{"p":["AccessorParameter","init(leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorParameter` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - name: \n  - rightParen: "},{"p":["AccessorParameter","init(leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["String",18,3158],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["String",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityEntry","init(label:colon:availabilityList:semicolon:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,377],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`semicolon`)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - availabilityList: \n  - semicolon: "},{"p":["AvailabilityEntry","init(label:colon:semicolon:availabilityListBuilder:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`semicolon`, ",17],["availabilityListBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,377],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityListBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlockItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCodeBlockItem",18,263],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCodeBlockItem",18],["...)",17]]},{"p":["CodeBlockItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCodeBlockItem",18,263],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCodeBlockItem",18],["])",17]],"d":"Creates a `CodeBlockItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCodeBlockItem`"},{"p":["DeclNameArguments","init(leftParen:rightParen:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsDeclNameArgumentList",18,381],[" = { DeclNameArgumentList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsDeclNameArgumentList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclNameArguments","init(leftParen:arguments:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18,381],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArguments` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - arguments: \n  - rightParen: "},{"p":["DeinitializerDecl","init(attributes:modifiers:deinitKeyword:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`deinit`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `DeinitializerDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - deinitKeyword: \n  - body: "},{"p":["DeinitializerDecl","init(deinitKeyword:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`deinit`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DictionaryElement","init(keyExpression:colon:valueExpression:trailingComma:)"],"f":[["init",10],["(",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DictionaryElement` using the provided parameters.\n- Parameters:\n  - keyExpression: \n  - colon: \n  - valueExpression: \n  - trailingComma: "},{"p":["ExpressionPattern","init(expression:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionPattern` using the provided parameters.\n- Parameters:\n  - expression: "},{"p":["ExpressionSegment","init(backslash:delimiter:leftParen:rightParen:expressionsBuilder:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`backslash`, ",17],["delimiter",1],[": ",17],["String",18,3158],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`stringInterpolationAnchor`, ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["String",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExpressionSegment","init(backslash:delimiter:leftParen:expressions:rightParen:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`backslash`, ",17],["delimiter",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`stringInterpolationAnchor`)",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ExpressionSegment` using the provided parameters.\n- Parameters:\n  - backslash: \n  - delimiter: \n  - leftParen: \n  - expressions: \n  - rightParen: "},{"p":["FunctionParameter","init(attributes:firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["firstName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `FunctionParameter` using the provided parameters.\n- Parameters:\n  - attributes: \n  - firstName: \n  - secondName: \n  - colon: \n  - type: \n  - ellipsis: \n  - defaultArgument: \n  - trailingComma: "},{"p":["FunctionParameter","init(firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["firstName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18,343],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionSignature","init(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,254],["? = nil)",17]],"s":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"Creates a `FunctionSignature` using the provided parameters.\n- Parameters:\n  - input: \n  - asyncOrReasyncKeyword: \n  - throwsOrRethrowsKeyword: \n  - output: "},{"p":["FunctionSignature","init(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,307],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18,3158],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,254],["? = nil)",17]],"s":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IdentifierPattern","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IdentifierPattern` using the provided parameters.\n- Parameters:\n  - identifier: "},{"p":["IdentifierPattern","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["InheritedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsInheritedType",18,267],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsInheritedType",18],["...)",17]]},{"p":["InheritedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsInheritedType",18,267],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsInheritedType",18],["])",17]],"d":"Creates a `InheritedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsInheritedType`"},{"p":["InitializerClause","init(equal:value:)"],"f":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`equal`, ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InitializerClause` using the provided parameters.\n- Parameters:\n  - equal: \n  - value: "},{"p":["NonEmptyTokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3089],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["NonEmptyTokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3089],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `NonEmptyTokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["ObjCSelectorPiece","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjCSelectorPiece` using the provided parameters.\n- Parameters:\n  - name: \n  - colon: "},{"p":["ObjCSelectorPiece","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(identifier:leftParen:rightParen:argumentsBuilder:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(identifier:leftParen:arguments:rightParen:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjectLiteralExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - leftParen: \n  - arguments: \n  - rightParen: "},{"p":["PoundFilePathExpr","init(poundFilePath:)"],"f":[["init",10],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundFilePath`)",17]],"s":[["init",10],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFilePathExpr` using the provided parameters.\n- Parameters:\n  - poundFilePath: "},{"p":["PoundFunctionExpr","init(poundFunction:)"],"f":[["init",10],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundFunction`)",17]],"s":[["init",10],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFunctionExpr` using the provided parameters.\n- Parameters:\n  - poundFunction: "},{"p":["QualifiedDeclName","init(baseType:dot:name:arguments:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `QualifiedDeclName` using the provided parameters.\n- Parameters:\n  - baseType: The base type of the qualified name, optionally specified.\n  - dot: \n  - name: The base name of the referenced function.\n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["StringLiteralExpr","init(openDelimiter:openQuote:closeQuote:closeDelimiter:segmentsBuilder:)"],"f":[["init",10],["(",17],["openDelimiter",1],[": ",17],["String",18,3158],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["closeDelimiter",1],[": ",17],["String",18,3158],["?, ",17],["segmentsBuilder",1],[": () -> ",17],["ExpressibleAsStringLiteralSegments",18,396],[" = { StringLiteralSegments([]) })",17]],"s":[["init",10],["(",17],["openDelimiter",1],[": ",17],["String",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["String",18],["?, ",17],["segmentsBuilder",1],[": () -> ",17],["ExpressibleAsStringLiteralSegments",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralExpr","init(openDelimiter:openQuote:segments:closeQuote:closeDelimiter:)"],"f":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18,396],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `StringLiteralExpr` using the provided parameters.\n- Parameters:\n  - openDelimiter: \n  - openQuote: \n  - segments: \n  - closeQuote: \n  - closeDelimiter: "},{"p":["StringLiteralExpr","init(_:openQuote:closeQuote:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["String",18,3158],[", ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3089],[" = .stringQuote, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3089],[" = .stringQuote)",17]],"s":[["init",10],["(",17],["String",18],[", ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDecl","init(attributes:modifiers:associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`associatedtype`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `AssociatedtypeDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - associatedtypeKeyword: \n  - identifier: \n  - inheritanceClause: \n  - initializer: \n  - genericWhereClause: "},{"p":["AssociatedtypeDecl","init(associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`associatedtype`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BinaryOperatorExpr","init(operatorToken:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BinaryOperatorExpr` using the provided parameters.\n- Parameters:\n  - operatorToken: "},{"p":["BinaryOperatorExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["BooleanLiteralExpr","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BooleanLiteralExpr` using the provided parameters.\n- Parameters:\n  - booleanLiteral: "},{"p":["BooleanLiteralExpr","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[" ",17],["value",2],[": ",17],["Bool",18,3160],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["Bool",18],[")",17]]},{"p":["BooleanLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Bool",18,3160],[")",17]],"s":[["init",10],["(",17],["Bool",18],[")",17]]},{"p":["ClosureCaptureItem","init(name:assignToken:expression:trailingComma:specifierBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["specifierBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18,219],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["specifierBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureItem","init(specifier:name:assignToken:expression:trailingComma:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18,219],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureCaptureItem` using the provided parameters.\n- Parameters:\n  - specifier: \n  - name: \n  - assignToken: \n  - expression: \n  - trailingComma: "},{"p":["ElseIfContinuation","init(ifStatement:)"],"f":[["init",10],["(",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18,194],[")",17]],"s":[["init",10],["(",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18],[")",17]],"d":"Creates a `ElseIfContinuation` using the provided parameters.\n- Parameters:\n  - ifStatement: "},{"p":["GenericRequirement","init(body:trailingComma:)"],"f":[["init",10],["(",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericRequirement` using the provided parameters.\n- Parameters:\n  - body: \n  - trailingComma: "},{"p":["GenericWhereClause","init(whereKeyword:requirementListBuilder:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`where`, ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18,406],[" = { GenericRequirementList([]) })",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericWhereClause","init(whereKeyword:requirementList:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`where`, ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18,406],[")",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"Creates a `GenericWhereClause` using the provided parameters.\n- Parameters:\n  - whereKeyword: \n  - requirementList: "},{"p":["IfConfigClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsIfConfigClause",18,285],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsIfConfigClause",18],["...)",17]]},{"p":["IfConfigClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsIfConfigClause",18,285],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsIfConfigClause",18],["])",17]],"d":"Creates a `IfConfigClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsIfConfigClause`"},{"p":["IntegerLiteralExpr","init(integerLiteral:)"],"f":[["init",10],["(",17],["integerLiteral",1],[" ",17],["value",2],[": ",17],["Int",18,3162],[")",17]],"s":[["init",10],["(",17],["integerLiteral",1],[": ",17],["Int",18],[")",17]]},{"p":["IntegerLiteralExpr","init(digits:)"],"f":[["init",10],["(",17],["digits",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["digits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IntegerLiteralExpr` using the provided parameters.\n- Parameters:\n  - digits: "},{"p":["IntegerLiteralExpr","init(digits:)"],"f":[["init",10],["(",17],["digits",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["digits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IntegerLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int",18,3162],[")",17]],"s":[["init",10],["(",17],["Int",18],[")",17]]},{"p":["MemberDeclListItem","init(decl:semicolon:)"],"f":[["init",10],["(",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18,264],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `MemberDeclListItem` using the provided parameters.\n- Parameters:\n  - decl: The declaration of the type member.\n  - semicolon: An optional trailing semicolon."},{"p":["PatternBindingList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPatternBinding",18,288],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPatternBinding",18],["...)",17]]},{"p":["PatternBindingList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPatternBinding",18,288],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPatternBinding",18],["])",17]],"d":"Creates a `PatternBindingList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPatternBinding`"},{"p":["PoundDsohandleExpr","init(poundDsohandle:)"],"f":[["init",10],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundDsohandle`)",17]],"s":[["init",10],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundDsohandleExpr` using the provided parameters.\n- Parameters:\n  - poundDsohandle: "},{"p":["PrefixOperatorExpr","init(operatorToken:postfixExpression:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `PrefixOperatorExpr` using the provided parameters.\n- Parameters:\n  - operatorToken: \n  - postfixExpression: "},{"p":["PrefixOperatorExpr","init(operatorToken:postfixExpression:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["String",18,3158],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["String",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchDefaultLabel","init(defaultKeyword:colon:)"],"f":[["init",10],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`default`, ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchDefaultLabel` using the provided parameters.\n- Parameters:\n  - defaultKeyword: \n  - colon: "},{"p":["AccessLevelModifier","init(name:leftParen:modifier:rightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["modifier",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AccessLevelModifier` using the provided parameters.\n- Parameters:\n  - name: \n  - leftParen: \n  - modifier: \n  - rightParen: "},{"p":["AccessLevelModifier","init(name:leftParen:modifier:rightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["modifier",1],[": ",17],["String",18,3158],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["String",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessPathComponent","init(name:trailingDot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AccessPathComponent` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingDot: "},{"p":["AccessPathComponent","init(name:trailingDot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsEnumCaseElement",18,297],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsEnumCaseElement",18],["...)",17]]},{"p":["EnumCaseElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsEnumCaseElement",18,297],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsEnumCaseElement",18],["])",17]],"d":"Creates a `EnumCaseElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsEnumCaseElement`"},{"p":["GenericArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericArgument",18,301],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericArgument",18],["...)",17]]},{"p":["GenericArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericArgument",18,301],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericArgument",18],["])",17]],"d":"Creates a `GenericArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericArgument`"},{"p":["PostfixIfConfigExpr","init(base:config:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,265],["? = nil, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18,247],[")",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18],[")",17]],"d":"Creates a `PostfixIfConfigExpr` using the provided parameters.\n- Parameters:\n  - base: \n  - config: "},{"p":["PoundSourceLocation","init(poundSourceLocation:leftParen:args:rightParen:)"],"f":[["init",10],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundSourceLocation`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18,410],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocation` using the provided parameters.\n- Parameters:\n  - poundSourceLocation: \n  - leftParen: \n  - args: \n  - rightParen: "},{"p":["PrecedenceGroupDecl","init(attributes:modifiers:precedencegroupKeyword:identifier:leftBrace:groupAttributes:rightBrace:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`precedencegroup`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,431],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the 'precedencegroup' declaration.\n  - modifiers: The declaration modifiers applied to the 'precedencegroup'declaration.\n  - precedencegroupKeyword: \n  - identifier: The name of this precedence group.\n  - leftBrace: \n  - groupAttributes: The characteristics of this precedence group.\n  - rightBrace: "},{"p":["PrecedenceGroupDecl","init(precedencegroupKeyword:identifier:leftBrace:rightBrace:attributesBuilder:modifiersBuilder:groupAttributesBuilder:)"],"f":[["init",10],["(",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`precedencegroup`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["groupAttributesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,431],[" = { PrecedenceGroupAttributeList([]) })",17]],"s":[["init",10],["(",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["groupAttributesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SameTypeRequirement","init(leftTypeIdentifier:equalityToken:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `SameTypeRequirement` using the provided parameters.\n- Parameters:\n  - leftTypeIdentifier: \n  - equalityToken: \n  - rightTypeIdentifier: "},{"p":["TargetFunctionEntry","init(label:colon:declname:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18,199],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TargetFunctionEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - declname: The value for this argument\n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["TargetFunctionEntry","init(label:colon:declname:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18,199],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePatternElement","init(labelName:labelColon:pattern:trailingComma:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TuplePatternElement` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - pattern: \n  - trailingComma: "},{"p":["TuplePatternElement","init(labelName:labelColon:pattern:trailingComma:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ValueBindingPattern","init(letOrVarKeyword:valuePattern:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[")",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `ValueBindingPattern` using the provided parameters.\n- Parameters:\n  - letOrVarKeyword: \n  - valuePattern: "},{"p":["AvailabilityArgument","init(entry:trailingComma:)"],"f":[["init",10],["(",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AvailabilityArgument` using the provided parameters.\n- Parameters:\n  - entry: The actual argument\n  - trailingComma: A trailing comma if the argument is followed by anotherargument"},{"p":["AvailabilitySpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAvailabilityArgument",18,376],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAvailabilityArgument",18],["...)",17]]},{"p":["AvailabilitySpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAvailabilityArgument",18,376],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAvailabilityArgument",18],["])",17]],"d":"Creates a `AvailabilitySpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAvailabilityArgument`"},{"p":["ClassRestrictionType","init(classKeyword:)"],"f":[["init",10],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`class`)",17]],"s":[["init",10],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClassRestrictionType` using the provided parameters.\n- Parameters:\n  - classKeyword: "},{"p":["ConditionElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsConditionElement",18,317],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsConditionElement",18],["...)",17]]},{"p":["ConditionElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsConditionElement",18,317],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsConditionElement",18],["])",17]],"d":"Creates a `ConditionElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsConditionElement`"},{"p":["ConstrainedSugarType","init(someOrAnySpecifier:baseType:)"],"f":[["init",10],["(",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ConstrainedSugarType` using the provided parameters.\n- Parameters:\n  - someOrAnySpecifier: \n  - baseType: "},{"p":["ConstrainedSugarType","init(someOrAnySpecifier:baseType:)"],"f":[["init",10],["(",17],["someOrAnySpecifier",1],[": ",17],["String",18,3158],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["someOrAnySpecifier",1],[": ",17],["String",18],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclNameArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclNameArgument",18,318],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclNameArgument",18],["...)",17]]},{"p":["DeclNameArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclNameArgument",18,318],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclNameArgument",18],["])",17]],"d":"Creates a `DeclNameArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclNameArgument`"},{"p":["GenericParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericParameter",18,322],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericParameter",18],["...)",17]]},{"p":["GenericParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericParameter",18,322],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericParameter",18],["])",17]],"d":"Creates a `GenericParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericParameter`"},{"p":["MemberTypeIdentifier","init(baseType:period:name:genericArgumentClause:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["period",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,394],["? = nil)",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `MemberTypeIdentifier` using the provided parameters.\n- Parameters:\n  - baseType: \n  - period: \n  - name: \n  - genericArgumentClause: "},{"p":["OptionalChainingExpr","init(expression:questionMark:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalChainingExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - questionMark: "},{"p":["SimpleTypeIdentifier","init(name:genericArgumentClause:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,394],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SimpleTypeIdentifier` using the provided parameters.\n- Parameters:\n  - name: \n  - genericArgumentClause: "},{"p":["SimpleTypeIdentifier","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["TupleExprElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleExprElement",18,329],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleExprElement",18],["...)",17]]},{"p":["TupleExprElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleExprElement",18,329],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleExprElement",18],["])",17]],"d":"Creates a `TupleExprElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleExprElement`"},{"p":["TupleTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleTypeElement",18,330],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleTypeElement",18],["...)",17]]},{"p":["TupleTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleTypeElement",18,330],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleTypeElement",18],["])",17]],"d":"Creates a `TupleTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleTypeElement`"},{"p":["AvailabilityCondition","init(poundAvailableKeyword:leftParen:rightParen:availabilitySpecBuilder:)"],"f":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundAvailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,377],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityCondition","init(poundAvailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundAvailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,377],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityCondition` using the provided parameters.\n- Parameters:\n  - poundAvailableKeyword: \n  - leftParen: \n  - availabilitySpec: \n  - rightParen: "},{"p":["BackDeployVersionList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsBackDeployVersionArgument",18,417],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsBackDeployVersionArgument",18],["...)",17]]},{"p":["BackDeployVersionList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsBackDeployVersionArgument",18,417],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsBackDeployVersionArgument",18],["])",17]],"d":"Creates a `BackDeployVersionList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsBackDeployVersionArgument`"},{"p":["DictionaryElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDictionaryElement",18,336],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDictionaryElement",18],["...)",17]]},{"p":["DictionaryElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDictionaryElement",18,336],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDictionaryElement",18],["])",17]],"d":"Creates a `DictionaryElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDictionaryElement`"},{"p":["DiscardAssignmentExpr","init(wildcard:)"],"f":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`wildcard`)",17]],"s":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DiscardAssignmentExpr` using the provided parameters.\n- Parameters:\n  - wildcard: "},{"p":["EditorPlaceholderExpr","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `EditorPlaceholderExpr` using the provided parameters.\n- Parameters:\n  - identifier: "},{"p":["EditorPlaceholderExpr","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsFunctionParameter",18,339],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsFunctionParameter",18],["...)",17]]},{"p":["FunctionParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsFunctionParameter",18,339],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsFunctionParameter",18],["])",17]],"d":"Creates a `FunctionParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsFunctionParameter`"},{"p":["GenericArgumentClause","init(leftAngleBracket:rightAngleBracket:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18,368],[" = { GenericArgumentList([]) })",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericArgumentClause","init(leftAngleBracket:arguments:rightAngleBracket:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18,368],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericArgumentClause` using the provided parameters.\n- Parameters:\n  - leftAngleBracket: \n  - arguments: \n  - rightAngleBracket: "},{"p":["PrimaryAssociatedType","init(attributes:name:colon:inheritedType:initializer:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrimaryAssociatedType` using the provided parameters.\n- Parameters:\n  - attributes: \n  - name: \n  - colon: \n  - inheritedType: \n  - initializer: \n  - trailingComma: "},{"p":["PrimaryAssociatedType","init(name:colon:inheritedType:initializer:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,399],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralSegments","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["StringLiteralSegments","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,178],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `StringLiteralSegments` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["SymbolicReferenceExpr","init(identifier:genericArgumentClause:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,394],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SymbolicReferenceExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - genericArgumentClause: "},{"p":["SymbolicReferenceExpr","init(identifier:genericArgumentClause:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,394],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInheritanceClause","init(colon:inheritedTypeCollection:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18,342],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"Creates a `TypeInheritanceClause` using the provided parameters.\n- Parameters:\n  - colon: \n  - inheritedTypeCollection: "},{"p":["TypeInheritanceClause","init(colon:inheritedTypeCollectionBuilder:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18,342],[" = { InheritedTypeList([]) })",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInitializerClause","init(equal:value:)"],"f":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`equal`, ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeInitializerClause` using the provided parameters.\n- Parameters:\n  - equal: \n  - value: "},{"p":["UnresolvedPatternExpr","init(pattern:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[")",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `UnresolvedPatternExpr` using the provided parameters.\n- Parameters:\n  - pattern: "},{"p":["ClosureCaptureItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureCaptureItem",18,354],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureCaptureItem",18],["...)",17]]},{"p":["ClosureCaptureItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureCaptureItem",18,354],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureCaptureItem",18],["])",17]],"d":"Creates a `ClosureCaptureItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureCaptureItem`"},{"p":["CompositionTypeElement","init(type:ampersand:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CompositionTypeElement` using the provided parameters.\n- Parameters:\n  - type: \n  - ampersand: "},{"p":["ConformanceRequirement","init(leftTypeIdentifier:colon:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ConformanceRequirement` using the provided parameters.\n- Parameters:\n  - leftTypeIdentifier: \n  - colon: \n  - rightTypeIdentifier: "},{"p":["DifferentiabilityParam","init(parameter:trailingComma:)"],"f":[["init",10],["(",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DifferentiabilityParam` using the provided parameters.\n- Parameters:\n  - parameter: \n  - trailingComma: "},{"p":["GenericParameterClause","init(leftAngleBracket:rightAngleBracket:genericParameterListBuilder:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`, ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18,382],[" = { GenericParameterList([]) })",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericParameterClause","init(leftAngleBracket:genericParameterList:rightAngleBracket:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18,382],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericParameterClause` using the provided parameters.\n- Parameters:\n  - leftAngleBracket: \n  - genericParameterList: \n  - rightAngleBracket: "},{"p":["GenericRequirementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericRequirement",18,356],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericRequirement",18],["...)",17]]},{"p":["GenericRequirementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericRequirement",18,356],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericRequirement",18],["])",17]],"d":"Creates a `GenericRequirementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericRequirement`"},{"p":["LabeledSpecializeEntry","init(label:colon:value:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `LabeledSpecializeEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - value: The value for this argument\n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["LabeledSpecializeEntry","init(label:colon:value:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leftSquare:rightSquare:itemsBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`, ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18,401],["? = { nil })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leftSquare:items:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18,401],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureCaptureSignature` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - items: \n  - rightSquare: "},{"p":["DifferentiabilityParams","init(leftParen:diffParams:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18,421],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DifferentiabilityParams` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - diffParams: The parameters for differentiation.\n  - rightParen: "},{"p":["DifferentiabilityParams","init(leftParen:rightParen:diffParamsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["diffParamsBuilder",1],[": () -> ",17],["ExpressibleAsDifferentiabilityParamList",18,421],[" = { DifferentiabilityParamList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParamsBuilder",1],[": () -> ",17],["ExpressibleAsDifferentiabilityParamList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundSourceLocationArgs","init(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["fileName",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`comma`, ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["lineNumber",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocationArgs` using the provided parameters.\n- Parameters:\n  - fileArgLabel: \n  - fileArgColon: \n  - fileName: \n  - comma: \n  - lineArgLabel: \n  - lineArgColon: \n  - lineNumber: "},{"p":["PoundSourceLocationArgs","init(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["String",18,3158],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["fileName",1],[": ",17],["String",18,3158],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`comma`, ",17],["lineArgLabel",1],[": ",17],["String",18,3158],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["lineNumber",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["String",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["String",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["String",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupNameList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18,423],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18],["...)",17]]},{"p":["PrecedenceGroupNameList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrecedenceGroupNameElement",18,423],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrecedenceGroupNameElement",18],["])",17]],"d":"Creates a `PrecedenceGroupNameList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrecedenceGroupNameElement`"},{"p":["PrecedenceGroupRelation","init(higherThanOrLowerThan:colon:otherNamesBuilder:)"],"f":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["otherNamesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupNameList",18,411],[" = { PrecedenceGroupNameList([]) })",17]],"s":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNamesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupRelation","init(higherThanOrLowerThan:colon:otherNames:)"],"f":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18,411],[")",17]],"s":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"Creates a `PrecedenceGroupRelation` using the provided parameters.\n- Parameters:\n  - higherThanOrLowerThan: The relation to specified other precedence groups.\n  - colon: \n  - otherNames: The name of other precedence group to which this precedencegroup relates."},{"p":["TuplePatternElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTuplePatternElement",18,374],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTuplePatternElement",18],["...)",17]]},{"p":["TuplePatternElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTuplePatternElement",18,374],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTuplePatternElement",18],["])",17]],"d":"Creates a `TuplePatternElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTuplePatternElement`"},{"p":["UnavailabilityCondition","init(poundUnavailableKeyword:leftParen:rightParen:availabilitySpecBuilder:)"],"f":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundUnavailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,377],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["UnavailabilityCondition","init(poundUnavailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`poundUnavailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,377],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `UnavailabilityCondition` using the provided parameters.\n- Parameters:\n  - poundUnavailableKeyword: \n  - leftParen: \n  - availabilitySpec: \n  - rightParen: "},{"p":["MatchingPatternCondition","init(caseKeyword:pattern:typeAnnotation:initializer:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`case`, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,343],[")",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],[")",17]],"d":"Creates a `MatchingPatternCondition` using the provided parameters.\n- Parameters:\n  - caseKeyword: \n  - pattern: \n  - typeAnnotation: \n  - initializer: "},{"p":["OptionalBindingCondition","init(letOrVarKeyword:pattern:typeAnnotation:initializer:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,343],[")",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],[")",17]],"d":"Creates a `OptionalBindingCondition` using the provided parameters.\n- Parameters:\n  - letOrVarKeyword: \n  - pattern: \n  - typeAnnotation: \n  - initializer: "},{"p":["BackDeployVersionArgument","init(availabilityVersionRestriction:trailingComma:)"],"f":[["init",10],["(",17],["availabilityVersionRestriction",1],[": ",17],["ExpressibleAsAvailabilityVersionRestriction",18,433],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["availabilityVersionRestriction",1],[": ",17],["ExpressibleAsAvailabilityVersionRestriction",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `BackDeployVersionArgument` using the provided parameters.\n- Parameters:\n  - availabilityVersionRestriction: \n  - trailingComma: A trailing comma if the argument is followed by anotherargument"},{"p":["PrecedenceGroupAssignment","init(assignmentKeyword:colon:flag:)"],"f":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["flag",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssignment` using the provided parameters.\n- Parameters:\n  - assignmentKeyword: \n  - colon: \n  - flag: When true, an operator in the corresponding precedence groupuses the same grouping rules during optional chaining as theassignment operators from the standard library. Otherwise,operators in the precedence group follows the same optionalchaining rules as operators that don't perform assignment."},{"p":["PrecedenceGroupAssignment","init(assignmentKeyword:colon:flag:)"],"f":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["flag",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrimaryAssociatedType",18,395],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrimaryAssociatedType",18],["...)",17]]},{"p":["PrimaryAssociatedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrimaryAssociatedType",18,395],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrimaryAssociatedType",18],["])",17]],"d":"Creates a `PrimaryAssociatedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrimaryAssociatedType`"},{"p":["CompositionTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCompositionTypeElement",18,402],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCompositionTypeElement",18],["...)",17]]},{"p":["CompositionTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCompositionTypeElement",18,402],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCompositionTypeElement",18],["])",17]],"d":"Creates a `CompositionTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCompositionTypeElement`"},{"p":["DifferentiabilityParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDifferentiabilityParam",18,404],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDifferentiabilityParam",18],["...)",17]]},{"p":["DifferentiabilityParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDifferentiabilityParam",18,404],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDifferentiabilityParam",18],["])",17]],"d":"Creates a `DifferentiabilityParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDifferentiabilityParam`"},{"p":["OperatorPrecedenceAndTypes","init(colon:precedenceGroupAndDesignatedTypes:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18,284],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18],[")",17]],"d":"Creates a `OperatorPrecedenceAndTypes` using the provided parameters.\n- Parameters:\n  - colon: \n  - precedenceGroupAndDesignatedTypes: The precedence group and designated types for this operator"},{"p":["OperatorPrecedenceAndTypes","init(colon:precedenceGroupAndDesignatedTypesBuilder:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["precedenceGroupAndDesignatedTypesBuilder",1],[": () -> ",17],["ExpressibleAsIdentifierList",18,284],[" = { IdentifierList([]) })",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypesBuilder",1],[": () -> ",17],["ExpressibleAsIdentifierList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupNameElement","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrecedenceGroupNameElement` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingComma: "},{"p":["PrecedenceGroupNameElement","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3158],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityLabeledArgument","init(label:colon:value:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `AvailabilityLabeledArgument` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating label and value\n  - value: The value of this labeled argument"},{"p":["AvailabilityLabeledArgument","init(label:colon:value:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BackDeployAttributeSpecList","init(beforeLabel:colon:versionList:)"],"f":[["init",10],["(",17],["beforeLabel",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18,389],[")",17]],"s":[["init",10],["(",17],["beforeLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18],[")",17]],"d":"Creates a `BackDeployAttributeSpecList` using the provided parameters.\n- Parameters:\n  - beforeLabel: The \"before\" label.\n  - colon: The colon separating \"before\" and the parameter list.\n  - versionList: The list of OS versions in which the declaration became ABIstable."},{"p":["BackDeployAttributeSpecList","init(beforeLabel:colon:versionListBuilder:)"],"f":[["init",10],["(",17],["beforeLabel",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["versionListBuilder",1],[": () -> ",17],["ExpressibleAsBackDeployVersionList",18,389],[" = { BackDeployVersionList([]) })",17]],"s":[["init",10],["(",17],["beforeLabel",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["versionListBuilder",1],[": () -> ",17],["ExpressibleAsBackDeployVersionList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeClause","init(leftAngleBracket:rightAngleBracket:primaryAssociatedTypeListBuilder:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`, ",17],["primaryAssociatedTypeListBuilder",1],[": () -> ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,419],[" = { PrimaryAssociatedTypeList([]) })",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["primaryAssociatedTypeListBuilder",1],[": () -> ",17],["ExpressibleAsPrimaryAssociatedTypeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeClause","init(leftAngleBracket:primaryAssociatedTypeList:rightAngleBracket:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftAngle`, ",17],["primaryAssociatedTypeList",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,419],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["primaryAssociatedTypeList",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeList",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrimaryAssociatedTypeClause` using the provided parameters.\n- Parameters:\n  - leftAngleBracket: \n  - primaryAssociatedTypeList: \n  - rightAngleBracket: "},{"p":["SpecializeAttributeSpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["SpecializeAttributeSpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,178],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SpecializeAttributeSpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["ImplementsAttributeArguments","init(type:comma:declBaseName:declNameArguments:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18,385],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`comma`, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `ImplementsAttributeArguments` using the provided parameters.\n- Parameters:\n  - type: The type for which the method with this attributeimplements a requirement.\n  - comma: The comma separating the type and method name\n  - declBaseName: The base name of the protocol's requirement.\n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["NamedAttributeStringArgument","init(nameTok:colon:stringOrDeclname:)"],"f":[["init",10],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `NamedAttributeStringArgument` using the provided parameters.\n- Parameters:\n  - nameTok: The label of the argument\n  - colon: The colon separating the label and the value\n  - stringOrDeclname: "},{"p":["PrecedenceGroupAssociativity","init(associativityKeyword:colon:value:)"],"f":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,3089],[")",17]],"s":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssociativity` using the provided parameters.\n- Parameters:\n  - associativityKeyword: \n  - colon: \n  - value: Operators that are `left`-associative group left-to-right.Operators that are `right`-associative group right-to-left.Operators that are specified with an associativity of `none`don't associate at all"},{"p":["PrecedenceGroupAssociativity","init(associativityKeyword:colon:value:)"],"f":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["String",18,3158],[")",17]],"s":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupAttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["PrecedenceGroupAttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,178],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `PrecedenceGroupAttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["DifferentiabilityParamsClause","init(wrtLabel:colon:parameters:)"],"f":[["init",10],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `DifferentiabilityParamsClause` using the provided parameters.\n- Parameters:\n  - wrtLabel: The \"wrt\" label.\n  - colon: The colon separating \"wrt\" and the parameter list.\n  - parameters: "},{"p":["DifferentiabilityParamsClause","init(wrtLabel:colon:parameters:)"],"f":[["init",10],["(",17],["wrtLabel",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["wrtLabel",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityVersionRestriction","init(platform:version:)"],"f":[["init",10],["(",17],["platform",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,259],["? = nil)",17]],"s":[["init",10],["(",17],["platform",1],[": ",17],["TokenSyntax",18],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"Creates a `AvailabilityVersionRestriction` using the provided parameters.\n- Parameters:\n  - platform: The name of the OS on which the availability should berestricted or 'swift' if the availability should berestricted based on a Swift version.\n  - version: "},{"p":["AvailabilityVersionRestriction","init(platform:version:)"],"f":[["init",10],["(",17],["platform",1],[": ",17],["String",18,3158],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,259],["? = nil)",17]],"s":[["init",10],["(",17],["platform",1],[": ",17],["String",18],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElement","init(label:colon:closure:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18,233],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18],[")",17]],"d":"Creates a `MultipleTrailingClosureElement` using the provided parameters.\n- Parameters:\n  - label: \n  - colon: \n  - closure: "},{"p":["ImplicitlyUnwrappedOptionalType","init(wrappedType:exclamationMark:)"],"f":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ImplicitlyUnwrappedOptionalType` using the provided parameters.\n- Parameters:\n  - wrappedType: \n  - exclamationMark: "},{"p":["DifferentiableAttributeArguments","init(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["init",10],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,432],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil)",17]],"s":[["init",10],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `DifferentiableAttributeArguments` using the provided parameters.\n- Parameters:\n  - diffKind: \n  - diffKindComma: The comma following the differentiability kind, if it exists.\n  - diffParams: \n  - diffParamsComma: The comma following the differentiability parameters clause,if it exists.\n  - whereClause: "},{"p":["DifferentiableAttributeArguments","init(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["init",10],["(",17],["diffKind",1],[": ",17],["String",18,3158],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,432],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil)",17]],"s":[["init",10],["(",17],["diffKind",1],[": ",17],["String",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18,434],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18],["...)",17]]},{"p":["MultipleTrailingClosureElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMultipleTrailingClosureElement",18,434],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMultipleTrailingClosureElement",18],["])",17]],"d":"Creates a `MultipleTrailingClosureElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMultipleTrailingClosureElement`"},{"p":["DerivativeRegistrationAttributeArguments","init(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["init",10],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,349],[", ",17],["period",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,432],["? = nil)",17]],"s":[["init",10],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"Creates a `DerivativeRegistrationAttributeArguments` using the provided parameters.\n- Parameters:\n  - ofLabel: The \"of\" label.\n  - colon: The colon separating the \"of\" label and the originaldeclaration name.\n  - originalDeclName: The referenced original declaration name.\n  - period: The period separating the original declaration name and theaccessor name.\n  - accessorKind: The accessor name.\n  - comma: \n  - diffParams: "},{"p":["DerivativeRegistrationAttributeArguments","init(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["init",10],["(",17],["ofLabel",1],[": ",17],["String",18,3158],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`colon`, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,349],[", ",17],["period",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["accessorKind",1],[": ",17],["String",18,3158],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,432],["? = nil)",17]],"s":[["init",10],["(",17],["ofLabel",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["String",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AsExpr","init(asTok:questionOrExclamationMark:typeName:)"],"f":[["init",10],["(",17],["asTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`as`, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["asTok",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsExpr` using the provided parameters.\n- Parameters:\n  - asTok: \n  - questionOrExclamationMark: \n  - typeName: "},{"p":["DoStmt","init(labelName:labelColon:doKeyword:body:catchClausesBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`do`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["catchClausesBuilder",1],[": () -> ",17],["ExpressibleAsCatchClauseList",18,293],["? = { nil })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchClausesBuilder",1],[": () -> ",17],["ExpressibleAsCatchClauseList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DoStmt","init(labelName:labelColon:doKeyword:body:catchClauses:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`do`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18,293],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18],["?)",17]],"d":"Creates a `DoStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - doKeyword: \n  - body: \n  - catchClauses: "},{"p":["Format","init(indentWidth:)"],"f":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18,3162],[" = 4)",17]],"s":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18],[")",17]]},{"p":["IfStmt","init(labelName:labelColon:ifKeyword:conditions:body:elseKeyword:elseBody:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`if`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,379],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `IfStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - ifKeyword: \n  - conditions: \n  - body: \n  - elseKeyword: \n  - elseBody: "},{"p":["IfStmt","init(labelName:labelColon:ifKeyword:body:elseKeyword:elseBody:conditionsBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`if`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,379],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IsExpr","init(isTok:typeName:)"],"f":[["init",10],["(",17],["isTok",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`is`, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["isTok",1],[": ",17],["TokenSyntax",18],[", ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsExpr` using the provided parameters.\n- Parameters:\n  - isTok: \n  - typeName: "},{"p":["TryExpr","init(tryKeyword:questionOrExclamationMark:expression:)"],"f":[["init",10],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`try`, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TryExpr` using the provided parameters.\n- Parameters:\n  - tryKeyword: \n  - questionOrExclamationMark: \n  - expression: "},{"p":["CaseItem","init(pattern:whereClause:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CaseItem` using the provided parameters.\n- Parameters:\n  - pattern: \n  - whereClause: \n  - trailingComma: "},{"p":["DeclName","init(declBaseName:declNameArguments:)"],"f":[["init",10],["(",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `DeclName` using the provided parameters.\n- Parameters:\n  - declBaseName: The base name of the protocol's requirement.\n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["EnumDecl","init(attributes:modifiers:enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `EnumDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the enum declaration.\n  - modifiers: The declaration modifiers applied to the enum declaration.\n  - enumKeyword: The `enum` keyword for this declaration.\n  - identifier: The name of this enum.\n  - genericParameters: The generic parameters, if any, for this enum.\n  - inheritanceClause: The inheritance clause describing conformances or rawvalues for this enum.\n  - genericWhereClause: The `where` clause that applies to the generic parameters ofthis enum.\n  - members: The cases and other members of this enum."},{"p":["EnumDecl","init(enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["EnumDecl","init(enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExprList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsExprBuildable",18,265],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsExprBuildable",18],["...)",17]]},{"p":["ExprList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsExprBuildable",18,265],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsExprBuildable",18],["])",17]],"d":"Creates a `ExprList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsExprBuildable`"},{"p":["ObjcName","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjcNamePiece",18,269],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjcNamePiece",18],["...)",17]]},{"p":["ObjcName","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjcNamePiece",18,269],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjcNamePiece",18],["])",17]],"d":"Creates a `ObjcName` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjcNamePiece`"},{"p":["TypeExpr","init(type:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[")",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeExpr` using the provided parameters.\n- Parameters:\n  - type: "},{"p":["ArrayExpr","init(leftSquare:rightSquare:elementsBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18,314],[" = { ArrayElementList([]) })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ArrayExpr","init(leftSquare:elements:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18,314],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayExpr` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - elements: \n  - rightSquare: "},{"p":["ArrayType","init(leftSquareBracket:elementType:rightSquareBracket:)"],"f":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftSquareBracket`, ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18,276],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayType` using the provided parameters.\n- Parameters:\n  - leftSquareBracket: \n  - elementType: \n  - rightSquareBracket: "},{"p":["ArrowExpr","init(asyncKeyword:throwsToken:arrowToken:)"],"f":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrowExpr` using the provided parameters.\n- Parameters:\n  - asyncKeyword: \n  - throwsToken: \n  - arrowToken: "},{"p":["ArrowExpr","init(asyncKeyword:throwsToken:arrowToken:)"],"f":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["String",18,3158],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["Attribute","init(atSignToken:attributeName:leftParen:argument:rightParen:tokenListBuilder:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["tokenListBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18,219],["? = { nil })",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenListBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["Attribute","init(atSignToken:attributeName:leftParen:argument:rightParen:tokenList:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18,219],["? = nil)",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"Creates a `Attribute` using the provided parameters.\n- Parameters:\n  - atSignToken: The `@` sign.\n  - attributeName: The name of the attribute.\n  - leftParen: If the attribute takes arguments, the opening parenthesis.\n  - argument: The arguments of the attribute. In case the attributetakes multiple arguments, they are gather in theappropriate takes first.\n  - rightParen: If the attribute takes arguments, the closing parenthesis.\n  - tokenList: "},{"p":["AwaitExpr","init(awaitKeyword:expression:)"],"f":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `AwaitExpr` using the provided parameters.\n- Parameters:\n  - awaitKeyword: \n  - expression: "},{"p":["AwaitExpr","init(awaitKeyword:expression:)"],"f":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["String",18,3158],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["String",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BreakStmt","init(breakKeyword:label:)"],"f":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`break`, ",17],["label",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `BreakStmt` using the provided parameters.\n- Parameters:\n  - breakKeyword: \n  - label: "},{"p":["BreakStmt","init(breakKeyword:label:)"],"f":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`break`, ",17],["label",1],[": ",17],["String",18,3158],["?)",17]],"s":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CatchItem","init(pattern:whereClause:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CatchItem` using the provided parameters.\n- Parameters:\n  - pattern: \n  - whereClause: \n  - trailingComma: "},{"p":["ClassDecl","init(attributes:modifiers:classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,261],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,249],["? = nil, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ClassDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - classOrActorKeyword: \n  - identifier: \n  - genericParameterClause: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ClassDecl","init(classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,286],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ClassDecl","init(classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,3089],[", ",17],["identifier",1],[": ",17],["String",18,3158],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,405],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,398],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,357],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,304],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,261],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,249],["? = { nil })",17]],"s":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlock","init(leftBrace:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,333],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlock","init(leftBrace:statements:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftBrace`, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,333],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `CodeBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - statements: \n  - rightBrace: "},{"p":["DeferStmt","init(deferKeyword:body:)"],"f":[["init",10],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`defer`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `DeferStmt` using the provided parameters.\n- Parameters:\n  - deferKeyword: \n  - body: "},{"p":["ElseBlock","init(elseKeyword:body:)"],"f":[["init",10],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ElseBlock` using the provided parameters.\n- Parameters:\n  - elseKeyword: \n  - body: "},{"p":["ForInStmt","init(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`for`, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`in`, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ForInStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - forKeyword: \n  - tryKeyword: \n  - awaitKeyword: \n  - caseKeyword: \n  - pattern: \n  - typeAnnotation: \n  - inKeyword: \n  - sequenceExpr: \n  - whereClause: \n  - body: "},{"p":["ForInStmt","init(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`for`, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["awaitKeyword",1],[": ",17],["String",18,3158],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,325],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,292],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`in`, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["String",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GuardStmt","init(guardKeyword:elseKeyword:body:conditionsBuilder:)"],"f":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`guard`, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,379],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GuardStmt","init(guardKeyword:conditions:elseKeyword:body:)"],"f":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`guard`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,379],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `GuardStmt` using the provided parameters.\n- Parameters:\n  - guardKeyword: \n  - conditions: \n  - elseKeyword: \n  - body: "},{"p":["InOutExpr","init(ampersand:expression:)"],"f":[["init",10],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`prefixAmpersand`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InOutExpr` using the provided parameters.\n- Parameters:\n  - ampersand: \n  - expression: "},{"p":["ThrowStmt","init(throwKeyword:expression:)"],"f":[["init",10],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`throw`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,265],[")",17]],"s":[["init",10],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ThrowStmt` using the provided parameters.\n- Parameters:\n  - throwKeyword: \n  - expression: "},{"p":["TokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3089],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["TokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3089],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `TokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["TupleExpr","init(leftParen:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,386],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleExpr","init(leftParen:elementList:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,386],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleExpr` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elementList: \n  - rightParen: "},{"p":["TupleType","init(leftParen:rightParen:elementsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18,387],[" = { TupleTypeElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleType","init(leftParen:elements:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,387],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleType` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elements: \n  - rightParen: "},{"p":["WhileStmt","init(labelName:labelColon:whileKeyword:conditions:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`while`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,379],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `WhileStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - whileKeyword: \n  - conditions: \n  - body: "},{"p":["WhileStmt","init(labelName:labelColon:whileKeyword:body:conditionsBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3158],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`while`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,212],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,379],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["YieldList","init(leftParen:elementList:trailingComma:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18,201],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `YieldList` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elementList: \n  - trailingComma: \n  - rightParen: "},{"p":["YieldList","init(leftParen:trailingComma:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`leftParen`, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3089],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,201],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["YieldStmt","init(yieldKeyword:yields:)"],"f":[["init",10],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18,3089],[" = TokenSyntax.`yield`, ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,178],[")",17]],"s":[["init",10],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `YieldStmt` using the provided parameters.\n- Parameters:\n  - yieldKeyword: \n  - yields: "},{"p":["Format","indentWidth"],"f":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18,3162]],"s":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18]]},{"p":["AccessPathBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],["]) -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessPathBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessPathBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],["...) -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessPathBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],[") -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],[") -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],["?) -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessPathBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Expression",18,2916],[") -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessPathBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessPathBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],[") -> ",17],["AccessPathBuilder",18,439],[".",17],["FinalResult",18,2917]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessPathBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918],[") -> ",17],["AccessPathBuilder",18,439],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AccessorListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],["]) -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessorListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessorListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],["...) -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessorListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],[") -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],[") -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],["?) -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessorListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Expression",18,2919],[") -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessorListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessorListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],[") -> ",17],["AccessorListBuilder",18,440],[".",17],["FinalResult",18,2920]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessorListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921],[") -> ",17],["AccessorListBuilder",18,440],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CaseItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],["]) -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CaseItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CaseItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],["...) -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CaseItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],[") -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],[") -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],["?) -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CaseItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Expression",18,2922],[") -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CaseItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CaseItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],[") -> ",17],["CaseItemListBuilder",18,441],[".",17],["FinalResult",18,2923]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CaseItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924],[") -> ",17],["CaseItemListBuilder",18,441],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ModifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],["]) -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ModifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ModifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],["...) -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ModifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],[") -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],[") -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],["?) -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ModifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Expression",18,2925],[") -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ModifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ModifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],[") -> ",17],["ModifierListBuilder",18,442],[".",17],["FinalResult",18,2926]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ModifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927],[") -> ",17],["ModifierListBuilder",18,442],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjCSelectorBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],["]) -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjCSelectorBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],["...) -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjCSelectorBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],[") -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],[") -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],["?) -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjCSelectorBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Expression",18,2928],[") -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjCSelectorBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],[") -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["FinalResult",18,2929]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjCSelectorBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930],[") -> ",17],["ObjCSelectorBuilder",18,443],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],["]) -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],["...) -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],[") -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],[") -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],["?) -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Expression",18,2931],[") -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],[") -> ",17],["AttributeListBuilder",18,444],[".",17],["FinalResult",18,2932]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933],[") -> ",17],["AttributeListBuilder",18,444],[".",17],["Component",18,2933]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],["]) -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],["...) -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],[") -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],[") -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],["?) -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Expression",18,2934],[") -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],[") -> ",17],["CatchItemListBuilder",18,445],[".",17],["FinalResult",18,2935]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936],[") -> ",17],["CatchItemListBuilder",18,445],[".",17],["Component",18,2936]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IdentifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],["]) -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IdentifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IdentifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],["...) -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IdentifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],[") -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],[") -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],["?) -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IdentifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Expression",18,2937],[") -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IdentifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IdentifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],[") -> ",17],["IdentifierListBuilder",18,446],[".",17],["FinalResult",18,2938]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IdentifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939],[") -> ",17],["IdentifierListBuilder",18,446],[".",17],["Component",18,2939]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MemberDeclListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],["]) -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MemberDeclListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],["...) -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MemberDeclListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],[") -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],[") -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],["?) -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MemberDeclListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Expression",18,2940],[") -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MemberDeclListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],[") -> ",17],["MemberDeclListBuilder",18,447],[".",17],["FinalResult",18,2941]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MemberDeclListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942],[") -> ",17],["MemberDeclListBuilder",18,447],[".",17],["Component",18,2942]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SwitchCaseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],["]) -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SwitchCaseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],["...) -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SwitchCaseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],[") -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],[") -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],["?) -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SwitchCaseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Expression",18,2943],[") -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SwitchCaseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],[") -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["FinalResult",18,2944]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SwitchCaseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945],[") -> ",17],["SwitchCaseListBuilder",18,448],[".",17],["Component",18,2945]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],["]) -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],["...) -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],[") -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],[") -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],["?) -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Expression",18,2946],[") -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],[") -> ",17],["CatchClauseListBuilder",18,449],[".",17],["FinalResult",18,2947]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948],[") -> ",17],["CatchClauseListBuilder",18,449],[".",17],["Component",18,2948]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ArrayElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],["]) -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ArrayElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],["...) -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ArrayElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],[") -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],[") -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],["?) -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ArrayElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Expression",18,2949],[") -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ArrayElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],[") -> ",17],["ArrayElementListBuilder",18,450],[".",17],["FinalResult",18,2950]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ArrayElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951],[") -> ",17],["ArrayElementListBuilder",18,450],[".",17],["Component",18,2951]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],["]) -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],["...) -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],[") -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],[") -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],["?) -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Expression",18,2952],[") -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],[") -> ",17],["ClosureParamListBuilder",18,451],[".",17],["FinalResult",18,2953]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954],[") -> ",17],["ClosureParamListBuilder",18,451],[".",17],["Component",18,2954]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CodeBlockItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],["...) -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CodeBlockItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],["]) -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],[") -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],[") -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],["?) -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CodeBlockItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Expression",18,2955],[") -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CodeBlockItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],[") -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["FinalResult",18,2956]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CodeBlockItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957],[") -> ",17],["CodeBlockItemListBuilder",18,452],[".",17],["Component",18,2957]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["InheritedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],["]) -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["InheritedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],["...) -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["InheritedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],[") -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],[") -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],["?) -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["InheritedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Expression",18,2958],[") -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["InheritedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],[") -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["FinalResult",18,2959]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["InheritedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960],[") -> ",17],["InheritedTypeListBuilder",18,453],[".",17],["Component",18,2960]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["NonEmptyTokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],["]) -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["NonEmptyTokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],["...) -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["NonEmptyTokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],[") -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],[") -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],["?) -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["NonEmptyTokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Expression",18,2961],[") -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["NonEmptyTokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],[") -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["FinalResult",18,2962]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["NonEmptyTokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963],[") -> ",17],["NonEmptyTokenListBuilder",18,454],[".",17],["Component",18,2963]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IfConfigClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],["]) -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IfConfigClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],["...) -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IfConfigClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],[") -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],[") -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],["?) -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IfConfigClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Expression",18,2964],[") -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IfConfigClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],[") -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["FinalResult",18,2965]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IfConfigClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966],[") -> ",17],["IfConfigClauseListBuilder",18,455],[".",17],["Component",18,2966]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PatternBindingListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],["]) -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PatternBindingListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],["...) -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PatternBindingListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],[") -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],[") -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],["?) -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PatternBindingListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Expression",18,2967],[") -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PatternBindingListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],[") -> ",17],["PatternBindingListBuilder",18,456],[".",17],["FinalResult",18,2968]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PatternBindingListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969],[") -> ",17],["PatternBindingListBuilder",18,456],[".",17],["Component",18,2969]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["EnumCaseElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],["]) -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["EnumCaseElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],["...) -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["EnumCaseElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],[") -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],[") -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],["?) -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["EnumCaseElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Expression",18,2970],[") -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["EnumCaseElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],[") -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["FinalResult",18,2971]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["EnumCaseElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972],[") -> ",17],["EnumCaseElementListBuilder",18,457],[".",17],["Component",18,2972]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],["]) -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],["...) -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],[") -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],[") -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],["?) -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Expression",18,2973],[") -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],[") -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["FinalResult",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975],[") -> ",17],["GenericArgumentListBuilder",18,458],[".",17],["Component",18,2975]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],[") -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],["]) -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AvailabilitySpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],["...) -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AvailabilitySpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],[") -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],[") -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],["?) -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AvailabilitySpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Expression",18,2976],[") -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AvailabilitySpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["Component",18,2978],[") -> ",17],["AvailabilitySpecListBuilder",18,459],[".",17],["FinalResult",18,2977]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],["]) -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ConditionElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],["...) -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ConditionElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],[") -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],[") -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],["?) -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ConditionElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Expression",18,2979],[") -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ConditionElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],[") -> ",17],["ConditionElementListBuilder",18,460],[".",17],["FinalResult",18,2980]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981],[") -> ",17],["ConditionElementListBuilder",18,460],[".",17],["Component",18,2981]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DeclNameArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],["]) -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DeclNameArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],["...) -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DeclNameArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],[") -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],[") -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],["?) -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DeclNameArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Expression",18,2982],[") -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DeclNameArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],[") -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["FinalResult",18,2983]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DeclNameArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984],[") -> ",17],["DeclNameArgumentListBuilder",18,461],[".",17],["Component",18,2984]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],["]) -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],["...) -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],[") -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],[") -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],["?) -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Expression",18,2985],[") -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],[") -> ",17],["GenericParameterListBuilder",18,462],[".",17],["FinalResult",18,2986]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987],[") -> ",17],["GenericParameterListBuilder",18,462],[".",17],["Component",18,2987]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleExprElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],["]) -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleExprElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],["...) -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleExprElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],[") -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],[") -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],["?) -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleExprElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Expression",18,2988],[") -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleExprElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],[") -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["FinalResult",18,2989]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleExprElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990],[") -> ",17],["TupleExprElementListBuilder",18,463],[".",17],["Component",18,2990]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],["]) -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],["...) -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],[") -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],[") -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],["?) -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Expression",18,2991],[") -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],[") -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["FinalResult",18,2992]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993],[") -> ",17],["TupleTypeElementListBuilder",18,464],[".",17],["Component",18,2993]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["BackDeployVersionListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],["]) -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["]) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["BackDeployVersionListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],["...) -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["...) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["BackDeployVersionListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],[") -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["BackDeployVersionListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],[") -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["BackDeployVersionListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],["?) -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["?) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["BackDeployVersionListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Expression",18,2994],[") -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Expression",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["BackDeployVersionListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],[") -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["FinalResult",18,2995]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["BackDeployVersionListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996],[") -> ",17],["BackDeployVersionListBuilder",18,465],[".",17],["Component",18,2996]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DictionaryElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],["]) -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DictionaryElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],["...) -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DictionaryElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],[") -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],[") -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],["?) -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DictionaryElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Expression",18,2997],[") -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DictionaryElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],[") -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["FinalResult",18,2998]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DictionaryElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999],[") -> ",17],["DictionaryElementListBuilder",18,466],[".",17],["Component",18,2999]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["FunctionParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],["]) -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["FunctionParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],["...) -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["FunctionParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],[") -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],[") -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],["?) -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["FunctionParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Expression",18,3000],[") -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["FunctionParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],[") -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["FinalResult",18,3001]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["FunctionParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002],[") -> ",17],["FunctionParameterListBuilder",18,467],[".",17],["Component",18,3002]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["StringLiteralSegmentsBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],["]) -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["]) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["StringLiteralSegmentsBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],["...) -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["...) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["StringLiteralSegmentsBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],[") -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],[") -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],["?) -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["?) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["StringLiteralSegmentsBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Expression",18,3003],[") -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Expression",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["StringLiteralSegmentsBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],[") -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["FinalResult",18,3004]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["StringLiteralSegmentsBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005],[") -> ",17],["StringLiteralSegmentsBuilder",18,468],[".",17],["Component",18,3005]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureCaptureItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],["]) -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureCaptureItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],["...) -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureCaptureItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],[") -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],[") -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],["?) -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureCaptureItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Expression",18,3006],[") -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureCaptureItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],[") -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["FinalResult",18,3007]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureCaptureItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008],[") -> ",17],["ClosureCaptureItemListBuilder",18,469],[".",17],["Component",18,3008]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericRequirementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],["]) -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericRequirementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],["...) -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericRequirementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],[") -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],[") -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],["?) -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericRequirementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Expression",18,3009],[") -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericRequirementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],[") -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["FinalResult",18,3010]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericRequirementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011],[") -> ",17],["GenericRequirementListBuilder",18,470],[".",17],["Component",18,3011]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupNameListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],["]) -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],["...) -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupNameListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],[") -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],[") -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],["?) -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupNameListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Expression",18,3012],[") -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupNameListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],[") -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["FinalResult",18,3013]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupNameListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014],[") -> ",17],["PrecedenceGroupNameListBuilder",18,471],[".",17],["Component",18,3014]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TuplePatternElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],["]) -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TuplePatternElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],["...) -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TuplePatternElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],[") -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],[") -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],["?) -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TuplePatternElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Expression",18,3015],[") -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TuplePatternElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],[") -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["FinalResult",18,3016]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TuplePatternElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017],[") -> ",17],["TuplePatternElementListBuilder",18,472],[".",17],["Component",18,3017]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrimaryAssociatedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrimaryAssociatedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Expression",18,3018],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrimaryAssociatedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["FinalResult",18,3019]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrimaryAssociatedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,473],[".",17],["Component",18,3020]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CompositionTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],["]) -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CompositionTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],["...) -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CompositionTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],[") -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],[") -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],["?) -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CompositionTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Expression",18,3021],[") -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CompositionTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],[") -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["FinalResult",18,3022]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CompositionTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023],[") -> ",17],["CompositionTypeElementListBuilder",18,474],[".",17],["Component",18,3023]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DifferentiabilityParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],["]) -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DifferentiabilityParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],["...) -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DifferentiabilityParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],[") -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],[") -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],["?) -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DifferentiabilityParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Expression",18,3024],[") -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DifferentiabilityParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],[") -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["FinalResult",18,3025]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DifferentiabilityParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026],[") -> ",17],["DifferentiabilityParamListBuilder",18,475],[".",17],["Component",18,3026]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SpecializeAttributeSpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SpecializeAttributeSpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Expression",18,3027],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SpecializeAttributeSpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["FinalResult",18,3028]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SpecializeAttributeSpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,476],[".",17],["Component",18,3029]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupAttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupAttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Expression",18,3030],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupAttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["FinalResult",18,3031]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupAttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,477],[".",17],["Component",18,3032]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MultipleTrailingClosureElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MultipleTrailingClosureElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Expression",18,3033],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MultipleTrailingClosureElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["FinalResult",18,3034]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MultipleTrailingClosureElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,478],[".",17],["Component",18,3035]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExprListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],["]) -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ExprListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ExprListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],["...) -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ExprListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],[") -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],[") -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],["?) -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ExprListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Expression",18,3036],[") -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExprListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ExprListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],[") -> ",17],["ExprListBuilder",18,479],[".",17],["FinalResult",18,3037]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ExprListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038],[") -> ",17],["ExprListBuilder",18,479],[".",17],["Component",18,3038]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjcNameBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],["]) -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjcNameBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjcNameBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],["...) -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjcNameBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],[") -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],[") -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],["?) -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjcNameBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Expression",18,3039],[") -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjcNameBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjcNameBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],[") -> ",17],["ObjcNameBuilder",18,480],[".",17],["FinalResult",18,3040]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjcNameBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041],[") -> ",17],["ObjcNameBuilder",18,480],[".",17],["Component",18,3041]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],["]) -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],["...) -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],[") -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],[") -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],["?) -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Expression",18,3042],[") -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],[") -> ",17],["TokenListBuilder",18,481],[".",17],["FinalResult",18,3043]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044],[") -> ",17],["TokenListBuilder",18,481],[".",17],["Component",18,3044]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExpressibleAsSyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSyntaxBuildable","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,519]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`."},{"p":["ExpressibleAsSyntaxBuildable","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,545]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`."},{"p":["ExpressibleAsSyntaxBuildable","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,649]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`."},{"p":["ExpressibleAsSyntaxBuildable","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,680]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`."},{"p":["ExpressibleAsSyntaxBuildable","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,684]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`."},{"p":["ExpressibleAsAsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,518]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]]},{"p":["ExpressibleAsAsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,692]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]]},{"p":["ExpressibleAsAsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["SyntaxListBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["Syntax",18,3094],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`."},{"p":["SyntaxBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `Syntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`."},{"p":["SyntaxBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["Syntax",18,3094],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`.\n\nSatisfies conformance to `SyntaxListBuildable`."},{"p":["SyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsSyntaxBuildable`."},{"p":["AccessPath","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AccessPath","buildAccessPath(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["AccessPathSyntax",18,3045]],"s":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessPathSyntax",18]]},{"p":["AccessPath","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPath` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,482]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`."},{"p":["ImportDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ImportDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImportDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ImportDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,483]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]],"d":"Conformance to `ExpressibleAsImportDecl`."},{"p":["ReturnStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ReturnStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ReturnStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,484]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]],"d":"Conformance to `ExpressibleAsReturnStmt`."},{"p":["SourceFile","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SourceFile` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,485]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]],"d":"Conformance to `ExpressibleAsSourceFile`."},{"p":["StructDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["StructDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StructDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`StructDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,486]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]],"d":"Conformance to `ExpressibleAsStructDecl`."},{"p":["SwitchCase","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCase` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,487]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]],"d":"Conformance to `ExpressibleAsSwitchCase`."},{"p":["SwitchStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["SwitchStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`SwitchStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,488]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]],"d":"Conformance to `ExpressibleAsSwitchStmt`."},{"p":["CatchClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,489]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]],"d":"Conformance to `ExpressibleAsCatchClause`."},{"p":["ClosureExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ClosureExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ClosureExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,490]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]],"d":"Conformance to `ExpressibleAsClosureExpr`."},{"p":["KeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["KeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,491]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathExpr`."},{"p":["TernaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TernaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TernaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TernaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,492]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]],"d":"Conformance to `ExpressibleAsTernaryExpr`."},{"p":["WhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["WhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,493]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]],"d":"Conformance to `ExpressibleAsWhereClause`."},{"p":["AccessorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["AccessorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AccessorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,494]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]],"d":"Conformance to `ExpressibleAsAccessorDecl`."},{"p":["AccessorList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AccessorList","buildAccessorList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["AccessorListSyntax",18,3046]],"s":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessorListSyntax",18]]},{"p":["AccessorList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,495]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`."},{"p":["ArrayElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,496]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]],"d":"Conformance to `ExpressibleAsArrayElement`."},{"p":["ArrayElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["ArrayElement",18,496]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ArrayElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["CaseItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CaseItemList","buildCaseItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["CaseItemListSyntax",18,3047]],"s":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CaseItemListSyntax",18]]},{"p":["CaseItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,497]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`."},{"p":["ClosureParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,498]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]],"d":"Conformance to `ExpressibleAsClosureParam`."},{"p":["ClosureParam","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["ClosureParam",18,498]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ClosureParam",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ContinueStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ContinueStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ContinueStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ContinueStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,499]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]],"d":"Conformance to `ExpressibleAsContinueStmt`."},{"p":["DeclModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,500]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to `ExpressibleAsDeclModifier`."},{"p":["EnumCaseDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["EnumCaseDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumCaseDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,501]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]],"d":"Conformance to `ExpressibleAsEnumCaseDecl`."},{"p":["FunctionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["FunctionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`FunctionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,502]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]],"d":"Conformance to `ExpressibleAsFunctionDecl`."},{"p":["FunctionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["FunctionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`FunctionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,503]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]],"d":"Conformance to `ExpressibleAsFunctionType`."},{"p":["IfConfigDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["IfConfigDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`IfConfigDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,504]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]],"d":"Conformance to `ExpressibleAsIfConfigDecl`."},{"p":["MetatypeType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["MetatypeType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MetatypeType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MetatypeType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,505]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]],"d":"Conformance to `ExpressibleAsMetatypeType`."},{"p":["ModifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ModifierList","buildModifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ModifierListSyntax",18,3048]],"s":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ModifierListSyntax",18]]},{"p":["ModifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ModifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,506]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`."},{"p":["ObjCSelector","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ObjCSelector","buildObjCSelector(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ObjCSelectorSyntax",18,3049]],"s":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjCSelectorSyntax",18]]},{"p":["ObjCSelector","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelector` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,507]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`."},{"p":["OperatorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["OperatorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`OperatorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,508]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]],"d":"Conformance to `ExpressibleAsOperatorDecl`."},{"p":["OptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["OptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`OptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,509]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]],"d":"Conformance to `ExpressibleAsOptionalType`."},{"p":["ProtocolDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ProtocolDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ProtocolDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ProtocolDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,510]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]],"d":"Conformance to `ExpressibleAsProtocolDecl`."},{"p":["ReturnClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,511]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to `ExpressibleAsReturnClause`."},{"p":["SequenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SequenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SequenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SequenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,512]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]],"d":"Conformance to `ExpressibleAsSequenceExpr`."},{"p":["SuperRefExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SuperRefExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SuperRefExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SuperRefExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,513]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]],"d":"Conformance to `ExpressibleAsSuperRefExpr`."},{"p":["TuplePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["TuplePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`TuplePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,514]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]],"d":"Conformance to `ExpressibleAsTuplePattern`."},{"p":["VariableDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["VariableDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VariableDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`VariableDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,515]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]],"d":"Conformance to `ExpressibleAsVariableDecl`."},{"p":["VersionTuple","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["VersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VersionTuple` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,516]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]],"d":"Conformance to `ExpressibleAsVersionTuple`."},{"p":["AccessorBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,517]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to `ExpressibleAsAccessorBlock`."},{"p":["AsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["AsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`AsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,518]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]],"d":"Conformance to `ExpressibleAsAsTypePattern`."},{"p":["AttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AttributeList","buildAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["AttributeListSyntax",18,3050]],"s":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AttributeListSyntax",18]]},{"p":["AttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,519]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`."},{"p":["CatchItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CatchItemList","buildCatchItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["CatchItemListSyntax",18,3051]],"s":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchItemListSyntax",18]]},{"p":["CatchItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,520]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`."},{"p":["CodeBlockItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["DeclBuildable","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Builds a `DeclSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`."},{"p":["DeclBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `DeclSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `DeclSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["DeclBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["DeclSyntax",18,3085],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`.\n\nSatisfies conformance to `DeclListBuildable`."},{"p":["DeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsDeclBuildable`."},{"p":["ExprBuildable","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Builds a `ExprSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`."},{"p":["ExprBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `ExprSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `ExprSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["ExprBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["ExprSyntax",18,3086],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`.\n\nSatisfies conformance to `ExprListBuildable`."},{"p":["ExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsExprBuildable`."},{"p":["ExtensionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ExtensionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExtensionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ExtensionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,522]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]],"d":"Conformance to `ExpressibleAsExtensionDecl`."},{"p":["InheritedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["InheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,523]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]],"d":"Conformance to `ExpressibleAsInheritedType`."},{"p":["InheritedType","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["InheritedType",18,523]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["InheritedType",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["IsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["IsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,524]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]],"d":"Conformance to `ExpressibleAsIsTypePattern`."},{"p":["ObjcNamePiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcNamePiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,525]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]],"d":"Conformance to `ExpressibleAsObjcNamePiece`."},{"p":["PoundFileExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFileExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,526]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileExpr`."},{"p":["PoundLineExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundLineExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundLineExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundLineExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,527]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]],"d":"Conformance to `ExpressibleAsPoundLineExpr`."},{"p":["StmtBuildable","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Builds a `StmtSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`."},{"p":["StmtBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `StmtSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `StmtSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["StmtBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["StmtSyntax",18,3087],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`.\n\nSatisfies conformance to `StmtListBuildable`."},{"p":["StmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsStmtBuildable`."},{"p":["StringSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["StringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,528]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]],"d":"Conformance to `ExpressibleAsStringSegment`."},{"p":["SubscriptDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["SubscriptDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`SubscriptDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,529]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]],"d":"Conformance to `ExpressibleAsSubscriptDecl`."},{"p":["SubscriptExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SubscriptExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SubscriptExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,530]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]],"d":"Conformance to `ExpressibleAsSubscriptExpr`."},{"p":["TypeBuildable","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Builds a `TypeSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`."},{"p":["TypeBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `TypeSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `TypeSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["TypeBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["TypeSyntax",18,3088],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`.\n\nSatisfies conformance to `TypeListBuildable`."},{"p":["TypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsTypeBuildable`."},{"p":["TypealiasDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["TypealiasDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypealiasDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`TypealiasDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,531]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]],"d":"Conformance to `ExpressibleAsTypealiasDecl`."},{"p":["AssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,532]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]],"d":"Conformance to `ExpressibleAsAssignmentExpr`."},{"p":["AttributedType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["AttributedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributedType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`AttributedType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,533]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]],"d":"Conformance to `ExpressibleAsAttributedType`."},{"p":["DictionaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["DictionaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DictionaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,534]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]],"d":"Conformance to `ExpressibleAsDictionaryExpr`."},{"p":["DictionaryType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["DictionaryType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`DictionaryType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,535]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]],"d":"Conformance to `ExpressibleAsDictionaryType`."},{"p":["ExpressionStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ExpressionStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ExpressionStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,536]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]],"d":"Conformance to `ExpressibleAsExpressionStmt`."},{"p":["IdentifierExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IdentifierExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IdentifierExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,537]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to `ExpressibleAsIdentifierExpr`."},{"p":["IdentifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["IdentifierList","buildIdentifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["IdentifierListSyntax",18,3052]],"s":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IdentifierListSyntax",18]]},{"p":["IdentifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,538]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]],"d":"Conformance to `ExpressibleAsIdentifierList`."},{"p":["IfConfigClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["IfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,539]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]],"d":"Conformance to `ExpressibleAsIfConfigClause`."},{"p":["MemberDeclList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["MemberDeclList","buildMemberDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["MemberDeclListSyntax",18,3053]],"s":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MemberDeclListSyntax",18]]},{"p":["MemberDeclList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,540]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`."},{"p":["NilLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["NilLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NilLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`NilLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,541]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]],"d":"Conformance to `ExpressibleAsNilLiteralExpr`."},{"p":["PatternBinding","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBinding` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,542]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]],"d":"Conformance to `ExpressibleAsPatternBinding`."},{"p":["PatternBinding","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["PatternBinding",18,542]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["PatternBinding",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["PoundErrorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PoundErrorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundErrorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundErrorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,543]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]],"d":"Conformance to `ExpressibleAsPoundErrorDecl`."},{"p":["SpecializeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SpecializeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SpecializeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,544]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]],"d":"Conformance to `ExpressibleAsSpecializeExpr`."},{"p":["SwitchCaseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["SwitchCaseList","buildSwitchCaseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["SwitchCaseListSyntax",18,3054]],"s":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SwitchCaseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,545]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`."},{"p":["TypeAnnotation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeAnnotation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,546]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["CatchClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CatchClauseList","buildCatchClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["CatchClauseListSyntax",18,3055]],"s":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchClauseListSyntax",18]]},{"p":["CatchClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,547]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`."},{"p":["CompositionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["CompositionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`CompositionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,548]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]],"d":"Conformance to `ExpressibleAsCompositionType`."},{"p":["CustomAttribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CustomAttribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,549]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]],"d":"Conformance to `ExpressibleAsCustomAttribute`."},{"p":["DeclarationStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DeclarationStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclarationStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeclarationStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,550]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]],"d":"Conformance to `ExpressibleAsDeclarationStmt`."},{"p":["EnumCaseElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["EnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,551]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]],"d":"Conformance to `ExpressibleAsEnumCaseElement`."},{"p":["EnumCaseElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["EnumCaseElement",18,551]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["EnumCaseElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["EnumCasePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["EnumCasePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCasePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`EnumCasePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,552]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]],"d":"Conformance to `ExpressibleAsEnumCasePattern`."},{"p":["FallthroughStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["FallthroughStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FallthroughStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`FallthroughStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,553]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]],"d":"Conformance to `ExpressibleAsFallthroughStmt`."},{"p":["ForcedValueExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ForcedValueExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForcedValueExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ForcedValueExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,554]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]],"d":"Conformance to `ExpressibleAsForcedValueExpr`."},{"p":["GenericArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,555]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]],"d":"Conformance to `ExpressibleAsGenericArgument`."},{"p":["GenericArgument","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["GenericArgument",18,555]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericArgument",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["InitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["InitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`InitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,556]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]],"d":"Conformance to `ExpressibleAsInitializerDecl`."},{"p":["KeyPathBaseExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["KeyPathBaseExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,557]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathBaseExpr`."},{"p":["MemberDeclBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,558]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to `ExpressibleAsMemberDeclBlock`."},{"p":["ObjcKeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjcKeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,559]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]],"d":"Conformance to `ExpressibleAsObjcKeyPathExpr`."},{"p":["OptionalPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["OptionalPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`OptionalPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,560]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]],"d":"Conformance to `ExpressibleAsOptionalPattern`."},{"p":["ParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,561]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]],"d":"Conformance to `ExpressibleAsParameterClause`."},{"p":["PoundAssertStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["PoundAssertStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundAssertStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`PoundAssertStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,562]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]],"d":"Conformance to `ExpressibleAsPoundAssertStmt`."},{"p":["PoundColumnExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundColumnExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundColumnExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundColumnExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,563]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]],"d":"Conformance to `ExpressibleAsPoundColumnExpr`."},{"p":["PoundFileIDExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileIDExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,564]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileIDExpr`."},{"p":["PoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileIDExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileIDExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["RepeatWhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["RepeatWhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RepeatWhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`RepeatWhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,565]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]],"d":"Conformance to `ExpressibleAsRepeatWhileStmt`."},{"p":["SwitchCaseLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,566]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]],"d":"Conformance to `ExpressibleAsSwitchCaseLabel`."},{"p":["WildcardPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["WildcardPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WildcardPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`WildcardPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,567]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]],"d":"Conformance to `ExpressibleAsWildcardPattern`."},{"p":["ArrayElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ArrayElementList","buildArrayElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ArrayElementListSyntax",18,3056]],"s":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ArrayElementListSyntax",18]]},{"p":["ArrayElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,568]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`."},{"p":["ClosureParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ClosureParamList","buildClosureParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ClosureParamListSyntax",18,3057]],"s":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureParamListSyntax",18]]},{"p":["ClosureParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,569]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`."},{"p":["ClosureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,570]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]],"d":"Conformance to `ExpressibleAsClosureSignature`."},{"p":["ConditionElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,571]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to `ExpressibleAsConditionElement`."},{"p":["ConditionElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["ConditionElement",18,571]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ConditionElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["DeclNameArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,572]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]],"d":"Conformance to `ExpressibleAsDeclNameArgument`."},{"p":["FloatLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["FloatLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FloatLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FloatLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,573]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]],"d":"Conformance to `ExpressibleAsFloatLiteralExpr`."},{"p":["FunctionCallExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["FunctionCallExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionCallExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FunctionCallExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,574]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]],"d":"Conformance to `ExpressibleAsFunctionCallExpr`."},{"p":["FunctionDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,575]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]],"d":"Conformance to `ExpressibleAsFunctionDeclName`."},{"p":["GenericParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,576]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]],"d":"Conformance to `ExpressibleAsGenericParameter`."},{"p":["GenericParameter","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["GenericParameter",18,576]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericParameter",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["HasTrailingComma","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["Self",18]],"d":"Returns this node overriding presence of the trailing comma"},{"p":["MemberAccessExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["MemberAccessExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberAccessExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`MemberAccessExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,577]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]],"d":"Conformance to `ExpressibleAsMemberAccessExpr`."},{"p":["ObjcSelectorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjcSelectorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,578]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]],"d":"Conformance to `ExpressibleAsObjcSelectorExpr`."},{"p":["PatternBuildable","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Builds a `PatternSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`."},{"p":["PatternBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `PatternSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `PatternSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["PatternBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> [",17],["PatternSyntax",18,3090],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`.\n\nSatisfies conformance to `PatternListBuildable`."},{"p":["PatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsPatternBuildable`."},{"p":["PostfixUnaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PostfixUnaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,579]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]],"d":"Conformance to `ExpressibleAsPostfixUnaryExpr`."},{"p":["PoundWarningDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PoundWarningDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundWarningDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundWarningDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,580]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]],"d":"Conformance to `ExpressibleAsPoundWarningDecl`."},{"p":["RegexLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["RegexLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RegexLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`RegexLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,581]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]],"d":"Conformance to `ExpressibleAsRegexLiteralExpr`."},{"p":["TupleExprElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,582]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to `ExpressibleAsTupleExprElement`."},{"p":["TupleExprElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["TupleExprElement",18,582]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TupleExprElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["TupleTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,583]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]],"d":"Conformance to `ExpressibleAsTupleTypeElement`."},{"p":["TupleTypeElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["TupleTypeElement",18,583]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TupleTypeElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["AccessorParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,584]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]],"d":"Conformance to `ExpressibleAsAccessorParameter`."},{"p":["AvailabilityEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,585]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]],"d":"Conformance to `ExpressibleAsAvailabilityEntry`."},{"p":["CodeBlockItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CodeBlockItemList","buildCodeBlockItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["CodeBlockItemListSyntax",18,3058]],"s":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["CodeBlockItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,586]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`."},{"p":["DeclListBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["DeclSyntax",18,3085],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`."},{"p":["DeclNameArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,587]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]],"d":"Conformance to `ExpressibleAsDeclNameArguments`."},{"p":["DeinitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["DeinitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeinitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`DeinitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,588]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]],"d":"Conformance to `ExpressibleAsDeinitializerDecl`."},{"p":["DictionaryElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,589]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]],"d":"Conformance to `ExpressibleAsDictionaryElement`."},{"p":["DictionaryElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["DictionaryElement",18,589]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["DictionaryElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ExprListBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["ExprSyntax",18,3086],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`."},{"p":["ExpressionPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["ExpressionPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ExpressionPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,590]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]],"d":"Conformance to `ExpressibleAsExpressionPattern`."},{"p":["ExpressionSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,591]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]],"d":"Conformance to `ExpressibleAsExpressionSegment`."},{"p":["FunctionParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,592]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]],"d":"Conformance to `ExpressibleAsFunctionParameter`."},{"p":["FunctionParameter","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["FunctionParameter",18,592]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["FunctionParameter",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["FunctionSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,593]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]],"d":"Conformance to `ExpressibleAsFunctionSignature`."},{"p":["IdentifierPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["IdentifierPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IdentifierPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,594]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]],"d":"Conformance to `ExpressibleAsIdentifierPattern`."},{"p":["InheritedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["InheritedTypeList","buildInheritedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["InheritedTypeListSyntax",18,3059]],"s":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["InheritedTypeListSyntax",18]]},{"p":["InheritedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,595]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`."},{"p":["InitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["InitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,596]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]],"d":"Conformance to `ExpressibleAsInitializerClause`."},{"p":["NonEmptyTokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["NonEmptyTokenList","buildNonEmptyTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["NonEmptyTokenListSyntax",18,3060]],"s":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["NonEmptyTokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NonEmptyTokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,597]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to `ExpressibleAsNonEmptyTokenList`."},{"p":["ObjCSelectorPiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelectorPiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,598]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]],"d":"Conformance to `ExpressibleAsObjCSelectorPiece`."},{"p":["ObjectLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjectLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,599]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]],"d":"Conformance to `ExpressibleAsObjectLiteralExpr`."},{"p":["PoundFilePathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFilePathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFilePathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFilePathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,600]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]],"d":"Conformance to `ExpressibleAsPoundFilePathExpr`."},{"p":["PoundFunctionExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFunctionExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFunctionExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFunctionExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,601]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]],"d":"Conformance to `ExpressibleAsPoundFunctionExpr`."},{"p":["QualifiedDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["QualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`QualifiedDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["QualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,602]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]],"d":"Conformance to `ExpressibleAsQualifiedDeclName`."},{"p":["StmtListBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["StmtSyntax",18,3087],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`."},{"p":["StringLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["StringLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`StringLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,603]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]],"d":"Conformance to `ExpressibleAsStringLiteralExpr`."},{"p":["TypeListBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["TypeSyntax",18,3088],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`."},{"p":["AssociatedtypeDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["AssociatedtypeDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,604]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]],"d":"Conformance to `ExpressibleAsAssociatedtypeDecl`."},{"p":["BinaryOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["BinaryOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,605]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to `ExpressibleAsBinaryOperatorExpr`."},{"p":["BooleanLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["BooleanLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,606]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]],"d":"Conformance to `ExpressibleAsBooleanLiteralExpr`."},{"p":["ClosureCaptureItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,607]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItem`."},{"p":["ClosureCaptureItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["ClosureCaptureItem",18,607]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ClosureCaptureItem",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ElseIfContinuation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseIfContinuation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,608]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]],"d":"Conformance to `ExpressibleAsElseIfContinuation`."},{"p":["GenericRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,609]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]],"d":"Conformance to `ExpressibleAsGenericRequirement`."},{"p":["GenericRequirement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["GenericRequirement",18,609]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericRequirement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["GenericWhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericWhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,610]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]],"d":"Conformance to `ExpressibleAsGenericWhereClause`."},{"p":["IfConfigClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["IfConfigClauseList","buildIfConfigClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["IfConfigClauseListSyntax",18,3061]],"s":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["IfConfigClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,611]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`."},{"p":["IntegerLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IntegerLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,612]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]],"d":"Conformance to `ExpressibleAsIntegerLiteralExpr`."},{"p":["MemberDeclListItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclListItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,613]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to `ExpressibleAsMemberDeclListItem`."},{"p":["PatternBindingList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PatternBindingList","buildPatternBindingList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternBindingListSyntax",18,3062]],"s":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternBindingListSyntax",18]]},{"p":["PatternBindingList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBindingList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,614]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`."},{"p":["PoundDsohandleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundDsohandleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,615]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]],"d":"Conformance to `ExpressibleAsPoundDsohandleExpr`."},{"p":["PrefixOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PrefixOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,616]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]],"d":"Conformance to `ExpressibleAsPrefixOperatorExpr`."},{"p":["SwitchDefaultLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchDefaultLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,617]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]],"d":"Conformance to `ExpressibleAsSwitchDefaultLabel`."},{"p":["AccessLevelModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessLevelModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,618]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]],"d":"Conformance to `ExpressibleAsAccessLevelModifier`."},{"p":["AccessPathComponent","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPathComponent` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,619]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]],"d":"Conformance to `ExpressibleAsAccessPathComponent`."},{"p":["EnumCaseElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["EnumCaseElementList","buildEnumCaseElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["EnumCaseElementListSyntax",18,3063]],"s":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["EnumCaseElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,620]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`."},{"p":["ExpressibleAsDoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,693]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]]},{"p":["ExpressibleAsDoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,695]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]]},{"p":["ExpressibleAsIfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,696]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]]},{"p":["ExpressibleAsIsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericArgumentList","buildGenericArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["GenericArgumentListSyntax",18,3064]],"s":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericArgumentListSyntax",18]]},{"p":["GenericArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,621]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`."},{"p":["PostfixIfConfigExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PostfixIfConfigExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,622]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]],"d":"Conformance to `ExpressibleAsPostfixIfConfigExpr`."},{"p":["PoundSourceLocation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocation` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,623]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocation`."},{"p":["PoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundSourceLocation` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocation","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PrecedenceGroupDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PrecedenceGroupDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,624]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupDecl`."},{"p":["SameTypeRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SameTypeRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,625]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]],"d":"Conformance to `ExpressibleAsSameTypeRequirement`."},{"p":["TargetFunctionEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TargetFunctionEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,626]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]],"d":"Conformance to `ExpressibleAsTargetFunctionEntry`."},{"p":["TargetFunctionEntry","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["TargetFunctionEntry",18,626]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TargetFunctionEntry",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["TuplePatternElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,627]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]],"d":"Conformance to `ExpressibleAsTuplePatternElement`."},{"p":["TuplePatternElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["TuplePatternElement",18,627]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TuplePatternElement",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ValueBindingPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PatternSyntax",18,3090]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["ValueBindingPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ValueBindingPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ValueBindingPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,628]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]],"d":"Conformance to `ExpressibleAsValueBindingPattern`."},{"p":["AvailabilityArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,629]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityArgument`."},{"p":["AvailabilitySpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AvailabilitySpecList","buildAvailabilitySpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["AvailabilitySpecListSyntax",18,3065]],"s":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilitySpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilitySpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,630]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`."},{"p":["ClassRestrictionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ClassRestrictionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassRestrictionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ClassRestrictionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,631]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]],"d":"Conformance to `ExpressibleAsClassRestrictionType`."},{"p":["ConditionElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ConditionElementList","buildConditionElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ConditionElementListSyntax",18,3066]],"s":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ConditionElementListSyntax",18]]},{"p":["ConditionElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,632]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`."},{"p":["ConstrainedSugarType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ConstrainedSugarType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConstrainedSugarType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConstrainedSugarType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ConstrainedSugarType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConstrainedSugarType","createConstrainedSugarType()"],"f":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18,633]],"s":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18]],"d":"Conformance to `ExpressibleAsConstrainedSugarType`."},{"p":["DeclNameArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DeclNameArgumentList","buildDeclNameArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclNameArgumentListSyntax",18,3067]],"s":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["DeclNameArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,634]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`."},{"p":["ExpressibleAsTryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,697]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]]},{"p":["ExpressibleAsTryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericParameterList","buildGenericParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["GenericParameterListSyntax",18,3068]],"s":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericParameterListSyntax",18]]},{"p":["GenericParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,635]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`."},{"p":["MemberTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["MemberTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,636]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsMemberTypeIdentifier`."},{"p":["OptionalChainingExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["OptionalChainingExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalChainingExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`OptionalChainingExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,637]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]],"d":"Conformance to `ExpressibleAsOptionalChainingExpr`."},{"p":["PatternListBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["?) -> [",17],["PatternSyntax",18,3090],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`."},{"p":["SimpleTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["SimpleTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,638]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsSimpleTypeIdentifier`."},{"p":["TupleExprElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TupleExprElementList","buildTupleExprElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TupleExprElementListSyntax",18,3069]],"s":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleExprElementListSyntax",18]]},{"p":["TupleExprElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,639]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`."},{"p":["TupleTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TupleTypeElementList","buildTupleTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TupleTypeElementListSyntax",18,3070]],"s":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["TupleTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,640]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`."},{"p":["AvailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,641]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]],"d":"Conformance to `ExpressibleAsAvailabilityCondition`."},{"p":["BackDeployVersionList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["BackDeployVersionList","buildBackDeployVersionList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildBackDeployVersionList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["BackDeployVersionListSyntax",18,3071]],"s":[["func",12],[" ",17],["buildBackDeployVersionList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["BackDeployVersionListSyntax",18]]},{"p":["BackDeployVersionList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployVersionList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BackDeployVersionList","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,642]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionList`."},{"p":["DictionaryElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DictionaryElementList","buildDictionaryElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DictionaryElementListSyntax",18,3072]],"s":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DictionaryElementListSyntax",18]]},{"p":["DictionaryElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,643]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`."},{"p":["DiscardAssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["DiscardAssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,644]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]],"d":"Conformance to `ExpressibleAsDiscardAssignmentExpr`."},{"p":["EditorPlaceholderExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["EditorPlaceholderExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,645]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]],"d":"Conformance to `ExpressibleAsEditorPlaceholderExpr`."},{"p":["ExpressibleAsCaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,698]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]]},{"p":["ExpressibleAsCaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCaseItem","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,497]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`."},{"p":["ExpressibleAsDeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,699]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]]},{"p":["ExpressibleAsDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,700]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]]},{"p":["ExpressibleAsEnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,701]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]]},{"p":["ExpressibleAsExprList","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,571]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to `ExpressibleAsConditionElement`."},{"p":["ExpressibleAsObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]]},{"p":["ExpressibleAsTypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]]},{"p":["ExpressibleAsTypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["FunctionParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["FunctionParameterList","buildFunctionParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["FunctionParameterListSyntax",18,3073]],"s":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["FunctionParameterListSyntax",18]]},{"p":["FunctionParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,646]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`."},{"p":["GenericArgumentClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,647]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]],"d":"Conformance to `ExpressibleAsGenericArgumentClause`."},{"p":["PrimaryAssociatedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,648]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedType`."},{"p":["PrimaryAssociatedType","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["PrimaryAssociatedType",18,648]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["PrimaryAssociatedType",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["StringLiteralSegments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["StringLiteralSegments","buildStringLiteralSegments(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StringLiteralSegmentsSyntax",18,3074]],"s":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["StringLiteralSegments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralSegments` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,649]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`."},{"p":["SymbolicReferenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SymbolicReferenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,650]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]],"d":"Conformance to `ExpressibleAsSymbolicReferenceExpr`."},{"p":["TypeInheritanceClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInheritanceClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,651]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]],"d":"Conformance to `ExpressibleAsTypeInheritanceClause`."},{"p":["TypeInitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,652]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]],"d":"Conformance to `ExpressibleAsTypeInitializerClause`."},{"p":["UnresolvedPatternExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["UnresolvedPatternExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,653]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]],"d":"Conformance to `ExpressibleAsUnresolvedPatternExpr`."},{"p":["ClosureCaptureItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ClosureCaptureItemList","buildClosureCaptureItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ClosureCaptureItemListSyntax",18,3075]],"s":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["ClosureCaptureItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,654]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`."},{"p":["CompositionTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,655]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElement`."},{"p":["ConformanceRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConformanceRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,656]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]],"d":"Conformance to `ExpressibleAsConformanceRequirement`."},{"p":["DifferentiabilityParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,657]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParam`."},{"p":["DifferentiabilityParam","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["DifferentiabilityParam",18,657]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["DifferentiabilityParam",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ExpressibleAsArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,704]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]]},{"p":["ExpressibleAsArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,705]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]]},{"p":["ExpressibleAsArrayType","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,546]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["ExpressibleAsArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,706]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]]},{"p":["ExpressibleAsArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,707]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]]},{"p":["ExpressibleAsAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,708]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]]},{"p":["ExpressibleAsAwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,709]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]]},{"p":["ExpressibleAsBreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,710]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]]},{"p":["ExpressibleAsCatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,520]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`."},{"p":["ExpressibleAsClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,711]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]]},{"p":["ExpressibleAsClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsCodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,712]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]]},{"p":["ExpressibleAsCodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,713]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]]},{"p":["ExpressibleAsDeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,714]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]]},{"p":["ExpressibleAsElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,715]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]]},{"p":["ExpressibleAsForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsGuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,716]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]]},{"p":["ExpressibleAsGuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsInOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,717]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]]},{"p":["ExpressibleAsInOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,718]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]]},{"p":["ExpressibleAsThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsTokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,719]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]]},{"p":["ExpressibleAsTupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,720]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]]},{"p":["ExpressibleAsTupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,721]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]]},{"p":["ExpressibleAsTupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsWhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,722]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]]},{"p":["ExpressibleAsWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsYieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,723]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]]},{"p":["ExpressibleAsYieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsYieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,724]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]]},{"p":["ExpressibleAsYieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["GenericParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,658]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]],"d":"Conformance to `ExpressibleAsGenericParameterClause`."},{"p":["GenericRequirementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericRequirementList","buildGenericRequirementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["GenericRequirementListSyntax",18,3076]],"s":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericRequirementListSyntax",18]]},{"p":["GenericRequirementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,659]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`."},{"p":["LabeledSpecializeEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["LabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`LabeledSpecializeEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["LabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,660]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]],"d":"Conformance to `ExpressibleAsLabeledSpecializeEntry`."},{"p":["LabeledSpecializeEntry","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["LabeledSpecializeEntry",18,660]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["LabeledSpecializeEntry",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ClosureCaptureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,661]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]],"d":"Conformance to `ExpressibleAsClosureCaptureSignature`."},{"p":["DifferentiabilityParams","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParams` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,662]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParams`."},{"p":["ExpressibleAsAccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,482]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]]},{"p":["ExpressibleAsImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,483]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]]},{"p":["ExpressibleAsImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,484]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]]},{"p":["ExpressibleAsReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,485]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]]},{"p":["ExpressibleAsSourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,486]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]]},{"p":["ExpressibleAsStructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,487]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]]},{"p":["ExpressibleAsSwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,488]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]]},{"p":["ExpressibleAsSwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["PoundSourceLocationArgs","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocationArgs` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,663]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocationArgs`."},{"p":["PrecedenceGroupNameList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrecedenceGroupNameList","buildPrecedenceGroupNameList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PrecedenceGroupNameListSyntax",18,3077]],"s":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["PrecedenceGroupNameList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`."},{"p":["PrecedenceGroupRelation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupRelation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,665]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupRelation`."},{"p":["TuplePatternElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TuplePatternElementList","buildTuplePatternElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TuplePatternElementListSyntax",18,3078]],"s":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["TuplePatternElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,666]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`."},{"p":["UnavailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["UnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnavailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,667]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]],"d":"Conformance to `ExpressibleAsUnavailabilityCondition`."},{"p":["ExpressibleAsCatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,489]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]]},{"p":["ExpressibleAsCatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchClause","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,547]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`."},{"p":["ExpressibleAsClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,490]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]]},{"p":["ExpressibleAsClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsKeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,491]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]]},{"p":["ExpressibleAsKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,492]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]]},{"p":["ExpressibleAsTernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsWhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,493]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]]},{"p":["ExpressibleAsWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["MatchingPatternCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MatchingPatternCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,668]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]],"d":"Conformance to `ExpressibleAsMatchingPatternCondition`."},{"p":["OptionalBindingCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["OptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalBindingCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,669]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]],"d":"Conformance to `ExpressibleAsOptionalBindingCondition`."},{"p":["BackDeployVersionArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["BackDeployVersionArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployVersionArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BackDeployVersionArgument","createBackDeployVersionArgument()"],"f":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18,670]],"s":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionArgument`."},{"p":["ExpressibleAsAccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,494]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]]},{"p":["ExpressibleAsAccessorDecl","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,495]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`."},{"p":["ExpressibleAsAccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsAccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,495]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]]},{"p":["ExpressibleAsAccessorList","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,517]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to `ExpressibleAsAccessorBlock`."},{"p":["ExpressibleAsArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,496]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]]},{"p":["ExpressibleAsArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsArrayElement","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,568]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`."},{"p":["ExpressibleAsCaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,497]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]]},{"p":["ExpressibleAsClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,498]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]]},{"p":["ExpressibleAsClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureParam","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,569]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`."},{"p":["ExpressibleAsContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,499]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]]},{"p":["ExpressibleAsContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,500]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]]},{"p":["ExpressibleAsDeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,506]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`."},{"p":["ExpressibleAsEnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,501]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]]},{"p":["ExpressibleAsEnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,502]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]]},{"p":["ExpressibleAsFunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,503]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]]},{"p":["ExpressibleAsFunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsIfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,504]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]]},{"p":["ExpressibleAsIfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsMetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,505]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]]},{"p":["ExpressibleAsMetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,506]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]]},{"p":["ExpressibleAsObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,507]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]]},{"p":["ExpressibleAsOperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,508]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]]},{"p":["ExpressibleAsOperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsOptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,509]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]]},{"p":["ExpressibleAsOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,510]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]]},{"p":["ExpressibleAsProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,511]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]]},{"p":["ExpressibleAsReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,512]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]]},{"p":["ExpressibleAsSequenceExpr","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,582]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to `ExpressibleAsTupleExprElement`."},{"p":["ExpressibleAsSequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsSuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,513]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]]},{"p":["ExpressibleAsSuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,514]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]]},{"p":["ExpressibleAsTuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsVariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,515]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]]},{"p":["ExpressibleAsVariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsVersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,516]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]]},{"p":["ExpressibleAsVersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["PrecedenceGroupAssignment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssignment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,671]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssignment`."},{"p":["PrimaryAssociatedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrimaryAssociatedTypeList","buildPrimaryAssociatedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PrimaryAssociatedTypeListSyntax",18,3079]],"s":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["PrimaryAssociatedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,672]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`."},{"p":["CompositionTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CompositionTypeElementList","buildCompositionTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["CompositionTypeElementListSyntax",18,3080]],"s":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["CompositionTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,673]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`."},{"p":["DifferentiabilityParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DifferentiabilityParamList","buildDifferentiabilityParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DifferentiabilityParamListSyntax",18,3081]],"s":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["DifferentiabilityParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,674]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`."},{"p":["ExpressibleAsAccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,517]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]]},{"p":["ExpressibleAsAccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,519]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]]},{"p":["ExpressibleAsCatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,520]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]]},{"p":["ExpressibleAsCodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,586]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`."},{"p":["ExpressibleAsDeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDeclBuildable","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,613]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to `ExpressibleAsMemberDeclListItem`."},{"p":["ExpressibleAsDeclBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsExprBuildable","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,701]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`."},{"p":["ExpressibleAsExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,522]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]]},{"p":["ExpressibleAsExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,523]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]]},{"p":["ExpressibleAsInheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,595]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`."},{"p":["ExpressibleAsIsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,524]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]]},{"p":["ExpressibleAsIsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,525]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]]},{"p":["ExpressibleAsObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`."},{"p":["ExpressibleAsPoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,526]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]]},{"p":["ExpressibleAsPoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,527]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]]},{"p":["ExpressibleAsPoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsStringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,528]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]]},{"p":["ExpressibleAsStringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,529]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]]},{"p":["ExpressibleAsSubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,530]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]]},{"p":["ExpressibleAsSubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,511]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to `ExpressibleAsReturnClause`."},{"p":["ExpressibleAsTypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,531]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]]},{"p":["ExpressibleAsTypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["OperatorPrecedenceAndTypes","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["OperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorPrecedenceAndTypes` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,675]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]],"d":"Conformance to `ExpressibleAsOperatorPrecedenceAndTypes`."},{"p":["PrecedenceGroupNameElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,676]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameElement`."},{"p":["AvailabilityLabeledArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityLabeledArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,677]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityLabeledArgument`."},{"p":["BackDeployAttributeSpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["BackDeployAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployAttributeSpecList` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BackDeployAttributeSpecList","createBackDeployAttributeSpecList()"],"f":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18,678]],"s":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsBackDeployAttributeSpecList`."},{"p":["ExpressibleAsAssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,532]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]]},{"p":["ExpressibleAsAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,533]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]]},{"p":["ExpressibleAsAttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,534]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]]},{"p":["ExpressibleAsDictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsDictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,535]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]]},{"p":["ExpressibleAsDictionaryType","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,546]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["ExpressibleAsDictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,536]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]]},{"p":["ExpressibleAsExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,537]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]]},{"p":["ExpressibleAsIdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsIdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,538]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,539]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]]},{"p":["ExpressibleAsIfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,611]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`."},{"p":["ExpressibleAsMemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,540]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]]},{"p":["ExpressibleAsMemberDeclList","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,558]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to `ExpressibleAsMemberDeclBlock`."},{"p":["ExpressibleAsNilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,541]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]]},{"p":["ExpressibleAsNilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,542]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]]},{"p":["ExpressibleAsPatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,614]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`."},{"p":["ExpressibleAsPoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,543]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]]},{"p":["ExpressibleAsPoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,544]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]]},{"p":["ExpressibleAsSpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,545]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]]},{"p":["ExpressibleAsTypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,546]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]]},{"p":["ExpressibleAsTypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["PrimaryAssociatedTypeClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrimaryAssociatedTypeClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedTypeClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrimaryAssociatedTypeClause","createPrimaryAssociatedTypeClause()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18,679]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeClause`."},{"p":["SpecializeAttributeSpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["SpecializeAttributeSpecList","buildSpecializeAttributeSpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["SpecializeAttributeSpecListSyntax",18,3082]],"s":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SpecializeAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeAttributeSpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,680]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`."},{"p":["ExpressibleAsCatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,547]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]]},{"p":["ExpressibleAsCompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,548]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]]},{"p":["ExpressibleAsCompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsCustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,549]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]]},{"p":["ExpressibleAsCustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,550]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]]},{"p":["ExpressibleAsDeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,551]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]]},{"p":["ExpressibleAsEnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,620]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`."},{"p":["ExpressibleAsEnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,552]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]]},{"p":["ExpressibleAsEnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsFallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,553]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]]},{"p":["ExpressibleAsFallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,554]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]]},{"p":["ExpressibleAsForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,555]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]]},{"p":["ExpressibleAsGenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,621]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`."},{"p":["ExpressibleAsInitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,556]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]]},{"p":["ExpressibleAsInitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,557]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,558]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]]},{"p":["ExpressibleAsMemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,559]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsOptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,560]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]]},{"p":["ExpressibleAsOptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,561]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]]},{"p":["ExpressibleAsParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,562]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]]},{"p":["ExpressibleAsPoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsPoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,563]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]]},{"p":["ExpressibleAsPoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,564]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,565]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,566]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsWildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,567]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]]},{"p":["ExpressibleAsWildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ImplementsAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplementsAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,681]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]],"d":"Conformance to `ExpressibleAsImplementsAttributeArguments`."},{"p":["NamedAttributeStringArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["NamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NamedAttributeStringArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,682]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]],"d":"Conformance to `ExpressibleAsNamedAttributeStringArgument`."},{"p":["PrecedenceGroupAssociativity","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssociativity` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssociativity`."},{"p":["PrecedenceGroupAttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrecedenceGroupAttributeList","buildPrecedenceGroupAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["PrecedenceGroupAttributeListSyntax",18,3083]],"s":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["PrecedenceGroupAttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,684]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`."},{"p":["DifferentiabilityParamsClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamsClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,685]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamsClause`."},{"p":["ExpressibleAsArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,568]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]]},{"p":["ExpressibleAsClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,569]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]]},{"p":["ExpressibleAsClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,570]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]]},{"p":["ExpressibleAsClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,571]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]]},{"p":["ExpressibleAsConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,632]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`."},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,572]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]]},{"p":["ExpressibleAsDeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,634]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`."},{"p":["ExpressibleAsFloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,573]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]]},{"p":["ExpressibleAsFloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,574]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]]},{"p":["ExpressibleAsFunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionCallExpr","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,521]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsFunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,575]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]]},{"p":["ExpressibleAsFunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,576]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]]},{"p":["ExpressibleAsGenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,635]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`."},{"p":["ExpressibleAsMemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,577]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]]},{"p":["ExpressibleAsMemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,578]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,579]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,580]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]]},{"p":["ExpressibleAsPoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,581]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,582]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]]},{"p":["ExpressibleAsTupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,639]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`."},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,583]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]]},{"p":["ExpressibleAsTupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,640]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`."},{"p":["AvailabilityVersionRestriction","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityVersionRestriction` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,686]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]],"d":"Conformance to `ExpressibleAsAvailabilityVersionRestriction`."},{"p":["ExpressibleAsAccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,584]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]]},{"p":["ExpressibleAsAccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,585]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]]},{"p":["ExpressibleAsAvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,586]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,712]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to `ExpressibleAsCodeBlock`."},{"p":["ExpressibleAsDeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,587]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]]},{"p":["ExpressibleAsDeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,588]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,589]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]]},{"p":["ExpressibleAsDictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,643]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`."},{"p":["ExpressibleAsExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,590]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]]},{"p":["ExpressibleAsExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,591]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]]},{"p":["ExpressibleAsExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,592]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]]},{"p":["ExpressibleAsFunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,646]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`."},{"p":["ExpressibleAsFunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,593]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]]},{"p":["ExpressibleAsFunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,594]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]]},{"p":["ExpressibleAsIdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsInheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,595]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]]},{"p":["ExpressibleAsInitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,596]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]]},{"p":["ExpressibleAsInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,597]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,598]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,507]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`."},{"p":["ExpressibleAsObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,599]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]]},{"p":["ExpressibleAsObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,600]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,601]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsQualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,602]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]]},{"p":["ExpressibleAsQualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,603]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]]},{"p":["ExpressibleAsStringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,687]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElement`."},{"p":["ExpressibleAsAssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,604]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]]},{"p":["ExpressibleAsAssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,605]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,606]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,607]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]]},{"p":["ExpressibleAsClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,654]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`."},{"p":["ExpressibleAsElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,608]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]]},{"p":["ExpressibleAsElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,609]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]]},{"p":["ExpressibleAsGenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,659]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`."},{"p":["ExpressibleAsGenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,610]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]]},{"p":["ExpressibleAsGenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,611]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,612]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,613]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]]},{"p":["ExpressibleAsMemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,540]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`."},{"p":["ExpressibleAsPatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,614]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,615]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,616]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,617]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ImplicitlyUnwrappedOptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ImplicitlyUnwrappedOptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,688]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]],"d":"Conformance to `ExpressibleAsImplicitlyUnwrappedOptionalType`."},{"p":["DifferentiableAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiableAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,689]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDifferentiableAttributeArguments`."},{"p":["ExpressibleAsAccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,618]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]]},{"p":["ExpressibleAsAccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,619]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]]},{"p":["ExpressibleAsAccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,482]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`."},{"p":["ExpressibleAsEnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,620]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]]},{"p":["ExpressibleAsGenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,621]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,622]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,623]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]]},{"p":["ExpressibleAsPoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,624]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,625]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,626]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,627]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]]},{"p":["ExpressibleAsTuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,666]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`."},{"p":["ExpressibleAsValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,628]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]]},{"p":["ExpressibleAsValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,188]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,629]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]]},{"p":["ExpressibleAsAvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,630]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`."},{"p":["ExpressibleAsAvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,630]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]]},{"p":["ExpressibleAsClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,631]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]]},{"p":["ExpressibleAsClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,632]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]]},{"p":["ExpressibleAsConstrainedSugarType","createConstrainedSugarType()"],"f":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18,633]],"s":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18]]},{"p":["ExpressibleAsConstrainedSugarType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,634]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]]},{"p":["ExpressibleAsGenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,635]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,636]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,637]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,638]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,546]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to `ExpressibleAsTypeExpr`."},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,639]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]]},{"p":["ExpressibleAsTupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,640]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]]},{"p":["ExpressibleAsAvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,641]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]]},{"p":["ExpressibleAsAvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployVersionList","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,642]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]]},{"p":["ExpressibleAsDictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,643]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,644]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,645]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,646]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]]},{"p":["ExpressibleAsGenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,647]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]]},{"p":["ExpressibleAsGenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,648]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,672]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`."},{"p":["ExpressibleAsStringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,649]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,650]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,651]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,652]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]]},{"p":["ExpressibleAsTypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,653]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["MultipleTrailingClosureElementList","buildMultipleTrailingClosureElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["MultipleTrailingClosureElementListSyntax",18,3084]],"s":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["MultipleTrailingClosureElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,690]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`."},{"p":["ExpressibleAsClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,654]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,655]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]]},{"p":["ExpressibleAsCompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,673]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`."},{"p":["ExpressibleAsConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,656]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]]},{"p":["ExpressibleAsConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,657]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,674]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`."},{"p":["ExpressibleAsGenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,658]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]]},{"p":["ExpressibleAsGenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,659]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,660]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,661]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,662]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,663]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,665]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,666]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,667]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,668]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,669]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployVersionArgument","createBackDeployVersionArgument()"],"f":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18,670]],"s":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18]]},{"p":["ExpressibleAsBackDeployVersionArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployVersionArgument","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,642]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionList`."},{"p":["ExpressibleAsPrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,671]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]]},{"p":["ExpressibleAsPrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,672]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]]},{"p":["ExpressibleAsCompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,673]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]]},{"p":["ExpressibleAsDifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,674]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,675]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,676]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`."},{"p":["DerivativeRegistrationAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DerivativeRegistrationAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,691]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDerivativeRegistrationAttributeArguments`."},{"p":["ExpressibleAsAvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,677]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]]},{"p":["ExpressibleAsAvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployAttributeSpecList","createBackDeployAttributeSpecList()"],"f":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18,678]],"s":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18]]},{"p":["ExpressibleAsBackDeployAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause","createPrimaryAssociatedTypeClause()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18,679]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,680]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,681]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,682]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,684]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,685]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,686]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,687]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,690]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`."},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,688]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,689]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,690]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,691]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["AsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,692]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]],"d":"Conformance to `ExpressibleAsAsExpr`."},{"p":["DoStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DoStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DoStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DoStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,693]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]],"d":"Conformance to `ExpressibleAsDoStmt`."},{"p":["IfStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["IfStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`IfStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,695]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]],"d":"Conformance to `ExpressibleAsIfStmt`."},{"p":["IsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,696]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]],"d":"Conformance to `ExpressibleAsIsExpr`."},{"p":["TryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,697]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]],"d":"Conformance to `ExpressibleAsTryExpr`."},{"p":["CaseItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,698]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]],"d":"Conformance to `ExpressibleAsCaseItem`."},{"p":["CaseItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["CaseItem",18,698]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["CaseItem",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["DeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,699]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]],"d":"Conformance to `ExpressibleAsDeclName`."},{"p":["EnumDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["EnumDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,700]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]],"d":"Conformance to `ExpressibleAsEnumDecl`."},{"p":["ExprList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ExprList","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprListSyntax",18,3091]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprListSyntax",18]]},{"p":["ExprList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExprList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,701]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`."},{"p":["ObjcName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ObjcName","buildObjcName(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ObjcNameSyntax",18,3092]],"s":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjcNameSyntax",18]]},{"p":["ObjcName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcName` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`."},{"p":["TypeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TypeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TypeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to `ExpressibleAsTypeExpr`."},{"p":["ArrayExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ArrayExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrayExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,704]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]],"d":"Conformance to `ExpressibleAsArrayExpr`."},{"p":["ArrayType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ArrayType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ArrayType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,705]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]],"d":"Conformance to `ExpressibleAsArrayType`."},{"p":["ArrowExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ArrowExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrowExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrowExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,706]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]],"d":"Conformance to `ExpressibleAsArrowExpr`."},{"p":["Attribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["Attribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`Attribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["Attribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,707]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]],"d":"Conformance to `ExpressibleAsAttribute`."},{"p":["AwaitExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AwaitExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AwaitExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AwaitExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,708]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]],"d":"Conformance to `ExpressibleAsAwaitExpr`."},{"p":["BreakStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["BreakStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BreakStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`BreakStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,709]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]],"d":"Conformance to `ExpressibleAsBreakStmt`."},{"p":["CatchItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,710]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]],"d":"Conformance to `ExpressibleAsCatchItem`."},{"p":["CatchItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3160],[") -> ",17],["CatchItem",18,710]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["CatchItem",18]],"d":"Conformance to `HasTrailingComma`."},{"p":["ClassDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["DeclSyntax",18,3085]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ClassDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,183]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ClassDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,711]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]],"d":"Conformance to `ExpressibleAsClassDecl`."},{"p":["CodeBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,712]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to `ExpressibleAsCodeBlock`."},{"p":["DeferStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DeferStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeferStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeferStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,713]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]],"d":"Conformance to `ExpressibleAsDeferStmt`."},{"p":["ElseBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,714]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]],"d":"Conformance to `ExpressibleAsElseBlock`."},{"p":["ForInStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ForInStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForInStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ForInStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,715]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]],"d":"Conformance to `ExpressibleAsForInStmt`."},{"p":["GuardStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["GuardStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GuardStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`GuardStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,716]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]],"d":"Conformance to `ExpressibleAsGuardStmt`."},{"p":["InOutExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["InOutExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InOutExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`InOutExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,717]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]],"d":"Conformance to `ExpressibleAsInOutExpr`."},{"p":["ThrowStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ThrowStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ThrowStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ThrowStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,718]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]],"d":"Conformance to `ExpressibleAsThrowStmt`."},{"p":["TokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TokenList","buildTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TokenListSyntax",18,3093]],"s":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TokenListSyntax",18]]},{"p":["TokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,719]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to `ExpressibleAsTokenList`."},{"p":["TupleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["ExprSyntax",18,3086]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TupleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,184]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TupleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,720]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]],"d":"Conformance to `ExpressibleAsTupleExpr`."},{"p":["TupleType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["TypeSyntax",18,3088]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["TupleType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,186]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`TupleType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,721]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]],"d":"Conformance to `ExpressibleAsTupleType`."},{"p":["WhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["WhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`WhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,722]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]],"d":"Conformance to `ExpressibleAsWhileStmt`."},{"p":["YieldList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["Syntax",18,3094]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["YieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldList` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,723]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]],"d":"Conformance to `ExpressibleAsYieldList`."},{"p":["YieldStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,694],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3154],["? = nil) -> ",17],["StmtSyntax",18,3087]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["YieldStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,182]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,185]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`YieldStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,724]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]],"d":"Conformance to `ExpressibleAsYieldStmt`."},{"p":["AccessPathBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessPathComponent",18,366]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessPathBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessPath",18,482]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessPathBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessPathComponent",18,366],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AccessorListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessorDecl",18,237]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessorListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessorList",18,495]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessorListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessorDecl",18,237],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CaseItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCaseItem",18,198]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CaseItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CaseItemList",18,497]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CaseItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCaseItem",18,198],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ModifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclModifier",18,243]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ModifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ModifierList",18,506]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ModifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclModifier",18,243],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjCSelectorBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjCSelectorPiece",18,345]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjCSelectorBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjCSelector",18,507]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjCSelectorBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjCSelectorPiece",18,345],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AttributeList",18,519]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,178],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchItem",18,210]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchItemList",18,520]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchItem",18,210],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IdentifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3089]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IdentifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IdentifierList",18,538]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IdentifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3089],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MemberDeclListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMemberDeclListItem",18,360]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MemberDeclListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MemberDeclList",18,540]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MemberDeclListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMemberDeclListItem",18,360],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SwitchCaseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SwitchCaseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SwitchCaseList",18,545]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SwitchCaseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,178],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchClause",18,232]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchClauseList",18,547]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchClause",18,232],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ArrayElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsArrayElement",18,239]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ArrayElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ArrayElementList",18,568]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ArrayElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsArrayElement",18,239],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureParam",18,241]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureParamList",18,569]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureParam",18,241],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CodeBlockItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCodeBlockItem",18,263]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CodeBlockItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CodeBlockItemList",18,586]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CodeBlockItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCodeBlockItem",18,263],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["InheritedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsInheritedType",18,267]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["InheritedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["InheritedTypeList",18,595]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["InheritedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsInheritedType",18,267],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["NonEmptyTokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3089]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["NonEmptyTokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["NonEmptyTokenList",18,597]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["NonEmptyTokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3089],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IfConfigClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsIfConfigClause",18,285]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IfConfigClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IfConfigClauseList",18,611]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IfConfigClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsIfConfigClause",18,285],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PatternBindingListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPatternBinding",18,288]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PatternBindingListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PatternBindingList",18,614]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PatternBindingListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPatternBinding",18,288],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["EnumCaseElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsEnumCaseElement",18,297]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["EnumCaseElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["EnumCaseElementList",18,620]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["EnumCaseElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsEnumCaseElement",18,297],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericArgument",18,301]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericArgumentList",18,621]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericArgument",18,301],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AvailabilitySpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAvailabilityArgument",18,376]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AvailabilitySpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AvailabilitySpecList",18,630]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AvailabilitySpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAvailabilityArgument",18,376],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ConditionElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsConditionElement",18,317]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ConditionElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ConditionElementList",18,632]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ConditionElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsConditionElement",18,317],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DeclNameArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclNameArgument",18,318]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DeclNameArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DeclNameArgumentList",18,634]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DeclNameArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclNameArgument",18,318],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericParameter",18,322]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericParameterList",18,635]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericParameter",18,322],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleExprElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleExprElement",18,329]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleExprElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleExprElementList",18,639]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleExprElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleExprElement",18,329],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleTypeElement",18,330]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleTypeElementList",18,640]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleTypeElement",18,330],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["BackDeployVersionListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsBackDeployVersionArgument",18,417]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["BackDeployVersionListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["BackDeployVersionList",18,642]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["BackDeployVersionListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsBackDeployVersionArgument",18,417],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DictionaryElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDictionaryElement",18,336]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DictionaryElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DictionaryElementList",18,643]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DictionaryElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDictionaryElement",18,336],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["FunctionParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsFunctionParameter",18,339]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["FunctionParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["FunctionParameterList",18,646]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["FunctionParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsFunctionParameter",18,339],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["StringLiteralSegmentsBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["StringLiteralSegmentsBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["StringLiteralSegments",18,649]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["StringLiteralSegmentsBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,178],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureCaptureItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureCaptureItem",18,354]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureCaptureItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureCaptureItemList",18,654]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureCaptureItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureCaptureItem",18,354],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericRequirementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericRequirement",18,356]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericRequirementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericRequirementList",18,659]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericRequirementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericRequirement",18,356],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupNameListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrecedenceGroupNameElement",18,423]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupNameListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupNameList",18,664]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupNameListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrecedenceGroupNameElement",18,423],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TuplePatternElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTuplePatternElement",18,374]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TuplePatternElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TuplePatternElementList",18,666]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TuplePatternElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTuplePatternElement",18,374],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrimaryAssociatedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrimaryAssociatedType",18,395]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrimaryAssociatedTypeList",18,672]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrimaryAssociatedType",18,395],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CompositionTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCompositionTypeElement",18,402]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CompositionTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CompositionTypeElementList",18,673]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CompositionTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCompositionTypeElement",18,402],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DifferentiabilityParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDifferentiabilityParam",18,404]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DifferentiabilityParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DifferentiabilityParamList",18,674]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DifferentiabilityParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDifferentiabilityParam",18,404],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SpecializeAttributeSpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SpecializeAttributeSpecList",18,680]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,178],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupAttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,178]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupAttributeList",18,684]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,178],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MultipleTrailingClosureElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMultipleTrailingClosureElement",18,434]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MultipleTrailingClosureElementList",18,690]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMultipleTrailingClosureElement",18,434],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ExprListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsExprBuildable",18,265]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ExprListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ExprList",18,701]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ExprListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsExprBuildable",18,265],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjcNameBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjcNamePiece",18,269]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjcNameBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjcName",18,702]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjcNameBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjcNamePiece",18,269],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3089]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TokenList",18,719]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3089],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."}],"edges":{"conformer":[178,261,[],178,291,[],178,396,[],178,427,[],178,431,[],179,325,[],180,178,[],180,201,[],180,261,[],180,265,[],180,291,[],180,317,[],180,379,[],180,396,[],180,427,[],180,431,[],182,178,[],182,181,[],182,261,[],182,291,[],182,396,[],182,427,[],182,431,[],183,178,[],183,181,[],183,182,[],183,189,[],183,212,[],183,261,[],183,263,[],183,264,[],183,286,[],183,291,[],183,304,[],183,333,[],183,360,[],183,396,[],183,427,[],183,431,[],184,178,[],184,181,[],184,182,[],184,190,[],184,201,[],184,261,[],184,265,[],184,291,[],184,317,[],184,379,[],184,396,[],184,427,[],184,431,[],185,178,[],185,181,[],185,182,[],185,191,[],185,212,[],185,261,[],185,263,[],185,272,[],185,291,[],185,333,[],185,396,[],185,427,[],185,431,[],186,178,[],186,181,[],186,182,[],186,192,[],186,254,[],186,261,[],186,276,[],186,291,[],186,396,[],186,427,[],186,431,[],188,178,[],188,181,[],188,182,[],188,197,[],188,261,[],188,291,[],188,325,[],188,396,[],188,427,[],188,431,[],189,181,[],190,181,[],191,181,[],192,181,[],193,178,[],193,212,[],193,261,[],193,263,[],193,272,[],193,291,[],193,333,[],193,396,[],193,427,[],193,431,[],194,178,[],194,212,[],194,261,[],194,263,[],194,272,[],194,291,[],194,333,[],194,396,[],194,427,[],194,431,[],195,178,[],195,201,[],195,261,[],195,265,[],195,291,[],195,317,[],195,379,[],195,396,[],195,427,[],195,431,[],196,178,[],196,201,[],196,261,[],196,265,[],196,291,[],196,317,[],196,379,[],196,396,[],196,427,[],196,431,[],197,181,[],198,178,[],198,240,[],198,261,[],198,291,[],198,396,[],198,427,[],198,431,[],199,178,[],199,261,[],199,291,[],199,396,[],199,427,[],199,431,[],200,178,[],200,212,[],200,261,[],200,263,[],200,264,[],200,286,[],200,291,[],200,304,[],200,333,[],200,360,[],200,396,[],200,427,[],200,431,[],201,178,[],201,261,[],201,291,[],201,317,[],201,379,[],201,396,[],201,427,[],201,431,[],203,178,[],203,201,[],203,261,[],203,265,[],203,291,[],203,317,[],203,379,[],203,396,[],203,427,[],203,431,[],204,178,[],204,201,[],204,261,[],204,265,[],204,291,[],204,317,[],204,379,[],204,396,[],204,427,[],204,431,[],205,178,[],205,254,[],205,261,[],205,276,[],205,291,[],205,292,[],205,396,[],205,427,[],205,431,[],206,178,[],206,201,[],206,261,[],206,265,[],206,291,[],206,317,[],206,379,[],206,396,[],206,427,[],206,431,[],207,178,[],207,261,[],207,291,[],207,396,[],207,427,[],207,431,[],208,178,[],208,201,[],208,261,[],208,265,[],208,291,[],208,317,[],208,379,[],208,396,[],208,427,[],208,431,[],209,178,[],209,212,[],209,261,[],209,263,[],209,272,[],209,291,[],209,333,[],209,396,[],209,427,[],209,431,[],210,178,[],210,261,[],210,262,[],210,291,[],210,396,[],210,427,[],210,431,[],211,178,[],211,212,[],211,261,[],211,263,[],211,264,[],211,286,[],211,291,[],211,304,[],211,333,[],211,360,[],211,396,[],211,427,[],211,431,[],212,178,[],212,261,[],212,291,[],212,396,[],212,427,[],212,431,[],213,178,[],213,212,[],213,261,[],213,263,[],213,272,[],213,291,[],213,333,[],213,396,[],213,427,[],213,431,[],214,178,[],214,261,[],214,291,[],214,396,[],214,427,[],214,431,[],215,178,[],215,212,[],215,261,[],215,263,[],215,272,[],215,291,[],215,333,[],215,396,[],215,427,[],215,431,[],216,178,[],216,212,[],216,261,[],216,263,[],216,272,[],216,291,[],216,333,[],216,396,[],216,427,[],216,431,[],217,178,[],217,201,[],217,261,[],217,265,[],217,291,[],217,317,[],217,379,[],217,396,[],217,427,[],217,431,[],218,178,[],218,212,[],218,261,[],218,263,[],218,272,[],218,291,[],218,333,[],218,396,[],218,427,[],218,431,[],220,178,[],220,201,[],220,261,[],220,265,[],220,291,[],220,317,[],220,379,[],220,396,[],220,427,[],220,431,[],221,178,[],221,254,[],221,261,[],221,276,[],221,291,[],221,396,[],221,427,[],221,431,[],222,178,[],222,212,[],222,261,[],222,263,[],222,272,[],222,291,[],222,333,[],222,396,[],222,427,[],222,431,[],223,178,[],223,261,[],223,291,[],223,396,[],223,427,[],223,431,[],224,178,[],224,212,[],224,261,[],224,263,[],224,272,[],224,291,[],224,333,[],224,396,[],224,427,[],224,431,[],226,178,[],226,212,[],226,261,[],226,263,[],226,264,[],226,286,[],226,291,[],226,304,[],226,333,[],226,360,[],226,396,[],226,427,[],226,431,[],227,178,[],227,212,[],227,261,[],227,263,[],227,272,[],227,291,[],227,333,[],227,396,[],227,427,[],227,431,[],228,178,[],228,261,[],228,291,[],228,396,[],228,427,[],228,431,[],229,178,[],229,212,[],229,261,[],229,263,[],229,264,[],229,286,[],229,291,[],229,304,[],229,333,[],229,360,[],229,396,[],229,427,[],229,431,[],230,178,[],230,261,[],230,291,[],230,396,[],230,427,[],230,431,[],231,178,[],231,212,[],231,261,[],231,263,[],231,272,[],231,291,[],231,333,[],231,396,[],231,427,[],231,431,[],232,178,[],232,261,[],232,291,[],232,293,[],232,396,[],232,427,[],232,431,[],233,178,[],233,201,[],233,261,[],233,265,[],233,291,[],233,317,[],233,379,[],233,396,[],233,427,[],233,431,[],234,178,[],234,201,[],234,261,[],234,265,[],234,291,[],234,317,[],234,379,[],234,396,[],234,427,[],234,431,[],235,178,[],235,201,[],235,261,[],235,265,[],235,291,[],235,317,[],235,379,[],235,396,[],235,427,[],235,431,[],236,178,[],236,261,[],236,291,[],236,396,[],236,427,[],236,431,[],237,178,[],237,212,[],237,238,[],237,260,[],237,261,[],237,263,[],237,264,[],237,286,[],237,291,[],237,304,[],237,333,[],237,360,[],237,396,[],237,427,[],237,431,[],238,178,[],238,260,[],238,261,[],238,291,[],238,396,[],238,427,[],238,431,[],239,178,[],239,261,[],239,291,[],239,314,[],239,396,[],239,427,[],239,431,[],241,178,[],241,261,[],241,291,[],241,315,[],241,396,[],241,427,[],241,431,[],242,178,[],242,212,[],242,261,[],242,263,[],242,272,[],242,291,[],242,333,[],242,396,[],242,427,[],242,431,[],243,178,[],243,249,[],243,261,[],243,291,[],243,396,[],243,427,[],243,431,[],244,178,[],244,212,[],244,261,[],244,263,[],244,264,[],244,286,[],244,291,[],244,304,[],244,333,[],244,360,[],244,396,[],244,427,[],244,431,[],245,178,[],245,212,[],245,261,[],245,263,[],245,264,[],245,286,[],245,291,[],245,304,[],245,333,[],245,360,[],245,396,[],245,427,[],245,431,[],246,178,[],246,254,[],246,261,[],246,276,[],246,291,[],246,396,[],246,427,[],246,431,[],247,178,[],247,212,[],247,261,[],247,263,[],247,264,[],247,286,[],247,291,[],247,304,[],247,333,[],247,360,[],247,396,[],247,427,[],247,431,[],248,178,[],248,254,[],248,261,[],248,276,[],248,291,[],248,396,[],248,427,[],248,431,[],251,178,[],251,212,[],251,261,[],251,263,[],251,264,[],251,286,[],251,291,[],251,304,[],251,333,[],251,360,[],251,396,[],251,427,[],251,431,[],252,178,[],252,254,[],252,261,[],252,276,[],252,291,[],252,396,[],252,427,[],252,431,[],253,178,[],253,212,[],253,261,[],253,263,[],253,264,[],253,286,[],253,291,[],253,304,[],253,333,[],253,360,[],253,396,[],253,427,[],253,431,[],254,178,[],254,261,[],254,291,[],254,396,[],254,427,[],254,431,[],255,178,[],255,201,[],255,212,[],255,261,[],255,263,[],255,265,[],255,291,[],255,317,[],255,329,[],255,333,[],255,379,[],255,386,[],255,396,[],255,427,[],255,431,[],256,178,[],256,201,[],256,261,[],256,265,[],256,291,[],256,317,[],256,379,[],256,396,[],256,427,[],256,431,[],257,325,[],258,178,[],258,212,[],258,261,[],258,263,[],258,264,[],258,286,[],258,291,[],258,304,[],258,333,[],258,360,[],258,396,[],258,427,[],258,431,[],259,178,[],259,261,[],259,291,[],259,396,[],259,427,[],259,431,[],260,178,[],260,261,[],260,291,[],260,396,[],260,427,[],260,431,[],263,178,[],263,212,[],263,261,[],263,291,[],263,333,[],263,396,[],263,427,[],263,431,[],264,178,[],264,212,[],264,261,[],264,263,[],264,286,[],264,291,[],264,304,[],264,333,[],264,360,[],264,396,[],264,427,[],264,431,[],265,178,[],265,201,[],265,261,[],265,291,[],265,317,[],265,379,[],265,396,[],265,427,[],265,431,[],266,178,[],266,212,[],266,261,[],266,263,[],266,264,[],266,286,[],266,291,[],266,304,[],266,333,[],266,360,[],266,396,[],266,427,[],266,431,[],267,178,[],267,261,[],267,291,[],267,342,[],267,396,[],267,427,[],267,431,[],268,325,[],269,178,[],269,202,[],269,261,[],269,291,[],269,396,[],269,427,[],269,431,[],270,178,[],270,201,[],270,261,[],270,265,[],270,291,[],270,317,[],270,379,[],270,396,[],270,427,[],270,431,[],271,178,[],271,201,[],271,261,[],271,265,[],271,291,[],271,317,[],271,379,[],271,396,[],271,427,[],271,431,[],272,178,[],272,212,[],272,261,[],272,263,[],272,291,[],272,333,[],272,396,[],272,427,[],272,431,[],273,178,[],273,261,[],273,291,[],273,396,[],273,427,[],273,431,[],274,178,[],274,212,[],274,261,[],274,263,[],274,264,[],274,286,[],274,291,[],274,304,[],274,333,[],274,360,[],274,396,[],274,427,[],274,431,[],275,178,[],275,201,[],275,261,[],275,265,[],275,291,[],275,317,[],275,379,[],275,396,[],275,427,[],275,431,[],276,178,[],276,254,[],276,261,[],276,291,[],276,396,[],276,427,[],276,431,[],277,178,[],277,212,[],277,261,[],277,263,[],277,264,[],277,286,[],277,291,[],277,304,[],277,333,[],277,360,[],277,396,[],277,427,[],277,431,[],278,178,[],278,201,[],278,261,[],278,265,[],278,291,[],278,317,[],278,379,[],278,396,[],278,427,[],278,431,[],279,178,[],279,254,[],279,261,[],279,276,[],279,291,[],279,396,[],279,427,[],279,431,[],280,178,[],280,201,[],280,261,[],280,265,[],280,291,[],280,317,[],280,379,[],280,396,[],280,427,[],280,431,[],281,178,[],281,254,[],281,261,[],281,276,[],281,291,[],281,292,[],281,396,[],281,427,[],281,431,[],282,178,[],282,212,[],282,261,[],282,263,[],282,272,[],282,291,[],282,333,[],282,396,[],282,427,[],282,431,[],283,178,[],283,201,[],283,261,[],283,265,[],283,291,[],283,317,[],283,379,[],283,396,[],283,427,[],283,431,[],285,178,[],285,261,[],285,291,[],285,358,[],285,396,[],285,427,[],285,431,[],286,178,[],286,261,[],286,291,[],286,304,[],286,396,[],286,427,[],286,431,[],287,178,[],287,201,[],287,261,[],287,265,[],287,291,[],287,317,[],287,379,[],287,396,[],287,427,[],287,431,[],288,178,[],288,261,[],288,291,[],288,361,[],288,396,[],288,427,[],288,431,[],289,178,[],289,212,[],289,261,[],289,263,[],289,264,[],289,286,[],289,291,[],289,304,[],289,333,[],289,360,[],289,396,[],289,427,[],289,431,[],290,178,[],290,201,[],290,261,[],290,265,[],290,291,[],290,317,[],290,379,[],290,396,[],290,427,[],290,431,[],292,178,[],292,261,[],292,291,[],292,396,[],292,427,[],292,431,[],294,178,[],294,254,[],294,261,[],294,276,[],294,291,[],294,396,[],294,427,[],294,431,[],295,178,[],295,261,[],295,291,[],295,396,[],295,427,[],295,431,[],296,178,[],296,212,[],296,261,[],296,263,[],296,272,[],296,291,[],296,333,[],296,396,[],296,427,[],296,431,[],297,178,[],297,261,[],297,291,[],297,367,[],297,396,[],297,427,[],297,431,[],298,325,[],299,178,[],299,212,[],299,261,[],299,263,[],299,272,[],299,291,[],299,333,[],299,396,[],299,427,[],299,431,[],300,178,[],300,201,[],300,261,[],300,265,[],300,291,[],300,317,[],300,379,[],300,396,[],300,427,[],300,431,[],301,178,[],301,261,[],301,291,[],301,368,[],301,396,[],301,427,[],301,431,[],302,178,[],302,212,[],302,261,[],302,263,[],302,264,[],302,286,[],302,291,[],302,304,[],302,333,[],302,360,[],302,396,[],302,427,[],302,431,[],303,178,[],303,201,[],303,261,[],303,265,[],303,291,[],303,317,[],303,379,[],303,396,[],303,427,[],303,431,[],304,178,[],304,261,[],304,291,[],304,396,[],304,427,[],304,431,[],305,178,[],305,201,[],305,261,[],305,265,[],305,291,[],305,317,[],305,379,[],305,396,[],305,427,[],305,431,[],306,325,[],307,178,[],307,261,[],307,291,[],307,396,[],307,427,[],307,431,[],308,178,[],308,212,[],308,261,[],308,263,[],308,272,[],308,291,[],308,333,[],308,396,[],308,427,[],308,431,[],309,178,[],309,201,[],309,261,[],309,265,[],309,291,[],309,317,[],309,379,[],309,396,[],309,427,[],309,431,[],310,178,[],310,201,[],310,261,[],310,265,[],310,291,[],310,317,[],310,379,[],310,396,[],310,427,[],310,431,[],311,178,[],311,212,[],311,261,[],311,263,[],311,272,[],311,291,[],311,333,[],311,396,[],311,427,[],311,431,[],312,178,[],312,261,[],312,291,[],312,396,[],312,427,[],312,431,[],313,325,[],316,178,[],316,261,[],316,291,[],316,396,[],316,427,[],316,431,[],317,178,[],317,261,[],317,291,[],317,379,[],317,396,[],317,427,[],317,431,[],318,178,[],318,261,[],318,291,[],318,381,[],318,396,[],318,427,[],318,431,[],319,178,[],319,201,[],319,261,[],319,265,[],319,291,[],319,317,[],319,379,[],319,396,[],319,427,[],319,431,[],320,178,[],320,201,[],320,212,[],320,261,[],320,263,[],320,265,[],320,291,[],320,317,[],320,333,[],320,379,[],320,396,[],320,427,[],320,431,[],321,178,[],321,261,[],321,291,[],321,396,[],321,427,[],321,431,[],322,178,[],322,261,[],322,291,[],322,382,[],322,396,[],322,427,[],322,431,[],323,178,[],323,201,[],323,261,[],323,265,[],323,291,[],323,317,[],323,379,[],323,396,[],323,427,[],323,431,[],324,178,[],324,201,[],324,261,[],324,265,[],324,291,[],324,317,[],324,379,[],324,396,[],324,427,[],324,431,[],326,178,[],326,201,[],326,261,[],326,265,[],326,291,[],326,317,[],326,379,[],326,396,[],326,427,[],326,431,[],327,178,[],327,212,[],327,261,[],327,263,[],327,264,[],327,286,[],327,291,[],327,304,[],327,333,[],327,360,[],327,396,[],327,427,[],327,431,[],328,178,[],328,201,[],328,261,[],328,265,[],328,291,[],328,317,[],328,379,[],328,396,[],328,427,[],328,431,[],329,178,[],329,261,[],329,291,[],329,386,[],329,396,[],329,427,[],329,431,[],330,178,[],330,261,[],330,291,[],330,387,[],330,396,[],330,427,[],330,431,[],331,178,[],331,261,[],331,291,[],331,396,[],331,427,[],331,431,[],332,178,[],332,261,[],332,291,[],332,396,[],332,427,[],332,431,[],333,178,[],333,212,[],333,261,[],333,291,[],333,396,[],333,427,[],333,431,[],334,178,[],334,261,[],334,291,[],334,396,[],334,427,[],334,431,[],335,178,[],335,212,[],335,261,[],335,263,[],335,264,[],335,286,[],335,291,[],335,304,[],335,333,[],335,360,[],335,396,[],335,427,[],335,431,[],336,178,[],336,261,[],336,291,[],336,390,[],336,396,[],336,427,[],336,431,[],337,325,[],338,178,[],338,261,[],338,291,[],338,396,[],338,427,[],338,431,[],339,178,[],339,261,[],339,291,[],339,393,[],339,396,[],339,427,[],339,431,[],340,178,[],340,261,[],340,291,[],340,396,[],340,427,[],340,431,[],341,325,[],343,178,[],343,261,[],343,291,[],343,396,[],343,427,[],343,431,[],345,178,[],345,250,[],345,261,[],345,291,[],345,396,[],345,427,[],345,431,[],346,178,[],346,201,[],346,261,[],346,265,[],346,291,[],346,317,[],346,379,[],346,396,[],346,427,[],346,431,[],347,178,[],347,201,[],347,261,[],347,265,[],347,291,[],347,317,[],347,379,[],347,396,[],347,427,[],347,431,[],348,178,[],348,201,[],348,261,[],348,265,[],348,291,[],348,317,[],348,379,[],348,396,[],348,427,[],348,431,[],349,178,[],349,261,[],349,291,[],349,396,[],349,427,[],349,431,[],350,178,[],350,201,[],350,261,[],350,265,[],350,291,[],350,317,[],350,379,[],350,396,[],350,427,[],350,431,[],351,178,[],351,212,[],351,261,[],351,263,[],351,264,[],351,286,[],351,291,[],351,304,[],351,333,[],351,360,[],351,396,[],351,427,[],351,431,[],352,178,[],352,201,[],352,261,[],352,265,[],352,291,[],352,317,[],352,379,[],352,396,[],352,427,[],352,431,[],353,178,[],353,201,[],353,261,[],353,265,[],353,291,[],353,317,[],353,379,[],353,396,[],353,427,[],353,431,[],354,178,[],354,261,[],354,291,[],354,396,[],354,401,[],354,427,[],354,431,[],355,178,[],355,261,[],355,291,[],355,396,[],355,427,[],355,431,[],356,178,[],356,261,[],356,291,[],356,396,[],356,406,[],356,427,[],356,431,[],357,178,[],357,261,[],357,291,[],357,396,[],357,427,[],357,431,[],359,178,[],359,201,[],359,261,[],359,265,[],359,291,[],359,317,[],359,379,[],359,396,[],359,427,[],359,431,[],360,178,[],360,261,[],360,286,[],360,291,[],360,304,[],360,396,[],360,427,[],360,431,[],362,178,[],362,201,[],362,261,[],362,265,[],362,291,[],362,317,[],362,379,[],362,396,[],362,427,[],362,431,[],363,178,[],363,201,[],363,261,[],363,265,[],363,291,[],363,317,[],363,379,[],363,396,[],363,427,[],363,431,[],364,178,[],364,261,[],364,291,[],364,396,[],364,427,[],364,431,[],365,178,[],365,261,[],365,291,[],365,396,[],365,427,[],365,431,[],366,178,[],366,225,[],366,261,[],366,291,[],366,396,[],366,427,[],366,431,[],369,178,[],369,201,[],369,261,[],369,265,[],369,291,[],369,317,[],369,379,[],369,396,[],369,427,[],369,431,[],370,178,[],370,212,[],370,261,[],370,263,[],370,264,[],370,286,[],370,291,[],370,304,[],370,333,[],370,360,[],370,396,[],370,427,[],370,431,[],371,178,[],371,212,[],371,261,[],371,263,[],371,264,[],371,286,[],371,291,[],371,304,[],371,333,[],371,360,[],371,396,[],371,427,[],371,431,[],372,178,[],372,261,[],372,291,[],372,396,[],372,427,[],372,431,[],373,178,[],373,261,[],373,291,[],373,396,[],373,427,[],373,431,[],374,178,[],374,261,[],374,291,[],374,396,[],374,413,[],374,427,[],374,431,[],375,325,[],376,178,[],376,261,[],376,291,[],376,377,[],376,396,[],376,427,[],376,431,[],378,178,[],378,254,[],378,261,[],378,276,[],378,291,[],378,396,[],378,427,[],378,431,[],380,178,[],380,254,[],380,261,[],380,276,[],380,291,[],380,396,[],380,427,[],380,431,[],383,178,[],383,254,[],383,261,[],383,276,[],383,291,[],383,396,[],383,427,[],383,431,[],384,178,[],384,201,[],384,261,[],384,265,[],384,291,[],384,317,[],384,379,[],384,396,[],384,427,[],384,431,[],385,178,[],385,201,[],385,203,[],385,254,[],385,261,[],385,265,[],385,276,[],385,291,[],385,292,[],385,317,[],385,379,[],385,396,[],385,427,[],385,431,[],388,178,[],388,261,[],388,291,[],388,396,[],388,427,[],388,431,[],391,178,[],391,201,[],391,261,[],391,265,[],391,291,[],391,317,[],391,379,[],391,396,[],391,427,[],391,431,[],392,178,[],392,201,[],392,261,[],392,265,[],392,291,[],392,317,[],392,379,[],392,396,[],392,427,[],392,431,[],394,178,[],394,261,[],394,291,[],394,396,[],394,427,[],394,431,[],395,178,[],395,261,[],395,291,[],395,396,[],395,419,[],395,427,[],395,431,[],397,178,[],397,201,[],397,261,[],397,265,[],397,291,[],397,317,[],397,379,[],397,396,[],397,427,[],397,431,[],398,178,[],398,261,[],398,291,[],398,396,[],398,427,[],398,431,[],399,178,[],399,261,[],399,291,[],399,396,[],399,427,[],399,431,[],400,178,[],400,201,[],400,261,[],400,265,[],400,291,[],400,317,[],400,379,[],400,396,[],400,427,[],400,431,[],402,178,[],402,261,[],402,291,[],402,396,[],402,420,[],402,427,[],402,431,[],403,178,[],403,261,[],403,291,[],403,396,[],403,427,[],403,431,[],404,178,[],404,261,[],404,291,[],404,396,[],404,421,[],404,427,[],404,431,[],405,178,[],405,261,[],405,291,[],405,396,[],405,427,[],405,431,[],407,178,[],407,261,[],407,291,[],407,396,[],407,427,[],407,431,[],408,178,[],408,261,[],408,291,[],408,396,[],408,427,[],408,431,[],409,178,[],409,261,[],409,291,[],409,396,[],409,427,[],409,431,[],410,178,[],410,261,[],410,291,[],410,396,[],410,427,[],410,431,[],412,178,[],412,261,[],412,291,[],412,396,[],412,427,[],412,431,[],414,178,[],414,261,[],414,291,[],414,396,[],414,427,[],414,431,[],415,178,[],415,261,[],415,291,[],415,396,[],415,427,[],415,431,[],416,178,[],416,261,[],416,291,[],416,396,[],416,427,[],416,431,[],417,178,[],417,261,[],417,291,[],417,389,[],417,396,[],417,427,[],417,431,[],418,178,[],418,261,[],418,291,[],418,396,[],418,427,[],418,431,[],422,178,[],422,261,[],422,291,[],422,396,[],422,427,[],422,431,[],423,178,[],423,261,[],423,291,[],423,396,[],423,411,[],423,427,[],423,431,[],424,178,[],424,261,[],424,291,[],424,396,[],424,427,[],424,431,[],425,178,[],425,261,[],425,291,[],425,396,[],425,427,[],425,431,[],426,178,[],426,261,[],426,291,[],426,396,[],426,427,[],426,431,[],428,178,[],428,261,[],428,291,[],428,396,[],428,427,[],428,431,[],429,178,[],429,261,[],429,291,[],429,396,[],429,427,[],429,431,[],430,178,[],430,261,[],430,291,[],430,396,[],430,427,[],430,431,[],432,178,[],432,261,[],432,291,[],432,396,[],432,427,[],432,431,[],433,178,[],433,261,[],433,291,[],433,396,[],433,427,[],433,431,[],434,178,[],434,261,[],434,291,[],434,396,[],434,427,[],434,431,[],434,437,[],435,178,[],435,254,[],435,261,[],435,276,[],435,291,[],435,396,[],435,427,[],435,431,[],436,178,[],436,261,[],436,291,[],436,396,[],436,427,[],436,431,[],438,178,[],438,261,[],438,291,[],438,396,[],438,427,[],438,431,[],482,178,[],482,181,[],482,182,[],482,225,[],482,261,[],482,291,[],482,396,[],482,427,[],482,431,[],482,3164,[],483,178,[],483,181,[],483,182,[],483,183,[],483,189,[],483,212,[],483,226,[],483,261,[],483,263,[],483,264,[],483,286,[],483,291,[],483,304,[],483,333,[],483,360,[],483,396,[],483,427,[],483,431,[],484,178,[],484,181,[],484,182,[],484,185,[],484,191,[],484,212,[],484,227,[],484,261,[],484,263,[],484,272,[],484,291,[],484,333,[],484,396,[],484,427,[],484,431,[],485,178,[],485,181,[],485,182,[],485,228,[],485,261,[],485,291,[],485,396,[],485,427,[],485,431,[],486,178,[],486,181,[],486,182,[],486,183,[],486,189,[],486,212,[],486,229,[],486,261,[],486,263,[],486,264,[],486,286,[],486,291,[],486,304,[],486,333,[],486,360,[],486,396,[],486,427,[],486,431,[],487,178,[],487,181,[],487,182,[],487,230,[],487,261,[],487,291,[],487,396,[],487,427,[],487,431,[],488,178,[],488,181,[],488,182,[],488,185,[],488,191,[],488,212,[],488,231,[],488,261,[],488,263,[],488,272,[],488,291,[],488,333,[],488,396,[],488,427,[],488,431,[],489,178,[],489,181,[],489,182,[],489,232,[],489,261,[],489,291,[],489,293,[],489,396,[],489,427,[],489,431,[],490,178,[],490,181,[],490,182,[],490,184,[],490,190,[],490,201,[],490,233,[],490,261,[],490,265,[],490,291,[],490,317,[],490,379,[],490,396,[],490,427,[],490,431,[],491,178,[],491,181,[],491,182,[],491,184,[],491,190,[],491,201,[],491,234,[],491,261,[],491,265,[],491,291,[],491,317,[],491,379,[],491,396,[],491,427,[],491,431,[],492,178,[],492,181,[],492,182,[],492,184,[],492,190,[],492,201,[],492,235,[],492,261,[],492,265,[],492,291,[],492,317,[],492,379,[],492,396,[],492,427,[],492,431,[],493,178,[],493,181,[],493,182,[],493,236,[],493,261,[],493,291,[],493,396,[],493,427,[],493,431,[],494,178,[],494,181,[],494,182,[],494,183,[],494,189,[],494,212,[],494,237,[],494,238,[],494,260,[],494,261,[],494,263,[],494,264,[],494,286,[],494,291,[],494,304,[],494,333,[],494,360,[],494,396,[],494,427,[],494,431,[],495,178,[],495,181,[],495,182,[],495,238,[],495,260,[],495,261,[],495,291,[],495,396,[],495,427,[],495,431,[],495,3164,[],496,178,[],496,181,[],496,182,[],496,187,[],496,239,[],496,261,[],496,291,[],496,314,[],496,396,[],496,427,[],496,431,[],497,178,[],497,181,[],497,182,[],497,240,[],497,261,[],497,291,[],497,396,[],497,427,[],497,431,[],497,3164,[],498,178,[],498,181,[],498,182,[],498,187,[],498,241,[],498,261,[],498,291,[],498,315,[],498,396,[],498,427,[],498,431,[],499,178,[],499,181,[],499,182,[],499,185,[],499,191,[],499,212,[],499,242,[],499,261,[],499,263,[],499,272,[],499,291,[],499,333,[],499,396,[],499,427,[],499,431,[],500,178,[],500,181,[],500,182,[],500,243,[],500,249,[],500,261,[],500,291,[],500,396,[],500,427,[],500,431,[],501,178,[],501,181,[],501,182,[],501,183,[],501,189,[],501,212,[],501,244,[],501,261,[],501,263,[],501,264,[],501,286,[],501,291,[],501,304,[],501,333,[],501,360,[],501,396,[],501,427,[],501,431,[],502,178,[],502,181,[],502,182,[],502,183,[],502,189,[],502,212,[],502,245,[],502,261,[],502,263,[],502,264,[],502,286,[],502,291,[],502,304,[],502,333,[],502,360,[],502,396,[],502,427,[],502,431,[],503,178,[],503,181,[],503,182,[],503,186,[],503,192,[],503,246,[],503,254,[],503,261,[],503,276,[],503,291,[],503,396,[],503,427,[],503,431,[],504,178,[],504,181,[],504,182,[],504,183,[],504,189,[],504,212,[],504,247,[],504,261,[],504,263,[],504,264,[],504,286,[],504,291,[],504,304,[],504,333,[],504,360,[],504,396,[],504,427,[],504,431,[],505,178,[],505,181,[],505,182,[],505,186,[],505,192,[],505,248,[],505,254,[],505,261,[],505,276,[],505,291,[],505,396,[],505,427,[],505,431,[],506,178,[],506,181,[],506,182,[],506,249,[],506,261,[],506,291,[],506,396,[],506,427,[],506,431,[],506,3164,[],507,178,[],507,181,[],507,182,[],507,250,[],507,261,[],507,291,[],507,396,[],507,427,[],507,431,[],507,3164,[],508,178,[],508,181,[],508,182,[],508,183,[],508,189,[],508,212,[],508,251,[],508,261,[],508,263,[],508,264,[],508,286,[],508,291,[],508,304,[],508,333,[],508,360,[],508,396,[],508,427,[],508,431,[],509,178,[],509,181,[],509,182,[],509,186,[],509,192,[],509,252,[],509,254,[],509,261,[],509,276,[],509,291,[],509,396,[],509,427,[],509,431,[],510,178,[],510,181,[],510,182,[],510,183,[],510,189,[],510,212,[],510,253,[],510,261,[],510,263,[],510,264,[],510,286,[],510,291,[],510,304,[],510,333,[],510,360,[],510,396,[],510,427,[],510,431,[],511,178,[],511,181,[],511,182,[],511,254,[],511,261,[],511,291,[],511,396,[],511,427,[],511,431,[],512,178,[],512,181,[],512,182,[],512,184,[],512,190,[],512,201,[],512,212,[],512,255,[],512,261,[],512,263,[],512,265,[],512,291,[],512,317,[],512,329,[],512,333,[],512,379,[],512,386,[],512,396,[],512,427,[],512,431,[],513,178,[],513,181,[],513,182,[],513,184,[],513,190,[],513,201,[],513,256,[],513,261,[],513,265,[],513,291,[],513,317,[],513,379,[],513,396,[],513,427,[],513,431,[],514,178,[],514,181,[],514,182,[],514,188,[],514,197,[],514,257,[],514,261,[],514,291,[],514,325,[],514,396,[],514,427,[],514,431,[],515,178,[],515,181,[],515,182,[],515,183,[],515,189,[],515,212,[],515,258,[],515,261,[],515,263,[],515,264,[],515,286,[],515,291,[],515,304,[],515,333,[],515,360,[],515,396,[],515,427,[],515,431,[],516,178,[],516,181,[],516,182,[],516,259,[],516,261,[],516,291,[],516,396,[],516,427,[],516,431,[],517,178,[],517,181,[],517,182,[],517,260,[],517,261,[],517,291,[],517,396,[],517,427,[],517,431,[],518,178,[],518,179,[],518,181,[],518,182,[],518,188,[],518,197,[],518,261,[],518,291,[],518,325,[],518,396,[],518,427,[],518,431,[],519,178,[],519,181,[],519,182,[],519,261,[],519,291,[],519,396,[],519,427,[],519,431,[],519,3164,[],520,178,[],520,181,[],520,182,[],520,261,[],520,262,[],520,291,[],520,396,[],520,427,[],520,431,[],520,3164,[],521,178,[],521,181,[],521,182,[],521,212,[],521,261,[],521,263,[],521,291,[],521,333,[],521,396,[],521,427,[],521,431,[],522,178,[],522,181,[],522,182,[],522,183,[],522,189,[],522,212,[],522,261,[],522,263,[],522,264,[],522,266,[],522,286,[],522,291,[],522,304,[],522,333,[],522,360,[],522,396,[],522,427,[],522,431,[],523,178,[],523,181,[],523,182,[],523,187,[],523,261,[],523,267,[],523,291,[],523,342,[],523,396,[],523,427,[],523,431,[],524,178,[],524,181,[],524,182,[],524,188,[],524,197,[],524,261,[],524,268,[],524,291,[],524,325,[],524,396,[],524,427,[],524,431,[],525,178,[],525,181,[],525,182,[],525,202,[],525,261,[],525,269,[],525,291,[],525,396,[],525,427,[],525,431,[],526,178,[],526,181,[],526,182,[],526,184,[],526,190,[],526,201,[],526,261,[],526,265,[],526,270,[],526,291,[],526,317,[],526,379,[],526,396,[],526,427,[],526,431,[],527,178,[],527,181,[],527,182,[],527,184,[],527,190,[],527,201,[],527,261,[],527,265,[],527,271,[],527,291,[],527,317,[],527,379,[],527,396,[],527,427,[],527,431,[],528,178,[],528,181,[],528,182,[],528,261,[],528,273,[],528,291,[],528,396,[],528,427,[],528,431,[],529,178,[],529,181,[],529,182,[],529,183,[],529,189,[],529,212,[],529,261,[],529,263,[],529,264,[],529,274,[],529,286,[],529,291,[],529,304,[],529,333,[],529,360,[],529,396,[],529,427,[],529,431,[],530,178,[],530,181,[],530,182,[],530,184,[],530,190,[],530,201,[],530,261,[],530,265,[],530,275,[],530,291,[],530,317,[],530,379,[],530,396,[],530,427,[],530,431,[],531,178,[],531,181,[],531,182,[],531,183,[],531,189,[],531,212,[],531,261,[],531,263,[],531,264,[],531,277,[],531,286,[],531,291,[],531,304,[],531,333,[],531,360,[],531,396,[],531,427,[],531,431,[],532,178,[],532,181,[],532,182,[],532,184,[],532,190,[],532,201,[],532,261,[],532,265,[],532,278,[],532,291,[],532,317,[],532,379,[],532,396,[],532,427,[],532,431,[],533,178,[],533,181,[],533,182,[],533,186,[],533,192,[],533,254,[],533,261,[],533,276,[],533,279,[],533,291,[],533,396,[],533,427,[],533,431,[],534,178,[],534,181,[],534,182,[],534,184,[],534,190,[],534,201,[],534,261,[],534,265,[],534,280,[],534,291,[],534,317,[],534,379,[],534,396,[],534,427,[],534,431,[],535,178,[],535,181,[],535,182,[],535,186,[],535,192,[],535,254,[],535,261,[],535,276,[],535,281,[],535,291,[],535,292,[],535,396,[],535,427,[],535,431,[],536,178,[],536,181,[],536,182,[],536,185,[],536,191,[],536,212,[],536,261,[],536,263,[],536,272,[],536,282,[],536,291,[],536,333,[],536,396,[],536,427,[],536,431,[],537,178,[],537,181,[],537,182,[],537,184,[],537,190,[],537,201,[],537,261,[],537,265,[],537,283,[],537,291,[],537,317,[],537,379,[],537,396,[],537,427,[],537,431,[],538,178,[],538,181,[],538,182,[],538,261,[],538,284,[],538,291,[],538,396,[],538,427,[],538,431,[],538,3164,[],539,178,[],539,181,[],539,182,[],539,261,[],539,285,[],539,291,[],539,358,[],539,396,[],539,427,[],539,431,[],540,178,[],540,181,[],540,182,[],540,261,[],540,286,[],540,291,[],540,304,[],540,396,[],540,427,[],540,431,[],540,3164,[],541,178,[],541,181,[],541,182,[],541,184,[],541,190,[],541,201,[],541,261,[],541,265,[],541,287,[],541,291,[],541,317,[],541,379,[],541,396,[],541,427,[],541,431,[],542,178,[],542,181,[],542,182,[],542,187,[],542,261,[],542,288,[],542,291,[],542,361,[],542,396,[],542,427,[],542,431,[],543,178,[],543,181,[],543,182,[],543,183,[],543,189,[],543,212,[],543,261,[],543,263,[],543,264,[],543,286,[],543,289,[],543,291,[],543,304,[],543,333,[],543,360,[],543,396,[],543,427,[],543,431,[],544,178,[],544,181,[],544,182,[],544,184,[],544,190,[],544,201,[],544,261,[],544,265,[],544,290,[],544,291,[],544,317,[],544,379,[],544,396,[],544,427,[],544,431,[],545,178,[],545,181,[],545,182,[],545,261,[],545,291,[],545,396,[],545,427,[],545,431,[],545,3164,[],546,178,[],546,181,[],546,182,[],546,261,[],546,291,[],546,292,[],546,396,[],546,427,[],546,431,[],547,178,[],547,181,[],547,182,[],547,261,[],547,291,[],547,293,[],547,396,[],547,427,[],547,431,[],547,3164,[],548,178,[],548,181,[],548,182,[],548,186,[],548,192,[],548,254,[],548,261,[],548,276,[],548,291,[],548,294,[],548,396,[],548,427,[],548,431,[],549,178,[],549,181,[],549,182,[],549,261,[],549,291,[],549,295,[],549,396,[],549,427,[],549,431,[],550,178,[],550,181,[],550,182,[],550,185,[],550,191,[],550,212,[],550,261,[],550,263,[],550,272,[],550,291,[],550,296,[],550,333,[],550,396,[],550,427,[],550,431,[],551,178,[],551,181,[],551,182,[],551,187,[],551,261,[],551,291,[],551,297,[],551,367,[],551,396,[],551,427,[],551,431,[],552,178,[],552,181,[],552,182,[],552,188,[],552,197,[],552,261,[],552,291,[],552,298,[],552,325,[],552,396,[],552,427,[],552,431,[],553,178,[],553,181,[],553,182,[],553,185,[],553,191,[],553,212,[],553,261,[],553,263,[],553,272,[],553,291,[],553,299,[],553,333,[],553,396,[],553,427,[],553,431,[],554,178,[],554,181,[],554,182,[],554,184,[],554,190,[],554,201,[],554,261,[],554,265,[],554,291,[],554,300,[],554,317,[],554,379,[],554,396,[],554,427,[],554,431,[],555,178,[],555,181,[],555,182,[],555,187,[],555,261,[],555,291,[],555,301,[],555,368,[],555,396,[],555,427,[],555,431,[],556,178,[],556,181,[],556,182,[],556,183,[],556,189,[],556,212,[],556,261,[],556,263,[],556,264,[],556,286,[],556,291,[],556,302,[],556,304,[],556,333,[],556,360,[],556,396,[],556,427,[],556,431,[],557,178,[],557,181,[],557,182,[],557,184,[],557,190,[],557,201,[],557,261,[],557,265,[],557,291,[],557,303,[],557,317,[],557,379,[],557,396,[],557,427,[],557,431,[],558,178,[],558,181,[],558,182,[],558,261,[],558,291,[],558,304,[],558,396,[],558,427,[],558,431,[],559,178,[],559,181,[],559,182,[],559,184,[],559,190,[],559,201,[],559,261,[],559,265,[],559,291,[],559,305,[],559,317,[],559,379,[],559,396,[],559,427,[],559,431,[],560,178,[],560,181,[],560,182,[],560,188,[],560,197,[],560,261,[],560,291,[],560,306,[],560,325,[],560,396,[],560,427,[],560,431,[],561,178,[],561,181,[],561,182,[],561,261,[],561,291,[],561,307,[],561,396,[],561,427,[],561,431,[],562,178,[],562,181,[],562,182,[],562,185,[],562,191,[],562,212,[],562,261,[],562,263,[],562,272,[],562,291,[],562,308,[],562,333,[],562,396,[],562,427,[],562,431,[],563,178,[],563,181,[],563,182,[],563,184,[],563,190,[],563,201,[],563,261,[],563,265,[],563,291,[],563,309,[],563,317,[],563,379,[],563,396,[],563,427,[],563,431,[],564,178,[],564,181,[],564,182,[],564,184,[],564,190,[],564,201,[],564,261,[],564,265,[],564,291,[],564,310,[],564,317,[],564,379,[],564,396,[],564,427,[],564,431,[],565,178,[],565,181,[],565,182,[],565,185,[],565,191,[],565,212,[],565,261,[],565,263,[],565,272,[],565,291,[],565,311,[],565,333,[],565,396,[],565,427,[],565,431,[],566,178,[],566,181,[],566,182,[],566,261,[],566,291,[],566,312,[],566,396,[],566,427,[],566,431,[],567,178,[],567,181,[],567,182,[],567,188,[],567,197,[],567,261,[],567,291,[],567,313,[],567,325,[],567,396,[],567,427,[],567,431,[],568,178,[],568,181,[],568,182,[],568,261,[],568,291,[],568,314,[],568,396,[],568,427,[],568,431,[],568,3164,[],569,178,[],569,181,[],569,182,[],569,261,[],569,291,[],569,315,[],569,396,[],569,427,[],569,431,[],569,3164,[],570,178,[],570,181,[],570,182,[],570,261,[],570,291,[],570,316,[],570,396,[],570,427,[],570,431,[],571,178,[],571,181,[],571,182,[],571,187,[],571,261,[],571,291,[],571,317,[],571,379,[],571,396,[],571,427,[],571,431,[],572,178,[],572,181,[],572,182,[],572,261,[],572,291,[],572,318,[],572,381,[],572,396,[],572,427,[],572,431,[],573,178,[],573,181,[],573,182,[],573,184,[],573,190,[],573,201,[],573,261,[],573,265,[],573,291,[],573,317,[],573,319,[],573,379,[],573,396,[],573,427,[],573,431,[],573,3166,[],574,178,[],574,181,[],574,182,[],574,184,[],574,190,[],574,201,[],574,212,[],574,261,[],574,263,[],574,265,[],574,291,[],574,317,[],574,320,[],574,333,[],574,379,[],574,396,[],574,427,[],574,431,[],575,178,[],575,181,[],575,182,[],575,261,[],575,291,[],575,321,[],575,396,[],575,427,[],575,431,[],576,178,[],576,181,[],576,182,[],576,187,[],576,261,[],576,291,[],576,322,[],576,382,[],576,396,[],576,427,[],576,431,[],577,178,[],577,181,[],577,182,[],577,184,[],577,190,[],577,201,[],577,261,[],577,265,[],577,291,[],577,317,[],577,323,[],577,379,[],577,396,[],577,427,[],577,431,[],578,178,[],578,181,[],578,182,[],578,184,[],578,190,[],578,201,[],578,261,[],578,265,[],578,291,[],578,317,[],578,324,[],578,379,[],578,396,[],578,427,[],578,431,[],579,178,[],579,181,[],579,182,[],579,184,[],579,190,[],579,201,[],579,261,[],579,265,[],579,291,[],579,317,[],579,326,[],579,379,[],579,396,[],579,427,[],579,431,[],580,178,[],580,181,[],580,182,[],580,183,[],580,189,[],580,212,[],580,261,[],580,263,[],580,264,[],580,286,[],580,291,[],580,304,[],580,327,[],580,333,[],580,360,[],580,396,[],580,427,[],580,431,[],581,178,[],581,181,[],581,182,[],581,184,[],581,190,[],581,201,[],581,261,[],581,265,[],581,291,[],581,317,[],581,328,[],581,379,[],581,396,[],581,427,[],581,431,[],582,178,[],582,181,[],582,182,[],582,187,[],582,261,[],582,291,[],582,329,[],582,386,[],582,396,[],582,427,[],582,431,[],583,178,[],583,181,[],583,182,[],583,187,[],583,261,[],583,291,[],583,330,[],583,387,[],583,396,[],583,427,[],583,431,[],584,178,[],584,181,[],584,182,[],584,261,[],584,291,[],584,331,[],584,396,[],584,427,[],584,431,[],585,178,[],585,181,[],585,182,[],585,261,[],585,291,[],585,332,[],585,396,[],585,427,[],585,431,[],586,178,[],586,181,[],586,182,[],586,212,[],586,261,[],586,291,[],586,333,[],586,396,[],586,427,[],586,431,[],586,3164,[],587,178,[],587,181,[],587,182,[],587,261,[],587,291,[],587,334,[],587,396,[],587,427,[],587,431,[],588,178,[],588,181,[],588,182,[],588,183,[],588,189,[],588,212,[],588,261,[],588,263,[],588,264,[],588,286,[],588,291,[],588,304,[],588,333,[],588,335,[],588,360,[],588,396,[],588,427,[],588,431,[],589,178,[],589,181,[],589,182,[],589,187,[],589,261,[],589,291,[],589,336,[],589,390,[],589,396,[],589,427,[],589,431,[],590,178,[],590,181,[],590,182,[],590,188,[],590,197,[],590,261,[],590,291,[],590,325,[],590,337,[],590,396,[],590,427,[],590,431,[],591,178,[],591,181,[],591,182,[],591,261,[],591,291,[],591,338,[],591,396,[],591,427,[],591,431,[],592,178,[],592,181,[],592,182,[],592,187,[],592,261,[],592,291,[],592,339,[],592,393,[],592,396,[],592,427,[],592,431,[],593,178,[],593,181,[],593,182,[],593,261,[],593,291,[],593,340,[],593,396,[],593,427,[],593,431,[],594,178,[],594,181,[],594,182,[],594,188,[],594,197,[],594,261,[],594,291,[],594,325,[],594,341,[],594,396,[],594,427,[],594,431,[],595,178,[],595,181,[],595,182,[],595,261,[],595,291,[],595,342,[],595,396,[],595,427,[],595,431,[],595,3164,[],596,178,[],596,181,[],596,182,[],596,261,[],596,291,[],596,343,[],596,396,[],596,427,[],596,431,[],597,178,[],597,181,[],597,182,[],597,261,[],597,291,[],597,344,[],597,396,[],597,427,[],597,431,[],597,3164,[],598,178,[],598,181,[],598,182,[],598,250,[],598,261,[],598,291,[],598,345,[],598,396,[],598,427,[],598,431,[],599,178,[],599,181,[],599,182,[],599,184,[],599,190,[],599,201,[],599,261,[],599,265,[],599,291,[],599,317,[],599,346,[],599,379,[],599,396,[],599,427,[],599,431,[],600,178,[],600,181,[],600,182,[],600,184,[],600,190,[],600,201,[],600,261,[],600,265,[],600,291,[],600,317,[],600,347,[],600,379,[],600,396,[],600,427,[],600,431,[],601,178,[],601,181,[],601,182,[],601,184,[],601,190,[],601,201,[],601,261,[],601,265,[],601,291,[],601,317,[],601,348,[],601,379,[],601,396,[],601,427,[],601,431,[],602,178,[],602,181,[],602,182,[],602,261,[],602,291,[],602,349,[],602,396,[],602,427,[],602,431,[],603,178,[],603,181,[],603,182,[],603,184,[],603,190,[],603,201,[],603,261,[],603,265,[],603,291,[],603,317,[],603,350,[],603,379,[],603,396,[],603,427,[],603,431,[],604,178,[],604,181,[],604,182,[],604,183,[],604,189,[],604,212,[],604,261,[],604,263,[],604,264,[],604,286,[],604,291,[],604,304,[],604,333,[],604,351,[],604,360,[],604,396,[],604,427,[],604,431,[],605,178,[],605,181,[],605,182,[],605,184,[],605,190,[],605,201,[],605,261,[],605,265,[],605,291,[],605,317,[],605,352,[],605,379,[],605,396,[],605,427,[],605,431,[],606,178,[],606,181,[],606,182,[],606,184,[],606,190,[],606,201,[],606,261,[],606,265,[],606,291,[],606,317,[],606,353,[],606,379,[],606,396,[],606,427,[],606,431,[],606,3168,[],607,178,[],607,181,[],607,182,[],607,187,[],607,261,[],607,291,[],607,354,[],607,396,[],607,401,[],607,427,[],607,431,[],608,178,[],608,181,[],608,182,[],608,261,[],608,291,[],608,355,[],608,396,[],608,427,[],608,431,[],609,178,[],609,181,[],609,182,[],609,187,[],609,261,[],609,291,[],609,356,[],609,396,[],609,406,[],609,427,[],609,431,[],610,178,[],610,181,[],610,182,[],610,261,[],610,291,[],610,357,[],610,396,[],610,427,[],610,431,[],611,178,[],611,181,[],611,182,[],611,261,[],611,291,[],611,358,[],611,396,[],611,427,[],611,431,[],611,3164,[],612,178,[],612,181,[],612,182,[],612,184,[],612,190,[],612,201,[],612,261,[],612,265,[],612,291,[],612,317,[],612,359,[],612,379,[],612,396,[],612,427,[],612,431,[],612,3170,[],613,178,[],613,181,[],613,182,[],613,261,[],613,286,[],613,291,[],613,304,[],613,360,[],613,396,[],613,427,[],613,431,[],614,178,[],614,181,[],614,182,[],614,261,[],614,291,[],614,361,[],614,396,[],614,427,[],614,431,[],614,3164,[],615,178,[],615,181,[],615,182,[],615,184,[],615,190,[],615,201,[],615,261,[],615,265,[],615,291,[],615,317,[],615,362,[],615,379,[],615,396,[],615,427,[],615,431,[],616,178,[],616,181,[],616,182,[],616,184,[],616,190,[],616,201,[],616,261,[],616,265,[],616,291,[],616,317,[],616,363,[],616,379,[],616,396,[],616,427,[],616,431,[],617,178,[],617,181,[],617,182,[],617,261,[],617,291,[],617,364,[],617,396,[],617,427,[],617,431,[],618,178,[],618,181,[],618,182,[],618,261,[],618,291,[],618,365,[],618,396,[],618,427,[],618,431,[],619,178,[],619,181,[],619,182,[],619,225,[],619,261,[],619,291,[],619,366,[],619,396,[],619,427,[],619,431,[],620,178,[],620,181,[],620,182,[],620,261,[],620,291,[],620,367,[],620,396,[],620,427,[],620,431,[],620,3164,[],621,178,[],621,181,[],621,182,[],621,261,[],621,291,[],621,368,[],621,396,[],621,427,[],621,431,[],621,3164,[],622,178,[],622,181,[],622,182,[],622,184,[],622,190,[],622,201,[],622,261,[],622,265,[],622,291,[],622,317,[],622,369,[],622,379,[],622,396,[],622,427,[],622,431,[],623,178,[],623,181,[],623,182,[],623,183,[],623,189,[],623,212,[],623,261,[],623,263,[],623,264,[],623,286,[],623,291,[],623,304,[],623,333,[],623,360,[],623,370,[],623,396,[],623,427,[],623,431,[],624,178,[],624,181,[],624,182,[],624,183,[],624,189,[],624,212,[],624,261,[],624,263,[],624,264,[],624,286,[],624,291,[],624,304,[],624,333,[],624,360,[],624,371,[],624,396,[],624,427,[],624,431,[],625,178,[],625,181,[],625,182,[],625,261,[],625,291,[],625,372,[],625,396,[],625,427,[],625,431,[],626,178,[],626,181,[],626,182,[],626,187,[],626,261,[],626,291,[],626,373,[],626,396,[],626,427,[],626,431,[],627,178,[],627,181,[],627,182,[],627,187,[],627,261,[],627,291,[],627,374,[],627,396,[],627,413,[],627,427,[],627,431,[],628,178,[],628,181,[],628,182,[],628,188,[],628,197,[],628,261,[],628,291,[],628,325,[],628,375,[],628,396,[],628,427,[],628,431,[],629,178,[],629,181,[],629,182,[],629,261,[],629,291,[],629,376,[],629,377,[],629,396,[],629,427,[],629,431,[],630,178,[],630,181,[],630,182,[],630,261,[],630,291,[],630,377,[],630,396,[],630,427,[],630,431,[],630,3164,[],631,178,[],631,181,[],631,182,[],631,186,[],631,192,[],631,254,[],631,261,[],631,276,[],631,291,[],631,378,[],631,396,[],631,427,[],631,431,[],632,178,[],632,181,[],632,182,[],632,261,[],632,291,[],632,379,[],632,396,[],632,427,[],632,431,[],632,3164,[],633,178,[],633,181,[],633,182,[],633,186,[],633,192,[],633,254,[],633,261,[],633,276,[],633,291,[],633,380,[],633,396,[],633,427,[],633,431,[],634,178,[],634,181,[],634,182,[],634,261,[],634,291,[],634,381,[],634,396,[],634,427,[],634,431,[],634,3164,[],635,178,[],635,181,[],635,182,[],635,261,[],635,291,[],635,382,[],635,396,[],635,427,[],635,431,[],635,3164,[],636,178,[],636,181,[],636,182,[],636,186,[],636,192,[],636,254,[],636,261,[],636,276,[],636,291,[],636,383,[],636,396,[],636,427,[],636,431,[],637,178,[],637,181,[],637,182,[],637,184,[],637,190,[],637,201,[],637,261,[],637,265,[],637,291,[],637,317,[],637,379,[],637,384,[],637,396,[],637,427,[],637,431,[],638,178,[],638,181,[],638,182,[],638,186,[],638,192,[],638,201,[],638,203,[],638,254,[],638,261,[],638,265,[],638,276,[],638,291,[],638,292,[],638,317,[],638,379,[],638,385,[],638,396,[],638,427,[],638,431,[],639,178,[],639,181,[],639,182,[],639,261,[],639,291,[],639,386,[],639,396,[],639,427,[],639,431,[],639,3164,[],640,178,[],640,181,[],640,182,[],640,261,[],640,291,[],640,387,[],640,396,[],640,427,[],640,431,[],640,3164,[],641,178,[],641,181,[],641,182,[],641,261,[],641,291,[],641,388,[],641,396,[],641,427,[],641,431,[],642,178,[],642,181,[],642,182,[],642,261,[],642,291,[],642,389,[],642,396,[],642,427,[],642,431,[],642,3164,[],643,178,[],643,181,[],643,182,[],643,261,[],643,291,[],643,390,[],643,396,[],643,427,[],643,431,[],643,3164,[],644,178,[],644,181,[],644,182,[],644,184,[],644,190,[],644,201,[],644,261,[],644,265,[],644,291,[],644,317,[],644,379,[],644,391,[],644,396,[],644,427,[],644,431,[],645,178,[],645,181,[],645,182,[],645,184,[],645,190,[],645,201,[],645,261,[],645,265,[],645,291,[],645,317,[],645,379,[],645,392,[],645,396,[],645,427,[],645,431,[],646,178,[],646,181,[],646,182,[],646,261,[],646,291,[],646,393,[],646,396,[],646,427,[],646,431,[],646,3164,[],647,178,[],647,181,[],647,182,[],647,261,[],647,291,[],647,394,[],647,396,[],647,427,[],647,431,[],648,178,[],648,181,[],648,182,[],648,187,[],648,261,[],648,291,[],648,395,[],648,396,[],648,419,[],648,427,[],648,431,[],649,178,[],649,181,[],649,182,[],649,261,[],649,291,[],649,396,[],649,427,[],649,431,[],649,3164,[],650,178,[],650,181,[],650,182,[],650,184,[],650,190,[],650,201,[],650,261,[],650,265,[],650,291,[],650,317,[],650,379,[],650,396,[],650,397,[],650,427,[],650,431,[],651,178,[],651,181,[],651,182,[],651,261,[],651,291,[],651,396,[],651,398,[],651,427,[],651,431,[],652,178,[],652,181,[],652,182,[],652,261,[],652,291,[],652,396,[],652,399,[],652,427,[],652,431,[],653,178,[],653,181,[],653,182,[],653,184,[],653,190,[],653,201,[],653,261,[],653,265,[],653,291,[],653,317,[],653,379,[],653,396,[],653,400,[],653,427,[],653,431,[],654,178,[],654,181,[],654,182,[],654,261,[],654,291,[],654,396,[],654,401,[],654,427,[],654,431,[],654,3164,[],655,178,[],655,181,[],655,182,[],655,261,[],655,291,[],655,396,[],655,402,[],655,420,[],655,427,[],655,431,[],656,178,[],656,181,[],656,182,[],656,261,[],656,291,[],656,396,[],656,403,[],656,427,[],656,431,[],657,178,[],657,181,[],657,182,[],657,187,[],657,261,[],657,291,[],657,396,[],657,404,[],657,421,[],657,427,[],657,431,[],658,178,[],658,181,[],658,182,[],658,261,[],658,291,[],658,396,[],658,405,[],658,427,[],658,431,[],659,178,[],659,181,[],659,182,[],659,261,[],659,291,[],659,396,[],659,406,[],659,427,[],659,431,[],659,3164,[],660,178,[],660,181,[],660,182,[],660,187,[],660,261,[],660,291,[],660,396,[],660,407,[],660,427,[],660,431,[],661,178,[],661,181,[],661,182,[],661,261,[],661,291,[],661,396,[],661,408,[],661,427,[],661,431,[],662,178,[],662,181,[],662,182,[],662,261,[],662,291,[],662,396,[],662,409,[],662,427,[],662,431,[],663,178,[],663,181,[],663,182,[],663,261,[],663,291,[],663,396,[],663,410,[],663,427,[],663,431,[],664,178,[],664,181,[],664,182,[],664,261,[],664,291,[],664,396,[],664,411,[],664,427,[],664,431,[],664,3164,[],665,178,[],665,181,[],665,182,[],665,261,[],665,291,[],665,396,[],665,412,[],665,427,[],665,431,[],666,178,[],666,181,[],666,182,[],666,261,[],666,291,[],666,396,[],666,413,[],666,427,[],666,431,[],666,3164,[],667,178,[],667,181,[],667,182,[],667,261,[],667,291,[],667,396,[],667,414,[],667,427,[],667,431,[],668,178,[],668,181,[],668,182,[],668,261,[],668,291,[],668,396,[],668,415,[],668,427,[],668,431,[],669,178,[],669,181,[],669,182,[],669,261,[],669,291,[],669,396,[],669,416,[],669,427,[],669,431,[],670,178,[],670,181,[],670,182,[],670,261,[],670,291,[],670,389,[],670,396,[],670,417,[],670,427,[],670,431,[],671,178,[],671,181,[],671,182,[],671,261,[],671,291,[],671,396,[],671,418,[],671,427,[],671,431,[],672,178,[],672,181,[],672,182,[],672,261,[],672,291,[],672,396,[],672,419,[],672,427,[],672,431,[],672,3164,[],673,178,[],673,181,[],673,182,[],673,261,[],673,291,[],673,396,[],673,420,[],673,427,[],673,431,[],673,3164,[],674,178,[],674,181,[],674,182,[],674,261,[],674,291,[],674,396,[],674,421,[],674,427,[],674,431,[],674,3164,[],675,178,[],675,181,[],675,182,[],675,261,[],675,291,[],675,396,[],675,422,[],675,427,[],675,431,[],676,178,[],676,181,[],676,182,[],676,261,[],676,291,[],676,396,[],676,411,[],676,423,[],676,427,[],676,431,[],677,178,[],677,181,[],677,182,[],677,261,[],677,291,[],677,396,[],677,424,[],677,427,[],677,431,[],678,178,[],678,181,[],678,182,[],678,261,[],678,291,[],678,396,[],678,425,[],678,427,[],678,431,[],679,178,[],679,181,[],679,182,[],679,261,[],679,291,[],679,396,[],679,426,[],679,427,[],679,431,[],680,178,[],680,181,[],680,182,[],680,261,[],680,291,[],680,396,[],680,427,[],680,431,[],680,3164,[],681,178,[],681,181,[],681,182,[],681,261,[],681,291,[],681,396,[],681,427,[],681,428,[],681,431,[],682,178,[],682,181,[],682,182,[],682,261,[],682,291,[],682,396,[],682,427,[],682,429,[],682,431,[],683,178,[],683,181,[],683,182,[],683,261,[],683,291,[],683,396,[],683,427,[],683,430,[],683,431,[],684,178,[],684,181,[],684,182,[],684,261,[],684,291,[],684,396,[],684,427,[],684,431,[],684,3164,[],685,178,[],685,181,[],685,182,[],685,261,[],685,291,[],685,396,[],685,427,[],685,431,[],685,432,[],686,178,[],686,181,[],686,182,[],686,261,[],686,291,[],686,396,[],686,427,[],686,431,[],686,433,[],687,178,[],687,181,[],687,182,[],687,261,[],687,291,[],687,396,[],687,427,[],687,431,[],687,434,[],687,437,[],688,178,[],688,181,[],688,182,[],688,186,[],688,192,[],688,254,[],688,261,[],688,276,[],688,291,[],688,396,[],688,427,[],688,431,[],688,435,[],689,178,[],689,181,[],689,182,[],689,261,[],689,291,[],689,396,[],689,427,[],689,431,[],689,436,[],690,178,[],690,181,[],690,182,[],690,261,[],690,291,[],690,396,[],690,427,[],690,431,[],690,437,[],690,3164,[],691,178,[],691,181,[],691,182,[],691,261,[],691,291,[],691,396,[],691,427,[],691,431,[],691,438,[],692,178,[],692,180,[],692,181,[],692,182,[],692,184,[],692,190,[],692,201,[],692,261,[],692,265,[],692,291,[],692,317,[],692,379,[],692,396,[],692,427,[],692,431,[],693,178,[],693,181,[],693,182,[],693,185,[],693,191,[],693,193,[],693,212,[],693,261,[],693,263,[],693,272,[],693,291,[],693,333,[],693,396,[],693,427,[],693,431,[],695,178,[],695,181,[],695,182,[],695,185,[],695,191,[],695,194,[],695,212,[],695,261,[],695,263,[],695,272,[],695,291,[],695,333,[],695,396,[],695,427,[],695,431,[],696,178,[],696,181,[],696,182,[],696,184,[],696,190,[],696,195,[],696,201,[],696,261,[],696,265,[],696,291,[],696,317,[],696,379,[],696,396,[],696,427,[],696,431,[],697,178,[],697,181,[],697,182,[],697,184,[],697,190,[],697,196,[],697,201,[],697,261,[],697,265,[],697,291,[],697,317,[],697,379,[],697,396,[],697,427,[],697,431,[],698,178,[],698,181,[],698,182,[],698,187,[],698,198,[],698,240,[],698,261,[],698,291,[],698,396,[],698,427,[],698,431,[],699,178,[],699,181,[],699,182,[],699,199,[],699,261,[],699,291,[],699,396,[],699,427,[],699,431,[],700,178,[],700,181,[],700,182,[],700,183,[],700,189,[],700,200,[],700,212,[],700,261,[],700,263,[],700,264,[],700,286,[],700,291,[],700,304,[],700,333,[],700,360,[],700,396,[],700,427,[],700,431,[],701,178,[],701,181,[],701,182,[],701,201,[],701,261,[],701,291,[],701,317,[],701,379,[],701,396,[],701,427,[],701,431,[],701,3164,[],702,178,[],702,181,[],702,182,[],702,202,[],702,261,[],702,291,[],702,396,[],702,427,[],702,431,[],702,3164,[],703,178,[],703,181,[],703,182,[],703,184,[],703,190,[],703,201,[],703,203,[],703,261,[],703,265,[],703,291,[],703,317,[],703,379,[],703,396,[],703,427,[],703,431,[],704,178,[],704,181,[],704,182,[],704,184,[],704,190,[],704,201,[],704,204,[],704,261,[],704,265,[],704,291,[],704,317,[],704,379,[],704,396,[],704,427,[],704,431,[],705,178,[],705,181,[],705,182,[],705,186,[],705,192,[],705,205,[],705,254,[],705,261,[],705,276,[],705,291,[],705,292,[],705,396,[],705,427,[],705,431,[],706,178,[],706,181,[],706,182,[],706,184,[],706,190,[],706,201,[],706,206,[],706,261,[],706,265,[],706,291,[],706,317,[],706,379,[],706,396,[],706,427,[],706,431,[],707,178,[],707,181,[],707,182,[],707,207,[],707,261,[],707,291,[],707,396,[],707,427,[],707,431,[],708,178,[],708,181,[],708,182,[],708,184,[],708,190,[],708,201,[],708,208,[],708,261,[],708,265,[],708,291,[],708,317,[],708,379,[],708,396,[],708,427,[],708,431,[],709,178,[],709,181,[],709,182,[],709,185,[],709,191,[],709,209,[],709,212,[],709,261,[],709,263,[],709,272,[],709,291,[],709,333,[],709,396,[],709,427,[],709,431,[],710,178,[],710,181,[],710,182,[],710,187,[],710,210,[],710,261,[],710,262,[],710,291,[],710,396,[],710,427,[],710,431,[],711,178,[],711,181,[],711,182,[],711,183,[],711,189,[],711,211,[],711,212,[],711,261,[],711,263,[],711,264,[],711,286,[],711,291,[],711,304,[],711,333,[],711,360,[],711,396,[],711,427,[],711,431,[],712,178,[],712,181,[],712,182,[],712,212,[],712,261,[],712,291,[],712,396,[],712,427,[],712,431,[],713,178,[],713,181,[],713,182,[],713,185,[],713,191,[],713,212,[],713,213,[],713,261,[],713,263,[],713,272,[],713,291,[],713,333,[],713,396,[],713,427,[],713,431,[],714,178,[],714,181,[],714,182,[],714,214,[],714,261,[],714,291,[],714,396,[],714,427,[],714,431,[],715,178,[],715,181,[],715,182,[],715,185,[],715,191,[],715,212,[],715,215,[],715,261,[],715,263,[],715,272,[],715,291,[],715,333,[],715,396,[],715,427,[],715,431,[],716,178,[],716,181,[],716,182,[],716,185,[],716,191,[],716,212,[],716,216,[],716,261,[],716,263,[],716,272,[],716,291,[],716,333,[],716,396,[],716,427,[],716,431,[],717,178,[],717,181,[],717,182,[],717,184,[],717,190,[],717,201,[],717,217,[],717,261,[],717,265,[],717,291,[],717,317,[],717,379,[],717,396,[],717,427,[],717,431,[],718,178,[],718,181,[],718,182,[],718,185,[],718,191,[],718,212,[],718,218,[],718,261,[],718,263,[],718,272,[],718,291,[],718,333,[],718,396,[],718,427,[],718,431,[],719,178,[],719,181,[],719,182,[],719,219,[],719,261,[],719,291,[],719,396,[],719,427,[],719,431,[],719,3164,[],720,178,[],720,181,[],720,182,[],720,184,[],720,190,[],720,201,[],720,220,[],720,261,[],720,265,[],720,291,[],720,317,[],720,379,[],720,396,[],720,427,[],720,431,[],721,178,[],721,181,[],721,182,[],721,186,[],721,192,[],721,221,[],721,254,[],721,261,[],721,276,[],721,291,[],721,396,[],721,427,[],721,431,[],722,178,[],722,181,[],722,182,[],722,185,[],722,191,[],722,212,[],722,222,[],722,261,[],722,263,[],722,272,[],722,291,[],722,333,[],722,396,[],722,427,[],722,431,[],723,178,[],723,181,[],723,182,[],723,223,[],723,261,[],723,291,[],723,396,[],723,427,[],723,431,[],724,178,[],724,181,[],724,182,[],724,185,[],724,191,[],724,212,[],724,224,[],724,261,[],724,263,[],724,272,[],724,291,[],724,333,[],724,396,[],724,427,[],724,431,[],3089,219,[],3089,243,[],3089,283,[],3089,344,[],3089,352,[],3158,254,[],3158,283,[],3158,341,[],3158,350,[],3158,352,[],3158,366,[],3158,385,[],3159,202,[["Element",2,"ExpressibleAsObjcNamePiece",269]],3159,219,[["Element",2,"TokenSyntax",3089]],3159,225,[["Element",2,"ExpressibleAsAccessPathComponent",366]],3159,240,[["Element",2,"ExpressibleAsCaseItem",198]],3159,249,[["Element",2,"ExpressibleAsDeclModifier",243]],3159,250,[["Element",2,"ExpressibleAsObjCSelectorPiece",345]],3159,261,[["Element",2,"ExpressibleAsSyntaxBuildable",178]],3159,262,[["Element",2,"ExpressibleAsCatchItem",210]],3159,284,[["Element",2,"TokenSyntax",3089]],3159,291,[["Element",2,"ExpressibleAsSyntaxBuildable",178]],3159,293,[["Element",2,"ExpressibleAsCatchClause",232]],3159,314,[["Element",2,"ExpressibleAsArrayElement",239]],3159,315,[["Element",2,"ExpressibleAsClosureParam",241]],3159,342,[["Element",2,"ExpressibleAsInheritedType",267]],3159,344,[["Element",2,"TokenSyntax",3089]],3159,358,[["Element",2,"ExpressibleAsIfConfigClause",285]],3159,361,[["Element",2,"ExpressibleAsPatternBinding",288]],3159,367,[["Element",2,"ExpressibleAsEnumCaseElement",297]],3159,368,[["Element",2,"ExpressibleAsGenericArgument",301]],3159,377,[["Element",2,"ExpressibleAsAvailabilityArgument",376]],3159,379,[["Element",2,"ExpressibleAsConditionElement",317]],3159,381,[["Element",2,"ExpressibleAsDeclNameArgument",318]],3159,382,[["Element",2,"ExpressibleAsGenericParameter",322]],3159,386,[["Element",2,"ExpressibleAsTupleExprElement",329]],3159,387,[["Element",2,"ExpressibleAsTupleTypeElement",330]],3159,389,[["Element",2,"ExpressibleAsBackDeployVersionArgument",417]],3159,390,[["Element",2,"ExpressibleAsDictionaryElement",336]],3159,393,[["Element",2,"ExpressibleAsFunctionParameter",339]],3159,396,[["Element",2,"ExpressibleAsSyntaxBuildable",178]],3159,401,[["Element",2,"ExpressibleAsClosureCaptureItem",354]],3159,406,[["Element",2,"ExpressibleAsGenericRequirement",356]],3159,411,[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",423]],3159,413,[["Element",2,"ExpressibleAsTuplePatternElement",374]],3159,419,[["Element",2,"ExpressibleAsPrimaryAssociatedType",395]],3159,420,[["Element",2,"ExpressibleAsCompositionTypeElement",402]],3159,421,[["Element",2,"ExpressibleAsDifferentiabilityParam",404]],3159,427,[["Element",2,"ExpressibleAsSyntaxBuildable",178]],3159,431,[["Element",2,"ExpressibleAsSyntaxBuildable",178]],3159,437,[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",434]]],"feature":[1487,482,1487,483,1487,484,1487,485,1487,486,1487,487,1487,488,1487,489,1487,490,1487,491,1487,492,1487,493,1487,494,1487,495,1487,496,1487,497,1487,498,1487,499,1487,500,1487,501,1487,502,1487,503,1487,504,1487,505,1487,506,1487,507,1487,508,1487,509,1487,510,1487,511,1487,512,1487,513,1487,514,1487,515,1487,516,1487,517,1487,518,1487,520,1487,521,1487,522,1487,523,1487,524,1487,525,1487,526,1487,527,1487,528,1487,529,1487,530,1487,531,1487,532,1487,533,1487,534,1487,535,1487,536,1487,537,1487,538,1487,539,1487,540,1487,541,1487,542,1487,543,1487,544,1487,545,1487,546,1487,547,1487,548,1487,549,1487,550,1487,551,1487,552,1487,553,1487,554,1487,555,1487,556,1487,557,1487,558,1487,559,1487,560,1487,561,1487,562,1487,563,1487,564,1487,565,1487,566,1487,567,1487,568,1487,569,1487,570,1487,571,1487,572,1487,573,1487,574,1487,575,1487,576,1487,577,1487,578,1487,579,1487,580,1487,581,1487,582,1487,583,1487,584,1487,585,1487,586,1487,587,1487,588,1487,589,1487,590,1487,591,1487,592,1487,593,1487,594,1487,595,1487,596,1487,597,1487,598,1487,599,1487,600,1487,601,1487,602,1487,603,1487,604,1487,605,1487,606,1487,607,1487,608,1487,609,1487,610,1487,611,1487,612,1487,613,1487,614,1487,615,1487,616,1487,617,1487,618,1487,619,1487,620,1487,621,1487,622,1487,623,1487,624,1487,625,1487,626,1487,627,1487,628,1487,629,1487,630,1487,631,1487,632,1487,633,1487,634,1487,635,1487,636,1487,637,1487,638,1487,639,1487,640,1487,641,1487,642,1487,643,1487,644,1487,645,1487,646,1487,647,1487,648,1487,649,1487,650,1487,651,1487,652,1487,653,1487,654,1487,655,1487,656,1487,657,1487,658,1487,659,1487,660,1487,661,1487,662,1487,663,1487,664,1487,665,1487,666,1487,667,1487,668,1487,669,1487,670,1487,671,1487,672,1487,673,1487,674,1487,675,1487,676,1487,677,1487,678,1487,679,1487,680,1487,681,1487,682,1487,683,1487,684,1487,685,1487,686,1487,687,1487,688,1487,689,1487,690,1487,691,1487,692,1487,693,1487,695,1487,696,1487,697,1487,698,1487,699,1487,700,1487,701,1487,702,1487,703,1487,704,1487,705,1487,706,1487,707,1487,708,1487,709,1487,710,1487,711,1487,712,1487,713,1487,714,1487,715,1487,716,1487,717,1487,718,1487,719,1487,720,1487,721,1487,722,1487,723,1487,724,1487,3089,1487,3158,1488,482,1488,483,1488,484,1488,485,1488,486,1488,487,1488,488,1488,489,1488,490,1488,491,1488,492,1488,493,1488,494,1488,495,1488,496,1488,497,1488,498,1488,499,1488,500,1488,501,1488,502,1488,503,1488,504,1488,505,1488,506,1488,507,1488,508,1488,509,1488,510,1488,511,1488,512,1488,513,1488,514,1488,515,1488,516,1488,517,1488,518,1488,519,1488,520,1488,521,1488,522,1488,523,1488,524,1488,525,1488,526,1488,527,1488,528,1488,529,1488,530,1488,531,1488,532,1488,533,1488,534,1488,535,1488,536,1488,537,1488,538,1488,539,1488,540,1488,541,1488,542,1488,543,1488,544,1488,546,1488,547,1488,548,1488,549,1488,550,1488,551,1488,552,1488,553,1488,554,1488,555,1488,556,1488,557,1488,558,1488,559,1488,560,1488,561,1488,562,1488,563,1488,564,1488,565,1488,566,1488,567,1488,568,1488,569,1488,570,1488,571,1488,572,1488,573,1488,574,1488,575,1488,576,1488,577,1488,578,1488,579,1488,580,1488,581,1488,582,1488,583,1488,584,1488,585,1488,586,1488,587,1488,588,1488,589,1488,590,1488,591,1488,592,1488,593,1488,594,1488,595,1488,596,1488,597,1488,598,1488,599,1488,600,1488,601,1488,602,1488,603,1488,604,1488,605,1488,606,1488,607,1488,608,1488,609,1488,610,1488,611,1488,612,1488,613,1488,614,1488,615,1488,616,1488,617,1488,618,1488,619,1488,620,1488,621,1488,622,1488,623,1488,624,1488,625,1488,626,1488,627,1488,628,1488,629,1488,630,1488,631,1488,632,1488,633,1488,634,1488,635,1488,636,1488,637,1488,638,1488,639,1488,640,1488,641,1488,642,1488,643,1488,644,1488,645,1488,646,1488,647,1488,648,1488,649,1488,650,1488,651,1488,652,1488,653,1488,654,1488,655,1488,656,1488,657,1488,658,1488,659,1488,660,1488,661,1488,662,1488,663,1488,664,1488,665,1488,666,1488,667,1488,668,1488,669,1488,670,1488,671,1488,672,1488,673,1488,674,1488,675,1488,676,1488,677,1488,678,1488,679,1488,680,1488,681,1488,682,1488,683,1488,684,1488,685,1488,686,1488,687,1488,688,1488,689,1488,690,1488,691,1488,692,1488,693,1488,695,1488,696,1488,697,1488,698,1488,699,1488,700,1488,701,1488,702,1488,703,1488,704,1488,705,1488,706,1488,707,1488,708,1488,709,1488,710,1488,711,1488,712,1488,713,1488,714,1488,715,1488,716,1488,717,1488,718,1488,719,1488,720,1488,721,1488,722,1488,723,1488,724,1488,3089,1488,3158,1489,482,1489,483,1489,484,1489,485,1489,486,1489,487,1489,488,1489,489,1489,490,1489,491,1489,492,1489,493,1489,494,1489,495,1489,496,1489,497,1489,498,1489,499,1489,500,1489,501,1489,502,1489,503,1489,504,1489,505,1489,506,1489,507,1489,508,1489,509,1489,510,1489,511,1489,512,1489,513,1489,514,1489,515,1489,516,1489,517,1489,518,1489,519,1489,520,1489,521,1489,522,1489,523,1489,524,1489,525,1489,526,1489,527,1489,528,1489,529,1489,530,1489,531,1489,532,1489,533,1489,534,1489,535,1489,536,1489,537,1489,538,1489,539,1489,540,1489,541,1489,542,1489,543,1489,544,1489,545,1489,546,1489,547,1489,548,1489,549,1489,550,1489,551,1489,552,1489,553,1489,554,1489,555,1489,556,1489,557,1489,558,1489,559,1489,560,1489,561,1489,562,1489,563,1489,564,1489,565,1489,566,1489,567,1489,568,1489,569,1489,570,1489,571,1489,572,1489,573,1489,574,1489,575,1489,576,1489,577,1489,578,1489,579,1489,580,1489,581,1489,582,1489,583,1489,584,1489,585,1489,586,1489,587,1489,588,1489,589,1489,590,1489,591,1489,592,1489,593,1489,594,1489,595,1489,596,1489,597,1489,598,1489,599,1489,600,1489,601,1489,602,1489,603,1489,604,1489,605,1489,606,1489,607,1489,608,1489,609,1489,610,1489,611,1489,612,1489,613,1489,614,1489,615,1489,616,1489,617,1489,618,1489,619,1489,620,1489,621,1489,622,1489,623,1489,624,1489,625,1489,626,1489,627,1489,628,1489,629,1489,630,1489,631,1489,632,1489,633,1489,634,1489,635,1489,636,1489,637,1489,638,1489,639,1489,640,1489,641,1489,642,1489,643,1489,644,1489,645,1489,646,1489,647,1489,648,1489,650,1489,651,1489,652,1489,653,1489,654,1489,655,1489,656,1489,657,1489,658,1489,659,1489,660,1489,661,1489,662,1489,663,1489,664,1489,665,1489,666,1489,667,1489,668,1489,669,1489,670,1489,671,1489,672,1489,673,1489,674,1489,675,1489,676,1489,677,1489,678,1489,679,1489,680,1489,681,1489,682,1489,683,1489,684,1489,685,1489,686,1489,687,1489,688,1489,689,1489,690,1489,691,1489,692,1489,693,1489,695,1489,696,1489,697,1489,698,1489,699,1489,700,1489,701,1489,702,1489,703,1489,704,1489,705,1489,706,1489,707,1489,708,1489,709,1489,710,1489,711,1489,712,1489,713,1489,714,1489,715,1489,716,1489,717,1489,718,1489,719,1489,720,1489,721,1489,722,1489,723,1489,724,1489,3089,1489,3158,1490,482,1490,483,1490,484,1490,485,1490,486,1490,487,1490,488,1490,489,1490,490,1490,491,1490,492,1490,493,1490,494,1490,495,1490,496,1490,497,1490,498,1490,499,1490,500,1490,501,1490,502,1490,503,1490,504,1490,505,1490,506,1490,507,1490,508,1490,509,1490,510,1490,511,1490,512,1490,513,1490,514,1490,515,1490,516,1490,517,1490,518,1490,519,1490,520,1490,521,1490,522,1490,523,1490,524,1490,525,1490,526,1490,527,1490,528,1490,529,1490,530,1490,531,1490,532,1490,533,1490,534,1490,535,1490,536,1490,537,1490,538,1490,539,1490,540,1490,541,1490,542,1490,543,1490,544,1490,545,1490,546,1490,547,1490,548,1490,549,1490,550,1490,551,1490,552,1490,553,1490,554,1490,555,1490,556,1490,557,1490,558,1490,559,1490,560,1490,561,1490,562,1490,563,1490,564,1490,565,1490,566,1490,567,1490,568,1490,569,1490,570,1490,571,1490,572,1490,573,1490,574,1490,575,1490,576,1490,577,1490,578,1490,579,1490,580,1490,581,1490,582,1490,583,1490,584,1490,585,1490,586,1490,587,1490,588,1490,589,1490,590,1490,591,1490,592,1490,593,1490,594,1490,595,1490,596,1490,597,1490,598,1490,599,1490,600,1490,601,1490,602,1490,603,1490,604,1490,605,1490,606,1490,607,1490,608,1490,609,1490,610,1490,611,1490,612,1490,613,1490,614,1490,615,1490,616,1490,617,1490,618,1490,619,1490,620,1490,621,1490,622,1490,623,1490,624,1490,625,1490,626,1490,627,1490,628,1490,629,1490,630,1490,631,1490,632,1490,633,1490,634,1490,635,1490,636,1490,637,1490,638,1490,639,1490,640,1490,641,1490,642,1490,643,1490,644,1490,645,1490,646,1490,647,1490,648,1490,649,1490,650,1490,651,1490,652,1490,653,1490,654,1490,655,1490,656,1490,657,1490,658,1490,659,1490,660,1490,661,1490,662,1490,663,1490,664,1490,665,1490,666,1490,667,1490,668,1490,669,1490,670,1490,671,1490,672,1490,673,1490,674,1490,675,1490,676,1490,677,1490,678,1490,679,1490,681,1490,682,1490,683,1490,684,1490,685,1490,686,1490,687,1490,688,1490,689,1490,690,1490,691,1490,692,1490,693,1490,695,1490,696,1490,697,1490,698,1490,699,1490,700,1490,701,1490,702,1490,703,1490,704,1490,705,1490,706,1490,707,1490,708,1490,709,1490,710,1490,711,1490,712,1490,713,1490,714,1490,715,1490,716,1490,717,1490,718,1490,719,1490,720,1490,721,1490,722,1490,723,1490,724,1490,3089,1490,3158,1491,482,1491,483,1491,484,1491,485,1491,486,1491,487,1491,488,1491,489,1491,490,1491,491,1491,492,1491,493,1491,494,1491,495,1491,496,1491,497,1491,498,1491,499,1491,500,1491,501,1491,502,1491,503,1491,504,1491,505,1491,506,1491,507,1491,508,1491,509,1491,510,1491,511,1491,512,1491,513,1491,514,1491,515,1491,516,1491,517,1491,518,1491,519,1491,520,1491,521,1491,522,1491,523,1491,524,1491,525,1491,526,1491,527,1491,528,1491,529,1491,530,1491,531,1491,532,1491,533,1491,534,1491,535,1491,536,1491,537,1491,538,1491,539,1491,540,1491,541,1491,542,1491,543,1491,544,1491,545,1491,546,1491,547,1491,548,1491,549,1491,550,1491,551,1491,552,1491,553,1491,554,1491,555,1491,556,1491,557,1491,558,1491,559,1491,560,1491,561,1491,562,1491,563,1491,564,1491,565,1491,566,1491,567,1491,568,1491,569,1491,570,1491,571,1491,572,1491,573,1491,574,1491,575,1491,576,1491,577,1491,578,1491,579,1491,580,1491,581,1491,582,1491,583,1491,584,1491,585,1491,586,1491,587,1491,588,1491,589,1491,590,1491,591,1491,592,1491,593,1491,594,1491,595,1491,596,1491,597,1491,598,1491,599,1491,600,1491,601,1491,602,1491,603,1491,604,1491,605,1491,606,1491,607,1491,608,1491,609,1491,610,1491,611,1491,612,1491,613,1491,614,1491,615,1491,616,1491,617,1491,618,1491,619,1491,620,1491,621,1491,622,1491,623,1491,624,1491,625,1491,626,1491,627,1491,628,1491,629,1491,630,1491,631,1491,632,1491,633,1491,634,1491,635,1491,636,1491,637,1491,638,1491,639,1491,640,1491,641,1491,642,1491,643,1491,644,1491,645,1491,646,1491,647,1491,648,1491,649,1491,650,1491,651,1491,652,1491,653,1491,654,1491,655,1491,656,1491,657,1491,658,1491,659,1491,660,1491,661,1491,662,1491,663,1491,664,1491,665,1491,666,1491,667,1491,668,1491,669,1491,670,1491,671,1491,672,1491,673,1491,674,1491,675,1491,676,1491,677,1491,678,1491,679,1491,680,1491,681,1491,682,1491,683,1491,685,1491,686,1491,687,1491,688,1491,689,1491,690,1491,691,1491,692,1491,693,1491,695,1491,696,1491,697,1491,698,1491,699,1491,700,1491,701,1491,702,1491,703,1491,704,1491,705,1491,706,1491,707,1491,708,1491,709,1491,710,1491,711,1491,712,1491,713,1491,714,1491,715,1491,716,1491,717,1491,718,1491,719,1491,720,1491,721,1491,722,1491,723,1491,724,1491,3089,1491,3158,1498,482,1498,483,1498,484,1498,485,1498,486,1498,487,1498,488,1498,489,1498,490,1498,491,1498,492,1498,493,1498,494,1498,495,1498,496,1498,497,1498,498,1498,499,1498,500,1498,501,1498,502,1498,503,1498,504,1498,505,1498,506,1498,507,1498,508,1498,509,1498,510,1498,511,1498,512,1498,513,1498,514,1498,515,1498,516,1498,517,1498,518,1498,519,1498,520,1498,521,1498,522,1498,523,1498,524,1498,525,1498,526,1498,527,1498,528,1498,529,1498,530,1498,531,1498,532,1498,533,1498,534,1498,535,1498,536,1498,537,1498,538,1498,539,1498,540,1498,541,1498,542,1498,543,1498,544,1498,545,1498,546,1498,547,1498,548,1498,549,1498,550,1498,551,1498,552,1498,553,1498,554,1498,555,1498,556,1498,557,1498,558,1498,559,1498,560,1498,561,1498,562,1498,563,1498,564,1498,565,1498,566,1498,567,1498,568,1498,569,1498,570,1498,571,1498,572,1498,573,1498,574,1498,575,1498,576,1498,577,1498,578,1498,579,1498,580,1498,581,1498,582,1498,583,1498,584,1498,585,1498,586,1498,587,1498,588,1498,589,1498,590,1498,591,1498,592,1498,593,1498,594,1498,595,1498,596,1498,597,1498,598,1498,599,1498,600,1498,601,1498,602,1498,603,1498,604,1498,605,1498,606,1498,607,1498,608,1498,609,1498,610,1498,611,1498,612,1498,613,1498,614,1498,615,1498,616,1498,617,1498,618,1498,619,1498,620,1498,621,1498,622,1498,623,1498,624,1498,625,1498,626,1498,627,1498,628,1498,629,1498,630,1498,631,1498,632,1498,633,1498,634,1498,635,1498,636,1498,637,1498,638,1498,639,1498,640,1498,641,1498,642,1498,643,1498,644,1498,645,1498,646,1498,647,1498,648,1498,649,1498,650,1498,651,1498,652,1498,653,1498,654,1498,655,1498,656,1498,657,1498,658,1498,659,1498,660,1498,661,1498,662,1498,663,1498,664,1498,665,1498,666,1498,667,1498,668,1498,669,1498,670,1498,671,1498,672,1498,673,1498,674,1498,675,1498,676,1498,677,1498,678,1498,679,1498,680,1498,681,1498,682,1498,683,1498,684,1498,685,1498,686,1498,687,1498,688,1498,689,1498,690,1498,691,1498,692,1498,693,1498,695,1498,696,1498,697,1498,698,1498,699,1498,700,1498,701,1498,702,1498,703,1498,704,1498,705,1498,706,1498,707,1498,708,1498,709,1498,710,1498,711,1498,712,1498,713,1498,714,1498,715,1498,716,1498,717,1498,718,1498,719,1498,720,1498,721,1498,722,1498,723,1498,724,1652,483,1652,486,1652,494,1652,501,1652,502,1652,504,1652,508,1652,510,1652,515,1652,522,1652,529,1652,531,1652,543,1652,556,1652,580,1652,588,1652,604,1652,623,1652,624,1652,700,1652,711,1653,483,1653,486,1653,494,1653,501,1653,502,1653,504,1653,508,1653,510,1653,515,1653,522,1653,529,1653,531,1653,543,1653,556,1653,580,1653,588,1653,604,1653,623,1653,624,1653,700,1653,711,1656,490,1656,491,1656,492,1656,512,1656,513,1656,526,1656,527,1656,530,1656,532,1656,534,1656,537,1656,541,1656,544,1656,554,1656,557,1656,559,1656,563,1656,564,1656,573,1656,574,1656,577,1656,578,1656,579,1656,581,1656,599,1656,600,1656,601,1656,603,1656,605,1656,606,1656,612,1656,615,1656,616,1656,622,1656,637,1656,644,1656,645,1656,650,1656,653,1656,692,1656,696,1656,697,1656,703,1656,704,1656,706,1656,708,1656,717,1656,720,1657,490,1657,491,1657,492,1657,512,1657,513,1657,526,1657,527,1657,530,1657,532,1657,534,1657,537,1657,541,1657,544,1657,554,1657,557,1657,559,1657,563,1657,564,1657,573,1657,574,1657,577,1657,578,1657,579,1657,581,1657,599,1657,600,1657,601,1657,603,1657,605,1657,606,1657,612,1657,615,1657,616,1657,622,1657,637,1657,644,1657,645,1657,650,1657,653,1657,692,1657,696,1657,697,1657,703,1657,704,1657,706,1657,708,1657,717,1657,720,1683,484,1683,488,1683,499,1683,536,1683,550,1683,553,1683,562,1683,565,1683,693,1683,695,1683,709,1683,713,1683,715,1683,716,1683,718,1683,722,1683,724,1684,484,1684,488,1684,499,1684,536,1684,550,1684,553,1684,562,1684,565,1684,693,1684,695,1684,709,1684,713,1684,715,1684,716,1684,718,1684,722,1684,724,1698,503,1698,505,1698,509,1698,533,1698,535,1698,548,1698,631,1698,633,1698,636,1698,638,1698,688,1698,705,1698,721,1699,503,1699,505,1699,509,1699,533,1699,535,1699,548,1699,631,1699,633,1699,636,1699,638,1699,688,1699,705,1699,721,1886,514,1886,518,1886,524,1886,552,1886,560,1886,567,1886,590,1886,594,1886,628,1887,514,1887,518,1887,524,1887,552,1887,560,1887,567,1887,590,1887,594,1887,628,2155,698,2161,490,2161,491,2161,492,2161,512,2161,513,2161,526,2161,527,2161,530,2161,532,2161,534,2161,537,2161,541,2161,544,2161,554,2161,557,2161,559,2161,563,2161,564,2161,573,2161,574,2161,577,2161,578,2161,579,2161,581,2161,599,2161,600,2161,601,2161,603,2161,605,2161,606,2161,612,2161,615,2161,616,2161,622,2161,637,2161,638,2161,644,2161,645,2161,650,2161,653,2161,692,2161,696,2161,697,2161,701,2161,703,2161,704,2161,706,2161,708,2161,717,2161,720,2161,3089,2161,3158,2164,638,2211,705,2223,710,2300,489,2319,494,2322,494,2322,495,2325,496,2329,498,2334,500,2334,3089,2356,512,2358,512,2388,483,2388,484,2388,486,2388,488,2388,494,2388,499,2388,501,2388,502,2388,504,2388,508,2388,510,2388,512,2388,515,2388,521,2388,522,2388,529,2388,531,2388,536,2388,543,2388,550,2388,553,2388,556,2388,562,2388,565,2388,574,2388,580,2388,588,2388,604,2388,623,2388,624,2388,693,2388,695,2388,700,2388,709,2388,711,2388,713,2388,715,2388,716,2388,718,2388,722,2388,724,2390,483,2390,486,2390,494,2390,501,2390,502,2390,504,2390,508,2390,510,2390,515,2390,522,2390,529,2390,531,2390,543,2390,556,2390,580,2390,588,2390,604,2390,623,2390,624,2390,700,2390,711,2391,483,2391,486,2391,494,2391,501,2391,502,2391,504,2391,508,2391,510,2391,515,2391,522,2391,529,2391,531,2391,543,2391,556,2391,580,2391,588,2391,604,2391,623,2391,624,2391,700,2391,711,2393,490,2393,491,2393,492,2393,512,2393,513,2393,526,2393,527,2393,530,2393,532,2393,534,2393,537,2393,541,2393,544,2393,554,2393,557,2393,559,2393,563,2393,564,2393,573,2393,574,2393,577,2393,578,2393,579,2393,581,2393,599,2393,600,2393,601,2393,603,2393,605,2393,606,2393,612,2393,615,2393,616,2393,622,2393,637,2393,638,2393,644,2393,645,2393,650,2393,653,2393,692,2393,696,2393,697,2393,703,2393,704,2393,706,2393,708,2393,717,2393,720,2393,3089,2393,3158,2398,523,2403,525,2409,484,2409,488,2409,499,2409,536,2409,550,2409,553,2409,562,2409,565,2409,693,2409,695,2409,709,2409,713,2409,715,2409,716,2409,718,2409,722,2409,724,2417,503,2417,505,2417,509,2417,533,2417,535,2417,548,2417,631,2417,633,2417,636,2417,638,2417,688,2417,705,2417,721,2439,535,2448,539,2450,483,2450,486,2450,494,2450,501,2450,502,2450,504,2450,508,2450,510,2450,515,2450,522,2450,529,2450,531,2450,540,2450,543,2450,556,2450,580,2450,588,2450,604,2450,613,2450,623,2450,624,2450,700,2450,711,2455,542,2479,551,2488,555,2535,490,2535,491,2535,492,2535,512,2535,513,2535,526,2535,527,2535,530,2535,532,2535,534,2535,537,2535,541,2535,544,2535,554,2535,557,2535,559,2535,563,2535,564,2535,571,2535,573,2535,574,2535,577,2535,578,2535,579,2535,581,2535,599,2535,600,2535,601,2535,603,2535,605,2535,606,2535,612,2535,615,2535,616,2535,622,2535,637,2535,638,2535,644,2535,645,2535,650,2535,653,2535,692,2535,696,2535,697,2535,701,2535,703,2535,704,2535,706,2535,708,2535,717,2535,720,2535,3089,2535,3158,2538,572,2543,574,2548,576,2562,512,2562,582,2565,583,2574,483,2574,484,2574,486,2574,488,2574,494,2574,499,2574,501,2574,502,2574,504,2574,508,2574,510,2574,512,2574,515,2574,521,2574,522,2574,529,2574,531,2574,536,2574,543,2574,550,2574,553,2574,556,2574,562,2574,565,2574,574,2574,580,2574,586,2574,588,2574,604,2574,623,2574,624,2574,693,2574,695,2574,700,2574,709,2574,711,2574,713,2574,715,2574,716,2574,718,2574,722,2574,724,2581,589,2588,592,2599,598,2621,607,2626,609,2634,483,2634,486,2634,494,2634,501,2634,502,2634,504,2634,508,2634,510,2634,515,2634,522,2634,529,2634,531,2634,543,2634,556,2634,580,2634,588,2634,604,2634,613,2634,623,2634,624,2634,700,2634,711,2653,619,2653,3158,2668,627,2673,629,2687,638,2687,3158,2688,638,2688,3158,2705,648,2722,655,2727,657,2751,670,2761,676,2785,687,3095,3089,3096,3089,3097,3089,3098,3089,3099,3089,3100,3089,3101,3089,3102,3089,3103,3089,3104,3089,3105,3089,3106,3089,3107,3089,3108,3089,3109,3089,3110,3089,3111,3089,3112,3089,3113,3089,3114,3089,3115,3089,3116,3089,3117,3089,3118,3089,3119,3089,3120,3089,3121,3089,3122,3089,3123,3089,3124,3089,3125,3089,3126,3089,3127,3089,3128,3089,3129,3089,3130,3089,3131,3089,3132,3089,3133,3089,3134,3089,3135,3089,3136,3089,3137,3089,3138,3089,3139,3089,3140,3089,3141,3089,3142,3089,3143,3089,3144,3089,3145,3089,3146,3089,3147,3089,3148,3089,3149,3089,3150,3089,3151,3089,3152,3089,3153,3089,3157,3089,3163,3089],"member":[0,3158,1,3158,2,3158,3,3158,4,3158,5,3158,6,3158,7,3158,8,3158,9,3158,10,3158,11,3159,12,3159,13,3159,14,3159,15,3159,16,3159,17,3159,18,3159,19,3159,20,3159,21,3159,22,3159,23,3159,24,3159,25,3159,26,3159,27,3159,28,3159,29,3159,30,3159,31,3159,32,3159,33,3159,34,3159,35,3159,36,3159,37,3159,38,3159,39,3159,40,3159,41,3159,42,3159,43,3159,44,3159,45,3159,46,3159,47,3159,48,3159,49,3159,50,3089,51,3089,52,3089,53,3089,54,3089,55,3089,56,3089,57,3089,58,3089,59,3089,60,3089,61,3089,62,3089,63,3089,64,3089,65,3089,66,3089,67,3089,68,3089,69,3089,70,3089,71,3089,72,3089,73,3089,74,3089,75,3089,76,3089,77,3089,78,3089,79,3089,80,3089,81,3089,82,3089,83,3089,84,3089,85,3089,86,3089,87,3089,88,3089,89,3089,90,3089,91,3089,92,3089,93,3089,94,3089,95,3089,96,3089,97,3089,98,3089,99,3089,100,3089,101,3089,102,3089,103,3089,104,3089,105,3089,106,3089,107,3089,108,3089,109,3089,110,3089,111,3089,112,3089,113,3089,114,3089,115,3089,116,3089,117,3089,118,3089,119,3089,120,3089,121,3089,122,3089,123,3089,124,3089,125,3089,126,3089,127,3089,128,3089,129,3089,130,3089,131,3089,132,3089,133,3089,134,3089,135,3089,136,3089,137,3089,138,3089,139,3089,140,3089,141,3089,142,3089,143,3089,144,3089,145,3089,146,3089,147,3089,148,3089,149,3089,150,3089,151,3089,152,3089,153,3089,154,3089,155,3089,156,3089,157,3089,158,3089,159,3089,160,3089,161,3089,162,3089,163,3089,164,3089,165,3089,166,3089,167,3089,168,3089,169,3089,170,3089,171,3089,172,3089,173,3089,174,3089,175,3089,176,3089,177,3089,725,482,726,482,727,483,728,483,729,484,730,485,731,485,732,486,733,486,734,486,735,487,736,487,737,488,738,488,739,489,740,489,741,490,742,490,743,491,744,492,745,493,746,494,747,494,748,495,749,495,750,496,751,497,752,497,753,498,754,499,755,499,756,500,757,500,758,501,759,501,760,502,761,502,762,502,763,503,764,503,765,504,766,504,767,505,768,505,769,506,770,506,771,507,772,507,773,508,774,508,775,509,776,510,777,510,778,510,779,511,780,512,781,512,782,513,783,514,784,514,785,515,786,515,787,515,788,516,789,516,790,517,791,517,792,518,793,519,794,519,795,520,796,520,797,521,798,522,799,522,800,522,801,523,802,524,803,525,804,525,805,526,806,527,807,528,808,528,809,529,810,529,811,530,812,530,813,531,814,531,815,532,816,533,817,533,818,534,819,534,820,535,821,536,822,537,823,537,824,538,825,538,826,539,827,540,828,540,829,541,830,542,831,543,832,544,833,545,834,545,835,546,836,546,837,547,838,547,839,548,840,548,841,549,842,549,843,550,844,551,845,551,846,552,847,552,848,553,849,554,850,555,851,556,852,556,853,557,854,558,855,558,856,559,857,559,858,560,859,561,860,561,861,562,862,562,863,563,864,564,865,565,866,565,867,566,868,566,869,567,870,568,871,568,872,569,873,569,874,570,875,570,876,571,877,572,878,573,879,573,880,573,881,573,882,574,883,574,884,574,885,575,886,576,887,576,888,577,889,577,890,578,891,578,892,579,893,579,894,580,895,581,896,581,897,582,898,583,899,584,900,584,901,585,902,585,903,586,904,586,905,587,906,587,907,588,908,588,909,589,910,590,911,591,912,591,913,592,914,592,915,593,916,593,917,594,918,594,919,595,920,595,921,596,922,597,923,597,924,598,925,598,926,599,927,599,928,600,929,601,930,602,931,603,932,603,933,603,934,604,935,604,936,605,937,605,938,606,939,606,940,606,941,607,942,607,943,608,944,609,945,610,946,610,947,611,948,611,949,612,950,612,951,612,952,612,953,613,954,614,955,614,956,615,957,616,958,616,959,617,960,618,961,618,962,619,963,619,964,620,965,620,966,621,967,621,968,622,969,623,970,624,971,624,972,625,973,626,974,626,975,627,976,627,977,628,978,629,979,630,980,630,981,631,982,632,983,632,984,633,985,633,986,634,987,634,988,635,989,635,990,636,991,637,992,638,993,638,994,639,995,639,996,640,997,640,998,641,999,641,1000,642,1001,642,1002,643,1003,643,1004,644,1005,645,1006,645,1007,646,1008,646,1009,647,1010,647,1011,648,1012,648,1013,649,1014,649,1015,650,1016,650,1017,651,1018,651,1019,652,1020,653,1021,654,1022,654,1023,655,1024,656,1025,657,1026,658,1027,658,1028,659,1029,659,1030,660,1031,660,1032,661,1033,661,1034,662,1035,662,1036,663,1037,663,1038,664,1039,664,1040,665,1041,665,1042,666,1043,666,1044,667,1045,667,1046,668,1047,669,1048,670,1049,671,1050,671,1051,672,1052,672,1053,673,1054,673,1055,674,1056,674,1057,675,1058,675,1059,676,1060,676,1061,677,1062,677,1063,678,1064,678,1065,679,1066,679,1067,680,1068,680,1069,681,1070,682,1071,683,1072,683,1073,684,1074,684,1075,685,1076,685,1077,686,1078,686,1079,687,1080,688,1081,689,1082,689,1083,690,1084,690,1085,691,1086,691,1087,692,1088,693,1089,693,1090,694,1091,695,1092,695,1093,696,1094,697,1095,698,1096,699,1097,700,1098,700,1099,700,1100,701,1101,701,1102,702,1103,702,1104,703,1105,704,1106,704,1107,705,1108,706,1109,706,1110,707,1111,707,1112,708,1113,708,1114,709,1115,709,1116,710,1117,711,1118,711,1119,711,1120,712,1121,712,1122,713,1123,714,1124,715,1125,715,1126,716,1127,716,1128,717,1129,718,1130,719,1131,719,1132,720,1133,720,1134,721,1135,721,1136,722,1137,722,1138,723,1139,723,1140,724,1141,694,1142,439,1143,439,1144,439,1145,439,1146,439,1147,439,1148,439,1149,439,1150,440,1151,440,1152,440,1153,440,1154,440,1155,440,1156,440,1157,440,1158,441,1159,441,1160,441,1161,441,1162,441,1163,441,1164,441,1165,441,1166,442,1167,442,1168,442,1169,442,1170,442,1171,442,1172,442,1173,442,1174,443,1175,443,1176,443,1177,443,1178,443,1179,443,1180,443,1181,443,1182,444,1183,444,1184,444,1185,444,1186,444,1187,444,1188,444,1189,444,1190,445,1191,445,1192,445,1193,445,1194,445,1195,445,1196,445,1197,445,1198,446,1199,446,1200,446,1201,446,1202,446,1203,446,1204,446,1205,446,1206,447,1207,447,1208,447,1209,447,1210,447,1211,447,1212,447,1213,447,1214,448,1215,448,1216,448,1217,448,1218,448,1219,448,1220,448,1221,448,1222,449,1223,449,1224,449,1225,449,1226,449,1227,449,1228,449,1229,449,1230,450,1231,450,1232,450,1233,450,1234,450,1235,450,1236,450,1237,450,1238,451,1239,451,1240,451,1241,451,1242,451,1243,451,1244,451,1245,451,1246,452,1247,452,1248,452,1249,452,1250,452,1251,452,1252,452,1253,452,1254,453,1255,453,1256,453,1257,453,1258,453,1259,453,1260,453,1261,453,1262,454,1263,454,1264,454,1265,454,1266,454,1267,454,1268,454,1269,454,1270,455,1271,455,1272,455,1273,455,1274,455,1275,455,1276,455,1277,455,1278,456,1279,456,1280,456,1281,456,1282,456,1283,456,1284,456,1285,456,1286,457,1287,457,1288,457,1289,457,1290,457,1291,457,1292,457,1293,457,1294,458,1295,458,1296,458,1297,458,1298,458,1299,458,1300,458,1301,458,1302,459,1303,459,1304,459,1305,459,1306,459,1307,459,1308,459,1309,459,1310,460,1311,460,1312,460,1313,460,1314,460,1315,460,1316,460,1317,460,1318,461,1319,461,1320,461,1321,461,1322,461,1323,461,1324,461,1325,461,1326,462,1327,462,1328,462,1329,462,1330,462,1331,462,1332,462,1333,462,1334,463,1335,463,1336,463,1337,463,1338,463,1339,463,1340,463,1341,463,1342,464,1343,464,1344,464,1345,464,1346,464,1347,464,1348,464,1349,464,1350,465,1351,465,1352,465,1353,465,1354,465,1355,465,1356,465,1357,465,1358,466,1359,466,1360,466,1361,466,1362,466,1363,466,1364,466,1365,466,1366,467,1367,467,1368,467,1369,467,1370,467,1371,467,1372,467,1373,467,1374,468,1375,468,1376,468,1377,468,1378,468,1379,468,1380,468,1381,468,1382,469,1383,469,1384,469,1385,469,1386,469,1387,469,1388,469,1389,469,1390,470,1391,470,1392,470,1393,470,1394,470,1395,470,1396,470,1397,470,1398,471,1399,471,1400,471,1401,471,1402,471,1403,471,1404,471,1405,471,1406,472,1407,472,1408,472,1409,472,1410,472,1411,472,1412,472,1413,472,1414,473,1415,473,1416,473,1417,473,1418,473,1419,473,1420,473,1421,473,1422,474,1423,474,1424,474,1425,474,1426,474,1427,474,1428,474,1429,474,1430,475,1431,475,1432,475,1433,475,1434,475,1435,475,1436,475,1437,475,1438,476,1439,476,1440,476,1441,476,1442,476,1443,476,1444,476,1445,476,1446,477,1447,477,1448,477,1449,477,1450,477,1451,477,1452,477,1453,477,1454,478,1455,478,1456,478,1457,478,1458,478,1459,478,1460,478,1461,478,1462,479,1463,479,1464,479,1465,479,1466,479,1467,479,1468,479,1469,479,1470,480,1471,480,1472,480,1473,480,1474,480,1475,480,1476,480,1477,480,1478,481,1479,481,1480,481,1481,481,1482,481,1483,481,1484,481,1485,481,1500,482,1501,482,1502,482,1503,482,1504,483,1505,483,1506,483,1507,483,1508,484,1509,484,1510,484,1511,484,1512,485,1513,485,1514,485,1515,486,1516,486,1517,486,1518,486,1519,487,1520,487,1521,487,1522,488,1523,488,1524,488,1525,488,1526,489,1527,489,1528,489,1529,490,1530,490,1531,490,1532,490,1533,491,1534,491,1535,491,1536,491,1537,492,1538,492,1539,492,1540,492,1541,493,1542,493,1543,493,1544,494,1545,494,1546,494,1547,494,1548,495,1549,495,1550,495,1551,495,1552,496,1553,496,1554,496,1555,496,1556,497,1557,497,1558,497,1559,497,1560,498,1561,498,1562,498,1563,498,1564,499,1565,499,1566,499,1567,499,1568,500,1569,500,1570,500,1571,501,1572,501,1573,501,1574,501,1575,502,1576,502,1577,502,1578,502,1579,503,1580,503,1581,503,1582,503,1583,504,1584,504,1585,504,1586,504,1587,505,1588,505,1589,505,1590,505,1591,506,1592,506,1593,506,1594,506,1595,507,1596,507,1597,507,1598,507,1599,508,1600,508,1601,508,1602,508,1603,509,1604,509,1605,509,1606,509,1607,510,1608,510,1609,510,1610,510,1611,511,1612,511,1613,511,1614,512,1615,512,1616,512,1617,512,1618,513,1619,513,1620,513,1621,513,1622,514,1623,514,1624,514,1625,514,1626,515,1627,515,1628,515,1629,515,1630,516,1631,516,1632,516,1633,517,1634,517,1635,517,1636,518,1637,518,1638,518,1639,518,1640,519,1641,519,1642,519,1643,519,1644,520,1645,520,1646,520,1647,520,1648,521,1649,521,1650,521,1659,522,1660,522,1661,522,1662,522,1663,523,1664,523,1665,523,1666,523,1667,524,1668,524,1669,524,1670,524,1671,525,1672,525,1673,525,1674,526,1675,526,1676,526,1677,526,1678,527,1679,527,1680,527,1681,527,1686,528,1687,528,1688,528,1689,529,1690,529,1691,529,1692,529,1693,530,1694,530,1695,530,1696,530,1701,531,1702,531,1703,531,1704,531,1705,532,1706,532,1707,532,1708,532,1709,533,1710,533,1711,533,1712,533,1713,534,1714,534,1715,534,1716,534,1717,535,1718,535,1719,535,1720,535,1721,536,1722,536,1723,536,1724,536,1725,537,1726,537,1727,537,1728,537,1729,538,1730,538,1731,538,1732,538,1733,539,1734,539,1735,539,1736,540,1737,540,1738,540,1739,540,1740,541,1741,541,1742,541,1743,541,1744,542,1745,542,1746,542,1747,542,1748,543,1749,543,1750,543,1751,543,1752,544,1753,544,1754,544,1755,544,1756,545,1757,545,1758,545,1759,545,1760,546,1761,546,1762,546,1763,547,1764,547,1765,547,1766,547,1767,548,1768,548,1769,548,1770,548,1771,549,1772,549,1773,549,1774,550,1775,550,1776,550,1777,550,1778,551,1779,551,1780,551,1781,551,1782,552,1783,552,1784,552,1785,552,1786,553,1787,553,1788,553,1789,553,1790,554,1791,554,1792,554,1793,554,1794,555,1795,555,1796,555,1797,555,1798,556,1799,556,1800,556,1801,556,1802,557,1803,557,1804,557,1805,557,1806,558,1807,558,1808,558,1809,559,1810,559,1811,559,1812,559,1813,560,1814,560,1815,560,1816,560,1817,561,1818,561,1819,561,1820,562,1821,562,1822,562,1823,562,1824,563,1825,563,1826,563,1827,563,1828,564,1829,564,1830,564,1831,564,1832,565,1833,565,1834,565,1835,565,1836,566,1837,566,1838,566,1839,567,1840,567,1841,567,1842,567,1843,568,1844,568,1845,568,1846,568,1847,569,1848,569,1849,569,1850,569,1851,570,1852,570,1853,570,1854,571,1855,571,1856,571,1857,571,1858,572,1859,572,1860,572,1861,573,1862,573,1863,573,1864,573,1865,574,1866,574,1867,574,1868,574,1869,575,1870,575,1871,575,1872,576,1873,576,1874,576,1875,576,1877,577,1878,577,1879,577,1880,577,1881,578,1882,578,1883,578,1884,578,1889,579,1890,579,1891,579,1892,579,1893,580,1894,580,1895,580,1896,580,1897,581,1898,581,1899,581,1900,581,1901,582,1902,582,1903,582,1904,582,1905,583,1906,583,1907,583,1908,583,1909,584,1910,584,1911,584,1912,585,1913,585,1914,585,1915,586,1916,586,1917,586,1918,586,1920,587,1921,587,1922,587,1923,588,1924,588,1925,588,1926,588,1927,589,1928,589,1929,589,1930,589,1932,590,1933,590,1934,590,1935,590,1936,591,1937,591,1938,591,1939,592,1940,592,1941,592,1942,592,1943,593,1944,593,1945,593,1946,594,1947,594,1948,594,1949,594,1950,595,1951,595,1952,595,1953,595,1954,596,1955,596,1956,596,1957,597,1958,597,1959,597,1960,597,1961,598,1962,598,1963,598,1964,599,1965,599,1966,599,1967,599,1968,600,1969,600,1970,600,1971,600,1972,601,1973,601,1974,601,1975,601,1976,602,1977,602,1978,602,1980,603,1981,603,1982,603,1983,603,1985,604,1986,604,1987,604,1988,604,1989,605,1990,605,1991,605,1992,605,1993,606,1994,606,1995,606,1996,606,1997,607,1998,607,1999,607,2000,607,2001,608,2002,608,2003,608,2004,609,2005,609,2006,609,2007,609,2008,610,2009,610,2010,610,2011,611,2012,611,2013,611,2014,611,2015,612,2016,612,2017,612,2018,612,2019,613,2020,613,2021,613,2022,614,2023,614,2024,614,2025,614,2026,615,2027,615,2028,615,2029,615,2030,616,2031,616,2032,616,2033,616,2034,617,2035,617,2036,617,2037,618,2038,618,2039,618,2040,619,2041,619,2042,619,2043,620,2044,620,2045,620,2046,620,2053,621,2054,621,2055,621,2056,621,2057,622,2058,622,2059,622,2060,622,2061,623,2062,623,2063,623,2064,623,2065,624,2066,624,2067,624,2068,624,2069,625,2070,625,2071,625,2072,626,2073,626,2074,626,2075,626,2076,627,2077,627,2078,627,2079,627,2080,628,2081,628,2082,628,2083,628,2084,629,2085,629,2086,629,2087,630,2088,630,2089,630,2090,630,2091,631,2092,631,2093,631,2094,631,2095,632,2096,632,2097,632,2098,632,2099,633,2100,633,2101,633,2102,633,2103,634,2104,634,2105,634,2106,634,2109,635,2110,635,2111,635,2112,635,2113,636,2114,636,2115,636,2116,636,2117,637,2118,637,2119,637,2120,637,2122,638,2123,638,2124,638,2125,638,2126,639,2127,639,2128,639,2129,639,2130,640,2131,640,2132,640,2133,640,2134,641,2135,641,2136,641,2137,642,2138,642,2139,642,2140,642,2141,643,2142,643,2143,643,2144,643,2145,644,2146,644,2147,644,2148,644,2149,645,2150,645,2151,645,2152,645,2165,646,2166,646,2167,646,2168,646,2169,647,2170,647,2171,647,2172,648,2173,648,2174,648,2175,648,2176,649,2177,649,2178,649,2179,649,2180,650,2181,650,2182,650,2183,650,2184,651,2185,651,2186,651,2187,652,2188,652,2189,652,2190,653,2191,653,2192,653,2193,653,2194,654,2195,654,2196,654,2197,654,2198,655,2199,655,2200,655,2201,656,2202,656,2203,656,2204,657,2205,657,2206,657,2207,657,2251,658,2252,658,2253,658,2254,659,2255,659,2256,659,2257,659,2258,660,2259,660,2260,660,2261,660,2262,661,2263,661,2264,661,2265,662,2266,662,2267,662,2281,663,2282,663,2283,663,2284,664,2285,664,2286,664,2287,664,2288,665,2289,665,2290,665,2291,666,2292,666,2293,666,2294,666,2295,667,2296,667,2297,667,2309,668,2310,668,2311,668,2312,669,2313,669,2314,669,2315,670,2316,670,2317,670,2367,671,2368,671,2369,671,2370,672,2371,672,2372,672,2373,672,2374,673,2375,673,2376,673,2377,673,2378,674,2379,674,2380,674,2381,674,2387,263,2420,675,2421,675,2422,675,2423,676,2424,676,2425,676,2426,677,2427,677,2428,677,2429,678,2430,678,2431,678,2463,679,2464,679,2465,679,2466,680,2467,680,2468,680,2469,680,2513,681,2514,681,2515,681,2516,682,2517,682,2518,682,2519,683,2520,683,2521,683,2522,684,2523,684,2524,684,2525,684,2526,685,2527,685,2528,685,2566,686,2567,686,2568,686,2610,687,2611,687,2612,687,2633,360,2642,688,2643,688,2644,688,2645,688,2646,689,2647,689,2648,689,2715,690,2716,690,2717,690,2718,690,2762,691,2763,691,2764,691,2793,692,2794,692,2795,692,2796,692,2797,693,2798,693,2799,693,2800,693,2801,695,2802,695,2803,695,2804,695,2805,696,2806,696,2807,696,2808,696,2809,697,2810,697,2811,697,2812,697,2813,698,2814,698,2815,698,2816,698,2817,699,2818,699,2819,699,2820,700,2821,700,2822,700,2823,700,2824,701,2825,701,2826,701,2827,701,2828,702,2829,702,2830,702,2831,702,2832,703,2833,703,2834,703,2835,703,2836,704,2837,704,2838,704,2839,704,2840,705,2841,705,2842,705,2843,705,2844,706,2845,706,2846,706,2847,706,2848,707,2849,707,2850,707,2851,708,2852,708,2853,708,2854,708,2855,709,2856,709,2857,709,2858,709,2859,710,2860,710,2861,710,2862,710,2863,711,2864,711,2865,711,2866,711,2867,712,2868,712,2869,712,2870,713,2871,713,2872,713,2873,713,2874,714,2875,714,2876,714,2877,715,2878,715,2879,715,2880,715,2881,716,2882,716,2883,716,2884,716,2885,717,2886,717,2887,717,2888,717,2889,718,2890,718,2891,718,2892,718,2893,719,2894,719,2895,719,2896,719,2897,720,2898,720,2899,720,2900,720,2901,721,2902,721,2903,721,2904,721,2905,722,2906,722,2907,722,2908,722,2909,723,2910,723,2911,723,2912,724,2913,724,2914,724,2915,724,2916,439,2917,439,2918,439,2919,440,2920,440,2921,440,2922,441,2923,441,2924,441,2925,442,2926,442,2927,442,2928,443,2929,443,2930,443,2931,444,2932,444,2933,444,2934,445,2935,445,2936,445,2937,446,2938,446,2939,446,2940,447,2941,447,2942,447,2943,448,2944,448,2945,448,2946,449,2947,449,2948,449,2949,450,2950,450,2951,450,2952,451,2953,451,2954,451,2955,452,2956,452,2957,452,2958,453,2959,453,2960,453,2961,454,2962,454,2963,454,2964,455,2965,455,2966,455,2967,456,2968,456,2969,456,2970,457,2971,457,2972,457,2973,458,2974,458,2975,458,2976,459,2977,459,2978,459,2979,460,2980,460,2981,460,2982,461,2983,461,2984,461,2985,462,2986,462,2987,462,2988,463,2989,463,2990,463,2991,464,2992,464,2993,464,2994,465,2995,465,2996,465,2997,466,2998,466,2999,466,3000,467,3001,467,3002,467,3003,468,3004,468,3005,468,3006,469,3007,469,3008,469,3009,470,3010,470,3011,470,3012,471,3013,471,3014,471,3015,472,3016,472,3017,472,3018,473,3019,473,3020,473,3021,474,3022,474,3023,474,3024,475,3025,475,3026,475,3027,476,3028,476,3029,476,3030,477,3031,477,3032,477,3033,478,3034,478,3035,478,3036,479,3037,479,3038,479,3039,480,3040,480,3041,480,3042,481,3043,481,3044,481],"requirement":[1486,178,1492,179,1494,180,1496,181,1497,182,1651,183,1655,184,1682,185,1697,186,1876,187,1885,188,1919,189,1931,190,1979,191,1984,192,2047,193,2049,194,2051,195,2107,196,2121,197,2153,198,2156,199,2158,200,2160,201,2162,202,2163,203,2208,204,2210,205,2213,206,2215,207,2217,208,2219,209,2221,210,2224,211,2226,212,2228,213,2230,214,2232,215,2234,216,2236,217,2238,218,2240,219,2241,220,2243,221,2245,222,2247,223,2249,224,2268,225,2269,226,2271,227,2273,228,2275,229,2277,230,2279,231,2298,232,2301,233,2303,234,2305,235,2307,236,2318,237,2321,238,2323,239,2326,240,2327,241,2330,242,2332,243,2335,244,2337,245,2339,246,2341,247,2343,248,2345,249,2346,250,2347,251,2349,252,2351,253,2353,254,2355,255,2359,256,2361,257,2363,258,2365,259,2382,260,2384,261,2385,262,2386,263,2389,264,2392,265,2394,266,2396,267,2399,268,2401,269,2404,270,2406,271,2408,272,2410,273,2412,274,2414,275,2416,276,2418,277,2432,278,2434,279,2436,280,2438,281,2441,282,2443,283,2445,284,2446,285,2449,286,2451,287,2453,288,2456,289,2458,290,2460,291,2461,292,2470,293,2471,294,2473,295,2475,296,2477,297,2480,298,2482,299,2484,300,2486,301,2489,302,2491,303,2493,304,2495,305,2497,306,2499,307,2501,308,2503,309,2505,310,2507,311,2509,312,2511,313,2529,314,2530,315,2531,316,2533,317,2536,318,2539,319,2541,320,2544,321,2546,322,2549,323,2551,324,2553,325,2554,326,2556,327,2558,328,2560,329,2563,330,2569,331,2571,332,2573,333,2575,334,2577,335,2579,336,2582,337,2584,338,2586,339,2589,340,2591,341,2593,342,2594,343,2596,344,2597,345,2600,346,2602,347,2604,348,2606,349,2608,350,2613,351,2615,352,2617,353,2619,354,2622,355,2624,356,2627,357,2629,358,2630,359,2632,360,2635,361,2636,362,2638,363,2640,364,2649,365,2651,366,2654,367,2655,368,2656,369,2658,370,2660,371,2662,372,2664,373,2666,374,2669,375,2671,376,2674,377,2675,378,2677,379,2678,380,2680,381,2681,382,2682,383,2684,384,2686,385,2690,386,2691,387,2692,388,2694,389,2695,390,2696,391,2698,392,2700,393,2701,394,2703,395,2706,396,2707,397,2709,398,2711,399,2713,400,2719,401,2720,402,2723,403,2725,404,2728,405,2730,406,2731,407,2733,408,2735,409,2737,410,2739,411,2740,412,2742,413,2743,414,2745,415,2747,416,2749,417,2752,418,2754,419,2755,420,2756,421,2757,422,2759,423,2765,424,2767,425,2769,426,2771,427,2772,428,2774,429,2776,430,2778,431,2779,432,2781,433,2783,434,2786,435,2788,436,2790,437,2791,438],"defaultImplementation":[1487,2384,1488,2460,1489,2706,1490,2771,1491,2778,1493,2553,1495,2392,1498,1496,1499,1486,1652,1497,1653,1919,1654,2389,1656,1497,1657,1931,1658,2392,1683,1497,1684,1979,1685,2408,1698,1497,1699,1984,1700,2416,1886,1497,1887,2121,1888,2553,2048,2408,2050,2408,2052,2392,2108,2392,2154,1486,2155,2326,2157,1486,2159,2389,2161,2533,2164,2392,2209,2392,2211,2461,2212,2416,2214,2392,2216,1486,2218,2392,2220,2408,2222,1486,2223,2385,2225,2389,2227,1486,2229,2408,2231,1486,2233,2408,2235,2408,2237,2392,2239,2408,2242,2392,2244,2416,2246,2408,2248,1486,2250,2408,2270,2389,2272,2408,2274,1486,2276,2389,2278,1486,2280,2408,2299,1486,2300,2470,2302,2392,2304,2392,2306,2392,2308,1486,2319,2321,2320,2389,2322,2382,2324,1486,2325,2529,2328,1486,2329,2530,2331,2408,2333,1486,2334,2345,2336,2389,2338,2389,2340,2416,2342,2389,2344,2416,2348,2389,2350,2416,2352,2389,2354,1486,2356,2560,2357,2392,2358,2386,2360,2392,2362,2553,2364,2389,2366,1486,2383,1486,2388,2573,2390,2632,2391,2386,2393,2160,2395,2389,2397,1486,2398,2593,2400,2553,2402,1486,2403,2162,2405,2392,2407,2392,2409,2386,2411,1486,2413,2389,2415,2392,2417,2353,2419,2389,2433,2392,2435,2416,2437,2392,2439,2461,2440,2416,2442,2408,2444,2392,2447,1486,2448,2629,2450,2493,2452,2392,2454,1486,2455,2635,2457,2389,2459,2392,2462,1486,2472,2416,2474,1486,2476,2408,2478,1486,2479,2654,2481,2553,2483,2408,2485,2392,2487,1486,2488,2655,2490,2389,2492,2392,2494,1486,2496,2392,2498,2553,2500,1486,2502,2408,2504,2392,2506,2392,2508,2408,2510,1486,2512,2553,2532,1486,2534,1486,2535,2677,2537,1486,2538,2680,2540,2392,2542,2392,2543,2386,2545,1486,2547,1486,2548,2681,2550,2392,2552,2392,2555,2392,2557,2389,2559,2392,2561,1486,2562,2690,2564,1486,2565,2691,2570,1486,2572,1486,2574,2226,2576,1486,2578,2389,2580,1486,2581,2695,2583,2553,2585,1486,2587,1486,2588,2700,2590,1486,2592,2553,2595,1486,2598,1486,2599,2346,2601,2392,2603,2392,2605,2392,2607,1486,2609,2392,2614,2389,2616,2392,2618,2392,2620,1486,2621,2719,2623,1486,2625,1486,2626,2730,2628,1486,2631,2392,2634,2449,2637,2392,2639,2392,2641,1486,2650,1486,2652,1486,2653,2268,2657,2392,2659,2389,2661,2389,2663,1486,2665,1486,2667,1486,2668,2742,2670,2553,2672,1486,2673,2674,2676,2416,2679,2416,2683,2416,2685,2392,2687,2461,2688,2163,2689,2416,2693,1486,2697,2392,2699,2392,2702,1486,2704,1486,2705,2754,2708,2392,2710,1486,2712,1486,2714,2392,2721,1486,2722,2755,2724,1486,2726,1486,2727,2756,2729,1486,2732,1486,2734,1486,2736,1486,2738,1486,2741,1486,2744,1486,2746,1486,2748,1486,2750,1486,2751,2694,2753,1486,2758,1486,2760,1486,2761,2739,2766,1486,2768,1486,2770,1486,2773,1486,2775,1486,2777,1486,2780,1486,2782,1486,2784,1486,2785,2790,2787,2416,2789,1486,2792,1486]},"hints":[0,1486,1,2353,2,2392,3,2416,4,2443,5,2553,6,2591,7,2608,8,2615,9,2651,10,2686,11,2596,12,2240,13,2445,14,2384,15,2460,16,2706,17,2771,18,2778,19,2326,20,2385,21,2470,22,2529,23,2530,24,2345,25,2593,26,2162,27,2629,28,2635,29,2654,30,2655,31,2677,32,2680,33,2681,34,2690,35,2691,36,2695,37,2700,38,2346,39,2719,40,2730,41,2268,42,2742,43,2674,44,2754,45,2755,46,2756,47,2694,48,2739,49,2790,171,2596,172,1486,173,2240,174,2332,175,2392,176,2443,177,2615,725,3165,748,3165,751,3165,769,3165,771,3165,793,3165,795,3165,824,3165,827,3165,833,3165,837,3165,870,3165,872,3165,878,3167,903,3165,919,3165,922,3165,939,3169,947,3165,949,3171,954,3165,964,3165,966,3165,979,3165,982,3165,986,3165,988,3165,994,3165,996,3165,1000,3165,1002,3165,1007,3165,1013,3165,1021,3165,1028,3165,1038,3165,1042,3165,1051,3165,1053,3165,1055,3165,1067,3165,1073,3165,1083,3165,1100,3165,1102,3165,1130,3165,1487,1487,1488,1488,1489,1489,1490,1490,1491,1491,1498,1498,1500,1497,1502,1486,1503,2268,1504,1651,1505,1486,1506,2389,1507,2269,1508,1682,1509,1486,1510,2408,1511,2271,1512,1497,1513,1486,1514,2273,1515,1651,1516,1486,1517,2389,1518,2275,1519,1497,1520,1486,1521,2277,1522,1682,1523,1486,1524,2408,1525,2279,1526,1497,1527,1486,1528,2298,1529,1655,1530,1486,1531,2392,1532,2301,1533,1655,1534,1486,1535,2392,1536,2303,1537,1655,1538,1486,1539,2392,1540,2305,1541,1497,1542,1486,1543,2307,1544,1651,1545,1486,1546,2389,1547,2318,1548,1497,1550,1486,1551,2321,1552,1497,1553,1486,1554,2323,1555,1876,1556,1497,1558,1486,1559,2326,1560,1497,1561,1486,1562,2327,1563,1876,1564,1682,1565,1486,1566,2408,1567,2330,1568,1497,1569,1486,1570,2332,1571,1651,1572,1486,1573,2389,1574,2335,1575,1651,1576,1486,1577,2389,1578,2337,1579,1697,1580,1486,1581,2416,1582,2339,1583,1651,1584,1486,1585,2389,1586,2341,1587,1697,1588,1486,1589,2416,1590,2343,1591,1497,1593,1486,1594,2345,1595,1497,1597,1486,1598,2346,1599,1651,1600,1486,1601,2389,1602,2347,1603,1697,1604,1486,1605,2416,1606,2349,1607,1651,1608,1486,1609,2389,1610,2351,1611,1497,1612,1486,1613,2353,1614,1655,1615,1486,1616,2392,1617,2355,1618,1655,1619,1486,1620,2392,1621,2359,1622,1885,1623,1486,1624,2553,1625,2361,1626,1651,1627,1486,1628,2389,1629,2363,1630,1497,1631,1486,1632,2365,1633,1497,1634,1486,1635,2382,1636,1885,1637,1486,1638,2553,1639,1492,1640,1497,1642,1486,1643,2384,1644,1497,1646,1486,1647,2385,1648,1497,1649,1486,1650,2386,1652,1652,1653,1653,1656,1656,1657,1657,1659,1651,1660,1486,1661,2389,1662,2394,1663,1497,1664,1486,1665,2396,1666,1876,1667,1885,1668,1486,1669,2553,1670,2399,1671,1497,1672,1486,1673,2401,1674,1655,1675,1486,1676,2392,1677,2404,1678,1655,1679,1486,1680,2392,1681,2406,1683,1683,1684,1684,1686,1497,1687,1486,1688,2410,1689,1651,1690,1486,1691,2389,1692,2412,1693,1655,1694,1486,1695,2392,1696,2414,1698,1698,1699,1699,1701,1651,1702,1486,1703,2389,1704,2418,1705,1655,1706,1486,1707,2392,1708,2432,1709,1697,1710,1486,1711,2416,1712,2434,1713,1655,1714,1486,1715,2392,1716,2436,1717,1697,1718,1486,1719,2416,1720,2438,1721,1682,1722,1486,1723,2408,1724,2441,1725,1655,1726,1486,1727,2392,1728,2443,1729,1497,1731,1486,1732,2445,1733,1497,1734,1486,1735,2446,1736,1497,1738,1486,1739,2449,1740,1655,1741,1486,1742,2392,1743,2451,1744,1497,1745,1486,1746,2453,1747,1876,1748,1651,1749,1486,1750,2389,1751,2456,1752,1655,1753,1486,1754,2392,1755,2458,1756,1497,1758,1486,1759,2460,1760,1497,1761,1486,1762,2461,1763,1497,1765,1486,1766,2470,1767,1697,1768,1486,1769,2416,1770,2471,1771,1497,1772,1486,1773,2473,1774,1682,1775,1486,1776,2408,1777,2475,1778,1497,1779,1486,1780,2477,1781,1876,1782,1885,1783,1486,1784,2553,1785,2480,1786,1682,1787,1486,1788,2408,1789,2482,1790,1655,1791,1486,1792,2392,1793,2484,1794,1497,1795,1486,1796,2486,1797,1876,1798,1651,1799,1486,1800,2389,1801,2489,1802,1655,1803,1486,1804,2392,1805,2491,1806,1497,1807,1486,1808,2493,1809,1655,1810,1486,1811,2392,1812,2495,1813,1885,1814,1486,1815,2553,1816,2497,1817,1497,1818,1486,1819,2499,1820,1682,1821,1486,1822,2408,1823,2501,1824,1655,1825,1486,1826,2392,1827,2503,1828,1486,1829,2505,1830,2392,1831,1655,1832,1682,1833,1486,1834,2408,1835,2507,1836,1497,1837,1486,1838,2509,1839,1885,1840,1486,1841,2553,1842,2511,1843,1497,1845,1486,1846,2529,1847,1497,1849,1486,1850,2530,1851,1497,1852,1486,1853,2531,1854,1497,1855,1486,1856,2533,1857,1876,1858,1497,1859,1486,1860,2536,1861,1655,1862,1486,1863,2392,1864,2539,1865,1655,1866,1486,1867,2392,1868,2541,1869,1497,1870,1486,1871,2544,1872,1497,1873,1486,1874,2546,1875,1876,1877,1655,1878,1486,1879,2392,1880,2549,1881,1655,1882,1486,1883,2392,1884,2551,1886,1886,1887,1887,1889,1655,1890,1486,1891,2392,1892,2554,1893,1651,1894,1486,1895,2389,1896,2556,1897,1655,1898,1486,1899,2392,1900,2558,1901,1497,1902,1486,1903,2560,1904,1876,1905,1497,1906,1486,1907,2563,1908,1876,1909,1497,1910,1486,1911,2569,1912,1497,1913,1486,1914,2571,1915,1497,1917,1486,1918,2573,1920,1497,1921,1486,1922,2575,1923,1651,1924,1486,1925,2389,1926,2577,1927,1497,1928,1486,1929,2579,1930,1876,1932,1885,1933,1486,1934,2553,1935,2582,1936,1497,1937,1486,1938,2584,1939,1497,1940,1486,1941,2586,1942,1876,1943,1497,1944,1486,1945,2589,1946,1885,1947,1486,1948,2553,1949,2591,1950,1497,1952,1486,1953,2593,1954,1497,1955,1486,1956,2594,1957,1497,1959,1486,1960,2596,1961,1497,1962,1486,1963,2597,1964,1655,1965,1486,1966,2392,1967,2600,1968,1655,1969,1486,1970,2392,1971,2602,1972,1655,1973,1486,1974,2392,1975,2604,1976,1497,1977,1486,1978,2606,1980,1655,1981,1486,1982,2392,1983,2608,1985,1651,1986,1486,1987,2389,1988,2613,1989,1655,1990,1486,1991,2392,1992,2615,1993,1655,1994,1486,1995,2392,1996,2617,1997,1497,1998,1486,1999,2619,2000,1876,2001,1497,2002,1486,2003,2622,2004,1497,2005,1486,2006,2624,2007,1876,2008,1497,2009,1486,2010,2627,2011,1497,2013,1486,2014,2629,2015,1655,2016,1486,2017,2392,2018,2630,2019,1497,2020,1486,2021,2632,2022,1497,2024,1486,2025,2635,2026,1655,2027,1486,2028,2392,2029,2636,2030,1655,2031,1486,2032,2392,2033,2638,2034,1497,2035,1486,2036,2640,2037,1497,2038,1486,2039,2649,2040,1497,2041,1486,2042,2651,2043,1497,2045,1486,2046,2654,2053,1497,2055,1486,2056,2655,2057,1655,2058,1486,2059,2392,2060,2656,2061,1486,2062,2658,2063,2389,2064,1651,2065,1651,2066,1486,2067,2389,2068,2660,2069,1497,2070,1486,2071,2662,2072,1497,2073,1486,2074,2664,2075,1876,2076,1497,2077,1486,2078,2666,2079,1876,2080,1885,2081,1486,2082,2553,2083,2669,2084,1497,2085,1486,2086,2671,2087,1497,2089,1486,2090,2674,2091,1697,2092,1486,2093,2416,2094,2675,2095,1497,2097,1486,2098,2677,2099,1697,2100,1486,2101,2416,2102,2678,2103,1497,2105,1486,2106,2680,2109,1497,2111,1486,2112,2681,2113,1697,2114,1486,2115,2416,2116,2682,2117,1655,2118,1486,2119,2392,2120,2684,2122,1697,2123,1486,2124,2416,2125,2686,2126,1497,2128,1486,2129,2690,2130,1497,2132,1486,2133,2691,2134,1497,2135,1486,2136,2692,2137,1497,2139,1486,2140,2694,2141,1497,2143,1486,2144,2695,2145,1655,2146,1486,2147,2392,2148,2696,2149,1655,2150,1486,2151,2392,2152,2698,2155,2155,2161,2161,2164,2164,2165,1497,2167,1486,2168,2700,2169,1497,2170,1486,2171,2701,2172,1497,2173,1486,2174,2703,2175,1876,2176,1497,2178,1486,2179,2706,2180,1655,2181,1486,2182,2392,2183,2707,2184,1497,2185,1486,2186,2709,2187,1497,2188,1486,2189,2711,2190,1655,2191,1486,2192,2392,2193,2713,2194,1497,2196,1486,2197,2719,2198,1497,2199,1486,2200,2720,2201,1497,2202,1486,2203,2723,2204,1497,2205,1486,2206,2725,2207,1876,2211,2211,2223,2223,2251,1497,2252,1486,2253,2728,2254,1497,2256,1486,2257,2730,2258,1497,2259,1486,2260,2731,2261,1876,2262,1497,2263,1486,2264,2733,2265,1497,2266,1486,2267,2735,2281,1497,2282,1486,2283,2737,2284,1497,2286,1486,2287,2739,2288,1497,2289,1486,2290,2740,2291,1497,2293,1486,2294,2742,2295,1497,2296,1486,2297,2743,2300,2300,2309,1497,2310,1486,2311,2745,2312,1497,2313,1486,2314,2747,2315,1497,2316,1486,2317,2749,2319,2319,2322,2322,2325,2325,2329,2329,2334,2334,2356,2356,2358,2358,2367,1497,2368,1486,2369,2752,2370,1497,2372,1486,2373,2754,2374,1497,2376,1486,2377,2755,2378,1497,2380,1486,2381,2756,2388,2388,2390,2390,2391,2391,2393,2393,2398,2398,2403,2403,2409,2409,2417,2417,2420,1497,2421,1486,2422,2757,2423,1497,2424,1486,2425,2759,2426,1497,2427,1486,2428,2765,2429,1497,2430,1486,2431,2767,2439,2439,2448,2448,2450,2450,2455,2455,2463,1497,2464,1486,2465,2769,2466,1497,2468,1486,2469,2771,2479,2479,2488,2488,2513,1497,2514,1486,2515,2772,2516,1497,2517,1486,2518,2774,2519,1497,2520,1486,2521,2776,2522,1497,2524,1486,2525,2778,2526,1497,2527,1486,2528,2779,2535,2535,2538,2538,2543,2543,2548,2548,2562,2562,2565,2565,2566,1497,2567,1486,2568,2781,2574,2574,2581,2581,2588,2588,2599,2599,2610,1497,2611,1486,2612,2783,2621,2621,2626,2626,2634,2634,2642,1697,2643,1486,2644,2416,2645,2786,2646,1497,2647,1486,2648,2788,2653,2653,2668,2668,2673,2673,2687,2687,2688,2688,2705,2705,2715,1497,2717,1486,2718,2790,2722,2722,2727,2727,2751,2751,2761,2761,2762,1497,2763,1486,2764,2791,2785,2785,2793,1655,2794,1486,2795,2392,2796,1494,2797,1682,2798,1486,2799,2408,2800,2047,2801,1682,2802,1486,2803,2408,2804,2049,2805,1655,2806,1486,2807,2392,2808,2051,2809,1655,2810,1486,2811,2392,2812,2107,2813,1497,2814,1486,2815,2153,2816,1876,2817,1497,2818,1486,2819,2156,2820,1651,2821,1486,2822,2389,2823,2158,2824,1497,2826,1486,2827,2160,2828,1497,2830,1486,2831,2162,2832,1655,2833,1486,2834,2392,2835,2163,2836,1655,2837,1486,2838,2392,2839,2208,2840,1697,2841,1486,2842,2416,2843,2210,2844,1655,2845,1486,2846,2392,2847,2213,2848,1497,2849,1486,2850,2215,2851,1655,2852,1486,2853,2392,2854,2217,2855,1682,2856,1486,2857,2408,2858,2219,2859,1497,2860,1486,2861,2221,2862,1876,2863,1651,2864,1486,2865,2389,2866,2224,2867,1497,2868,1486,2869,2226,2870,1682,2871,1486,2872,2408,2873,2228,2874,1497,2875,1486,2876,2230,2877,1682,2878,1486,2879,2408,2880,2232,2881,1682,2882,1486,2883,2408,2884,2234,2885,1655,2886,1486,2887,2392,2888,2236,2889,1682,2890,1486,2891,2408,2892,2238,2893,1497,2895,1486,2896,2240,2897,1655,2898,1486,2899,2392,2900,2241,2901,1697,2902,1486,2903,2416,2904,2243,2905,1682,2906,1486,2907,2408,2908,2245,2909,1497,2910,1486,2911,2247,2912,1682,2913,1486,2914,2408,2915,2249,3095,3156,3096,3155,3097,3097,3098,3098,3099,3099,3100,3100,3101,3101,3102,3102,3103,3103,3104,3104,3105,3105,3106,3106,3107,3107,3108,3108,3109,3109,3110,3110,3111,3111,3112,3112,3113,3113,3114,3114,3115,3115,3116,3116,3117,3117,3118,3118,3119,3119,3120,3120,3121,3121,3122,3122,3123,3123,3124,3124,3125,3125,3126,3126,3127,3127,3128,3128,3129,3129,3130,3130,3131,3131,3132,3132,3133,3133,3134,3134,3135,3135,3136,3136,3137,3137,3138,3138,3139,3139,3140,3140,3141,3141,3142,3142,3143,3143,3144,3144,3145,3145,3146,3146,3147,3147,3148,3148,3149,3149,3150,3150,3151,3151,3152,3152,3153,3153,3157,3157,3163,3163],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BinaryOperatorExprConvenienceInitializers.swift","symbols":[15,9,937]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BooleanLiteralExprConvenienceInitializers.swift","symbols":[15,9,940,21,9,939]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ClassDeclConvenienceInitializers.swift","symbols":[16,9,1118]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/DictionaryExprConvenienceInitializers.swift","symbols":[17,9,818]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/EnumDeclConvenienceInitializers.swift","symbols":[16,9,1098]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ExtensionDeclConvenienceInitializers.swift","symbols":[16,9,799]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FloatLiteralExprConvenienceInitializers.swift","symbols":[13,9,881,19,9,878]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/Format.swift","symbols":[14,14,694,15,13,1141,19,9,1090]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FunctionCallExprConvenienceInitializers.swift","symbols":[19,9,884]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FunctionDeclConvenienceInitializers.swift","symbols":[16,9,761]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/HasTrailingComma.swift","symbols":[12,16,187,14,7,1876]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierExprConvenienceInitializers.swift","symbols":[13,9,823]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierPatternConvenienceInitializers.swift","symbols":[13,9,918]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IntegerLiteralExprConvenienceInitializers.swift","symbols":[15,9,952,21,9,949]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/MemberAccessExprConvenienceInitializers.swift","symbols":[16,9,889]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ProtocolDeclConvenienceInitializers.swift","symbols":[16,9,777]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/SimpleTypeIdentifierConvenienceInitializers.swift","symbols":[15,9,993]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringConvenienceInitializers.swift","symbols":[13,14,10,19,14,6,25,14,4,31,14,7,37,14,8,43,14,1,49,14,9,56,14,3,63,14,5,70,14,2,73,14,0]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringLiteralExprConvenienceInitializers.swift","symbols":[15,9,933]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StructDeclConvenienceInitializers.swift","symbols":[16,9,733]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/TypeAnnotationConvenienceInitializers.swift","symbols":[13,9,836]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/VariableDeclConvenienceInitializers.swift","symbols":[15,9,787]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/Tokens.swift","symbols":[21,11,70,27,11,110,33,11,125,39,11,101,45,11,147,51,11,102,57,11,126,63,11,103,69,11,117,75,11,95,81,11,142,87,11,74,93,11,143,99,11,132,105,11,155,111,11,156,117,11,98,123,11,57,129,11,141,135,11,137,141,11,128,147,11,131,153,11,113,159,11,89,165,11,116,171,11,88,177,11,129,183,11,100,189,11,94,195,11,90,201,11,122,207,11,130,213,11,108,219,11,139,225,11,56,231,11,133,237,11,99,243,11,135,249,11,121,255,11,109,261,11,120,267,11,87,273,11,92,279,11,115,285,11,91,291,11,96,297,11,144,303,11,119,309,11,105,315,11,55,321,11,106,327,11,97,333,11,134,369,11,145,375,11,150,380,11,54,385,11,149,390,11,53,395,11,79,400,11,82,405,11,148,412,11,52,419,11,127,424,11,66,429,11,112,435,11,140,440,11,111,446,11,154,451,11,114,458,11,124,463,11,118,468,11,75,475,11,107,481,11,138,486,11,146,491,11,73,496,11,83,501,11,78,506,11,63,511,11,62,516,11,85,521,11,64,527,11,153,533,11,69,539,11,152,545,11,61,551,11,67,557,11,59,563,11,68,569,11,72,575,11,58,581,11,84,587,11,65,593,11,51,599,11,136,605,11,151,611,11,60,617,11,50,623,11,71,629,11,77,635,11,76,641,11,81,647,11,80,651,14,161,654,14,163,657,14,159,660,14,158,663,14,170,666,14,157,669,14,169,672,14,168,677,14,164,680,14,162,683,14,165,686,14,166,689,14,167,692,14,160,697,11,86,702,11,123,707,11,93,712,11,104]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableBaseProtocols.swift","symbols":[17,16,189,22,7,1919,25,16,183,30,7,1651,35,7,1654,45,7,1653,55,7,1652,61,16,190,66,7,1931,69,16,184,74,7,1655,79,7,1658,89,7,1657,99,7,1656,105,16,197,110,7,2121,113,16,188,118,7,1885,123,7,1888,133,7,1887,143,7,1886,149,16,191,154,7,1979,157,16,185,162,7,1682,167,7,1685,177,7,1684,187,7,1683,193,16,181,198,7,1496,201,16,182,206,7,1497,211,7,1499,221,7,1498,228,16,192,233,7,1984,236,16,186,241,7,1697,246,7,1700,256,7,1699,266,7,1698]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableCollectionNodes.swift","symbols":[17,14,586,23,9,904,27,9,903,31,14,1916,42,14,1915,47,14,1918,54,14,1917,61,14,639,67,9,995,71,9,994,75,14,2127,86,14,2126,91,14,2129,98,14,2128,104,14,34,110,14,568,116,9,871,120,9,870,124,14,1844,135,14,1843,140,14,1846,147,14,1845,153,14,22,159,14,643,165,9,1003,169,9,1002,173,14,2142,184,14,2141,189,14,2144,196,14,2143,202,14,36,208,14,649,214,9,1014,218,9,1013,222,14,2177,233,14,2176,238,14,2179,245,14,2178,251,14,16,257,14,634,263,9,987,267,9,986,271,14,2104,282,14,2103,287,14,2106,294,14,2105,300,14,32,306,14,701,312,9,1101,316,9,1100,320,14,2825,331,14,2824,336,14,2827,343,14,2826,350,14,654,356,9,1022,360,9,1021,364,14,2195,375,14,2194,380,14,2197,387,14,2196,393,14,39,399,14,569,405,9,873,409,9,872,413,14,1848,424,14,1847,429,14,1850,436,14,1849,442,14,23,448,14,690,454,9,1084,458,9,1083,462,14,2716,473,14,2715,478,14,2718,485,14,2717,491,14,49,497,14,702,503,9,1103,507,9,1102,511,14,2829,522,14,2828,527,14,2831,534,14,2830,540,14,26,546,14,646,552,9,1008,556,9,1007,560,14,2166,571,14,2165,576,14,2168,583,14,2167,589,14,37,595,14,611,601,9,948,605,9,947,609,14,2012,620,14,2011,625,14,2014,632,14,2013,638,14,27,644,14,595,650,9,920,654,9,919,658,14,1951,669,14,1950,674,14,1953,681,14,1952,687,14,25,693,14,540,699,9,828,703,9,827,707,14,1737,718,14,1736,723,14,1739,730,14,1738,737,14,506,743,9,770,747,9,769,751,14,1592,762,14,1591,767,14,1594,774,14,1593,780,14,24,786,14,482,792,9,726,796,9,725,800,14,1501,811,14,1500,816,14,1503,823,14,1502,829,14,41,835,14,495,841,9,749,845,9,748,849,14,1549,860,14,1548,865,14,1551,872,14,1550,879,14,614,885,9,955,889,9,954,893,14,2023,904,14,2022,909,14,2025,916,14,2024,922,14,28,928,14,620,934,9,965,938,9,964,942,14,2044,953,14,2043,958,14,2046,965,14,2045,971,14,29,977,14,538,983,9,825,987,9,824,991,14,1730,1000,14,1729,1005,14,1732,1012,14,1731,1018,14,13,1024,14,684,1030,9,1074,1034,9,1073,1038,14,2523,1049,14,2522,1054,14,2525,1061,14,2524,1067,14,18,1073,14,664,1079,9,1039,1083,9,1038,1087,14,2285,1098,14,2284,1103,14,2287,1110,14,2286,1116,14,48,1122,14,719,1128,9,1131,1132,9,1130,1136,14,2894,1145,14,2893,1150,14,2896,1157,14,2895,1163,14,12,1169,14,597,1175,9,923,1179,9,922,1183,14,1958,1192,14,1957,1197,14,1960,1204,14,1959,1210,14,11,1216,14,519,1222,9,794,1226,9,793,1230,14,1641,1241,14,1640,1246,14,1643,1253,14,1642,1259,14,14,1265,14,680,1271,9,1068,1275,9,1067,1279,14,2467,1290,14,2466,1295,14,2469,1302,14,2468,1308,14,17,1314,14,507,1320,9,772,1324,9,771,1328,14,1596,1339,14,1595,1344,14,1598,1351,14,1597,1357,14,38,1363,14,674,1369,9,1056,1373,9,1055,1377,14,2379,1388,14,2378,1393,14,2381,1400,14,2380,1406,14,46,1412,14,642,1418,9,1001,1422,9,1000,1426,14,2138,1437,14,2137,1442,14,2140,1449,14,2139,1455,14,47,1461,14,545,1467,9,834,1471,9,833,1475,14,1757,1486,14,1756,1491,14,1759,1498,14,1758,1504,14,15,1510,14,547,1516,9,838,1520,9,837,1524,14,1764,1535,14,1763,1540,14,1766,1547,14,1765,1553,14,21,1559,14,497,1565,9,752,1569,9,751,1573,14,1557,1584,14,1556,1589,14,1559,1596,14,1558,1602,14,19,1608,14,520,1614,9,796,1618,9,795,1622,14,1645,1633,14,1644,1638,14,1647,1645,14,1646,1651,14,20,1657,14,632,1663,9,983,1667,9,982,1671,14,2096,1682,14,2095,1687,14,2098,1694,14,2097,1700,14,31,1706,14,659,1712,9,1029,1716,9,1028,1720,14,2255,1731,14,2254,1736,14,2257,1743,14,2256,1749,14,40,1755,14,635,1761,9,989,1765,9,988,1769,14,2110,1780,14,2109,1785,14,2112,1792,14,2111,1798,14,33,1804,14,672,1810,9,1052,1814,9,1051,1818,14,2371,1829,14,2370,1834,14,2373,1841,14,2372,1847,14,44,1853,14,673,1859,9,1054,1863,9,1053,1867,14,2375,1878,14,2374,1883,14,2377,1890,14,2376,1896,14,45,1902,14,640,1908,9,997,1912,9,996,1916,14,2131,1927,14,2130,1932,14,2133,1939,14,2132,1945,14,35,1951,14,621,1957,9,967,1961,9,966,1965,14,2054,1976,14,2053,1981,14,2056,1988,14,2055,1994,14,30,2000,14,666,2006,9,1043,2010,9,1042,2014,14,2292,2025,14,2291,2030,14,2294,2037,14,2293,2043,14,42,2049,14,630,2055,9,980,2059,9,979,2063,14,2088,2074,14,2087,2079,14,2090,2086,14,2089,2092,14,43]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableNodes.swift","symbols":[17,14,521,27,9,797,53,14,1648,59,14,1650,66,14,1649,71,14,712,81,9,1121,96,9,1120,122,14,2867,128,14,2869,135,14,2868,140,14,717,148,9,1128,171,14,2885,177,14,2888,184,14,2887,191,14,2886,195,14,563,201,9,863,221,14,1824,227,14,1827,234,14,1826,241,14,1825,245,14,697,255,9,1094,282,14,2809,288,14,2812,295,14,2811,302,14,2810,306,14,708,314,9,1112,326,9,1113,349,14,2851,355,14,2854,362,14,2853,369,14,2852,373,14,572,381,9,877,404,14,1858,410,14,1860,417,14,1859,422,14,587,432,9,906,447,9,905,473,14,1920,479,14,1922,486,14,1921,491,14,537,499,9,822,521,14,1725,527,14,1728,534,14,1727,541,14,1726,545,14,513,551,9,782,571,14,1618,577,14,1621,584,14,1620,591,14,1619,595,14,541,601,9,829,621,14,1740,627,14,1743,634,14,1742,641,14,1741,645,14,644,651,9,1004,671,14,2145,677,14,2148,684,14,2147,691,14,2146,695,14,532,701,9,815,721,14,1705,727,14,1708,734,14,1707,741,14,1706,745,14,512,751,9,781,760,9,780,780,14,1614,786,14,1617,793,14,1616,800,14,1615,804,14,527,810,9,806,830,14,1678,836,14,1681,843,14,1680,850,14,1679,854,14,526,860,9,805,880,14,1674,886,14,1677,893,14,1676,900,14,1675,904,14,564,910,9,864,930,14,1831,936,14,1829,943,14,1830,950,14,1828,954,14,600,960,9,928,980,14,1968,986,14,1971,993,14,1970,1000,14,1969,1004,14,601,1010,9,929,1030,14,1972,1036,14,1975,1043,14,1974,1050,14,1973,1054,14,615,1060,9,956,1080,14,2026,1086,14,2029,1093,14,2028,1100,14,2027,1104,14,650,1112,9,1015,1123,9,1016,1146,14,2180,1152,14,2183,1159,14,2182,1166,14,2181,1170,14,616,1178,9,957,1189,9,958,1212,14,2030,1218,14,2033,1225,14,2032,1232,14,2031,1236,14,605,1242,9,936,1261,14,1989,1267,14,1992,1274,14,1991,1281,14,1990,1285,14,706,1295,9,1108,1311,9,1109,1337,14,2844,1343,14,2847,1350,14,2846,1357,14,2845,1361,14,573,1367,9,879,1376,9,880,1396,14,1861,1402,14,1864,1409,14,1863,1416,14,1862,1420,14,720,1430,9,1133,1445,9,1132,1471,14,2897,1477,14,2900,1484,14,2899,1491,14,2898,1495,14,704,1505,9,1106,1520,9,1105,1546,14,2836,1552,14,2839,1559,14,2838,1566,14,2837,1570,14,534,1580,9,819,1607,14,1713,1613,14,1716,1620,14,1715,1627,14,1714,1631,14,582,1643,9,897,1673,14,1901,1679,14,1903,1684,14,1904,1696,14,1902,1701,14,496,1709,9,750,1732,14,1552,1738,14,1554,1743,14,1555,1753,14,1553,1758,14,589,1770,9,909,1800,14,1927,1806,14,1929,1811,14,1930,1823,14,1928,1828,14,612,1834,9,950,1843,9,951,1863,14,2015,1869,14,2018,1876,14,2017,1883,14,2016,1887,14,606,1893,9,938,1913,14,1993,1919,14,1996,1926,14,1995,1933,14,1994,1937,14,492,1951,9,744,1984,14,1537,1990,14,1540,1997,14,1539,2004,14,1538,2008,14,577,2020,9,888,2049,14,1877,2055,14,1880,2062,14,1879,2069,14,1878,2073,14,696,2081,9,1093,2104,14,2805,2110,14,2808,2117,14,2807,2124,14,2806,2128,14,692,2138,9,1087,2165,14,2793,2171,14,2796,2178,14,2795,2185,14,2794,2189,14,703,2195,9,1104,2214,14,2832,2220,14,2835,2227,14,2834,2234,14,2833,2238,14,607,2252,9,942,2271,9,941,2303,14,1997,2309,14,1999,2314,14,2000,2327,14,1998,2332,14,661,2342,9,1033,2357,9,1032,2383,14,2262,2389,14,2264,2396,14,2263,2401,14,498,2409,9,753,2432,14,1560,2438,14,1562,2443,14,1563,2453,14,1561,2458,14,570,2476,9,874,2500,9,875,2538,14,1851,2544,14,1853,2551,14,1852,2556,14,490,2568,9,742,2585,9,741,2614,14,1529,2620,14,1532,2627,14,1531,2634,14,1530,2638,14,653,2644,9,1020,2663,14,2190,2669,14,2193,2676,14,2192,2683,14,2191,2687,14,687,2697,9,1079,2723,14,2610,2729,14,2612,2736,14,2611,2741,14,574,2757,9,883,2778,9,882,2813,14,1865,2819,14,1868,2826,14,1867,2833,14,1866,2837,14,530,2853,9,812,2874,9,811,2909,14,1693,2915,14,1696,2922,14,1695,2929,14,1694,2933,14,637,2941,9,991,2964,14,2117,2970,14,2120,2977,14,2119,2984,14,2118,2988,14,554,2996,9,849,3019,14,1790,3025,14,1793,3032,14,1792,3039,14,1791,3043,14,579,3051,9,892,3062,9,893,3085,14,1889,3091,14,1892,3098,14,1891,3105,14,1890,3109,14,544,3117,9,832,3139,14,1752,3145,14,1755,3152,14,1754,3159,14,1753,3163,14,528,3169,9,807,3178,9,808,3198,14,1686,3204,14,1688,3211,14,1687,3216,14,591,3230,9,912,3250,9,911,3282,14,1936,3288,14,1938,3295,14,1937,3300,14,603,3314,9,932,3333,9,931,3365,14,1980,3371,14,1983,3378,14,1982,3385,14,1981,3389,14,581,3395,9,895,3404,9,896,3424,14,1897,3430,14,1900,3437,14,1899,3444,14,1898,3448,14,491,3458,9,743,3484,14,1533,3490,14,1536,3497,14,1535,3504,14,1534,3508,14,557,3514,9,853,3534,14,1802,3540,14,1805,3547,14,1804,3554,14,1803,3558,14,525,3566,9,803,3578,9,804,3601,14,1671,3607,14,1673,3614,14,1672,3619,14,559,3631,9,857,3649,9,856,3678,14,1809,3684,14,1812,3691,14,1811,3698,14,1810,3702,14,578,3718,9,890,3742,9,891,3777,14,1881,3783,14,1884,3790,14,1883,3797,14,1882,3801,14,622,3809,9,968,3831,14,2057,3837,14,2060,3844,14,2059,3851,14,2058,3855,14,645,3861,9,1005,3870,9,1006,3890,14,2149,3896,14,2152,3903,14,2151,3910,14,2150,3914,14,599,3926,9,927,3944,9,926,3973,14,1964,3979,14,1967,3986,14,1966,3993,14,1965,3997,14,652,4005,9,1019,4028,14,2187,4034,14,2189,4041,14,2188,4046,14,531,4064,9,813,4086,9,814,4124,14,1701,4130,14,1704,4137,14,1703,4144,14,1702,4148,14,604,4166,9,934,4188,9,935,4226,14,1985,4232,14,1988,4239,14,1987,4246,14,1986,4250,14,561,4260,9,860,4275,9,859,4301,14,1817,4307,14,1819,4314,14,1818,4319,14,511,4327,9,779,4350,14,1611,4356,14,1613,4363,14,1612,4368,14,593,4380,9,915,4397,9,916,4426,14,1943,4432,14,1945,4439,14,1944,4444,14,539,4454,9,826,4480,14,1733,4486,14,1735,4493,14,1734,4498,14,504,4506,9,766,4518,9,765,4541,14,1583,4547,14,1586,4554,14,1585,4561,14,1584,4565,14,543,4577,9,831,4608,14,1748,4614,14,1751,4621,14,1750,4628,14,1749,4632,14,580,4644,9,894,4675,14,1893,4681,14,1896,4688,14,1895,4695,14,1894,4699,14,623,4711,9,969,4742,14,2064,4748,14,2062,4755,14,2063,4762,14,2061,4766,14,663,4784,9,1036,4810,9,1037,4848,14,2281,4854,14,2283,4861,14,2282,4866,14,500,4878,9,756,4896,9,757,4925,14,1568,4931,14,1570,4938,14,1569,4943,14,523,4951,9,801,4974,14,1663,4980,14,1665,4985,14,1666,4995,14,1664,5000,14,651,5008,9,1017,5020,9,1018,5043,14,2184,5049,14,2186,5056,14,2185,5061,14,711,5081,9,1117,5104,9,1119,5145,14,2863,5151,14,2866,5158,14,2865,5165,14,2864,5169,14,486,5189,9,732,5213,9,734,5254,14,1515,5260,14,1518,5267,14,1517,5274,14,1516,5278,14,510,5298,9,776,5322,9,778,5363,14,1607,5369,14,1610,5376,14,1609,5383,14,1608,5387,14,522,5405,9,798,5427,9,800,5465,14,1659,5471,14,1662,5478,14,1661,5485,14,1660,5489,14,558,5499,9,855,5514,9,854,5540,14,1806,5546,14,1808,5553,14,1807,5559,14,613,5567,9,953,5590,14,2019,5596,14,2021,5603,14,2020,5608,14,485,5616,9,730,5627,9,731,5650,14,1512,5656,14,1514,5663,14,1513,5668,14,596,5676,9,921,5699,14,1954,5705,14,1956,5712,14,1955,5717,14,592,5737,9,913,5763,9,914,5804,14,1939,5810,14,1941,5815,14,1942,5831,14,1940,5836,14,502,5856,9,760,5880,9,762,5921,14,1575,5927,14,1578,5934,14,1577,5941,14,1576,5945,14,556,5967,9,851,5995,9,852,6039,14,1798,6045,14,1801,6052,14,1800,6059,14,1799,6063,14,588,6075,9,907,6091,9,908,6120,14,1923,6126,14,1926,6133,14,1925,6140,14,1924,6144,14,529,6164,9,809,6188,9,810,6229,14,1689,6235,14,1692,6242,14,1691,6249,14,1690,6253,14,618,6265,9,960,6282,9,961,6311,14,2037,6317,14,2039,6324,14,2038,6329,14,619,6337,9,962,6349,9,963,6372,14,2040,6378,14,2042,6385,14,2041,6390,14,483,6404,9,727,6423,9,728,6455,14,1504,6461,14,1507,6468,14,1506,6475,14,1505,6479,14,584,6489,9,899,6504,9,900,6530,14,1909,6536,14,1911,6543,14,1910,6548,14,494,6566,9,746,6590,9,747,6628,14,1544,6634,14,1547,6641,14,1546,6648,14,1545,6652,14,517,6662,9,791,6677,9,790,6703,14,1633,6709,14,1635,6716,14,1634,6721,14,542,6735,9,830,6767,14,1744,6773,14,1746,6778,14,1747,6791,14,1745,6796,14,515,6808,9,785,6824,9,786,6853,14,1626,6859,14,1629,6866,14,1628,6873,14,1627,6878,14,551,6890,9,844,6906,9,845,6935,14,1778,6941,14,1780,6946,14,1781,6958,14,1779,6964,14,501,6976,9,758,6992,9,759,7021,14,1571,7027,14,1574,7034,14,1573,7041,14,1572,7046,14,700,7066,9,1097,7090,9,1099,7131,14,2820,7137,14,2823,7144,14,2822,7151,14,2821,7156,14,508,7170,9,773,7188,9,774,7220,14,1599,7226,14,1602,7233,14,1601,7240,14,1600,7245,14,675,7253,9,1057,7265,9,1058,7288,14,2420,7294,14,2422,7301,14,2421,7307,14,624,7325,9,970,7349,9,971,7387,14,2065,7393,14,2068,7400,14,2067,7407,14,2066,7412,14,665,7422,9,1041,7437,9,1040,7463,14,2288,7469,14,2290,7476,14,2289,7481,14,676,7489,9,1059,7501,9,1060,7524,14,2423,7530,14,2425,7537,14,2424,7543,14,671,7553,9,1049,7569,9,1050,7595,14,2367,7601,14,2369,7608,14,2368,7614,14,683,7624,9,1071,7640,9,1072,7666,14,2519,7672,14,2521,7679,14,2520,7685,14,549,7699,9,842,7719,9,841,7751,14,1771,7757,14,1773,7764,14,1772,7770,14,707,7786,9,1111,7808,9,1110,7843,14,2848,7849,14,2850,7856,14,2849,7862,14,585,7874,9,901,7891,9,902,7920,14,1912,7926,14,1914,7933,14,1913,7939,14,660,7951,9,1030,7968,9,1031,7997,14,2258,8003,14,2260,8008,14,2261,8020,14,2259,8026,14,626,8038,9,973,8055,9,974,8084,14,2072,8090,14,2074,8095,14,2075,8107,14,2073,8113,14,682,8123,9,1070,8149,14,2516,8155,14,2518,8162,14,2517,8167,14,699,8175,9,1096,8197,14,2817,8203,14,2819,8210,14,2818,8216,14,681,8228,9,1069,8257,14,2513,8263,14,2515,8270,14,2514,8276,14,598,8284,9,924,8296,9,925,8319,14,1961,8325,14,1963,8332,14,1962,8338,14,689,8352,9,1081,8372,9,1082,8404,14,2646,8410,14,2648,8417,14,2647,8423,14,685,8433,9,1075,8448,9,1076,8474,14,2526,8480,14,2528,8487,14,2527,8493,14,662,8503,9,1034,8518,9,1035,8544,14,2265,8550,14,2267,8557,14,2266,8563,14,657,8571,9,1025,8594,14,2204,8600,14,2206,8605,14,2207,8615,14,2205,8621,14,691,8639,9,1085,8665,9,1086,8703,14,2762,8709,14,2764,8716,14,2763,8722,14,602,8734,9,930,8763,14,1976,8769,14,1978,8776,14,1977,8782,14,575,8790,9,885,8812,14,1869,8818,14,1871,8825,14,1870,8831,14,678,8841,9,1063,8856,9,1064,8882,14,2429,8888,14,2431,8895,14,2430,8901,14,670,8909,9,1048,8932,14,2315,8938,14,2317,8945,14,2316,8950,14,499,8958,9,754,8970,9,755,8993,14,1564,8999,14,1567,9006,14,1566,9013,14,1565,9017,14,722,9031,9,1136,9050,9,1137,9082,14,2905,9088,14,2908,9095,14,2907,9102,14,2906,9106,14,713,9114,9,1122,9137,14,2870,9143,14,2873,9150,14,2872,9157,14,2871,9161,14,536,9167,9,821,9186,14,1721,9192,14,1724,9199,14,1723,9206,14,1722,9210,14,565,9226,9,865,9248,9,866,9283,14,1832,9289,14,1835,9296,14,1834,9303,14,1833,9307,14,716,9319,9,1127,9336,9,1126,9365,14,2881,9371,14,2884,9378,14,2883,9385,14,2882,9389,14,493,9397,9,745,9420,14,1541,9426,14,1543,9433,14,1542,9438,14,715,9466,9,1124,9503,9,1125,9556,14,2877,9562,14,2880,9569,14,2879,9576,14,2878,9580,14,488,9598,9,738,9623,9,737,9661,14,1522,9667,14,1525,9674,14,1524,9681,14,1523,9685,14,693,9699,9,1089,9718,9,1088,9750,14,2797,9756,14,2800,9763,14,2799,9770,14,2798,9774,14,484,9782,9,729,9805,14,1508,9811,14,1511,9818,14,1510,9825,14,1509,9829,14,724,9837,9,1140,9860,14,2912,9866,14,2915,9873,14,2914,9880,14,2913,9884,14,723,9896,9,1138,9914,9,1139,9943,14,2909,9949,14,2911,9956,14,2910,9961,14,553,9967,9,848,9987,14,1786,9993,14,1789,10000,14,1788,10007,14,1787,10011,14,709,10019,9,1114,10031,9,1115,10054,14,2855,10060,14,2858,10067,14,2857,10074,14,2856,10078,14,571,10086,9,876,10109,14,1854,10115,14,1856,10120,14,1857,10130,14,1855,10135,14,641,10147,9,999,10165,9,998,10194,14,2134,10200,14,2136,10207,14,2135,10212,14,668,10224,9,1046,10253,14,2309,10259,14,2311,10266,14,2310,10271,14,669,10283,9,1047,10312,14,2312,10318,14,2314,10325,14,2313,10330,14,667,10342,9,1045,10360,9,1044,10389,14,2295,10395,14,2297,10402,14,2296,10407,14,550,10413,9,843,10432,14,1774,10438,14,1777,10445,14,1776,10452,14,1775,10456,14,718,10464,9,1129,10487,14,2889,10493,14,2892,10500,14,2891,10507,14,2890,10511,14,695,10529,9,1091,10553,9,1092,10591,14,2801,10597,14,2804,10604,14,2803,10611,14,2802,10615,14,608,10621,9,943,10640,14,2001,10646,14,2003,10653,14,2002,10658,14,714,10666,9,1123,10689,14,2874,10695,14,2876,10702,14,2875,10707,14,487,10717,9,736,10730,9,735,10756,14,1519,10762,14,1521,10769,14,1520,10774,14,617,10782,9,959,10806,14,2034,10812,14,2036,10819,14,2035,10824,14,698,10834,9,1095,10860,14,2813,10866,14,2815,10871,14,2816,10882,14,2814,10887,14,710,10897,9,1116,10923,14,2859,10929,14,2861,10934,14,2862,10945,14,2860,10950,14,566,10960,9,867,10975,9,868,11001,14,1836,11007,14,1838,11014,14,1837,11019,14,489,11029,9,739,11043,9,740,11069,14,1526,11075,14,1528,11082,14,1527,11087,14,562,11103,9,861,11126,9,862,11161,14,1820,11167,14,1823,11174,14,1822,11181,14,1821,11185,14,610,11193,9,946,11205,9,945,11228,14,2008,11234,14,2010,11241,14,2009,11246,14,609,11254,9,944,11277,14,2004,11283,14,2006,11288,14,2007,11298,14,2005,11303,14,625,11313,9,972,11338,14,2069,11344,14,2071,11351,14,2070,11356,14,576,11370,9,886,11389,9,887,11421,14,1872,11427,14,1874,11432,14,1875,11445,14,1873,11450,14,648,11466,9,1011,11487,9,1012,11522,14,2172,11528,14,2174,11533,14,2175,11547,14,2173,11552,14,658,11562,9,1027,11577,9,1026,11603,14,2251,11609,14,2253,11616,14,2252,11621,14,656,11631,9,1024,11657,14,2201,11663,14,2203,11670,14,2202,11675,14,679,11685,9,1066,11700,9,1065,11726,14,2463,11732,14,2465,11739,14,2464,11744,14,638,11752,9,992,11774,14,2122,11780,14,2125,11787,14,2124,11794,14,2123,11798,14,636,11810,9,990,11839,14,2113,11845,14,2116,11852,14,2115,11859,14,2114,11863,14,631,11869,9,981,11889,14,2091,11895,14,2094,11902,14,2093,11909,14,2092,11913,14,705,11923,9,1107,11950,14,2840,11956,14,2843,11963,14,2842,11970,14,2841,11974,14,535,11988,9,820,12022,14,1717,12028,14,1720,12035,14,1719,12042,14,1718,12046,14,505,12056,9,767,12071,9,768,12097,14,1587,12103,14,1590,12110,14,1589,12117,14,1588,12121,14,509,12129,9,775,12152,14,1603,12158,14,1606,12165,14,1605,12172,14,1604,12176,14,633,12184,9,984,12196,9,985,12219,14,2099,12225,14,2102,12232,14,2101,12239,14,2100,12243,14,688,12251,9,1080,12274,14,2642,12280,14,2645,12287,14,2644,12294,14,2643,12298,14,655,12306,9,1023,12329,14,2198,12335,14,2200,12342,14,2199,12347,14,548,12353,9,840,12362,9,839,12382,14,1767,12388,14,1770,12395,14,1769,12402,14,1768,12406,14,583,12426,9,898,12470,14,1905,12476,14,1907,12481,14,1908,12497,14,1906,12502,14,721,12512,9,1135,12527,9,1134,12553,14,2901,12559,14,2904,12566,14,2903,12573,14,2902,12577,14,503,12595,9,764,12621,9,763,12659,14,1579,12665,14,1582,12672,14,1581,12679,14,1580,12683,14,533,12693,9,817,12707,9,816,12733,14,1709,12739,14,1712,12746,14,1711,12753,14,1710,12757,14,555,12765,9,850,12788,14,1794,12794,14,1796,12799,14,1797,12809,14,1795,12814,14,647,12824,9,1010,12839,9,1009,12865,14,2169,12871,14,2171,12878,14,2170,12883,14,546,12891,9,835,12914,14,1760,12920,14,1762,12927,14,1761,12932,14,552,12944,9,846,12960,9,847,12989,14,1782,12995,14,1785,13002,14,1784,13009,14,1783,13013,14,524,13021,9,802,13044,14,1667,13050,14,1670,13057,14,1669,13064,14,1668,13068,14,560,13076,9,858,13099,14,1813,13105,14,1816,13112,14,1815,13119,14,1814,13123,14,594,13129,9,917,13148,14,1946,13154,14,1949,13161,14,1948,13168,14,1947,13172,14,518,13182,9,792,13208,14,1636,13214,14,1639,13221,14,1638,13228,14,1637,13232,14,514,13242,9,784,13257,9,783,13283,14,1622,13289,14,1625,13296,14,1624,13303,14,1623,13307,14,567,13315,9,869,13338,14,1839,13344,14,1842,13351,14,1841,13358,14,1840,13362,14,627,13374,9,975,13391,9,976,13420,14,2076,13426,14,2078,13431,14,2079,13443,14,2077,13448,14,590,13454,9,910,13473,14,1932,13479,14,1935,13486,14,1934,13493,14,1933,13497,14,628,13505,9,977,13528,14,2080,13534,14,2083,13541,14,2082,13548,14,2081,13553,14,629,13561,9,978,13584,14,2084,13590,14,2086,13597,14,2085,13603,14,677,13613,9,1061,13627,9,1062,13653,14,2426,13659,14,2428,13666,14,2427,13672,14,686,13680,9,1077,13691,9,1078,13714,14,2566,13720,14,2568,13727,14,2567,13733,14,516,13743,9,788,13757,9,789,13783,14,1630,13789,14,1632,13796,14,1631]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/ExpressibleAsProtocols.swift","symbols":[16,16,264,17,7,2389,22,7,2391,26,7,2390,31,16,265,32,7,2392,37,7,2393,42,16,325,43,7,2553,46,16,272,47,7,2408,52,7,2409,57,16,178,58,7,1486,63,7,1489,67,7,1491,71,7,1487,75,7,1490,79,7,1488,84,16,276,85,7,2416,90,7,2417,95,16,263,96,7,2386,101,7,2388,104,7,2387,109,16,333,110,7,2573,115,7,2574,120,16,212,121,7,2226,125,7,2227,130,16,217,131,7,2236,135,7,2237,140,16,309,141,7,2503,145,7,2504,150,16,386,151,7,2690,154,16,314,155,7,2529,158,16,390,159,7,2695,162,16,396,163,7,2706,166,16,196,167,7,2107,171,7,2108,176,16,208,177,7,2217,181,7,2218,186,16,318,187,7,2536,192,7,2538,195,7,2537,200,16,381,201,7,2680,204,16,334,205,7,2575,209,7,2576,214,16,283,215,7,2443,219,7,2444,224,16,256,225,7,2359,229,7,2360,234,16,287,235,7,2451,239,7,2452,244,16,391,245,7,2696,249,7,2697,254,16,278,255,7,2432,259,7,2433,264,16,255,265,7,2355,270,7,2358,274,7,2356,277,7,2357,282,16,201,283,7,2160,288,7,2161,293,16,271,294,7,2406,298,7,2407,303,16,270,304,7,2404,308,7,2405,313,16,310,314,7,2505,318,7,2506,323,16,347,324,7,2602,328,7,2603,333,16,348,334,7,2604,338,7,2605,343,16,362,344,7,2636,348,7,2637,353,16,397,354,7,2707,358,7,2708,363,16,363,364,7,2638,368,7,2639,373,16,352,374,7,2615,378,7,2616,383,16,206,384,7,2213,388,7,2214,393,16,319,394,7,2539,398,7,2540,403,16,220,404,7,2241,408,7,2242,413,16,204,414,7,2208,418,7,2209,423,16,280,424,7,2436,428,7,2437,433,16,329,434,7,2560,439,7,2562,442,7,2561,447,16,239,448,7,2323,453,7,2325,456,7,2324,461,16,336,462,7,2579,467,7,2581,470,7,2580,475,16,359,476,7,2630,480,7,2631,485,16,353,486,7,2617,490,7,2618,495,16,235,496,7,2305,500,7,2306,505,16,323,506,7,2549,510,7,2550,515,16,195,516,7,2051,520,7,2052,525,16,180,526,7,1494,530,7,1495,535,16,203,536,7,2163,540,7,2164,545,16,354,546,7,2619,551,7,2621,554,7,2620,559,16,401,560,7,2719,563,16,408,564,7,2733,568,7,2734,573,16,241,574,7,2327,579,7,2329,582,7,2328,587,16,315,588,7,2530,591,16,316,592,7,2531,596,7,2532,601,16,233,602,7,2301,606,7,2302,611,16,400,612,7,2713,616,7,2714,621,16,434,622,7,2783,627,7,2785,630,7,2784,635,16,437,636,7,2790,639,16,320,640,7,2541,645,7,2543,648,7,2542,653,16,275,654,7,2414,658,7,2415,663,16,384,664,7,2684,668,7,2685,673,16,300,674,7,2484,678,7,2485,683,16,326,684,7,2554,688,7,2555,693,16,290,694,7,2458,698,7,2459,703,16,273,704,7,2410,708,7,2411,713,16,338,714,7,2584,718,7,2585,723,16,350,724,7,2608,728,7,2609,733,16,328,734,7,2558,738,7,2559,743,16,234,744,7,2303,748,7,2304,753,16,303,754,7,2491,758,7,2492,763,16,269,764,7,2401,769,7,2403,772,7,2402,777,16,202,778,7,2162,781,16,305,782,7,2495,786,7,2496,791,16,324,792,7,2551,796,7,2552,801,16,369,802,7,2656,806,7,2657,811,16,392,812,7,2698,816,7,2699,821,16,346,822,7,2600,826,7,2601,831,16,399,832,7,2711,836,7,2712,841,16,277,842,7,2418,846,7,2419,851,16,351,852,7,2613,856,7,2614,861,16,393,862,7,2700,865,16,307,866,7,2499,870,7,2500,875,16,254,876,7,2353,880,7,2354,885,16,340,886,7,2589,890,7,2590,895,16,285,896,7,2446,901,7,2448,904,7,2447,909,16,358,910,7,2629,913,16,247,914,7,2341,918,7,2342,923,16,289,924,7,2456,928,7,2457,933,16,327,934,7,2556,938,7,2557,943,16,370,944,7,2658,948,7,2659,953,16,410,954,7,2737,958,7,2738,963,16,243,964,7,2332,969,7,2334,972,7,2333,977,16,267,978,7,2396,983,7,2398,986,7,2397,991,16,342,992,7,2593,995,16,398,996,7,2709,1000,7,2710,1005,16,211,1006,7,2224,1010,7,2225,1015,16,229,1016,7,2275,1020,7,2276,1025,16,253,1026,7,2351,1030,7,2352,1035,16,266,1036,7,2394,1040,7,2395,1045,16,304,1046,7,2493,1050,7,2494,1055,16,286,1056,7,2449,1061,7,2450,1066,16,360,1067,7,2632,1072,7,2634,1075,7,2633,1080,16,228,1081,7,2273,1085,7,2274,1090,16,343,1091,7,2594,1095,7,2595,1100,16,339,1101,7,2586,1106,7,2588,1109,7,2587,1114,16,249,1115,7,2345,1118,16,245,1119,7,2337,1123,7,2338,1128,16,302,1129,7,2489,1133,7,2490,1138,16,335,1139,7,2577,1143,7,2578,1148,16,274,1149,7,2412,1153,7,2413,1158,16,365,1159,7,2649,1163,7,2650,1168,16,366,1169,7,2651,1174,7,2653,1177,7,2652,1182,16,225,1183,7,2268,1186,16,226,1187,7,2269,1191,7,2270,1196,16,331,1197,7,2569,1201,7,2570,1206,16,237,1207,7,2318,1212,7,2319,1215,7,2320,1220,16,238,1221,7,2321,1226,7,2322,1231,16,260,1232,7,2382,1236,7,2383,1241,16,288,1242,7,2453,1247,7,2455,1250,7,2454,1255,16,361,1256,7,2635,1259,16,258,1260,7,2363,1264,7,2364,1269,16,297,1270,7,2477,1275,7,2479,1278,7,2478,1283,16,367,1284,7,2654,1287,16,244,1288,7,2335,1292,7,2336,1297,16,200,1298,7,2158,1302,7,2159,1307,16,251,1308,7,2347,1312,7,2348,1317,16,284,1318,7,2445,1321,16,422,1322,7,2757,1326,7,2758,1331,16,371,1332,7,2660,1336,7,2661,1341,16,431,1342,7,2778,1345,16,412,1346,7,2740,1350,7,2741,1355,16,411,1356,7,2739,1359,16,423,1360,7,2759,1365,7,2761,1368,7,2760,1373,16,418,1374,7,2752,1378,7,2753,1383,16,430,1384,7,2776,1388,7,2777,1393,16,219,1394,7,2240,1397,16,344,1398,7,2596,1401,16,295,1402,7,2473,1406,7,2474,1411,16,207,1412,7,2215,1416,7,2216,1421,16,261,1422,7,2384,1425,16,427,1426,7,2771,1429,16,332,1430,7,2571,1434,7,2572,1439,16,407,1440,7,2731,1444,7,2732,1449,16,373,1450,7,2664,1454,7,2665,1459,16,429,1460,7,2774,1464,7,2775,1469,16,199,1470,7,2156,1474,7,2157,1479,16,428,1480,7,2772,1484,7,2773,1489,16,345,1490,7,2597,1495,7,2599,1498,7,2598,1503,16,250,1504,7,2346,1507,16,436,1508,7,2788,1512,7,2789,1517,16,432,1518,7,2779,1522,7,2780,1527,16,409,1528,7,2735,1532,7,2736,1537,16,421,1538,7,2756,1541,16,404,1542,7,2725,1547,7,2727,1550,7,2726,1555,16,438,1556,7,2791,1560,7,2792,1565,16,349,1566,7,2606,1570,7,2607,1575,16,321,1576,7,2544,1580,7,2545,1585,16,425,1586,7,2767,1590,7,2768,1595,16,389,1596,7,2694,1599,16,417,1600,7,2749,1605,7,2751,1608,7,2750,1613,16,242,1614,7,2330,1618,7,2331,1623,16,222,1624,7,2245,1628,7,2246,1633,16,213,1634,7,2228,1638,7,2229,1643,16,282,1644,7,2441,1648,7,2442,1653,16,291,1654,7,2460,1657,16,311,1658,7,2507,1662,7,2508,1667,16,216,1668,7,2234,1672,7,2235,1677,16,236,1678,7,2307,1682,7,2308,1687,16,215,1688,7,2232,1692,7,2233,1697,16,231,1698,7,2279,1702,7,2280,1707,16,293,1708,7,2470,1711,16,193,1712,7,2047,1716,7,2048,1721,16,227,1722,7,2271,1726,7,2272,1731,16,224,1732,7,2249,1736,7,2250,1741,16,223,1742,7,2247,1746,7,2248,1751,16,299,1752,7,2482,1756,7,2483,1761,16,209,1762,7,2219,1766,7,2220,1771,16,240,1772,7,2326,1775,16,262,1776,7,2385,1779,16,317,1780,7,2533,1785,7,2535,1788,7,2534,1793,16,388,1794,7,2692,1798,7,2693,1803,16,415,1804,7,2745,1808,7,2746,1813,16,416,1814,7,2747,1818,7,2748,1823,16,414,1824,7,2743,1828,7,2744,1833,16,379,1834,7,2677,1837,16,296,1838,7,2475,1842,7,2476,1847,16,218,1848,7,2238,1852,7,2239,1857,16,194,1858,7,2049,1862,7,2050,1867,16,355,1868,7,2622,1872,7,2623,1877,16,214,1878,7,2230,1882,7,2231,1887,16,230,1888,7,2277,1892,7,2278,1897,16,364,1898,7,2640,1902,7,2641,1907,16,198,1908,7,2153,1913,7,2155,1916,7,2154,1921,16,210,1922,7,2221,1927,7,2223,1930,7,2222,1935,16,312,1936,7,2509,1940,7,2510,1945,16,232,1946,7,2298,1951,7,2300,1954,7,2299,1959,16,308,1960,7,2501,1964,7,2502,1969,16,357,1970,7,2627,1974,7,2628,1979,16,406,1980,7,2730,1983,16,356,1984,7,2624,1989,7,2626,1992,7,2625,1997,16,372,1998,7,2662,2002,7,2663,2007,16,382,2008,7,2681,2011,16,322,2012,7,2546,2017,7,2548,2020,7,2547,2025,16,419,2026,7,2754,2029,16,395,2030,7,2703,2035,7,2705,2038,7,2704,2043,16,405,2044,7,2728,2048,7,2729,2053,16,403,2054,7,2723,2058,7,2724,2063,16,426,2064,7,2769,2068,7,2770,2073,16,385,2074,7,2686,2079,7,2687,2083,7,2688,2086,7,2689,2091,16,383,2092,7,2682,2096,7,2683,2101,16,378,2102,7,2675,2106,7,2676,2111,16,205,2112,7,2210,2117,7,2211,2120,7,2212,2125,16,281,2126,7,2438,2131,7,2439,2134,7,2440,2139,16,248,2140,7,2343,2144,7,2344,2149,16,252,2150,7,2349,2154,7,2350,2159,16,380,2160,7,2678,2164,7,2679,2169,16,435,2170,7,2786,2174,7,2787,2179,16,402,2180,7,2720,2185,7,2722,2188,7,2721,2193,16,420,2194,7,2755,2197,16,294,2198,7,2471,2202,7,2472,2207,16,330,2208,7,2563,2213,7,2565,2216,7,2564,2221,16,387,2222,7,2691,2225,16,221,2226,7,2243,2230,7,2244,2235,16,246,2236,7,2339,2240,7,2340,2245,16,279,2246,7,2434,2250,7,2435,2255,16,368,2256,7,2655,2259,16,301,2260,7,2486,2265,7,2488,2268,7,2487,2273,16,394,2274,7,2701,2278,7,2702,2283,16,292,2284,7,2461,2288,7,2462,2293,16,298,2294,7,2480,2298,7,2481,2303,16,268,2304,7,2399,2308,7,2400,2313,16,306,2314,7,2497,2318,7,2498,2323,16,341,2324,7,2591,2328,7,2592,2333,16,179,2334,7,1492,2338,7,1493,2343,16,257,2344,7,2361,2348,7,2362,2353,16,313,2354,7,2511,2358,7,2512,2363,16,374,2364,7,2666,2369,7,2668,2372,7,2667,2377,16,337,2378,7,2582,2382,7,2583,2387,16,413,2388,7,2742,2391,16,375,2392,7,2669,2396,7,2670,2401,16,377,2402,7,2674,2405,16,376,2406,7,2671,2411,7,2673,2414,7,2672,2419,16,424,2420,7,2765,2424,7,2766,2429,16,433,2430,7,2781,2434,7,2782,2439,16,259,2440,7,2365,2444,7,2366]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/ResultBuilders.swift","symbols":[17,14,452,21,19,2955,25,19,2957,29,19,2956,33,21,1246,39,21,1251,44,21,1250,50,21,1248,56,21,1249,62,21,1247,69,21,1253,75,21,1252,81,14,463,85,19,2988,89,19,2990,93,19,2989,97,21,1335,103,21,1339,108,21,1338,114,21,1336,120,21,1337,126,21,1334,133,21,1341,139,21,1340,149,14,450,153,19,2949,157,19,2951,161,19,2950,165,21,1231,171,21,1235,176,21,1234,182,21,1232,188,21,1233,194,21,1230,201,21,1237,207,21,1236,217,14,466,221,19,2997,225,19,2999,229,19,2998,233,21,1359,239,21,1363,244,21,1362,250,21,1360,256,21,1361,262,21,1358,269,21,1365,275,21,1364,285,14,468,289,19,3003,293,19,3005,297,19,3004,301,21,1375,307,21,1379,312,21,1378,318,21,1376,324,21,1377,330,21,1374,337,21,1381,343,21,1380,349,14,461,353,19,2982,357,19,2984,361,19,2983,365,21,1319,371,21,1323,376,21,1322,382,21,1320,388,21,1321,394,21,1318,401,21,1325,407,21,1324,413,14,479,417,19,3036,421,19,3038,425,19,3037,429,21,1463,435,21,1467,440,21,1466,446,21,1464,452,21,1465,458,21,1462,465,21,1469,471,21,1468,477,14,469,481,19,3006,485,19,3008,489,19,3007,493,21,1383,499,21,1387,504,21,1386,510,21,1384,516,21,1385,522,21,1382,529,21,1389,535,21,1388,545,14,451,549,19,2952,553,19,2954,557,19,2953,561,21,1239,567,21,1243,572,21,1242,578,21,1240,584,21,1241,590,21,1238,597,21,1245,603,21,1244,613,14,478,617,19,3033,621,19,3035,625,19,3034,629,21,1455,635,21,1459,640,21,1458,646,21,1456,652,21,1457,658,21,1454,665,21,1461,671,21,1460,677,14,480,681,19,3039,685,19,3041,689,19,3040,693,21,1471,699,21,1475,704,21,1474,710,21,1472,716,21,1473,722,21,1470,729,21,1477,735,21,1476,741,14,467,745,19,3000,749,19,3002,753,19,3001,757,21,1367,763,21,1371,768,21,1370,774,21,1368,780,21,1369,786,21,1366,793,21,1373,799,21,1372,809,14,455,813,19,2964,817,19,2966,821,19,2965,825,21,1271,831,21,1275,836,21,1274,842,21,1272,848,21,1273,854,21,1270,861,21,1277,867,21,1276,873,14,453,877,19,2958,881,19,2960,885,19,2959,889,21,1255,895,21,1259,900,21,1258,906,21,1256,912,21,1257,918,21,1254,925,21,1261,931,21,1260,941,14,447,945,19,2940,949,19,2942,953,19,2941,957,21,1207,963,21,1211,968,21,1210,974,21,1208,980,21,1209,986,21,1206,993,21,1213,999,21,1212,1005,14,442,1009,19,2925,1013,19,2927,1017,19,2926,1021,21,1167,1027,21,1171,1032,21,1170,1038,21,1168,1044,21,1169,1050,21,1166,1057,21,1173,1063,21,1172,1069,14,439,1073,19,2916,1077,19,2918,1081,19,2917,1085,21,1143,1091,21,1147,1096,21,1146,1102,21,1144,1108,21,1145,1114,21,1142,1121,21,1149,1127,21,1148,1133,14,440,1137,19,2919,1141,19,2921,1145,19,2920,1149,21,1151,1155,21,1155,1160,21,1154,1166,21,1152,1172,21,1153,1178,21,1150,1185,21,1157,1191,21,1156,1197,14,456,1201,19,2967,1205,19,2969,1209,19,2968,1213,21,1279,1219,21,1283,1224,21,1282,1230,21,1280,1236,21,1281,1242,21,1278,1249,21,1285,1255,21,1284,1265,14,457,1269,19,2970,1273,19,2972,1277,19,2971,1281,21,1287,1287,21,1291,1292,21,1290,1298,21,1288,1304,21,1289,1310,21,1286,1317,21,1293,1323,21,1292,1333,14,446,1337,19,2937,1341,19,2939,1345,19,2938,1349,21,1199,1355,21,1203,1360,21,1202,1366,21,1200,1372,21,1201,1378,21,1198,1385,21,1205,1391,21,1204,1397,14,477,1401,19,3030,1405,19,3032,1409,19,3031,1413,21,1447,1419,21,1451,1424,21,1450,1430,21,1448,1436,21,1449,1442,21,1446,1449,21,1453,1455,21,1452,1461,14,471,1465,19,3012,1469,19,3014,1473,19,3013,1477,21,1399,1483,21,1403,1488,21,1402,1494,21,1400,1500,21,1401,1506,21,1398,1513,21,1405,1519,21,1404,1525,14,481,1529,19,3042,1533,19,3044,1537,19,3043,1541,21,1479,1547,21,1483,1552,21,1482,1558,21,1480,1564,21,1481,1570,21,1478,1577,21,1485,1583,21,1484,1589,14,454,1593,19,2961,1597,19,2963,1601,19,2962,1605,21,1263,1611,21,1267,1616,21,1266,1622,21,1264,1628,21,1265,1634,21,1262,1641,21,1269,1647,21,1268,1653,14,444,1657,19,2931,1661,19,2933,1665,19,2932,1669,21,1183,1675,21,1187,1680,21,1186,1686,21,1184,1692,21,1185,1698,21,1182,1705,21,1189,1711,21,1188,1717,14,476,1721,19,3027,1725,19,3029,1729,19,3028,1733,21,1439,1739,21,1443,1744,21,1442,1750,21,1440,1756,21,1441,1762,21,1438,1769,21,1445,1775,21,1444,1781,14,443,1785,19,2928,1789,19,2930,1793,19,2929,1797,21,1175,1803,21,1179,1808,21,1178,1814,21,1176,1820,21,1177,1826,21,1174,1833,21,1181,1839,21,1180,1845,14,475,1849,19,3024,1853,19,3026,1857,19,3025,1861,21,1431,1867,21,1435,1872,21,1434,1878,21,1432,1884,21,1433,1890,21,1430,1897,21,1437,1903,21,1436,1913,14,465,1917,19,2994,1921,19,2996,1925,19,2995,1929,21,1351,1935,21,1355,1940,21,1354,1946,21,1352,1952,21,1353,1958,21,1350,1965,21,1357,1971,21,1356,1977,14,448,1981,19,2943,1985,19,2945,1989,19,2944,1993,21,1215,1999,21,1219,2004,21,1218,2010,21,1216,2016,21,1217,2022,21,1214,2029,21,1221,2035,21,1220,2041,14,449,2045,19,2946,2049,19,2948,2053,19,2947,2057,21,1223,2063,21,1227,2068,21,1226,2074,21,1224,2080,21,1225,2086,21,1222,2093,21,1229,2099,21,1228,2105,14,441,2109,19,2922,2113,19,2924,2117,19,2923,2121,21,1159,2127,21,1163,2132,21,1162,2138,21,1160,2144,21,1161,2150,21,1158,2157,21,1165,2163,21,1164,2173,14,445,2177,19,2934,2181,19,2936,2185,19,2935,2189,21,1191,2195,21,1195,2200,21,1194,2206,21,1192,2212,21,1193,2218,21,1190,2225,21,1197,2231,21,1196,2241,14,460,2245,19,2979,2249,19,2981,2253,19,2980,2257,21,1311,2263,21,1315,2268,21,1314,2274,21,1312,2280,21,1313,2286,21,1310,2293,21,1317,2299,21,1316,2309,14,470,2313,19,3009,2317,19,3011,2321,19,3010,2325,21,1391,2331,21,1395,2336,21,1394,2342,21,1392,2348,21,1393,2354,21,1390,2361,21,1397,2367,21,1396,2377,14,462,2381,19,2985,2385,19,2987,2389,19,2986,2393,21,1327,2399,21,1331,2404,21,1330,2410,21,1328,2416,21,1329,2422,21,1326,2429,21,1333,2435,21,1332,2445,14,473,2449,19,3018,2453,19,3020,2457,19,3019,2461,21,1415,2467,21,1419,2472,21,1418,2478,21,1416,2484,21,1417,2490,21,1414,2497,21,1421,2503,21,1420,2513,14,474,2517,19,3021,2521,19,3023,2525,19,3022,2529,21,1423,2535,21,1427,2540,21,1426,2546,21,1424,2552,21,1425,2558,21,1422,2565,21,1429,2571,21,1428,2577,14,464,2581,19,2991,2585,19,2993,2589,19,2992,2593,21,1343,2599,21,1347,2604,21,1346,2610,21,1344,2616,21,1345,2622,21,1342,2629,21,1349,2635,21,1348,2645,14,458,2649,19,2973,2653,19,2975,2657,19,2974,2661,21,1295,2667,21,1299,2672,21,1298,2678,21,1296,2684,21,1297,2690,21,1294,2697,21,1301,2703,21,1300,2713,14,472,2717,19,3015,2721,19,3017,2725,19,3016,2729,21,1407,2735,21,1411,2740,21,1410,2746,21,1408,2752,21,1409,2758,21,1406,2765,21,1413,2771,21,1412,2781,14,459,2785,19,2976,2789,19,2978,2793,19,2977,2797,21,1304,2803,21,1308,2808,21,1307,2814,21,1305,2820,21,1306,2826,21,1303,2833,21,1302,2839,21,1309]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/TokenSyntax.swift","symbols":[19,14,173,23,14,171,27,14,177,31,14,174,35,14,176,42,14,172,46,14,175]}]}