{"culture":"SwiftSyntax","dependencies":[],"extensions":[],"partitions":[{"namespace":"SwiftSyntax","communities":[{"community":"protocol","startIndex":0,"endIndex":17},{"community":"enum","startIndex":17,"endIndex":25},{"community":"struct","startIndex":25,"endIndex":543},{"community":"class","startIndex":543,"endIndex":550},{"community":"enum.case","startIndex":550,"endIndex":959},{"community":"init","startIndex":959,"endIndex":1456},{"community":"subscript","startIndex":1456,"endIndex":1501},{"community":"type.property","startIndex":1501,"endIndex":1503},{"community":"property","startIndex":1503,"endIndex":3488},{"community":"type.method","startIndex":3488,"endIndex":4128},{"community":"method","startIndex":4128,"endIndex":7629},{"community":"type.op","startIndex":7629,"endIndex":7644},{"community":"func.op","startIndex":7644,"endIndex":7645},{"community":"func","startIndex":7645,"endIndex":7646},{"community":"typealias","startIndex":7646,"endIndex":7736}]}],"identifiers":["s11SwiftSyntax013ParenthesizedB0P","s11SwiftSyntax013WithCodeBlockB0P","s11SwiftSyntax014IdentifiedDeclB0P","s11SwiftSyntax014WithStatementsB0P","s11SwiftSyntax017WithTrailingCommaB0P","s11SwiftSyntax04DeclB8ProtocolP","s11SwiftSyntax04ExprB8ProtocolP","s11SwiftSyntax04StmtB8ProtocolP","s11SwiftSyntax04TypeB8ProtocolP","s11SwiftSyntax06BracedB0P","s11SwiftSyntax07LabeledB0P","s11SwiftSyntax07PatternB8ProtocolP","s11SwiftSyntax09DeclGroupB0P","s11SwiftSyntax0B10CollectionP","s11SwiftSyntax0B8HashableP","s11SwiftSyntax0B8ProtocolP","s11SwiftSyntax34IncrementalParseReusedNodeDelegateP","s11SwiftSyntax0B13VerifierErrorO","s11SwiftSyntax0B14ClassificationO","s11SwiftSyntax0B19VisitorContinueKindO","s11SwiftSyntax0B4EnumO","s11SwiftSyntax0B7FactoryO","s11SwiftSyntax11TriviaPieceO","s11SwiftSyntax14SourcePresenceO","s11SwiftSyntax9TokenKindO","s11SwiftSyntax010AccessPathB0V","s11SwiftSyntax010AccessPathB0V8IteratorV","s11SwiftSyntax010ImportDeclB0V","s11SwiftSyntax010ImportDeclB7BuilderV","s11SwiftSyntax010ReturnStmtB0V","s11SwiftSyntax010ReturnStmtB7BuilderV","s11SwiftSyntax010SourceFileB0V","s11SwiftSyntax010SourceFileB7BuilderV","s11SwiftSyntax010StructDeclB0V","s11SwiftSyntax010StructDeclB7BuilderV","s11SwiftSyntax010SwitchCaseB0V","s11SwiftSyntax010SwitchCaseB7BuilderV","s11SwiftSyntax010SwitchStmtB0V","s11SwiftSyntax010SwitchStmtB7BuilderV","s11SwiftSyntax011CatchClauseB0V","s11SwiftSyntax011CatchClauseB7BuilderV","s11SwiftSyntax011ClosureExprB0V","s11SwiftSyntax011ClosureExprB7BuilderV","s11SwiftSyntax011KeyPathExprB0V","s11SwiftSyntax011KeyPathExprB7BuilderV","s11SwiftSyntax011TernaryExprB0V","s11SwiftSyntax011TernaryExprB7BuilderV","s11SwiftSyntax011UnknownDeclB0V","s11SwiftSyntax011UnknownExprB0V","s11SwiftSyntax011UnknownStmtB0V","s11SwiftSyntax011UnknownTypeB0V","s11SwiftSyntax011WhereClauseB0V","s11SwiftSyntax011WhereClauseB7BuilderV","s11SwiftSyntax012AccessorDeclB0V","s11SwiftSyntax012AccessorDeclB7BuilderV","s11SwiftSyntax012AccessorListB0V","s11SwiftSyntax012AccessorListB0V8IteratorV","s11SwiftSyntax012ArrayElementB0V","s11SwiftSyntax012ArrayElementB7BuilderV","s11SwiftSyntax012CaseItemListB0V","s11SwiftSyntax012CaseItemListB0V8IteratorV","s11SwiftSyntax012ClosureParamB0V","s11SwiftSyntax012ClosureParamB7BuilderV","s11SwiftSyntax012ContinueStmtB0V","s11SwiftSyntax012ContinueStmtB7BuilderV","s11SwiftSyntax012DeclModifierB0V","s11SwiftSyntax012DeclModifierB7BuilderV","s11SwiftSyntax012EnumCaseDeclB0V","s11SwiftSyntax012EnumCaseDeclB7BuilderV","s11SwiftSyntax012FunctionDeclB0V","s11SwiftSyntax012FunctionDeclB7BuilderV","s11SwiftSyntax012FunctionTypeB0V","s11SwiftSyntax012FunctionTypeB7BuilderV","s11SwiftSyntax012IfConfigDeclB0V","s11SwiftSyntax012IfConfigDeclB7BuilderV","s11SwiftSyntax012MetatypeTypeB0V","s11SwiftSyntax012MetatypeTypeB7BuilderV","s11SwiftSyntax012ModifierListB0V","s11SwiftSyntax012ModifierListB0V8IteratorV","s11SwiftSyntax012ObjCSelectorB0V","s11SwiftSyntax012ObjCSelectorB0V8IteratorV","s11SwiftSyntax012OperatorDeclB0V","s11SwiftSyntax012OperatorDeclB7BuilderV","s11SwiftSyntax012OptionalTypeB0V","s11SwiftSyntax012OptionalTypeB7BuilderV","s11SwiftSyntax012ProtocolDeclB0V","s11SwiftSyntax012ProtocolDeclB7BuilderV","s11SwiftSyntax012ReturnClauseB0V","s11SwiftSyntax012ReturnClauseB7BuilderV","s11SwiftSyntax012SequenceExprB0V","s11SwiftSyntax012SequenceExprB7BuilderV","s11SwiftSyntax012SuperRefExprB0V","s11SwiftSyntax012SuperRefExprB7BuilderV","s11SwiftSyntax012TuplePatternB0V","s11SwiftSyntax012TuplePatternB7BuilderV","s11SwiftSyntax012VariableDeclB0V","s11SwiftSyntax012VariableDeclB7BuilderV","s11SwiftSyntax012VersionTupleB0V","s11SwiftSyntax012VersionTupleB7BuilderV","s11SwiftSyntax013AccessorBlockB0V","s11SwiftSyntax013AccessorBlockB7BuilderV","s11SwiftSyntax013AsTypePatternB0V","s11SwiftSyntax013AsTypePatternB7BuilderV","s11SwiftSyntax013AttributeListB0V","s11SwiftSyntax013AttributeListB0V8IteratorV","s11SwiftSyntax013CatchItemListB0V","s11SwiftSyntax013CatchItemListB0V8IteratorV","s11SwiftSyntax013CodeBlockItemB0V","s11SwiftSyntax013CodeBlockItemB7BuilderV","s11SwiftSyntax013ExtensionDeclB0V","s11SwiftSyntax013ExtensionDeclB7BuilderV","s11SwiftSyntax013InheritedTypeB0V","s11SwiftSyntax013InheritedTypeB7BuilderV","s11SwiftSyntax013IsTypePatternB0V","s11SwiftSyntax013IsTypePatternB7BuilderV","s11SwiftSyntax013ObjcNamePieceB0V","s11SwiftSyntax013ObjcNamePieceB7BuilderV","s11SwiftSyntax013PoundFileExprB0V","s11SwiftSyntax013PoundFileExprB7BuilderV","s11SwiftSyntax013PoundLineExprB0V","s11SwiftSyntax013PoundLineExprB7BuilderV","s11SwiftSyntax013StringSegmentB0V","s11SwiftSyntax013StringSegmentB7BuilderV","s11SwiftSyntax013SubscriptDeclB0V","s11SwiftSyntax013SubscriptDeclB7BuilderV","s11SwiftSyntax013SubscriptExprB0V","s11SwiftSyntax013SubscriptExprB7BuilderV","s11SwiftSyntax013TypealiasDeclB0V","s11SwiftSyntax013TypealiasDeclB7BuilderV","s11SwiftSyntax014AssignmentExprB0V","s11SwiftSyntax014AssignmentExprB7BuilderV","s11SwiftSyntax014AttributedTypeB0V","s11SwiftSyntax014AttributedTypeB7BuilderV","s11SwiftSyntax014DictionaryExprB0V","s11SwiftSyntax014DictionaryExprB7BuilderV","s11SwiftSyntax014DictionaryTypeB0V","s11SwiftSyntax014DictionaryTypeB7BuilderV","s11SwiftSyntax014ExpressionStmtB0V","s11SwiftSyntax014ExpressionStmtB7BuilderV","s11SwiftSyntax014IdentifierExprB0V","s11SwiftSyntax014IdentifierExprB7BuilderV","s11SwiftSyntax014IdentifierListB0V","s11SwiftSyntax014IdentifierListB0V8IteratorV","s11SwiftSyntax014IfConfigClauseB0V","s11SwiftSyntax014IfConfigClauseB7BuilderV","s11SwiftSyntax014MemberDeclListB0V","s11SwiftSyntax014MemberDeclListB0V8IteratorV","s11SwiftSyntax014NilLiteralExprB0V","s11SwiftSyntax014NilLiteralExprB7BuilderV","s11SwiftSyntax014PatternBindingB0V","s11SwiftSyntax014PatternBindingB7BuilderV","s11SwiftSyntax014PoundErrorDeclB0V","s11SwiftSyntax014PoundErrorDeclB7BuilderV","s11SwiftSyntax014SpecializeExprB0V","s11SwiftSyntax014SpecializeExprB7BuilderV","s11SwiftSyntax014SwitchCaseListB0V","s11SwiftSyntax014SwitchCaseListB0V8IteratorV","s11SwiftSyntax014TypeAnnotationB0V","s11SwiftSyntax014TypeAnnotationB7BuilderV","s11SwiftSyntax014UnknownPatternB0V","s11SwiftSyntax015CatchClauseListB0V","s11SwiftSyntax015CatchClauseListB0V8IteratorV","s11SwiftSyntax015CompositionTypeB0V","s11SwiftSyntax015CompositionTypeB7BuilderV","s11SwiftSyntax015CustomAttributeB0V","s11SwiftSyntax015CustomAttributeB7BuilderV","s11SwiftSyntax015DeclarationStmtB0V","s11SwiftSyntax015DeclarationStmtB7BuilderV","s11SwiftSyntax015EnumCaseElementB0V","s11SwiftSyntax015EnumCaseElementB7BuilderV","s11SwiftSyntax015EnumCasePatternB0V","s11SwiftSyntax015EnumCasePatternB7BuilderV","s11SwiftSyntax015FallthroughStmtB0V","s11SwiftSyntax015FallthroughStmtB7BuilderV","s11SwiftSyntax015ForcedValueExprB0V","s11SwiftSyntax015ForcedValueExprB7BuilderV","s11SwiftSyntax015GenericArgumentB0V","s11SwiftSyntax015GenericArgumentB7BuilderV","s11SwiftSyntax015InitializerDeclB0V","s11SwiftSyntax015InitializerDeclB7BuilderV","s11SwiftSyntax015KeyPathBaseExprB0V","s11SwiftSyntax015KeyPathBaseExprB7BuilderV","s11SwiftSyntax015MemberDeclBlockB0V","s11SwiftSyntax015MemberDeclBlockB7BuilderV","s11SwiftSyntax015ObjcKeyPathExprB0V","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV","s11SwiftSyntax015OptionalPatternB0V","s11SwiftSyntax015OptionalPatternB7BuilderV","s11SwiftSyntax015ParameterClauseB0V","s11SwiftSyntax015ParameterClauseB7BuilderV","s11SwiftSyntax015PoundAssertStmtB0V","s11SwiftSyntax015PoundAssertStmtB7BuilderV","s11SwiftSyntax015PoundColumnExprB0V","s11SwiftSyntax015PoundColumnExprB7BuilderV","s11SwiftSyntax015PoundFileIDExprB0V","s11SwiftSyntax015PoundFileIDExprB7BuilderV","s11SwiftSyntax015RepeatWhileStmtB0V","s11SwiftSyntax015RepeatWhileStmtB7BuilderV","s11SwiftSyntax015SwitchCaseLabelB0V","s11SwiftSyntax015SwitchCaseLabelB7BuilderV","s11SwiftSyntax015WildcardPatternB0V","s11SwiftSyntax015WildcardPatternB7BuilderV","s11SwiftSyntax016ArrayElementListB0V","s11SwiftSyntax016ArrayElementListB0V8IteratorV","s11SwiftSyntax016ClosureParamListB0V","s11SwiftSyntax016ClosureParamListB0V8IteratorV","s11SwiftSyntax016ClosureSignatureB0V","s11SwiftSyntax016ClosureSignatureB7BuilderV","s11SwiftSyntax016ConditionElementB0V","s11SwiftSyntax016ConditionElementB7BuilderV","s11SwiftSyntax016DeclNameArgumentB0V","s11SwiftSyntax016DeclNameArgumentB7BuilderV","s11SwiftSyntax016FloatLiteralExprB0V","s11SwiftSyntax016FloatLiteralExprB7BuilderV","s11SwiftSyntax016FunctionCallExprB0V","s11SwiftSyntax016FunctionCallExprB7BuilderV","s11SwiftSyntax016FunctionDeclNameB0V","s11SwiftSyntax016FunctionDeclNameB7BuilderV","s11SwiftSyntax016GenericParameterB0V","s11SwiftSyntax016GenericParameterB7BuilderV","s11SwiftSyntax016MemberAccessExprB0V","s11SwiftSyntax016MemberAccessExprB7BuilderV","s11SwiftSyntax016ObjcSelectorExprB0V","s11SwiftSyntax016ObjcSelectorExprB7BuilderV","s11SwiftSyntax016PostfixUnaryExprB0V","s11SwiftSyntax016PostfixUnaryExprB7BuilderV","s11SwiftSyntax016PoundWarningDeclB0V","s11SwiftSyntax016PoundWarningDeclB7BuilderV","s11SwiftSyntax016RegexLiteralExprB0V","s11SwiftSyntax016RegexLiteralExprB7BuilderV","s11SwiftSyntax016TupleExprElementB0V","s11SwiftSyntax016TupleExprElementB7BuilderV","s11SwiftSyntax016TupleTypeElementB0V","s11SwiftSyntax016TupleTypeElementB7BuilderV","s11SwiftSyntax017AccessorParameterB0V","s11SwiftSyntax017AccessorParameterB7BuilderV","s11SwiftSyntax017AvailabilityEntryB0V","s11SwiftSyntax017AvailabilityEntryB7BuilderV","s11SwiftSyntax017CodeBlockItemListB0V","s11SwiftSyntax017CodeBlockItemListB0V8IteratorV","s11SwiftSyntax017DeclNameArgumentsB0V","s11SwiftSyntax017DeclNameArgumentsB7BuilderV","s11SwiftSyntax017DeinitializerDeclB0V","s11SwiftSyntax017DeinitializerDeclB7BuilderV","s11SwiftSyntax017DictionaryElementB0V","s11SwiftSyntax017DictionaryElementB7BuilderV","s11SwiftSyntax017ExpressionPatternB0V","s11SwiftSyntax017ExpressionPatternB7BuilderV","s11SwiftSyntax017ExpressionSegmentB0V","s11SwiftSyntax017ExpressionSegmentB7BuilderV","s11SwiftSyntax017FunctionParameterB0V","s11SwiftSyntax017FunctionParameterB7BuilderV","s11SwiftSyntax017FunctionSignatureB0V","s11SwiftSyntax017FunctionSignatureB7BuilderV","s11SwiftSyntax017IdentifierPatternB0V","s11SwiftSyntax017IdentifierPatternB7BuilderV","s11SwiftSyntax017InheritedTypeListB0V","s11SwiftSyntax017InheritedTypeListB0V8IteratorV","s11SwiftSyntax017InitializerClauseB0V","s11SwiftSyntax017InitializerClauseB7BuilderV","s11SwiftSyntax017NonEmptyTokenListB0V","s11SwiftSyntax017NonEmptyTokenListB0V8IteratorV","s11SwiftSyntax017ObjCSelectorPieceB0V","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV","s11SwiftSyntax017ObjectLiteralExprB0V","s11SwiftSyntax017ObjectLiteralExprB7BuilderV","s11SwiftSyntax017PoundFilePathExprB0V","s11SwiftSyntax017PoundFilePathExprB7BuilderV","s11SwiftSyntax017PoundFunctionExprB0V","s11SwiftSyntax017PoundFunctionExprB7BuilderV","s11SwiftSyntax017QualifiedDeclNameB0V","s11SwiftSyntax017QualifiedDeclNameB7BuilderV","s11SwiftSyntax017StringLiteralExprB0V","s11SwiftSyntax017StringLiteralExprB7BuilderV","s11SwiftSyntax018AssociatedtypeDeclB0V","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV","s11SwiftSyntax018BinaryOperatorExprB0V","s11SwiftSyntax018BinaryOperatorExprB7BuilderV","s11SwiftSyntax018BooleanLiteralExprB0V","s11SwiftSyntax018BooleanLiteralExprB7BuilderV","s11SwiftSyntax018ClosureCaptureItemB0V","s11SwiftSyntax018ClosureCaptureItemB7BuilderV","s11SwiftSyntax018ElseIfContinuationB0V","s11SwiftSyntax018ElseIfContinuationB7BuilderV","s11SwiftSyntax018GenericRequirementB0V","s11SwiftSyntax018GenericRequirementB7BuilderV","s11SwiftSyntax018GenericWhereClauseB0V","s11SwiftSyntax018GenericWhereClauseB7BuilderV","s11SwiftSyntax018IfConfigClauseListB0V","s11SwiftSyntax018IfConfigClauseListB0V8IteratorV","s11SwiftSyntax018IntegerLiteralExprB0V","s11SwiftSyntax018IntegerLiteralExprB7BuilderV","s11SwiftSyntax018MemberDeclListItemB0V","s11SwiftSyntax018MemberDeclListItemB7BuilderV","s11SwiftSyntax018PatternBindingListB0V","s11SwiftSyntax018PatternBindingListB0V8IteratorV","s11SwiftSyntax018PoundDsohandleExprB0V","s11SwiftSyntax018PoundDsohandleExprB7BuilderV","s11SwiftSyntax018PrefixOperatorExprB0V","s11SwiftSyntax018PrefixOperatorExprB7BuilderV","s11SwiftSyntax018SwitchDefaultLabelB0V","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV","s11SwiftSyntax019AccessLevelModifierB0V","s11SwiftSyntax019AccessLevelModifierB7BuilderV","s11SwiftSyntax019AccessPathComponentB0V","s11SwiftSyntax019AccessPathComponentB7BuilderV","s11SwiftSyntax019EnumCaseElementListB0V","s11SwiftSyntax019EnumCaseElementListB0V8IteratorV","s11SwiftSyntax019GenericArgumentListB0V","s11SwiftSyntax019GenericArgumentListB0V8IteratorV","s11SwiftSyntax019PostfixIfConfigExprB0V","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV","s11SwiftSyntax019PoundSourceLocationB0V","s11SwiftSyntax019PoundSourceLocationB7BuilderV","s11SwiftSyntax019PrecedenceGroupDeclB0V","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV","s11SwiftSyntax019SameTypeRequirementB0V","s11SwiftSyntax019SameTypeRequirementB7BuilderV","s11SwiftSyntax019TargetFunctionEntryB0V","s11SwiftSyntax019TargetFunctionEntryB7BuilderV","s11SwiftSyntax019TuplePatternElementB0V","s11SwiftSyntax019TuplePatternElementB7BuilderV","s11SwiftSyntax019ValueBindingPatternB0V","s11SwiftSyntax019ValueBindingPatternB7BuilderV","s11SwiftSyntax020AvailabilityArgumentB0V","s11SwiftSyntax020AvailabilityArgumentB7BuilderV","s11SwiftSyntax020AvailabilitySpecListB0V","s11SwiftSyntax020AvailabilitySpecListB0V8IteratorV","s11SwiftSyntax020ClassRestrictionTypeB0V","s11SwiftSyntax020ClassRestrictionTypeB7BuilderV","s11SwiftSyntax020ConditionElementListB0V","s11SwiftSyntax020ConditionElementListB0V8IteratorV","s11SwiftSyntax020ConstrainedSugarTypeB0V","s11SwiftSyntax020ConstrainedSugarTypeB7BuilderV","s11SwiftSyntax020DeclNameArgumentListB0V","s11SwiftSyntax020DeclNameArgumentListB0V8IteratorV","s11SwiftSyntax020GenericParameterListB0V","s11SwiftSyntax020GenericParameterListB0V8IteratorV","s11SwiftSyntax020MemberTypeIdentifierB0V","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV","s11SwiftSyntax020OptionalChainingExprB0V","s11SwiftSyntax020OptionalChainingExprB7BuilderV","s11SwiftSyntax020SimpleTypeIdentifierB0V","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV","s11SwiftSyntax020TupleExprElementListB0V","s11SwiftSyntax020TupleExprElementListB0V8IteratorV","s11SwiftSyntax020TupleTypeElementListB0V","s11SwiftSyntax020TupleTypeElementListB0V8IteratorV","s11SwiftSyntax021AvailabilityConditionB0V","s11SwiftSyntax021AvailabilityConditionB7BuilderV","s11SwiftSyntax021BackDeployVersionListB0V","s11SwiftSyntax021BackDeployVersionListB0V8IteratorV","s11SwiftSyntax021DictionaryElementListB0V","s11SwiftSyntax021DictionaryElementListB0V8IteratorV","s11SwiftSyntax021DiscardAssignmentExprB0V","s11SwiftSyntax021DiscardAssignmentExprB7BuilderV","s11SwiftSyntax021EditorPlaceholderExprB0V","s11SwiftSyntax021EditorPlaceholderExprB7BuilderV","s11SwiftSyntax021FunctionParameterListB0V","s11SwiftSyntax021FunctionParameterListB0V8IteratorV","s11SwiftSyntax021GenericArgumentClauseB0V","s11SwiftSyntax021GenericArgumentClauseB7BuilderV","s11SwiftSyntax021PrimaryAssociatedTypeB0V","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV","s11SwiftSyntax021StringLiteralSegmentsB0V","s11SwiftSyntax021StringLiteralSegmentsB0V8IteratorV","s11SwiftSyntax021SymbolicReferenceExprB0V","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV","s11SwiftSyntax021TypeInheritanceClauseB0V","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV","s11SwiftSyntax021TypeInitializerClauseB0V","s11SwiftSyntax021TypeInitializerClauseB7BuilderV","s11SwiftSyntax021UnresolvedPatternExprB0V","s11SwiftSyntax021UnresolvedPatternExprB7BuilderV","s11SwiftSyntax022ClosureCaptureItemListB0V","s11SwiftSyntax022ClosureCaptureItemListB0V8IteratorV","s11SwiftSyntax022CompositionTypeElementB0V","s11SwiftSyntax022CompositionTypeElementB7BuilderV","s11SwiftSyntax022ConformanceRequirementB0V","s11SwiftSyntax022ConformanceRequirementB7BuilderV","s11SwiftSyntax022DifferentiabilityParamB0V","s11SwiftSyntax022DifferentiabilityParamB7BuilderV","s11SwiftSyntax022GenericParameterClauseB0V","s11SwiftSyntax022GenericParameterClauseB7BuilderV","s11SwiftSyntax022GenericRequirementListB0V","s11SwiftSyntax022GenericRequirementListB0V8IteratorV","s11SwiftSyntax022LabeledSpecializeEntryB0V","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV","s11SwiftSyntax023ClosureCaptureSignatureB0V","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV","s11SwiftSyntax023DifferentiabilityParamsB0V","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV","s11SwiftSyntax023PoundSourceLocationArgsB0V","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV","s11SwiftSyntax023PrecedenceGroupNameListB0V","s11SwiftSyntax023PrecedenceGroupNameListB0V8IteratorV","s11SwiftSyntax023PrecedenceGroupRelationB0V","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV","s11SwiftSyntax023TuplePatternElementListB0V","s11SwiftSyntax023TuplePatternElementListB0V8IteratorV","s11SwiftSyntax023UnavailabilityConditionB0V","s11SwiftSyntax023UnavailabilityConditionB7BuilderV","s11SwiftSyntax024MatchingPatternConditionB0V","s11SwiftSyntax024MatchingPatternConditionB7BuilderV","s11SwiftSyntax024OptionalBindingConditionB0V","s11SwiftSyntax024OptionalBindingConditionB7BuilderV","s11SwiftSyntax025BackDeployVersionArgumentB0V","s11SwiftSyntax025BackDeployVersionArgumentB7BuilderV","s11SwiftSyntax025PrecedenceGroupAssignmentB0V","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV","s11SwiftSyntax025PrimaryAssociatedTypeListB0V","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8IteratorV","s11SwiftSyntax026CompositionTypeElementListB0V","s11SwiftSyntax026CompositionTypeElementListB0V8IteratorV","s11SwiftSyntax026DifferentiabilityParamListB0V","s11SwiftSyntax026DifferentiabilityParamListB0V8IteratorV","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV","s11SwiftSyntax026PrecedenceGroupNameElementB0V","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV","s11SwiftSyntax027AvailabilityLabeledArgumentB0V","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV","s11SwiftSyntax027BackDeployAttributeSpecListB0V","s11SwiftSyntax027BackDeployAttributeSpecListB7BuilderV","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V","s11SwiftSyntax027PrimaryAssociatedTypeClauseB7BuilderV","s11SwiftSyntax027SpecializeAttributeSpecListB0V","s11SwiftSyntax027SpecializeAttributeSpecListB0V8IteratorV","s11SwiftSyntax028ImplementsAttributeArgumentsB0V","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV","s11SwiftSyntax028NamedAttributeStringArgumentB0V","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV","s11SwiftSyntax028PrecedenceGroupAssociativityB0V","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV","s11SwiftSyntax028PrecedenceGroupAttributeListB0V","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8IteratorV","s11SwiftSyntax029DifferentiabilityParamsClauseB0V","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV","s11SwiftSyntax030AvailabilityVersionRestrictionB0V","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV","s11SwiftSyntax030MultipleTrailingClosureElementB0V","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV","s11SwiftSyntax034MultipleTrailingClosureElementListB0V","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8IteratorV","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV","s11SwiftSyntax04DeclB0V","s11SwiftSyntax04ExprB0V","s11SwiftSyntax04StmtB0V","s11SwiftSyntax04TypeB0V","s11SwiftSyntax05TokenB0V","s11SwiftSyntax06AsExprB0V","s11SwiftSyntax06AsExprB7BuilderV","s11SwiftSyntax06DoStmtB0V","s11SwiftSyntax06DoStmtB7BuilderV","s11SwiftSyntax06IfStmtB0V","s11SwiftSyntax06IfStmtB7BuilderV","s11SwiftSyntax06IsExprB0V","s11SwiftSyntax06IsExprB7BuilderV","s11SwiftSyntax07PatternB0V","s11SwiftSyntax07TryExprB0V","s11SwiftSyntax07TryExprB7BuilderV","s11SwiftSyntax07UnknownB0V","s11SwiftSyntax08CaseItemB0V","s11SwiftSyntax08CaseItemB7BuilderV","s11SwiftSyntax08DeclNameB0V","s11SwiftSyntax08DeclNameB7BuilderV","s11SwiftSyntax08EnumDeclB0V","s11SwiftSyntax08EnumDeclB7BuilderV","s11SwiftSyntax08ExprListB0V","s11SwiftSyntax08ExprListB0V8IteratorV","s11SwiftSyntax08ObjcNameB0V","s11SwiftSyntax08ObjcNameB0V8IteratorV","s11SwiftSyntax08TypeExprB0V","s11SwiftSyntax08TypeExprB7BuilderV","s11SwiftSyntax09ArrayExprB0V","s11SwiftSyntax09ArrayExprB7BuilderV","s11SwiftSyntax09ArrayTypeB0V","s11SwiftSyntax09ArrayTypeB7BuilderV","s11SwiftSyntax09ArrowExprB0V","s11SwiftSyntax09ArrowExprB7BuilderV","s11SwiftSyntax09AttributeB0V","s11SwiftSyntax09AttributeB7BuilderV","s11SwiftSyntax09AwaitExprB0V","s11SwiftSyntax09AwaitExprB7BuilderV","s11SwiftSyntax09BreakStmtB0V","s11SwiftSyntax09BreakStmtB7BuilderV","s11SwiftSyntax09CatchItemB0V","s11SwiftSyntax09CatchItemB7BuilderV","s11SwiftSyntax09ClassDeclB0V","s11SwiftSyntax09ClassDeclB7BuilderV","s11SwiftSyntax09CodeBlockB0V","s11SwiftSyntax09CodeBlockB7BuilderV","s11SwiftSyntax09DeferStmtB0V","s11SwiftSyntax09DeferStmtB7BuilderV","s11SwiftSyntax09ElseBlockB0V","s11SwiftSyntax09ElseBlockB7BuilderV","s11SwiftSyntax09ForInStmtB0V","s11SwiftSyntax09ForInStmtB7BuilderV","s11SwiftSyntax09GuardStmtB0V","s11SwiftSyntax09GuardStmtB7BuilderV","s11SwiftSyntax09InOutExprB0V","s11SwiftSyntax09InOutExprB7BuilderV","s11SwiftSyntax09ThrowStmtB0V","s11SwiftSyntax09ThrowStmtB7BuilderV","s11SwiftSyntax09TokenListB0V","s11SwiftSyntax09TokenListB0V8IteratorV","s11SwiftSyntax09TupleExprB0V","s11SwiftSyntax09TupleExprB7BuilderV","s11SwiftSyntax09TupleTypeB0V","s11SwiftSyntax09TupleTypeB7BuilderV","s11SwiftSyntax09WhileStmtB0V","s11SwiftSyntax09WhileStmtB7BuilderV","s11SwiftSyntax09YieldListB0V","s11SwiftSyntax09YieldListB7BuilderV","s11SwiftSyntax09YieldStmtB0V","s11SwiftSyntax09YieldStmtB7BuilderV","s11SwiftSyntax0B0V","s11SwiftSyntax0B10IdentifierV","s11SwiftSyntax0B13ChildrenIndexV","s11SwiftSyntax0B15ClassificationsV","s11SwiftSyntax0B15ClassificationsV8IteratorV","s11SwiftSyntax0B15ClassifiedRangeV","s11SwiftSyntax0B17ChildrenIndexDataV","s11SwiftSyntax0B4NodeV","s11SwiftSyntax0B8ChildrenV","s11SwiftSyntax10SourceEditV","s11SwiftSyntax11SourceRangeV","s11SwiftSyntax12SourceLengthV","s11SwiftSyntax13TokenSequenceV","s11SwiftSyntax13TokenSequenceV8IteratorV","s11SwiftSyntax14SourceLocationV","s11SwiftSyntax15ByteSourceRangeV","s11SwiftSyntax15ConcurrentEditsV","s11SwiftSyntax16AbsolutePositionV","s11SwiftSyntax21ReversedTokenSequenceV","s11SwiftSyntax21ReversedTokenSequenceV8IteratorV","s11SwiftSyntax22IncrementalParseLookupV","s11SwiftSyntax6TriviaV","s11SwiftSyntax0B10AnyVisitorC","s11SwiftSyntax0B7VisitorC","s11SwiftSyntax0B8RewriterC","s11SwiftSyntax0B8VerifierC","s11SwiftSyntax23SourceLocationConverterC","s11SwiftSyntax26IncrementalParseTransitionC","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC","s11SwiftSyntax0B13VerifierErrorO07unknownB5FoundyAcA0B0V_tcACmF","s11SwiftSyntax0B14ClassificationO10identifieryA2CmF","s11SwiftSyntax0B14ClassificationO11lineCommentyA2CmF","s11SwiftSyntax0B14ClassificationO12blockCommentyA2CmF","s11SwiftSyntax0B14ClassificationO13buildConfigIdyA2CmF","s11SwiftSyntax0B14ClassificationO13objectLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO13stringLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO14docLineCommentyA2CmF","s11SwiftSyntax0B14ClassificationO14integerLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO14typeIdentifieryA2CmF","s11SwiftSyntax0B14ClassificationO15docBlockCommentyA2CmF","s11SwiftSyntax0B14ClassificationO15floatingLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO16dollarIdentifieryA2CmF","s11SwiftSyntax0B14ClassificationO17editorPlaceholderyA2CmF","s11SwiftSyntax0B14ClassificationO21poundDirectiveKeywordyA2CmF","s11SwiftSyntax0B14ClassificationO25stringInterpolationAnchoryA2CmF","s11SwiftSyntax0B14ClassificationO4noneyA2CmF","s11SwiftSyntax0B14ClassificationO7keywordyA2CmF","s11SwiftSyntax0B14ClassificationO9attributeyA2CmF","s11SwiftSyntax0B19VisitorContinueKindO12skipChildrenyA2CmF","s11SwiftSyntax0B19VisitorContinueKindO13visitChildrenyA2CmF","s11SwiftSyntax0B4EnumO10accessPathyAcA06AccesseB0VcACmF","s11SwiftSyntax0B4EnumO10importDeclyAcA06ImporteB0VcACmF","s11SwiftSyntax0B4EnumO10returnStmtyAcA06ReturneB0VcACmF","s11SwiftSyntax0B4EnumO10sourceFileyAcA06SourceeB0VcACmF","s11SwiftSyntax0B4EnumO10structDeclyAcA06StructeB0VcACmF","s11SwiftSyntax0B4EnumO10switchCaseyAcA06SwitcheB0VcACmF","s11SwiftSyntax0B4EnumO10switchStmtyAcA06SwitcheB0VcACmF","s11SwiftSyntax0B4EnumO11catchClauseyAcA05CatcheB0VcACmF","s11SwiftSyntax0B4EnumO11closureExpryAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO11keyPathExpryAcA03KeyefB0VcACmF","s11SwiftSyntax0B4EnumO11ternaryExpryAcA07TernaryeB0VcACmF","s11SwiftSyntax0B4EnumO11unknownDeclyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownExpryAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownStmtyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownTypeyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11whereClauseyAcA05WhereeB0VcACmF","s11SwiftSyntax0B4EnumO12accessorDeclyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO12accessorListyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO12arrayElementyAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO12caseItemListyAcA04CaseefB0VcACmF","s11SwiftSyntax0B4EnumO12closureParamyAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO12continueStmtyAcA08ContinueeB0VcACmF","s11SwiftSyntax0B4EnumO12declModifieryAcA04DecleB0VcACmF","s11SwiftSyntax0B4EnumO12enumCaseDeclyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO12functionDeclyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO12functionTypeyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO12ifConfigDeclyAcA02IfefB0VcACmF","s11SwiftSyntax0B4EnumO12metatypeTypeyAcA08MetatypeeB0VcACmF","s11SwiftSyntax0B4EnumO12modifierListyAcA08ModifiereB0VcACmF","s11SwiftSyntax0B4EnumO12objCSelectoryAcA03ObjeB0VcACmF","s11SwiftSyntax0B4EnumO12operatorDeclyAcA08OperatoreB0VcACmF","s11SwiftSyntax0B4EnumO12optionalTypeyAcA08OptionaleB0VcACmF","s11SwiftSyntax0B4EnumO12protocolDeclyAcA08ProtocoleB0VcACmF","s11SwiftSyntax0B4EnumO12returnClauseyAcA06ReturneB0VcACmF","s11SwiftSyntax0B4EnumO12sequenceExpryAcA08SequenceeB0VcACmF","s11SwiftSyntax0B4EnumO12superRefExpryAcA05SuperefB0VcACmF","s11SwiftSyntax0B4EnumO12tuplePatternyAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO12variableDeclyAcA08VariableeB0VcACmF","s11SwiftSyntax0B4EnumO12versionTupleyAcA07VersioneB0VcACmF","s11SwiftSyntax0B4EnumO13accessorBlockyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO13asTypePatternyAcA02AsefB0VcACmF","s11SwiftSyntax0B4EnumO13attributeListyAcA09AttributeeB0VcACmF","s11SwiftSyntax0B4EnumO13catchItemListyAcA05CatchefB0VcACmF","s11SwiftSyntax0B4EnumO13codeBlockItemyAcA04CodeefB0VcACmF","s11SwiftSyntax0B4EnumO13extensionDeclyAcA09ExtensioneB0VcACmF","s11SwiftSyntax0B4EnumO13inheritedTypeyAcA09InheritedeB0VcACmF","s11SwiftSyntax0B4EnumO13isTypePatternyAcA02IsefB0VcACmF","s11SwiftSyntax0B4EnumO13objcNamePieceyAcA04ObjcefB0VcACmF","s11SwiftSyntax0B4EnumO13poundFileExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO13poundLineExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO13stringSegmentyAcA06StringeB0VcACmF","s11SwiftSyntax0B4EnumO13subscriptDeclyAcA09SubscripteB0VcACmF","s11SwiftSyntax0B4EnumO13subscriptExpryAcA09SubscripteB0VcACmF","s11SwiftSyntax0B4EnumO13typealiasDeclyAcA09TypealiaseB0VcACmF","s11SwiftSyntax0B4EnumO14assignmentExpryAcA010AssignmenteB0VcACmF","s11SwiftSyntax0B4EnumO14attributedTypeyAcA010AttributedeB0VcACmF","s11SwiftSyntax0B4EnumO14dictionaryExpryAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO14dictionaryTypeyAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO14expressionStmtyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO14identifierExpryAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO14identifierListyAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO14ifConfigClauseyAcA02IfefB0VcACmF","s11SwiftSyntax0B4EnumO14memberDeclListyAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO14nilLiteralExpryAcA03NilefB0VcACmF","s11SwiftSyntax0B4EnumO14patternBindingyAcA07PatterneB0VcACmF","s11SwiftSyntax0B4EnumO14poundErrorDeclyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO14specializeExpryAcA010SpecializeeB0VcACmF","s11SwiftSyntax0B4EnumO14switchCaseListyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO14typeAnnotationyAcA04TypeeB0VcACmF","s11SwiftSyntax0B4EnumO14unknownPatternyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO15catchClauseListyAcA05CatchefB0VcACmF","s11SwiftSyntax0B4EnumO15compositionTypeyAcA011CompositioneB0VcACmF","s11SwiftSyntax0B4EnumO15customAttributeyAcA06CustomeB0VcACmF","s11SwiftSyntax0B4EnumO15declarationStmtyAcA011DeclarationeB0VcACmF","s11SwiftSyntax0B4EnumO15enumCaseElementyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO15enumCasePatternyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO15fallthroughStmtyAcA011FallthrougheB0VcACmF","s11SwiftSyntax0B4EnumO15forcedValueExpryAcA06ForcedefB0VcACmF","s11SwiftSyntax0B4EnumO15genericArgumentyAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO15initializerDeclyAcA011InitializereB0VcACmF","s11SwiftSyntax0B4EnumO15keyPathBaseExpryAcA03KeyefgB0VcACmF","s11SwiftSyntax0B4EnumO15memberDeclBlockyAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO15objcKeyPathExpryAcA04ObjcefgB0VcACmF","s11SwiftSyntax0B4EnumO15optionalPatternyAcA08OptionaleB0VcACmF","s11SwiftSyntax0B4EnumO15parameterClauseyAcA09ParametereB0VcACmF","s11SwiftSyntax0B4EnumO15poundAssertStmtyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15poundColumnExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15poundFileIDExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15repeatWhileStmtyAcA06RepeatefB0VcACmF","s11SwiftSyntax0B4EnumO15switchCaseLabelyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO15wildcardPatternyAcA08WildcardeB0VcACmF","s11SwiftSyntax0B4EnumO16arrayElementListyAcA05ArrayefB0VcACmF","s11SwiftSyntax0B4EnumO16closureParamListyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO16closureSignatureyAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO16conditionElementyAcA09ConditioneB0VcACmF","s11SwiftSyntax0B4EnumO16declNameArgumentyAcA04DeclefB0VcACmF","s11SwiftSyntax0B4EnumO16floatLiteralExpryAcA05FloatefB0VcACmF","s11SwiftSyntax0B4EnumO16functionCallExpryAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO16functionDeclNameyAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO16genericParameteryAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO16memberAccessExpryAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO16objcSelectorExpryAcA04ObjcefB0VcACmF","s11SwiftSyntax0B4EnumO16postfixUnaryExpryAcA07PostfixefB0VcACmF","s11SwiftSyntax0B4EnumO16poundWarningDeclyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO16regexLiteralExpryAcA05RegexefB0VcACmF","s11SwiftSyntax0B4EnumO16tupleExprElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO16tupleTypeElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO17accessorParameteryAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO17availabilityEntryyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO17codeBlockItemListyAcA04CodeefgB0VcACmF","s11SwiftSyntax0B4EnumO17declNameArgumentsyAcA04DeclefB0VcACmF","s11SwiftSyntax0B4EnumO17deinitializerDeclyAcA013DeinitializereB0VcACmF","s11SwiftSyntax0B4EnumO17dictionaryElementyAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO17expressionPatternyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO17expressionSegmentyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO17functionParameteryAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO17functionSignatureyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO17identifierPatternyAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO17inheritedTypeListyAcA09InheritedefB0VcACmF","s11SwiftSyntax0B4EnumO17initializerClauseyAcA011InitializereB0VcACmF","s11SwiftSyntax0B4EnumO17nonEmptyTokenListyAcA03NonefgB0VcACmF","s11SwiftSyntax0B4EnumO17objCSelectorPieceyAcA03ObjefB0VcACmF","s11SwiftSyntax0B4EnumO17objectLiteralExpryAcA06ObjectefB0VcACmF","s11SwiftSyntax0B4EnumO17poundFilePathExpryAcA05PoundefgB0VcACmF","s11SwiftSyntax0B4EnumO17poundFunctionExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO17qualifiedDeclNameyAcA09QualifiedefB0VcACmF","s11SwiftSyntax0B4EnumO17stringLiteralExpryAcA06StringefB0VcACmF","s11SwiftSyntax0B4EnumO18associatedtypeDeclyAcA014AssociatedtypeeB0VcACmF","s11SwiftSyntax0B4EnumO18binaryOperatorExpryAcA06BinaryefB0VcACmF","s11SwiftSyntax0B4EnumO18booleanLiteralExpryAcA07BooleanefB0VcACmF","s11SwiftSyntax0B4EnumO18closureCaptureItemyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO18elseIfContinuationyAcA04ElseefB0VcACmF","s11SwiftSyntax0B4EnumO18genericRequirementyAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO18genericWhereClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO18ifConfigClauseListyAcA02IfefgB0VcACmF","s11SwiftSyntax0B4EnumO18integerLiteralExpryAcA07IntegerefB0VcACmF","s11SwiftSyntax0B4EnumO18memberDeclListItemyAcA06MemberefgB0VcACmF","s11SwiftSyntax0B4EnumO18patternBindingListyAcA07PatternefB0VcACmF","s11SwiftSyntax0B4EnumO18poundDsohandleExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO18prefixOperatorExpryAcA06PrefixefB0VcACmF","s11SwiftSyntax0B4EnumO18switchDefaultLabelyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO19accessLevelModifieryAcA06AccessefB0VcACmF","s11SwiftSyntax0B4EnumO19accessPathComponentyAcA06AccessefB0VcACmF","s11SwiftSyntax0B4EnumO19enumCaseElementListyAcA0cefgB0VcACmF","s11SwiftSyntax0B4EnumO19genericArgumentListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO19postfixIfConfigExpryAcA07PostfixefgB0VcACmF","s11SwiftSyntax0B4EnumO19poundSourceLocationyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO19precedenceGroupDeclyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO19sameTypeRequirementyAcA04SameefB0VcACmF","s11SwiftSyntax0B4EnumO19targetFunctionEntryyAcA06TargetefB0VcACmF","s11SwiftSyntax0B4EnumO19tuplePatternElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO19valueBindingPatternyAcA05ValueefB0VcACmF","s11SwiftSyntax0B4EnumO20availabilityArgumentyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO20availabilitySpecListyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO20classRestrictionTypeyAcA05ClassefB0VcACmF","s11SwiftSyntax0B4EnumO20conditionElementListyAcA09ConditionefB0VcACmF","s11SwiftSyntax0B4EnumO20constrainedSugarTypeyAcA011ConstrainedefB0VcACmF","s11SwiftSyntax0B4EnumO20declNameArgumentListyAcA04DeclefgB0VcACmF","s11SwiftSyntax0B4EnumO20genericParameterListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO20memberTypeIdentifieryAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO20optionalChainingExpryAcA08OptionalefB0VcACmF","s11SwiftSyntax0B4EnumO20simpleTypeIdentifieryAcA06SimpleefB0VcACmF","s11SwiftSyntax0B4EnumO20tupleExprElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO20tupleTypeElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO21availabilityConditionyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO21backDeployVersionListyAcA04BackefgB0VcACmF","s11SwiftSyntax0B4EnumO21dictionaryElementListyAcA010DictionaryefB0VcACmF","s11SwiftSyntax0B4EnumO21discardAssignmentExpryAcA07DiscardefB0VcACmF","s11SwiftSyntax0B4EnumO21editorPlaceholderExpryAcA06EditorefB0VcACmF","s11SwiftSyntax0B4EnumO21functionParameterListyAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO21genericArgumentClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO21primaryAssociatedTypeyAcA07PrimaryefB0VcACmF","s11SwiftSyntax0B4EnumO21stringLiteralSegmentsyAcA06StringefB0VcACmF","s11SwiftSyntax0B4EnumO21symbolicReferenceExpryAcA08SymbolicefB0VcACmF","s11SwiftSyntax0B4EnumO21typeInheritanceClauseyAcA04TypeefB0VcACmF","s11SwiftSyntax0B4EnumO21typeInitializerClauseyAcA04TypeefB0VcACmF","s11SwiftSyntax0B4EnumO21unresolvedPatternExpryAcA010UnresolvedefB0VcACmF","s11SwiftSyntax0B4EnumO22closureCaptureItemListyAcA07ClosureefgB0VcACmF","s11SwiftSyntax0B4EnumO22compositionTypeElementyAcA011CompositionefB0VcACmF","s11SwiftSyntax0B4EnumO22conformanceRequirementyAcA011ConformanceeB0VcACmF","s11SwiftSyntax0B4EnumO22differentiabilityParamyAcA017DifferentiabilityeB0VcACmF","s11SwiftSyntax0B4EnumO22genericParameterClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO22genericRequirementListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO22labeledSpecializeEntryyAcA07LabeledefB0VcACmF","s11SwiftSyntax0B4EnumO23closureCaptureSignatureyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO23differentiabilityParamsyAcA017DifferentiabilityeB0VcACmF","s11SwiftSyntax0B4EnumO23poundSourceLocationArgsyAcA05PoundefgB0VcACmF","s11SwiftSyntax0B4EnumO23precedenceGroupNameListyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO23precedenceGroupRelationyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO23tuplePatternElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO23unavailabilityConditionyAcA014UnavailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO24matchingPatternConditionyAcA08MatchingefB0VcACmF","s11SwiftSyntax0B4EnumO24optionalBindingConditionyAcA08OptionalefB0VcACmF","s11SwiftSyntax0B4EnumO25backDeployVersionArgumentyAcA04BackefgB0VcACmF","s11SwiftSyntax0B4EnumO25precedenceGroupAssignmentyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO25primaryAssociatedTypeListyAcA07PrimaryefgB0VcACmF","s11SwiftSyntax0B4EnumO26compositionTypeElementListyAcA011CompositionefgB0VcACmF","s11SwiftSyntax0B4EnumO26differentiabilityParamListyAcA017DifferentiabilityefB0VcACmF","s11SwiftSyntax0B4EnumO26operatorPrecedenceAndTypesyAcA08OperatorefgB0VcACmF","s11SwiftSyntax0B4EnumO26precedenceGroupNameElementyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO27availabilityLabeledArgumentyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO27backDeployAttributeSpecListyAcA04BackefghB0VcACmF","s11SwiftSyntax0B4EnumO27primaryAssociatedTypeClauseyAcA07PrimaryefgB0VcACmF","s11SwiftSyntax0B4EnumO27specializeAttributeSpecListyAcA010SpecializeefgB0VcACmF","s11SwiftSyntax0B4EnumO28implementsAttributeArgumentsyAcA010ImplementsefB0VcACmF","s11SwiftSyntax0B4EnumO28namedAttributeStringArgumentyAcA05NamedefgB0VcACmF","s11SwiftSyntax0B4EnumO28precedenceGroupAssociativityyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO28precedenceGroupAttributeListyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO29differentiabilityParamsClauseyAcA017DifferentiabilityefB0VcACmF","s11SwiftSyntax0B4EnumO30availabilityVersionRestrictionyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO30multipleTrailingClosureElementyAcA08MultipleefgB0VcACmF","s11SwiftSyntax0B4EnumO31implicitlyUnwrappedOptionalTypeyAcA010ImplicitlyefgB0VcACmF","s11SwiftSyntax0B4EnumO32differentiableAttributeArgumentsyAcA014DifferentiableefB0VcACmF","s11SwiftSyntax0B4EnumO34multipleTrailingClosureElementListyAcA08MultipleefghB0VcACmF","s11SwiftSyntax0B4EnumO40derivativeRegistrationAttributeArgumentsyAcA010DerivativeefgB0VcACmF","s11SwiftSyntax0B4EnumO4declyAcA011UnknownDeclB0VcACmF","s11SwiftSyntax0B4EnumO4expryAcA011UnknownExprB0VcACmF","s11SwiftSyntax0B4EnumO4stmtyAcA011UnknownStmtB0VcACmF","s11SwiftSyntax0B4EnumO4typeyAcA011UnknownTypeB0VcACmF","s11SwiftSyntax0B4EnumO5tokenyAcA05TokenB0VcACmF","s11SwiftSyntax0B4EnumO6asExpryAcA02AseB0VcACmF","s11SwiftSyntax0B4EnumO6doStmtyAcA02DoeB0VcACmF","s11SwiftSyntax0B4EnumO6ifStmtyAcA02IfeB0VcACmF","s11SwiftSyntax0B4EnumO6isExpryAcA02IseB0VcACmF","s11SwiftSyntax0B4EnumO7patternyAcA014UnknownPatternB0VcACmF","s11SwiftSyntax0B4EnumO7tryExpryAcA03TryeB0VcACmF","s11SwiftSyntax0B4EnumO7unknownyAcA07UnknownB0VcACmF","s11SwiftSyntax0B4EnumO8caseItemyAcA04CaseeB0VcACmF","s11SwiftSyntax0B4EnumO8declNameyAcA04DecleB0VcACmF","s11SwiftSyntax0B4EnumO8enumDeclyAcA0ceB0VcACmF","s11SwiftSyntax0B4EnumO8exprListyAcA04ExpreB0VcACmF","s11SwiftSyntax0B4EnumO8objcNameyAcA04ObjceB0VcACmF","s11SwiftSyntax0B4EnumO8typeExpryAcA04TypeeB0VcACmF","s11SwiftSyntax0B4EnumO9arrayExpryAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO9arrayTypeyAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO9arrowExpryAcA05ArroweB0VcACmF","s11SwiftSyntax0B4EnumO9attributeyAcA09AttributeB0VcACmF","s11SwiftSyntax0B4EnumO9awaitExpryAcA05AwaiteB0VcACmF","s11SwiftSyntax0B4EnumO9breakStmtyAcA05BreakeB0VcACmF","s11SwiftSyntax0B4EnumO9catchItemyAcA05CatcheB0VcACmF","s11SwiftSyntax0B4EnumO9classDeclyAcA05ClasseB0VcACmF","s11SwiftSyntax0B4EnumO9codeBlockyAcA04CodeeB0VcACmF","s11SwiftSyntax0B4EnumO9deferStmtyAcA05DefereB0VcACmF","s11SwiftSyntax0B4EnumO9elseBlockyAcA04ElseeB0VcACmF","s11SwiftSyntax0B4EnumO9forInStmtyAcA03ForefB0VcACmF","s11SwiftSyntax0B4EnumO9guardStmtyAcA05GuardeB0VcACmF","s11SwiftSyntax0B4EnumO9inOutExpryAcA02InefB0VcACmF","s11SwiftSyntax0B4EnumO9throwStmtyAcA05ThroweB0VcACmF","s11SwiftSyntax0B4EnumO9tokenListyAcA05TokeneB0VcACmF","s11SwiftSyntax0B4EnumO9tupleExpryAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO9tupleTypeyAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO9whileStmtyAcA05WhileeB0VcACmF","s11SwiftSyntax0B4EnumO9yieldListyAcA05YieldeB0VcACmF","s11SwiftSyntax0B4EnumO9yieldStmtyAcA05YieldeB0VcACmF","s11SwiftSyntax11TriviaPieceO11garbageTextyACSScACmF","s11SwiftSyntax11TriviaPieceO11lineCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO12blockCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO12verticalTabsyACSicACmF","s11SwiftSyntax11TriviaPieceO14docLineCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO15carriageReturnsyACSicACmF","s11SwiftSyntax11TriviaPieceO15docBlockCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO23carriageReturnLineFeedsyACSicACmF","s11SwiftSyntax11TriviaPieceO4tabsyACSicACmF","s11SwiftSyntax11TriviaPieceO6spacesyACSicACmF","s11SwiftSyntax11TriviaPieceO8newlinesyACSicACmF","s11SwiftSyntax11TriviaPieceO9formfeedsyACSicACmF","s11SwiftSyntax14SourcePresenceO7missingyA2CmF","s11SwiftSyntax14SourcePresenceO7presentyA2CmF","s11SwiftSyntax9TokenKindO10anyKeywordyA2CmF","s11SwiftSyntax9TokenKindO10forKeywordyA2CmF","s11SwiftSyntax9TokenKindO10identifieryACSScACmF","s11SwiftSyntax9TokenKindO10letKeywordyA2CmF","s11SwiftSyntax9TokenKindO10nilKeywordyA2CmF","s11SwiftSyntax9TokenKindO10rightAngleyA2CmF","s11SwiftSyntax9TokenKindO10rightBraceyA2CmF","s11SwiftSyntax9TokenKindO10rightParenyA2CmF","s11SwiftSyntax9TokenKindO10tryKeywordyA2CmF","s11SwiftSyntax9TokenKindO10varKeywordyA2CmF","s11SwiftSyntax9TokenKindO11caseKeywordyA2CmF","s11SwiftSyntax9TokenKindO11elseKeywordyA2CmF","s11SwiftSyntax9TokenKindO11enumKeywordyA2CmF","s11SwiftSyntax9TokenKindO11funcKeywordyA2CmF","s11SwiftSyntax9TokenKindO11initKeywordyA2CmF","s11SwiftSyntax9TokenKindO11selfKeywordyA2CmF","s11SwiftSyntax9TokenKindO11singleQuoteyA2CmF","s11SwiftSyntax9TokenKindO11stringQuoteyA2CmF","s11SwiftSyntax9TokenKindO11trueKeywordyA2CmF","s11SwiftSyntax9TokenKindO12breakKeywordyA2CmF","s11SwiftSyntax9TokenKindO12catchKeywordyA2CmF","s11SwiftSyntax9TokenKindO12classKeywordyA2CmF","s11SwiftSyntax9TokenKindO12deferKeywordyA2CmF","s11SwiftSyntax9TokenKindO12falseKeywordyA2CmF","s11SwiftSyntax9TokenKindO12guardKeywordyA2CmF","s11SwiftSyntax9TokenKindO12inoutKeywordyA2CmF","s11SwiftSyntax9TokenKindO12prefixPeriodyA2CmF","s11SwiftSyntax9TokenKindO12regexLiteralyACSScACmF","s11SwiftSyntax9TokenKindO12superKeywordyA2CmF","s11SwiftSyntax9TokenKindO12throwKeywordyA2CmF","s11SwiftSyntax9TokenKindO12whereKeywordyA2CmF","s11SwiftSyntax9TokenKindO12whileKeywordyA2CmF","s11SwiftSyntax9TokenKindO13deinitKeywordyA2CmF","s11SwiftSyntax9TokenKindO13importKeywordyA2CmF","s11SwiftSyntax9TokenKindO13publicKeywordyA2CmF","s11SwiftSyntax9TokenKindO13repeatKeywordyA2CmF","s11SwiftSyntax9TokenKindO13returnKeywordyA2CmF","s11SwiftSyntax9TokenKindO13staticKeywordyA2CmF","s11SwiftSyntax9TokenKindO13stringLiteralyACSScACmF","s11SwiftSyntax9TokenKindO13stringSegmentyACSScACmF","s11SwiftSyntax9TokenKindO13structKeywordyA2CmF","s11SwiftSyntax9TokenKindO13switchKeywordyA2CmF","s11SwiftSyntax9TokenKindO13throwsKeywordyA2CmF","s11SwiftSyntax9TokenKindO14defaultKeywordyA2CmF","s11SwiftSyntax9TokenKindO14integerLiteralyACSScACmF","s11SwiftSyntax9TokenKindO14poundIfKeywordyA2CmF","s11SwiftSyntax9TokenKindO14prefixOperatoryACSScACmF","s11SwiftSyntax9TokenKindO14privateKeywordyA2CmF","s11SwiftSyntax9TokenKindO15continueKeywordyA2CmF","s11SwiftSyntax9TokenKindO15exclamationMarkyA2CmF","s11SwiftSyntax9TokenKindO15floatingLiteralyACSScACmF","s11SwiftSyntax9TokenKindO15internalKeywordyA2CmF","s11SwiftSyntax9TokenKindO15operatorKeywordyA2CmF","s11SwiftSyntax9TokenKindO15postfixOperatoryACSScACmF","s11SwiftSyntax9TokenKindO15prefixAmpersandyA2CmF","s11SwiftSyntax9TokenKindO15protocolKeywordyA2CmF","s11SwiftSyntax9TokenKindO15rethrowsKeywordyA2CmF","s11SwiftSyntax9TokenKindO15wildcardKeywordyA2CmF","s11SwiftSyntax9TokenKindO16dollarIdentifieryACSScACmF","s11SwiftSyntax9TokenKindO16extensionKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundElseKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundFileKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundLineKeywordyA2CmF","s11SwiftSyntax9TokenKindO16subscriptKeywordyA2CmF","s11SwiftSyntax9TokenKindO16typealiasKeywordyA2CmF","s11SwiftSyntax9TokenKindO17contextualKeywordyACSScACmF","s11SwiftSyntax9TokenKindO17infixQuestionMarkyA2CmF","s11SwiftSyntax9TokenKindO17leftSquareBracketyA2CmF","s11SwiftSyntax9TokenKindO17poundEndifKeywordyA2CmF","s11SwiftSyntax9TokenKindO17poundErrorKeywordyA2CmF","s11SwiftSyntax9TokenKindO18capitalSelfKeywordyA2CmF","s11SwiftSyntax9TokenKindO18fallthroughKeywordyA2CmF","s11SwiftSyntax9TokenKindO18fileprivateKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundAssertKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundColumnKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundElseifKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundFileIDKeywordyA2CmF","s11SwiftSyntax9TokenKindO18rawStringDelimiteryACSScACmF","s11SwiftSyntax9TokenKindO18rightSquareBracketyA2CmF","s11SwiftSyntax9TokenKindO19postfixQuestionMarkyA2CmF","s11SwiftSyntax9TokenKindO19poundKeyPathKeywordyA2CmF","s11SwiftSyntax9TokenKindO19poundWarningKeywordyA2CmF","s11SwiftSyntax9TokenKindO20multilineStringQuoteyA2CmF","s11SwiftSyntax9TokenKindO20poundFilePathKeywordyA2CmF","s11SwiftSyntax9TokenKindO20poundFunctionKeywordyA2CmF","s11SwiftSyntax9TokenKindO20poundSelectorKeywordyA2CmF","s11SwiftSyntax9TokenKindO20spacedBinaryOperatoryACSScACmF","s11SwiftSyntax9TokenKindO21associatedtypeKeywordyA2CmF","s11SwiftSyntax9TokenKindO21poundAvailableKeywordyA2CmF","s11SwiftSyntax9TokenKindO21poundDsohandleKeywordyA2CmF","s11SwiftSyntax9TokenKindO22precedencegroupKeywordyA2CmF","s11SwiftSyntax9TokenKindO22unspacedBinaryOperatoryACSScACmF","s11SwiftSyntax9TokenKindO23poundFileLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO23poundUnavailableKeywordyA2CmF","s11SwiftSyntax9TokenKindO24poundColorLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO24poundImageLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO25stringInterpolationAnchoryA2CmF","s11SwiftSyntax9TokenKindO26poundSourceLocationKeywordyA2CmF","s11SwiftSyntax9TokenKindO3eofyA2CmF","s11SwiftSyntax9TokenKindO5arrowyA2CmF","s11SwiftSyntax9TokenKindO5colonyA2CmF","s11SwiftSyntax9TokenKindO5commayA2CmF","s11SwiftSyntax9TokenKindO5equalyA2CmF","s11SwiftSyntax9TokenKindO5poundyA2CmF","s11SwiftSyntax9TokenKindO5yieldyA2CmF","s11SwiftSyntax9TokenKindO6atSignyA2CmF","s11SwiftSyntax9TokenKindO6periodyA2CmF","s11SwiftSyntax9TokenKindO7unknownyACSScACmF","s11SwiftSyntax9TokenKindO8backtickyA2CmF","s11SwiftSyntax9TokenKindO8ellipsisyA2CmF","s11SwiftSyntax9TokenKindO9asKeywordyA2CmF","s11SwiftSyntax9TokenKindO9backslashyA2CmF","s11SwiftSyntax9TokenKindO9doKeywordyA2CmF","s11SwiftSyntax9TokenKindO9ifKeywordyA2CmF","s11SwiftSyntax9TokenKindO9inKeywordyA2CmF","s11SwiftSyntax9TokenKindO9isKeywordyA2CmF","s11SwiftSyntax9TokenKindO9leftAngleyA2CmF","s11SwiftSyntax9TokenKindO9leftBraceyA2CmF","s11SwiftSyntax9TokenKindO9leftParenyA2CmF","s11SwiftSyntax9TokenKindO9semicolonyA2CmF","s11SwiftSyntax010AccessPathB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ImportDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ImportDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010ReturnStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ReturnStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SourceFileB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SourceFileB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010StructDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax010StructDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SwitchCaseB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SwitchCaseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SwitchStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SwitchStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011CatchClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax011CatchClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011ClosureExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011ClosureExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011KeyPathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011KeyPathExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax011TernaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011TernaryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011UnknownDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax011WhereClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax011WhereClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012AccessorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012AccessorDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012AccessorListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ArrayElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ArrayElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012CaseItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ClosureParamB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ClosureParamB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ContinueStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ContinueStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012DeclModifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax012DeclModifierB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012EnumCaseDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012EnumCaseDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012FunctionDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012FunctionDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012FunctionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012FunctionTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012IfConfigDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012IfConfigDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012MetatypeTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012MetatypeTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ModifierListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ObjCSelectorB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OperatorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OperatorDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012OptionalTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OptionalTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ProtocolDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ProtocolDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ReturnClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ReturnClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012SequenceExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax012SequenceExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012SuperRefExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax012SuperRefExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012TuplePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax012TuplePatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012VariableDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012VariableDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012VersionTupleB0VyACSgAA0B0Vcfc","s11SwiftSyntax012VersionTupleB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013AccessorBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax013AccessorBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013AsTypePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax013AsTypePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013AttributeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CatchItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CodeBlockItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CodeBlockItemB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013ExtensionDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013ExtensionDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013InheritedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax013InheritedTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013IsTypePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax013IsTypePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013ObjcNamePieceB0VyACSgAA0B0Vcfc","s11SwiftSyntax013ObjcNamePieceB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013PoundFileExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013PoundFileExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013PoundLineExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013PoundLineExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013StringSegmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax013StringSegmentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013SubscriptDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013SubscriptDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013SubscriptExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013SubscriptExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013TypealiasDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013TypealiasDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014AssignmentExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014AssignmentExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014AttributedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax014AttributedTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014DictionaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014DictionaryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014DictionaryTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax014DictionaryTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014ExpressionStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax014ExpressionStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014IdentifierExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IdentifierExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014IdentifierListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IfConfigClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IfConfigClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014MemberDeclListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014NilLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014NilLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014PatternBindingB0VyACSgAA0B0Vcfc","s11SwiftSyntax014PatternBindingB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014PoundErrorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax014PoundErrorDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014SpecializeExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014SpecializeExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014SwitchCaseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014TypeAnnotationB0VyACSgAA0B0Vcfc","s11SwiftSyntax014TypeAnnotationB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014UnknownPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CatchClauseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CompositionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CompositionTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015CustomAttributeB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CustomAttributeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015DeclarationStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015DeclarationStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015EnumCaseElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax015EnumCaseElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015EnumCasePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015EnumCasePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015FallthroughStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015FallthroughStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015ForcedValueExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ForcedValueExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015GenericArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax015GenericArgumentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015InitializerDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax015InitializerDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015KeyPathBaseExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015KeyPathBaseExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax015MemberDeclBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax015MemberDeclBlockB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015ObjcKeyPathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ObjcKeyPathExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax015OptionalPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015OptionalPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015ParameterClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ParameterClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015PoundAssertStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundAssertStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015PoundColumnExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundColumnExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015PoundFileIDExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundFileIDExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015RepeatWhileStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015RepeatWhileStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015SwitchCaseLabelB0VyACSgAA0B0Vcfc","s11SwiftSyntax015SwitchCaseLabelB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015WildcardPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015WildcardPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016ArrayElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureParamListB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureSignatureB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016ConditionElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ConditionElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016DeclNameArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax016DeclNameArgumentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FloatLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FloatLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FunctionCallExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FunctionCallExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FunctionDeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FunctionDeclNameB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016GenericParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax016GenericParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016MemberAccessExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016MemberAccessExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016ObjcSelectorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ObjcSelectorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016PostfixUnaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016PostfixUnaryExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016PoundWarningDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax016PoundWarningDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016RegexLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016RegexLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016TupleExprElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016TupleExprElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016TupleTypeElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016TupleTypeElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017AccessorParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax017AccessorParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017AvailabilityEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax017AvailabilityEntryB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017CodeBlockItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeclNameArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeclNameArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017DeinitializerDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeinitializerDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017DictionaryElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DictionaryElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017ExpressionPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ExpressionPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017ExpressionSegmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ExpressionSegmentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017FunctionParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax017FunctionParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017FunctionSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax017FunctionSignatureB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017IdentifierPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax017IdentifierPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017InheritedTypeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017InitializerClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax017InitializerClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017NonEmptyTokenListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjCSelectorPieceB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjCSelectorPieceB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017ObjectLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjectLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017PoundFilePathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017PoundFilePathExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax017PoundFunctionExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017PoundFunctionExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017QualifiedDeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax017QualifiedDeclNameB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017StringLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017StringLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018AssociatedtypeDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax018AssociatedtypeDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax018BinaryOperatorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018BinaryOperatorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018BooleanLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018BooleanLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018ClosureCaptureItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax018ClosureCaptureItemB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018ElseIfContinuationB0VyACSgAA0B0Vcfc","s11SwiftSyntax018ElseIfContinuationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018GenericRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax018GenericRequirementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax018GenericWhereClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax018GenericWhereClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018IfConfigClauseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax018IntegerLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018IntegerLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018MemberDeclListItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax018MemberDeclListItemB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax018PatternBindingListB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PoundDsohandleExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PoundDsohandleExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018PrefixOperatorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PrefixOperatorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018SwitchDefaultLabelB0VyACSgAA0B0Vcfc","s11SwiftSyntax018SwitchDefaultLabelB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019AccessLevelModifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax019AccessLevelModifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019AccessPathComponentB0VyACSgAA0B0Vcfc","s11SwiftSyntax019AccessPathComponentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019EnumCaseElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax019GenericArgumentListB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PostfixIfConfigExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PostfixIfConfigExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax019PoundSourceLocationB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PoundSourceLocationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019PrecedenceGroupDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PrecedenceGroupDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019SameTypeRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax019SameTypeRequirementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019TargetFunctionEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax019TargetFunctionEntryB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019TuplePatternElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax019TuplePatternElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019ValueBindingPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax019ValueBindingPatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020AvailabilityArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax020AvailabilityArgumentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax020AvailabilitySpecListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ClassRestrictionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ClassRestrictionTypeB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020ConditionElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ConstrainedSugarTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ConstrainedSugarTypeB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020DeclNameArgumentListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020GenericParameterListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020MemberTypeIdentifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax020MemberTypeIdentifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020OptionalChainingExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax020OptionalChainingExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020SimpleTypeIdentifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax020SimpleTypeIdentifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020TupleExprElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020TupleTypeElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021AvailabilityConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax021AvailabilityConditionB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax021BackDeployVersionListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021DictionaryElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021DiscardAssignmentExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021DiscardAssignmentExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021EditorPlaceholderExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021EditorPlaceholderExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021FunctionParameterListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021GenericArgumentClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021GenericArgumentClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021PrimaryAssociatedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax021PrimaryAssociatedTypeB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021StringLiteralSegmentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax021SymbolicReferenceExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021SymbolicReferenceExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021TypeInheritanceClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021TypeInheritanceClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021TypeInitializerClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021TypeInitializerClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021UnresolvedPatternExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021UnresolvedPatternExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022ClosureCaptureItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax022CompositionTypeElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax022CompositionTypeElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022ConformanceRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax022ConformanceRequirementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax022DifferentiabilityParamB0VyACSgAA0B0Vcfc","s11SwiftSyntax022DifferentiabilityParamB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax022GenericParameterClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax022GenericParameterClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022GenericRequirementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax022LabeledSpecializeEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax022LabeledSpecializeEntryB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023ClosureCaptureSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax023ClosureCaptureSignatureB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023DifferentiabilityParamsB0VyACSgAA0B0Vcfc","s11SwiftSyntax023DifferentiabilityParamsB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax023PoundSourceLocationArgsB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PoundSourceLocationArgsB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax023PrecedenceGroupNameListB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PrecedenceGroupRelationB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PrecedenceGroupRelationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023TuplePatternElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax023UnavailabilityConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax023UnavailabilityConditionB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax024MatchingPatternConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax024MatchingPatternConditionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax024OptionalBindingConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax024OptionalBindingConditionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax025BackDeployVersionArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax025BackDeployVersionArgumentB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax025PrecedenceGroupAssignmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax025PrecedenceGroupAssignmentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax025PrimaryAssociatedTypeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026CompositionTypeElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026DifferentiabilityParamListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026OperatorPrecedenceAndTypesB0VyACSgAA0B0Vcfc","s11SwiftSyntax026OperatorPrecedenceAndTypesB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax026PrecedenceGroupNameElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax026PrecedenceGroupNameElementB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax027AvailabilityLabeledArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax027AvailabilityLabeledArgumentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax027BackDeployAttributeSpecListB0VyACSgAA0B0Vcfc","s11SwiftSyntax027BackDeployAttributeSpecListB0VyACyAA0cdefgB7BuilderVzXEcfc","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax027SpecializeAttributeSpecListB0VyACSgAA0B0Vcfc","s11SwiftSyntax028ImplementsAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax028ImplementsAttributeArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax028NamedAttributeStringArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax028NamedAttributeStringArgumentB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax028PrecedenceGroupAssociativityB0VyACSgAA0B0Vcfc","s11SwiftSyntax028PrecedenceGroupAssociativityB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax028PrecedenceGroupAttributeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax029DifferentiabilityParamsClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax029DifferentiabilityParamsClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax030AvailabilityVersionRestrictionB0VyACSgAA0B0Vcfc","s11SwiftSyntax030AvailabilityVersionRestrictionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax030MultipleTrailingClosureElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax030MultipleTrailingClosureElementB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax032DifferentiableAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax032DifferentiableAttributeArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax034MultipleTrailingClosureElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax04DeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax04DeclB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04DeclB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04ExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax04ExprB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04ExprB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04StmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax04StmtB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04StmtB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04TypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax04TypeB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04TypeB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax05TokenB0VyACSgAA0B0Vcfc","s11SwiftSyntax06AsExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax06AsExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06DoStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax06DoStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06IfStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax06IfStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06IsExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax06IsExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax07PatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax07PatternB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax07PatternB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax07TryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax07TryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax07UnknownB0VyACSgAA0B0Vcfc","s11SwiftSyntax08CaseItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax08CaseItemB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08DeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax08DeclNameB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08EnumDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax08EnumDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08ExprListB0VyACSgAA0B0Vcfc","s11SwiftSyntax08ObjcNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax08TypeExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax08TypeExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrayExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrayExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrayTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrayTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrowExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrowExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09AttributeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09AttributeB0VyACyAA0cB7BuilderVzXEcfc","s11SwiftSyntax09AwaitExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09AwaitExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09BreakStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09BreakStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09CatchItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax09CatchItemB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ClassDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ClassDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09CodeBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax09CodeBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09DeferStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09DeferStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ElseBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ElseBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ForInStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ForInStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax09GuardStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09GuardStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09InOutExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09InOutExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax09ThrowStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ThrowStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09TokenListB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09TupleTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09WhileStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09WhileStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09YieldListB0VyACSgAA0B0Vcfc","s11SwiftSyntax09YieldListB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09YieldStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09YieldStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax0B0V12fromProtocolACSgAA0bD0_pSg_tcfc","s11SwiftSyntax0B0V12fromProtocolAcA0bD0_p_tcfc","s11SwiftSyntax0B0VyACSgxSgcAA0B8ProtocolRzlufc","s11SwiftSyntax0B0VyACxcAA0B8ProtocolRzlufc","s11SwiftSyntax0B13ChildrenIndexV10nilLiteralACyt_tcfc","s11SwiftSyntax0B15ClassificationsV_2inAcA0B0V_AA15ByteSourceRangeVtcfc","s11SwiftSyntax0B7VisitorCACycfc","s11SwiftSyntax0B8ProtocolPyxSgAA0B0Vcfc","s11SwiftSyntax0B8RewriterCACycfc","s11SwiftSyntax10SourceEditV5range17replacementLengthAcA04ByteC5RangeV_Sitcfc","s11SwiftSyntax10SourceEditV6offset6length17replacementLengthACSi_S2itcfc","s11SwiftSyntax11SourceRangeV4fromACs7Decoder_p_tKcfc","s11SwiftSyntax11SourceRangeV5start3endAcA0C8LocationV_AGtcfc","s11SwiftSyntax12SourceLengthV04utf8D0ACSi_tcfc","s11SwiftSyntax12SourceLengthV2ofACSS_tcfc","s11SwiftSyntax13TokenSequenceVyAcA0B0Vcfc","s11SwiftSyntax14SourceLocationV4fromACs7Decoder_p_tKcfc","s11SwiftSyntax14SourceLocationV4line6column6offset4fileACSi_S2iSStcfc","s11SwiftSyntax14SourceLocationV6offset9converterACSi_AA0cD9ConverterCSgtcfc","s11SwiftSyntax14SourcePresenceO8rawValueACSgSS_tcfc","s11SwiftSyntax15ByteSourceRangeV6offset6lengthACSi_Sitcfc","s11SwiftSyntax15ConcurrentEditsV10concurrentACSayAA10SourceEditVG_tKcfc","s11SwiftSyntax15ConcurrentEditsV14fromSequentialACSayAA10SourceEditVG_tcfc","s11SwiftSyntax15ConcurrentEditsVyAcA10SourceEditVcfc","s11SwiftSyntax16AbsolutePositionV10utf8OffsetACSi_tcfc","s11SwiftSyntax21ReversedTokenSequenceVyAcA0B0Vcfc","s11SwiftSyntax22IncrementalParseLookupV10transitionAcA0cD10TransitionC_tcfc","s11SwiftSyntax23SourceLocationConverterC4file4treeACSS_AA0c4FileB0Vtcfc","s11SwiftSyntax23SourceLocationConverterC4file6sourceACSS_SStcfc","s11SwiftSyntax26IncrementalParseTransitionC12previousTree5edits18reusedNodeDelegateAcA010SourceFileB0V_AA15ConcurrentEditsVAA0cd6ReusedjK0_pSgtcfc","s11SwiftSyntax26IncrementalParseTransitionC12previousTree5edits18reusedNodeDelegateAcA010SourceFileB0V_SayAA0L4EditVGAA0cd6ReusedjK0_pSgtcfc","s11SwiftSyntax35IncrementalParseReusedNodeCollectorCACycfc","s11SwiftSyntax6TriviaV12arrayLiteralAcA0C5PieceOd_tcfc","s11SwiftSyntax6TriviaV6piecesACSayAA0C5PieceOG_tcfc","s11SwiftSyntax010AccessPathB0VyAA0cd9ComponentB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012AccessorListB0VyAA0c4DeclB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012CaseItemListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012ModifierListB0VyAA04DeclcB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012ObjCSelectorB0VyAA0cd5PieceB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax013AttributeListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax013CatchItemListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014IdentifierListB0VyAA05TokenB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014MemberDeclListB0VyAA0cde4ItemB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014SwitchCaseListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax015CatchClauseListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax016ArrayElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax016ClosureParamListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017CodeBlockItemListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017InheritedTypeListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017NonEmptyTokenListB0VyAA0eB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax018IfConfigClauseListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax018PatternBindingListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax019EnumCaseElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax019GenericArgumentListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020AvailabilitySpecListB0VyAA0c8ArgumentB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020ConditionElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020DeclNameArgumentListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020GenericParameterListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020TupleExprElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020TupleTypeElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021BackDeployVersionListB0VyAA0cde8ArgumentB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021DictionaryElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021FunctionParameterListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021StringLiteralSegmentsB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax022ClosureCaptureItemListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax022GenericRequirementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax023PrecedenceGroupNameListB0VyAA0cde7ElementB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax023TuplePatternElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax025PrimaryAssociatedTypeListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax026CompositionTypeElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax026DifferentiabilityParamListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax027SpecializeAttributeSpecListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax028PrecedenceGroupAttributeListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax034MultipleTrailingClosureElementListB0VyAA0cdefB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax08ExprListB0VyAA0cB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax08ObjcNameB0VyAA0cd5PieceB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax09TokenListB0VyAA0cB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax0B8ChildrenVyAA0B0VAA0bC5IndexVcip","s11SwiftSyntax6TriviaVyAA0C5PieceOSicip","s11SwiftSyntax12SourceLengthV4zeroACvpZ","s11SwiftSyntax6TriviaV4zeroACvpZ","s11SwiftSyntax010AccessPathB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax010AccessPathB0V12customMirrors0F0Vvp","s11SwiftSyntax010AccessPathB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax010AccessPathB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010AccessPathB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax010AccessPathB0V5countSivp","s11SwiftSyntax010AccessPathB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax010ImportDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax010ImportDeclB0V10importKindAA05TokenB0VSgvp","s11SwiftSyntax010ImportDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax010ImportDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010ImportDeclB0V4pathAA010AccessPathB0Vvp","s11SwiftSyntax010ImportDeclB0V9importTokAA05TokenB0Vvp","s11SwiftSyntax010ImportDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax010ReturnStmtB0V10expressionAA04ExprB0VSgvp","s11SwiftSyntax010ReturnStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax010ReturnStmtB0V13returnKeywordAA05TokenB0Vvp","s11SwiftSyntax010ReturnStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SourceFileB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax010SourceFileB0V12customMirrors0F0Vvp","s11SwiftSyntax010SourceFileB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SourceFileB0V8eofTokenAA0fB0Vvp","s11SwiftSyntax010StructDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax010StructDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax010StructDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax010StructDeclB0V13structKeywordAA05TokenB0Vvp","s11SwiftSyntax010StructDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010StructDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax010StructDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax010StructDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax010StructDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax010StructDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax010SwitchCaseB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax010SwitchCaseB0V11unknownAttrAA09AttributeB0VSgvp","s11SwiftSyntax010SwitchCaseB0V12customMirrors0F0Vvp","s11SwiftSyntax010SwitchCaseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SwitchCaseB0V5labelAA0B0Vvp","s11SwiftSyntax010SwitchStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax010SwitchStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax010SwitchStmtB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax010SwitchStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax010SwitchStmtB0V13switchKeywordAA05TokenB0Vvp","s11SwiftSyntax010SwitchStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SwitchStmtB0V5casesAA0c8CaseListB0Vvp","s11SwiftSyntax010SwitchStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax010SwitchStmtB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax011CatchClauseB0V10catchItemsAA0c8ItemListB0VSgvp","s11SwiftSyntax011CatchClauseB0V12catchKeywordAA05TokenB0Vvp","s11SwiftSyntax011CatchClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax011CatchClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011CatchClauseB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax011ClosureExprB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax011ClosureExprB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax011ClosureExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011ClosureExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011ClosureExprB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax011ClosureExprB0V9signatureAA0c9SignatureB0VSgvp","s11SwiftSyntax011KeyPathExprB0V04rootE0AA0eB0VSgvp","s11SwiftSyntax011KeyPathExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax011KeyPathExprB0V12customMirrors0G0Vvp","s11SwiftSyntax011KeyPathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011KeyPathExprB0V9backslashAA05TokenB0Vvp","s11SwiftSyntax011TernaryExprB0V11firstChoiceAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011TernaryExprB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax011TernaryExprB0V12secondChoiceAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011TernaryExprB0V19conditionExpressionAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V9colonMarkAA05TokenB0Vvp","s11SwiftSyntax011UnknownDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax011WhereClauseB0V11guardResultAA04ExprB0Vvp","s11SwiftSyntax011WhereClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax011WhereClauseB0V12whereKeywordAA05TokenB0Vvp","s11SwiftSyntax011WhereClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012AccessorDeclB0V12accessorKindAA05TokenB0Vvp","s11SwiftSyntax012AccessorDeclB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax012AccessorDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012AccessorDeclB0V13throwsKeywordAA05TokenB0VSgvp","s11SwiftSyntax012AccessorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax012AccessorDeclB0V8modifierAA0d8ModifierB0VSgvp","s11SwiftSyntax012AccessorDeclB0V9parameterAA0c9ParameterB0VSgvp","s11SwiftSyntax012AccessorListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012AccessorListB0V12customMirrors0F0Vvp","s11SwiftSyntax012AccessorListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012AccessorListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012AccessorListB0V5countSivp","s11SwiftSyntax012AccessorListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ArrayElementB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax012ArrayElementB0V12customMirrors0F0Vvp","s11SwiftSyntax012ArrayElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax012ArrayElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012CaseItemListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax012CaseItemListB0V12customMirrors0G0Vvp","s11SwiftSyntax012CaseItemListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax012CaseItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012CaseItemListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax012CaseItemListB0V5countSivp","s11SwiftSyntax012CaseItemListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax012ClosureParamB0V12customMirrors0F0Vvp","s11SwiftSyntax012ClosureParamB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax012ClosureParamB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ClosureParamB0V4nameAA05TokenB0Vvp","s11SwiftSyntax012ContinueStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax012ContinueStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ContinueStmtB0V15continueKeywordAA05TokenB0Vvp","s11SwiftSyntax012ContinueStmtB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V12customMirrors0F0Vvp","s11SwiftSyntax012DeclModifierB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012DeclModifierB0V15detailLeftParenAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V16detailRightParenAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax012DeclModifierB0V6detailAA05TokenB0VSgvp","s11SwiftSyntax012EnumCaseDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012EnumCaseDeclB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax012EnumCaseDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax012EnumCaseDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012EnumCaseDeclB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax012EnumCaseDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012FunctionDeclB0V11funcKeywordAA05TokenB0Vvp","s11SwiftSyntax012FunctionDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012FunctionDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012FunctionDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012FunctionDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012FunctionDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax012FunctionDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V9signatureAA0c9SignatureB0Vvp","s11SwiftSyntax012FunctionTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012FunctionTypeB0V06returnD0AA0dB0Vvp","s11SwiftSyntax012FunctionTypeB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax012FunctionTypeB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax012FunctionTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012FunctionTypeB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax012FunctionTypeB0V5arrowAA05TokenB0Vvp","s11SwiftSyntax012FunctionTypeB0V9argumentsAA05Tupled11ElementListB0Vvp","s11SwiftSyntax012FunctionTypeB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax012IfConfigDeclB0V10poundEndifAA05TokenB0Vvp","s11SwiftSyntax012IfConfigDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax012IfConfigDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012IfConfigDeclB0V7clausesAA0cd10ClauseListB0Vvp","s11SwiftSyntax012MetatypeTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012MetatypeTypeB0V04baseD0AA0dB0Vvp","s11SwiftSyntax012MetatypeTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012MetatypeTypeB0V14typeOrProtocolAA05TokenB0Vvp","s11SwiftSyntax012MetatypeTypeB0V6periodAA05TokenB0Vvp","s11SwiftSyntax012ModifierListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ModifierListB0V12customMirrors0F0Vvp","s11SwiftSyntax012ModifierListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012ModifierListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ModifierListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012ModifierListB0V5countSivp","s11SwiftSyntax012ModifierListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ObjCSelectorB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ObjCSelectorB0V12customMirrors0F0Vvp","s11SwiftSyntax012ObjCSelectorB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012ObjCSelectorB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ObjCSelectorB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012ObjCSelectorB0V5countSivp","s11SwiftSyntax012ObjCSelectorB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012OperatorDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012OperatorDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012OperatorDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012OperatorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012OperatorDeclB0V15operatorKeywordAA05TokenB0Vvp","s11SwiftSyntax012OperatorDeclB0V26operatorPrecedenceAndTypesAA0cfghB0VSgvp","s11SwiftSyntax012OperatorDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012OptionalTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012OptionalTypeB0V07wrappedD0AA0dB0Vvp","s11SwiftSyntax012OptionalTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012OptionalTypeB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012ProtocolDeclB0V14syntaxNodeTypeAA0bC0_pXpvp","s11SwiftSyntax012ProtocolDeclB0V15protocolKeywordAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V27primaryAssociatedTypeClauseAA07PrimaryfghB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax012ProtocolDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012ReturnClauseB0V10returnTypeAA0fB0Vvp","s11SwiftSyntax012ReturnClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax012ReturnClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ReturnClauseB0V5arrowAA05TokenB0Vvp","s11SwiftSyntax012SequenceExprB0V12customMirrors0F0Vvp","s11SwiftSyntax012SequenceExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012SequenceExprB0V8elementsAA0d4ListB0Vvp","s11SwiftSyntax012SuperRefExprB0V12customMirrors0G0Vvp","s11SwiftSyntax012SuperRefExprB0V12superKeywordAA05TokenB0Vvp","s11SwiftSyntax012SuperRefExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012TuplePatternB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax012TuplePatternB0V12customMirrors0F0Vvp","s11SwiftSyntax012TuplePatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012TuplePatternB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax012TuplePatternB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax012VariableDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012VariableDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012VariableDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012VariableDeclB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax012VariableDeclB0V8bindingsAA018PatternBindingListB0Vvp","s11SwiftSyntax012VariableDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012VersionTupleB0V05patchC0AA05TokenB0VSgvp","s11SwiftSyntax012VersionTupleB0V10majorMinorAA0B0Vvp","s11SwiftSyntax012VersionTupleB0V11patchPeriodAA05TokenB0VSgvp","s11SwiftSyntax012VersionTupleB0V12customMirrors0F0Vvp","s11SwiftSyntax012VersionTupleB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AccessorBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax013AccessorBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax013AccessorBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AccessorBlockB0V9accessorsAA0c4ListB0Vvp","s11SwiftSyntax013AccessorBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax013AsTypePatternB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013AsTypePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax013AsTypePatternB0V4typeAA0dB0Vvp","s11SwiftSyntax013AsTypePatternB0V7patternAA0eB0Vvp","s11SwiftSyntax013AsTypePatternB0V9asKeywordAA05TokenB0Vvp","s11SwiftSyntax013AttributeListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax013AttributeListB0V12customMirrors0F0Vvp","s11SwiftSyntax013AttributeListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax013AttributeListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AttributeListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax013AttributeListB0V5countSivp","s11SwiftSyntax013AttributeListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax013CatchItemListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax013CatchItemListB0V12customMirrors0G0Vvp","s11SwiftSyntax013CatchItemListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax013CatchItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013CatchItemListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax013CatchItemListB0V5countSivp","s11SwiftSyntax013CatchItemListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax013CodeBlockItemB0V11errorTokensAA0B0VSgvp","s11SwiftSyntax013CodeBlockItemB0V12customMirrors0G0Vvp","s11SwiftSyntax013CodeBlockItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013CodeBlockItemB0V4itemAA0B0Vvp","s11SwiftSyntax013CodeBlockItemB0V9semicolonAA05TokenB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013ExtensionDeclB0V12extendedTypeAA0fB0Vvp","s11SwiftSyntax013ExtensionDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013ExtensionDeclB0V16extensionKeywordAA05TokenB0Vvp","s11SwiftSyntax013ExtensionDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax013ExtensionDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013InheritedTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013InheritedTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax013InheritedTypeB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax013InheritedTypeB0V8typeNameAA0dB0Vvp","s11SwiftSyntax013IsTypePatternB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013IsTypePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax013IsTypePatternB0V4typeAA0dB0Vvp","s11SwiftSyntax013IsTypePatternB0V9isKeywordAA05TokenB0Vvp","s11SwiftSyntax013ObjcNamePieceB0V12customMirrors0G0Vvp","s11SwiftSyntax013ObjcNamePieceB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013ObjcNamePieceB0V3dotAA05TokenB0VSgvp","s11SwiftSyntax013ObjcNamePieceB0V4nameAA05TokenB0Vvp","s11SwiftSyntax013ParenthesizedB0P10rightParenAA05TokenB0Vvp","s11SwiftSyntax013ParenthesizedB0P9leftParenAA05TokenB0Vvp","s11SwiftSyntax013PoundFileExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax013PoundFileExprB0V12customMirrors0G0Vvp","s11SwiftSyntax013PoundFileExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013PoundLineExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax013PoundLineExprB0V12customMirrors0G0Vvp","s11SwiftSyntax013PoundLineExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013StringSegmentB0V12customMirrors0F0Vvp","s11SwiftSyntax013StringSegmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013StringSegmentB0V7contentAA05TokenB0Vvp","s11SwiftSyntax013SubscriptDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013SubscriptDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013SubscriptDeclB0V16subscriptKeywordAA05TokenB0Vvp","s11SwiftSyntax013SubscriptDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V6resultAA012ReturnClauseB0Vvp","s11SwiftSyntax013SubscriptDeclB0V7indicesAA015ParameterClauseB0Vvp","s11SwiftSyntax013SubscriptDeclB0V8accessorAA0B0VSgvp","s11SwiftSyntax013SubscriptDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013SubscriptExprB0V11leftBracketAA05TokenB0Vvp","s11SwiftSyntax013SubscriptExprB0V12argumentListAA05Tupled7ElementfB0Vvp","s11SwiftSyntax013SubscriptExprB0V12customMirrors0F0Vvp","s11SwiftSyntax013SubscriptExprB0V12rightBracketAA05TokenB0Vvp","s11SwiftSyntax013SubscriptExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013SubscriptExprB0V15trailingClosureAA0fdB0VSgvp","s11SwiftSyntax013SubscriptExprB0V16calledExpressionAA0dB0Vvp","s11SwiftSyntax013SubscriptExprB0V26additionalTrailingClosuresAA08Multiplef18ClosureElementListB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax013TypealiasDeclB0V11initializerAA021TypeInitializerClauseB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013TypealiasDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013TypealiasDeclB0V16typealiasKeywordAA05TokenB0Vvp","s11SwiftSyntax013TypealiasDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013WithCodeBlockB0P4bodyAA0deB0Vvp","s11SwiftSyntax014AssignmentExprB0V11assignTokenAA0fB0Vvp","s11SwiftSyntax014AssignmentExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014AssignmentExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014AttributedTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax014AttributedTypeB0V04baseD0AA0dB0Vvp","s11SwiftSyntax014AttributedTypeB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax014AttributedTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax014AttributedTypeB0V9specifierAA05TokenB0VSgvp","s11SwiftSyntax014DictionaryExprB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax014DictionaryExprB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax014DictionaryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014DictionaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014DictionaryExprB0V7contentAA0B0Vvp","s11SwiftSyntax014DictionaryTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax014DictionaryTypeB0V03keyD0AA0dB0Vvp","s11SwiftSyntax014DictionaryTypeB0V05valueD0AA0dB0Vvp","s11SwiftSyntax014DictionaryTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax014DictionaryTypeB0V17leftSquareBracketAA05TokenB0Vvp","s11SwiftSyntax014DictionaryTypeB0V18rightSquareBracketAA05TokenB0Vvp","s11SwiftSyntax014DictionaryTypeB0V5colonAA05TokenB0Vvp","s11SwiftSyntax014ExpressionStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax014ExpressionStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax014ExpressionStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifiedDeclB0P10identifierAA05TokenB0Vvp","s11SwiftSyntax014IdentifierExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax014IdentifierExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014IdentifierExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifierExprB0V17declNameArgumentsAA04DeclfgB0VSgvp","s11SwiftSyntax014IdentifierListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax014IdentifierListB0V12customMirrors0F0Vvp","s11SwiftSyntax014IdentifierListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax014IdentifierListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifierListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax014IdentifierListB0V5countSivp","s11SwiftSyntax014IdentifierListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax014IfConfigClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax014IfConfigClauseB0V12poundKeywordAA05TokenB0Vvp","s11SwiftSyntax014IfConfigClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IfConfigClauseB0V8elementsAA0B0Vvp","s11SwiftSyntax014IfConfigClauseB0V9conditionAA04ExprB0VSgvp","s11SwiftSyntax014MemberDeclListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014MemberDeclListB0V12customMirrors0G0Vvp","s11SwiftSyntax014MemberDeclListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax014MemberDeclListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014MemberDeclListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax014MemberDeclListB0V5countSivp","s11SwiftSyntax014MemberDeclListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014NilLiteralExprB0V10nilKeywordAA05TokenB0Vvp","s11SwiftSyntax014NilLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax014NilLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PatternBindingB0V11initializerAA017InitializerClauseB0VSgvp","s11SwiftSyntax014PatternBindingB0V12customMirrors0F0Vvp","s11SwiftSyntax014PatternBindingB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax014PatternBindingB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PatternBindingB0V14typeAnnotationAA04TypefB0VSgvp","s11SwiftSyntax014PatternBindingB0V7patternAA0cB0Vvp","s11SwiftSyntax014PatternBindingB0V8accessorAA0B0VSgvp","s11SwiftSyntax014PoundErrorDeclB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax014PoundErrorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PoundErrorDeclB0V7messageAA017StringLiteralExprB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax014SpecializeExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax014SpecializeExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014SpecializeExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014SpecializeExprB0V21genericArgumentClauseAA07GenericfgB0Vvp","s11SwiftSyntax014SwitchCaseListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014SwitchCaseListB0V12customMirrors0G0Vvp","s11SwiftSyntax014SwitchCaseListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax014SwitchCaseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014SwitchCaseListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax014SwitchCaseListB0V5countSivp","s11SwiftSyntax014SwitchCaseListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014TypeAnnotationB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax014TypeAnnotationB0V12customMirrors0F0Vvp","s11SwiftSyntax014TypeAnnotationB0V4typeAA0cB0Vvp","s11SwiftSyntax014TypeAnnotationB0V5colonAA05TokenB0Vvp","s11SwiftSyntax014UnknownPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax014UnknownPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014WithStatementsB0P10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax015CatchClauseListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax015CatchClauseListB0V12customMirrors0G0Vvp","s11SwiftSyntax015CatchClauseListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax015CatchClauseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015CatchClauseListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax015CatchClauseListB0V5countSivp","s11SwiftSyntax015CatchClauseListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax015CompositionTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax015CompositionTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax015CompositionTypeB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax015CustomAttributeB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax015CustomAttributeB0V11atSignTokenAA0gB0Vvp","s11SwiftSyntax015CustomAttributeB0V12argumentListAA016TupleExprElementfB0VSgvp","s11SwiftSyntax015CustomAttributeB0V12customMirrors0F0Vvp","s11SwiftSyntax015CustomAttributeB0V13attributeNameAA04TypeB0Vvp","s11SwiftSyntax015CustomAttributeB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015CustomAttributeB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax015DeclarationStmtB0V11declarationAA04DeclB0Vvp","s11SwiftSyntax015DeclarationStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax015DeclarationStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCaseElementB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax015EnumCaseElementB0V12customMirrors0G0Vvp","s11SwiftSyntax015EnumCaseElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax015EnumCaseElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCaseElementB0V15associatedValueAA015ParameterClauseB0VSgvp","s11SwiftSyntax015EnumCaseElementB0V8rawValueAA017InitializerClauseB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax015EnumCasePatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCasePatternB0V15associatedTupleAA0geB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V4typeAA04TypeB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V6periodAA05TokenB0Vvp","s11SwiftSyntax015EnumCasePatternB0V8caseNameAA05TokenB0Vvp","s11SwiftSyntax015FallthroughStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax015FallthroughStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015FallthroughStmtB0V18fallthroughKeywordAA05TokenB0Vvp","s11SwiftSyntax015ForcedValueExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax015ForcedValueExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015ForcedValueExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ForcedValueExprB0V15exclamationMarkAA05TokenB0Vvp","s11SwiftSyntax015GenericArgumentB0V12argumentTypeAA0fB0Vvp","s11SwiftSyntax015GenericArgumentB0V12customMirrors0F0Vvp","s11SwiftSyntax015GenericArgumentB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax015GenericArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015InitializerDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax015InitializerDeclB0V10parametersAA015ParameterClauseB0Vvp","s11SwiftSyntax015InitializerDeclB0V11initKeywordAA05TokenB0Vvp","s11SwiftSyntax015InitializerDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax015InitializerDeclB0V12optionalMarkAA05TokenB0VSgvp","s11SwiftSyntax015InitializerDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015InitializerDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax015InitializerDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax015InitializerDeclB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax015InitializerDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax015InitializerDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax015KeyPathBaseExprB0V12customMirrors0H0Vvp","s11SwiftSyntax015KeyPathBaseExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015KeyPathBaseExprB0V6periodAA05TokenB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V12customMirrors0G0Vvp","s11SwiftSyntax015MemberDeclBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015MemberDeclBlockB0V7membersAA0cd4ListB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V03keyE0AA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V12customMirrors0H0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ObjcKeyPathExprB0V4nameAA0c4NameB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015OptionalPatternB0V03subD0AA0dB0Vvp","s11SwiftSyntax015OptionalPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax015OptionalPatternB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax015OptionalPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ParameterClauseB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015ParameterClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax015ParameterClauseB0V13parameterListAA08FunctioncfB0Vvp","s11SwiftSyntax015ParameterClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ParameterClauseB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundAssertStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015PoundAssertStmtB0V5commaAA05TokenB0VSgvp","s11SwiftSyntax015PoundAssertStmtB0V7messageAA05TokenB0VSgvp","s11SwiftSyntax015PoundAssertStmtB0V9conditionAA04ExprB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015PoundColumnExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax015PoundColumnExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundColumnExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015PoundFileIDExprB0V05poundD2IDAA05TokenB0Vvp","s11SwiftSyntax015PoundFileIDExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundFileIDExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015RepeatWhileStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax015RepeatWhileStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V12whileKeywordAA05TokenB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V13repeatKeywordAA05TokenB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015RepeatWhileStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V9conditionAA04ExprB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax015SwitchCaseLabelB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V12customMirrors0G0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015SwitchCaseLabelB0V5colonAA05TokenB0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V9caseItemsAA0d8ItemListB0Vvp","s11SwiftSyntax015WildcardPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax015WildcardPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015WildcardPatternB0V14typeAnnotationAA04TypefB0VSgvp","s11SwiftSyntax015WildcardPatternB0V8wildcardAA05TokenB0Vvp","s11SwiftSyntax016ArrayElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ArrayElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax016ArrayElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax016ArrayElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ArrayElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax016ArrayElementListB0V5countSivp","s11SwiftSyntax016ArrayElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureParamListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureParamListB0V12customMirrors0G0Vvp","s11SwiftSyntax016ClosureParamListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax016ClosureParamListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ClosureParamListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax016ClosureParamListB0V5countSivp","s11SwiftSyntax016ClosureParamListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureSignatureB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V12customMirrors0F0Vvp","s11SwiftSyntax016ClosureSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ClosureSignatureB0V5inTokAA05TokenB0Vvp","s11SwiftSyntax016ClosureSignatureB0V5inputAA0B0VSgvp","s11SwiftSyntax016ClosureSignatureB0V6outputAA012ReturnClauseB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V7captureAA0c7CapturedB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V9throwsTokAA05TokenB0VSgvp","s11SwiftSyntax016ConditionElementB0V12customMirrors0F0Vvp","s11SwiftSyntax016ConditionElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016ConditionElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ConditionElementB0V9conditionAA0B0Vvp","s11SwiftSyntax016DeclNameArgumentB0V12customMirrors0G0Vvp","s11SwiftSyntax016DeclNameArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016DeclNameArgumentB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016DeclNameArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax016FloatLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016FloatLiteralExprB0V14floatingDigitsAA05TokenB0Vvp","s11SwiftSyntax016FloatLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionCallExprB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V12argumentListAA05Tuplee7ElementgB0Vvp","s11SwiftSyntax016FunctionCallExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016FunctionCallExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionCallExprB0V15trailingClosureAA0geB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V16calledExpressionAA0eB0Vvp","s11SwiftSyntax016FunctionCallExprB0V26additionalTrailingClosuresAA08Multipleg18ClosureElementListB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax016FunctionDeclNameB0V12customMirrors0G0Vvp","s11SwiftSyntax016FunctionDeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionDeclNameB0V4nameAA0B0Vvp","s11SwiftSyntax016FunctionDeclNameB0V9argumentsAA0de9ArgumentsB0VSgvp","s11SwiftSyntax016GenericParameterB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax016GenericParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax016GenericParameterB0V13inheritedTypeAA0fB0VSgvp","s11SwiftSyntax016GenericParameterB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016GenericParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016GenericParameterB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016GenericParameterB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016MemberAccessExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016MemberAccessExprB0V17declNameArgumentsAA04DeclghB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V3dotAA05TokenB0Vvp","s11SwiftSyntax016MemberAccessExprB0V4baseAA0eB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ObjcSelectorExprB0V4kindAA05TokenB0VSgvp","s11SwiftSyntax016ObjcSelectorExprB0V4nameAA0eB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016ObjcSelectorExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V13operatorTokenAA0gB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016PoundWarningDeclB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax016PoundWarningDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016PoundWarningDeclB0V7messageAA017StringLiteralExprB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax016RegexLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016RegexLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016RegexLiteralExprB0V5regexAA05TokenB0Vvp","s11SwiftSyntax016TupleExprElementB0V10expressionAA0dB0Vvp","s11SwiftSyntax016TupleExprElementB0V12customMirrors0G0Vvp","s11SwiftSyntax016TupleExprElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016TupleExprElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016TupleExprElementB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016TupleExprElementB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax016TupleTypeElementB0V10secondNameAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V11initializerAA017InitializerClauseB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V12customMirrors0G0Vvp","s11SwiftSyntax016TupleTypeElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V4typeAA0dB0Vvp","s11SwiftSyntax016TupleTypeElementB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V5inOutAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V8ellipsisAA05TokenB0VSgvp","s11SwiftSyntax017AccessorParameterB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017AccessorParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax017AccessorParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017AccessorParameterB0V4nameAA05TokenB0Vvp","s11SwiftSyntax017AccessorParameterB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V12customMirrors0F0Vvp","s11SwiftSyntax017AvailabilityEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017AvailabilityEntryB0V16availabilityListAA0c4SpecfB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V9semicolonAA05TokenB0Vvp","s11SwiftSyntax017CodeBlockItemListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017CodeBlockItemListB0V12customMirrors0H0Vvp","s11SwiftSyntax017CodeBlockItemListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax017CodeBlockItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017CodeBlockItemListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax017CodeBlockItemListB0V5countSivp","s11SwiftSyntax017CodeBlockItemListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DeclNameArgumentsB0V9argumentsAA0cd12ArgumentListB0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax017DeinitializerDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax017DeinitializerDeclB0V13deinitKeywordAA05TokenB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DeinitializerDeclB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax017DictionaryElementB0V12customMirrors0F0Vvp","s11SwiftSyntax017DictionaryElementB0V13keyExpressionAA04ExprB0Vvp","s11SwiftSyntax017DictionaryElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax017DictionaryElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DictionaryElementB0V15valueExpressionAA04ExprB0Vvp","s11SwiftSyntax017DictionaryElementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax017ExpressionPatternB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax017ExpressionPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax017ExpressionPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ExpressionSegmentB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V11expressionsAA020TupleExprElementListB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V12customMirrors0F0Vvp","s11SwiftSyntax017ExpressionSegmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ExpressionSegmentB0V9backslashAA05TokenB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V9delimiterAA05TokenB0VSgvp","s11SwiftSyntax017ExpressionSegmentB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017FunctionParameterB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax017FunctionParameterB0V10secondNameAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax017FunctionParameterB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017FunctionParameterB0V15defaultArgumentAA017InitializerClauseB0VSgvp","s11SwiftSyntax017FunctionParameterB0V4typeAA04TypeB0VSgvp","s11SwiftSyntax017FunctionParameterB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V8ellipsisAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V9firstNameAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V12customMirrors0F0Vvp","s11SwiftSyntax017FunctionSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017FunctionSignatureB0V21asyncOrReasyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V5inputAA015ParameterClauseB0Vvp","s11SwiftSyntax017FunctionSignatureB0V6outputAA012ReturnClauseB0VSgvp","s11SwiftSyntax017IdentifierPatternB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax017IdentifierPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax017IdentifierPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017InheritedTypeListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax017InheritedTypeListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax017InheritedTypeListB0V12customMirrors0G0Vvp","s11SwiftSyntax017InheritedTypeListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax017InheritedTypeListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax017InheritedTypeListB0V5countSivp","s11SwiftSyntax017InheritedTypeListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax017InitializerClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax017InitializerClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017InitializerClauseB0V5equalAA05TokenB0Vvp","s11SwiftSyntax017InitializerClauseB0V5valueAA04ExprB0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V12customMirrors0H0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax017NonEmptyTokenListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017NonEmptyTokenListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax017NonEmptyTokenListB0V5countSivp","s11SwiftSyntax017NonEmptyTokenListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017ObjCSelectorPieceB0V12customMirrors0G0Vvp","s11SwiftSyntax017ObjCSelectorPieceB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ObjCSelectorPieceB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax017ObjCSelectorPieceB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax017ObjectLiteralExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ObjectLiteralExprB0V9argumentsAA05Tuplee11ElementListB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017PoundFilePathExprB0V05pounddE0AA05TokenB0Vvp","s11SwiftSyntax017PoundFilePathExprB0V12customMirrors0H0Vvp","s11SwiftSyntax017PoundFilePathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017PoundFunctionExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax017PoundFunctionExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017PoundFunctionExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017QualifiedDeclNameB0V12customMirrors0G0Vvp","s11SwiftSyntax017QualifiedDeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017QualifiedDeclNameB0V3dotAA05TokenB0VSgvp","s11SwiftSyntax017QualifiedDeclNameB0V4nameAA05TokenB0Vvp","s11SwiftSyntax017QualifiedDeclNameB0V8baseTypeAA0gB0VSgvp","s11SwiftSyntax017QualifiedDeclNameB0V9argumentsAA0de9ArgumentsB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V10closeQuoteAA05TokenB0Vvp","s11SwiftSyntax017StringLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017StringLiteralExprB0V13openDelimiterAA05TokenB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V14closeDelimiterAA05TokenB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017StringLiteralExprB0V8segmentsAA0cd8SegmentsB0Vvp","s11SwiftSyntax017StringLiteralExprB0V9openQuoteAA05TokenB0Vvp","s11SwiftSyntax017WithTrailingCommaB0P08trailingE0AA05TokenB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V11initializerAA021TypeInitializerClauseB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018AssociatedtypeDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V21associatedtypeKeywordAA05TokenB0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax018BinaryOperatorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018BinaryOperatorExprB0V13operatorTokenAA0gB0Vvp","s11SwiftSyntax018BinaryOperatorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018BooleanLiteralExprB0V07booleanD0AA05TokenB0Vvp","s11SwiftSyntax018BooleanLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018BooleanLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018ClosureCaptureItemB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax018ClosureCaptureItemB0V11assignTokenAA0gB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V12customMirrors0G0Vvp","s11SwiftSyntax018ClosureCaptureItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018ClosureCaptureItemB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V9specifierAA09TokenListB0VSgvp","s11SwiftSyntax018ElseIfContinuationB0V11ifStatementAA0d4StmtB0Vvp","s11SwiftSyntax018ElseIfContinuationB0V12customMirrors0G0Vvp","s11SwiftSyntax018ElseIfContinuationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericRequirementB0V12customMirrors0F0Vvp","s11SwiftSyntax018GenericRequirementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax018GenericRequirementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericRequirementB0V4bodyAA0B0Vvp","s11SwiftSyntax018GenericWhereClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax018GenericWhereClauseB0V12whereKeywordAA05TokenB0Vvp","s11SwiftSyntax018GenericWhereClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericWhereClauseB0V15requirementListAA0c11RequirementgB0Vvp","s11SwiftSyntax018IfConfigClauseListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax018IfConfigClauseListB0V12customMirrors0H0Vvp","s11SwiftSyntax018IfConfigClauseListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax018IfConfigClauseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018IfConfigClauseListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax018IfConfigClauseListB0V5countSivp","s11SwiftSyntax018IfConfigClauseListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax018IntegerLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018IntegerLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018IntegerLiteralExprB0V6digitsAA05TokenB0Vvp","s11SwiftSyntax018MemberDeclListItemB0V12customMirrors0H0Vvp","s11SwiftSyntax018MemberDeclListItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018MemberDeclListItemB0V4declAA0dB0Vvp","s11SwiftSyntax018MemberDeclListItemB0V9semicolonAA05TokenB0VSgvp","s11SwiftSyntax018PatternBindingListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax018PatternBindingListB0V12customMirrors0G0Vvp","s11SwiftSyntax018PatternBindingListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax018PatternBindingListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PatternBindingListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax018PatternBindingListB0V5countSivp","s11SwiftSyntax018PatternBindingListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PrefixOperatorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018PrefixOperatorExprB0V13operatorTokenAA0gB0VSgvp","s11SwiftSyntax018PrefixOperatorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PrefixOperatorExprB0V17postfixExpressionAA0eB0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V12customMirrors0G0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V14defaultKeywordAA05TokenB0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018SwitchDefaultLabelB0V5colonAA05TokenB0Vvp","s11SwiftSyntax019AccessLevelModifierB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax019AccessLevelModifierB0V12customMirrors0G0Vvp","s11SwiftSyntax019AccessLevelModifierB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019AccessLevelModifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax019AccessLevelModifierB0V8modifierAA05TokenB0VSgvp","s11SwiftSyntax019AccessLevelModifierB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax019AccessPathComponentB0V11trailingDotAA05TokenB0VSgvp","s11SwiftSyntax019AccessPathComponentB0V12customMirrors0G0Vvp","s11SwiftSyntax019AccessPathComponentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019AccessPathComponentB0V4nameAA05TokenB0Vvp","s11SwiftSyntax019EnumCaseElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax019EnumCaseElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax019EnumCaseElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax019EnumCaseElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019EnumCaseElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax019EnumCaseElementListB0V5countSivp","s11SwiftSyntax019EnumCaseElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax019GenericArgumentListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax019GenericArgumentListB0V12customMirrors0G0Vvp","s11SwiftSyntax019GenericArgumentListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax019GenericArgumentListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019GenericArgumentListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax019GenericArgumentListB0V5countSivp","s11SwiftSyntax019GenericArgumentListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax019PostfixIfConfigExprB0V12customMirrors0H0Vvp","s11SwiftSyntax019PostfixIfConfigExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PostfixIfConfigExprB0V4baseAA0fB0VSgvp","s11SwiftSyntax019PostfixIfConfigExprB0V6configAA0de4DeclB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V05pounddE0AA05TokenB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V12customMirrors0G0Vvp","s11SwiftSyntax019PoundSourceLocationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PoundSourceLocationB0V4argsAA0cde4ArgsB0VSgvp","s11SwiftSyntax019PoundSourceLocationB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PrecedenceGroupDeclB0V15groupAttributesAA0cd13AttributeListB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V22precedencegroupKeywordAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax019SameTypeRequirementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax019SameTypeRequirementB0V04leftD10IdentifierAA0dB0Vvp","s11SwiftSyntax019SameTypeRequirementB0V05rightD10IdentifierAA0dB0Vvp","s11SwiftSyntax019SameTypeRequirementB0V12customMirrors0G0Vvp","s11SwiftSyntax019SameTypeRequirementB0V13equalityTokenAA0gB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V12customMirrors0G0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax019TargetFunctionEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019TargetFunctionEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V8declnameAA08DeclNameB0Vvp","s11SwiftSyntax019TuplePatternElementB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax019TuplePatternElementB0V12customMirrors0G0Vvp","s11SwiftSyntax019TuplePatternElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax019TuplePatternElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019TuplePatternElementB0V7patternAA0dB0Vvp","s11SwiftSyntax019TuplePatternElementB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax019ValueBindingPatternB0V05valueE0AA0eB0Vvp","s11SwiftSyntax019ValueBindingPatternB0V12customMirrors0G0Vvp","s11SwiftSyntax019ValueBindingPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019ValueBindingPatternB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax020AvailabilityArgumentB0V12customMirrors0F0Vvp","s11SwiftSyntax020AvailabilityArgumentB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax020AvailabilityArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020AvailabilityArgumentB0V5entryAA0B0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V12customMirrors0G0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020AvailabilitySpecListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020AvailabilitySpecListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020AvailabilitySpecListB0V5countSivp","s11SwiftSyntax020AvailabilitySpecListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020ClassRestrictionTypeB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax020ClassRestrictionTypeB0V12classKeywordAA05TokenB0Vvp","s11SwiftSyntax020ClassRestrictionTypeB0V12customMirrors0G0Vvp","s11SwiftSyntax020ConditionElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020ConditionElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax020ConditionElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020ConditionElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020ConditionElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020ConditionElementListB0V5countSivp","s11SwiftSyntax020ConditionElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020ConstrainedSugarTypeB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax020ConstrainedSugarTypeB0V04baseE0AA0eB0Vvp","s11SwiftSyntax020ConstrainedSugarTypeB0V12customMirrors0G0Vvp","s11SwiftSyntax020ConstrainedSugarTypeB0V18someOrAnySpecifierAA05TokenB0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V12customMirrors0H0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020DeclNameArgumentListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020DeclNameArgumentListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020DeclNameArgumentListB0V5countSivp","s11SwiftSyntax020DeclNameArgumentListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020GenericParameterListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020GenericParameterListB0V12customMirrors0G0Vvp","s11SwiftSyntax020GenericParameterListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020GenericParameterListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020GenericParameterListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020GenericParameterListB0V5countSivp","s11SwiftSyntax020GenericParameterListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020MemberTypeIdentifierB0V04baseD0AA0dB0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V12customMirrors0G0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax020MemberTypeIdentifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V6periodAA05TokenB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V12customMirrors0G0Vvp","s11SwiftSyntax020OptionalChainingExprB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020SimpleTypeIdentifierB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020SimpleTypeIdentifierB0V12customMirrors0G0Vvp","s11SwiftSyntax020SimpleTypeIdentifierB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax020SimpleTypeIdentifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax020TupleExprElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleExprElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax020TupleExprElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleExprElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020TupleExprElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleExprElementListB0V5countSivp","s11SwiftSyntax020TupleExprElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleTypeElementListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020TupleTypeElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleTypeElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax020TupleTypeElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleTypeElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleTypeElementListB0V5countSivp","s11SwiftSyntax020TupleTypeElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax021AvailabilityConditionB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V12customMirrors0F0Vvp","s11SwiftSyntax021AvailabilityConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021AvailabilityConditionB0V16availabilitySpecAA0cf4ListB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V21poundAvailableKeywordAA05TokenB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax021BackDeployVersionListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax021BackDeployVersionListB0V12customMirrors0H0Vvp","s11SwiftSyntax021BackDeployVersionListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax021BackDeployVersionListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021BackDeployVersionListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax021BackDeployVersionListB0V5countSivp","s11SwiftSyntax021BackDeployVersionListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax021DictionaryElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021DictionaryElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax021DictionaryElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021DictionaryElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021DictionaryElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021DictionaryElementListB0V5countSivp","s11SwiftSyntax021DictionaryElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021DiscardAssignmentExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021DiscardAssignmentExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021DiscardAssignmentExprB0V8wildcardAA05TokenB0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021FunctionParameterListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021FunctionParameterListB0V12customMirrors0G0Vvp","s11SwiftSyntax021FunctionParameterListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021FunctionParameterListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021FunctionParameterListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021FunctionParameterListB0V5countSivp","s11SwiftSyntax021FunctionParameterListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021GenericArgumentClauseB0V16leftAngleBracketAA05TokenB0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V17rightAngleBracketAA05TokenB0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V9argumentsAA0cd4ListB0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V09inheritedE0AA0eB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V11initializerAA0e17InitializerClauseB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V12customMirrors0G0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V4nameAA05TokenB0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021StringLiteralSegmentsB0V12customMirrors0G0Vvp","s11SwiftSyntax021StringLiteralSegmentsB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021StringLiteralSegmentsB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V5countSivp","s11SwiftSyntax021StringLiteralSegmentsB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021SymbolicReferenceExprB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax021TypeInheritanceClauseB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax021TypeInheritanceClauseB0V09inheritedC10CollectionAA09Inheritedc4ListB0Vvp","s11SwiftSyntax021TypeInheritanceClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021TypeInheritanceClauseB0V5colonAA05TokenB0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax021TypeInitializerClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V5equalAA05TokenB0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V5valueAA0cB0Vvp","s11SwiftSyntax021UnresolvedPatternExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021UnresolvedPatternExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021UnresolvedPatternExprB0V7patternAA0dB0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V12customMirrors0H0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax022ClosureCaptureItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022ClosureCaptureItemListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax022ClosureCaptureItemListB0V5countSivp","s11SwiftSyntax022ClosureCaptureItemListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax022CompositionTypeElementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax022CompositionTypeElementB0V12customMirrors0G0Vvp","s11SwiftSyntax022CompositionTypeElementB0V4typeAA0dB0Vvp","s11SwiftSyntax022CompositionTypeElementB0V9ampersandAA05TokenB0VSgvp","s11SwiftSyntax022ConformanceRequirementB0V12customMirrors0F0Vvp","s11SwiftSyntax022ConformanceRequirementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022ConformanceRequirementB0V18leftTypeIdentifierAA0fB0Vvp","s11SwiftSyntax022ConformanceRequirementB0V19rightTypeIdentifierAA0fB0Vvp","s11SwiftSyntax022ConformanceRequirementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax022DifferentiabilityParamB0V12customMirrors0F0Vvp","s11SwiftSyntax022DifferentiabilityParamB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax022DifferentiabilityParamB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022DifferentiabilityParamB0V9parameterAA0B0Vvp","s11SwiftSyntax022GenericParameterClauseB0V07genericD4ListAA0cdgB0Vvp","s11SwiftSyntax022GenericParameterClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax022GenericParameterClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022GenericParameterClauseB0V16leftAngleBracketAA05TokenB0Vvp","s11SwiftSyntax022GenericParameterClauseB0V17rightAngleBracketAA05TokenB0Vvp","s11SwiftSyntax022GenericRequirementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax022GenericRequirementListB0V12customMirrors0G0Vvp","s11SwiftSyntax022GenericRequirementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax022GenericRequirementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022GenericRequirementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax022GenericRequirementListB0V5countSivp","s11SwiftSyntax022GenericRequirementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V12customMirrors0G0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax022LabeledSpecializeEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5valueAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V12customMirrors0G0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023ClosureCaptureSignatureB0V5itemsAA0cd8ItemListB0VSgvp","s11SwiftSyntax023DifferentiabilityParamsB0V04diffD0AA0c9ParamListB0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V12customMirrors0F0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023DifferentiabilityParamsB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V10lineNumberAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12customMirrors0H0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12fileArgColonAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12fileArgLabelAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12lineArgColonAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12lineArgLabelAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PoundSourceLocationArgsB0V5commaAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V8fileNameAA05TokenB0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V12customMirrors0H0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax023PrecedenceGroupNameListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PrecedenceGroupNameListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax023PrecedenceGroupNameListB0V5countSivp","s11SwiftSyntax023PrecedenceGroupNameListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V017higherThanOrLowerG0AA05TokenB0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V10otherNamesAA0cd8NameListB0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V12customMirrors0G0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PrecedenceGroupRelationB0V5colonAA05TokenB0Vvp","s11SwiftSyntax023TuplePatternElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023TuplePatternElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax023TuplePatternElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax023TuplePatternElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023TuplePatternElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax023TuplePatternElementListB0V5countSivp","s11SwiftSyntax023TuplePatternElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V12customMirrors0F0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023UnavailabilityConditionB0V16availabilitySpecAA012Availabilityf4ListB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V23poundUnavailableKeywordAA05TokenB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V11initializerAA017InitializerClauseB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V12customMirrors0G0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax024MatchingPatternConditionB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax024MatchingPatternConditionB0V7patternAA0dB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V11initializerAA017InitializerClauseB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V12customMirrors0G0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax024OptionalBindingConditionB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax024OptionalBindingConditionB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V7patternAA07PatternB0Vvp","s11SwiftSyntax025BackDeployVersionArgumentB0V012availabilityE11RestrictionAA012AvailabilityehB0Vvp","s11SwiftSyntax025BackDeployVersionArgumentB0V12customMirrors0H0Vvp","s11SwiftSyntax025BackDeployVersionArgumentB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax025BackDeployVersionArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V12customMirrors0G0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V17assignmentKeywordAA05TokenB0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V4flagAA05TokenB0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12customMirrors0H0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5countSivp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax026CompositionTypeElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax026CompositionTypeElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax026CompositionTypeElementListB0V5countSivp","s11SwiftSyntax026CompositionTypeElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V12customMirrors0G0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax026DifferentiabilityParamListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026DifferentiabilityParamListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax026DifferentiabilityParamListB0V5countSivp","s11SwiftSyntax026DifferentiabilityParamListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V015precedenceGroupe10DesignatedF0AA014IdentifierListB0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V12customMirrors0H0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V5colonAA05TokenB0Vvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V12customMirrors0H0Vvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V4nameAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V12customMirrors0G0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5labelAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5valueAA0B0Vvp","s11SwiftSyntax027BackDeployAttributeSpecListB0V07versionG0AA0cd7VersiongB0Vvp","s11SwiftSyntax027BackDeployAttributeSpecListB0V11beforeLabelAA05TokenB0Vvp","s11SwiftSyntax027BackDeployAttributeSpecListB0V12customMirrors0I0Vvp","s11SwiftSyntax027BackDeployAttributeSpecListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax027BackDeployAttributeSpecListB0V5colonAA05TokenB0Vvp","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V07primarydE4ListAA0cdehB0Vvp","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V12customMirrors0H0Vvp","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V16leftAngleBracketAA05TokenB0Vvp","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V17rightAngleBracketAA05TokenB0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V12customMirrors0H0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V5countSivp","s11SwiftSyntax027SpecializeAttributeSpecListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V08declNameE0AA04DeclgeB0VSgvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V12declBaseNameAA0B0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V4typeAA020SimpleTypeIdentifierB0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V5commaAA05TokenB0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V12customMirrors0H0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V16stringOrDeclnameAA0B0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V7nameTokAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V12customMirrors0G0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V20associativityKeywordAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V5colonAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V5valueAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12customMirrors0H0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5countSivp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V10parametersAA0B0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V5colonAA05TokenB0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V8wrtLabelAA05TokenB0Vvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V12customMirrors0G0Vvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V7versionAA0d5TupleB0VSgvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V8platformAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V12customMirrors0H0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V5labelAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V7closureAA0e4ExprB0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V010syntaxNodeF0AA0B8Protocol_pXpvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V07wrappedF0AA0fB0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V12customMirrors0H0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V15exclamationMarkAA05TokenB0Vvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V10diffParamsAA017Differentiabilityg6ClauseB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V11whereClauseAA012GenericWheregB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V13diffKindCommaAA05TokenB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V15diffParamsCommaAA05TokenB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V8diffKindAA05TokenB0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V10startIndexAA0b8ChildrenI0Vvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12customMirrors0I0Vvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13leadingTriviaAA0I0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V14trailingTriviaAA0I0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5countSivp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8endIndexAA0b8ChildrenI0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V10diffParamsAA017Differentiabilityh6ClauseB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V12accessorKindAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V12customMirrors0H0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V16originalDeclNameAA09QualifiedhiB0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V5colonAA05TokenB0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V5commaAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V6periodAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V7ofLabelAA05TokenB0Vvp","s11SwiftSyntax04DeclB0V12customMirrors0E0Vvp","s11SwiftSyntax04DeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04ExprB0V12customMirrors0E0Vvp","s11SwiftSyntax04ExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04StmtB0V12customMirrors0E0Vvp","s11SwiftSyntax04StmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04TypeB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax04TypeB0V12customMirrors0E0Vvp","s11SwiftSyntax05TokenB0V11totalLengthAA06SourceE0Vvp","s11SwiftSyntax05TokenB0V12customMirrors0E0Vvp","s11SwiftSyntax05TokenB0V13contentLengthAA06SourceE0Vvp","s11SwiftSyntax05TokenB0V13leadingTriviaAA0E0Vvp","s11SwiftSyntax05TokenB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax05TokenB0V14trailingTriviaAA0E0Vvp","s11SwiftSyntax05TokenB0V19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax05TokenB0V19tokenClassificationAA0B15ClassifiedRangeVvp","s11SwiftSyntax05TokenB0V20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax05TokenB0V4textSSvp","s11SwiftSyntax05TokenB0V8presenceAA14SourcePresenceOvp","s11SwiftSyntax05TokenB0V9tokenKindAA0cE0Ovp","s11SwiftSyntax06AsExprB0V12customMirrors0F0Vvp","s11SwiftSyntax06AsExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06AsExprB0V25questionOrExclamationMarkAA05TokenB0VSgvp","s11SwiftSyntax06AsExprB0V5asTokAA05TokenB0Vvp","s11SwiftSyntax06AsExprB0V8typeNameAA04TypeB0Vvp","s11SwiftSyntax06BracedB0P10rightBraceAA05TokenB0Vvp","s11SwiftSyntax06BracedB0P9leftBraceAA05TokenB0Vvp","s11SwiftSyntax06DoStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax06DoStmtB0V12catchClausesAA015CatchClauseListB0VSgvp","s11SwiftSyntax06DoStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax06DoStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06DoStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax06DoStmtB0V9doKeywordAA05TokenB0Vvp","s11SwiftSyntax06DoStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax06IfStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V11elseKeywordAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax06IfStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06IfStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax06IfStmtB0V8elseBodyAA0B0VSgvp","s11SwiftSyntax06IfStmtB0V9ifKeywordAA05TokenB0Vvp","s11SwiftSyntax06IfStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax06IsExprB0V12customMirrors0F0Vvp","s11SwiftSyntax06IsExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06IsExprB0V5isTokAA05TokenB0Vvp","s11SwiftSyntax06IsExprB0V8typeNameAA04TypeB0Vvp","s11SwiftSyntax07LabeledB0P10labelColonAA05TokenB0VSgvp","s11SwiftSyntax07LabeledB0P9labelNameAA05TokenB0VSgvp","s11SwiftSyntax07PatternB0V12customMirrors0E0Vvp","s11SwiftSyntax07PatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax07TryExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax07TryExprB0V10tryKeywordAA05TokenB0Vvp","s11SwiftSyntax07TryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax07TryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax07TryExprB0V25questionOrExclamationMarkAA05TokenB0VSgvp","s11SwiftSyntax07UnknownB0V12customMirrors0E0Vvp","s11SwiftSyntax07UnknownB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08CaseItemB0V11whereClauseAA05WherefB0VSgvp","s11SwiftSyntax08CaseItemB0V12customMirrors0F0Vvp","s11SwiftSyntax08CaseItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax08CaseItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08CaseItemB0V7patternAA07PatternB0Vvp","s11SwiftSyntax08DeclNameB0V04declD9ArgumentsAA0cdfB0VSgvp","s11SwiftSyntax08DeclNameB0V08declBaseD0AA0B0Vvp","s11SwiftSyntax08DeclNameB0V12customMirrors0F0Vvp","s11SwiftSyntax08DeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08EnumDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax08EnumDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax08EnumDeclB0V11enumKeywordAA05TokenB0Vvp","s11SwiftSyntax08EnumDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax08EnumDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08EnumDeclB0V17genericParametersAA022GenericParameterClauseB0VSgvp","s11SwiftSyntax08EnumDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax08EnumDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax08EnumDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax08EnumDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax08ExprListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ExprListB0V12customMirrors0F0Vvp","s11SwiftSyntax08ExprListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax08ExprListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08ExprListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax08ExprListB0V5countSivp","s11SwiftSyntax08ExprListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ObjcNameB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ObjcNameB0V12customMirrors0F0Vvp","s11SwiftSyntax08ObjcNameB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax08ObjcNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08ObjcNameB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax08ObjcNameB0V5countSivp","s11SwiftSyntax08ObjcNameB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08TypeExprB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax08TypeExprB0V12customMirrors0F0Vvp","s11SwiftSyntax08TypeExprB0V4typeAA0cB0Vvp","s11SwiftSyntax09ArrayExprB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax09ArrayExprB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax09ArrayExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrayExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ArrayExprB0V8elementsAA0c11ElementListB0Vvp","s11SwiftSyntax09ArrayTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax09ArrayTypeB0V07elementD0AA0dB0Vvp","s11SwiftSyntax09ArrayTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrayTypeB0V17leftSquareBracketAA05TokenB0Vvp","s11SwiftSyntax09ArrayTypeB0V18rightSquareBracketAA05TokenB0Vvp","s11SwiftSyntax09ArrowExprB0V10arrowTokenAA0fB0Vvp","s11SwiftSyntax09ArrowExprB0V11throwsTokenAA0fB0VSgvp","s11SwiftSyntax09ArrowExprB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ArrowExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrowExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09AttributeB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax09AttributeB0V11atSignTokenAA0fB0Vvp","s11SwiftSyntax09AttributeB0V12customMirrors0E0Vvp","s11SwiftSyntax09AttributeB0V13attributeNameAA05TokenB0Vvp","s11SwiftSyntax09AttributeB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09AttributeB0V8argumentAA0B0VSgvp","s11SwiftSyntax09AttributeB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax09AttributeB0V9tokenListAA05TokeneB0VSgvp","s11SwiftSyntax09AwaitExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax09AwaitExprB0V12awaitKeywordAA05TokenB0Vvp","s11SwiftSyntax09AwaitExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09AwaitExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09BreakStmtB0V12breakKeywordAA05TokenB0Vvp","s11SwiftSyntax09BreakStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09BreakStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09BreakStmtB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax09CatchItemB0V11whereClauseAA05WherefB0VSgvp","s11SwiftSyntax09CatchItemB0V12customMirrors0F0Vvp","s11SwiftSyntax09CatchItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax09CatchItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09CatchItemB0V7patternAA07PatternB0VSgvp","s11SwiftSyntax09ClassDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax09ClassDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax09ClassDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax09ClassDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ClassDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax09ClassDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax09ClassDeclB0V19classOrActorKeywordAA05TokenB0Vvp","s11SwiftSyntax09ClassDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax09ClassDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax09ClassDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax09CodeBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax09CodeBlockB0V10statementsAA0cd8ItemListB0Vvp","s11SwiftSyntax09CodeBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax09CodeBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09CodeBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax09DeclGroupB0P10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax09DeclGroupB0P7membersAA06Memberc5BlockB0Vvp","s11SwiftSyntax09DeclGroupB0P9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax09DeferStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09DeferStmtB0V12deferKeywordAA05TokenB0Vvp","s11SwiftSyntax09DeferStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09DeferStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09ElseBlockB0V11elseKeywordAA05TokenB0Vvp","s11SwiftSyntax09ElseBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax09ElseBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ElseBlockB0V4bodyAA04CodedB0Vvp","s11SwiftSyntax09ForInStmtB0V10forKeywordAA05TokenB0Vvp","s11SwiftSyntax09ForInStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V10tryKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V11caseKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V11whereClauseAA05WheregB0VSgvp","s11SwiftSyntax09ForInStmtB0V12awaitKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax09ForInStmtB0V12sequenceExprAA0gB0Vvp","s11SwiftSyntax09ForInStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ForInStmtB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax09ForInStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09ForInStmtB0V7patternAA07PatternB0Vvp","s11SwiftSyntax09ForInStmtB0V9inKeywordAA05TokenB0Vvp","s11SwiftSyntax09ForInStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax09GuardStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax09GuardStmtB0V11elseKeywordAA05TokenB0Vvp","s11SwiftSyntax09GuardStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09GuardStmtB0V12guardKeywordAA05TokenB0Vvp","s11SwiftSyntax09GuardStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09GuardStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09InOutExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax09InOutExprB0V12customMirrors0G0Vvp","s11SwiftSyntax09InOutExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09InOutExprB0V9ampersandAA05TokenB0Vvp","s11SwiftSyntax09ThrowStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax09ThrowStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09ThrowStmtB0V12throwKeywordAA05TokenB0Vvp","s11SwiftSyntax09ThrowStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TokenListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax09TokenListB0V12customMirrors0F0Vvp","s11SwiftSyntax09TokenListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax09TokenListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TokenListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax09TokenListB0V5countSivp","s11SwiftSyntax09TokenListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax09TupleExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09TupleExprB0V11elementListAA0cd7ElementfB0Vvp","s11SwiftSyntax09TupleExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09TupleExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TupleExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09TupleTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax09TupleTypeB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09TupleTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax09TupleTypeB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax09TupleTypeB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09WhileStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax09WhileStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax09WhileStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09WhileStmtB0V12whileKeywordAA05TokenB0Vvp","s11SwiftSyntax09WhileStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09WhileStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09WhileStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax09YieldListB0V07elementD0AA04ExprdB0Vvp","s11SwiftSyntax09YieldListB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09YieldListB0V12customMirrors0F0Vvp","s11SwiftSyntax09YieldListB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax09YieldListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09YieldListB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09YieldStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09YieldStmtB0V12yieldKeywordAA05TokenB0Vvp","s11SwiftSyntax09YieldStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09YieldStmtB0V6yieldsAA0B0Vvp","s11SwiftSyntax0B0V12customMirrors0D0Vvp","s11SwiftSyntax0B0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax0B10CollectionP5countSivp","s11SwiftSyntax0B13VerifierErrorO11descriptionSSvp","s11SwiftSyntax0B15ClassifiedRangeV4kindAA0B14ClassificationOvp","s11SwiftSyntax0B15ClassifiedRangeV5rangeAA010ByteSourceD0Vvp","s11SwiftSyntax0B15ClassifiedRangeV6lengthSivp","s11SwiftSyntax0B15ClassifiedRangeV6offsetSivp","s11SwiftSyntax0B15ClassifiedRangeV9endOffsetSivp","s11SwiftSyntax0B4NodeV02asB0AA0B0Vvp","s11SwiftSyntax0B4NodeV10asCaseItemAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asDeclNameAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asEnumDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asExprListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asObjcNameAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asTypeExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10isCaseItemSbvp","s11SwiftSyntax0B4NodeV10isDeclNameSbvp","s11SwiftSyntax0B4NodeV10isEnumDeclSbvp","s11SwiftSyntax0B4NodeV10isExprListSbvp","s11SwiftSyntax0B4NodeV10isObjcNameSbvp","s11SwiftSyntax0B4NodeV10isTypeExprSbvp","s11SwiftSyntax0B4NodeV11asArrayExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asArrayTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asArrowExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asAttributeAA0eB0VSgvp","s11SwiftSyntax0B4NodeV11asAwaitExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asBreakStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asCatchItemAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asClassDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asCodeBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asDeferStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asElseBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asForInStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV11asGuardStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asInOutExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV11asThrowStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTokenListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTupleExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTupleTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asWhileStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asYieldListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asYieldStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11descriptionSSvp","s11SwiftSyntax0B4NodeV11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B4NodeV11isArrayExprSbvp","s11SwiftSyntax0B4NodeV11isArrayTypeSbvp","s11SwiftSyntax0B4NodeV11isArrowExprSbvp","s11SwiftSyntax0B4NodeV11isAttributeSbvp","s11SwiftSyntax0B4NodeV11isAwaitExprSbvp","s11SwiftSyntax0B4NodeV11isBreakStmtSbvp","s11SwiftSyntax0B4NodeV11isCatchItemSbvp","s11SwiftSyntax0B4NodeV11isClassDeclSbvp","s11SwiftSyntax0B4NodeV11isCodeBlockSbvp","s11SwiftSyntax0B4NodeV11isDeferStmtSbvp","s11SwiftSyntax0B4NodeV11isElseBlockSbvp","s11SwiftSyntax0B4NodeV11isForInStmtSbvp","s11SwiftSyntax0B4NodeV11isGuardStmtSbvp","s11SwiftSyntax0B4NodeV11isInOutExprSbvp","s11SwiftSyntax0B4NodeV11isThrowStmtSbvp","s11SwiftSyntax0B4NodeV11isTokenListSbvp","s11SwiftSyntax0B4NodeV11isTupleExprSbvp","s11SwiftSyntax0B4NodeV11isTupleTypeSbvp","s11SwiftSyntax0B4NodeV11isWhileStmtSbvp","s11SwiftSyntax0B4NodeV11isYieldListSbvp","s11SwiftSyntax0B4NodeV11isYieldStmtSbvp","s11SwiftSyntax0B4NodeV11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B4NodeV12asAccessPathAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asImportDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asReturnStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSourceFileAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asStructDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSwitchCaseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSwitchStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12isAccessPathSbvp","s11SwiftSyntax0B4NodeV12isImportDeclSbvp","s11SwiftSyntax0B4NodeV12isReturnStmtSbvp","s11SwiftSyntax0B4NodeV12isSourceFileSbvp","s11SwiftSyntax0B4NodeV12isStructDeclSbvp","s11SwiftSyntax0B4NodeV12isSwitchCaseSbvp","s11SwiftSyntax0B4NodeV12isSwitchStmtSbvp","s11SwiftSyntax0B4NodeV13asCatchClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asClosureExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asKeyPathExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV13asTernaryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asWhereClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13isCatchClauseSbvp","s11SwiftSyntax0B4NodeV13isClosureExprSbvp","s11SwiftSyntax0B4NodeV13isKeyPathExprSbvp","s11SwiftSyntax0B4NodeV13isTernaryExprSbvp","s11SwiftSyntax0B4NodeV13isUnknownDeclSbvp","s11SwiftSyntax0B4NodeV13isUnknownExprSbvp","s11SwiftSyntax0B4NodeV13isUnknownStmtSbvp","s11SwiftSyntax0B4NodeV13isUnknownTypeSbvp","s11SwiftSyntax0B4NodeV13isWhereClauseSbvp","s11SwiftSyntax0B4NodeV14asAccessorDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asAccessorListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asArrayElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asCaseItemListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asClosureParamAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asContinueStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asDeclModifierAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asEnumCaseDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asFunctionDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asFunctionTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asIfConfigDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asMetatypeTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asModifierListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asObjCSelectorAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asOperatorDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asOptionalTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asProtocolDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asReturnClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asSequenceExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asSuperRefExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asTuplePatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asVariableDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asVersionTupleAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14isAccessorDeclSbvp","s11SwiftSyntax0B4NodeV14isAccessorListSbvp","s11SwiftSyntax0B4NodeV14isArrayElementSbvp","s11SwiftSyntax0B4NodeV14isCaseItemListSbvp","s11SwiftSyntax0B4NodeV14isClosureParamSbvp","s11SwiftSyntax0B4NodeV14isContinueStmtSbvp","s11SwiftSyntax0B4NodeV14isDeclModifierSbvp","s11SwiftSyntax0B4NodeV14isEnumCaseDeclSbvp","s11SwiftSyntax0B4NodeV14isFunctionDeclSbvp","s11SwiftSyntax0B4NodeV14isFunctionTypeSbvp","s11SwiftSyntax0B4NodeV14isIfConfigDeclSbvp","s11SwiftSyntax0B4NodeV14isMetatypeTypeSbvp","s11SwiftSyntax0B4NodeV14isModifierListSbvp","s11SwiftSyntax0B4NodeV14isObjCSelectorSbvp","s11SwiftSyntax0B4NodeV14isOperatorDeclSbvp","s11SwiftSyntax0B4NodeV14isOptionalTypeSbvp","s11SwiftSyntax0B4NodeV14isProtocolDeclSbvp","s11SwiftSyntax0B4NodeV14isReturnClauseSbvp","s11SwiftSyntax0B4NodeV14isSequenceExprSbvp","s11SwiftSyntax0B4NodeV14isSuperRefExprSbvp","s11SwiftSyntax0B4NodeV14isTuplePatternSbvp","s11SwiftSyntax0B4NodeV14isVariableDeclSbvp","s11SwiftSyntax0B4NodeV14isVersionTupleSbvp","s11SwiftSyntax0B4NodeV15asAccessorBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asAsTypePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asAttributeListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asCatchItemListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asCodeBlockItemAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asExtensionDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asInheritedTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asIsTypePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asObjcNamePieceAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asPoundFileExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asPoundLineExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asStringSegmentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asSubscriptDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asSubscriptExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asTypealiasDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15isAccessorBlockSbvp","s11SwiftSyntax0B4NodeV15isAsTypePatternSbvp","s11SwiftSyntax0B4NodeV15isAttributeListSbvp","s11SwiftSyntax0B4NodeV15isCatchItemListSbvp","s11SwiftSyntax0B4NodeV15isCodeBlockItemSbvp","s11SwiftSyntax0B4NodeV15isExtensionDeclSbvp","s11SwiftSyntax0B4NodeV15isInheritedTypeSbvp","s11SwiftSyntax0B4NodeV15isIsTypePatternSbvp","s11SwiftSyntax0B4NodeV15isObjcNamePieceSbvp","s11SwiftSyntax0B4NodeV15isPoundFileExprSbvp","s11SwiftSyntax0B4NodeV15isPoundLineExprSbvp","s11SwiftSyntax0B4NodeV15isStringSegmentSbvp","s11SwiftSyntax0B4NodeV15isSubscriptDeclSbvp","s11SwiftSyntax0B4NodeV15isSubscriptExprSbvp","s11SwiftSyntax0B4NodeV15isTypealiasDeclSbvp","s11SwiftSyntax0B4NodeV16asAssignmentExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asAttributedTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asDictionaryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asDictionaryTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asExpressionStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIdentifierExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIdentifierListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIfConfigClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asMemberDeclListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asNilLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asPatternBindingAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asPoundErrorDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asSpecializeExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asSwitchCaseListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asTypeAnnotationAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asUnknownPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16isAssignmentExprSbvp","s11SwiftSyntax0B4NodeV16isAttributedTypeSbvp","s11SwiftSyntax0B4NodeV16isDictionaryExprSbvp","s11SwiftSyntax0B4NodeV16isDictionaryTypeSbvp","s11SwiftSyntax0B4NodeV16isExpressionStmtSbvp","s11SwiftSyntax0B4NodeV16isIdentifierExprSbvp","s11SwiftSyntax0B4NodeV16isIdentifierListSbvp","s11SwiftSyntax0B4NodeV16isIfConfigClauseSbvp","s11SwiftSyntax0B4NodeV16isMemberDeclListSbvp","s11SwiftSyntax0B4NodeV16isNilLiteralExprSbvp","s11SwiftSyntax0B4NodeV16isPatternBindingSbvp","s11SwiftSyntax0B4NodeV16isPoundErrorDeclSbvp","s11SwiftSyntax0B4NodeV16isSpecializeExprSbvp","s11SwiftSyntax0B4NodeV16isSwitchCaseListSbvp","s11SwiftSyntax0B4NodeV16isTypeAnnotationSbvp","s11SwiftSyntax0B4NodeV16isUnknownPatternSbvp","s11SwiftSyntax0B4NodeV17asCatchClauseListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asCompositionTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asCustomAttributeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asDeclarationStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asEnumCaseElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asEnumCasePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asFallthroughStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asForcedValueExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asGenericArgumentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asInitializerDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asKeyPathBaseExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV17asMemberDeclBlockAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asObjcKeyPathExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV17asOptionalPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asParameterClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundAssertStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundColumnExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundFileIDExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asRepeatWhileStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asSwitchCaseLabelAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asWildcardPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17isCatchClauseListSbvp","s11SwiftSyntax0B4NodeV17isCompositionTypeSbvp","s11SwiftSyntax0B4NodeV17isCustomAttributeSbvp","s11SwiftSyntax0B4NodeV17isDeclarationStmtSbvp","s11SwiftSyntax0B4NodeV17isEnumCaseElementSbvp","s11SwiftSyntax0B4NodeV17isEnumCasePatternSbvp","s11SwiftSyntax0B4NodeV17isFallthroughStmtSbvp","s11SwiftSyntax0B4NodeV17isForcedValueExprSbvp","s11SwiftSyntax0B4NodeV17isGenericArgumentSbvp","s11SwiftSyntax0B4NodeV17isInitializerDeclSbvp","s11SwiftSyntax0B4NodeV17isKeyPathBaseExprSbvp","s11SwiftSyntax0B4NodeV17isMemberDeclBlockSbvp","s11SwiftSyntax0B4NodeV17isObjcKeyPathExprSbvp","s11SwiftSyntax0B4NodeV17isOptionalPatternSbvp","s11SwiftSyntax0B4NodeV17isParameterClauseSbvp","s11SwiftSyntax0B4NodeV17isPoundAssertStmtSbvp","s11SwiftSyntax0B4NodeV17isPoundColumnExprSbvp","s11SwiftSyntax0B4NodeV17isPoundFileIDExprSbvp","s11SwiftSyntax0B4NodeV17isRepeatWhileStmtSbvp","s11SwiftSyntax0B4NodeV17isSwitchCaseLabelSbvp","s11SwiftSyntax0B4NodeV17isWildcardPatternSbvp","s11SwiftSyntax0B4NodeV18asArrayElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asClosureParamListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asClosureSignatureAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asConditionElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asDeclNameArgumentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFloatLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFunctionCallExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFunctionDeclNameAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asGenericParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asMemberAccessExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asObjcSelectorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asPostfixUnaryExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asPoundWarningDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asRegexLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asTupleExprElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asTupleTypeElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18isArrayElementListSbvp","s11SwiftSyntax0B4NodeV18isClosureParamListSbvp","s11SwiftSyntax0B4NodeV18isClosureSignatureSbvp","s11SwiftSyntax0B4NodeV18isConditionElementSbvp","s11SwiftSyntax0B4NodeV18isDeclNameArgumentSbvp","s11SwiftSyntax0B4NodeV18isFloatLiteralExprSbvp","s11SwiftSyntax0B4NodeV18isFunctionCallExprSbvp","s11SwiftSyntax0B4NodeV18isFunctionDeclNameSbvp","s11SwiftSyntax0B4NodeV18isGenericParameterSbvp","s11SwiftSyntax0B4NodeV18isMemberAccessExprSbvp","s11SwiftSyntax0B4NodeV18isObjcSelectorExprSbvp","s11SwiftSyntax0B4NodeV18isPostfixUnaryExprSbvp","s11SwiftSyntax0B4NodeV18isPoundWarningDeclSbvp","s11SwiftSyntax0B4NodeV18isRegexLiteralExprSbvp","s11SwiftSyntax0B4NodeV18isTupleExprElementSbvp","s11SwiftSyntax0B4NodeV18isTupleTypeElementSbvp","s11SwiftSyntax0B4NodeV19asAccessorParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asAvailabilityEntryAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asCodeBlockItemListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asDeclNameArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asDeinitializerDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asDictionaryElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asExpressionPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asExpressionSegmentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asFunctionParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asFunctionSignatureAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asIdentifierPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asInheritedTypeListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asInitializerClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asNonEmptyTokenListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asObjCSelectorPieceAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asObjectLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asPoundFilePathExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asPoundFunctionExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asQualifiedDeclNameAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asStringLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19isAccessorParameterSbvp","s11SwiftSyntax0B4NodeV19isAvailabilityEntrySbvp","s11SwiftSyntax0B4NodeV19isCodeBlockItemListSbvp","s11SwiftSyntax0B4NodeV19isDeclNameArgumentsSbvp","s11SwiftSyntax0B4NodeV19isDeinitializerDeclSbvp","s11SwiftSyntax0B4NodeV19isDictionaryElementSbvp","s11SwiftSyntax0B4NodeV19isExpressionPatternSbvp","s11SwiftSyntax0B4NodeV19isExpressionSegmentSbvp","s11SwiftSyntax0B4NodeV19isFunctionParameterSbvp","s11SwiftSyntax0B4NodeV19isFunctionSignatureSbvp","s11SwiftSyntax0B4NodeV19isIdentifierPatternSbvp","s11SwiftSyntax0B4NodeV19isInheritedTypeListSbvp","s11SwiftSyntax0B4NodeV19isInitializerClauseSbvp","s11SwiftSyntax0B4NodeV19isNonEmptyTokenListSbvp","s11SwiftSyntax0B4NodeV19isObjCSelectorPieceSbvp","s11SwiftSyntax0B4NodeV19isObjectLiteralExprSbvp","s11SwiftSyntax0B4NodeV19isPoundFilePathExprSbvp","s11SwiftSyntax0B4NodeV19isPoundFunctionExprSbvp","s11SwiftSyntax0B4NodeV19isQualifiedDeclNameSbvp","s11SwiftSyntax0B4NodeV19isStringLiteralExprSbvp","s11SwiftSyntax0B4NodeV20asAssociatedtypeDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV20asBinaryOperatorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asBooleanLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asClosureCaptureItemAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asElseIfContinuationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asGenericRequirementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV20asGenericWhereClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asIfConfigClauseListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV20asIntegerLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asMemberDeclListItemAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV20asPatternBindingListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asPoundDsohandleExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asPrefixOperatorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asSwitchDefaultLabelAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20isAssociatedtypeDeclSbvp","s11SwiftSyntax0B4NodeV20isBinaryOperatorExprSbvp","s11SwiftSyntax0B4NodeV20isBooleanLiteralExprSbvp","s11SwiftSyntax0B4NodeV20isClosureCaptureItemSbvp","s11SwiftSyntax0B4NodeV20isElseIfContinuationSbvp","s11SwiftSyntax0B4NodeV20isGenericRequirementSbvp","s11SwiftSyntax0B4NodeV20isGenericWhereClauseSbvp","s11SwiftSyntax0B4NodeV20isIfConfigClauseListSbvp","s11SwiftSyntax0B4NodeV20isIntegerLiteralExprSbvp","s11SwiftSyntax0B4NodeV20isMemberDeclListItemSbvp","s11SwiftSyntax0B4NodeV20isPatternBindingListSbvp","s11SwiftSyntax0B4NodeV20isPoundDsohandleExprSbvp","s11SwiftSyntax0B4NodeV20isPrefixOperatorExprSbvp","s11SwiftSyntax0B4NodeV20isSwitchDefaultLabelSbvp","s11SwiftSyntax0B4NodeV21asAccessLevelModifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asAccessPathComponentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asEnumCaseElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV21asGenericArgumentListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asPostfixIfConfigExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV21asPoundSourceLocationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asPrecedenceGroupDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asSameTypeRequirementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asTargetFunctionEntryAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asTuplePatternElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asValueBindingPatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21isAccessLevelModifierSbvp","s11SwiftSyntax0B4NodeV21isAccessPathComponentSbvp","s11SwiftSyntax0B4NodeV21isEnumCaseElementListSbvp","s11SwiftSyntax0B4NodeV21isGenericArgumentListSbvp","s11SwiftSyntax0B4NodeV21isPostfixIfConfigExprSbvp","s11SwiftSyntax0B4NodeV21isPoundSourceLocationSbvp","s11SwiftSyntax0B4NodeV21isPrecedenceGroupDeclSbvp","s11SwiftSyntax0B4NodeV21isSameTypeRequirementSbvp","s11SwiftSyntax0B4NodeV21isTargetFunctionEntrySbvp","s11SwiftSyntax0B4NodeV21isTuplePatternElementSbvp","s11SwiftSyntax0B4NodeV21isValueBindingPatternSbvp","s11SwiftSyntax0B4NodeV22asAvailabilityArgumentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV22asAvailabilitySpecListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asClassRestrictionTypeAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asConditionElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asConstrainedSugarTypeAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asDeclNameArgumentListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22asGenericParameterListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asMemberTypeIdentifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asOptionalChainingExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asSimpleTypeIdentifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asTupleExprElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22asTupleTypeElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22isAvailabilityArgumentSbvp","s11SwiftSyntax0B4NodeV22isAvailabilitySpecListSbvp","s11SwiftSyntax0B4NodeV22isClassRestrictionTypeSbvp","s11SwiftSyntax0B4NodeV22isConditionElementListSbvp","s11SwiftSyntax0B4NodeV22isConstrainedSugarTypeSbvp","s11SwiftSyntax0B4NodeV22isDeclNameArgumentListSbvp","s11SwiftSyntax0B4NodeV22isGenericParameterListSbvp","s11SwiftSyntax0B4NodeV22isMemberTypeIdentifierSbvp","s11SwiftSyntax0B4NodeV22isOptionalChainingExprSbvp","s11SwiftSyntax0B4NodeV22isSimpleTypeIdentifierSbvp","s11SwiftSyntax0B4NodeV22isTupleExprElementListSbvp","s11SwiftSyntax0B4NodeV22isTupleTypeElementListSbvp","s11SwiftSyntax0B4NodeV23asAvailabilityConditionAA0efB0VSgvp","s11SwiftSyntax0B4NodeV23asBackDeployVersionListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV23asDictionaryElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asDiscardAssignmentExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asEditorPlaceholderExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asFunctionParameterListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asGenericArgumentClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asPrimaryAssociatedTypeAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asStringLiteralSegmentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asSymbolicReferenceExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asTypeInheritanceClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asTypeInitializerClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asUnresolvedPatternExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23isAvailabilityConditionSbvp","s11SwiftSyntax0B4NodeV23isBackDeployVersionListSbvp","s11SwiftSyntax0B4NodeV23isDictionaryElementListSbvp","s11SwiftSyntax0B4NodeV23isDiscardAssignmentExprSbvp","s11SwiftSyntax0B4NodeV23isEditorPlaceholderExprSbvp","s11SwiftSyntax0B4NodeV23isFunctionParameterListSbvp","s11SwiftSyntax0B4NodeV23isGenericArgumentClauseSbvp","s11SwiftSyntax0B4NodeV23isPrimaryAssociatedTypeSbvp","s11SwiftSyntax0B4NodeV23isStringLiteralSegmentsSbvp","s11SwiftSyntax0B4NodeV23isSymbolicReferenceExprSbvp","s11SwiftSyntax0B4NodeV23isTypeInheritanceClauseSbvp","s11SwiftSyntax0B4NodeV23isTypeInitializerClauseSbvp","s11SwiftSyntax0B4NodeV23isUnresolvedPatternExprSbvp","s11SwiftSyntax0B4NodeV24asClosureCaptureItemListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV24asCompositionTypeElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asConformanceRequirementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV24asDifferentiabilityParamAA0efB0VSgvp","s11SwiftSyntax0B4NodeV24asGenericParameterClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asGenericRequirementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asLabeledSpecializeEntryAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24isClosureCaptureItemListSbvp","s11SwiftSyntax0B4NodeV24isCompositionTypeElementSbvp","s11SwiftSyntax0B4NodeV24isConformanceRequirementSbvp","s11SwiftSyntax0B4NodeV24isDifferentiabilityParamSbvp","s11SwiftSyntax0B4NodeV24isGenericParameterClauseSbvp","s11SwiftSyntax0B4NodeV24isGenericRequirementListSbvp","s11SwiftSyntax0B4NodeV24isLabeledSpecializeEntrySbvp","s11SwiftSyntax0B4NodeV25asClosureCaptureSignatureAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV25asDifferentiabilityParamsAA0efB0VSgvp","s11SwiftSyntax0B4NodeV25asPoundSourceLocationArgsAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asPrecedenceGroupNameListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asPrecedenceGroupRelationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV25asTuplePatternElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asUnavailabilityConditionAA0efB0VSgvp","s11SwiftSyntax0B4NodeV25isClosureCaptureSignatureSbvp","s11SwiftSyntax0B4NodeV25isDifferentiabilityParamsSbvp","s11SwiftSyntax0B4NodeV25isPoundSourceLocationArgsSbvp","s11SwiftSyntax0B4NodeV25isPrecedenceGroupNameListSbvp","s11SwiftSyntax0B4NodeV25isPrecedenceGroupRelationSbvp","s11SwiftSyntax0B4NodeV25isTuplePatternElementListSbvp","s11SwiftSyntax0B4NodeV25isUnavailabilityConditionSbvp","s11SwiftSyntax0B4NodeV26asMatchingPatternConditionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV26asOptionalBindingConditionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV26isMatchingPatternConditionSbvp","s11SwiftSyntax0B4NodeV26isOptionalBindingConditionSbvp","s11SwiftSyntax0B4NodeV27asBackDeployVersionArgumentAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV27asPrecedenceGroupAssignmentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV27asPrimaryAssociatedTypeListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV27isBackDeployVersionArgumentSbvp","s11SwiftSyntax0B4NodeV27isPrecedenceGroupAssignmentSbvp","s11SwiftSyntax0B4NodeV27isPrimaryAssociatedTypeListSbvp","s11SwiftSyntax0B4NodeV28asCompositionTypeElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28asDifferentiabilityParamListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV28asOperatorPrecedenceAndTypesAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28asPrecedenceGroupNameElementAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28isCompositionTypeElementListSbvp","s11SwiftSyntax0B4NodeV28isDifferentiabilityParamListSbvp","s11SwiftSyntax0B4NodeV28isOperatorPrecedenceAndTypesSbvp","s11SwiftSyntax0B4NodeV28isPrecedenceGroupNameElementSbvp","s11SwiftSyntax0B4NodeV29asAvailabilityLabeledArgumentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV29asBackDeployAttributeSpecListAA0efghiB0VSgvp","s11SwiftSyntax0B4NodeV29asPrimaryAssociatedTypeClauseAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV29asSpecializeAttributeSpecListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV29isAvailabilityLabeledArgumentSbvp","s11SwiftSyntax0B4NodeV29isBackDeployAttributeSpecListSbvp","s11SwiftSyntax0B4NodeV29isPrimaryAssociatedTypeClauseSbvp","s11SwiftSyntax0B4NodeV29isSpecializeAttributeSpecListSbvp","s11SwiftSyntax0B4NodeV2idAA0B10IdentifierVvp","s11SwiftSyntax0B4NodeV30asImplementsAttributeArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV30asNamedAttributeStringArgumentAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV30asPrecedenceGroupAssociativityAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV30asPrecedenceGroupAttributeListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV30isImplementsAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV30isNamedAttributeStringArgumentSbvp","s11SwiftSyntax0B4NodeV30isPrecedenceGroupAssociativitySbvp","s11SwiftSyntax0B4NodeV30isPrecedenceGroupAttributeListSbvp","s11SwiftSyntax0B4NodeV31asDifferentiabilityParamsClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV31isDifferentiabilityParamsClauseSbvp","s11SwiftSyntax0B4NodeV32asAvailabilityVersionRestrictionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV32asMultipleTrailingClosureElementAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV32isAvailabilityVersionRestrictionSbvp","s11SwiftSyntax0B4NodeV32isMultipleTrailingClosureElementSbvp","s11SwiftSyntax0B4NodeV33asImplicitlyUnwrappedOptionalTypeAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV33isImplicitlyUnwrappedOptionalTypeSbvp","s11SwiftSyntax0B4NodeV34asDifferentiableAttributeArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV34isDifferentiableAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV36asMultipleTrailingClosureElementListAA0efghiB0VSgvp","s11SwiftSyntax0B4NodeV36isMultipleTrailingClosureElementListSbvp","s11SwiftSyntax0B4NodeV42asDerivativeRegistrationAttributeArgumentsAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV42isDerivativeRegistrationAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV6parentACSgvp","s11SwiftSyntax0B4NodeV8asAsExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asDoStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asIfStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asIsExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8byteSizeSivp","s11SwiftSyntax0B4NodeV8isAsExprSbvp","s11SwiftSyntax0B4NodeV8isDoStmtSbvp","s11SwiftSyntax0B4NodeV8isIfStmtSbvp","s11SwiftSyntax0B4NodeV8isIsExprSbvp","s11SwiftSyntax0B4NodeV8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B4NodeV9asTryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV9asUnknownAA0eB0VSgvp","s11SwiftSyntax0B4NodeV9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B4NodeV9isTryExprSbvp","s11SwiftSyntax0B4NodeV9isUnknownSbvp","s11SwiftSyntax0B8ChildrenV10startIndexAA0bcE0Vvp","s11SwiftSyntax0B8ChildrenV8endIndexAA0bcE0Vvp","s11SwiftSyntax0B8ProtocolP14syntaxNodeTypeAaB_pXpvp","s11SwiftSyntax0B8ProtocolPAAE10firstTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp","s11SwiftSyntax0B8ProtocolPAAE11descriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE12isCollectionSbvp","s11SwiftSyntax0B8ProtocolPAAE13contentLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE13indexInParentSivp","s11SwiftSyntax0B8ProtocolPAAE13leadingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13previousTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE14trailingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE15classificationsAA0B15ClassificationsVvp","s11SwiftSyntax0B8ProtocolPAAE16debugDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE27byteSizeAfterTrimmingTriviaSivp","s11SwiftSyntax0B8ProtocolPAAE2idAA0B10IdentifierVvp","s11SwiftSyntax0B8ProtocolPAAE31endPositionBeforeTrailingTriviaAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE34positionAfterSkippingLeadingTriviaAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE4rootAA0B0Vvp","s11SwiftSyntax0B8ProtocolPAAE5indexAA0B13ChildrenIndexVvp","s11SwiftSyntax0B8ProtocolPAAE6parentAA0B0VSgvp","s11SwiftSyntax0B8ProtocolPAAE6tokensAA13TokenSequenceVvp","s11SwiftSyntax0B8ProtocolPAAE7isTokenSbvp","s11SwiftSyntax0B8ProtocolPAAE8byteSizeSivp","s11SwiftSyntax0B8ProtocolPAAE8childrenAA0B8ChildrenVvp","s11SwiftSyntax0B8ProtocolPAAE8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE9hasParentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isMissingSbvp","s11SwiftSyntax0B8ProtocolPAAE9isPresentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isUnknownSbvp","s11SwiftSyntax0B8ProtocolPAAE9lastTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE9nextTokenAA0eB0VSgvp","s11SwiftSyntax10SourceEditV16replacementRangeAA04BytecF0Vvp","s11SwiftSyntax10SourceEditV17replacementLengthSivp","s11SwiftSyntax10SourceEditV5rangeAA04ByteC5RangeVvp","s11SwiftSyntax10SourceEditV6lengthSivp","s11SwiftSyntax10SourceEditV6offsetSivp","s11SwiftSyntax10SourceEditV9endOffsetSivp","s11SwiftSyntax11SourceRangeV16debugDescriptionSSvp","s11SwiftSyntax11SourceRangeV3endAA0C8LocationVvp","s11SwiftSyntax11SourceRangeV5startAA0C8LocationVvp","s11SwiftSyntax11TriviaPieceO12sourceLengthAA06SourceF0Vvp","s11SwiftSyntax11TriviaPieceO16debugDescriptionSSvp","s11SwiftSyntax12SourceLengthV04utf8D0Sivp","s11SwiftSyntax13TokenSequenceV12customMirrors0F0Vvp","s11SwiftSyntax14SourceLocationV16debugDescriptionSSvp","s11SwiftSyntax14SourceLocationV4fileSSSgvp","s11SwiftSyntax14SourceLocationV4lineSiSgvp","s11SwiftSyntax14SourceLocationV6columnSiSgvp","s11SwiftSyntax14SourceLocationV6offsetSivp","s11SwiftSyntax15ByteSourceRangeV6lengthSivp","s11SwiftSyntax15ByteSourceRangeV6offsetSivp","s11SwiftSyntax15ByteSourceRangeV7isEmptySbvp","s11SwiftSyntax15ByteSourceRangeV9endOffsetSivp","s11SwiftSyntax15ConcurrentEditsV5editsSayAA10SourceEditVGvp","s11SwiftSyntax16AbsolutePositionV10utf8OffsetSivp","s11SwiftSyntax21ReversedTokenSequenceV12customMirrors0G0Vvp","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC13rangeAndNodesSayAA15ByteSourceRangeV_AA0bF0VtGvp","s11SwiftSyntax6TriviaV10startIndexSivp","s11SwiftSyntax6TriviaV12sourceLengthAA06SourceE0Vvp","s11SwiftSyntax6TriviaV8byteSizeSivp","s11SwiftSyntax6TriviaV8endIndexSivp","s11SwiftSyntax9TokenKindO9isKeywordSbvp","s11SwiftSyntax0B7FactoryO011makeUnknownB06tokensAA0eB0VSayAA05TokenB0VG_tFZ","s11SwiftSyntax0B7FactoryO10makeAsExpr5asTok25questionOrExclamationMark8typeNameAA0efB0VAA05TokenB0V_AKSgAA04TypeB0VtFZ","s11SwiftSyntax0B7FactoryO10makeDoStmt9labelName0G5Colon9doKeyword4body12catchClausesAA0efB0VAA05TokenB0VSg_AnmA09CodeBlockB0VAA015CatchClauseListB0VSgtFZ","s11SwiftSyntax0B7FactoryO10makeIfStmt9labelName0G5Colon9ifKeyword10conditions4body04elseK00N4BodyAA0efB0VAA05TokenB0VSg_ApoA020ConditionElementListB0VAA09CodeBlockB0VApA0B0VSgtFZ","s11SwiftSyntax0B7FactoryO10makeIsExpr5isTok8typeNameAA0efB0VAA05TokenB0V_AA04TypeB0VtFZ","s11SwiftSyntax0B7FactoryO11makeTryExpr10tryKeyword25questionOrExclamationMark10expressionAA0efB0VAA05TokenB0V_AKSgAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO11makeUnknown_13leadingTrivia08trailingG0AA05TokenB0VSS_AA0G0VAJtFZ","s11SwiftSyntax0B7FactoryO12makeCaseItem7pattern11whereClause13trailingCommaAA0efB0VAA07PatternB0V_AA05WhereiB0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO12makeDeclName08declBaseF00gF9ArgumentsAA0efB0VAA0B0V_AA0efiB0VSgtFZ","s11SwiftSyntax0B7FactoryO12makeEnumDecl10attributes9modifiers11enumKeyword10identifier17genericParameters17inheritanceClause0l5WhereO07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA016GenericParameteroB0VSgAA015TypeInheritanceoB0VSgAA0vpoB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO12makeExprListyAA0efB0VSayAA0eB0VGFZ","s11SwiftSyntax0B7FactoryO12makeObjcNameyAA0efB0VSayAA0ef5PieceB0VGFZ","s11SwiftSyntax0B7FactoryO12makeTypeExpr4typeAA0efB0VAA0eB0V_tFZ","s11SwiftSyntax0B7FactoryO13makeArrayExpr10leftSquare8elements05rightH0AA0efB0VAA05TokenB0V_AA0e11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeArrayType17leftSquareBracket07elementF005righthI0AA0efB0VAA05TokenB0V_AA0fB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeArrowExpr12asyncKeyword11throwsToken05arrowJ0AA0efB0VAA0jB0VSg_AlKtFZ","s11SwiftSyntax0B7FactoryO13makeAsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeAttribute11atSignToken13attributeName9leftParen8argument05rightL09tokenListAA0eB0VAA0hB0V_A2NSgAA0B0VSgAoA0hpB0VSgtFZ","s11SwiftSyntax0B7FactoryO13makeAwaitExpr12awaitKeyword10expressionAA0efB0VAA05TokenB0V_AA0fB0VtFZ","s11SwiftSyntax0B7FactoryO13makeBreakStmt12breakKeyword5labelAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO13makeCatchItem7pattern11whereClause13trailingCommaAA0efB0VAA07PatternB0VSg_AA05WhereiB0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO13makeClassDecl10attributes9modifiers19classOrActorKeyword10identifier22genericParameterClause011inheritanceP00n5WhereP07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifieruB0VSgAA05TokenB0VAvA07GenericopB0VSgAA015TypeInheritancepB0VSgAA0xrpB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeCodeBlock9leftBrace10statements05rightH0AA0efB0VAA05TokenB0V_AA0ef8ItemListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeDeferStmt12deferKeyword4bodyAA0efB0VAA05TokenB0V_AA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeDoKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeElseBlock11elseKeyword4bodyAA0efB0VAA05TokenB0V_AA04CodefB0VtFZ","s11SwiftSyntax0B7FactoryO13makeForInStmt9labelName0H5Colon10forKeyword03tryL005awaitL004caseL07pattern14typeAnnotation02inL012sequenceExpr11whereClause4bodyAA0efgB0VAA05TokenB0VSg_Aut3uA07PatternB0VAA04TyperB0VSgAtA0uB0VAA05WherewB0VSgAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeGuardStmt12guardKeyword10conditions04elseH04bodyAA0efB0VAA05TokenB0V_AA020ConditionElementListB0VAlA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeIfKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeInKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeInOutExpr9ampersand10expressionAA0efgB0VAA05TokenB0V_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO13makeIsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeThrowStmt12throwKeyword10expressionAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO13makeTokenListyAA0efB0VSayAA0eB0VGFZ","s11SwiftSyntax0B7FactoryO13makeTupleExpr9leftParen11elementList05rightH0AA0efB0VAA05TokenB0V_AA0ef7ElementjB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeTupleType9leftParen8elements05rightH0AA0efB0VAA05TokenB0V_AA0ef11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeTypeToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeWhileStmt9labelName0G5Colon12whileKeyword10conditions4bodyAA0efB0VAA05TokenB0VSg_AnmA020ConditionElementListB0VAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeYieldList9leftParen07elementF013trailingComma05rightH0AA0efB0VAA05TokenB0V_AA04ExprfB0VALSgALtFZ","s11SwiftSyntax0B7FactoryO13makeYieldStmt12yieldKeyword6yieldsAA0efB0VAA05TokenB0V_AA0B0VtFZ","s11SwiftSyntax0B7FactoryO14makeAccessPathyAA0efB0VSayAA0ef9ComponentB0VGFZ","s11SwiftSyntax0B7FactoryO14makeAnyKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeArrowToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeColonToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeCommaToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeEqualToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeForKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeIdentifier_13leadingTrivia08trailingG0AA05TokenB0VSS_AA0G0VAJtFZ","s11SwiftSyntax0B7FactoryO14makeImportDecl10attributes9modifiers9importTok0I4Kind4pathAA0efB0VAA013AttributeListB0VSg_AA08ModifiernB0VSgAA05TokenB0VASSgAA010AccessPathB0VtFZ","s11SwiftSyntax0B7FactoryO14makeLetKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeNilKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makePoundToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeReturnStmt13returnKeyword10expressionAA0efB0VAA05TokenB0V_AA04ExprB0VSgtFZ","s11SwiftSyntax0B7FactoryO14makeSourceFile10statements8eofTokenAA0efB0VAA017CodeBlockItemListB0V_AA0iB0VtFZ","s11SwiftSyntax0B7FactoryO14makeStructDecl10attributes9modifiers13structKeyword10identifier22genericParameterClause011inheritanceN00l5WhereN07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA07GenericmnB0VSgAA015TypeInheritancenB0VSgAA0vpnB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO14makeSwitchCase11unknownAttr5label10statementsAA0efB0VAA09AttributeB0VSg_AA0B0VAA017CodeBlockItemListB0VtFZ","s11SwiftSyntax0B7FactoryO14makeSwitchStmt9labelName0G5Colon13switchKeyword10expression9leftBrace5cases05rightN0AA0efB0VAA05TokenB0VSg_ApoA04ExprB0VAoA0e8CaseListB0VAOtFZ","s11SwiftSyntax0B7FactoryO14makeTryKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeVarKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeYieldToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeAtSignToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeBlankAsExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankDoStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankIfStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankIsExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeCaseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeCatchClause12catchKeyword0G5Items4bodyAA0efB0VAA05TokenB0V_AA0e8ItemListB0VSgAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO15makeClosureExpr9leftBrace9signature10statements05rightH0AA0efB0VAA05TokenB0V_AA0e9SignatureB0VSgAA017CodeBlockItemListB0VALtFZ","s11SwiftSyntax0B7FactoryO15makeElseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeEnumKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeFuncKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeInitKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeKeyPathExpr9backslash04rootG010expressionAA0efgB0VAA05TokenB0V_AA0gB0VSgAMtFZ","s11SwiftSyntax0B7FactoryO15makePeriodToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeSelfKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeTernaryExpr19conditionExpression12questionMark11firstChoice05colonJ006secondL0AA0efB0VAA0fB0V_AA05TokenB0VAmoMtFZ","s11SwiftSyntax0B7FactoryO15makeTrueKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeWhereClause12whereKeyword11guardResultAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO16makeAccessorDecl10attributes8modifier12accessorKind9parameter12asyncKeyword06throwsM04bodyAA0efB0VAA013AttributeListB0VSg_AA0f8ModifierB0VSgAA05TokenB0VAA0e9ParameterB0VSgAUSgAyA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeAccessorListyAA0efB0VSayAA0e4DeclB0VGFZ","s11SwiftSyntax0B7FactoryO16makeArrayElement10expression13trailingCommaAA0efB0VAA04ExprB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeBlankTryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO16makeBreakKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeCaseItemListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO16makeCatchKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeClassKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeClosureParam4name13trailingCommaAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO16makeContinueStmt15continueKeyword5labelAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO16makeDeclModifier4name15detailLeftParen0H00h5RightJ0AA0efB0VAA05TokenB0V_ALSgA2MtFZ","s11SwiftSyntax0B7FactoryO16makeDeferKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeEnumCaseDecl10attributes9modifiers11caseKeyword8elementsAA0efgB0VAA013AttributeListB0VSg_AA08ModifiernB0VSgAA05TokenB0VAA0ef7ElementnB0VtFZ","s11SwiftSyntax0B7FactoryO16makeFalseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeFunctionDecl10attributes9modifiers11funcKeyword10identifier22genericParameterClause9signature0l5WhereN04bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA07GenericmnB0VSgAA0e9SignatureB0VAA0vpnB0VSgAA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeFunctionType9leftParen9arguments05rightH012asyncKeyword016throwsOrRethrowsL05arrow06returnF0AA0efB0VAA05TokenB0V_AA05Tuplef11ElementListB0VA2OSgAroA0fB0VtFZ","s11SwiftSyntax0B7FactoryO16makeGuardKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeIfConfigDecl7clauses10poundEndifAA0efgB0VAA0ef10ClauseListB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO16makeInoutKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeMetatypeType04baseF06period14typeOrProtocolAA0efB0VAA0fB0V_AA05TokenB0VAMtFZ","s11SwiftSyntax0B7FactoryO16makeModifierListyAA0efB0VSayAA04DecleB0VGFZ","s11SwiftSyntax0B7FactoryO16makeObjCSelectoryAA0efB0VSayAA0ef5PieceB0VGFZ","s11SwiftSyntax0B7FactoryO16makeOperatorDecl10attributes9modifiers15operatorKeyword10identifier0I18PrecedenceAndTypesAA0efB0VAA013AttributeListB0VSg_AA08ModifierpB0VSgAA05TokenB0VAsA0elmnB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeOptionalType07wrappedF012questionMarkAA0efB0VAA0fB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO16makeProtocolDecl10attributes9modifiers15protocolKeyword10identifier27primaryAssociatedTypeClause011inheritanceO0012genericWhereO07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifieruB0VSgAA05TokenB0VAvA07PrimarymnoB0VSgAA0n11InheritanceoB0VSgAA07GenericroB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO16makeRegexLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO16makeReturnClause5arrow10returnTypeAA0efB0VAA05TokenB0V_AA0iB0VtFZ","s11SwiftSyntax0B7FactoryO16makeSequenceExpr8elementsAA0efB0VAA0f4ListB0V_tFZ","s11SwiftSyntax0B7FactoryO16makeSuperKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeSuperRefExpr12superKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO16makeThrowKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeTuplePattern9leftParen8elements05rightH0AA0efB0VAA05TokenB0V_AA0ef11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO16makeVariableDecl10attributes9modifiers15letOrVarKeyword8bindingsAA0efB0VAA013AttributeListB0VSg_AA08ModifieroB0VSgAA05TokenB0VAA014PatternBindingoB0VtFZ","s11SwiftSyntax0B7FactoryO16makeVariableExpr_13leadingTrivia08trailingH0AA010IdentifierfB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO16makeVersionTuple10majorMinor11patchPeriod0iE0AA0efB0VAA0B0V_AA05TokenB0VSgANtFZ","s11SwiftSyntax0B7FactoryO16makeWhereKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeWhileKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeAccessorBlock9leftBrace9accessors05rightH0AA0efB0VAA05TokenB0V_AA0e4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO17makeAsTypePattern7pattern9asKeyword4typeAA0efgB0VAA0gB0V_AA05TokenB0VAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO17makeAttributeListyAA0efB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO17makeBacktickToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeBlankCaseItemAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankDeclNameAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankEnumDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankExprListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankObjcNameAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankTypeExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeCatchItemListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO17makeCodeBlockItem4item9semicolon11errorTokensAA0efgB0VAA0B0V_AA05TokenB0VSgAKSgtFZ","s11SwiftSyntax0B7FactoryO17makeDeinitKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeEllipsisToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeExtensionDecl10attributes9modifiers16extensionKeyword12extendedType17inheritanceClause012genericWhereN07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAA0lB0VAA0l11InheritancenB0VSgAA07GenericpnB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO17makeImportKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeInheritedType8typeName13trailingCommaAA0efB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeIsTypePattern9isKeyword4typeAA0efgB0VAA05TokenB0V_AA0fB0VtFZ","s11SwiftSyntax0B7FactoryO17makeObjcNamePiece4name3dotAA0efgB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO17makePoundFileExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makePoundLineExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makeProtocolToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makePublicKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeRepeatKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeReturnKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeStaticKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeStringLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO17makeStringSegment7contentAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makeStringSegment_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO17makeStructKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeSubscriptDecl10attributes9modifiers16subscriptKeyword22genericParameterClause7indices6result0k5WhereM08accessorAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAA07GenericlmB0VSgAA0lmB0VAA06ReturnmB0VAA0vpmB0VSgAA0B0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeSubscriptExpr16calledExpression11leftBracket12argumentList05rightJ015trailingClosure26additionalTrailingClosuresAA0efB0VAA0fB0V_AA05TokenB0VAA05Tuplef7ElementlB0VApA0ofB0VSgAA08MultipleqoulB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeSwitchKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeThrowsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeTypealiasDecl10attributes9modifiers16typealiasKeyword10identifier22genericParameterClause11initializer0l5WhereN0AA0efB0VAA013AttributeListB0VSg_AA08ModifierrB0VSgAA05TokenB0VAuA07GenericmnB0VSgAA015TypeInitializernB0VSgAA0upnB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeVoidTupleTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeAssignmentExpr11assignTokenAA0efB0VAA0hB0V_tFZ","s11SwiftSyntax0B7FactoryO18makeAttributedType9specifier10attributes04baseF0AA0efB0VAA05TokenB0VSg_AA013AttributeListB0VSgAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO18makeBackslashToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeBinaryOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrayExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrayTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrowExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankAttributeAA0fB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankAwaitExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankBreakStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankCatchItemAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankClassDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankCodeBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankDeferStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankElseBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankForInStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankGuardStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankInOutExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankThrowStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTokenListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTupleExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTupleTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankWhileStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankYieldListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankYieldStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeDefaultKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeDictionaryExpr10leftSquare7content05rightH0AA0efB0VAA05TokenB0V_AA0B0VAKtFZ","s11SwiftSyntax0B7FactoryO18makeDictionaryType17leftSquareBracket03keyF05colon05valueF005righthI0AA0efB0VAA05TokenB0V_AA0fB0VAmoMtFZ","s11SwiftSyntax0B7FactoryO18makeExpressionStmt10expressionAA0efB0VAA04ExprB0V_tFZ","s11SwiftSyntax0B7FactoryO18makeIdentifierExpr10identifier17declNameArgumentsAA0efB0VAA05TokenB0V_AA04DeclijB0VSgtFZ","s11SwiftSyntax0B7FactoryO18makeIdentifierListyAA0efB0VSayAA05TokenB0VGFZ","s11SwiftSyntax0B7FactoryO18makeIfConfigClause12poundKeyword9condition8elementsAA0efgB0VAA05TokenB0V_AA04ExprB0VSgAA0B0VtFZ","s11SwiftSyntax0B7FactoryO18makeIntegerLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftAngleToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftBraceToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftParenToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeMemberDeclListyAA0efgB0VSayAA0efg4ItemB0VGFZ","s11SwiftSyntax0B7FactoryO18makeNilLiteralExpr10nilKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO18makePatternBinding7pattern14typeAnnotation11initializer8accessor13trailingCommaAA0efB0VAA0eB0V_AA04TypeiB0VSgAA017InitializerClauseB0VSgAA0B0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO18makePoundErrorDecl05poundF09leftParen7message05rightJ0AA0efgB0VAA05TokenB0V_AlA017StringLiteralExprB0VALtFZ","s11SwiftSyntax0B7FactoryO18makePoundIfKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makePrefixOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makePrivateKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeSemicolonToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeSpecializeExpr10expression21genericArgumentClauseAA0efB0VAA0fB0V_AA07GenericijB0VtFZ","s11SwiftSyntax0B7FactoryO18makeSwitchCaseListyAA0efgB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO18makeTypeAnnotation5colon4typeAA0efB0VAA05TokenB0V_AA0eB0VtFZ","s11SwiftSyntax0B7FactoryO18makeTypeIdentifier_13leadingTrivia08trailingH0AA0eB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makeBlankAccessPathAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankImportDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankReturnStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSourceFileAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankStructDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSwitchCaseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSwitchStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeCatchClauseListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO19makeCompositionType8elementsAA0efB0VAA0ef11ElementListB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeContinueKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeCustomAttribute11atSignToken13attributeName9leftParen12argumentList05rightM0AA0efB0VAA0iB0V_AA04TypeB0VAMSgAA016TupleExprElementoB0VSgAPtFZ","s11SwiftSyntax0B7FactoryO19makeDeclarationStmt11declarationAA0efB0VAA04DeclB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeEnumCaseElement10identifier15associatedValue03rawJ013trailingCommaAA0efgB0VAA05TokenB0V_AA015ParameterClauseB0VSgAA011InitializerpB0VSgALSgtFZ","s11SwiftSyntax0B7FactoryO19makeEnumCasePattern4type6period8caseName15associatedTupleAA0efgB0VAA04TypeB0VSg_AA05TokenB0VAoA0mgB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeFallthroughStmt18fallthroughKeywordAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeFloatingLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makeForcedValueExpr10expression15exclamationMarkAA0efgB0VAA0gB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO19makeGenericArgument12argumentType13trailingCommaAA0efB0VAA0hB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeInitializerDecl10attributes9modifiers11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsJ00m5WhereO04bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifierwB0VSgAA05TokenB0VAWSgAA07GenericnoB0VSgAA0noB0VAxA0ztoB0VSgAA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeInternalKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeKeyPathBaseExpr6periodAA0efghB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeMemberDeclBlock9leftBrace7members05rightI0AA0efgB0VAA05TokenB0V_AA0ef4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makeObjcKeyPathExpr03keyG09leftParen4name05rightK0AA0efghB0VAA05TokenB0V_AlA0e4NameB0VALtFZ","s11SwiftSyntax0B7FactoryO19makeOperatorKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeOptionalPattern03subF012questionMarkAA0efB0VAA0fB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO19makeParameterClause9leftParen13parameterList05rightH0AA0efB0VAA05TokenB0V_AA08FunctionejB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makePostfixOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makePoundAssertStmt05poundF09leftParen9condition5comma7message05rightJ0AA0efgB0VAA05TokenB0V_AnA04ExprB0VANSgAqNtFZ","s11SwiftSyntax0B7FactoryO19makePoundColumnExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makePoundFileIDExpr05poundF2IDAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeProtocolKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRepeatWhileStmt9labelName0H5Colon13repeatKeyword4body05whileL09conditionAA0efgB0VAA05TokenB0VSg_AonA09CodeBlockB0VAnA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO19makeRethrowsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightAngleToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightBraceToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightParenToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeSwitchCaseLabel11caseKeyword0H5Items5colonAA0efgB0VAA05TokenB0V_AA0f8ItemListB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makeWildcardKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeWildcardPattern8wildcard14typeAnnotationAA0efB0VAA05TokenB0V_AA04TypeiB0VSgtFZ","s11SwiftSyntax0B7FactoryO19make__FILE__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19make__LINE__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeArrayElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO20makeBlankCatchClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankClosureExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankKeyPathExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankTernaryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankWhereClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeClosureParamListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO20makeClosureSignature10attributes7capture5input12asyncKeyword9throwsTok6output02inM0AA0efB0VAA013AttributeListB0VSg_AA0e7CapturefB0VSgAA0B0VSgAA05TokenB0VSgAyA012ReturnClauseB0VSgAXtFZ","s11SwiftSyntax0B7FactoryO20makeConditionElement9condition13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeDeclNameArgument4name5colonAA0efgB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeDollarIdentifier_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO20makeExtensionKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeFloatLiteralExpr14floatingDigitsAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO20makeFunctionCallExpr16calledExpression9leftParen12argumentList05rightK015trailingClosure26additionalTrailingClosuresAA0efgB0VAA0gB0V_AA05TokenB0VSgAA05Tupleg7ElementmB0VAqA0pgB0VSgAA08MultiplerpvmB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeFunctionDeclName4name9argumentsAA0efgB0VAA0B0V_AA0fg9ArgumentsB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeGenericParameter10attributes4name5colon13inheritedType13trailingCommaAA0efB0VAA013AttributeListB0VSg_AA05TokenB0VAPSgAA0kB0VSgAQtFZ","s11SwiftSyntax0B7FactoryO20makeGenericParameter4name13trailingCommaAA0efB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeMemberAccessExpr4base3dot4name17declNameArgumentsAA0efgB0VAA0gB0VSg_AA05TokenB0VAoA04DecllmB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeObjcSelectorExpr05poundF09leftParen4kind5colon4name05rightJ0AA0efgB0VAA05TokenB0V_A2NSgAoA0gB0VANtFZ","s11SwiftSyntax0B7FactoryO20makePostfixUnaryExpr10expression13operatorTokenAA0efgB0VAA0gB0V_AA0jB0VtFZ","s11SwiftSyntax0B7FactoryO20makePoundElseKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundFileKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundLineKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundWarningDecl05poundF09leftParen7message05rightJ0AA0efgB0VAA05TokenB0V_AlA017StringLiteralExprB0VALtFZ","s11SwiftSyntax0B7FactoryO20makeRegexLiteralExpr5regexAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO20makeSingleQuoteToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeStringQuoteToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeSubscriptKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeTupleExprElement5label5colon10expression13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement4name5colon4type13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement4type13trailingCommaAA0efgB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement5inOut4name10secondName5colon4type8ellipsis11initializer13trailingCommaAA0efgB0VAA05TokenB0VSg_A3qA0fB0VAqA017InitializerClauseB0VSgAQtFZ","s11SwiftSyntax0B7FactoryO20makeTypealiasKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeAccessorParameter9leftParen4name05rightH0AA0efB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO21makeAnyTypeIdentifier13leadingTrivia08trailingI0AA0fB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeAvailabilityEntry5label5colon16availabilityList9semicolonAA0efB0VAA05TokenB0V_AlA0e4SpecjB0VALtFZ","s11SwiftSyntax0B7FactoryO21makeBlankAccessorDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankAccessorListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankArrayElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankCaseItemListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankClosureParamAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankContinueStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankDeclModifierAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankEnumCaseDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankFunctionDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankFunctionTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankIfConfigDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankMetatypeTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankModifierListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankObjCSelectorAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankOperatorDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankOptionalTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankProtocolDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankReturnClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankSequenceExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankSuperRefExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankTuplePatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankVariableDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankVersionTupleAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeCodeBlockItemListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO21makeContextualKeyword_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO21makeDeclNameArguments9leftParen9arguments05rightI0AA0efgB0VAA05TokenB0V_AA0ef12ArgumentListB0VAKtFZ","s11SwiftSyntax0B7FactoryO21makeDeinitializerDecl10attributes9modifiers13deinitKeyword4bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifiermB0VSgAA05TokenB0VAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO21makeDictionaryElement13keyExpression5colon05valueH013trailingCommaAA0efB0VAA04ExprB0V_AA05TokenB0VAlNSgtFZ","s11SwiftSyntax0B7FactoryO21makeExpressionPattern10expressionAA0efB0VAA04ExprB0V_tFZ","s11SwiftSyntax0B7FactoryO21makeExpressionSegment9backslash9delimiter9leftParen11expressions05rightJ0AA0efB0VAA05TokenB0V_AMSgAmA020TupleExprElementListB0VAMtFZ","s11SwiftSyntax0B7FactoryO21makeFunctionParameter10attributes9firstName06secondI05colon4type8ellipsis15defaultArgument13trailingCommaAA0efB0VAA013AttributeListB0VSg_AA05TokenB0VSgA2tA04TypeB0VSgAtA017InitializerClauseB0VSgATtFZ","s11SwiftSyntax0B7FactoryO21makeFunctionSignature5input21asyncOrReasyncKeyword06throwsi8RethrowsK06outputAA0efB0VAA015ParameterClauseB0V_AA05TokenB0VSgAoA06ReturnpB0VSgtFZ","s11SwiftSyntax0B7FactoryO21makeIdentifierPattern10identifierAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makeInheritedTypeListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO21makeInitializerClause5equal5valueAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO21makeNonEmptyTokenListyAA0efghB0VSayAA0gB0VGFZ","s11SwiftSyntax0B7FactoryO21makeObjCSelectorPiece4name5colonAA0efgB0VAA05TokenB0VSg_AKtFZ","s11SwiftSyntax0B7FactoryO21makeObjectLiteralExpr10identifier9leftParen9arguments05rightJ0AA0efgB0VAA05TokenB0V_AlA05Tupleg11ElementListB0VALtFZ","s11SwiftSyntax0B7FactoryO21makePoundEndifKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makePoundErrorKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makePoundFilePathExpr05poundfG0AA0efghB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makePoundFunctionExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makePrefixPeriodToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeQualifiedDeclName8baseType3dot4name9argumentsAA0efgB0VAA0iB0VSg_AA05TokenB0VSgAoA0fg9ArgumentsB0VSgtFZ","s11SwiftSyntax0B7FactoryO21makeStringLiteralExpr13openDelimiter0H5Quote8segments05closeJ00lI0AA0efgB0VAA05TokenB0VSg_AmA0ef8SegmentsB0VAmNtFZ","s11SwiftSyntax0B7FactoryO21makeStringLiteralExpr_13leadingTrivia08trailingI0AA0efgB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO21make__COLUMN__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeAssociatedtypeDecl10attributes9modifiers21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereM0AA0efB0VAA013AttributeListB0VSg_AA08ModifierrB0VSgAA05TokenB0VAuA015TypeInheritancemB0VSgAA0u11InitializermB0VSgAA07GenericpmB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makeBinaryOperatorExpr13operatorTokenAA0efgB0VAA0iB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeBlankAccessorBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankAsTypePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankAttributeListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankCatchItemListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankCodeBlockItemAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankExtensionDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankInheritedTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankIsTypePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankObjcNamePieceAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankPoundFileExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankPoundLineExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankStringSegmentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankSubscriptDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankSubscriptExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankTypealiasDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBooleanLiteralExpr07booleanF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeCapitalSelfKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeClosureCaptureItem9specifier4name11assignToken10expression13trailingCommaAA0efgB0VAA0k4ListB0VSg_AA0kB0VSgAqA04ExprB0VAQtFZ","s11SwiftSyntax0B7FactoryO22makeElseIfContinuation11ifStatementAA0efgB0VAA0f4StmtB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeFallthroughKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeFileprivateKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeGenericRequirement4body13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makeGenericWhereClause12whereKeyword15requirementListAA0efgB0VAA05TokenB0V_AA0e11RequirementkB0VtFZ","s11SwiftSyntax0B7FactoryO22makeIfConfigClauseListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO22makeIntegerLiteralExpr6digitsAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeMemberDeclListItem4decl9semicolonAA0efghB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makePatternBindingListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO22makePoundAssertKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundColumnKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundDsohandleExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makePoundElseifKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundFileIDKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePrefixOperatorExpr13operatorToken17postfixExpressionAA0efgB0VAA0iB0VSg_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO22makeRawStringDelimiter_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO22makeSelfTypeIdentifier13leadingTrivia08trailingI0AA0fB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeSwitchDefaultLabel14defaultKeyword5colonAA0efgB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makeAccessLevelModifier4name9leftParen8modifier05rightJ0AA0efgB0VAA05TokenB0V_ALSgA2MtFZ","s11SwiftSyntax0B7FactoryO23makeAccessPathComponent4name11trailingDotAA0efgB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO23makeBlankAssignmentExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankAttributedTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankDictionaryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankDictionaryTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankExpressionStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIdentifierExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIdentifierListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIfConfigClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankMemberDeclListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankNilLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankPatternBindingAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankPoundErrorDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankSpecializeExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankSwitchCaseListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankTypeAnnotationAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankUnknownPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeEnumCaseElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO23makeGenericArgumentListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO23makePostfixIfConfigExpr4base6configAA0efghB0VAA0hB0VSg_AA0fg4DeclB0VtFZ","s11SwiftSyntax0B7FactoryO23makePoundKeyPathKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makePoundSourceLocation05poundfG09leftParen4args05rightJ0AA0efgB0VAA05TokenB0V_AlA0efg4ArgsB0VSgALtFZ","s11SwiftSyntax0B7FactoryO23makePoundWarningKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makePrecedenceGroupDecl10attributes9modifiers22precedencegroupKeyword10identifier9leftBrace15groupAttributes05rightN0AA0efgB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VA2uA0efrsB0VAUtFZ","s11SwiftSyntax0B7FactoryO23makeSameTypeRequirement04leftF10Identifier13equalityToken05rightfI0AA0efgB0VAA0fB0V_AA0kB0VAKtFZ","s11SwiftSyntax0B7FactoryO23makeTargetFunctionEntry5label5colon8declname13trailingCommaAA0efgB0VAA05TokenB0V_AlA08DeclNameB0VALSgtFZ","s11SwiftSyntax0B7FactoryO23makeTuplePatternElement9labelName0H5Colon7pattern13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO23makeValueBindingPattern15letOrVarKeyword05valueG0AA0efgB0VAA05TokenB0V_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO23make__FUNCTION__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeAvailabilityArgument5entry13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeAvailabilitySpecListyAA0efgB0VSayAA0e8ArgumentB0VGFZ","s11SwiftSyntax0B7FactoryO24makeBlankCatchClauseListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankCompositionTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankCustomAttributeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankDeclarationStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankEnumCaseElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankEnumCasePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankFallthroughStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankForcedValueExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankGenericArgumentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankInitializerDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankKeyPathBaseExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankMemberDeclBlockAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankObjcKeyPathExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankOptionalPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankParameterClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundAssertStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundColumnExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundFileIDExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankRepeatWhileStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankSwitchCaseLabelAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankWildcardPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeClassRestrictionType12classKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO24makeConditionElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO24makeConstrainedSugarType18someOrAnySpecifier04baseG0AA0efgB0VAA05TokenB0V_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO24makeDeclNameArgumentListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO24makeExclamationMarkToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeGenericParameterListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO24makeMemberTypeIdentifier04baseF06period4name21genericArgumentClauseAA0efgB0VAA0fB0V_AA05TokenB0VAnA07GenericlmB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeOptionalChainingExpr10expression12questionMarkAA0efgB0VAA0gB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO24makePoundFilePathKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePoundFunctionKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePoundSelectorKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePrefixAmpersandToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeSimpleTypeIdentifier4name21genericArgumentClauseAA0efgB0VAA05TokenB0V_AA07GenericjkB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeSpacedBinaryOperator_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO24makeTupleExprElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO24makeTupleTypeElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO25makeAssociatedtypeKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makeAvailabilityCondition21poundAvailableKeyword9leftParen16availabilitySpec05rightK0AA0efB0VAA05TokenB0V_AlA0em4ListB0VALtFZ","s11SwiftSyntax0B7FactoryO25makeBackDeployVersionListyAA0efghB0VSayAA0efg8ArgumentB0VGFZ","s11SwiftSyntax0B7FactoryO25makeBlankArrayElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankClosureParamListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankClosureSignatureAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankConditionElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankDeclNameArgumentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFloatLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFunctionCallExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFunctionDeclNameAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankGenericParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankMemberAccessExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankObjcSelectorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankPostfixUnaryExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankPoundWarningDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankRegexLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankTupleExprElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankTupleTypeElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeDictionaryElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO25makeDiscardAssignmentExpr8wildcardAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO25makeEditorPlaceholderExpr10identifierAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO25makeFunctionParameterListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO25makeGenericArgumentClause16leftAngleBracket9arguments05rightiJ0AA0efgB0VAA05TokenB0V_AA0ef4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO25makePoundAvailableKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makePoundDsohandleKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makePrimaryAssociatedType10attributes4name5colon09inheritedG011initializer13trailingCommaAA0efgB0VAA013AttributeListB0VSg_AA05TokenB0VAQSgAA0gB0VSgAA0g17InitializerClauseB0VSgARtFZ","s11SwiftSyntax0B7FactoryO25makeStringLiteralSegmentsyAA0efgB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO25makeSymbolicReferenceExpr10identifier21genericArgumentClauseAA0efgB0VAA05TokenB0V_AA07GenericjkB0VSgtFZ","s11SwiftSyntax0B7FactoryO25makeTypeInheritanceClause5colon09inheritedE10CollectionAA0efgB0VAA05TokenB0V_AA09Inheritede4ListB0VtFZ","s11SwiftSyntax0B7FactoryO25makeTypeInitializerClause5equal5valueAA0efgB0VAA05TokenB0V_AA0eB0VtFZ","s11SwiftSyntax0B7FactoryO25makeUnresolvedPatternExpr7patternAA0efgB0VAA0fB0V_tFZ","s11SwiftSyntax0B7FactoryO25make__DSO_HANDLE__Keyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeBlankAccessorParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankAvailabilityEntryAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankCodeBlockItemListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDeclNameArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDeinitializerDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDictionaryElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankExpressionPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankExpressionSegmentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankFunctionParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankFunctionSignatureAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankIdentifierPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankInheritedTypeListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankInitializerClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankNonEmptyTokenListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankObjCSelectorPieceAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankObjectLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankPoundFilePathExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankPoundFunctionExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankQualifiedDeclNameAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankStringLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeClosureCaptureItemListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO26makeCompositionTypeElement4type9ampersandAA0efgB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO26makeConformanceRequirement18leftTypeIdentifier5colon05righthI0AA0efB0VAA0hB0V_AA05TokenB0VAKtFZ","s11SwiftSyntax0B7FactoryO26makeDifferentiabilityParam9parameter13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO26makeGenericParameterClause16leftAngleBracket07genericF4List05rightiJ0AA0efgB0VAA05TokenB0V_AA0eflB0VAKtFZ","s11SwiftSyntax0B7FactoryO26makeGenericRequirementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO26makeInfixQuestionMarkToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeLabeledSpecializeEntry5label5colon5value13trailingCommaAA0efgB0VAA05TokenB0V_A3LSgtFZ","s11SwiftSyntax0B7FactoryO26makeLeftSquareBracketToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makePrecedencegroupKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeUnspacedBinaryOperator_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO27makeBlankAssociatedtypeDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankBinaryOperatorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankBooleanLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankClosureCaptureItemAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankElseIfContinuationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankGenericRequirementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankGenericWhereClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankIfConfigClauseListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankIntegerLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankMemberDeclListItemAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPatternBindingListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPoundDsohandleExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPrefixOperatorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankSwitchDefaultLabelAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeClosureCaptureSignature10leftSquare5items05rightI0AA0efgB0VAA05TokenB0V_AA0ef8ItemListB0VSgAKtFZ","s11SwiftSyntax0B7FactoryO27makeDifferentiabilityParams9leftParen04diffF005rightH0AA0efB0VAA05TokenB0V_AA0e9ParamListB0VAKtFZ","s11SwiftSyntax0B7FactoryO27makePoundFileLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makePoundSourceLocationArgs12fileArgLabel0iJ5Colon0I4Name5comma04linejK00ojL00O6NumberAA0efghB0VAA05TokenB0V_A6OtFZ","s11SwiftSyntax0B7FactoryO27makePoundUnavailableKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makePrecedenceGroupNameListyAA0efghB0VSayAA0efg7ElementB0VGFZ","s11SwiftSyntax0B7FactoryO27makePrecedenceGroupRelation017higherThanOrLowerI05colon10otherNamesAA0efgB0VAA05TokenB0V_AkA0ef8NameListB0VtFZ","s11SwiftSyntax0B7FactoryO27makeRightSquareBracketToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makeTuplePatternElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO27makeUnavailabilityCondition23poundUnavailableKeyword9leftParen16availabilitySpec05rightK0AA0efB0VAA05TokenB0V_AlA012Availabilitym4ListB0VALtFZ","s11SwiftSyntax0B7FactoryO28makeBlankAccessLevelModifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankAccessPathComponentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankEnumCaseElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankGenericArgumentListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPostfixIfConfigExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPoundSourceLocationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPrecedenceGroupDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankSameTypeRequirementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankTargetFunctionEntryAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankTuplePatternElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankValueBindingPatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeMatchingPatternCondition11caseKeyword7pattern14typeAnnotation11initializerAA0efgB0VAA05TokenB0V_AA0fB0VAA04TypelB0VSgAA017InitializerClauseB0VtFZ","s11SwiftSyntax0B7FactoryO28makeOptionalBindingCondition15letOrVarKeyword7pattern14typeAnnotation11initializerAA0efgB0VAA05TokenB0V_AA07PatternB0VAA04TypenB0VSgAA017InitializerClauseB0VtFZ","s11SwiftSyntax0B7FactoryO28makePostfixQuestionMarkToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO28makePoundColorLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO28makePoundImageLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO29makeBackDeployVersionArgument012availabilityG11Restriction13trailingCommaAA0efghB0VAA012AvailabilitygjB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO29makeBlankAvailabilityArgumentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankAvailabilitySpecListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankClassRestrictionTypeAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankConditionElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankConstrainedSugarTypeAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankDeclNameArgumentListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankGenericParameterListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankMemberTypeIdentifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankOptionalChainingExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankSimpleTypeIdentifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankTupleExprElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankTupleTypeElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeMultilineStringQuoteToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO29makePrecedenceGroupAssignment17assignmentKeyword5colon4flagAA0efgB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO29makePrimaryAssociatedTypeListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO30makeBlankAvailabilityConditionAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankBackDeployVersionListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankDictionaryElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankDiscardAssignmentExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankEditorPlaceholderExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankFunctionParameterListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankGenericArgumentClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankPrimaryAssociatedTypeAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankStringLiteralSegmentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankSymbolicReferenceExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankTypeInheritanceClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankTypeInitializerClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankUnresolvedPatternExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeCompositionTypeElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO30makeDifferentiabilityParamListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO30makeOperatorPrecedenceAndTypes5colon015precedenceGroupg10DesignatedH0AA0efghB0VAA05TokenB0V_AA014IdentifierListB0VtFZ","s11SwiftSyntax0B7FactoryO30makePoundSourceLocationKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO30makePrecedenceGroupNameElement4name13trailingCommaAA0efghB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO31makeAvailabilityLabeledArgument5label5colon5valueAA0efgB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO31makeBackDeployAttributeSpecList11beforeLabel5colon07versionI0AA0efghiB0VAA05TokenB0V_AkA0ef7VersioniB0VtFZ","s11SwiftSyntax0B7FactoryO31makeBlankClosureCaptureItemListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankCompositionTypeElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankConformanceRequirementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankDifferentiabilityParamAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankGenericParameterClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankGenericRequirementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankLabeledSpecializeEntryAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makePrimaryAssociatedTypeClause16leftAngleBracket07primaryfG4List05rightjK0AA0efghB0VAA05TokenB0V_AA0efgmB0VAKtFZ","s11SwiftSyntax0B7FactoryO31makeSpecializeAttributeSpecListyAA0efghB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO32makeBlankClosureCaptureSignatureAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankDifferentiabilityParamsAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPoundSourceLocationArgsAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPrecedenceGroupNameListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPrecedenceGroupRelationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankTuplePatternElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankUnavailabilityConditionAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO32makeImplementsAttributeArguments4type5comma12declBaseName0jlG0AA0efgB0VAA020SimpleTypeIdentifierB0V_AA05TokenB0VAA0B0VAA04DecllgB0VSgtFZ","s11SwiftSyntax0B7FactoryO32makeNamedAttributeStringArgument7nameTok5colon16stringOrDeclnameAA0efghB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO32makePrecedenceGroupAssociativity20associativityKeyword5colon5valueAA0efgB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO32makePrecedenceGroupAttributeListyAA0efghB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO33makeBlankMatchingPatternConditionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO33makeBlankOptionalBindingConditionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO33makeDifferentiabilityParamsClause8wrtLabel5colon10parametersAA0efgB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO34makeAvailabilityVersionRestriction8platform7versionAA0efgB0VAA05TokenB0V_AA0f5TupleB0VSgtFZ","s11SwiftSyntax0B7FactoryO34makeBlankBackDeployVersionArgumentAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO34makeBlankPrecedenceGroupAssignmentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO34makeBlankPrimaryAssociatedTypeListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO34makeMultipleTrailingClosureElement5label5colon7closureAA0efghB0VAA05TokenB0V_AkA0g4ExprB0VtFZ","s11SwiftSyntax0B7FactoryO34makeStringInterpolationAnchorToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO35makeBlankCompositionTypeElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankDifferentiabilityParamListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankOperatorPrecedenceAndTypesAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankPrecedenceGroupNameElementAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeImplicitlyUnwrappedOptionalType07wrappedH015exclamationMarkAA0efghB0VAA0hB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO36makeBlankAvailabilityLabeledArgumentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO36makeBlankBackDeployAttributeSpecListAA0fghijB0VyFZ","s11SwiftSyntax0B7FactoryO36makeBlankPrimaryAssociatedTypeClauseAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO36makeBlankSpecializeAttributeSpecListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO36makeDifferentiableAttributeArguments8diffKind0hI5Comma0H6Params0hkJ011whereClauseAA0efgB0VAA05TokenB0VSg_AnA017DifferentiabilitykmB0VSgAnA012GenericWheremB0VSgtFZ","s11SwiftSyntax0B7FactoryO37makeBlankImplementsAttributeArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankNamedAttributeStringArgumentAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankPrecedenceGroupAssociativityAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankPrecedenceGroupAttributeListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO38makeBlankDifferentiabilityParamsClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO38makeMultipleTrailingClosureElementListyAA0efghiB0VSayAA0efghB0VGFZ","s11SwiftSyntax0B7FactoryO39makeBlankAvailabilityVersionRestrictionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO39makeBlankMultipleTrailingClosureElementAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO40makeBlankImplicitlyUnwrappedOptionalTypeAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO41makeBlankDifferentiableAttributeArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO43makeBlankMultipleTrailingClosureElementListAA0fghijB0VyFZ","s11SwiftSyntax0B7FactoryO44makeDerivativeRegistrationAttributeArguments7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsAA0efghB0VAA05TokenB0V_AoA09QualifiedmnB0VAOSgA2rA017Differentiabilityt6ClauseB0VSgtFZ","s11SwiftSyntax0B7FactoryO49makeBlankDerivativeRegistrationAttributeArgumentsAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO9makeToken_8presence13leadingTrivia08trailingH0AA0eB0VAA0E4KindO_AA14SourcePresenceOAA0H0VAOtFZ","s11SwiftSyntax0B8VerifierC6verifyyyAA0B0VKFZ","s11SwiftSyntax6TriviaV11garbageTextyACSSFZ","s11SwiftSyntax6TriviaV11lineCommentyACSSFZ","s11SwiftSyntax6TriviaV12blockCommentyACSSFZ","s11SwiftSyntax6TriviaV12verticalTabsyACSiFZ","s11SwiftSyntax6TriviaV14docLineCommentyACSSFZ","s11SwiftSyntax6TriviaV15carriageReturnsyACSiFZ","s11SwiftSyntax6TriviaV15docBlockCommentyACSSFZ","s11SwiftSyntax6TriviaV23carriageReturnLineFeedsyACSiFZ","s11SwiftSyntax6TriviaV4tabsyACSiFZ","s11SwiftSyntax6TriviaV6spacesyACSiFZ","s11SwiftSyntax6TriviaV8newlinesyACSiFZ","s11SwiftSyntax6TriviaV9formfeedsyACSiFZ","s11SwiftSyntax010AccessPathB0V10prependingyAcA0cd9ComponentB0VF","s11SwiftSyntax010AccessPathB0V12makeIteratorAC0F0VyF","s11SwiftSyntax010AccessPathB0V12removingLastACyF","s11SwiftSyntax010AccessPathB0V13removingFirstACyF","s11SwiftSyntax010AccessPathB0V13withoutTriviaACyF","s11SwiftSyntax010AccessPathB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax010AccessPathB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax010AccessPathB0V20withoutLeadingTriviaACyF","s11SwiftSyntax010AccessPathB0V21withoutTrailingTriviaACyF","s11SwiftSyntax010AccessPathB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax010AccessPathB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax010AccessPathB0V8IteratorV4nextAA0cd9ComponentB0VSgyF","s11SwiftSyntax010AccessPathB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax010AccessPathB0V8removing7childAtACSi_tF","s11SwiftSyntax010AccessPathB0V9appendingyAcA0cd9ComponentB0VF","s11SwiftSyntax010AccessPathB0V9inserting_2atAcA0cd9ComponentB0V_SitF","s11SwiftSyntax010AccessPathB0V9replacing7childAt4withACSi_AA0cd9ComponentB0VtF","s11SwiftSyntax010ImportDeclB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax010ImportDeclB0V04withC4KindyAcA05TokenB0VSgF","s11SwiftSyntax010ImportDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax010ImportDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax010ImportDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax010ImportDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax010ImportDeclB0V16addPathComponentyAcA06AccessfgB0VF","s11SwiftSyntax010ImportDeclB0V8withPathyAcA06AccessfB0VSgF","s11SwiftSyntax010ImportDeclB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax010ImportDeclB7BuilderV03useC4KindyyAA05TokenB0VF","s11SwiftSyntax010ImportDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax010ImportDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax010ImportDeclB7BuilderV16addPathComponentyyAA06AccessghB0VF","s11SwiftSyntax010ReturnStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010ReturnStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax010ReturnStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010ReturnStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax010SourceFileB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax010SourceFileB0V12withEOFTokenyAcA05TokenB0VSgF","s11SwiftSyntax010SourceFileB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax010SourceFileB7BuilderV11useEOFTokenyyAA05TokenB0VF","s11SwiftSyntax010SourceFileB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax010StructDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010StructDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax010StructDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax010StructDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax010StructDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax010StructDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax010StructDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax010StructDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax010StructDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax010StructDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax010StructDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010StructDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax010StructDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax010StructDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax010StructDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax010StructDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax010StructDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax010StructDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax010SwitchCaseB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax010SwitchCaseB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax010SwitchCaseB0V15withUnknownAttryAcA09AttributeB0VSgF","s11SwiftSyntax010SwitchCaseB0V9withLabelyAcA0B0VSgF","s11SwiftSyntax010SwitchCaseB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax010SwitchCaseB7BuilderV14useUnknownAttryyAA09AttributeB0VF","s11SwiftSyntax010SwitchCaseB7BuilderV8useLabelyyAA0B0VF","s11SwiftSyntax010SwitchStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V7addCaseyAcA0B0VF","s11SwiftSyntax010SwitchStmtB0V9withCasesyAcA0c8CaseListB0VSgF","s11SwiftSyntax010SwitchStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV7addCaseyyAA0B0VF","s11SwiftSyntax011CatchClauseB0V03addC4ItemyAcA0cfB0VF","s11SwiftSyntax011CatchClauseB0V04withC5ItemsyAcA0c8ItemListB0VSgF","s11SwiftSyntax011CatchClauseB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax011CatchClauseB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax011CatchClauseB7BuilderV03addC4ItemyyAA0cgB0VF","s11SwiftSyntax011CatchClauseB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax011CatchClauseB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax011ClosureExprB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax011ClosureExprB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax011ClosureExprB0V13withSignatureyAcA0cfB0VSgF","s11SwiftSyntax011ClosureExprB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax011ClosureExprB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax011ClosureExprB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax011ClosureExprB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax011ClosureExprB7BuilderV12useSignatureyyAA0cgB0VF","s11SwiftSyntax011ClosureExprB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax011KeyPathExprB0V08withRootE0yAcA0eB0VSgF","s11SwiftSyntax011KeyPathExprB0V13withBackslashyAcA05TokenB0VSgF","s11SwiftSyntax011KeyPathExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax011KeyPathExprB7BuilderV07useRootE0yyAA0eB0VF","s11SwiftSyntax011KeyPathExprB7BuilderV12useBackslashyyAA05TokenB0VF","s11SwiftSyntax011KeyPathExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax011TernaryExprB0V13withColonMarkyAcA05TokenB0VSgF","s11SwiftSyntax011TernaryExprB0V15withFirstChoiceyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax011TernaryExprB0V16withSecondChoiceyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB0V23withConditionExpressionyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB7BuilderV12useColonMarkyyAA05TokenB0VF","s11SwiftSyntax011TernaryExprB7BuilderV14useFirstChoiceyyAA0dB0VF","s11SwiftSyntax011TernaryExprB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax011TernaryExprB7BuilderV15useSecondChoiceyyAA0dB0VF","s11SwiftSyntax011TernaryExprB7BuilderV22useConditionExpressionyyAA0dB0VF","s11SwiftSyntax011WhereClauseB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax011WhereClauseB0V15withGuardResultyAcA04ExprB0VSgF","s11SwiftSyntax011WhereClauseB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax011WhereClauseB7BuilderV14useGuardResultyyAA04ExprB0VF","s11SwiftSyntax012AccessorDeclB0V04withC4KindyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012AccessorDeclB0V12withModifieryAcA0dfB0VSgF","s11SwiftSyntax012AccessorDeclB0V13withParameteryAcA0cfB0VSgF","s11SwiftSyntax012AccessorDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012AccessorDeclB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V17withThrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax012AccessorDeclB7BuilderV03useC4KindyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV11useModifieryyAA0dgB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012AccessorDeclB7BuilderV12useParameteryyAA0cgB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV16useThrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax012AccessorListB0V10prependingyAcA0c4DeclB0VF","s11SwiftSyntax012AccessorListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012AccessorListB0V12removingLastACyF","s11SwiftSyntax012AccessorListB0V13removingFirstACyF","s11SwiftSyntax012AccessorListB0V13withoutTriviaACyF","s11SwiftSyntax012AccessorListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012AccessorListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012AccessorListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012AccessorListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012AccessorListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012AccessorListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012AccessorListB0V8IteratorV4nextAA0c4DeclB0VSgyF","s11SwiftSyntax012AccessorListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012AccessorListB0V8removing7childAtACSi_tF","s11SwiftSyntax012AccessorListB0V9appendingyAcA0c4DeclB0VF","s11SwiftSyntax012AccessorListB0V9inserting_2atAcA0c4DeclB0V_SitF","s11SwiftSyntax012AccessorListB0V9replacing7childAt4withACSi_AA0c4DeclB0VtF","s11SwiftSyntax012ArrayElementB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax012ArrayElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax012ArrayElementB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax012ArrayElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax012CaseItemListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax012CaseItemListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax012CaseItemListB0V12removingLastACyF","s11SwiftSyntax012CaseItemListB0V13removingFirstACyF","s11SwiftSyntax012CaseItemListB0V13withoutTriviaACyF","s11SwiftSyntax012CaseItemListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax012CaseItemListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax012CaseItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012CaseItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012CaseItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012CaseItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012CaseItemListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax012CaseItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012CaseItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax012CaseItemListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax012CaseItemListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax012CaseItemListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax012ClosureParamB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax012ClosureParamB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax012ClosureParamB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax012ClosureParamB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax012ContinueStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012ContinueStmtB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax012ContinueStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012ContinueStmtB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB0V10withDetailyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V19withDetailLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V20withDetailRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB7BuilderV18useDetailLeftParenyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV19useDetailRightParenyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV9useDetailyyAA05TokenB0VF","s11SwiftSyntax012EnumCaseDeclB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V10addElementyAcA0cdgB0VF","s11SwiftSyntax012EnumCaseDeclB0V11addModifieryAcA0egB0VF","s11SwiftSyntax012EnumCaseDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012EnumCaseDeclB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012EnumCaseDeclB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV10addElementyyAA0cdhB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV11addModifieryyAA0ehB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012FunctionDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012FunctionDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012FunctionDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012FunctionDeclB0V13withSignatureyAcA0cfB0VSgF","s11SwiftSyntax012FunctionDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012FunctionDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012FunctionDeclB0V15withFuncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax012FunctionDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax012FunctionDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax012FunctionDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012FunctionDeclB7BuilderV12useSignatureyyAA0cgB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV14useFuncKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax012FunctionTypeB0V010withReturnD0yAcA0dB0VSgF","s11SwiftSyntax012FunctionTypeB0V11addArgumentyAcA05Tupled7ElementB0VF","s11SwiftSyntax012FunctionTypeB0V13withArgumentsyAcA05Tupled11ElementListB0VSgF","s11SwiftSyntax012FunctionTypeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V9withArrowyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB7BuilderV09useReturnD0yyAA0dB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV11addArgumentyyAA05Tupled7ElementB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV8useArrowyyAA05TokenB0VF","s11SwiftSyntax012IfConfigDeclB0V11withClausesyAcA0cd10ClauseListB0VSgF","s11SwiftSyntax012IfConfigDeclB0V14withPoundEndifyAcA05TokenB0VSgF","s11SwiftSyntax012IfConfigDeclB0V9addClauseyAcA0cdgB0VF","s11SwiftSyntax012IfConfigDeclB7BuilderV13usePoundEndifyyAA05TokenB0VF","s11SwiftSyntax012IfConfigDeclB7BuilderV9addClauseyyAA0cdhB0VF","s11SwiftSyntax012MetatypeTypeB0V04withD10OrProtocolyAcA05TokenB0VSgF","s11SwiftSyntax012MetatypeTypeB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax012MetatypeTypeB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax012MetatypeTypeB7BuilderV03useD10OrProtocolyyAA05TokenB0VF","s11SwiftSyntax012MetatypeTypeB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax012MetatypeTypeB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax012ModifierListB0V10prependingyAcA04DeclcB0VF","s11SwiftSyntax012ModifierListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012ModifierListB0V12removingLastACyF","s11SwiftSyntax012ModifierListB0V13removingFirstACyF","s11SwiftSyntax012ModifierListB0V13withoutTriviaACyF","s11SwiftSyntax012ModifierListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012ModifierListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012ModifierListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012ModifierListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012ModifierListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ModifierListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ModifierListB0V8IteratorV4nextAA04DeclcB0VSgyF","s11SwiftSyntax012ModifierListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012ModifierListB0V8removing7childAtACSi_tF","s11SwiftSyntax012ModifierListB0V9appendingyAcA04DeclcB0VF","s11SwiftSyntax012ModifierListB0V9inserting_2atAcA04DeclcB0V_SitF","s11SwiftSyntax012ModifierListB0V9replacing7childAt4withACSi_AA04DeclcB0VtF","s11SwiftSyntax012ObjCSelectorB0V10prependingyAcA0cd5PieceB0VF","s11SwiftSyntax012ObjCSelectorB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012ObjCSelectorB0V12removingLastACyF","s11SwiftSyntax012ObjCSelectorB0V13removingFirstACyF","s11SwiftSyntax012ObjCSelectorB0V13withoutTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012ObjCSelectorB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012ObjCSelectorB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ObjCSelectorB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ObjCSelectorB0V8IteratorV4nextAA0cd5PieceB0VSgyF","s11SwiftSyntax012ObjCSelectorB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012ObjCSelectorB0V8removing7childAtACSi_tF","s11SwiftSyntax012ObjCSelectorB0V9appendingyAcA0cd5PieceB0VF","s11SwiftSyntax012ObjCSelectorB0V9inserting_2atAcA0cd5PieceB0V_SitF","s11SwiftSyntax012ObjCSelectorB0V9replacing7childAt4withACSi_AA0cd5PieceB0VtF","s11SwiftSyntax012OperatorDeclB0V04withC18PrecedenceAndTypesyAcA0cfghB0VSgF","s11SwiftSyntax012OperatorDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012OperatorDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012OperatorDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012OperatorDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012OperatorDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012OperatorDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012OperatorDeclB7BuilderV03useC18PrecedenceAndTypesyyAA0cghiB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012OperatorDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012OptionalTypeB0V011withWrappedD0yAcA0dB0VSgF","s11SwiftSyntax012OptionalTypeB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax012OptionalTypeB7BuilderV010useWrappedD0yyAA0dB0VF","s11SwiftSyntax012OptionalTypeB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012ProtocolDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012ProtocolDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax012ProtocolDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012ProtocolDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012ProtocolDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012ProtocolDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012ProtocolDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax012ProtocolDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax012ProtocolDeclB0V31withPrimaryAssociatedTypeClauseyAcA0fghiB0VSgF","s11SwiftSyntax012ProtocolDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV30usePrimaryAssociatedTypeClauseyyAA0ghijB0VF","s11SwiftSyntax012ReturnClauseB0V04withC4TypeyAcA0fB0VSgF","s11SwiftSyntax012ReturnClauseB0V9withArrowyAcA05TokenB0VSgF","s11SwiftSyntax012ReturnClauseB7BuilderV03useC4TypeyyAA0gB0VF","s11SwiftSyntax012ReturnClauseB7BuilderV8useArrowyyAA05TokenB0VF","s11SwiftSyntax012SequenceExprB0V10addElementyAcA0dB0VF","s11SwiftSyntax012SequenceExprB0V12withElementsyAcA0d4ListB0VSgF","s11SwiftSyntax012SequenceExprB7BuilderV10addElementyyAA0dB0VF","s11SwiftSyntax012SuperRefExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012SuperRefExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012TuplePatternB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax012TuplePatternB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax012TuplePatternB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012TuplePatternB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012TuplePatternB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax012TuplePatternB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax012TuplePatternB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax012VariableDeclB0V10addBindingyAcA07PatternfB0VF","s11SwiftSyntax012VariableDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012VariableDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012VariableDeclB0V12withBindingsyAcA018PatternBindingListB0VSgF","s11SwiftSyntax012VariableDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012VariableDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012VariableDeclB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012VariableDeclB7BuilderV10addBindingyyAA07PatterngB0VF","s11SwiftSyntax012VariableDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012VariableDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012VariableDeclB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax012VersionTupleB0V09withPatchC0yAcA05TokenB0VSgF","s11SwiftSyntax012VersionTupleB0V14withMajorMinoryAcA0B0VSgF","s11SwiftSyntax012VersionTupleB0V15withPatchPeriodyAcA05TokenB0VSgF","s11SwiftSyntax012VersionTupleB7BuilderV08usePatchC0yyAA05TokenB0VF","s11SwiftSyntax012VersionTupleB7BuilderV13useMajorMinoryyAA0B0VF","s11SwiftSyntax012VersionTupleB7BuilderV14usePatchPeriodyyAA05TokenB0VF","s11SwiftSyntax013AccessorBlockB0V03addC0yAcA0c4DeclB0VF","s11SwiftSyntax013AccessorBlockB0V13withAccessorsyAcA0c4ListB0VSgF","s11SwiftSyntax013AccessorBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax013AccessorBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax013AccessorBlockB7BuilderV03addC0yyAA0c4DeclB0VF","s11SwiftSyntax013AccessorBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax013AccessorBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax013AsTypePatternB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013AsTypePatternB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax013AsTypePatternB0V04withE0yAcA0eB0VSgF","s11SwiftSyntax013AsTypePatternB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013AsTypePatternB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax013AsTypePatternB7BuilderV03useE0yyAA0eB0VF","s11SwiftSyntax013AttributeListB0V10prependingyAcA0B0VF","s11SwiftSyntax013AttributeListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax013AttributeListB0V12removingLastACyF","s11SwiftSyntax013AttributeListB0V13removingFirstACyF","s11SwiftSyntax013AttributeListB0V13withoutTriviaACyF","s11SwiftSyntax013AttributeListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax013AttributeListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax013AttributeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax013AttributeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax013AttributeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013AttributeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013AttributeListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax013AttributeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax013AttributeListB0V8removing7childAtACSi_tF","s11SwiftSyntax013AttributeListB0V9appendingyAcA0B0VF","s11SwiftSyntax013AttributeListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax013AttributeListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax013CatchItemListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax013CatchItemListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax013CatchItemListB0V12removingLastACyF","s11SwiftSyntax013CatchItemListB0V13removingFirstACyF","s11SwiftSyntax013CatchItemListB0V13withoutTriviaACyF","s11SwiftSyntax013CatchItemListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax013CatchItemListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax013CatchItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax013CatchItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax013CatchItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013CatchItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013CatchItemListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax013CatchItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax013CatchItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax013CatchItemListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax013CatchItemListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax013CatchItemListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax013CodeBlockItemB0V04withE0yAcA0B0VSgF","s11SwiftSyntax013CodeBlockItemB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax013CodeBlockItemB0V15withErrorTokensyAcA0B0VSgF","s11SwiftSyntax013CodeBlockItemB7BuilderV03useE0yyAA0B0VF","s11SwiftSyntax013CodeBlockItemB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax013CodeBlockItemB7BuilderV14useErrorTokensyyAA0B0VF","s11SwiftSyntax013ExtensionDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013ExtensionDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013ExtensionDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax013ExtensionDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013ExtensionDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013ExtensionDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013ExtensionDeclB0V16withExtendedTypeyAcA0gB0VSgF","s11SwiftSyntax013ExtensionDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax013ExtensionDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013ExtensionDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV15useExtendedTypeyyAA0hB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013InheritedTypeB0V04withD4NameyAcA0dB0VSgF","s11SwiftSyntax013InheritedTypeB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax013InheritedTypeB7BuilderV03useD4NameyyAA0dB0VF","s11SwiftSyntax013InheritedTypeB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax013IsTypePatternB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013IsTypePatternB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax013IsTypePatternB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013IsTypePatternB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax013ObjcNamePieceB0V04withD0yAcA05TokenB0VSgF","s11SwiftSyntax013ObjcNamePieceB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax013ObjcNamePieceB7BuilderV03useD0yyAA05TokenB0VF","s11SwiftSyntax013ObjcNamePieceB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax013ParenthesizedB0P13withLeftParenyxAA05TokenB0VSgF","s11SwiftSyntax013ParenthesizedB0P14withRightParenyxAA05TokenB0VSgF","s11SwiftSyntax013PoundFileExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax013PoundFileExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax013PoundLineExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax013PoundLineExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax013StringSegmentB0V11withContentyAcA05TokenB0VSgF","s11SwiftSyntax013StringSegmentB7BuilderV10useContentyyAA05TokenB0VF","s11SwiftSyntax013SubscriptDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptDeclB0V10withResultyAcA012ReturnClauseB0VSgF","s11SwiftSyntax013SubscriptDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013SubscriptDeclB0V11withIndicesyAcA015ParameterClauseB0VSgF","s11SwiftSyntax013SubscriptDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013SubscriptDeclB0V12withAccessoryAcA0B0VSgF","s11SwiftSyntax013SubscriptDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013SubscriptDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013SubscriptDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013SubscriptDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax013SubscriptDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV10useIndicesyyAA015ParameterClauseB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV11useAccessoryyAA0B0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV9useResultyyAA012ReturnClauseB0VF","s11SwiftSyntax013SubscriptExprB0V11addArgumentyAcA05Tupled7ElementB0VF","s11SwiftSyntax013SubscriptExprB0V15withLeftBracketyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptExprB0V16withArgumentListyAcA05Tupled7ElementgB0VSgF","s11SwiftSyntax013SubscriptExprB0V16withRightBracketyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptExprB0V19withTrailingClosureyAcA0gdB0VSgF","s11SwiftSyntax013SubscriptExprB0V20withCalledExpressionyAcA0dB0VSgF","s11SwiftSyntax013SubscriptExprB0V28addAdditionalTrailingClosureyAcA08Multiplegh7ElementB0VF","s11SwiftSyntax013SubscriptExprB0V30withAdditionalTrailingClosuresyAcA08Multipleg18ClosureElementListB0VSgF","s11SwiftSyntax013SubscriptExprB7BuilderV11addArgumentyyAA05Tupled7ElementB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV14useLeftBracketyyAA05TokenB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV15useRightBracketyyAA05TokenB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV18useTrailingClosureyyAA0hdB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV19useCalledExpressionyyAA0dB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV28addAdditionalTrailingClosureyyAA08Multiplehi7ElementB0VF","s11SwiftSyntax013TypealiasDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013TypealiasDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013TypealiasDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013TypealiasDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013TypealiasDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013TypealiasDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax013TypealiasDeclB0V15withInitializeryAcA04Typef6ClauseB0VSgF","s11SwiftSyntax013TypealiasDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013TypealiasDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax013TypealiasDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV14useInitializeryyAA04Typeg6ClauseB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax013WithCodeBlockB0P8withBodyyxAA0deB0VSgF","s11SwiftSyntax014AssignmentExprB0V15withAssignTokenyAcA0gB0VSgF","s11SwiftSyntax014AssignmentExprB7BuilderV14useAssignTokenyyAA0hB0VF","s11SwiftSyntax014AttributedTypeB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax014AttributedTypeB0V12addAttributeyAcA0B0VF","s11SwiftSyntax014AttributedTypeB0V13withSpecifieryAcA05TokenB0VSgF","s11SwiftSyntax014AttributedTypeB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax014AttributedTypeB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax014AttributedTypeB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax014AttributedTypeB7BuilderV12useSpecifieryyAA05TokenB0VF","s11SwiftSyntax014DictionaryExprB0V11withContentyAcA0B0VSgF","s11SwiftSyntax014DictionaryExprB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryExprB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryExprB7BuilderV10useContentyyAA0B0VF","s11SwiftSyntax014DictionaryExprB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax014DictionaryExprB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB0V07withKeyD0yAcA0dB0VSgF","s11SwiftSyntax014DictionaryTypeB0V09withValueD0yAcA0dB0VSgF","s11SwiftSyntax014DictionaryTypeB0V21withLeftSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB0V22withRightSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB7BuilderV06useKeyD0yyAA0dB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV08useValueD0yyAA0dB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV20useLeftSquareBracketyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV21useRightSquareBracketyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax014ExpressionStmtB0V04withC0yAcA04ExprB0VSgF","s11SwiftSyntax014ExpressionStmtB7BuilderV03useC0yyAA04ExprB0VF","s11SwiftSyntax014IdentifiedDeclB0P14withIdentifieryxAA05TokenB0VSgF","s11SwiftSyntax014IdentifierExprB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax014IdentifierExprB0V21withDeclNameArgumentsyAcA0fghB0VSgF","s11SwiftSyntax014IdentifierExprB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax014IdentifierExprB7BuilderV20useDeclNameArgumentsyyAA0ghiB0VF","s11SwiftSyntax014IdentifierListB0V10prependingyAcA05TokenB0VF","s11SwiftSyntax014IdentifierListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax014IdentifierListB0V12removingLastACyF","s11SwiftSyntax014IdentifierListB0V13removingFirstACyF","s11SwiftSyntax014IdentifierListB0V13withoutTriviaACyF","s11SwiftSyntax014IdentifierListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax014IdentifierListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax014IdentifierListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014IdentifierListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014IdentifierListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014IdentifierListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014IdentifierListB0V8IteratorV4nextAA05TokenB0VSgyF","s11SwiftSyntax014IdentifierListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014IdentifierListB0V8removing7childAtACSi_tF","s11SwiftSyntax014IdentifierListB0V9appendingyAcA05TokenB0VF","s11SwiftSyntax014IdentifierListB0V9inserting_2atAcA05TokenB0V_SitF","s11SwiftSyntax014IdentifierListB0V9replacing7childAt4withACSi_AA05TokenB0VtF","s11SwiftSyntax014IfConfigClauseB0V12withElementsyAcA0B0VSgF","s11SwiftSyntax014IfConfigClauseB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax014IfConfigClauseB0V16withPoundKeywordyAcA05TokenB0VSgF","s11SwiftSyntax014IfConfigClauseB7BuilderV11useElementsyyAA0B0VF","s11SwiftSyntax014IfConfigClauseB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax014IfConfigClauseB7BuilderV15usePoundKeywordyyAA05TokenB0VF","s11SwiftSyntax014MemberDeclListB0V10prependingyAcA0cde4ItemB0VF","s11SwiftSyntax014MemberDeclListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax014MemberDeclListB0V12removingLastACyF","s11SwiftSyntax014MemberDeclListB0V13removingFirstACyF","s11SwiftSyntax014MemberDeclListB0V13withoutTriviaACyF","s11SwiftSyntax014MemberDeclListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax014MemberDeclListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax014MemberDeclListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014MemberDeclListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014MemberDeclListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014MemberDeclListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014MemberDeclListB0V8IteratorV4nextAA0cde4ItemB0VSgyF","s11SwiftSyntax014MemberDeclListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014MemberDeclListB0V8removing7childAtACSi_tF","s11SwiftSyntax014MemberDeclListB0V9appendingyAcA0cde4ItemB0VF","s11SwiftSyntax014MemberDeclListB0V9inserting_2atAcA0cde4ItemB0V_SitF","s11SwiftSyntax014MemberDeclListB0V9replacing7childAt4withACSi_AA0cde4ItemB0VtF","s11SwiftSyntax014NilLiteralExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax014NilLiteralExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax014PatternBindingB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax014PatternBindingB0V12withAccessoryAcA0B0VSgF","s11SwiftSyntax014PatternBindingB0V15withInitializeryAcA0f6ClauseB0VSgF","s11SwiftSyntax014PatternBindingB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax014PatternBindingB0V18withTypeAnnotationyAcA0fgB0VSgF","s11SwiftSyntax014PatternBindingB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax014PatternBindingB7BuilderV11useAccessoryyAA0B0VF","s11SwiftSyntax014PatternBindingB7BuilderV14useInitializeryyAA0g6ClauseB0VF","s11SwiftSyntax014PatternBindingB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax014PatternBindingB7BuilderV17useTypeAnnotationyyAA0ghB0VF","s11SwiftSyntax014PoundErrorDeclB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V11withMessageyAcA017StringLiteralExprB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV10useMessageyyAA017StringLiteralExprB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax014SpecializeExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax014SpecializeExprB0V25withGenericArgumentClauseyAcA0fghB0VSgF","s11SwiftSyntax014SpecializeExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax014SpecializeExprB7BuilderV24useGenericArgumentClauseyyAA0ghiB0VF","s11SwiftSyntax014SwitchCaseListB0V10prependingyAcA0B0VF","s11SwiftSyntax014SwitchCaseListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax014SwitchCaseListB0V12removingLastACyF","s11SwiftSyntax014SwitchCaseListB0V13removingFirstACyF","s11SwiftSyntax014SwitchCaseListB0V13withoutTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax014SwitchCaseListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax014SwitchCaseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014SwitchCaseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014SwitchCaseListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax014SwitchCaseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014SwitchCaseListB0V8removing7childAtACSi_tF","s11SwiftSyntax014SwitchCaseListB0V9appendingyAcA0B0VF","s11SwiftSyntax014SwitchCaseListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax014SwitchCaseListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax014TypeAnnotationB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax014TypeAnnotationB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax014TypeAnnotationB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax014TypeAnnotationB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax014WithStatementsB0P04withD0yxAA017CodeBlockItemListB0VSgF","s11SwiftSyntax015CatchClauseListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax015CatchClauseListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax015CatchClauseListB0V12removingLastACyF","s11SwiftSyntax015CatchClauseListB0V13removingFirstACyF","s11SwiftSyntax015CatchClauseListB0V13withoutTriviaACyF","s11SwiftSyntax015CatchClauseListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax015CatchClauseListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax015CatchClauseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax015CatchClauseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax015CatchClauseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax015CatchClauseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax015CatchClauseListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax015CatchClauseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax015CatchClauseListB0V8removing7childAtACSi_tF","s11SwiftSyntax015CatchClauseListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax015CatchClauseListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax015CatchClauseListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax015CompositionTypeB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax015CompositionTypeB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax015CompositionTypeB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax015CustomAttributeB0V04withD4NameyAcA04TypeB0VSgF","s11SwiftSyntax015CustomAttributeB0V11addArgumentyAcA016TupleExprElementB0VF","s11SwiftSyntax015CustomAttributeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015CustomAttributeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015CustomAttributeB0V15withAtSignTokenyAcA0hB0VSgF","s11SwiftSyntax015CustomAttributeB0V16withArgumentListyAcA016TupleExprElementgB0VSgF","s11SwiftSyntax015CustomAttributeB7BuilderV03useD4NameyyAA04TypeB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV11addArgumentyyAA016TupleExprElementB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV14useAtSignTokenyyAA0iB0VF","s11SwiftSyntax015DeclarationStmtB0V04withC0yAcA04DeclB0VSgF","s11SwiftSyntax015DeclarationStmtB7BuilderV03useC0yyAA04DeclB0VF","s11SwiftSyntax015EnumCaseElementB0V12withRawValueyAcA017InitializerClauseB0VSgF","s11SwiftSyntax015EnumCaseElementB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax015EnumCaseElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax015EnumCaseElementB0V19withAssociatedValueyAcA015ParameterClauseB0VSgF","s11SwiftSyntax015EnumCaseElementB7BuilderV11useRawValueyyAA017InitializerClauseB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV18useAssociatedValueyyAA015ParameterClauseB0VF","s11SwiftSyntax015EnumCasePatternB0V04withD4NameyAcA05TokenB0VSgF","s11SwiftSyntax015EnumCasePatternB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax015EnumCasePatternB0V19withAssociatedTupleyAcA0heB0VSgF","s11SwiftSyntax015EnumCasePatternB0V8withTypeyAcA0gB0VSgF","s11SwiftSyntax015EnumCasePatternB7BuilderV03useD4NameyyAA05TokenB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV18useAssociatedTupleyyAA0ieB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV7useTypeyyAA0hB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax015FallthroughStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015FallthroughStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax015ForcedValueExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax015ForcedValueExprB0V19withExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax015ForcedValueExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax015ForcedValueExprB7BuilderV18useExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax015GenericArgumentB0V04withD4TypeyAcA0fB0VSgF","s11SwiftSyntax015GenericArgumentB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax015GenericArgumentB7BuilderV03useD4TypeyyAA0gB0VF","s11SwiftSyntax015GenericArgumentB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax015InitializerDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax015InitializerDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax015InitializerDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax015InitializerDeclB0V14withParametersyAcA015ParameterClauseB0VSgF","s11SwiftSyntax015InitializerDeclB0V15withInitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V16withOptionalMarkyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax015InitializerDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax015InitializerDeclB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax015InitializerDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax015InitializerDeclB7BuilderV13useParametersyyAA015ParameterClauseB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV14useInitKeywordyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV15useOptionalMarkyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax015KeyPathBaseExprB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax015KeyPathBaseExprB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax015MemberDeclBlockB0V03addC0yAcA0cd8ListItemB0VF","s11SwiftSyntax015MemberDeclBlockB0V11withMembersyAcA0cd4ListB0VSgF","s11SwiftSyntax015MemberDeclBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax015MemberDeclBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax015MemberDeclBlockB7BuilderV03addC0yyAA0cd8ListItemB0VF","s11SwiftSyntax015MemberDeclBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax015MemberDeclBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB0V04withdE0yAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V12addNamePieceyAcA0chiB0VF","s11SwiftSyntax015ObjcKeyPathExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V8withNameyAcA0chB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV03usedE0yyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV12addNamePieceyyAA0cijB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015OptionalPatternB0V07withSubD0yAcA0dB0VSgF","s11SwiftSyntax015OptionalPatternB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax015OptionalPatternB7BuilderV06useSubD0yyAA0dB0VF","s11SwiftSyntax015OptionalPatternB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax015ParameterClauseB0V03addC0yAcA08FunctioncB0VF","s11SwiftSyntax015ParameterClauseB0V04withC4ListyAcA08FunctioncfB0VSgF","s11SwiftSyntax015ParameterClauseB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015ParameterClauseB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015ParameterClauseB7BuilderV03addC0yyAA08FunctioncB0VF","s11SwiftSyntax015ParameterClauseB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015ParameterClauseB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V11withMessageyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV10useMessageyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax015PoundColumnExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax015PoundColumnExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax015PoundFileIDExprB0V04withcD2IDyAcA05TokenB0VSgF","s11SwiftSyntax015PoundFileIDExprB7BuilderV03usecD2IDyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax015SwitchCaseLabelB0V03addD4ItemyAcA0dgB0VF","s11SwiftSyntax015SwitchCaseLabelB0V04withD5ItemsyAcA0d8ItemListB0VSgF","s11SwiftSyntax015SwitchCaseLabelB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015SwitchCaseLabelB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV03addD4ItemyyAA0dhB0VF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax015WildcardPatternB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax015WildcardPatternB0V18withTypeAnnotationyAcA0fgB0VSgF","s11SwiftSyntax015WildcardPatternB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax015WildcardPatternB7BuilderV17useTypeAnnotationyyAA0ghB0VF","s11SwiftSyntax016ArrayElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax016ArrayElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax016ArrayElementListB0V12removingLastACyF","s11SwiftSyntax016ArrayElementListB0V13removingFirstACyF","s11SwiftSyntax016ArrayElementListB0V13withoutTriviaACyF","s11SwiftSyntax016ArrayElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax016ArrayElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax016ArrayElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax016ArrayElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax016ArrayElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ArrayElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ArrayElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax016ArrayElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax016ArrayElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax016ArrayElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax016ArrayElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax016ArrayElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax016ClosureParamListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax016ClosureParamListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax016ClosureParamListB0V12removingLastACyF","s11SwiftSyntax016ClosureParamListB0V13removingFirstACyF","s11SwiftSyntax016ClosureParamListB0V13withoutTriviaACyF","s11SwiftSyntax016ClosureParamListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax016ClosureParamListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax016ClosureParamListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax016ClosureParamListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax016ClosureParamListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ClosureParamListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ClosureParamListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax016ClosureParamListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax016ClosureParamListB0V8removing7childAtACSi_tF","s11SwiftSyntax016ClosureParamListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax016ClosureParamListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax016ClosureParamListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax016ClosureSignatureB0V10withOutputyAcA012ReturnClauseB0VSgF","s11SwiftSyntax016ClosureSignatureB0V11withCaptureyAcA0cfdB0VSgF","s11SwiftSyntax016ClosureSignatureB0V12addAttributeyAcA0B0VF","s11SwiftSyntax016ClosureSignatureB0V13withThrowsTokyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax016ClosureSignatureB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V9withInTokyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V9withInputyAcA0B0VSgF","s11SwiftSyntax016ClosureSignatureB7BuilderV10useCaptureyyAA0cgdB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV12useThrowsTokyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV8useInTokyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV8useInputyyAA0B0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV9useOutputyyAA012ReturnClauseB0VF","s11SwiftSyntax016ConditionElementB0V04withC0yAcA0B0VSgF","s11SwiftSyntax016ConditionElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016ConditionElementB7BuilderV03useC0yyAA0B0VF","s11SwiftSyntax016ConditionElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016DeclNameArgumentB0V04withD0yAcA05TokenB0VSgF","s11SwiftSyntax016DeclNameArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016DeclNameArgumentB7BuilderV03useD0yyAA05TokenB0VF","s11SwiftSyntax016DeclNameArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016FloatLiteralExprB0V18withFloatingDigitsyAcA05TokenB0VSgF","s11SwiftSyntax016FloatLiteralExprB7BuilderV17useFloatingDigitsyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB0V11addArgumentyAcA05Tuplee7ElementB0VF","s11SwiftSyntax016FunctionCallExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016FunctionCallExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016FunctionCallExprB0V16withArgumentListyAcA05Tuplee7ElementhB0VSgF","s11SwiftSyntax016FunctionCallExprB0V19withTrailingClosureyAcA0heB0VSgF","s11SwiftSyntax016FunctionCallExprB0V20withCalledExpressionyAcA0eB0VSgF","s11SwiftSyntax016FunctionCallExprB0V28addAdditionalTrailingClosureyAcA08Multiplehi7ElementB0VF","s11SwiftSyntax016FunctionCallExprB0V30withAdditionalTrailingClosuresyAcA08Multipleh18ClosureElementListB0VSgF","s11SwiftSyntax016FunctionCallExprB7BuilderV11addArgumentyyAA05Tuplee7ElementB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV18useTrailingClosureyyAA0ieB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV19useCalledExpressionyyAA0eB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV28addAdditionalTrailingClosureyyAA08Multipleij7ElementB0VF","s11SwiftSyntax016FunctionDeclNameB0V04withE0yAcA0B0VSgF","s11SwiftSyntax016FunctionDeclNameB0V13withArgumentsyAcA0degB0VSgF","s11SwiftSyntax016FunctionDeclNameB7BuilderV03useE0yyAA0B0VF","s11SwiftSyntax016FunctionDeclNameB7BuilderV12useArgumentsyyAA0dehB0VF","s11SwiftSyntax016GenericParameterB0V12addAttributeyAcA0B0VF","s11SwiftSyntax016GenericParameterB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax016GenericParameterB0V17withInheritedTypeyAcA0gB0VSgF","s11SwiftSyntax016GenericParameterB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax016GenericParameterB7BuilderV16useInheritedTypeyyAA0hB0VF","s11SwiftSyntax016GenericParameterB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016GenericParameterB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016GenericParameterB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016MemberAccessExprB0V21withDeclNameArgumentsyAcA0ghiB0VSgF","s11SwiftSyntax016MemberAccessExprB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax016MemberAccessExprB0V8withBaseyAcA0eB0VSgF","s11SwiftSyntax016MemberAccessExprB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016MemberAccessExprB7BuilderV20useDeclNameArgumentsyyAA0hijB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV7useBaseyyAA0eB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB0V09withPoundD0yAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V8withKindyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V8withNameyAcA0eB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV08usePoundD0yyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV7useKindyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV7useNameyyAA0eB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016PostfixUnaryExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax016PostfixUnaryExprB0V17withOperatorTokenyAcA0hB0VSgF","s11SwiftSyntax016PostfixUnaryExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax016PostfixUnaryExprB7BuilderV16useOperatorTokenyyAA0iB0VF","s11SwiftSyntax016PoundWarningDeclB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V11withMessageyAcA017StringLiteralExprB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV10useMessageyyAA017StringLiteralExprB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016RegexLiteralExprB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax016RegexLiteralExprB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax016TupleExprElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax016TupleTypeElementB0V12withEllipsisyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V14withSecondNameyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax016TupleTypeElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V9withInOutyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV11useEllipsisyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV13useSecondNameyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV8useInOutyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB0V03addC0yAcA0c8ArgumentB0VF","s11SwiftSyntax017AvailabilityEntryB0V04withC4ListyAcA0c4SpecfB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB7BuilderV03addC0yyAA0c8ArgumentB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax017CodeBlockItemListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax017CodeBlockItemListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax017CodeBlockItemListB0V12removingLastACyF","s11SwiftSyntax017CodeBlockItemListB0V13removingFirstACyF","s11SwiftSyntax017CodeBlockItemListB0V13withoutTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax017CodeBlockItemListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax017CodeBlockItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017CodeBlockItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017CodeBlockItemListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax017CodeBlockItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017CodeBlockItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax017CodeBlockItemListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax017CodeBlockItemListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax017CodeBlockItemListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax017DeclNameArgumentsB0V04withE0yAcA0cd12ArgumentListB0VSgF","s11SwiftSyntax017DeclNameArgumentsB0V11addArgumentyAcA0cdgB0VF","s11SwiftSyntax017DeclNameArgumentsB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017DeclNameArgumentsB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV11addArgumentyyAA0cdhB0VF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017DeinitializerDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax017DeinitializerDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax017DeinitializerDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V17withDeinitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax017DeinitializerDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV16useDeinitKeywordyyAA05TokenB0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax017DictionaryElementB0V17withKeyExpressionyAcA04ExprB0VSgF","s11SwiftSyntax017DictionaryElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax017DictionaryElementB0V19withValueExpressionyAcA04ExprB0VSgF","s11SwiftSyntax017DictionaryElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017DictionaryElementB7BuilderV16useKeyExpressionyyAA04ExprB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV18useValueExpressionyyAA04ExprB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017ExpressionPatternB0V04withC0yAcA04ExprB0VSgF","s11SwiftSyntax017ExpressionPatternB7BuilderV03useC0yyAA04ExprB0VF","s11SwiftSyntax017ExpressionSegmentB0V03addC0yAcA016TupleExprElementB0VF","s11SwiftSyntax017ExpressionSegmentB0V13withBackslashyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V13withDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V15withExpressionsyAcA020TupleExprElementListB0VSgF","s11SwiftSyntax017ExpressionSegmentB7BuilderV03addC0yyAA016TupleExprElementB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useBackslashyyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useDelimiteryyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB0V12addAttributeyAcA0B0VF","s11SwiftSyntax017FunctionParameterB0V12withEllipsisyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V13withFirstNameyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax017FunctionParameterB0V14withSecondNameyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V19withDefaultArgumentyAcA017InitializerClauseB0VSgF","s11SwiftSyntax017FunctionParameterB0V8withTypeyAcA0fB0VSgF","s11SwiftSyntax017FunctionParameterB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB7BuilderV11useEllipsisyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax017FunctionParameterB7BuilderV12useFirstNameyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV13useSecondNameyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV18useDefaultArgumentyyAA017InitializerClauseB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV7useTypeyyAA0gB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB0V10withOutputyAcA012ReturnClauseB0VSgF","s11SwiftSyntax017FunctionSignatureB0V25withAsyncOrReasyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionSignatureB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionSignatureB0V9withInputyAcA015ParameterClauseB0VSgF","s11SwiftSyntax017FunctionSignatureB7BuilderV24useAsyncOrReasyncKeywordyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV8useInputyyAA015ParameterClauseB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV9useOutputyyAA012ReturnClauseB0VF","s11SwiftSyntax017IdentifierPatternB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax017IdentifierPatternB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax017InheritedTypeListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax017InheritedTypeListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax017InheritedTypeListB0V12removingLastACyF","s11SwiftSyntax017InheritedTypeListB0V13removingFirstACyF","s11SwiftSyntax017InheritedTypeListB0V13withoutTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax017InheritedTypeListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax017InheritedTypeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017InheritedTypeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017InheritedTypeListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax017InheritedTypeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017InheritedTypeListB0V8removing7childAtACSi_tF","s11SwiftSyntax017InheritedTypeListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax017InheritedTypeListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax017InheritedTypeListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax017InitializerClauseB0V9withEqualyAcA05TokenB0VSgF","s11SwiftSyntax017InitializerClauseB0V9withValueyAcA04ExprB0VSgF","s11SwiftSyntax017InitializerClauseB7BuilderV8useEqualyyAA05TokenB0VF","s11SwiftSyntax017InitializerClauseB7BuilderV8useValueyyAA04ExprB0VF","s11SwiftSyntax017NonEmptyTokenListB0V10prependingyAcA0eB0VF","s11SwiftSyntax017NonEmptyTokenListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax017NonEmptyTokenListB0V12removingLastACyF","s11SwiftSyntax017NonEmptyTokenListB0V13removingFirstACyF","s11SwiftSyntax017NonEmptyTokenListB0V13withoutTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax017NonEmptyTokenListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax017NonEmptyTokenListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017NonEmptyTokenListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017NonEmptyTokenListB0V8IteratorV4nextAA0eB0VSgyF","s11SwiftSyntax017NonEmptyTokenListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017NonEmptyTokenListB0V8removing7childAtACSi_tF","s11SwiftSyntax017NonEmptyTokenListB0V9appendingyAcA0eB0VF","s11SwiftSyntax017NonEmptyTokenListB0V9inserting_2atAcA0eB0V_SitF","s11SwiftSyntax017NonEmptyTokenListB0V9replacing7childAt4withACSi_AA0eB0VtF","s11SwiftSyntax017ObjCSelectorPieceB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax017ObjCSelectorPieceB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB0V11addArgumentyAcA05Tuplee7ElementB0VF","s11SwiftSyntax017ObjectLiteralExprB0V13withArgumentsyAcA05Tuplee11ElementListB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV11addArgumentyyAA05Tuplee7ElementB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017PoundFilePathExprB0V04withcdE0yAcA05TokenB0VSgF","s11SwiftSyntax017PoundFilePathExprB7BuilderV03usecdE0yyAA05TokenB0VF","s11SwiftSyntax017PoundFunctionExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax017PoundFunctionExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax017QualifiedDeclNameB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V12withBaseTypeyAcA0hB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V13withArgumentsyAcA0degB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV11useBaseTypeyyAA0iB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV12useArgumentsyyAA0dehB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB0V10addSegmentyAcA0B0VF","s11SwiftSyntax017StringLiteralExprB0V12withSegmentsyAcA0cdgB0VSgF","s11SwiftSyntax017StringLiteralExprB0V13withOpenQuoteyAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V14withCloseQuoteyAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V17withOpenDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V18withCloseDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB7BuilderV10addSegmentyyAA0B0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV12useOpenQuoteyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV13useCloseQuoteyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV16useOpenDelimiteryyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV17useCloseDelimiteryyAA05TokenB0VF","s11SwiftSyntax017WithTrailingCommaB0P04withdE0yxAA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax018AssociatedtypeDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax018AssociatedtypeDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V15withInitializeryAcA04Typef6ClauseB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV14useInitializeryyAA04Typeg6ClauseB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax018BinaryOperatorExprB0V04withD5TokenyAcA0gB0VSgF","s11SwiftSyntax018BinaryOperatorExprB7BuilderV03useD5TokenyyAA0hB0VF","s11SwiftSyntax018BooleanLiteralExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax018BooleanLiteralExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax018ClosureCaptureItemB0V13withSpecifieryAcA09TokenListB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V15withAssignTokenyAcA0hB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V17addSpecifierTokenyAcA0hB0VF","s11SwiftSyntax018ClosureCaptureItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV14useAssignTokenyyAA0iB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV17addSpecifierTokenyyAA0iB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax018ElseIfContinuationB0V04withD9StatementyAcA0d4StmtB0VSgF","s11SwiftSyntax018ElseIfContinuationB7BuilderV03useD9StatementyyAA0d4StmtB0VF","s11SwiftSyntax018GenericRequirementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax018GenericRequirementB0V8withBodyyAcA0B0VSgF","s11SwiftSyntax018GenericRequirementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax018GenericRequirementB7BuilderV7useBodyyyAA0B0VF","s11SwiftSyntax018GenericWhereClauseB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018GenericWhereClauseB0V14addRequirementyAcA0cgB0VF","s11SwiftSyntax018GenericWhereClauseB0V19withRequirementListyAcA0cghB0VSgF","s11SwiftSyntax018GenericWhereClauseB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax018GenericWhereClauseB7BuilderV14addRequirementyyAA0chB0VF","s11SwiftSyntax018IfConfigClauseListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax018IfConfigClauseListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax018IfConfigClauseListB0V12removingLastACyF","s11SwiftSyntax018IfConfigClauseListB0V13removingFirstACyF","s11SwiftSyntax018IfConfigClauseListB0V13withoutTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax018IfConfigClauseListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax018IfConfigClauseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018IfConfigClauseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018IfConfigClauseListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax018IfConfigClauseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax018IfConfigClauseListB0V8removing7childAtACSi_tF","s11SwiftSyntax018IfConfigClauseListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax018IfConfigClauseListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax018IfConfigClauseListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax018IntegerLiteralExprB0V10withDigitsyAcA05TokenB0VSgF","s11SwiftSyntax018IntegerLiteralExprB7BuilderV9useDigitsyyAA05TokenB0VF","s11SwiftSyntax018MemberDeclListItemB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax018MemberDeclListItemB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax018MemberDeclListItemB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax018MemberDeclListItemB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax018PatternBindingListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax018PatternBindingListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax018PatternBindingListB0V12removingLastACyF","s11SwiftSyntax018PatternBindingListB0V13removingFirstACyF","s11SwiftSyntax018PatternBindingListB0V13withoutTriviaACyF","s11SwiftSyntax018PatternBindingListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax018PatternBindingListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax018PatternBindingListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax018PatternBindingListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax018PatternBindingListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018PatternBindingListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018PatternBindingListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax018PatternBindingListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax018PatternBindingListB0V8removing7childAtACSi_tF","s11SwiftSyntax018PatternBindingListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax018PatternBindingListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax018PatternBindingListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax018PoundDsohandleExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax018PoundDsohandleExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax018PrefixOperatorExprB0V04withD5TokenyAcA0gB0VSgF","s11SwiftSyntax018PrefixOperatorExprB0V21withPostfixExpressionyAcA0eB0VSgF","s11SwiftSyntax018PrefixOperatorExprB7BuilderV03useD5TokenyyAA0hB0VF","s11SwiftSyntax018PrefixOperatorExprB7BuilderV20usePostfixExpressionyyAA0eB0VF","s11SwiftSyntax018SwitchDefaultLabelB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018SwitchDefaultLabelB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax019AccessPathComponentB0V15withTrailingDotyAcA05TokenB0VSgF","s11SwiftSyntax019AccessPathComponentB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax019AccessPathComponentB7BuilderV14useTrailingDotyyAA05TokenB0VF","s11SwiftSyntax019AccessPathComponentB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax019EnumCaseElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax019EnumCaseElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax019EnumCaseElementListB0V12removingLastACyF","s11SwiftSyntax019EnumCaseElementListB0V13removingFirstACyF","s11SwiftSyntax019EnumCaseElementListB0V13withoutTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax019EnumCaseElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax019EnumCaseElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019EnumCaseElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019EnumCaseElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax019EnumCaseElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax019EnumCaseElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax019EnumCaseElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax019EnumCaseElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax019EnumCaseElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax019GenericArgumentListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax019GenericArgumentListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax019GenericArgumentListB0V12removingLastACyF","s11SwiftSyntax019GenericArgumentListB0V13removingFirstACyF","s11SwiftSyntax019GenericArgumentListB0V13withoutTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax019GenericArgumentListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax019GenericArgumentListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019GenericArgumentListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019GenericArgumentListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax019GenericArgumentListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax019GenericArgumentListB0V8removing7childAtACSi_tF","s11SwiftSyntax019GenericArgumentListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax019GenericArgumentListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax019GenericArgumentListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax019PostfixIfConfigExprB0V04withE0yAcA0de4DeclB0VSgF","s11SwiftSyntax019PostfixIfConfigExprB0V8withBaseyAcA0fB0VSgF","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV03useE0yyAA0de4DeclB0VF","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV7useBaseyyAA0fB0VF","s11SwiftSyntax019PoundSourceLocationB0V04withcdE0yAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V8withArgsyAcA0cdegB0VSgF","s11SwiftSyntax019PoundSourceLocationB7BuilderV03usecdE0yyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV7useArgsyyAA0cdehB0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V03addD9AttributeyAcA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V04withD10AttributesyAcA0cd13AttributeListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V11addModifieryAcA0egB0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V26withPrecedencegroupKeywordyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV03addD9AttributeyyAA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV11addModifieryyAA0ehB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV25usePrecedencegroupKeywordyyAA05TokenB0VF","s11SwiftSyntax019SameTypeRequirementB0V08withLeftD10IdentifieryAcA0dB0VSgF","s11SwiftSyntax019SameTypeRequirementB0V09withRightD10IdentifieryAcA0dB0VSgF","s11SwiftSyntax019SameTypeRequirementB0V17withEqualityTokenyAcA0hB0VSgF","s11SwiftSyntax019SameTypeRequirementB7BuilderV07useLeftD10IdentifieryyAA0dB0VF","s11SwiftSyntax019SameTypeRequirementB7BuilderV08useRightD10IdentifieryyAA0dB0VF","s11SwiftSyntax019SameTypeRequirementB7BuilderV16useEqualityTokenyyAA0iB0VF","s11SwiftSyntax019TargetFunctionEntryB0V12withDeclnameyAcA08DeclNameB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV11useDeclnameyyAA08DeclNameB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax019TuplePatternElementB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax019ValueBindingPatternB0V04withcE0yAcA0eB0VSgF","s11SwiftSyntax019ValueBindingPatternB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax019ValueBindingPatternB7BuilderV03usecE0yyAA0eB0VF","s11SwiftSyntax019ValueBindingPatternB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax020AvailabilityArgumentB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax020AvailabilityArgumentB0V9withEntryyAcA0B0VSgF","s11SwiftSyntax020AvailabilityArgumentB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax020AvailabilityArgumentB7BuilderV8useEntryyyAA0B0VF","s11SwiftSyntax020AvailabilitySpecListB0V10prependingyAcA0c8ArgumentB0VF","s11SwiftSyntax020AvailabilitySpecListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020AvailabilitySpecListB0V12removingLastACyF","s11SwiftSyntax020AvailabilitySpecListB0V13removingFirstACyF","s11SwiftSyntax020AvailabilitySpecListB0V13withoutTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020AvailabilitySpecListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020AvailabilitySpecListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020AvailabilitySpecListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020AvailabilitySpecListB0V8IteratorV4nextAA0c8ArgumentB0VSgyF","s11SwiftSyntax020AvailabilitySpecListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020AvailabilitySpecListB0V8removing7childAtACSi_tF","s11SwiftSyntax020AvailabilitySpecListB0V9appendingyAcA0c8ArgumentB0VF","s11SwiftSyntax020AvailabilitySpecListB0V9inserting_2atAcA0c8ArgumentB0V_SitF","s11SwiftSyntax020AvailabilitySpecListB0V9replacing7childAt4withACSi_AA0c8ArgumentB0VtF","s11SwiftSyntax020ClassRestrictionTypeB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax020ClassRestrictionTypeB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax020ConditionElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax020ConditionElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020ConditionElementListB0V12removingLastACyF","s11SwiftSyntax020ConditionElementListB0V13removingFirstACyF","s11SwiftSyntax020ConditionElementListB0V13withoutTriviaACyF","s11SwiftSyntax020ConditionElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020ConditionElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020ConditionElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020ConditionElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020ConditionElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020ConditionElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020ConditionElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax020ConditionElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020ConditionElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020ConditionElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax020ConditionElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax020ConditionElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax020ConstrainedSugarTypeB0V08withBaseE0yAcA0eB0VSgF","s11SwiftSyntax020ConstrainedSugarTypeB0V22withSomeOrAnySpecifieryAcA05TokenB0VSgF","s11SwiftSyntax020ConstrainedSugarTypeB7BuilderV07useBaseE0yyAA0eB0VF","s11SwiftSyntax020ConstrainedSugarTypeB7BuilderV21useSomeOrAnySpecifieryyAA05TokenB0VF","s11SwiftSyntax020DeclNameArgumentListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020DeclNameArgumentListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020DeclNameArgumentListB0V12removingLastACyF","s11SwiftSyntax020DeclNameArgumentListB0V13removingFirstACyF","s11SwiftSyntax020DeclNameArgumentListB0V13withoutTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020DeclNameArgumentListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020DeclNameArgumentListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020DeclNameArgumentListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020DeclNameArgumentListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020DeclNameArgumentListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020DeclNameArgumentListB0V8removing7childAtACSi_tF","s11SwiftSyntax020DeclNameArgumentListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020DeclNameArgumentListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020DeclNameArgumentListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax020GenericParameterListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax020GenericParameterListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020GenericParameterListB0V12removingLastACyF","s11SwiftSyntax020GenericParameterListB0V13removingFirstACyF","s11SwiftSyntax020GenericParameterListB0V13withoutTriviaACyF","s11SwiftSyntax020GenericParameterListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020GenericParameterListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020GenericParameterListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020GenericParameterListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020GenericParameterListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020GenericParameterListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020GenericParameterListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax020GenericParameterListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020GenericParameterListB0V8removing7childAtACSi_tF","s11SwiftSyntax020GenericParameterListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax020GenericParameterListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax020GenericParameterListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax020MemberTypeIdentifierB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax020OptionalChainingExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax020OptionalChainingExprB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax020OptionalChainingExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax020OptionalChainingExprB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax020SimpleTypeIdentifierB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax020SimpleTypeIdentifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax020TupleExprElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020TupleExprElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020TupleExprElementListB0V12removingLastACyF","s11SwiftSyntax020TupleExprElementListB0V13removingFirstACyF","s11SwiftSyntax020TupleExprElementListB0V13withoutTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020TupleExprElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020TupleExprElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleExprElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleExprElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020TupleExprElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020TupleExprElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020TupleExprElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020TupleExprElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020TupleExprElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax020TupleTypeElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020TupleTypeElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020TupleTypeElementListB0V12removingLastACyF","s11SwiftSyntax020TupleTypeElementListB0V13removingFirstACyF","s11SwiftSyntax020TupleTypeElementListB0V13withoutTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020TupleTypeElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020TupleTypeElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleTypeElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleTypeElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020TupleTypeElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020TupleTypeElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020TupleTypeElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020TupleTypeElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020TupleTypeElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax021AvailabilityConditionB0V03addC8ArgumentyAcA0cfB0VF","s11SwiftSyntax021AvailabilityConditionB0V04withC4SpecyAcA0cf4ListB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V25withPoundAvailableKeywordyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB7BuilderV03addC8ArgumentyyAA0cgB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV24usePoundAvailableKeywordyyAA05TokenB0VF","s11SwiftSyntax021BackDeployVersionListB0V10prependingyAcA0cde8ArgumentB0VF","s11SwiftSyntax021BackDeployVersionListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax021BackDeployVersionListB0V12removingLastACyF","s11SwiftSyntax021BackDeployVersionListB0V13removingFirstACyF","s11SwiftSyntax021BackDeployVersionListB0V13withoutTriviaACyF","s11SwiftSyntax021BackDeployVersionListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax021BackDeployVersionListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax021BackDeployVersionListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021BackDeployVersionListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021BackDeployVersionListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021BackDeployVersionListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021BackDeployVersionListB0V8IteratorV4nextAA0cde8ArgumentB0VSgyF","s11SwiftSyntax021BackDeployVersionListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021BackDeployVersionListB0V8removing7childAtACSi_tF","s11SwiftSyntax021BackDeployVersionListB0V9appendingyAcA0cde8ArgumentB0VF","s11SwiftSyntax021BackDeployVersionListB0V9inserting_2atAcA0cde8ArgumentB0V_SitF","s11SwiftSyntax021BackDeployVersionListB0V9replacing7childAt4withACSi_AA0cde8ArgumentB0VtF","s11SwiftSyntax021DictionaryElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax021DictionaryElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021DictionaryElementListB0V12removingLastACyF","s11SwiftSyntax021DictionaryElementListB0V13removingFirstACyF","s11SwiftSyntax021DictionaryElementListB0V13withoutTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021DictionaryElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021DictionaryElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021DictionaryElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021DictionaryElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax021DictionaryElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021DictionaryElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax021DictionaryElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax021DictionaryElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax021DictionaryElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax021DiscardAssignmentExprB0V12withWildcardyAcA05TokenB0VSgF","s11SwiftSyntax021DiscardAssignmentExprB7BuilderV11useWildcardyyAA05TokenB0VF","s11SwiftSyntax021EditorPlaceholderExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax021EditorPlaceholderExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax021FunctionParameterListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax021FunctionParameterListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021FunctionParameterListB0V12removingLastACyF","s11SwiftSyntax021FunctionParameterListB0V13removingFirstACyF","s11SwiftSyntax021FunctionParameterListB0V13withoutTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021FunctionParameterListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021FunctionParameterListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021FunctionParameterListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021FunctionParameterListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax021FunctionParameterListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021FunctionParameterListB0V8removing7childAtACSi_tF","s11SwiftSyntax021FunctionParameterListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax021FunctionParameterListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax021FunctionParameterListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax021GenericArgumentClauseB0V03addD0yAcA0cdB0VF","s11SwiftSyntax021GenericArgumentClauseB0V13withArgumentsyAcA0cd4ListB0VSgF","s11SwiftSyntax021GenericArgumentClauseB0V20withLeftAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax021GenericArgumentClauseB0V21withRightAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV03addD0yyAA0cdB0VF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV19useLeftAngleBracketyyAA05TokenB0VF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV20useRightAngleBracketyyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB0V013withInheritedE0yAcA0eB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V12addAttributeyAcA0B0VF","s11SwiftSyntax021PrimaryAssociatedTypeB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V15withInitializeryAcA0eg6ClauseB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV012useInheritedE0yyAA0eB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV14useInitializeryyAA0eh6ClauseB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax021StringLiteralSegmentsB0V10prependingyAcA0B0VF","s11SwiftSyntax021StringLiteralSegmentsB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021StringLiteralSegmentsB0V12removingLastACyF","s11SwiftSyntax021StringLiteralSegmentsB0V13removingFirstACyF","s11SwiftSyntax021StringLiteralSegmentsB0V13withoutTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021StringLiteralSegmentsB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021StringLiteralSegmentsB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021StringLiteralSegmentsB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021StringLiteralSegmentsB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax021StringLiteralSegmentsB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021StringLiteralSegmentsB0V8removing7childAtACSi_tF","s11SwiftSyntax021StringLiteralSegmentsB0V9appendingyAcA0B0VF","s11SwiftSyntax021StringLiteralSegmentsB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax021StringLiteralSegmentsB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax021SymbolicReferenceExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax021SymbolicReferenceExprB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax021TypeInheritanceClauseB0V012addInheritedC0yAcA0gcB0VF","s11SwiftSyntax021TypeInheritanceClauseB0V013withInheritedC10CollectionyAcA0gc4ListB0VSgF","s11SwiftSyntax021TypeInheritanceClauseB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV012addInheritedC0yyAA0hcB0VF","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax021TypeInitializerClauseB0V9withEqualyAcA05TokenB0VSgF","s11SwiftSyntax021TypeInitializerClauseB0V9withValueyAcA0cB0VSgF","s11SwiftSyntax021TypeInitializerClauseB7BuilderV8useEqualyyAA05TokenB0VF","s11SwiftSyntax021TypeInitializerClauseB7BuilderV8useValueyyAA0cB0VF","s11SwiftSyntax021UnresolvedPatternExprB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax021UnresolvedPatternExprB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax022ClosureCaptureItemListB0V12removingLastACyF","s11SwiftSyntax022ClosureCaptureItemListB0V13removingFirstACyF","s11SwiftSyntax022ClosureCaptureItemListB0V13withoutTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax022ClosureCaptureItemListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax022ClosureCaptureItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022ClosureCaptureItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022ClosureCaptureItemListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax022ClosureCaptureItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax022ClosureCaptureItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax022ClosureCaptureItemListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax022ClosureCaptureItemListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax022CompositionTypeElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax022CompositionTypeElementB0V13withAmpersandyAcA05TokenB0VSgF","s11SwiftSyntax022CompositionTypeElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax022CompositionTypeElementB7BuilderV12useAmpersandyyAA05TokenB0VF","s11SwiftSyntax022ConformanceRequirementB0V22withLeftTypeIdentifieryAcA0gB0VSgF","s11SwiftSyntax022ConformanceRequirementB0V23withRightTypeIdentifieryAcA0gB0VSgF","s11SwiftSyntax022ConformanceRequirementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax022ConformanceRequirementB7BuilderV21useLeftTypeIdentifieryyAA0hB0VF","s11SwiftSyntax022ConformanceRequirementB7BuilderV22useRightTypeIdentifieryyAA0hB0VF","s11SwiftSyntax022ConformanceRequirementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax022DifferentiabilityParamB0V13withParameteryAcA0B0VSgF","s11SwiftSyntax022DifferentiabilityParamB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax022DifferentiabilityParamB7BuilderV12useParameteryyAA0B0VF","s11SwiftSyntax022DifferentiabilityParamB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax022GenericParameterClauseB0V03addcD0yAcA0cdB0VF","s11SwiftSyntax022GenericParameterClauseB0V04withcD4ListyAcA0cdgB0VSgF","s11SwiftSyntax022GenericParameterClauseB0V20withLeftAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax022GenericParameterClauseB0V21withRightAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax022GenericParameterClauseB7BuilderV03addcD0yyAA0cdB0VF","s11SwiftSyntax022GenericParameterClauseB7BuilderV19useLeftAngleBracketyyAA05TokenB0VF","s11SwiftSyntax022GenericParameterClauseB7BuilderV20useRightAngleBracketyyAA05TokenB0VF","s11SwiftSyntax022GenericRequirementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax022GenericRequirementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax022GenericRequirementListB0V12removingLastACyF","s11SwiftSyntax022GenericRequirementListB0V13removingFirstACyF","s11SwiftSyntax022GenericRequirementListB0V13withoutTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax022GenericRequirementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax022GenericRequirementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022GenericRequirementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022GenericRequirementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax022GenericRequirementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax022GenericRequirementListB0V8removing7childAtACSi_tF","s11SwiftSyntax022GenericRequirementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax022GenericRequirementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax022GenericRequirementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax022LabeledSpecializeEntryB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withValueyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useValueyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB0V7addItemyAcA0cdgB0VF","s11SwiftSyntax023ClosureCaptureSignatureB0V9withItemsyAcA0cd8ItemListB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV7addItemyyAA0cdhB0VF","s11SwiftSyntax023DifferentiabilityParamsB0V03addC5ParamyAcA0cfB0VF","s11SwiftSyntax023DifferentiabilityParamsB0V08withDiffD0yAcA0c9ParamListB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV03addC5ParamyyAA0cgB0VF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB0V12withFileNameyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V14withLineNumberyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withFileArgColonyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withFileArgLabelyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withLineArgColonyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withLineArgLabelyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV11useFileNameyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV13useLineNumberyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useFileArgColonyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useFileArgLabelyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useLineArgColonyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useLineArgLabelyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V10prependingyAcA0cde7ElementB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax023PrecedenceGroupNameListB0V12removingLastACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V13removingFirstACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V13withoutTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V8IteratorV4nextAA0cde7ElementB0VSgyF","s11SwiftSyntax023PrecedenceGroupNameListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax023PrecedenceGroupNameListB0V8removing7childAtACSi_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V9appendingyAcA0cde7ElementB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V9inserting_2atAcA0cde7ElementB0V_SitF","s11SwiftSyntax023PrecedenceGroupNameListB0V9replacing7childAt4withACSi_AA0cde7ElementB0VtF","s11SwiftSyntax023PrecedenceGroupRelationB0V021withHigherThanOrLowerH0yAcA05TokenB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB0V12addOtherNameyAcA0cdh7ElementB0VF","s11SwiftSyntax023PrecedenceGroupRelationB0V14withOtherNamesyAcA0cd8NameListB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV020useHigherThanOrLowerI0yyAA05TokenB0VF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV12addOtherNameyyAA0cdi7ElementB0VF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax023TuplePatternElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax023TuplePatternElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax023TuplePatternElementListB0V12removingLastACyF","s11SwiftSyntax023TuplePatternElementListB0V13removingFirstACyF","s11SwiftSyntax023TuplePatternElementListB0V13withoutTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax023TuplePatternElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax023TuplePatternElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023TuplePatternElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023TuplePatternElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax023TuplePatternElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax023TuplePatternElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax023TuplePatternElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax023TuplePatternElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax023TuplePatternElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax023UnavailabilityConditionB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V20withAvailabilitySpecyAcA0fg4ListB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V23addAvailabilityArgumentyAcA0fgB0VF","s11SwiftSyntax023UnavailabilityConditionB0V27withPoundUnavailableKeywordyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV23addAvailabilityArgumentyyAA0ghB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV26usePoundUnavailableKeywordyyAA05TokenB0VF","s11SwiftSyntax024MatchingPatternConditionB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V15withCaseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV14useCaseKeywordyyAA05TokenB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax024OptionalBindingConditionB0V11withPatternyAcA0gB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV10usePatternyyAA0hB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax025BackDeployVersionArgumentB0V016withAvailabilityE11RestrictionyAcA0heiB0VSgF","s11SwiftSyntax025BackDeployVersionArgumentB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax025BackDeployVersionArgumentB7BuilderV015useAvailabilityE11RestrictionyyAA0iejB0VF","s11SwiftSyntax025BackDeployVersionArgumentB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V04withE7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V8withFlagyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV03useE7KeywordyyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV7useFlagyyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12removingLastACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13removingFirstACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13withoutTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8removing7childAtACSi_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax026CompositionTypeElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax026CompositionTypeElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax026CompositionTypeElementListB0V12removingLastACyF","s11SwiftSyntax026CompositionTypeElementListB0V13removingFirstACyF","s11SwiftSyntax026CompositionTypeElementListB0V13withoutTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax026CompositionTypeElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax026CompositionTypeElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026CompositionTypeElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026CompositionTypeElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax026CompositionTypeElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax026CompositionTypeElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax026CompositionTypeElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax026CompositionTypeElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax026CompositionTypeElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax026DifferentiabilityParamListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax026DifferentiabilityParamListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax026DifferentiabilityParamListB0V12removingLastACyF","s11SwiftSyntax026DifferentiabilityParamListB0V13removingFirstACyF","s11SwiftSyntax026DifferentiabilityParamListB0V13withoutTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax026DifferentiabilityParamListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax026DifferentiabilityParamListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026DifferentiabilityParamListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026DifferentiabilityParamListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax026DifferentiabilityParamListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax026DifferentiabilityParamListB0V8removing7childAtACSi_tF","s11SwiftSyntax026DifferentiabilityParamListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax026DifferentiabilityParamListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax026DifferentiabilityParamListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V03addd5GroupE14DesignatedTypeyAcA05TokenB0VF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V04withd5Groupe10DesignatedF0yAcA014IdentifierListB0VSgF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV03addd5GroupE14DesignatedTypeyyAA05TokenB0VF","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax026PrecedenceGroupNameElementB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax026PrecedenceGroupNameElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withValueyAcA0B0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useValueyyAA0B0VF","s11SwiftSyntax027BackDeployAttributeSpecListB0V011withVersionG0yAcA0cdigB0VSgF","s11SwiftSyntax027BackDeployAttributeSpecListB0V15addAvailabilityyAcA0cd15VersionArgumentB0VF","s11SwiftSyntax027BackDeployAttributeSpecListB0V15withBeforeLabelyAcA05TokenB0VSgF","s11SwiftSyntax027BackDeployAttributeSpecListB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax027BackDeployAttributeSpecListB7BuilderV14useBeforeLabelyyAA05TokenB0VF","s11SwiftSyntax027BackDeployAttributeSpecListB7BuilderV15addAvailabilityyyAA0cd15VersionArgumentB0VF","s11SwiftSyntax027BackDeployAttributeSpecListB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V03addcdE0yAcA0cdeB0VF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V04withcdE4ListyAcA0cdehB0VSgF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V20withLeftAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB0V21withRightAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB7BuilderV03addcdE0yyAA0cdeB0VF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB7BuilderV19useLeftAngleBracketyyAA05TokenB0VF","s11SwiftSyntax027PrimaryAssociatedTypeClauseB7BuilderV20useRightAngleBracketyyAA05TokenB0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V10prependingyAcA0B0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V12removingLastACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V13removingFirstACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V13withoutTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8removing7childAtACSi_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9appendingyAcA0B0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V012withDeclNameE0yAcA0gheB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V16withDeclBaseNameyAcA0B0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V8withTypeyAcA06Simpleg10IdentifierB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV011useDeclNameE0yyAA0hieB0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV15useDeclBaseNameyyAA0B0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV7useTypeyyAA06Simpleh10IdentifierB0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax028NamedAttributeStringArgumentB0V04withE10OrDeclnameyAcA0B0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB0V11withNameTokyAcA05TokenB0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV03useE10OrDeclnameyyAA0B0VF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV10useNameTokyyAA05TokenB0VF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V04withE7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V9withValueyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV03useE7KeywordyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV8useValueyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V10prependingyAcA0B0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12removingLastACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13removingFirstACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13withoutTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8removing7childAtACSi_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9appendingyAcA0B0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V12withWrtLabelyAcA05TokenB0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V14withParametersyAcA0B0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV11useWrtLabelyyAA05TokenB0VF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV13useParametersyyAA0B0VF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax030AvailabilityVersionRestrictionB0V04withD0yAcA0d5TupleB0VSgF","s11SwiftSyntax030AvailabilityVersionRestrictionB0V12withPlatformyAcA05TokenB0VSgF","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV03useD0yyAA0d5TupleB0VF","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV11usePlatformyyAA05TokenB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB0V04withE0yAcA0e4ExprB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV03useE0yyAA0e4ExprB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V011withWrappedF0yAcA0fB0VSgF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V19withExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV010useWrappedF0yyAA0fB0VF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV18useExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V12withDiffKindyAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V14withDiffParamsyAcA017Differentiabilityh6ClauseB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V15withWhereClauseyAcA07GenericghB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V17withDiffKindCommayAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V19withDiffParamsCommayAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV11useDiffKindyyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV13useDiffParamsyyAA017Differentiabilityi6ClauseB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV14useWhereClauseyyAA07GenerichiB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV16useDiffKindCommayyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV18useDiffParamsCommayyAA05TokenB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V04withD6TriviayAcA0I0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V07withoutD6TriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V10prependingyAcA0cdefB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12makeIteratorAC0I0VyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12removingLastACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13removingFirstACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13withoutTriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V17withLeadingTriviayAcA0J0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8IteratorV4nextAA0cdefB0VSgyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9appendingyAcA0cdefB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9inserting_2atAcA0cdefB0V_SitF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9replacing7childAt4withACSi_AA0cdefB0VtF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V11withOfLabelyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V14withDiffParamsyAcA017Differentiabilityi6ClauseB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V16withAccessorKindyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V20withOriginalDeclNameyAcA09QualifiedijB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV10useOfLabelyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV13useDiffParamsyyAA017Differentiabilityj6ClauseB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV15useAccessorKindyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV19useOriginalDeclNameyyAA09QualifiedjkB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax04DeclB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04DeclB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04DeclB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04DeclB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04ExprB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04ExprB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04ExprB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04ExprB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04StmtB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04StmtB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04StmtB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04StmtB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04TypeB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04TypeB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04TypeB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04TypeB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax05TokenB0V13withoutTriviaACyF","s11SwiftSyntax05TokenB0V17withLeadingTriviayAcA0F0VF","s11SwiftSyntax05TokenB0V18withTrailingTriviayAcA0F0VF","s11SwiftSyntax05TokenB0V20withoutLeadingTriviaACyF","s11SwiftSyntax05TokenB0V21withoutTrailingTriviaACyF","s11SwiftSyntax05TokenB0V8withKindyAcA0cE0OF","s11SwiftSyntax06AsExprB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax06AsExprB0V12withTypeNameyAcA0fB0VSgF","s11SwiftSyntax06AsExprB0V29withQuestionOrExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax06AsExprB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax06AsExprB7BuilderV11useTypeNameyyAA0gB0VF","s11SwiftSyntax06AsExprB7BuilderV28useQuestionOrExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax06BracedB0P13withLeftBraceyxAA05TokenB0VSgF","s11SwiftSyntax06BracedB0P14withRightBraceyxAA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V14addCatchClauseyAcA0fgB0VF","s11SwiftSyntax06DoStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V16withCatchClausesyAcA0f10ClauseListB0VSgF","s11SwiftSyntax06DoStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax06DoStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV14addCatchClauseyyAA0ghB0VF","s11SwiftSyntax06DoStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax06IfStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax06IfStmtB0V12withElseBodyyAcA0B0VSgF","s11SwiftSyntax06IfStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax06IfStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V15withElseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax06IfStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV11useElseBodyyyAA0B0VF","s11SwiftSyntax06IfStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax06IfStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV14useElseKeywordyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax06IsExprB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax06IsExprB0V12withTypeNameyAcA0fB0VSgF","s11SwiftSyntax06IsExprB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax06IsExprB7BuilderV11useTypeNameyyAA0gB0VF","s11SwiftSyntax07LabeledB0P13withLabelNameyxAA05TokenB0VSgF","s11SwiftSyntax07LabeledB0P14withLabelColonyxAA05TokenB0VSgF","s11SwiftSyntax07PatternB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax07PatternB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax07PatternB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax07PatternB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax07TryExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax07TryExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax07TryExprB0V29withQuestionOrExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax07TryExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax07TryExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax07TryExprB7BuilderV28useQuestionOrExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax08CaseItemB0V11withPatternyAcA0fB0VSgF","s11SwiftSyntax08CaseItemB0V15withWhereClauseyAcA0fgB0VSgF","s11SwiftSyntax08CaseItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax08CaseItemB7BuilderV10usePatternyyAA0gB0VF","s11SwiftSyntax08CaseItemB7BuilderV14useWhereClauseyyAA0ghB0VF","s11SwiftSyntax08CaseItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax08DeclNameB0V04withc4BaseD0yAcA0B0VSgF","s11SwiftSyntax08DeclNameB0V04withcD9ArgumentsyAcA0cdfB0VSgF","s11SwiftSyntax08DeclNameB7BuilderV03usec4BaseD0yyAA0B0VF","s11SwiftSyntax08DeclNameB7BuilderV03usecD9ArgumentsyyAA0cdgB0VF","s11SwiftSyntax08EnumDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax08EnumDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax08EnumDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax08EnumDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax08EnumDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax08EnumDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax08EnumDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax08EnumDeclB0V21withGenericParametersyAcA0f15ParameterClauseB0VSgF","s11SwiftSyntax08EnumDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax08EnumDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax08EnumDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax08EnumDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax08EnumDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax08EnumDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax08EnumDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax08EnumDeclB7BuilderV20useGenericParametersyyAA0g15ParameterClauseB0VF","s11SwiftSyntax08EnumDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax08EnumDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax08ExprListB0V10prependingyAcA0cB0VF","s11SwiftSyntax08ExprListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax08ExprListB0V12removingLastACyF","s11SwiftSyntax08ExprListB0V13removingFirstACyF","s11SwiftSyntax08ExprListB0V13withoutTriviaACyF","s11SwiftSyntax08ExprListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax08ExprListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax08ExprListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax08ExprListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax08ExprListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ExprListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ExprListB0V8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax08ExprListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax08ExprListB0V8removing7childAtACSi_tF","s11SwiftSyntax08ExprListB0V9appendingyAcA0cB0VF","s11SwiftSyntax08ExprListB0V9inserting_2atAcA0cB0V_SitF","s11SwiftSyntax08ExprListB0V9replacing7childAt4withACSi_AA0cB0VtF","s11SwiftSyntax08ObjcNameB0V10prependingyAcA0cd5PieceB0VF","s11SwiftSyntax08ObjcNameB0V12makeIteratorAC0F0VyF","s11SwiftSyntax08ObjcNameB0V12removingLastACyF","s11SwiftSyntax08ObjcNameB0V13removingFirstACyF","s11SwiftSyntax08ObjcNameB0V13withoutTriviaACyF","s11SwiftSyntax08ObjcNameB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax08ObjcNameB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax08ObjcNameB0V20withoutLeadingTriviaACyF","s11SwiftSyntax08ObjcNameB0V21withoutTrailingTriviaACyF","s11SwiftSyntax08ObjcNameB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ObjcNameB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ObjcNameB0V8IteratorV4nextAA0cd5PieceB0VSgyF","s11SwiftSyntax08ObjcNameB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax08ObjcNameB0V8removing7childAtACSi_tF","s11SwiftSyntax08ObjcNameB0V9appendingyAcA0cd5PieceB0VF","s11SwiftSyntax08ObjcNameB0V9inserting_2atAcA0cd5PieceB0V_SitF","s11SwiftSyntax08ObjcNameB0V9replacing7childAt4withACSi_AA0cd5PieceB0VtF","s11SwiftSyntax08TypeExprB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax08TypeExprB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax09ArrayExprB0V10addElementyAcA0cfB0VF","s11SwiftSyntax09ArrayExprB0V12withElementsyAcA0c11ElementListB0VSgF","s11SwiftSyntax09ArrayExprB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayExprB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayExprB7BuilderV10addElementyyAA0cgB0VF","s11SwiftSyntax09ArrayExprB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax09ArrayExprB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax09ArrayTypeB0V011withElementD0yAcA0dB0VSgF","s11SwiftSyntax09ArrayTypeB0V21withLeftSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayTypeB0V22withRightSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayTypeB7BuilderV010useElementD0yyAA0dB0VF","s11SwiftSyntax09ArrayTypeB7BuilderV20useLeftSquareBracketyyAA05TokenB0VF","s11SwiftSyntax09ArrayTypeB7BuilderV21useRightSquareBracketyyAA05TokenB0VF","s11SwiftSyntax09ArrowExprB0V04withC5TokenyAcA0fB0VSgF","s11SwiftSyntax09ArrowExprB0V15withThrowsTokenyAcA0gB0VSgF","s11SwiftSyntax09ArrowExprB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ArrowExprB7BuilderV03useC5TokenyyAA0gB0VF","s11SwiftSyntax09ArrowExprB7BuilderV14useThrowsTokenyyAA0hB0VF","s11SwiftSyntax09ArrowExprB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax09AttributeB0V04withC4NameyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V12withArgumentyAcA0B0VSgF","s11SwiftSyntax09AttributeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V13withTokenListyAcA0efB0VSgF","s11SwiftSyntax09AttributeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V15withAtSignTokenyAcA0gB0VSgF","s11SwiftSyntax09AttributeB0V8addTokenyAcA0eB0VF","s11SwiftSyntax09AttributeB7BuilderV03useC4NameyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV11useArgumentyyAA0B0VF","s11SwiftSyntax09AttributeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV14useAtSignTokenyyAA0hB0VF","s11SwiftSyntax09AttributeB7BuilderV8addTokenyyAA0fB0VF","s11SwiftSyntax09AwaitExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09AwaitExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax09AwaitExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09AwaitExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax09BreakStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09BreakStmtB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax09BreakStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09BreakStmtB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax09CatchItemB0V11withPatternyAcA0fB0VSgF","s11SwiftSyntax09CatchItemB0V15withWhereClauseyAcA0fgB0VSgF","s11SwiftSyntax09CatchItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax09CatchItemB7BuilderV10usePatternyyAA0gB0VF","s11SwiftSyntax09CatchItemB7BuilderV14useWhereClauseyyAA0ghB0VF","s11SwiftSyntax09CatchItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB0V04withC14OrActorKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ClassDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax09ClassDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax09ClassDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax09ClassDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax09ClassDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax09ClassDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax09ClassDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax09ClassDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax09ClassDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax09ClassDeclB7BuilderV03useC14OrActorKeywordyyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax09ClassDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax09ClassDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax09ClassDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax09ClassDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax09ClassDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax09CodeBlockB0V12addStatementyAcA0cd4ItemB0VF","s11SwiftSyntax09CodeBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax09CodeBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax09CodeBlockB0V14withStatementsyAcA0cd8ItemListB0VSgF","s11SwiftSyntax09CodeBlockB7BuilderV12addStatementyyAA0cd4ItemB0VF","s11SwiftSyntax09CodeBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax09CodeBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax09DeclGroupB0P11withMembersyxAA06Memberc5BlockB0VSgF","s11SwiftSyntax09DeclGroupB0P13withModifiersyxAA012ModifierListB0VSgF","s11SwiftSyntax09DeclGroupB0P14withAttributesyxAA013AttributeListB0VSgF","s11SwiftSyntax09DeferStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09DeferStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09DeferStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09DeferStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09ElseBlockB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ElseBlockB0V8withBodyyAcA04CodedB0VSgF","s11SwiftSyntax09ElseBlockB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ElseBlockB7BuilderV7useBodyyyAA04CodedB0VF","s11SwiftSyntax09ForInStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V11withPatternyAcA0gB0VSgF","s11SwiftSyntax09ForInStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V14withTryKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V15withCaseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V15withWhereClauseyAcA0ghB0VSgF","s11SwiftSyntax09ForInStmtB0V16withAwaitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V16withSequenceExpryAcA0hB0VSgF","s11SwiftSyntax09ForInStmtB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax09ForInStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09ForInStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV10usePatternyyAA0hB0VF","s11SwiftSyntax09ForInStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV13useTryKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV14useCaseKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV14useWhereClauseyyAA0hiB0VF","s11SwiftSyntax09ForInStmtB7BuilderV15useAwaitKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV15useSequenceExpryyAA0iB0VF","s11SwiftSyntax09ForInStmtB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax09ForInStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09GuardStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09GuardStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax09GuardStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax09GuardStmtB0V15withElseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09GuardStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09GuardStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09GuardStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax09GuardStmtB7BuilderV14useElseKeywordyyAA05TokenB0VF","s11SwiftSyntax09GuardStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09InOutExprB0V13withAmpersandyAcA05TokenB0VSgF","s11SwiftSyntax09InOutExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax09InOutExprB7BuilderV12useAmpersandyyAA05TokenB0VF","s11SwiftSyntax09InOutExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax09ThrowStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ThrowStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax09ThrowStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ThrowStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax09TokenListB0V10prependingyAcA0cB0VF","s11SwiftSyntax09TokenListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax09TokenListB0V12removingLastACyF","s11SwiftSyntax09TokenListB0V13removingFirstACyF","s11SwiftSyntax09TokenListB0V13withoutTriviaACyF","s11SwiftSyntax09TokenListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax09TokenListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax09TokenListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax09TokenListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax09TokenListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax09TokenListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax09TokenListB0V8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax09TokenListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax09TokenListB0V8removing7childAtACSi_tF","s11SwiftSyntax09TokenListB0V9appendingyAcA0cB0VF","s11SwiftSyntax09TokenListB0V9inserting_2atAcA0cB0V_SitF","s11SwiftSyntax09TokenListB0V9replacing7childAt4withACSi_AA0cB0VtF","s11SwiftSyntax09TupleExprB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax09TupleExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleExprB0V15withElementListyAcA0cdfgB0VSgF","s11SwiftSyntax09TupleExprB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax09TupleExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09TupleExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09TupleTypeB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax09TupleTypeB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax09TupleTypeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleTypeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleTypeB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax09TupleTypeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09TupleTypeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax09WhileStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax09WhileStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09WhileStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax09WhileStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09YieldListB0V011withElementD0yAcA04ExprdB0VSgF","s11SwiftSyntax09YieldListB0V10addElementyAcA04ExprB0VF","s11SwiftSyntax09YieldListB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB7BuilderV10addElementyyAA04ExprB0VF","s11SwiftSyntax09YieldListB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09YieldListB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09YieldListB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax09YieldStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09YieldStmtB0V10withYieldsyAcA0B0VSgF","s11SwiftSyntax09YieldStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09YieldStmtB7BuilderV9useYieldsyyAA0B0VF","s11SwiftSyntax0B0V10asProtocolyAA04DeclbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04ExprbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04StmtbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04TypebD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA07PatternbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA0bD0_pAaE_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04DeclbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04ExprbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04StmtbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04TypebD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA07PatternbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA0bD0_pmF","s11SwiftSyntax0B0V11endLocation9converter19afterTrailingTriviaAA06SourceD0VAA0iD9ConverterC_SbtF","s11SwiftSyntax0B0V11sourceRange9converter18afterLeadingTrivia0f8TrailingH0AA06SourceD0VAA0J17LocationConverterC_S2btF","s11SwiftSyntax0B0V13startLocation9converter18afterLeadingTriviaAA06SourceD0VAA0iD9ConverterC_SbtF","s11SwiftSyntax0B0V2asyAA0B4EnumOAFmF","s11SwiftSyntax0B0V2asyxSgxmAA0B8ProtocolRzlF","s11SwiftSyntax0B0V2isySbxmAA0B8ProtocolRzlF","s11SwiftSyntax0B0V4hash4intoys6HasherVz_tF","s11SwiftSyntax0B10AnyVisitorC05visitC0yAA0bD12ContinueKindOAA0B0VF","s11SwiftSyntax0B10AnyVisitorC05visitC4PostyyAA0B0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010AccessPathB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010ImportDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010ReturnStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SourceFileB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010StructDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SwitchCaseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SwitchStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011CatchClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011ClosureExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011KeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011TernaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011WhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012AccessorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012AccessorListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ArrayElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012CaseItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ClosureParamB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012DeclModifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012EnumCaseDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012FunctionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012FunctionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012IfConfigDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012MetatypeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ModifierListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ObjCSelectorB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012OperatorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012OptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ProtocolDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ReturnClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012SequenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012SuperRefExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012TuplePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012VariableDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012VersionTupleB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AccessorBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013CatchItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013CodeBlockItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013ExtensionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013InheritedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013IsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013ObjcNamePieceB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013PoundFileExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013PoundLineExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013StringSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013SubscriptDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013SubscriptExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013TypealiasDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014AssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014AttributedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014DictionaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014DictionaryTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014ExpressionStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IdentifierExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IdentifierListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IfConfigClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014MemberDeclListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014NilLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014PatternBindingB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014PoundErrorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014SpecializeExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014SwitchCaseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014TypeAnnotationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014UnknownPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CatchClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CompositionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CustomAttributeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015DeclarationStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015EnumCaseElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015EnumCasePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015FallthroughStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ForcedValueExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015GenericArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015InitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015MemberDeclBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015OptionalPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundAssertStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundColumnExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundFileIDExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015WildcardPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ArrayElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ClosureParamListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ClosureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ConditionElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016DeclNameArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FloatLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FunctionCallExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FunctionDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016GenericParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016MemberAccessExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016PoundWarningDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016RegexLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016TupleExprElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016TupleTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017AccessorParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017AvailabilityEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017CodeBlockItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DeinitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DictionaryElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ExpressionPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ExpressionSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017FunctionParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017FunctionSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017IdentifierPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017InheritedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017InitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017PoundFilePathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017PoundFunctionExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017StringLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018ElseIfContinuationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018GenericRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018GenericWhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018IfConfigClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018MemberDeclListItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PatternBindingListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019AccessLevelModifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019AccessPathComponentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019EnumCaseElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019GenericArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PoundSourceLocationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019SameTypeRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019TuplePatternElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019ValueBindingPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020ConditionElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020ConstrainedSugarTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020GenericParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020OptionalChainingExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020TupleExprElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020TupleTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021AvailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021BackDeployVersionListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021DictionaryElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021FunctionParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022CompositionTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022ConformanceRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022GenericParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022GenericRequirementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023TuplePatternElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA025BackDeployVersionArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027BackDeployAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027PrimaryAssociatedTypeClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA05TokenB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06AsExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06DoStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06IfStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06IsExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA07TryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA07UnknownB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08CaseItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08DeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08EnumDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08ExprListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08ObjcNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08TypeExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrayExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrayTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrowExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09AttributeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09AwaitExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09BreakStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09CatchItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ClassDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09CodeBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09DeferStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ElseBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ForInStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09GuardStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09InOutExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ThrowStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TokenListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TupleExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TupleTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09WhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09YieldListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09YieldStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA0f4StmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010AccessPathB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010ImportDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010ReturnStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SourceFileB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010StructDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SwitchCaseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SwitchStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011CatchClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011ClosureExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011KeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011TernaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011WhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012AccessorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012AccessorListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ArrayElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012CaseItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ClosureParamB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ContinueStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012DeclModifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012EnumCaseDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012FunctionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012FunctionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012IfConfigDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012MetatypeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ModifierListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ObjCSelectorB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012OperatorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012OptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ProtocolDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ReturnClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012SequenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012SuperRefExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012TuplePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012VariableDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012VersionTupleB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AccessorBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013CatchItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013CodeBlockItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013ExtensionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013InheritedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013IsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013ObjcNamePieceB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013PoundFileExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013PoundLineExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013StringSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013SubscriptDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013SubscriptExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013TypealiasDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014AssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014AttributedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014DictionaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014DictionaryTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014ExpressionStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IdentifierExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IdentifierListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IfConfigClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014MemberDeclListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014NilLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014PatternBindingB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014PoundErrorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014SpecializeExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014SwitchCaseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014TypeAnnotationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014UnknownPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CatchClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CompositionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CustomAttributeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015DeclarationStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015EnumCaseElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015EnumCasePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015FallthroughStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ForcedValueExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015GenericArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015InitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015MemberDeclBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015OptionalPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundAssertStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundColumnExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundFileIDExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015WildcardPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ArrayElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ClosureParamListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ClosureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ConditionElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016DeclNameArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FloatLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FunctionCallExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FunctionDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016GenericParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016MemberAccessExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016PoundWarningDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016RegexLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016TupleExprElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016TupleTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017AccessorParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017AvailabilityEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017CodeBlockItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DeinitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DictionaryElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ExpressionPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ExpressionSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017FunctionParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017FunctionSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017IdentifierPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017InheritedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017InitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017PoundFilePathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017PoundFunctionExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017StringLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018ElseIfContinuationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018GenericRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018GenericWhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018IfConfigClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018MemberDeclListItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PatternBindingListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019AccessLevelModifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019AccessPathComponentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019EnumCaseElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019GenericArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PoundSourceLocationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019SameTypeRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019TuplePatternElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019ValueBindingPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020ConditionElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020ConstrainedSugarTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020GenericParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020OptionalChainingExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020TupleExprElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020TupleTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021AvailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021BackDeployVersionListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021DictionaryElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021FunctionParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022CompositionTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022ConformanceRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022GenericParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022GenericRequirementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023TuplePatternElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA025BackDeployVersionArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027BackDeployAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027PrimaryAssociatedTypeClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA05TokenB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06AsExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06DoStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06IfStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06IsExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA07TryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA07UnknownB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08CaseItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08DeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08EnumDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08ExprListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08ObjcNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08TypeExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrayExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrayTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrowExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09AttributeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09AwaitExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09BreakStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09CatchItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ClassDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09CodeBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09DeferStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ElseBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ForInStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09GuardStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09InOutExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ThrowStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TokenListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TupleExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TupleTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09WhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09YieldListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09YieldStmtB0VF","s11SwiftSyntax0B15ClassificationsV12makeIteratorAC0E0VyF","s11SwiftSyntax0B15ClassificationsV8IteratorV4nextAA0B15ClassifiedRangeVSgyF","s11SwiftSyntax0B4NodeV5write2toyxz_ts16TextOutputStreamRzlF","s11SwiftSyntax0B7VisitorC4walkyyxAA0B8ProtocolRzlF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010AccessPathB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010ImportDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010ReturnStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SourceFileB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010StructDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SwitchCaseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SwitchStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011CatchClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011ClosureExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011KeyPathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011TernaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011WhereClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012AccessorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012AccessorListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ArrayElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012CaseItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ClosureParamB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012DeclModifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012EnumCaseDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012FunctionDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012FunctionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012IfConfigDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012MetatypeTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ModifierListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ObjCSelectorB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012OperatorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012OptionalTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ProtocolDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ReturnClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012SequenceExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012SuperRefExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012TuplePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012VariableDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012VersionTupleB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AccessorBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AsTypePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AttributeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013CatchItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013CodeBlockItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013ExtensionDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013InheritedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013IsTypePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013ObjcNamePieceB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013PoundFileExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013PoundLineExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013StringSegmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013SubscriptDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013SubscriptExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013TypealiasDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014AssignmentExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014AttributedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014DictionaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014DictionaryTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014ExpressionStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IdentifierExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IdentifierListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IfConfigClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014MemberDeclListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014NilLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014PatternBindingB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014PoundErrorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014SpecializeExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014SwitchCaseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014TypeAnnotationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014UnknownPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CatchClauseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CompositionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CustomAttributeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015DeclarationStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015EnumCaseElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015EnumCasePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015FallthroughStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ForcedValueExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015GenericArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015InitializerDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015MemberDeclBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015OptionalPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ParameterClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundAssertStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundColumnExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundFileIDExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015WildcardPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ArrayElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ClosureParamListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ClosureSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ConditionElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016DeclNameArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FloatLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FunctionCallExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FunctionDeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016GenericParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016MemberAccessExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016PoundWarningDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016RegexLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016TupleExprElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016TupleTypeElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017AccessorParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017AvailabilityEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017CodeBlockItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DeinitializerDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DictionaryElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ExpressionPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ExpressionSegmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017FunctionParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017FunctionSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017IdentifierPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017InheritedTypeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017InitializerClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017PoundFilePathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017PoundFunctionExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017StringLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018ElseIfContinuationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018GenericRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018GenericWhereClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018IfConfigClauseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018MemberDeclListItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PatternBindingListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019AccessLevelModifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019AccessPathComponentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019EnumCaseElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019GenericArgumentListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PoundSourceLocationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019SameTypeRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019TuplePatternElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019ValueBindingPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020ConditionElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020ConstrainedSugarTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020GenericParameterListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020OptionalChainingExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020TupleExprElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020TupleTypeElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021AvailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021BackDeployVersionListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021DictionaryElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021FunctionParameterListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022CompositionTypeElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022ConformanceRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022GenericParameterClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022GenericRequirementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023TuplePatternElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA025BackDeployVersionArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027BackDeployAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027PrimaryAssociatedTypeClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA05TokenB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06AsExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06DoStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06IfStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06IsExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA07TryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA07UnknownB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08CaseItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08DeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08EnumDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08ExprListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08ObjcNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08TypeExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrayExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrayTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrowExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09AttributeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09AwaitExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09BreakStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09CatchItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ClassDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09CodeBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09DeferStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ElseBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ForInStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09GuardStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09InOutExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ThrowStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TokenListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TupleExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TupleTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09WhileStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09YieldListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09YieldStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA0e4StmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010AccessPathB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010ImportDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010ReturnStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SourceFileB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010StructDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SwitchCaseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SwitchStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011CatchClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011ClosureExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011KeyPathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011TernaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011WhereClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012AccessorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012AccessorListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ArrayElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012CaseItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ClosureParamB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ContinueStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012DeclModifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012EnumCaseDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012FunctionDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012FunctionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012IfConfigDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012MetatypeTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ModifierListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ObjCSelectorB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012OperatorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012OptionalTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ProtocolDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ReturnClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012SequenceExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012SuperRefExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012TuplePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012VariableDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012VersionTupleB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AccessorBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AsTypePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AttributeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013CatchItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013CodeBlockItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013ExtensionDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013InheritedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013IsTypePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013ObjcNamePieceB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013PoundFileExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013PoundLineExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013StringSegmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013SubscriptDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013SubscriptExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013TypealiasDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014AssignmentExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014AttributedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014DictionaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014DictionaryTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014ExpressionStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IdentifierExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IdentifierListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IfConfigClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014MemberDeclListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014NilLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014PatternBindingB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014PoundErrorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014SpecializeExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014SwitchCaseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014TypeAnnotationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014UnknownPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CatchClauseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CompositionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CustomAttributeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015DeclarationStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015EnumCaseElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015EnumCasePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015FallthroughStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ForcedValueExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015GenericArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015InitializerDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015MemberDeclBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015OptionalPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ParameterClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundAssertStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundColumnExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundFileIDExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015WildcardPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ArrayElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ClosureParamListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ClosureSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ConditionElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016DeclNameArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FloatLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FunctionCallExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FunctionDeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016GenericParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016MemberAccessExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016PoundWarningDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016RegexLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016TupleExprElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016TupleTypeElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017AccessorParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017AvailabilityEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017CodeBlockItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DeinitializerDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DictionaryElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ExpressionPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ExpressionSegmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017FunctionParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017FunctionSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017IdentifierPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017InheritedTypeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017InitializerClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017PoundFilePathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017PoundFunctionExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017StringLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018ElseIfContinuationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018GenericRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018GenericWhereClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018IfConfigClauseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018MemberDeclListItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PatternBindingListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019AccessLevelModifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019AccessPathComponentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019EnumCaseElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019GenericArgumentListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PoundSourceLocationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019SameTypeRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019TuplePatternElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019ValueBindingPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020ConditionElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020ConstrainedSugarTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020GenericParameterListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020OptionalChainingExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020TupleExprElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020TupleTypeElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021AvailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021BackDeployVersionListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021DictionaryElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021FunctionParameterListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022CompositionTypeElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022ConformanceRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022GenericParameterClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022GenericRequirementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023TuplePatternElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA025BackDeployVersionArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027BackDeployAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027PrimaryAssociatedTypeClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA05TokenB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06AsExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06DoStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06IfStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06IsExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA07TryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA07UnknownB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08CaseItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08DeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08EnumDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08ExprListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08ObjcNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08TypeExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrayExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrayTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrowExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09AttributeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09AwaitExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09BreakStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09CatchItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ClassDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09CodeBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09DeferStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ElseBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ForInStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09GuardStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09InOutExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ThrowStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TokenListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TupleExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TupleTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09WhileStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09YieldListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09YieldStmtB0VF","s11SwiftSyntax0B8ChildrenV5index5afterAA0bC5IndexVAG_tF","s11SwiftSyntax0B8ChildrenV5index6beforeAA0bC5IndexVAG_tF","s11SwiftSyntax0B8HashablePAAE4hash4intoys6HasherVz_tF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013ParenthesizedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014IdentifiedDeclB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014WithStatementsB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA017WithTrailingCommaB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA07LabeledB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA09DeclGroupB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013ParenthesizedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013WithCodeBlockB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014IdentifiedDeclB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014WithStatementsB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA017WithTrailingCommaB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA06BracedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA07LabeledB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA09DeclGroupB0_pmF","s11SwiftSyntax0B8ProtocolPAAE11endLocation9converter19afterTrailingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE11sourceRange9converter18afterLeadingTrivia0g8TrailingI0AA06SourceE0VAA0K17LocationConverterC_S2btF","s11SwiftSyntax0B8ProtocolPAAE13startLocation9converter18afterLeadingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE13withoutTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgAA16AbsolutePositionV_tF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgSi_tF","s11SwiftSyntax0B8ProtocolPAAE15classifications2inAA0B15ClassificationsVAA15ByteSourceRangeV_tF","s11SwiftSyntax0B8ProtocolPAAE17withLeadingTriviayxAA0F0VF","s11SwiftSyntax0B8ProtocolPAAE18withTrailingTriviayxAA0F0VF","s11SwiftSyntax0B8ProtocolPAAE20withoutLeadingTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE21withoutTrailingTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE5write2toyqd__z_ts16TextOutputStreamRd__lF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA010PoundErroreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA011InitializereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA012PoundWarningeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA013DeinitializereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA014AssociatedtypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA015PrecedenceGroupeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA019PoundSourceLocationB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA04EnumeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA05ClasseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA06ImporteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA06StructeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08AccessoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08EnumCaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08FunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08IfConfigeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08OperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08ProtocoleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08VariableeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09ExtensioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09SubscripteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09TypealiaseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010AssignmenteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010DictionaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010IdentifiereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010NilLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010SpecializeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011ForcedValueeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011KeyPathBaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011ObjcKeyPatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011PoundColumneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012FloatLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012FunctionCalleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012MemberAccesseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012ObjcSelectoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012PostfixUnaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012RegexLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013ObjectLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013PoundFilePatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013PoundFunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013StringLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014BinaryOperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014BooleanLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014IntegerLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014PoundDsohandleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014PrefixOperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA015PostfixIfConfigeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA015PoundFileIDExprB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA016OptionalChainingeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017DiscardAssignmenteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017EditorPlaceholdereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017SymbolicReferenceeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017UnresolvedPatterneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA02AseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA02IseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA03TryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA04TypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05ArrayeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05ArroweB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05AwaiteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05InOuteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07ClosureeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07KeyPatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07TernaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA08SequenceeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA08SuperRefeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09PoundFileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09PoundLineeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09SubscripteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA010ExpressioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011DeclarationeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011FallthrougheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011PoundAsserteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011RepeatWhileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA02DoeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA02IfeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05BreakeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05DefereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05ForIneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05GuardeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05ThroweB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05WhileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05YieldeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA06ReturneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA06SwitcheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA08ContinueeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA010AttributedeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA010DictionaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA011CompositioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA016ClassRestrictioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA016ConstrainedSugareB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA027ImplicitlyUnwrappedOptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA05ArrayeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA06Membere10IdentifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA06Simplee10IdentifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08FunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08MetatypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08OptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA010ExpressioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA010IdentifiereB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA012ValueBindingeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA06AsTypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA06IsTypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08EnumCaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08OptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08WildcardeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010AccessPathB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010SourceFileB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010SwitchCaseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA011CatchClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA011WhereClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012AccessorListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ArrayElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012CaseItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ClosureParamB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012DeclModifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ModifierListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ObjCSelectorB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ReturnClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012VersionTupleB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013AccessorBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013AttributeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013CatchItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013CodeBlockItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013InheritedTypeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013ObjcNamePieceB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013StringSegmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014IdentifierListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014IfConfigClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014MemberDeclListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014PatternBindingB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014SwitchCaseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014TypeAnnotationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015CatchClauseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015CustomAttributeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015EnumCaseElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015GenericArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015MemberDeclBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015ParameterClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ArrayElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ClosureParamListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ClosureSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ConditionElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016DeclNameArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016FunctionDeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016GenericParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016TupleExprElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016TupleTypeElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017AccessorParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017AvailabilityEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017CodeBlockItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017DictionaryElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017ExpressionSegmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017FunctionParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017FunctionSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017InheritedTypeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017InitializerClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018ElseIfContinuationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018GenericRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018GenericWhereClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018IfConfigClauseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018MemberDeclListItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018PatternBindingListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019AccessLevelModifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019AccessPathComponentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019EnumCaseElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019GenericArgumentListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019SameTypeRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019TuplePatternElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020ConditionElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020GenericParameterListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020TupleExprElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020TupleTypeElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021AvailabilityConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021BackDeployVersionListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021DictionaryElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021FunctionParameterListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022CompositionTypeElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022ConformanceRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022GenericParameterClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022GenericRequirementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023TuplePatternElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA025BackDeployVersionArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027BackDeployAttributeSpecListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027PrimaryAssociatedTypeClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA05TokenB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA07UnknownB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08CaseItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08DeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08ExprListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08ObjcNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09AttributeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09CatchItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09CodeBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09ElseBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09TokenListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09YieldListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAFF","s11SwiftSyntax0B8RewriterC8visitAnyyAA0B0VSgAFF","s11SwiftSyntax0B8RewriterC8visitPreyyAA0B0VF","s11SwiftSyntax0B8RewriterC9visitPostyyAA0B0VF","s11SwiftSyntax0B8VerifierC8visitAnyyAA0B19VisitorContinueKindOAA0B0VF","s11SwiftSyntax10SourceEditV15intersectsRangeySbAA04BytecF0VF","s11SwiftSyntax10SourceEditV24intersectsOrTouchesRangeySbAA04BytecH0VF","s11SwiftSyntax11TriviaPieceO5write2toyxz_ts16TextOutputStreamRzlF","s11SwiftSyntax13TokenSequenceV12makeIteratorAC0F0VyF","s11SwiftSyntax13TokenSequenceV8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax13TokenSequenceV8reversedAA08ReversedcD0VyF","s11SwiftSyntax15ByteSourceRangeV10intersectsySbACF","s11SwiftSyntax15ByteSourceRangeV11intersectedyA2CF","s11SwiftSyntax15ByteSourceRangeV19intersectsOrTouchesySbACF","s11SwiftSyntax21ReversedTokenSequenceV12makeIteratorAC0G0VyF","s11SwiftSyntax21ReversedTokenSequenceV8IteratorV4nextAA0dB0VSgyF","s11SwiftSyntax21ReversedTokenSequenceV8reversedAA0dE0VyF","s11SwiftSyntax22IncrementalParseLookupV6lookUp_4kindAA0B4NodeVSgSi_s6UInt16VtF","s11SwiftSyntax23SourceLocationConverterC7isValid4line6columnSbSi_SitF","s11SwiftSyntax23SourceLocationConverterC7isValid8positionSbAA16AbsolutePositionV_tF","s11SwiftSyntax23SourceLocationConverterC8location3forAA0cD0VAA16AbsolutePositionV_tF","s11SwiftSyntax23SourceLocationConverterC8position6ofLine6columnAA16AbsolutePositionVSi_SitF","s11SwiftSyntax34IncrementalParseReusedNodeDelegateP06parsereF05range08previousF0yAA15ByteSourceRangeV_AA0bF0VtF","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC06parsereF05range08previousF0yAA15ByteSourceRangeV_AA0bF0VtF","s11SwiftSyntax6TriviaV5index5afterS2i_tF","s11SwiftSyntax6TriviaV9appendingyAcA0C5PieceOF","s11SwiftSyntax0B0V2eeoiySbAC_ACtFZ","s11SwiftSyntax0B13ChildrenIndexV1loiySbAC_ACtFZ","s11SwiftSyntax0B17ChildrenIndexDataV1loiySbAC_ACtFZ","s11SwiftSyntax0B8HashablePAAE2eeoiySbx_xtFZ","s11SwiftSyntax12SourceLengthV1loiySbAC_ACtFZ","s11SwiftSyntax12SourceLengthV1poiyA2C_ACtFZ","s11SwiftSyntax12SourceLengthV1soiyA2C_ACtFZ","s11SwiftSyntax12SourceLengthV2peoiyyACz_ACtFZ","s11SwiftSyntax12SourceLengthV2seoiyyACz_ACtFZ","s11SwiftSyntax16AbsolutePositionV1loiySbAC_ACtFZ","s11SwiftSyntax16AbsolutePositionV1poiyA2C_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV1soiyA2C_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV2peoiyyACz_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV2seoiyyACz_AA12SourceLengthVtFZ","s11SwiftSyntax9TokenKindO2eeoiySbAC_ACtFZ","s11SwiftSyntax1poiyAA6TriviaVAD_ADtF","s11SwiftSyntax15cNodeLayoutHashSiyF","s11SwiftSyntax010AccessPathB0V5Indexa","s11SwiftSyntax010AccessPathB0V7Elementa","s11SwiftSyntax012AccessorListB0V5Indexa","s11SwiftSyntax012AccessorListB0V7Elementa","s11SwiftSyntax012CaseItemListB0V5Indexa","s11SwiftSyntax012CaseItemListB0V7Elementa","s11SwiftSyntax012ModifierListB0V5Indexa","s11SwiftSyntax012ModifierListB0V7Elementa","s11SwiftSyntax012ObjCSelectorB0V5Indexa","s11SwiftSyntax012ObjCSelectorB0V7Elementa","s11SwiftSyntax013AttributeListB0V5Indexa","s11SwiftSyntax013AttributeListB0V7Elementa","s11SwiftSyntax013CatchItemListB0V5Indexa","s11SwiftSyntax013CatchItemListB0V7Elementa","s11SwiftSyntax014IdentifierListB0V5Indexa","s11SwiftSyntax014IdentifierListB0V7Elementa","s11SwiftSyntax014MemberDeclListB0V5Indexa","s11SwiftSyntax014MemberDeclListB0V7Elementa","s11SwiftSyntax014SwitchCaseListB0V5Indexa","s11SwiftSyntax014SwitchCaseListB0V7Elementa","s11SwiftSyntax015CatchClauseListB0V5Indexa","s11SwiftSyntax015CatchClauseListB0V7Elementa","s11SwiftSyntax016ArrayElementListB0V0D0a","s11SwiftSyntax016ArrayElementListB0V5Indexa","s11SwiftSyntax016ClosureParamListB0V5Indexa","s11SwiftSyntax016ClosureParamListB0V7Elementa","s11SwiftSyntax017CodeBlockItemListB0V5Indexa","s11SwiftSyntax017CodeBlockItemListB0V7Elementa","s11SwiftSyntax017InheritedTypeListB0V5Indexa","s11SwiftSyntax017InheritedTypeListB0V7Elementa","s11SwiftSyntax017NonEmptyTokenListB0V5Indexa","s11SwiftSyntax017NonEmptyTokenListB0V7Elementa","s11SwiftSyntax018IfConfigClauseListB0V5Indexa","s11SwiftSyntax018IfConfigClauseListB0V7Elementa","s11SwiftSyntax018PatternBindingListB0V5Indexa","s11SwiftSyntax018PatternBindingListB0V7Elementa","s11SwiftSyntax019EnumCaseElementListB0V0E0a","s11SwiftSyntax019EnumCaseElementListB0V5Indexa","s11SwiftSyntax019GenericArgumentListB0V5Indexa","s11SwiftSyntax019GenericArgumentListB0V7Elementa","s11SwiftSyntax020AvailabilitySpecListB0V5Indexa","s11SwiftSyntax020AvailabilitySpecListB0V7Elementa","s11SwiftSyntax020ConditionElementListB0V0D0a","s11SwiftSyntax020ConditionElementListB0V5Indexa","s11SwiftSyntax020DeclNameArgumentListB0V5Indexa","s11SwiftSyntax020DeclNameArgumentListB0V7Elementa","s11SwiftSyntax020GenericParameterListB0V5Indexa","s11SwiftSyntax020GenericParameterListB0V7Elementa","s11SwiftSyntax020TupleExprElementListB0V0E0a","s11SwiftSyntax020TupleExprElementListB0V5Indexa","s11SwiftSyntax020TupleTypeElementListB0V0E0a","s11SwiftSyntax020TupleTypeElementListB0V5Indexa","s11SwiftSyntax021BackDeployVersionListB0V5Indexa","s11SwiftSyntax021BackDeployVersionListB0V7Elementa","s11SwiftSyntax021DictionaryElementListB0V0D0a","s11SwiftSyntax021DictionaryElementListB0V5Indexa","s11SwiftSyntax021FunctionParameterListB0V5Indexa","s11SwiftSyntax021FunctionParameterListB0V7Elementa","s11SwiftSyntax021StringLiteralSegmentsB0V5Indexa","s11SwiftSyntax021StringLiteralSegmentsB0V7Elementa","s11SwiftSyntax022ClosureCaptureItemListB0V5Indexa","s11SwiftSyntax022ClosureCaptureItemListB0V7Elementa","s11SwiftSyntax022GenericRequirementListB0V5Indexa","s11SwiftSyntax022GenericRequirementListB0V7Elementa","s11SwiftSyntax023PrecedenceGroupNameListB0V5Indexa","s11SwiftSyntax023PrecedenceGroupNameListB0V7Elementa","s11SwiftSyntax023TuplePatternElementListB0V0E0a","s11SwiftSyntax023TuplePatternElementListB0V5Indexa","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5Indexa","s11SwiftSyntax025PrimaryAssociatedTypeListB0V7Elementa","s11SwiftSyntax026CompositionTypeElementListB0V0E0a","s11SwiftSyntax026CompositionTypeElementListB0V5Indexa","s11SwiftSyntax026DifferentiabilityParamListB0V5Indexa","s11SwiftSyntax026DifferentiabilityParamListB0V7Elementa","s11SwiftSyntax027SpecializeAttributeSpecListB0V5Indexa","s11SwiftSyntax027SpecializeAttributeSpecListB0V7Elementa","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5Indexa","s11SwiftSyntax028PrecedenceGroupAttributeListB0V7Elementa","s11SwiftSyntax034MultipleTrailingClosureElementListB0V0F0a","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5Indexa","s11SwiftSyntax08ExprListB0V5Indexa","s11SwiftSyntax08ExprListB0V7Elementa","s11SwiftSyntax08ObjcNameB0V5Indexa","s11SwiftSyntax08ObjcNameB0V7Elementa","s11SwiftSyntax09TokenListB0V5Indexa","s11SwiftSyntax09TokenListB0V7Elementa","s11SwiftSyntax0B8ChildrenV5Indexa","s11SwiftSyntax0B8ChildrenV7Elementa","s11SwiftSyntax11CClientNodea","s11SwiftSyntax11CSyntaxKinda","sSE","sSH","sSH4hash4intoys6HasherVz_tF","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK5index5after5IndexQzAD_tF","sSK5index6before5IndexQzAD_tF","sSK8distance4from2toSi5IndexQz_AEtF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSKsE5index_8offsetBy5IndexQzAD_SitF","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8distance4from2toSi5IndexQz_AEtF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST12makeIterator0B0QzyF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sST8IteratorQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6prefix5whileSay7ElementQzGSbADKXE_tKF","sSTsE6prefixys14PrefixSequenceVyxGSiF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE6suffixySay7ElementQzGSiF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8dropLastySay7ElementQzGSiF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsE9dropFirstys04DropB8SequenceVyxGSiF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSY","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSb","sSe","sSe4fromxs7Decoder_p_tKcfc","sSi","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5countSivp","sSl5index5after5IndexQzAD_tF","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSlsE5index_8offsetBy5IndexQzAD_SitF","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE6suffixy11SubSequenceQzSiF","sSlsE7isEmptySbvp","sSlsE8distance4from2toSi5IndexQz_AEtF","sSlsE8dropLasty11SubSequenceQzSiF","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSt","sSt4next7ElementQzSgyF","sSv","ss16TextOutputStreamP","ss17CustomReflectableP","ss17CustomReflectableP12customMirrors0D0Vvp","ss20TextOutputStreamableP","ss20TextOutputStreamableP5write2toyqd__z_ts0aB6StreamRd__lF","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss23ExpressibleByNilLiteralP","ss23ExpressibleByNilLiteralP03nilD0xyt_tcfc","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss4Voida","ss5ErrorP","ss5ErrorP10FoundationE20localizedDescriptionSSvp","ss6HasherV","ss6MirrorV","ss6UInt16V","ss7DecoderP","ss8SendableP"],"vertices":[{"p":["ParenthesizedSyntax"],"f":[["protocol",12],[" ",17],["ParenthesizedSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["ParenthesizedSyntax",7]]},{"p":["WithCodeBlockSyntax"],"f":[["protocol",12],[" ",17],["WithCodeBlockSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithCodeBlockSyntax",7]]},{"p":["IdentifiedDeclSyntax"],"f":[["protocol",12],[" ",17],["IdentifiedDeclSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["IdentifiedDeclSyntax",7]]},{"p":["WithStatementsSyntax"],"f":[["protocol",12],[" ",17],["WithStatementsSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithStatementsSyntax",7]]},{"p":["WithTrailingCommaSyntax"],"f":[["protocol",12],[" ",17],["WithTrailingCommaSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithTrailingCommaSyntax",7]]},{"p":["DeclSyntaxProtocol"],"f":[["protocol",12],[" ",17],["DeclSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["DeclSyntaxProtocol",7]],"d":"Protocol to which all `DeclSyntax` nodes conform. Extension point to add\ncommon methods to all `DeclSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["ExprSyntaxProtocol"],"f":[["protocol",12],[" ",17],["ExprSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["ExprSyntaxProtocol",7]],"d":"Protocol to which all `ExprSyntax` nodes conform. Extension point to add\ncommon methods to all `ExprSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["StmtSyntaxProtocol"],"f":[["protocol",12],[" ",17],["StmtSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["StmtSyntaxProtocol",7]],"d":"Protocol to which all `StmtSyntax` nodes conform. Extension point to add\ncommon methods to all `StmtSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["TypeSyntaxProtocol"],"f":[["protocol",12],[" ",17],["TypeSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["TypeSyntaxProtocol",7]],"d":"Protocol to which all `TypeSyntax` nodes conform. Extension point to add\ncommon methods to all `TypeSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["BracedSyntax"],"f":[["protocol",12],[" ",17],["BracedSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["BracedSyntax",7]]},{"p":["LabeledSyntax"],"f":[["protocol",12],[" ",17],["LabeledSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["LabeledSyntax",7]]},{"p":["PatternSyntaxProtocol"],"f":[["protocol",12],[" ",17],["PatternSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["PatternSyntaxProtocol",7]],"d":"Protocol to which all `PatternSyntax` nodes conform. Extension point to add\ncommon methods to all `PatternSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["DeclGroupSyntax"],"f":[["protocol",12],[" ",17],["DeclGroupSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["DeclGroupSyntax",7]]},{"p":["SyntaxCollection"],"f":[["protocol",12],[" ",17],["SyntaxCollection",7],[" : ",17],["Sequence",18,7773],[", ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["SyntaxCollection",7]]},{"p":["SyntaxHashable"],"f":[["protocol",12],[" ",17],["SyntaxHashable",7],[" : ",17],["Hashable",18,7737]],"s":[["protocol",12],[" ",17],["SyntaxHashable",7]],"d":"Protocol that provides a common Hashable implementation for all syntax nodes"},{"p":["SyntaxProtocol"],"f":[["protocol",12],[" ",17],["SyntaxProtocol",7],[" : ",17],["CustomDebugStringConvertible",18,7891],[", ",17],["CustomStringConvertible",18,7884],[", ",17],["TextOutputStreamable",18,7882]],"s":[["protocol",12],[" ",17],["SyntaxProtocol",7]],"d":"Provide common functionality for specialized syntax nodes. Extend this\nprotocol to provide common functionality for all syntax nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["IncrementalParseReusedNodeDelegate"],"f":[["protocol",12],[" ",17],["IncrementalParseReusedNodeDelegate",7]],"s":[["protocol",12],[" ",17],["IncrementalParseReusedNodeDelegate",7]],"d":"Accepts the re-used `Syntax` nodes that `IncrementalParseTransition`\ndetermined they should be re-used for a parse invocation.\n\nThe client can use this information to potentially avoid unnecessary work\nfor regions of the source that have not changed.\n\nThis is also used for testing purposes to ensure incremental reparsing\nworked as expected."},{"p":["SyntaxVerifierError"],"f":[["enum",12],[" ",17],["SyntaxVerifierError",7]],"s":[["enum",12],[" ",17],["SyntaxVerifierError",7]]},{"p":["SyntaxClassification"],"f":[["enum",12],[" ",17],["SyntaxClassification",7]],"s":[["enum",12],[" ",17],["SyntaxClassification",7]]},{"p":["SyntaxVisitorContinueKind"],"f":[["enum",12],[" ",17],["SyntaxVisitorContinueKind",7]],"s":[["enum",12],[" ",17],["SyntaxVisitorContinueKind",7]],"d":"The enum describes how the SyntaxVistor should continue after visiting\nthe current node."},{"p":["SyntaxEnum"],"f":[["enum",12],[" ",17],["SyntaxEnum",7]],"s":[["enum",12],[" ",17],["SyntaxEnum",7]],"d":"Enum to exhaustively switch over all different syntax nodes."},{"p":["SyntaxFactory"],"f":[["enum",12],[" ",17],["SyntaxFactory",7]],"s":[["enum",12],[" ",17],["SyntaxFactory",7]]},{"p":["TriviaPiece"],"f":[["enum",12],[" ",17],["TriviaPiece",7]],"s":[["enum",12],[" ",17],["TriviaPiece",7]],"d":"A contiguous stretch of a single kind of trivia. The constituent part of\na `Trivia` collection.\n\nFor example, four spaces would be represented by\n`.spaces(4)`\n\nIn general, you should deal with the actual Trivia collection instead\nof individual pieces whenever possible."},{"p":["SourcePresence"],"f":[["enum",12],[" ",17],["SourcePresence",7]],"s":[["enum",12],[" ",17],["SourcePresence",7]],"d":"An indicator of whether a Syntax node was found or written in the source.\n\nA `missing` node does not mean, necessarily, that the source item is\nconsidered \"implicit\", but rather that it was not found in the source."},{"p":["TokenKind"],"f":[["enum",12],[" ",17],["TokenKind",7]],"s":[["enum",12],[" ",17],["TokenKind",7]],"d":"Enumerates the kinds of tokens in the Swift language."},{"p":["AccessPathSyntax"],"f":[["struct",12],[" ",17],["AccessPathSyntax",7]],"s":[["struct",12],[" ",17],["AccessPathSyntax",7]],"d":"`AccessPathSyntax` represents a collection of one or more\n`AccessPathComponentSyntax` nodes. AccessPathSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AccessPathSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ImportDeclSyntax"],"f":[["struct",12],[" ",17],["ImportDeclSyntax",7]],"s":[["struct",12],[" ",17],["ImportDeclSyntax",7]]},{"p":["ImportDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImportDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImportDeclSyntaxBuilder",7]]},{"p":["ReturnStmtSyntax"],"f":[["struct",12],[" ",17],["ReturnStmtSyntax",7]],"s":[["struct",12],[" ",17],["ReturnStmtSyntax",7]]},{"p":["ReturnStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ReturnStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ReturnStmtSyntaxBuilder",7]]},{"p":["SourceFileSyntax"],"f":[["struct",12],[" ",17],["SourceFileSyntax",7]],"s":[["struct",12],[" ",17],["SourceFileSyntax",7]]},{"p":["SourceFileSyntaxBuilder"],"f":[["struct",12],[" ",17],["SourceFileSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SourceFileSyntaxBuilder",7]]},{"p":["StructDeclSyntax"],"f":[["struct",12],[" ",17],["StructDeclSyntax",7]],"s":[["struct",12],[" ",17],["StructDeclSyntax",7]]},{"p":["StructDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["StructDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StructDeclSyntaxBuilder",7]]},{"p":["SwitchCaseSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseSyntax",7]]},{"p":["SwitchCaseSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchCaseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseSyntaxBuilder",7]]},{"p":["SwitchStmtSyntax"],"f":[["struct",12],[" ",17],["SwitchStmtSyntax",7]],"s":[["struct",12],[" ",17],["SwitchStmtSyntax",7]]},{"p":["SwitchStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchStmtSyntaxBuilder",7]]},{"p":["CatchClauseSyntax"],"f":[["struct",12],[" ",17],["CatchClauseSyntax",7]],"s":[["struct",12],[" ",17],["CatchClauseSyntax",7]]},{"p":["CatchClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["CatchClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CatchClauseSyntaxBuilder",7]]},{"p":["ClosureExprSyntax"],"f":[["struct",12],[" ",17],["ClosureExprSyntax",7]],"s":[["struct",12],[" ",17],["ClosureExprSyntax",7]]},{"p":["ClosureExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureExprSyntaxBuilder",7]]},{"p":["KeyPathExprSyntax"],"f":[["struct",12],[" ",17],["KeyPathExprSyntax",7]],"s":[["struct",12],[" ",17],["KeyPathExprSyntax",7]]},{"p":["KeyPathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["KeyPathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["KeyPathExprSyntaxBuilder",7]]},{"p":["TernaryExprSyntax"],"f":[["struct",12],[" ",17],["TernaryExprSyntax",7]],"s":[["struct",12],[" ",17],["TernaryExprSyntax",7]]},{"p":["TernaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TernaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TernaryExprSyntaxBuilder",7]]},{"p":["UnknownDeclSyntax"],"f":[["struct",12],[" ",17],["UnknownDeclSyntax",7]],"s":[["struct",12],[" ",17],["UnknownDeclSyntax",7]]},{"p":["UnknownExprSyntax"],"f":[["struct",12],[" ",17],["UnknownExprSyntax",7]],"s":[["struct",12],[" ",17],["UnknownExprSyntax",7]]},{"p":["UnknownStmtSyntax"],"f":[["struct",12],[" ",17],["UnknownStmtSyntax",7]],"s":[["struct",12],[" ",17],["UnknownStmtSyntax",7]]},{"p":["UnknownTypeSyntax"],"f":[["struct",12],[" ",17],["UnknownTypeSyntax",7]],"s":[["struct",12],[" ",17],["UnknownTypeSyntax",7]]},{"p":["WhereClauseSyntax"],"f":[["struct",12],[" ",17],["WhereClauseSyntax",7]],"s":[["struct",12],[" ",17],["WhereClauseSyntax",7]]},{"p":["WhereClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["WhereClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WhereClauseSyntaxBuilder",7]]},{"p":["AccessorDeclSyntax"],"f":[["struct",12],[" ",17],["AccessorDeclSyntax",7]],"s":[["struct",12],[" ",17],["AccessorDeclSyntax",7]]},{"p":["AccessorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorDeclSyntaxBuilder",7]]},{"p":["AccessorListSyntax"],"f":[["struct",12],[" ",17],["AccessorListSyntax",7]],"s":[["struct",12],[" ",17],["AccessorListSyntax",7]],"d":"`AccessorListSyntax` represents a collection of one or more\n`AccessorDeclSyntax` nodes. AccessorListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AccessorListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ArrayElementSyntax"],"f":[["struct",12],[" ",17],["ArrayElementSyntax",7]],"s":[["struct",12],[" ",17],["ArrayElementSyntax",7]]},{"p":["ArrayElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayElementSyntaxBuilder",7]]},{"p":["CaseItemListSyntax"],"f":[["struct",12],[" ",17],["CaseItemListSyntax",7]],"s":[["struct",12],[" ",17],["CaseItemListSyntax",7]],"d":"`CaseItemListSyntax` represents a collection of one or more\n`CaseItemSyntax` nodes. CaseItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CaseItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ClosureParamSyntax"],"f":[["struct",12],[" ",17],["ClosureParamSyntax",7]],"s":[["struct",12],[" ",17],["ClosureParamSyntax",7]]},{"p":["ClosureParamSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureParamSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureParamSyntaxBuilder",7]]},{"p":["ContinueStmtSyntax"],"f":[["struct",12],[" ",17],["ContinueStmtSyntax",7]],"s":[["struct",12],[" ",17],["ContinueStmtSyntax",7]]},{"p":["ContinueStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ContinueStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ContinueStmtSyntaxBuilder",7]]},{"p":["DeclModifierSyntax"],"f":[["struct",12],[" ",17],["DeclModifierSyntax",7]],"s":[["struct",12],[" ",17],["DeclModifierSyntax",7]]},{"p":["DeclModifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclModifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclModifierSyntaxBuilder",7]]},{"p":["EnumCaseDeclSyntax"],"f":[["struct",12],[" ",17],["EnumCaseDeclSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseDeclSyntax",7]],"d":"\nA `case` declaration of a Swift `enum`. It can have 1 or more\n`EnumCaseElement`s inside, each declaring a different case of the\nenum.\n"},{"p":["EnumCaseDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCaseDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseDeclSyntaxBuilder",7]]},{"p":["FunctionDeclSyntax"],"f":[["struct",12],[" ",17],["FunctionDeclSyntax",7]],"s":[["struct",12],[" ",17],["FunctionDeclSyntax",7]]},{"p":["FunctionDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionDeclSyntaxBuilder",7]]},{"p":["FunctionTypeSyntax"],"f":[["struct",12],[" ",17],["FunctionTypeSyntax",7]],"s":[["struct",12],[" ",17],["FunctionTypeSyntax",7]]},{"p":["FunctionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionTypeSyntaxBuilder",7]]},{"p":["IfConfigDeclSyntax"],"f":[["struct",12],[" ",17],["IfConfigDeclSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigDeclSyntax",7]]},{"p":["IfConfigDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfConfigDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigDeclSyntaxBuilder",7]]},{"p":["MetatypeTypeSyntax"],"f":[["struct",12],[" ",17],["MetatypeTypeSyntax",7]],"s":[["struct",12],[" ",17],["MetatypeTypeSyntax",7]]},{"p":["MetatypeTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["MetatypeTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MetatypeTypeSyntaxBuilder",7]]},{"p":["ModifierListSyntax"],"f":[["struct",12],[" ",17],["ModifierListSyntax",7]],"s":[["struct",12],[" ",17],["ModifierListSyntax",7]],"d":"`ModifierListSyntax` represents a collection of one or more\n`DeclModifierSyntax` nodes. ModifierListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ModifierListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ObjCSelectorSyntax"],"f":[["struct",12],[" ",17],["ObjCSelectorSyntax",7]],"s":[["struct",12],[" ",17],["ObjCSelectorSyntax",7]],"d":"`ObjCSelectorSyntax` represents a collection of one or more\n`ObjCSelectorPieceSyntax` nodes. ObjCSelectorSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ObjCSelectorSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["OperatorDeclSyntax"],"f":[["struct",12],[" ",17],["OperatorDeclSyntax",7]],"s":[["struct",12],[" ",17],["OperatorDeclSyntax",7]],"d":"A Swift `operator` declaration."},{"p":["OperatorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["OperatorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OperatorDeclSyntaxBuilder",7]]},{"p":["OptionalTypeSyntax"],"f":[["struct",12],[" ",17],["OptionalTypeSyntax",7]],"s":[["struct",12],[" ",17],["OptionalTypeSyntax",7]]},{"p":["OptionalTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalTypeSyntaxBuilder",7]]},{"p":["ProtocolDeclSyntax"],"f":[["struct",12],[" ",17],["ProtocolDeclSyntax",7]],"s":[["struct",12],[" ",17],["ProtocolDeclSyntax",7]]},{"p":["ProtocolDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ProtocolDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ProtocolDeclSyntaxBuilder",7]]},{"p":["ReturnClauseSyntax"],"f":[["struct",12],[" ",17],["ReturnClauseSyntax",7]],"s":[["struct",12],[" ",17],["ReturnClauseSyntax",7]]},{"p":["ReturnClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["ReturnClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ReturnClauseSyntaxBuilder",7]]},{"p":["SequenceExprSyntax"],"f":[["struct",12],[" ",17],["SequenceExprSyntax",7]],"s":[["struct",12],[" ",17],["SequenceExprSyntax",7]]},{"p":["SequenceExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SequenceExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SequenceExprSyntaxBuilder",7]]},{"p":["SuperRefExprSyntax"],"f":[["struct",12],[" ",17],["SuperRefExprSyntax",7]],"s":[["struct",12],[" ",17],["SuperRefExprSyntax",7]]},{"p":["SuperRefExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SuperRefExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SuperRefExprSyntaxBuilder",7]]},{"p":["TuplePatternSyntax"],"f":[["struct",12],[" ",17],["TuplePatternSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternSyntax",7]]},{"p":["TuplePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["TuplePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternSyntaxBuilder",7]]},{"p":["VariableDeclSyntax"],"f":[["struct",12],[" ",17],["VariableDeclSyntax",7]],"s":[["struct",12],[" ",17],["VariableDeclSyntax",7]]},{"p":["VariableDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["VariableDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["VariableDeclSyntaxBuilder",7]]},{"p":["VersionTupleSyntax"],"f":[["struct",12],[" ",17],["VersionTupleSyntax",7]],"s":[["struct",12],[" ",17],["VersionTupleSyntax",7]],"d":"\nA version number of the form major.minor.patch in which the minor\nand patch part may be omitted.\n"},{"p":["VersionTupleSyntaxBuilder"],"f":[["struct",12],[" ",17],["VersionTupleSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["VersionTupleSyntaxBuilder",7]]},{"p":["AccessorBlockSyntax"],"f":[["struct",12],[" ",17],["AccessorBlockSyntax",7]],"s":[["struct",12],[" ",17],["AccessorBlockSyntax",7]]},{"p":["AccessorBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorBlockSyntaxBuilder",7]]},{"p":["AsTypePatternSyntax"],"f":[["struct",12],[" ",17],["AsTypePatternSyntax",7]],"s":[["struct",12],[" ",17],["AsTypePatternSyntax",7]]},{"p":["AsTypePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["AsTypePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AsTypePatternSyntaxBuilder",7]]},{"p":["AttributeListSyntax"],"f":[["struct",12],[" ",17],["AttributeListSyntax",7]],"s":[["struct",12],[" ",17],["AttributeListSyntax",7]],"d":"`AttributeListSyntax` represents a collection of one or more\n`Syntax` nodes. AttributeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AttributeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["CatchItemListSyntax"],"f":[["struct",12],[" ",17],["CatchItemListSyntax",7]],"s":[["struct",12],[" ",17],["CatchItemListSyntax",7]],"d":"`CatchItemListSyntax` represents a collection of one or more\n`CatchItemSyntax` nodes. CatchItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CatchItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["CodeBlockItemSyntax"],"f":[["struct",12],[" ",17],["CodeBlockItemSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockItemSyntax",7]],"d":"\nA CodeBlockItem is any Syntax node that appears on its own line inside\na CodeBlock.\n"},{"p":["CodeBlockItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CodeBlockItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockItemSyntaxBuilder",7]]},{"p":["ExtensionDeclSyntax"],"f":[["struct",12],[" ",17],["ExtensionDeclSyntax",7]],"s":[["struct",12],[" ",17],["ExtensionDeclSyntax",7]]},{"p":["ExtensionDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExtensionDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExtensionDeclSyntaxBuilder",7]]},{"p":["InheritedTypeSyntax"],"f":[["struct",12],[" ",17],["InheritedTypeSyntax",7]],"s":[["struct",12],[" ",17],["InheritedTypeSyntax",7]]},{"p":["InheritedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["InheritedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InheritedTypeSyntaxBuilder",7]]},{"p":["IsTypePatternSyntax"],"f":[["struct",12],[" ",17],["IsTypePatternSyntax",7]],"s":[["struct",12],[" ",17],["IsTypePatternSyntax",7]]},{"p":["IsTypePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["IsTypePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IsTypePatternSyntaxBuilder",7]]},{"p":["ObjcNamePieceSyntax"],"f":[["struct",12],[" ",17],["ObjcNamePieceSyntax",7]],"s":[["struct",12],[" ",17],["ObjcNamePieceSyntax",7]]},{"p":["ObjcNamePieceSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcNamePieceSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcNamePieceSyntaxBuilder",7]]},{"p":["PoundFileExprSyntax"],"f":[["struct",12],[" ",17],["PoundFileExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFileExprSyntax",7]]},{"p":["PoundFileExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFileExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFileExprSyntaxBuilder",7]]},{"p":["PoundLineExprSyntax"],"f":[["struct",12],[" ",17],["PoundLineExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundLineExprSyntax",7]]},{"p":["PoundLineExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundLineExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundLineExprSyntaxBuilder",7]]},{"p":["StringSegmentSyntax"],"f":[["struct",12],[" ",17],["StringSegmentSyntax",7]],"s":[["struct",12],[" ",17],["StringSegmentSyntax",7]]},{"p":["StringSegmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["StringSegmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StringSegmentSyntaxBuilder",7]]},{"p":["SubscriptDeclSyntax"],"f":[["struct",12],[" ",17],["SubscriptDeclSyntax",7]],"s":[["struct",12],[" ",17],["SubscriptDeclSyntax",7]]},{"p":["SubscriptDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["SubscriptDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SubscriptDeclSyntaxBuilder",7]]},{"p":["SubscriptExprSyntax"],"f":[["struct",12],[" ",17],["SubscriptExprSyntax",7]],"s":[["struct",12],[" ",17],["SubscriptExprSyntax",7]]},{"p":["SubscriptExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SubscriptExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SubscriptExprSyntaxBuilder",7]]},{"p":["TypealiasDeclSyntax"],"f":[["struct",12],[" ",17],["TypealiasDeclSyntax",7]],"s":[["struct",12],[" ",17],["TypealiasDeclSyntax",7]]},{"p":["TypealiasDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypealiasDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypealiasDeclSyntaxBuilder",7]]},{"p":["AssignmentExprSyntax"],"f":[["struct",12],[" ",17],["AssignmentExprSyntax",7]],"s":[["struct",12],[" ",17],["AssignmentExprSyntax",7]]},{"p":["AssignmentExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AssignmentExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AssignmentExprSyntaxBuilder",7]]},{"p":["AttributedTypeSyntax"],"f":[["struct",12],[" ",17],["AttributedTypeSyntax",7]],"s":[["struct",12],[" ",17],["AttributedTypeSyntax",7]]},{"p":["AttributedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["AttributedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AttributedTypeSyntaxBuilder",7]]},{"p":["DictionaryExprSyntax"],"f":[["struct",12],[" ",17],["DictionaryExprSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryExprSyntax",7]]},{"p":["DictionaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryExprSyntaxBuilder",7]]},{"p":["DictionaryTypeSyntax"],"f":[["struct",12],[" ",17],["DictionaryTypeSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryTypeSyntax",7]]},{"p":["DictionaryTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryTypeSyntaxBuilder",7]]},{"p":["ExpressionStmtSyntax"],"f":[["struct",12],[" ",17],["ExpressionStmtSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionStmtSyntax",7]]},{"p":["ExpressionStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionStmtSyntaxBuilder",7]]},{"p":["IdentifierExprSyntax"],"f":[["struct",12],[" ",17],["IdentifierExprSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierExprSyntax",7]]},{"p":["IdentifierExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IdentifierExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierExprSyntaxBuilder",7]]},{"p":["IdentifierListSyntax"],"f":[["struct",12],[" ",17],["IdentifierListSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierListSyntax",7]],"d":"`IdentifierListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. IdentifierListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["IdentifierListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["IfConfigClauseSyntax"],"f":[["struct",12],[" ",17],["IfConfigClauseSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigClauseSyntax",7]]},{"p":["IfConfigClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfConfigClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigClauseSyntaxBuilder",7]]},{"p":["MemberDeclListSyntax"],"f":[["struct",12],[" ",17],["MemberDeclListSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclListSyntax",7]],"d":"`MemberDeclListSyntax` represents a collection of one or more\n`MemberDeclListItemSyntax` nodes. MemberDeclListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["MemberDeclListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["NilLiteralExprSyntax"],"f":[["struct",12],[" ",17],["NilLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["NilLiteralExprSyntax",7]]},{"p":["NilLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["NilLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["NilLiteralExprSyntaxBuilder",7]]},{"p":["PatternBindingSyntax"],"f":[["struct",12],[" ",17],["PatternBindingSyntax",7]],"s":[["struct",12],[" ",17],["PatternBindingSyntax",7]]},{"p":["PatternBindingSyntaxBuilder"],"f":[["struct",12],[" ",17],["PatternBindingSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PatternBindingSyntaxBuilder",7]]},{"p":["PoundErrorDeclSyntax"],"f":[["struct",12],[" ",17],["PoundErrorDeclSyntax",7]],"s":[["struct",12],[" ",17],["PoundErrorDeclSyntax",7]]},{"p":["PoundErrorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundErrorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundErrorDeclSyntaxBuilder",7]]},{"p":["SpecializeExprSyntax"],"f":[["struct",12],[" ",17],["SpecializeExprSyntax",7]],"s":[["struct",12],[" ",17],["SpecializeExprSyntax",7]]},{"p":["SpecializeExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SpecializeExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SpecializeExprSyntaxBuilder",7]]},{"p":["SwitchCaseListSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseListSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseListSyntax",7]],"d":"`SwitchCaseListSyntax` represents a collection of one or more\n`Syntax` nodes. SwitchCaseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["SwitchCaseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["TypeAnnotationSyntax"],"f":[["struct",12],[" ",17],["TypeAnnotationSyntax",7]],"s":[["struct",12],[" ",17],["TypeAnnotationSyntax",7]]},{"p":["TypeAnnotationSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeAnnotationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeAnnotationSyntaxBuilder",7]]},{"p":["UnknownPatternSyntax"],"f":[["struct",12],[" ",17],["UnknownPatternSyntax",7]],"s":[["struct",12],[" ",17],["UnknownPatternSyntax",7]]},{"p":["CatchClauseListSyntax"],"f":[["struct",12],[" ",17],["CatchClauseListSyntax",7]],"s":[["struct",12],[" ",17],["CatchClauseListSyntax",7]],"d":"`CatchClauseListSyntax` represents a collection of one or more\n`CatchClauseSyntax` nodes. CatchClauseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CatchClauseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["CompositionTypeSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeSyntax",7]]},{"p":["CompositionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["CompositionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeSyntaxBuilder",7]]},{"p":["CustomAttributeSyntax"],"f":[["struct",12],[" ",17],["CustomAttributeSyntax",7]],"s":[["struct",12],[" ",17],["CustomAttributeSyntax",7]],"d":"\nA custom `@` attribute.\n"},{"p":["CustomAttributeSyntaxBuilder"],"f":[["struct",12],[" ",17],["CustomAttributeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CustomAttributeSyntaxBuilder",7]]},{"p":["DeclarationStmtSyntax"],"f":[["struct",12],[" ",17],["DeclarationStmtSyntax",7]],"s":[["struct",12],[" ",17],["DeclarationStmtSyntax",7]]},{"p":["DeclarationStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclarationStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclarationStmtSyntaxBuilder",7]]},{"p":["EnumCaseElementSyntax"],"f":[["struct",12],[" ",17],["EnumCaseElementSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseElementSyntax",7]],"d":"\nAn element of an enum case, containing the name of the case and,\noptionally, either associated values or an assignment to a raw value.\n"},{"p":["EnumCaseElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCaseElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseElementSyntaxBuilder",7]]},{"p":["EnumCasePatternSyntax"],"f":[["struct",12],[" ",17],["EnumCasePatternSyntax",7]],"s":[["struct",12],[" ",17],["EnumCasePatternSyntax",7]]},{"p":["EnumCasePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCasePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCasePatternSyntaxBuilder",7]]},{"p":["FallthroughStmtSyntax"],"f":[["struct",12],[" ",17],["FallthroughStmtSyntax",7]],"s":[["struct",12],[" ",17],["FallthroughStmtSyntax",7]]},{"p":["FallthroughStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["FallthroughStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FallthroughStmtSyntaxBuilder",7]]},{"p":["ForcedValueExprSyntax"],"f":[["struct",12],[" ",17],["ForcedValueExprSyntax",7]],"s":[["struct",12],[" ",17],["ForcedValueExprSyntax",7]]},{"p":["ForcedValueExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ForcedValueExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ForcedValueExprSyntaxBuilder",7]]},{"p":["GenericArgumentSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentSyntax",7]]},{"p":["GenericArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentSyntaxBuilder",7]]},{"p":["InitializerDeclSyntax"],"f":[["struct",12],[" ",17],["InitializerDeclSyntax",7]],"s":[["struct",12],[" ",17],["InitializerDeclSyntax",7]]},{"p":["InitializerDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["InitializerDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InitializerDeclSyntaxBuilder",7]]},{"p":["KeyPathBaseExprSyntax"],"f":[["struct",12],[" ",17],["KeyPathBaseExprSyntax",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExprSyntax",7]]},{"p":["KeyPathBaseExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",7]]},{"p":["MemberDeclBlockSyntax"],"f":[["struct",12],[" ",17],["MemberDeclBlockSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclBlockSyntax",7]]},{"p":["MemberDeclBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberDeclBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclBlockSyntaxBuilder",7]]},{"p":["ObjcKeyPathExprSyntax"],"f":[["struct",12],[" ",17],["ObjcKeyPathExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExprSyntax",7]]},{"p":["ObjcKeyPathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",7]]},{"p":["OptionalPatternSyntax"],"f":[["struct",12],[" ",17],["OptionalPatternSyntax",7]],"s":[["struct",12],[" ",17],["OptionalPatternSyntax",7]]},{"p":["OptionalPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalPatternSyntaxBuilder",7]]},{"p":["ParameterClauseSyntax"],"f":[["struct",12],[" ",17],["ParameterClauseSyntax",7]],"s":[["struct",12],[" ",17],["ParameterClauseSyntax",7]]},{"p":["ParameterClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["ParameterClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ParameterClauseSyntaxBuilder",7]]},{"p":["PoundAssertStmtSyntax"],"f":[["struct",12],[" ",17],["PoundAssertStmtSyntax",7]],"s":[["struct",12],[" ",17],["PoundAssertStmtSyntax",7]]},{"p":["PoundAssertStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundAssertStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundAssertStmtSyntaxBuilder",7]]},{"p":["PoundColumnExprSyntax"],"f":[["struct",12],[" ",17],["PoundColumnExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundColumnExprSyntax",7]]},{"p":["PoundColumnExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundColumnExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundColumnExprSyntaxBuilder",7]]},{"p":["PoundFileIDExprSyntax"],"f":[["struct",12],[" ",17],["PoundFileIDExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFileIDExprSyntax",7]]},{"p":["PoundFileIDExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFileIDExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFileIDExprSyntaxBuilder",7]]},{"p":["RepeatWhileStmtSyntax"],"f":[["struct",12],[" ",17],["RepeatWhileStmtSyntax",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmtSyntax",7]]},{"p":["RepeatWhileStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",7]]},{"p":["SwitchCaseLabelSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseLabelSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabelSyntax",7]]},{"p":["SwitchCaseLabelSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",7]]},{"p":["WildcardPatternSyntax"],"f":[["struct",12],[" ",17],["WildcardPatternSyntax",7]],"s":[["struct",12],[" ",17],["WildcardPatternSyntax",7]]},{"p":["WildcardPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["WildcardPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WildcardPatternSyntaxBuilder",7]]},{"p":["ArrayElementListSyntax"],"f":[["struct",12],[" ",17],["ArrayElementListSyntax",7]],"s":[["struct",12],[" ",17],["ArrayElementListSyntax",7]],"d":"`ArrayElementListSyntax` represents a collection of one or more\n`ArrayElementSyntax` nodes. ArrayElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ArrayElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ClosureParamListSyntax"],"f":[["struct",12],[" ",17],["ClosureParamListSyntax",7]],"s":[["struct",12],[" ",17],["ClosureParamListSyntax",7]],"d":"`ClosureParamListSyntax` represents a collection of one or more\n`ClosureParamSyntax` nodes. ClosureParamListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ClosureParamListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ClosureSignatureSyntax"],"f":[["struct",12],[" ",17],["ClosureSignatureSyntax",7]],"s":[["struct",12],[" ",17],["ClosureSignatureSyntax",7]]},{"p":["ClosureSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureSignatureSyntaxBuilder",7]]},{"p":["ConditionElementSyntax"],"f":[["struct",12],[" ",17],["ConditionElementSyntax",7]],"s":[["struct",12],[" ",17],["ConditionElementSyntax",7]]},{"p":["ConditionElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ConditionElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ConditionElementSyntaxBuilder",7]]},{"p":["DeclNameArgumentSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentSyntax",7]]},{"p":["DeclNameArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentSyntaxBuilder",7]]},{"p":["FloatLiteralExprSyntax"],"f":[["struct",12],[" ",17],["FloatLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["FloatLiteralExprSyntax",7]]},{"p":["FloatLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["FloatLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FloatLiteralExprSyntaxBuilder",7]]},{"p":["FunctionCallExprSyntax"],"f":[["struct",12],[" ",17],["FunctionCallExprSyntax",7]],"s":[["struct",12],[" ",17],["FunctionCallExprSyntax",7]]},{"p":["FunctionCallExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionCallExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionCallExprSyntaxBuilder",7]]},{"p":["FunctionDeclNameSyntax"],"f":[["struct",12],[" ",17],["FunctionDeclNameSyntax",7]],"s":[["struct",12],[" ",17],["FunctionDeclNameSyntax",7]],"d":"A function declaration name (e.g. `foo(_:_:)`)."},{"p":["FunctionDeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionDeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionDeclNameSyntaxBuilder",7]]},{"p":["GenericParameterSyntax"],"f":[["struct",12],[" ",17],["GenericParameterSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterSyntax",7]]},{"p":["GenericParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterSyntaxBuilder",7]]},{"p":["MemberAccessExprSyntax"],"f":[["struct",12],[" ",17],["MemberAccessExprSyntax",7]],"s":[["struct",12],[" ",17],["MemberAccessExprSyntax",7]]},{"p":["MemberAccessExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberAccessExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberAccessExprSyntaxBuilder",7]]},{"p":["ObjcSelectorExprSyntax"],"f":[["struct",12],[" ",17],["ObjcSelectorExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExprSyntax",7]]},{"p":["ObjcSelectorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",7]]},{"p":["PostfixUnaryExprSyntax"],"f":[["struct",12],[" ",17],["PostfixUnaryExprSyntax",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExprSyntax",7]]},{"p":["PostfixUnaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",7]]},{"p":["PoundWarningDeclSyntax"],"f":[["struct",12],[" ",17],["PoundWarningDeclSyntax",7]],"s":[["struct",12],[" ",17],["PoundWarningDeclSyntax",7]]},{"p":["PoundWarningDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundWarningDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundWarningDeclSyntaxBuilder",7]]},{"p":["RegexLiteralExprSyntax"],"f":[["struct",12],[" ",17],["RegexLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["RegexLiteralExprSyntax",7]]},{"p":["RegexLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["RegexLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["RegexLiteralExprSyntaxBuilder",7]]},{"p":["TupleExprElementSyntax"],"f":[["struct",12],[" ",17],["TupleExprElementSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprElementSyntax",7]]},{"p":["TupleExprElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleExprElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprElementSyntaxBuilder",7]]},{"p":["TupleTypeElementSyntax"],"f":[["struct",12],[" ",17],["TupleTypeElementSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeElementSyntax",7]]},{"p":["TupleTypeElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleTypeElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeElementSyntaxBuilder",7]]},{"p":["AccessorParameterSyntax"],"f":[["struct",12],[" ",17],["AccessorParameterSyntax",7]],"s":[["struct",12],[" ",17],["AccessorParameterSyntax",7]]},{"p":["AccessorParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorParameterSyntaxBuilder",7]]},{"p":["AvailabilityEntrySyntax"],"f":[["struct",12],[" ",17],["AvailabilityEntrySyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityEntrySyntax",7]],"d":"\nThe availability argument for the _specialize attribute\n"},{"p":["AvailabilityEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityEntrySyntaxBuilder",7]]},{"p":["CodeBlockItemListSyntax"],"f":[["struct",12],[" ",17],["CodeBlockItemListSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockItemListSyntax",7]],"d":"`CodeBlockItemListSyntax` represents a collection of one or more\n`CodeBlockItemSyntax` nodes. CodeBlockItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CodeBlockItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DeclNameArgumentsSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentsSyntax",7]]},{"p":["DeclNameArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",7]]},{"p":["DeinitializerDeclSyntax"],"f":[["struct",12],[" ",17],["DeinitializerDeclSyntax",7]],"s":[["struct",12],[" ",17],["DeinitializerDeclSyntax",7]]},{"p":["DeinitializerDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeinitializerDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeinitializerDeclSyntaxBuilder",7]]},{"p":["DictionaryElementSyntax"],"f":[["struct",12],[" ",17],["DictionaryElementSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryElementSyntax",7]]},{"p":["DictionaryElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryElementSyntaxBuilder",7]]},{"p":["ExpressionPatternSyntax"],"f":[["struct",12],[" ",17],["ExpressionPatternSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionPatternSyntax",7]]},{"p":["ExpressionPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionPatternSyntaxBuilder",7]]},{"p":["ExpressionSegmentSyntax"],"f":[["struct",12],[" ",17],["ExpressionSegmentSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionSegmentSyntax",7]]},{"p":["ExpressionSegmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionSegmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionSegmentSyntaxBuilder",7]]},{"p":["FunctionParameterSyntax"],"f":[["struct",12],[" ",17],["FunctionParameterSyntax",7]],"s":[["struct",12],[" ",17],["FunctionParameterSyntax",7]]},{"p":["FunctionParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionParameterSyntaxBuilder",7]]},{"p":["FunctionSignatureSyntax"],"f":[["struct",12],[" ",17],["FunctionSignatureSyntax",7]],"s":[["struct",12],[" ",17],["FunctionSignatureSyntax",7]]},{"p":["FunctionSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionSignatureSyntaxBuilder",7]]},{"p":["IdentifierPatternSyntax"],"f":[["struct",12],[" ",17],["IdentifierPatternSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierPatternSyntax",7]]},{"p":["IdentifierPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["IdentifierPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierPatternSyntaxBuilder",7]]},{"p":["InheritedTypeListSyntax"],"f":[["struct",12],[" ",17],["InheritedTypeListSyntax",7]],"s":[["struct",12],[" ",17],["InheritedTypeListSyntax",7]],"d":"`InheritedTypeListSyntax` represents a collection of one or more\n`InheritedTypeSyntax` nodes. InheritedTypeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["InheritedTypeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["InitializerClauseSyntax"],"f":[["struct",12],[" ",17],["InitializerClauseSyntax",7]],"s":[["struct",12],[" ",17],["InitializerClauseSyntax",7]]},{"p":["InitializerClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["InitializerClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InitializerClauseSyntaxBuilder",7]]},{"p":["NonEmptyTokenListSyntax"],"f":[["struct",12],[" ",17],["NonEmptyTokenListSyntax",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenListSyntax",7]],"d":"`NonEmptyTokenListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. NonEmptyTokenListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["NonEmptyTokenListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ObjCSelectorPieceSyntax"],"f":[["struct",12],[" ",17],["ObjCSelectorPieceSyntax",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPieceSyntax",7]],"d":"\nA piece of an Objective-C selector. Either consisting of just an\nidentifier for a nullary selector, an identifier and a colon for a\nlabeled argument or just a colon for an unlabeled argument\n"},{"p":["ObjCSelectorPieceSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",7]]},{"p":["ObjectLiteralExprSyntax"],"f":[["struct",12],[" ",17],["ObjectLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExprSyntax",7]]},{"p":["ObjectLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",7]]},{"p":["PoundFilePathExprSyntax"],"f":[["struct",12],[" ",17],["PoundFilePathExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFilePathExprSyntax",7]]},{"p":["PoundFilePathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFilePathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFilePathExprSyntaxBuilder",7]]},{"p":["PoundFunctionExprSyntax"],"f":[["struct",12],[" ",17],["PoundFunctionExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFunctionExprSyntax",7]]},{"p":["PoundFunctionExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFunctionExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFunctionExprSyntaxBuilder",7]]},{"p":["QualifiedDeclNameSyntax"],"f":[["struct",12],[" ",17],["QualifiedDeclNameSyntax",7]],"s":[["struct",12],[" ",17],["QualifiedDeclNameSyntax",7]],"d":"\nAn optionally qualified function declaration name (e.g. `+(_:_:)`,\n`A.B.C.foo(_:_:)`).\n"},{"p":["QualifiedDeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",7]]},{"p":["StringLiteralExprSyntax"],"f":[["struct",12],[" ",17],["StringLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["StringLiteralExprSyntax",7]]},{"p":["StringLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["StringLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StringLiteralExprSyntaxBuilder",7]]},{"p":["AssociatedtypeDeclSyntax"],"f":[["struct",12],[" ",17],["AssociatedtypeDeclSyntax",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDeclSyntax",7]]},{"p":["AssociatedtypeDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",7]]},{"p":["BinaryOperatorExprSyntax"],"f":[["struct",12],[" ",17],["BinaryOperatorExprSyntax",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExprSyntax",7]]},{"p":["BinaryOperatorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",7]]},{"p":["BooleanLiteralExprSyntax"],"f":[["struct",12],[" ",17],["BooleanLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExprSyntax",7]]},{"p":["BooleanLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",7]]},{"p":["ClosureCaptureItemSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureItemSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemSyntax",7]]},{"p":["ClosureCaptureItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",7]]},{"p":["ElseIfContinuationSyntax"],"f":[["struct",12],[" ",17],["ElseIfContinuationSyntax",7]],"s":[["struct",12],[" ",17],["ElseIfContinuationSyntax",7]]},{"p":["ElseIfContinuationSyntaxBuilder"],"f":[["struct",12],[" ",17],["ElseIfContinuationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ElseIfContinuationSyntaxBuilder",7]]},{"p":["GenericRequirementSyntax"],"f":[["struct",12],[" ",17],["GenericRequirementSyntax",7]],"s":[["struct",12],[" ",17],["GenericRequirementSyntax",7]]},{"p":["GenericRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericRequirementSyntaxBuilder",7]]},{"p":["GenericWhereClauseSyntax"],"f":[["struct",12],[" ",17],["GenericWhereClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericWhereClauseSyntax",7]]},{"p":["GenericWhereClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericWhereClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericWhereClauseSyntaxBuilder",7]]},{"p":["IfConfigClauseListSyntax"],"f":[["struct",12],[" ",17],["IfConfigClauseListSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigClauseListSyntax",7]],"d":"`IfConfigClauseListSyntax` represents a collection of one or more\n`IfConfigClauseSyntax` nodes. IfConfigClauseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["IfConfigClauseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["IntegerLiteralExprSyntax"],"f":[["struct",12],[" ",17],["IntegerLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExprSyntax",7]]},{"p":["IntegerLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",7]]},{"p":["MemberDeclListItemSyntax"],"f":[["struct",12],[" ",17],["MemberDeclListItemSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclListItemSyntax",7]],"d":"\nA member declaration of a type consisting of a declaration and an\noptional semicolon;\n"},{"p":["MemberDeclListItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberDeclListItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclListItemSyntaxBuilder",7]]},{"p":["PatternBindingListSyntax"],"f":[["struct",12],[" ",17],["PatternBindingListSyntax",7]],"s":[["struct",12],[" ",17],["PatternBindingListSyntax",7]],"d":"`PatternBindingListSyntax` represents a collection of one or more\n`PatternBindingSyntax` nodes. PatternBindingListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PatternBindingListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["PoundDsohandleExprSyntax"],"f":[["struct",12],[" ",17],["PoundDsohandleExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExprSyntax",7]]},{"p":["PoundDsohandleExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",7]]},{"p":["PrefixOperatorExprSyntax"],"f":[["struct",12],[" ",17],["PrefixOperatorExprSyntax",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExprSyntax",7]]},{"p":["PrefixOperatorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",7]]},{"p":["SwitchDefaultLabelSyntax"],"f":[["struct",12],[" ",17],["SwitchDefaultLabelSyntax",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabelSyntax",7]]},{"p":["SwitchDefaultLabelSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",7]]},{"p":["AccessLevelModifierSyntax"],"f":[["struct",12],[" ",17],["AccessLevelModifierSyntax",7]],"s":[["struct",12],[" ",17],["AccessLevelModifierSyntax",7]]},{"p":["AccessLevelModifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessLevelModifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessLevelModifierSyntaxBuilder",7]]},{"p":["AccessPathComponentSyntax"],"f":[["struct",12],[" ",17],["AccessPathComponentSyntax",7]],"s":[["struct",12],[" ",17],["AccessPathComponentSyntax",7]]},{"p":["AccessPathComponentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessPathComponentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessPathComponentSyntaxBuilder",7]]},{"p":["EnumCaseElementListSyntax"],"f":[["struct",12],[" ",17],["EnumCaseElementListSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseElementListSyntax",7]],"d":"A collection of 0 or more `EnumCaseElement`s."},{"p":["EnumCaseElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["GenericArgumentListSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentListSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentListSyntax",7]],"d":"`GenericArgumentListSyntax` represents a collection of one or more\n`GenericArgumentSyntax` nodes. GenericArgumentListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericArgumentListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["PostfixIfConfigExprSyntax"],"f":[["struct",12],[" ",17],["PostfixIfConfigExprSyntax",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExprSyntax",7]]},{"p":["PostfixIfConfigExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",7]]},{"p":["PoundSourceLocationSyntax"],"f":[["struct",12],[" ",17],["PoundSourceLocationSyntax",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationSyntax",7]]},{"p":["PoundSourceLocationSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundSourceLocationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationSyntaxBuilder",7]]},{"p":["PrecedenceGroupDeclSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntax",7]],"d":"A Swift `precedencegroup` declaration."},{"p":["PrecedenceGroupDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",7]]},{"p":["SameTypeRequirementSyntax"],"f":[["struct",12],[" ",17],["SameTypeRequirementSyntax",7]],"s":[["struct",12],[" ",17],["SameTypeRequirementSyntax",7]]},{"p":["SameTypeRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["SameTypeRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SameTypeRequirementSyntaxBuilder",7]]},{"p":["TargetFunctionEntrySyntax"],"f":[["struct",12],[" ",17],["TargetFunctionEntrySyntax",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntrySyntax",7]],"d":"\nA labeled argument for the `@_specialize` attribute with a function\ndecl value like\n`target: myFunc(_:)`\n"},{"p":["TargetFunctionEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",7]]},{"p":["TuplePatternElementSyntax"],"f":[["struct",12],[" ",17],["TuplePatternElementSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternElementSyntax",7]]},{"p":["TuplePatternElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TuplePatternElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternElementSyntaxBuilder",7]]},{"p":["ValueBindingPatternSyntax"],"f":[["struct",12],[" ",17],["ValueBindingPatternSyntax",7]],"s":[["struct",12],[" ",17],["ValueBindingPatternSyntax",7]]},{"p":["ValueBindingPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["ValueBindingPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ValueBindingPatternSyntaxBuilder",7]]},{"p":["AvailabilityArgumentSyntax"],"f":[["struct",12],[" ",17],["AvailabilityArgumentSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityArgumentSyntax",7]],"d":"\nA single argument to an `@available` argument like `*`, `iOS 10.1`,\nor `message: \"This has been deprecated\"`.\n"},{"p":["AvailabilityArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",7]]},{"p":["AvailabilitySpecListSyntax"],"f":[["struct",12],[" ",17],["AvailabilitySpecListSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecListSyntax",7]],"d":"`AvailabilitySpecListSyntax` represents a collection of one or more\n`AvailabilityArgumentSyntax` nodes. AvailabilitySpecListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AvailabilitySpecListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ClassRestrictionTypeSyntax"],"f":[["struct",12],[" ",17],["ClassRestrictionTypeSyntax",7]],"s":[["struct",12],[" ",17],["ClassRestrictionTypeSyntax",7]]},{"p":["ClassRestrictionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",7]]},{"p":["ConditionElementListSyntax"],"f":[["struct",12],[" ",17],["ConditionElementListSyntax",7]],"s":[["struct",12],[" ",17],["ConditionElementListSyntax",7]],"d":"`ConditionElementListSyntax` represents a collection of one or more\n`ConditionElementSyntax` nodes. ConditionElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ConditionElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ConstrainedSugarTypeSyntax"],"f":[["struct",12],[" ",17],["ConstrainedSugarTypeSyntax",7]],"s":[["struct",12],[" ",17],["ConstrainedSugarTypeSyntax",7]]},{"p":["ConstrainedSugarTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ConstrainedSugarTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ConstrainedSugarTypeSyntaxBuilder",7]]},{"p":["DeclNameArgumentListSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentListSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentListSyntax",7]],"d":"`DeclNameArgumentListSyntax` represents a collection of one or more\n`DeclNameArgumentSyntax` nodes. DeclNameArgumentListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DeclNameArgumentListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["GenericParameterListSyntax"],"f":[["struct",12],[" ",17],["GenericParameterListSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterListSyntax",7]],"d":"`GenericParameterListSyntax` represents a collection of one or more\n`GenericParameterSyntax` nodes. GenericParameterListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericParameterListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["MemberTypeIdentifierSyntax"],"f":[["struct",12],[" ",17],["MemberTypeIdentifierSyntax",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifierSyntax",7]]},{"p":["MemberTypeIdentifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",7]]},{"p":["OptionalChainingExprSyntax"],"f":[["struct",12],[" ",17],["OptionalChainingExprSyntax",7]],"s":[["struct",12],[" ",17],["OptionalChainingExprSyntax",7]]},{"p":["OptionalChainingExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalChainingExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalChainingExprSyntaxBuilder",7]]},{"p":["SimpleTypeIdentifierSyntax"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntax",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntax",7]]},{"p":["SimpleTypeIdentifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",7]]},{"p":["TupleExprElementListSyntax"],"f":[["struct",12],[" ",17],["TupleExprElementListSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprElementListSyntax",7]],"d":"`TupleExprElementListSyntax` represents a collection of one or more\n`TupleExprElementSyntax` nodes. TupleExprElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TupleExprElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["TupleTypeElementListSyntax"],"f":[["struct",12],[" ",17],["TupleTypeElementListSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeElementListSyntax",7]],"d":"`TupleTypeElementListSyntax` represents a collection of one or more\n`TupleTypeElementSyntax` nodes. TupleTypeElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TupleTypeElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["AvailabilityConditionSyntax"],"f":[["struct",12],[" ",17],["AvailabilityConditionSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityConditionSyntax",7]]},{"p":["AvailabilityConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityConditionSyntaxBuilder",7]]},{"p":["BackDeployVersionListSyntax"],"f":[["struct",12],[" ",17],["BackDeployVersionListSyntax",7]],"s":[["struct",12],[" ",17],["BackDeployVersionListSyntax",7]],"d":"`BackDeployVersionListSyntax` represents a collection of one or more\n`BackDeployVersionArgumentSyntax` nodes. BackDeployVersionListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["BackDeployVersionListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DictionaryElementListSyntax"],"f":[["struct",12],[" ",17],["DictionaryElementListSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryElementListSyntax",7]],"d":"`DictionaryElementListSyntax` represents a collection of one or more\n`DictionaryElementSyntax` nodes. DictionaryElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DictionaryElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DiscardAssignmentExprSyntax"],"f":[["struct",12],[" ",17],["DiscardAssignmentExprSyntax",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExprSyntax",7]]},{"p":["DiscardAssignmentExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",7]]},{"p":["EditorPlaceholderExprSyntax"],"f":[["struct",12],[" ",17],["EditorPlaceholderExprSyntax",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExprSyntax",7]]},{"p":["EditorPlaceholderExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",7]]},{"p":["FunctionParameterListSyntax"],"f":[["struct",12],[" ",17],["FunctionParameterListSyntax",7]],"s":[["struct",12],[" ",17],["FunctionParameterListSyntax",7]],"d":"`FunctionParameterListSyntax` represents a collection of one or more\n`FunctionParameterSyntax` nodes. FunctionParameterListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["FunctionParameterListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["GenericArgumentClauseSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentClauseSyntax",7]]},{"p":["GenericArgumentClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",7]]},{"p":["PrimaryAssociatedTypeSyntax"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntax",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntax",7]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",7]]},{"p":["StringLiteralSegmentsSyntax"],"f":[["struct",12],[" ",17],["StringLiteralSegmentsSyntax",7]],"s":[["struct",12],[" ",17],["StringLiteralSegmentsSyntax",7]],"d":"`StringLiteralSegmentsSyntax` represents a collection of one or more\n`Syntax` nodes. StringLiteralSegmentsSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["StringLiteralSegmentsSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["SymbolicReferenceExprSyntax"],"f":[["struct",12],[" ",17],["SymbolicReferenceExprSyntax",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExprSyntax",7]]},{"p":["SymbolicReferenceExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",7]]},{"p":["TypeInheritanceClauseSyntax"],"f":[["struct",12],[" ",17],["TypeInheritanceClauseSyntax",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClauseSyntax",7]]},{"p":["TypeInheritanceClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",7]]},{"p":["TypeInitializerClauseSyntax"],"f":[["struct",12],[" ",17],["TypeInitializerClauseSyntax",7]],"s":[["struct",12],[" ",17],["TypeInitializerClauseSyntax",7]]},{"p":["TypeInitializerClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",7]]},{"p":["UnresolvedPatternExprSyntax"],"f":[["struct",12],[" ",17],["UnresolvedPatternExprSyntax",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExprSyntax",7]]},{"p":["UnresolvedPatternExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",7]]},{"p":["ClosureCaptureItemListSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureItemListSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemListSyntax",7]],"d":"`ClosureCaptureItemListSyntax` represents a collection of one or more\n`ClosureCaptureItemSyntax` nodes. ClosureCaptureItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ClosureCaptureItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["CompositionTypeElementSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeElementSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementSyntax",7]]},{"p":["CompositionTypeElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["CompositionTypeElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementSyntaxBuilder",7]]},{"p":["ConformanceRequirementSyntax"],"f":[["struct",12],[" ",17],["ConformanceRequirementSyntax",7]],"s":[["struct",12],[" ",17],["ConformanceRequirementSyntax",7]]},{"p":["ConformanceRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ConformanceRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ConformanceRequirementSyntaxBuilder",7]]},{"p":["DifferentiabilityParamSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamSyntax",7]],"d":"\nA differentiability parameter: either the \"self\" identifier, a function\nparameter name, or a function parameter index.\n"},{"p":["DifferentiabilityParamSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",7]]},{"p":["GenericParameterClauseSyntax"],"f":[["struct",12],[" ",17],["GenericParameterClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterClauseSyntax",7]]},{"p":["GenericParameterClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericParameterClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterClauseSyntaxBuilder",7]]},{"p":["GenericRequirementListSyntax"],"f":[["struct",12],[" ",17],["GenericRequirementListSyntax",7]],"s":[["struct",12],[" ",17],["GenericRequirementListSyntax",7]],"d":"`GenericRequirementListSyntax` represents a collection of one or more\n`GenericRequirementSyntax` nodes. GenericRequirementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericRequirementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["LabeledSpecializeEntrySyntax"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntax",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntax",7]],"d":"\nA labeled argument for the `@_specialize` attribute like\n`exported: true`\n"},{"p":["LabeledSpecializeEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",7]]},{"p":["ClosureCaptureSignatureSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntax",7]]},{"p":["ClosureCaptureSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",7]]},{"p":["DifferentiabilityParamsSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsSyntax",7]],"d":"The differentiability parameters."},{"p":["DifferentiabilityParamsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",7]]},{"p":["PoundSourceLocationArgsSyntax"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntax",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntax",7]]},{"p":["PoundSourceLocationArgsSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",7]]},{"p":["PrecedenceGroupNameListSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameListSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameListSyntax",7]],"d":"`PrecedenceGroupNameListSyntax` represents a collection of one or more\n`PrecedenceGroupNameElementSyntax` nodes. PrecedenceGroupNameListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrecedenceGroupNameListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["PrecedenceGroupRelationSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntax",7]],"d":"\nSpecify the new precedence group's relation to existing precedence\ngroups.\n"},{"p":["PrecedenceGroupRelationSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",7]]},{"p":["TuplePatternElementListSyntax"],"f":[["struct",12],[" ",17],["TuplePatternElementListSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternElementListSyntax",7]],"d":"`TuplePatternElementListSyntax` represents a collection of one or more\n`TuplePatternElementSyntax` nodes. TuplePatternElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TuplePatternElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["UnavailabilityConditionSyntax"],"f":[["struct",12],[" ",17],["UnavailabilityConditionSyntax",7]],"s":[["struct",12],[" ",17],["UnavailabilityConditionSyntax",7]]},{"p":["UnavailabilityConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",7]]},{"p":["MatchingPatternConditionSyntax"],"f":[["struct",12],[" ",17],["MatchingPatternConditionSyntax",7]],"s":[["struct",12],[" ",17],["MatchingPatternConditionSyntax",7]]},{"p":["MatchingPatternConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",7]]},{"p":["OptionalBindingConditionSyntax"],"f":[["struct",12],[" ",17],["OptionalBindingConditionSyntax",7]],"s":[["struct",12],[" ",17],["OptionalBindingConditionSyntax",7]]},{"p":["OptionalBindingConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",7]]},{"p":["BackDeployVersionArgumentSyntax"],"f":[["struct",12],[" ",17],["BackDeployVersionArgumentSyntax",7]],"s":[["struct",12],[" ",17],["BackDeployVersionArgumentSyntax",7]],"d":"\nA single platform/version pair in a `@_backDeploy` attribute,\ne.g. `iOS 10.1`.\n"},{"p":["BackDeployVersionArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["BackDeployVersionArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BackDeployVersionArgumentSyntaxBuilder",7]]},{"p":["PrecedenceGroupAssignmentSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntax",7]],"d":"\nSpecifies the precedence of an operator when used in an operation\nthat includes optional chaining.\n"},{"p":["PrecedenceGroupAssignmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",7]]},{"p":["PrimaryAssociatedTypeListSyntax"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeListSyntax",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeListSyntax",7]],"d":"`PrimaryAssociatedTypeListSyntax` represents a collection of one or more\n`PrimaryAssociatedTypeSyntax` nodes. PrimaryAssociatedTypeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrimaryAssociatedTypeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["CompositionTypeElementListSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeElementListSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementListSyntax",7]],"d":"`CompositionTypeElementListSyntax` represents a collection of one or more\n`CompositionTypeElementSyntax` nodes. CompositionTypeElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CompositionTypeElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DifferentiabilityParamListSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamListSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamListSyntax",7]],"d":"`DifferentiabilityParamListSyntax` represents a collection of one or more\n`DifferentiabilityParamSyntax` nodes. DifferentiabilityParamListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DifferentiabilityParamListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["OperatorPrecedenceAndTypesSyntax"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntax",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntax",7]],"d":"\nA clause to specify precedence group in infix operator declarations, and designated types in any operator declaration.\n"},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",7]]},{"p":["PrecedenceGroupNameElementSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntax",7]]},{"p":["PrecedenceGroupNameElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",7]]},{"p":["AvailabilityLabeledArgumentSyntax"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntax",7]],"d":"\nA argument to an `@available` attribute that consists of a label and\na value, e.g. `message: \"This has been deprecated\"`.\n"},{"p":["AvailabilityLabeledArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",7]]},{"p":["BackDeployAttributeSpecListSyntax"],"f":[["struct",12],[" ",17],["BackDeployAttributeSpecListSyntax",7]],"s":[["struct",12],[" ",17],["BackDeployAttributeSpecListSyntax",7]],"d":"\nA collection of arguments for the `@_backDeploy` attribute\n"},{"p":["BackDeployAttributeSpecListSyntaxBuilder"],"f":[["struct",12],[" ",17],["BackDeployAttributeSpecListSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BackDeployAttributeSpecListSyntaxBuilder",7]]},{"p":["PrimaryAssociatedTypeClauseSyntax"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeClauseSyntax",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeClauseSyntax",7]]},{"p":["PrimaryAssociatedTypeClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeClauseSyntaxBuilder",7]]},{"p":["SpecializeAttributeSpecListSyntax"],"f":[["struct",12],[" ",17],["SpecializeAttributeSpecListSyntax",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecListSyntax",7]],"d":"\nA collection of arguments for the `@_specialize` attribute\n"},{"p":["SpecializeAttributeSpecListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ImplementsAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the `@_implements` attribute of the form\n`Type, methodName(arg1Label:arg2Label:)`\n"},{"p":["ImplementsAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",7]]},{"p":["NamedAttributeStringArgumentSyntax"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntax",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntax",7]],"d":"\nThe argument for the `@_dynamic_replacement` or `@_private`\nattribute of the form `for: \"function()\"` or `sourceFile:\n\"Src.swift\"`\n"},{"p":["NamedAttributeStringArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",7]]},{"p":["PrecedenceGroupAssociativitySyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntax",7]],"d":"\nSpecifies how a sequence of operators with the same precedence level\nare grouped together in the absence of grouping parentheses.\n"},{"p":["PrecedenceGroupAssociativitySyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",7]]},{"p":["PrecedenceGroupAttributeListSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAttributeListSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeListSyntax",7]],"d":"`PrecedenceGroupAttributeListSyntax` represents a collection of one or more\n`Syntax` nodes. PrecedenceGroupAttributeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrecedenceGroupAttributeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DifferentiabilityParamsClauseSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntax",7]],"d":"A clause containing differentiability parameters."},{"p":["DifferentiabilityParamsClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",7]]},{"p":["AvailabilityVersionRestrictionSyntax"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntax",7]],"d":"\nAn argument to `@available` that restricts the availability on a\ncertain platform to a version, e.g. `iOS 10` or `swift 3.4`.\n"},{"p":["AvailabilityVersionRestrictionSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",7]]},{"p":["MultipleTrailingClosureElementSyntax"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntax",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntax",7]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",7]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",7]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",7]]},{"p":["DifferentiableAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the `@differentiable` attribute: an optional\ndifferentiability kind, an optional differentiability parameter clause,\nand an optional 'where' clause.\n"},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",7]]},{"p":["MultipleTrailingClosureElementListSyntax"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementListSyntax",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementListSyntax",7]],"d":"`MultipleTrailingClosureElementListSyntax` represents a collection of one or more\n`MultipleTrailingClosureElementSyntax` nodes. MultipleTrailingClosureElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["MultipleTrailingClosureElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the '@derivative(of:)' and '@transpose(of:)'\nattributes: the 'of:' label, the original declaration name, and an\noptional differentiability parameter list.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",7]]},{"p":["DeclSyntax"],"f":[["struct",12],[" ",17],["DeclSyntax",7]],"s":[["struct",12],[" ",17],["DeclSyntax",7]]},{"p":["ExprSyntax"],"f":[["struct",12],[" ",17],["ExprSyntax",7]],"s":[["struct",12],[" ",17],["ExprSyntax",7]]},{"p":["StmtSyntax"],"f":[["struct",12],[" ",17],["StmtSyntax",7]],"s":[["struct",12],[" ",17],["StmtSyntax",7]]},{"p":["TypeSyntax"],"f":[["struct",12],[" ",17],["TypeSyntax",7]],"s":[["struct",12],[" ",17],["TypeSyntax",7]]},{"p":["TokenSyntax"],"f":[["struct",12],[" ",17],["TokenSyntax",7]],"s":[["struct",12],[" ",17],["TokenSyntax",7]],"d":"A Syntax node representing a single token."},{"p":["AsExprSyntax"],"f":[["struct",12],[" ",17],["AsExprSyntax",7]],"s":[["struct",12],[" ",17],["AsExprSyntax",7]]},{"p":["AsExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AsExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AsExprSyntaxBuilder",7]]},{"p":["DoStmtSyntax"],"f":[["struct",12],[" ",17],["DoStmtSyntax",7]],"s":[["struct",12],[" ",17],["DoStmtSyntax",7]]},{"p":["DoStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DoStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DoStmtSyntaxBuilder",7]]},{"p":["IfStmtSyntax"],"f":[["struct",12],[" ",17],["IfStmtSyntax",7]],"s":[["struct",12],[" ",17],["IfStmtSyntax",7]]},{"p":["IfStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfStmtSyntaxBuilder",7]]},{"p":["IsExprSyntax"],"f":[["struct",12],[" ",17],["IsExprSyntax",7]],"s":[["struct",12],[" ",17],["IsExprSyntax",7]]},{"p":["IsExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IsExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IsExprSyntaxBuilder",7]]},{"p":["PatternSyntax"],"f":[["struct",12],[" ",17],["PatternSyntax",7]],"s":[["struct",12],[" ",17],["PatternSyntax",7]]},{"p":["TryExprSyntax"],"f":[["struct",12],[" ",17],["TryExprSyntax",7]],"s":[["struct",12],[" ",17],["TryExprSyntax",7]]},{"p":["TryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TryExprSyntaxBuilder",7]]},{"p":["UnknownSyntax"],"f":[["struct",12],[" ",17],["UnknownSyntax",7]],"s":[["struct",12],[" ",17],["UnknownSyntax",7]],"d":"A wrapper around a raw Syntax layout."},{"p":["CaseItemSyntax"],"f":[["struct",12],[" ",17],["CaseItemSyntax",7]],"s":[["struct",12],[" ",17],["CaseItemSyntax",7]]},{"p":["CaseItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CaseItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CaseItemSyntaxBuilder",7]]},{"p":["DeclNameSyntax"],"f":[["struct",12],[" ",17],["DeclNameSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameSyntax",7]]},{"p":["DeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameSyntaxBuilder",7]]},{"p":["EnumDeclSyntax"],"f":[["struct",12],[" ",17],["EnumDeclSyntax",7]],"s":[["struct",12],[" ",17],["EnumDeclSyntax",7]],"d":"A Swift `enum` declaration."},{"p":["EnumDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumDeclSyntaxBuilder",7]]},{"p":["ExprListSyntax"],"f":[["struct",12],[" ",17],["ExprListSyntax",7]],"s":[["struct",12],[" ",17],["ExprListSyntax",7]],"d":"\nA list of expressions connected by operators. This list is contained\nby a `SequenceExprSyntax`.\n"},{"p":["ExprListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["ObjcNameSyntax"],"f":[["struct",12],[" ",17],["ObjcNameSyntax",7]],"s":[["struct",12],[" ",17],["ObjcNameSyntax",7]],"d":"`ObjcNameSyntax` represents a collection of one or more\n`ObjcNamePieceSyntax` nodes. ObjcNameSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ObjcNameSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["TypeExprSyntax"],"f":[["struct",12],[" ",17],["TypeExprSyntax",7]],"s":[["struct",12],[" ",17],["TypeExprSyntax",7]]},{"p":["TypeExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeExprSyntaxBuilder",7]]},{"p":["ArrayExprSyntax"],"f":[["struct",12],[" ",17],["ArrayExprSyntax",7]],"s":[["struct",12],[" ",17],["ArrayExprSyntax",7]]},{"p":["ArrayExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayExprSyntaxBuilder",7]]},{"p":["ArrayTypeSyntax"],"f":[["struct",12],[" ",17],["ArrayTypeSyntax",7]],"s":[["struct",12],[" ",17],["ArrayTypeSyntax",7]]},{"p":["ArrayTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayTypeSyntaxBuilder",7]]},{"p":["ArrowExprSyntax"],"f":[["struct",12],[" ",17],["ArrowExprSyntax",7]],"s":[["struct",12],[" ",17],["ArrowExprSyntax",7]]},{"p":["ArrowExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrowExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrowExprSyntaxBuilder",7]]},{"p":["AttributeSyntax"],"f":[["struct",12],[" ",17],["AttributeSyntax",7]],"s":[["struct",12],[" ",17],["AttributeSyntax",7]],"d":"\nAn `@` attribute.\n"},{"p":["AttributeSyntaxBuilder"],"f":[["struct",12],[" ",17],["AttributeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AttributeSyntaxBuilder",7]]},{"p":["AwaitExprSyntax"],"f":[["struct",12],[" ",17],["AwaitExprSyntax",7]],"s":[["struct",12],[" ",17],["AwaitExprSyntax",7]]},{"p":["AwaitExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AwaitExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AwaitExprSyntaxBuilder",7]]},{"p":["BreakStmtSyntax"],"f":[["struct",12],[" ",17],["BreakStmtSyntax",7]],"s":[["struct",12],[" ",17],["BreakStmtSyntax",7]]},{"p":["BreakStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["BreakStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BreakStmtSyntaxBuilder",7]]},{"p":["CatchItemSyntax"],"f":[["struct",12],[" ",17],["CatchItemSyntax",7]],"s":[["struct",12],[" ",17],["CatchItemSyntax",7]]},{"p":["CatchItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CatchItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CatchItemSyntaxBuilder",7]]},{"p":["ClassDeclSyntax"],"f":[["struct",12],[" ",17],["ClassDeclSyntax",7]],"s":[["struct",12],[" ",17],["ClassDeclSyntax",7]]},{"p":["ClassDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClassDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClassDeclSyntaxBuilder",7]]},{"p":["CodeBlockSyntax"],"f":[["struct",12],[" ",17],["CodeBlockSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockSyntax",7]]},{"p":["CodeBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["CodeBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockSyntaxBuilder",7]]},{"p":["DeferStmtSyntax"],"f":[["struct",12],[" ",17],["DeferStmtSyntax",7]],"s":[["struct",12],[" ",17],["DeferStmtSyntax",7]]},{"p":["DeferStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeferStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeferStmtSyntaxBuilder",7]]},{"p":["ElseBlockSyntax"],"f":[["struct",12],[" ",17],["ElseBlockSyntax",7]],"s":[["struct",12],[" ",17],["ElseBlockSyntax",7]]},{"p":["ElseBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["ElseBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ElseBlockSyntaxBuilder",7]]},{"p":["ForInStmtSyntax"],"f":[["struct",12],[" ",17],["ForInStmtSyntax",7]],"s":[["struct",12],[" ",17],["ForInStmtSyntax",7]]},{"p":["ForInStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ForInStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ForInStmtSyntaxBuilder",7]]},{"p":["GuardStmtSyntax"],"f":[["struct",12],[" ",17],["GuardStmtSyntax",7]],"s":[["struct",12],[" ",17],["GuardStmtSyntax",7]]},{"p":["GuardStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["GuardStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GuardStmtSyntaxBuilder",7]]},{"p":["InOutExprSyntax"],"f":[["struct",12],[" ",17],["InOutExprSyntax",7]],"s":[["struct",12],[" ",17],["InOutExprSyntax",7]]},{"p":["InOutExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["InOutExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InOutExprSyntaxBuilder",7]]},{"p":["ThrowStmtSyntax"],"f":[["struct",12],[" ",17],["ThrowStmtSyntax",7]],"s":[["struct",12],[" ",17],["ThrowStmtSyntax",7]]},{"p":["ThrowStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ThrowStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ThrowStmtSyntaxBuilder",7]]},{"p":["TokenListSyntax"],"f":[["struct",12],[" ",17],["TokenListSyntax",7]],"s":[["struct",12],[" ",17],["TokenListSyntax",7]],"d":"`TokenListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. TokenListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TokenListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["TupleExprSyntax"],"f":[["struct",12],[" ",17],["TupleExprSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprSyntax",7]]},{"p":["TupleExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprSyntaxBuilder",7]]},{"p":["TupleTypeSyntax"],"f":[["struct",12],[" ",17],["TupleTypeSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeSyntax",7]]},{"p":["TupleTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeSyntaxBuilder",7]]},{"p":["WhileStmtSyntax"],"f":[["struct",12],[" ",17],["WhileStmtSyntax",7]],"s":[["struct",12],[" ",17],["WhileStmtSyntax",7]]},{"p":["WhileStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["WhileStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WhileStmtSyntaxBuilder",7]]},{"p":["YieldListSyntax"],"f":[["struct",12],[" ",17],["YieldListSyntax",7]],"s":[["struct",12],[" ",17],["YieldListSyntax",7]]},{"p":["YieldListSyntaxBuilder"],"f":[["struct",12],[" ",17],["YieldListSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["YieldListSyntaxBuilder",7]]},{"p":["YieldStmtSyntax"],"f":[["struct",12],[" ",17],["YieldStmtSyntax",7]],"s":[["struct",12],[" ",17],["YieldStmtSyntax",7]]},{"p":["YieldStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["YieldStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["YieldStmtSyntaxBuilder",7]]},{"p":["Syntax"],"f":[["struct",12],[" ",17],["Syntax",7]],"s":[["struct",12],[" ",17],["Syntax",7]],"d":"A Syntax node represents a tree of nodes with tokens at the leaves.\nEach node has accessors for its known children, and allows efficient\niteration over the children through its `children` property."},{"p":["SyntaxIdentifier"],"f":[["struct",12],[" ",17],["SyntaxIdentifier",7]],"s":[["struct",12],[" ",17],["SyntaxIdentifier",7]],"d":"Provides a stable and unique identity for `Syntax` nodes."},{"p":["SyntaxChildrenIndex"],"f":[["struct",12],[" ",17],["SyntaxChildrenIndex",7]],"s":[["struct",12],[" ",17],["SyntaxChildrenIndex",7]],"d":"An index in a syntax children collection."},{"p":["SyntaxClassifications"],"f":[["struct",12],[" ",17],["SyntaxClassifications",7]],"s":[["struct",12],[" ",17],["SyntaxClassifications",7]],"d":"Provides a sequence of `SyntaxClassifiedRange`s for a syntax node."},{"p":["SyntaxClassifications","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["SyntaxClassifiedRange"],"f":[["struct",12],[" ",17],["SyntaxClassifiedRange",7]],"s":[["struct",12],[" ",17],["SyntaxClassifiedRange",7]],"d":"Represents a source range that is associated with a syntax classification."},{"p":["SyntaxChildrenIndexData"],"f":[["struct",12],[" ",17],["SyntaxChildrenIndexData",7]],"s":[["struct",12],[" ",17],["SyntaxChildrenIndexData",7]],"d":"The data for an index in a syntax children collection that is not the end\nindex. See `SyntaxChildrenIndex` for the representation of the end index."},{"p":["SyntaxNode"],"f":[["struct",12],[" ",17],["SyntaxNode",7]],"s":[["struct",12],[" ",17],["SyntaxNode",7]],"d":"Represents a node from the syntax tree.\n\nThis is a more efficient representation than `Syntax` because it avoids casts\nto `Syntax` for representing the parent hierarchy.\nIt provides generic information, like the node's position, range, and\na unique `id`, while still allowing getting the associated `Syntax`\nobject if necessary.\n\n`SyntaxParser` uses `SyntaxNode` to efficiently report which syntax nodes\ngot re-used during incremental re-parsing."},{"p":["SyntaxChildren"],"f":[["struct",12],[" ",17],["SyntaxChildren",7]],"s":[["struct",12],[" ",17],["SyntaxChildren",7]],"d":"Collection that contains the present child `Syntax` nodes of the given node."},{"p":["SourceEdit"],"f":[["struct",12],[" ",17],["SourceEdit",7]],"s":[["struct",12],[" ",17],["SourceEdit",7]]},{"p":["SourceRange"],"f":[["struct",12],[" ",17],["SourceRange",7]],"s":[["struct",12],[" ",17],["SourceRange",7]],"d":"Represents a start and end location in a Swift file."},{"p":["SourceLength"],"f":[["struct",12],[" ",17],["SourceLength",7]],"s":[["struct",12],[" ",17],["SourceLength",7]],"d":"The length a syntax node spans in the source code. From any AbsolutePosition\nyou reach a node's end location by adding its UTF-8 length."},{"p":["TokenSequence"],"f":[["struct",12],[" ",17],["TokenSequence",7]],"s":[["struct",12],[" ",17],["TokenSequence",7]],"d":"Sequence of tokens that are part of the provided Syntax node."},{"p":["TokenSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["SourceLocation"],"f":[["struct",12],[" ",17],["SourceLocation",7]],"s":[["struct",12],[" ",17],["SourceLocation",7]],"d":"Represents a source location in a Swift file."},{"p":["ByteSourceRange"],"f":[["struct",12],[" ",17],["ByteSourceRange",7]],"s":[["struct",12],[" ",17],["ByteSourceRange",7]]},{"p":["ConcurrentEdits"],"f":[["struct",12],[" ",17],["ConcurrentEdits",7]],"s":[["struct",12],[" ",17],["ConcurrentEdits",7]],"d":"Edits that are applied **simultaneously**. That is, the offsets of all edits\nrefer to the original string and are not shifted by previous edits. For\nexample applying\n - insert 'x' at offset 0\n - insert 'y' at offset 1\n - insert 'z' at offset 2\n to '012345' results in 'x0y1z2345'.\n\nThe raw `edits` of this struct are guaranteed to\n  1. not be overlapping.\n  2. be in increasing source offset order."},{"p":["AbsolutePosition"],"f":[["struct",12],[" ",17],["AbsolutePosition",7]],"s":[["struct",12],[" ",17],["AbsolutePosition",7]],"d":"An absolute position in a source file as text - the absolute utf8Offset from\nthe start of the file."},{"p":["ReversedTokenSequence"],"f":[["struct",12],[" ",17],["ReversedTokenSequence",7]],"s":[["struct",12],[" ",17],["ReversedTokenSequence",7]],"d":"Reverse sequence of tokens that are part of the provided Syntax node."},{"p":["ReversedTokenSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]]},{"p":["IncrementalParseLookup"],"f":[["struct",12],[" ",17],["IncrementalParseLookup",7]],"s":[["struct",12],[" ",17],["IncrementalParseLookup",7]],"d":"Provides a mechanism for the parser to skip regions of an incrementally\nupdated source that was already parsed during a previous parse invocation."},{"p":["Trivia"],"f":[["struct",12],[" ",17],["Trivia",7]],"s":[["struct",12],[" ",17],["Trivia",7]],"d":"A collection of leading or trailing trivia. This is the main data structure\nfor thinking about trivia."},{"p":["SyntaxAnyVisitor"],"f":[["class",12],[" ",17],["SyntaxAnyVisitor",7]],"s":[["class",12],[" ",17],["SyntaxAnyVisitor",7]],"d":"A `SyntaxVisitor` that can visit the nodes as generic `Syntax` values.\n\nThis subclass of `SyntaxVisitor` is slower than the type-specific visitation \nof `SyntaxVisitor`. Use `SyntaxAnyVisitor` if the `visitAny(_)` function \nwould be useful to have, otherwise inherit from `SyntaxVisitor`.\n\nThis works by overriding the type-specific visit function that delegate to \n`visitAny(_)`. A subclass that provides a custom type-specific visit \nfunction, should also call `visitAny(_)` in its implementation, if calling \n`visitAny` is needed:\n\n    struct MyVisitor: SyntaxAnyVisitor {\n      func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {\n        <code>\n      }\n\n      func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {\n        <code>\n        // Call this to pass tokens to `visitAny(_)` as well if needed\n        visitAny(token)\n      }\n"},{"p":["SyntaxVisitor"],"f":[["class",12],[" ",17],["SyntaxVisitor",7]],"s":[["class",12],[" ",17],["SyntaxVisitor",7]]},{"p":["SyntaxRewriter"],"f":[["class",12],[" ",17],["SyntaxRewriter",7]],"s":[["class",12],[" ",17],["SyntaxRewriter",7]]},{"p":["SyntaxVerifier"],"f":[["class",12],[" ",17],["SyntaxVerifier",7]],"s":[["class",12],[" ",17],["SyntaxVerifier",7]],"d":"Verifier to check that there are no unknown syntax nodes in the tree."},{"p":["SourceLocationConverter"],"f":[["final",12],[" ",17],["class",12],[" ",17],["SourceLocationConverter",7]],"s":[["class",12],[" ",17],["SourceLocationConverter",7]],"d":"Converts `AbsolutePosition`s of syntax nodes to `SourceLocation`s, and\nvice-versa. The `AbsolutePosition`s must be originating from nodes that are\npart of the same tree that was used to initialize this class."},{"p":["IncrementalParseTransition"],"f":[["final",12],[" ",17],["class",12],[" ",17],["IncrementalParseTransition",7]],"s":[["class",12],[" ",17],["IncrementalParseTransition",7]],"d":"Keeps track of a previously parsed syntax tree and the source edits that\noccurred since it was created."},{"p":["IncrementalParseReusedNodeCollector"],"f":[["final",12],[" ",17],["class",12],[" ",17],["IncrementalParseReusedNodeCollector",7]],"s":[["class",12],[" ",17],["IncrementalParseReusedNodeCollector",7]],"d":"An implementation of `IncrementalParseReusedNodeDelegate` that just collects\nthe range and re-used node into an array."},{"p":["SyntaxVerifierError","unknownSyntaxFound(node:)"],"f":[["case",12],[" ",17],["unknownSyntaxFound",7],["(",17],["node",1],[": ",17],["Syntax",18,521],[")",17]],"s":[["case",12],[" ",17],["unknownSyntaxFound",7],["(",17],["node",1],[": ",17],["Syntax",18],[")",17]]},{"p":["SyntaxClassification","identifier"],"f":[["case",12],[" ",17],["identifier",7]],"s":[["case",12],[" ",17],["identifier",7]],"d":"A generic identifier. "},{"p":["SyntaxClassification","lineComment"],"f":[["case",12],[" ",17],["lineComment",7]],"s":[["case",12],[" ",17],["lineComment",7]],"d":"A line comment starting with `//`. "},{"p":["SyntaxClassification","blockComment"],"f":[["case",12],[" ",17],["blockComment",7]],"s":[["case",12],[" ",17],["blockComment",7]],"d":"A block comment starting with `/**` and ending with `*/. "},{"p":["SyntaxClassification","buildConfigId"],"f":[["case",12],[" ",17],["buildConfigId",7]],"s":[["case",12],[" ",17],["buildConfigId",7]],"d":"A build configuration directive like `#if`, `#elseif`, `#else`. "},{"p":["SyntaxClassification","objectLiteral"],"f":[["case",12],[" ",17],["objectLiteral",7]],"s":[["case",12],[" ",17],["objectLiteral",7]],"d":"An image, color, etc. literal. "},{"p":["SyntaxClassification","stringLiteral"],"f":[["case",12],[" ",17],["stringLiteral",7]],"s":[["case",12],[" ",17],["stringLiteral",7]],"d":"A string literal including multiline string literals. "},{"p":["SyntaxClassification","docLineComment"],"f":[["case",12],[" ",17],["docLineComment",7]],"s":[["case",12],[" ",17],["docLineComment",7]],"d":"A doc line comment starting with `///`. "},{"p":["SyntaxClassification","integerLiteral"],"f":[["case",12],[" ",17],["integerLiteral",7]],"s":[["case",12],[" ",17],["integerLiteral",7]],"d":"An integer literal. "},{"p":["SyntaxClassification","typeIdentifier"],"f":[["case",12],[" ",17],["typeIdentifier",7]],"s":[["case",12],[" ",17],["typeIdentifier",7]],"d":"An identifier referring to a type. "},{"p":["SyntaxClassification","docBlockComment"],"f":[["case",12],[" ",17],["docBlockComment",7]],"s":[["case",12],[" ",17],["docBlockComment",7]],"d":"A doc block comment starting with `/**` and ending with `*/. "},{"p":["SyntaxClassification","floatingLiteral"],"f":[["case",12],[" ",17],["floatingLiteral",7]],"s":[["case",12],[" ",17],["floatingLiteral",7]],"d":"A floating point literal. "},{"p":["SyntaxClassification","dollarIdentifier"],"f":[["case",12],[" ",17],["dollarIdentifier",7]],"s":[["case",12],[" ",17],["dollarIdentifier",7]],"d":"An identifier starting with `$` like `$0`. "},{"p":["SyntaxClassification","editorPlaceholder"],"f":[["case",12],[" ",17],["editorPlaceholder",7]],"s":[["case",12],[" ",17],["editorPlaceholder",7]],"d":"An editor placeholder of the form `<#content#>` "},{"p":["SyntaxClassification","poundDirectiveKeyword"],"f":[["case",12],[" ",17],["poundDirectiveKeyword",7]],"s":[["case",12],[" ",17],["poundDirectiveKeyword",7]],"d":"A `#` keyword like `#warning`. "},{"p":["SyntaxClassification","stringInterpolationAnchor"],"f":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"s":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"d":"The opening and closing parenthesis of string interpolation. "},{"p":["SyntaxClassification","none"],"f":[["case",12],[" ",17],["none",7]],"s":[["case",12],[" ",17],["none",7]],"d":"The token should not receive syntax coloring. "},{"p":["SyntaxClassification","keyword"],"f":[["case",12],[" ",17],["keyword",7]],"s":[["case",12],[" ",17],["keyword",7]],"d":"A Swift keyword, including contextual keywords. "},{"p":["SyntaxClassification","attribute"],"f":[["case",12],[" ",17],["attribute",7]],"s":[["case",12],[" ",17],["attribute",7]],"d":"An attribute starting with an `@`. "},{"p":["SyntaxVisitorContinueKind","skipChildren"],"f":[["case",12],[" ",17],["skipChildren",7]],"s":[["case",12],[" ",17],["skipChildren",7]],"d":"The visitor should avoid visiting the descendents of the current node."},{"p":["SyntaxVisitorContinueKind","visitChildren"],"f":[["case",12],[" ",17],["visitChildren",7]],"s":[["case",12],[" ",17],["visitChildren",7]],"d":"The visitor should visit the descendents of the current node."},{"p":["SyntaxEnum","accessPath(_:)"],"f":[["case",12],[" ",17],["accessPath",7],["(",17],["AccessPathSyntax",18,25],[")",17]],"s":[["case",12],[" ",17],["accessPath",7],["(",17],["AccessPathSyntax",18],[")",17]]},{"p":["SyntaxEnum","importDecl(_:)"],"f":[["case",12],[" ",17],["importDecl",7],["(",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["case",12],[" ",17],["importDecl",7],["(",17],["ImportDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","returnStmt(_:)"],"f":[["case",12],[" ",17],["returnStmt",7],["(",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["case",12],[" ",17],["returnStmt",7],["(",17],["ReturnStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","sourceFile(_:)"],"f":[["case",12],[" ",17],["sourceFile",7],["(",17],["SourceFileSyntax",18,31],[")",17]],"s":[["case",12],[" ",17],["sourceFile",7],["(",17],["SourceFileSyntax",18],[")",17]]},{"p":["SyntaxEnum","structDecl(_:)"],"f":[["case",12],[" ",17],["structDecl",7],["(",17],["StructDeclSyntax",18,33],[")",17]],"s":[["case",12],[" ",17],["structDecl",7],["(",17],["StructDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCase(_:)"],"f":[["case",12],[" ",17],["switchCase",7],["(",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["case",12],[" ",17],["switchCase",7],["(",17],["SwitchCaseSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchStmt(_:)"],"f":[["case",12],[" ",17],["switchStmt",7],["(",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["case",12],[" ",17],["switchStmt",7],["(",17],["SwitchStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchClause(_:)"],"f":[["case",12],[" ",17],["catchClause",7],["(",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["case",12],[" ",17],["catchClause",7],["(",17],["CatchClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureExpr(_:)"],"f":[["case",12],[" ",17],["closureExpr",7],["(",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["case",12],[" ",17],["closureExpr",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","keyPathExpr(_:)"],"f":[["case",12],[" ",17],["keyPathExpr",7],["(",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["case",12],[" ",17],["keyPathExpr",7],["(",17],["KeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","ternaryExpr(_:)"],"f":[["case",12],[" ",17],["ternaryExpr",7],["(",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["case",12],[" ",17],["ternaryExpr",7],["(",17],["TernaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownDecl(_:)"],"f":[["case",12],[" ",17],["unknownDecl",7],["(",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["case",12],[" ",17],["unknownDecl",7],["(",17],["UnknownDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownExpr(_:)"],"f":[["case",12],[" ",17],["unknownExpr",7],["(",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["case",12],[" ",17],["unknownExpr",7],["(",17],["UnknownExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownStmt(_:)"],"f":[["case",12],[" ",17],["unknownStmt",7],["(",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["case",12],[" ",17],["unknownStmt",7],["(",17],["UnknownStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownType(_:)"],"f":[["case",12],[" ",17],["unknownType",7],["(",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["case",12],[" ",17],["unknownType",7],["(",17],["UnknownTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","whereClause(_:)"],"f":[["case",12],[" ",17],["whereClause",7],["(",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["case",12],[" ",17],["whereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorDecl(_:)"],"f":[["case",12],[" ",17],["accessorDecl",7],["(",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["case",12],[" ",17],["accessorDecl",7],["(",17],["AccessorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorList(_:)"],"f":[["case",12],[" ",17],["accessorList",7],["(",17],["AccessorListSyntax",18,55],[")",17]],"s":[["case",12],[" ",17],["accessorList",7],["(",17],["AccessorListSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayElement(_:)"],"f":[["case",12],[" ",17],["arrayElement",7],["(",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["case",12],[" ",17],["arrayElement",7],["(",17],["ArrayElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","caseItemList(_:)"],"f":[["case",12],[" ",17],["caseItemList",7],["(",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["case",12],[" ",17],["caseItemList",7],["(",17],["CaseItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureParam(_:)"],"f":[["case",12],[" ",17],["closureParam",7],["(",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["case",12],[" ",17],["closureParam",7],["(",17],["ClosureParamSyntax",18],[")",17]]},{"p":["SyntaxEnum","continueStmt(_:)"],"f":[["case",12],[" ",17],["continueStmt",7],["(",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["case",12],[" ",17],["continueStmt",7],["(",17],["ContinueStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","declModifier(_:)"],"f":[["case",12],[" ",17],["declModifier",7],["(",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["case",12],[" ",17],["declModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseDecl(_:)"],"f":[["case",12],[" ",17],["enumCaseDecl",7],["(",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["case",12],[" ",17],["enumCaseDecl",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionDecl(_:)"],"f":[["case",12],[" ",17],["functionDecl",7],["(",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["case",12],[" ",17],["functionDecl",7],["(",17],["FunctionDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionType(_:)"],"f":[["case",12],[" ",17],["functionType",7],["(",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["case",12],[" ",17],["functionType",7],["(",17],["FunctionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigDecl(_:)"],"f":[["case",12],[" ",17],["ifConfigDecl",7],["(",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["case",12],[" ",17],["ifConfigDecl",7],["(",17],["IfConfigDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","metatypeType(_:)"],"f":[["case",12],[" ",17],["metatypeType",7],["(",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["case",12],[" ",17],["metatypeType",7],["(",17],["MetatypeTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","modifierList(_:)"],"f":[["case",12],[" ",17],["modifierList",7],["(",17],["ModifierListSyntax",18,77],[")",17]],"s":[["case",12],[" ",17],["modifierList",7],["(",17],["ModifierListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objCSelector(_:)"],"f":[["case",12],[" ",17],["objCSelector",7],["(",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["case",12],[" ",17],["objCSelector",7],["(",17],["ObjCSelectorSyntax",18],[")",17]]},{"p":["SyntaxEnum","operatorDecl(_:)"],"f":[["case",12],[" ",17],["operatorDecl",7],["(",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["case",12],[" ",17],["operatorDecl",7],["(",17],["OperatorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalType(_:)"],"f":[["case",12],[" ",17],["optionalType",7],["(",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["case",12],[" ",17],["optionalType",7],["(",17],["OptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","protocolDecl(_:)"],"f":[["case",12],[" ",17],["protocolDecl",7],["(",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["case",12],[" ",17],["protocolDecl",7],["(",17],["ProtocolDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","returnClause(_:)"],"f":[["case",12],[" ",17],["returnClause",7],["(",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["case",12],[" ",17],["returnClause",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","sequenceExpr(_:)"],"f":[["case",12],[" ",17],["sequenceExpr",7],["(",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["case",12],[" ",17],["sequenceExpr",7],["(",17],["SequenceExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","superRefExpr(_:)"],"f":[["case",12],[" ",17],["superRefExpr",7],["(",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["case",12],[" ",17],["superRefExpr",7],["(",17],["SuperRefExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePattern(_:)"],"f":[["case",12],[" ",17],["tuplePattern",7],["(",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["case",12],[" ",17],["tuplePattern",7],["(",17],["TuplePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","variableDecl(_:)"],"f":[["case",12],[" ",17],["variableDecl",7],["(",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["case",12],[" ",17],["variableDecl",7],["(",17],["VariableDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","versionTuple(_:)"],"f":[["case",12],[" ",17],["versionTuple",7],["(",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["case",12],[" ",17],["versionTuple",7],["(",17],["VersionTupleSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorBlock(_:)"],"f":[["case",12],[" ",17],["accessorBlock",7],["(",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["case",12],[" ",17],["accessorBlock",7],["(",17],["AccessorBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","asTypePattern(_:)"],"f":[["case",12],[" ",17],["asTypePattern",7],["(",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["case",12],[" ",17],["asTypePattern",7],["(",17],["AsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","attributeList(_:)"],"f":[["case",12],[" ",17],["attributeList",7],["(",17],["AttributeListSyntax",18,103],[")",17]],"s":[["case",12],[" ",17],["attributeList",7],["(",17],["AttributeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchItemList(_:)"],"f":[["case",12],[" ",17],["catchItemList",7],["(",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["case",12],[" ",17],["catchItemList",7],["(",17],["CatchItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlockItem(_:)"],"f":[["case",12],[" ",17],["codeBlockItem",7],["(",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["case",12],[" ",17],["codeBlockItem",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","extensionDecl(_:)"],"f":[["case",12],[" ",17],["extensionDecl",7],["(",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["case",12],[" ",17],["extensionDecl",7],["(",17],["ExtensionDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","inheritedType(_:)"],"f":[["case",12],[" ",17],["inheritedType",7],["(",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["case",12],[" ",17],["inheritedType",7],["(",17],["InheritedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","isTypePattern(_:)"],"f":[["case",12],[" ",17],["isTypePattern",7],["(",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["case",12],[" ",17],["isTypePattern",7],["(",17],["IsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcNamePiece(_:)"],"f":[["case",12],[" ",17],["objcNamePiece",7],["(",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["case",12],[" ",17],["objcNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFileExpr(_:)"],"f":[["case",12],[" ",17],["poundFileExpr",7],["(",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["case",12],[" ",17],["poundFileExpr",7],["(",17],["PoundFileExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundLineExpr(_:)"],"f":[["case",12],[" ",17],["poundLineExpr",7],["(",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["case",12],[" ",17],["poundLineExpr",7],["(",17],["PoundLineExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringSegment(_:)"],"f":[["case",12],[" ",17],["stringSegment",7],["(",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["case",12],[" ",17],["stringSegment",7],["(",17],["StringSegmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","subscriptDecl(_:)"],"f":[["case",12],[" ",17],["subscriptDecl",7],["(",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["case",12],[" ",17],["subscriptDecl",7],["(",17],["SubscriptDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","subscriptExpr(_:)"],"f":[["case",12],[" ",17],["subscriptExpr",7],["(",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["case",12],[" ",17],["subscriptExpr",7],["(",17],["SubscriptExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","typealiasDecl(_:)"],"f":[["case",12],[" ",17],["typealiasDecl",7],["(",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["case",12],[" ",17],["typealiasDecl",7],["(",17],["TypealiasDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","assignmentExpr(_:)"],"f":[["case",12],[" ",17],["assignmentExpr",7],["(",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["case",12],[" ",17],["assignmentExpr",7],["(",17],["AssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","attributedType(_:)"],"f":[["case",12],[" ",17],["attributedType",7],["(",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["case",12],[" ",17],["attributedType",7],["(",17],["AttributedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryExpr(_:)"],"f":[["case",12],[" ",17],["dictionaryExpr",7],["(",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["case",12],[" ",17],["dictionaryExpr",7],["(",17],["DictionaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryType(_:)"],"f":[["case",12],[" ",17],["dictionaryType",7],["(",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["case",12],[" ",17],["dictionaryType",7],["(",17],["DictionaryTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionStmt(_:)"],"f":[["case",12],[" ",17],["expressionStmt",7],["(",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["case",12],[" ",17],["expressionStmt",7],["(",17],["ExpressionStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierExpr(_:)"],"f":[["case",12],[" ",17],["identifierExpr",7],["(",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["case",12],[" ",17],["identifierExpr",7],["(",17],["IdentifierExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierList(_:)"],"f":[["case",12],[" ",17],["identifierList",7],["(",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["case",12],[" ",17],["identifierList",7],["(",17],["IdentifierListSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigClause(_:)"],"f":[["case",12],[" ",17],["ifConfigClause",7],["(",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["case",12],[" ",17],["ifConfigClause",7],["(",17],["IfConfigClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclList(_:)"],"f":[["case",12],[" ",17],["memberDeclList",7],["(",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["case",12],[" ",17],["memberDeclList",7],["(",17],["MemberDeclListSyntax",18],[")",17]]},{"p":["SyntaxEnum","nilLiteralExpr(_:)"],"f":[["case",12],[" ",17],["nilLiteralExpr",7],["(",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["case",12],[" ",17],["nilLiteralExpr",7],["(",17],["NilLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","patternBinding(_:)"],"f":[["case",12],[" ",17],["patternBinding",7],["(",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["case",12],[" ",17],["patternBinding",7],["(",17],["PatternBindingSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundErrorDecl(_:)"],"f":[["case",12],[" ",17],["poundErrorDecl",7],["(",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["case",12],[" ",17],["poundErrorDecl",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","specializeExpr(_:)"],"f":[["case",12],[" ",17],["specializeExpr",7],["(",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["case",12],[" ",17],["specializeExpr",7],["(",17],["SpecializeExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCaseList(_:)"],"f":[["case",12],[" ",17],["switchCaseList",7],["(",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["case",12],[" ",17],["switchCaseList",7],["(",17],["SwitchCaseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeAnnotation(_:)"],"f":[["case",12],[" ",17],["typeAnnotation",7],["(",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["case",12],[" ",17],["typeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownPattern(_:)"],"f":[["case",12],[" ",17],["unknownPattern",7],["(",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["case",12],[" ",17],["unknownPattern",7],["(",17],["UnknownPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchClauseList(_:)"],"f":[["case",12],[" ",17],["catchClauseList",7],["(",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["case",12],[" ",17],["catchClauseList",7],["(",17],["CatchClauseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionType(_:)"],"f":[["case",12],[" ",17],["compositionType",7],["(",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["case",12],[" ",17],["compositionType",7],["(",17],["CompositionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","customAttribute(_:)"],"f":[["case",12],[" ",17],["customAttribute",7],["(",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["case",12],[" ",17],["customAttribute",7],["(",17],["CustomAttributeSyntax",18],[")",17]]},{"p":["SyntaxEnum","declarationStmt(_:)"],"f":[["case",12],[" ",17],["declarationStmt",7],["(",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["case",12],[" ",17],["declarationStmt",7],["(",17],["DeclarationStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseElement(_:)"],"f":[["case",12],[" ",17],["enumCaseElement",7],["(",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["case",12],[" ",17],["enumCaseElement",7],["(",17],["EnumCaseElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCasePattern(_:)"],"f":[["case",12],[" ",17],["enumCasePattern",7],["(",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["case",12],[" ",17],["enumCasePattern",7],["(",17],["EnumCasePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","fallthroughStmt(_:)"],"f":[["case",12],[" ",17],["fallthroughStmt",7],["(",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["case",12],[" ",17],["fallthroughStmt",7],["(",17],["FallthroughStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","forcedValueExpr(_:)"],"f":[["case",12],[" ",17],["forcedValueExpr",7],["(",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["case",12],[" ",17],["forcedValueExpr",7],["(",17],["ForcedValueExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgument(_:)"],"f":[["case",12],[" ",17],["genericArgument",7],["(",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["case",12],[" ",17],["genericArgument",7],["(",17],["GenericArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","initializerDecl(_:)"],"f":[["case",12],[" ",17],["initializerDecl",7],["(",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["case",12],[" ",17],["initializerDecl",7],["(",17],["InitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","keyPathBaseExpr(_:)"],"f":[["case",12],[" ",17],["keyPathBaseExpr",7],["(",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["case",12],[" ",17],["keyPathBaseExpr",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclBlock(_:)"],"f":[["case",12],[" ",17],["memberDeclBlock",7],["(",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["case",12],[" ",17],["memberDeclBlock",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcKeyPathExpr(_:)"],"f":[["case",12],[" ",17],["objcKeyPathExpr",7],["(",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["case",12],[" ",17],["objcKeyPathExpr",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalPattern(_:)"],"f":[["case",12],[" ",17],["optionalPattern",7],["(",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["case",12],[" ",17],["optionalPattern",7],["(",17],["OptionalPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","parameterClause(_:)"],"f":[["case",12],[" ",17],["parameterClause",7],["(",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["case",12],[" ",17],["parameterClause",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundAssertStmt(_:)"],"f":[["case",12],[" ",17],["poundAssertStmt",7],["(",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["case",12],[" ",17],["poundAssertStmt",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundColumnExpr(_:)"],"f":[["case",12],[" ",17],["poundColumnExpr",7],["(",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["case",12],[" ",17],["poundColumnExpr",7],["(",17],["PoundColumnExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFileIDExpr(_:)"],"f":[["case",12],[" ",17],["poundFileIDExpr",7],["(",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["case",12],[" ",17],["poundFileIDExpr",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","repeatWhileStmt(_:)"],"f":[["case",12],[" ",17],["repeatWhileStmt",7],["(",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["case",12],[" ",17],["repeatWhileStmt",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCaseLabel(_:)"],"f":[["case",12],[" ",17],["switchCaseLabel",7],["(",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["case",12],[" ",17],["switchCaseLabel",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]]},{"p":["SyntaxEnum","wildcardPattern(_:)"],"f":[["case",12],[" ",17],["wildcardPattern",7],["(",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["case",12],[" ",17],["wildcardPattern",7],["(",17],["WildcardPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayElementList(_:)"],"f":[["case",12],[" ",17],["arrayElementList",7],["(",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["case",12],[" ",17],["arrayElementList",7],["(",17],["ArrayElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureParamList(_:)"],"f":[["case",12],[" ",17],["closureParamList",7],["(",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["case",12],[" ",17],["closureParamList",7],["(",17],["ClosureParamListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureSignature(_:)"],"f":[["case",12],[" ",17],["closureSignature",7],["(",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["case",12],[" ",17],["closureSignature",7],["(",17],["ClosureSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","conditionElement(_:)"],"f":[["case",12],[" ",17],["conditionElement",7],["(",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["case",12],[" ",17],["conditionElement",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArgument(_:)"],"f":[["case",12],[" ",17],["declNameArgument",7],["(",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["case",12],[" ",17],["declNameArgument",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","floatLiteralExpr(_:)"],"f":[["case",12],[" ",17],["floatLiteralExpr",7],["(",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["case",12],[" ",17],["floatLiteralExpr",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionCallExpr(_:)"],"f":[["case",12],[" ",17],["functionCallExpr",7],["(",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["case",12],[" ",17],["functionCallExpr",7],["(",17],["FunctionCallExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionDeclName(_:)"],"f":[["case",12],[" ",17],["functionDeclName",7],["(",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["case",12],[" ",17],["functionDeclName",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameter(_:)"],"f":[["case",12],[" ",17],["genericParameter",7],["(",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["case",12],[" ",17],["genericParameter",7],["(",17],["GenericParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberAccessExpr(_:)"],"f":[["case",12],[" ",17],["memberAccessExpr",7],["(",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["case",12],[" ",17],["memberAccessExpr",7],["(",17],["MemberAccessExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcSelectorExpr(_:)"],"f":[["case",12],[" ",17],["objcSelectorExpr",7],["(",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["case",12],[" ",17],["objcSelectorExpr",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","postfixUnaryExpr(_:)"],"f":[["case",12],[" ",17],["postfixUnaryExpr",7],["(",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["case",12],[" ",17],["postfixUnaryExpr",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundWarningDecl(_:)"],"f":[["case",12],[" ",17],["poundWarningDecl",7],["(",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["case",12],[" ",17],["poundWarningDecl",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","regexLiteralExpr(_:)"],"f":[["case",12],[" ",17],["regexLiteralExpr",7],["(",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["case",12],[" ",17],["regexLiteralExpr",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExprElement(_:)"],"f":[["case",12],[" ",17],["tupleExprElement",7],["(",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["case",12],[" ",17],["tupleExprElement",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleTypeElement(_:)"],"f":[["case",12],[" ",17],["tupleTypeElement",7],["(",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["case",12],[" ",17],["tupleTypeElement",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorParameter(_:)"],"f":[["case",12],[" ",17],["accessorParameter",7],["(",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["case",12],[" ",17],["accessorParameter",7],["(",17],["AccessorParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityEntry(_:)"],"f":[["case",12],[" ",17],["availabilityEntry",7],["(",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["case",12],[" ",17],["availabilityEntry",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlockItemList(_:)"],"f":[["case",12],[" ",17],["codeBlockItemList",7],["(",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["case",12],[" ",17],["codeBlockItemList",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArguments(_:)"],"f":[["case",12],[" ",17],["declNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["case",12],[" ",17],["declNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","deinitializerDecl(_:)"],"f":[["case",12],[" ",17],["deinitializerDecl",7],["(",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["case",12],[" ",17],["deinitializerDecl",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryElement(_:)"],"f":[["case",12],[" ",17],["dictionaryElement",7],["(",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["case",12],[" ",17],["dictionaryElement",7],["(",17],["DictionaryElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionPattern(_:)"],"f":[["case",12],[" ",17],["expressionPattern",7],["(",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["case",12],[" ",17],["expressionPattern",7],["(",17],["ExpressionPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionSegment(_:)"],"f":[["case",12],[" ",17],["expressionSegment",7],["(",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["case",12],[" ",17],["expressionSegment",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionParameter(_:)"],"f":[["case",12],[" ",17],["functionParameter",7],["(",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["case",12],[" ",17],["functionParameter",7],["(",17],["FunctionParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionSignature(_:)"],"f":[["case",12],[" ",17],["functionSignature",7],["(",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["case",12],[" ",17],["functionSignature",7],["(",17],["FunctionSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierPattern(_:)"],"f":[["case",12],[" ",17],["identifierPattern",7],["(",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["case",12],[" ",17],["identifierPattern",7],["(",17],["IdentifierPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","inheritedTypeList(_:)"],"f":[["case",12],[" ",17],["inheritedTypeList",7],["(",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["case",12],[" ",17],["inheritedTypeList",7],["(",17],["InheritedTypeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","initializerClause(_:)"],"f":[["case",12],[" ",17],["initializerClause",7],["(",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["case",12],[" ",17],["initializerClause",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","nonEmptyTokenList(_:)"],"f":[["case",12],[" ",17],["nonEmptyTokenList",7],["(",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["case",12],[" ",17],["nonEmptyTokenList",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objCSelectorPiece(_:)"],"f":[["case",12],[" ",17],["objCSelectorPiece",7],["(",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["case",12],[" ",17],["objCSelectorPiece",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]]},{"p":["SyntaxEnum","objectLiteralExpr(_:)"],"f":[["case",12],[" ",17],["objectLiteralExpr",7],["(",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["case",12],[" ",17],["objectLiteralExpr",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFilePathExpr(_:)"],"f":[["case",12],[" ",17],["poundFilePathExpr",7],["(",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["case",12],[" ",17],["poundFilePathExpr",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFunctionExpr(_:)"],"f":[["case",12],[" ",17],["poundFunctionExpr",7],["(",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["case",12],[" ",17],["poundFunctionExpr",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","qualifiedDeclName(_:)"],"f":[["case",12],[" ",17],["qualifiedDeclName",7],["(",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["case",12],[" ",17],["qualifiedDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringLiteralExpr(_:)"],"f":[["case",12],[" ",17],["stringLiteralExpr",7],["(",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["case",12],[" ",17],["stringLiteralExpr",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","associatedtypeDecl(_:)"],"f":[["case",12],[" ",17],["associatedtypeDecl",7],["(",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["case",12],[" ",17],["associatedtypeDecl",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","binaryOperatorExpr(_:)"],"f":[["case",12],[" ",17],["binaryOperatorExpr",7],["(",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["case",12],[" ",17],["binaryOperatorExpr",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","booleanLiteralExpr(_:)"],"f":[["case",12],[" ",17],["booleanLiteralExpr",7],["(",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["case",12],[" ",17],["booleanLiteralExpr",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureItem(_:)"],"f":[["case",12],[" ",17],["closureCaptureItem",7],["(",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["case",12],[" ",17],["closureCaptureItem",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","elseIfContinuation(_:)"],"f":[["case",12],[" ",17],["elseIfContinuation",7],["(",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["case",12],[" ",17],["elseIfContinuation",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericRequirement(_:)"],"f":[["case",12],[" ",17],["genericRequirement",7],["(",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["case",12],[" ",17],["genericRequirement",7],["(",17],["GenericRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericWhereClause(_:)"],"f":[["case",12],[" ",17],["genericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["case",12],[" ",17],["genericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigClauseList(_:)"],"f":[["case",12],[" ",17],["ifConfigClauseList",7],["(",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["case",12],[" ",17],["ifConfigClauseList",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","integerLiteralExpr(_:)"],"f":[["case",12],[" ",17],["integerLiteralExpr",7],["(",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["case",12],[" ",17],["integerLiteralExpr",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclListItem(_:)"],"f":[["case",12],[" ",17],["memberDeclListItem",7],["(",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["case",12],[" ",17],["memberDeclListItem",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","patternBindingList(_:)"],"f":[["case",12],[" ",17],["patternBindingList",7],["(",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["case",12],[" ",17],["patternBindingList",7],["(",17],["PatternBindingListSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundDsohandleExpr(_:)"],"f":[["case",12],[" ",17],["poundDsohandleExpr",7],["(",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["case",12],[" ",17],["poundDsohandleExpr",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","prefixOperatorExpr(_:)"],"f":[["case",12],[" ",17],["prefixOperatorExpr",7],["(",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["case",12],[" ",17],["prefixOperatorExpr",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchDefaultLabel(_:)"],"f":[["case",12],[" ",17],["switchDefaultLabel",7],["(",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["case",12],[" ",17],["switchDefaultLabel",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessLevelModifier(_:)"],"f":[["case",12],[" ",17],["accessLevelModifier",7],["(",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["case",12],[" ",17],["accessLevelModifier",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessPathComponent(_:)"],"f":[["case",12],[" ",17],["accessPathComponent",7],["(",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["case",12],[" ",17],["accessPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseElementList(_:)"],"f":[["case",12],[" ",17],["enumCaseElementList",7],["(",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["case",12],[" ",17],["enumCaseElementList",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgumentList(_:)"],"f":[["case",12],[" ",17],["genericArgumentList",7],["(",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["case",12],[" ",17],["genericArgumentList",7],["(",17],["GenericArgumentListSyntax",18],[")",17]]},{"p":["SyntaxEnum","postfixIfConfigExpr(_:)"],"f":[["case",12],[" ",17],["postfixIfConfigExpr",7],["(",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["case",12],[" ",17],["postfixIfConfigExpr",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundSourceLocation(_:)"],"f":[["case",12],[" ",17],["poundSourceLocation",7],["(",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["case",12],[" ",17],["poundSourceLocation",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupDecl(_:)"],"f":[["case",12],[" ",17],["precedenceGroupDecl",7],["(",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupDecl",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","sameTypeRequirement(_:)"],"f":[["case",12],[" ",17],["sameTypeRequirement",7],["(",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["case",12],[" ",17],["sameTypeRequirement",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","targetFunctionEntry(_:)"],"f":[["case",12],[" ",17],["targetFunctionEntry",7],["(",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["case",12],[" ",17],["targetFunctionEntry",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePatternElement(_:)"],"f":[["case",12],[" ",17],["tuplePatternElement",7],["(",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["case",12],[" ",17],["tuplePatternElement",7],["(",17],["TuplePatternElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","valueBindingPattern(_:)"],"f":[["case",12],[" ",17],["valueBindingPattern",7],["(",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["case",12],[" ",17],["valueBindingPattern",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityArgument(_:)"],"f":[["case",12],[" ",17],["availabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["case",12],[" ",17],["availabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilitySpecList(_:)"],"f":[["case",12],[" ",17],["availabilitySpecList",7],["(",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["case",12],[" ",17],["availabilitySpecList",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]]},{"p":["SyntaxEnum","classRestrictionType(_:)"],"f":[["case",12],[" ",17],["classRestrictionType",7],["(",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["case",12],[" ",17],["classRestrictionType",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","conditionElementList(_:)"],"f":[["case",12],[" ",17],["conditionElementList",7],["(",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["case",12],[" ",17],["conditionElementList",7],["(",17],["ConditionElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","constrainedSugarType(_:)"],"f":[["case",12],[" ",17],["constrainedSugarType",7],["(",17],["ConstrainedSugarTypeSyntax",18,332],[")",17]],"s":[["case",12],[" ",17],["constrainedSugarType",7],["(",17],["ConstrainedSugarTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArgumentList(_:)"],"f":[["case",12],[" ",17],["declNameArgumentList",7],["(",17],["DeclNameArgumentListSyntax",18,334],[")",17]],"s":[["case",12],[" ",17],["declNameArgumentList",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameterList(_:)"],"f":[["case",12],[" ",17],["genericParameterList",7],["(",17],["GenericParameterListSyntax",18,336],[")",17]],"s":[["case",12],[" ",17],["genericParameterList",7],["(",17],["GenericParameterListSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberTypeIdentifier(_:)"],"f":[["case",12],[" ",17],["memberTypeIdentifier",7],["(",17],["MemberTypeIdentifierSyntax",18,338],[")",17]],"s":[["case",12],[" ",17],["memberTypeIdentifier",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalChainingExpr(_:)"],"f":[["case",12],[" ",17],["optionalChainingExpr",7],["(",17],["OptionalChainingExprSyntax",18,340],[")",17]],"s":[["case",12],[" ",17],["optionalChainingExpr",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","simpleTypeIdentifier(_:)"],"f":[["case",12],[" ",17],["simpleTypeIdentifier",7],["(",17],["SimpleTypeIdentifierSyntax",18,342],[")",17]],"s":[["case",12],[" ",17],["simpleTypeIdentifier",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExprElementList(_:)"],"f":[["case",12],[" ",17],["tupleExprElementList",7],["(",17],["TupleExprElementListSyntax",18,344],[")",17]],"s":[["case",12],[" ",17],["tupleExprElementList",7],["(",17],["TupleExprElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleTypeElementList(_:)"],"f":[["case",12],[" ",17],["tupleTypeElementList",7],["(",17],["TupleTypeElementListSyntax",18,346],[")",17]],"s":[["case",12],[" ",17],["tupleTypeElementList",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityCondition(_:)"],"f":[["case",12],[" ",17],["availabilityCondition",7],["(",17],["AvailabilityConditionSyntax",18,348],[")",17]],"s":[["case",12],[" ",17],["availabilityCondition",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","backDeployVersionList(_:)"],"f":[["case",12],[" ",17],["backDeployVersionList",7],["(",17],["BackDeployVersionListSyntax",18,350],[")",17]],"s":[["case",12],[" ",17],["backDeployVersionList",7],["(",17],["BackDeployVersionListSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryElementList(_:)"],"f":[["case",12],[" ",17],["dictionaryElementList",7],["(",17],["DictionaryElementListSyntax",18,352],[")",17]],"s":[["case",12],[" ",17],["dictionaryElementList",7],["(",17],["DictionaryElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","discardAssignmentExpr(_:)"],"f":[["case",12],[" ",17],["discardAssignmentExpr",7],["(",17],["DiscardAssignmentExprSyntax",18,354],[")",17]],"s":[["case",12],[" ",17],["discardAssignmentExpr",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","editorPlaceholderExpr(_:)"],"f":[["case",12],[" ",17],["editorPlaceholderExpr",7],["(",17],["EditorPlaceholderExprSyntax",18,356],[")",17]],"s":[["case",12],[" ",17],["editorPlaceholderExpr",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionParameterList(_:)"],"f":[["case",12],[" ",17],["functionParameterList",7],["(",17],["FunctionParameterListSyntax",18,358],[")",17]],"s":[["case",12],[" ",17],["functionParameterList",7],["(",17],["FunctionParameterListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgumentClause(_:)"],"f":[["case",12],[" ",17],["genericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["case",12],[" ",17],["genericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","primaryAssociatedType(_:)"],"f":[["case",12],[" ",17],["primaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18,362],[")",17]],"s":[["case",12],[" ",17],["primaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringLiteralSegments(_:)"],"f":[["case",12],[" ",17],["stringLiteralSegments",7],["(",17],["StringLiteralSegmentsSyntax",18,364],[")",17]],"s":[["case",12],[" ",17],["stringLiteralSegments",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","symbolicReferenceExpr(_:)"],"f":[["case",12],[" ",17],["symbolicReferenceExpr",7],["(",17],["SymbolicReferenceExprSyntax",18,366],[")",17]],"s":[["case",12],[" ",17],["symbolicReferenceExpr",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeInheritanceClause(_:)"],"f":[["case",12],[" ",17],["typeInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["case",12],[" ",17],["typeInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeInitializerClause(_:)"],"f":[["case",12],[" ",17],["typeInitializerClause",7],["(",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["case",12],[" ",17],["typeInitializerClause",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","unresolvedPatternExpr(_:)"],"f":[["case",12],[" ",17],["unresolvedPatternExpr",7],["(",17],["UnresolvedPatternExprSyntax",18,372],[")",17]],"s":[["case",12],[" ",17],["unresolvedPatternExpr",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureItemList(_:)"],"f":[["case",12],[" ",17],["closureCaptureItemList",7],["(",17],["ClosureCaptureItemListSyntax",18,374],[")",17]],"s":[["case",12],[" ",17],["closureCaptureItemList",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionTypeElement(_:)"],"f":[["case",12],[" ",17],["compositionTypeElement",7],["(",17],["CompositionTypeElementSyntax",18,376],[")",17]],"s":[["case",12],[" ",17],["compositionTypeElement",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","conformanceRequirement(_:)"],"f":[["case",12],[" ",17],["conformanceRequirement",7],["(",17],["ConformanceRequirementSyntax",18,378],[")",17]],"s":[["case",12],[" ",17],["conformanceRequirement",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParam(_:)"],"f":[["case",12],[" ",17],["differentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18,380],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameterClause(_:)"],"f":[["case",12],[" ",17],["genericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["case",12],[" ",17],["genericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericRequirementList(_:)"],"f":[["case",12],[" ",17],["genericRequirementList",7],["(",17],["GenericRequirementListSyntax",18,384],[")",17]],"s":[["case",12],[" ",17],["genericRequirementList",7],["(",17],["GenericRequirementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","labeledSpecializeEntry(_:)"],"f":[["case",12],[" ",17],["labeledSpecializeEntry",7],["(",17],["LabeledSpecializeEntrySyntax",18,386],[")",17]],"s":[["case",12],[" ",17],["labeledSpecializeEntry",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureSignature(_:)"],"f":[["case",12],[" ",17],["closureCaptureSignature",7],["(",17],["ClosureCaptureSignatureSyntax",18,388],[")",17]],"s":[["case",12],[" ",17],["closureCaptureSignature",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParams(_:)"],"f":[["case",12],[" ",17],["differentiabilityParams",7],["(",17],["DifferentiabilityParamsSyntax",18,390],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParams",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundSourceLocationArgs(_:)"],"f":[["case",12],[" ",17],["poundSourceLocationArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18,392],[")",17]],"s":[["case",12],[" ",17],["poundSourceLocationArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupNameList(_:)"],"f":[["case",12],[" ",17],["precedenceGroupNameList",7],["(",17],["PrecedenceGroupNameListSyntax",18,394],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupNameList",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupRelation(_:)"],"f":[["case",12],[" ",17],["precedenceGroupRelation",7],["(",17],["PrecedenceGroupRelationSyntax",18,396],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupRelation",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePatternElementList(_:)"],"f":[["case",12],[" ",17],["tuplePatternElementList",7],["(",17],["TuplePatternElementListSyntax",18,398],[")",17]],"s":[["case",12],[" ",17],["tuplePatternElementList",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","unavailabilityCondition(_:)"],"f":[["case",12],[" ",17],["unavailabilityCondition",7],["(",17],["UnavailabilityConditionSyntax",18,400],[")",17]],"s":[["case",12],[" ",17],["unavailabilityCondition",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","matchingPatternCondition(_:)"],"f":[["case",12],[" ",17],["matchingPatternCondition",7],["(",17],["MatchingPatternConditionSyntax",18,402],[")",17]],"s":[["case",12],[" ",17],["matchingPatternCondition",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalBindingCondition(_:)"],"f":[["case",12],[" ",17],["optionalBindingCondition",7],["(",17],["OptionalBindingConditionSyntax",18,404],[")",17]],"s":[["case",12],[" ",17],["optionalBindingCondition",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","backDeployVersionArgument(_:)"],"f":[["case",12],[" ",17],["backDeployVersionArgument",7],["(",17],["BackDeployVersionArgumentSyntax",18,406],[")",17]],"s":[["case",12],[" ",17],["backDeployVersionArgument",7],["(",17],["BackDeployVersionArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAssignment(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAssignment",7],["(",17],["PrecedenceGroupAssignmentSyntax",18,408],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAssignment",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","primaryAssociatedTypeList(_:)"],"f":[["case",12],[" ",17],["primaryAssociatedTypeList",7],["(",17],["PrimaryAssociatedTypeListSyntax",18,410],[")",17]],"s":[["case",12],[" ",17],["primaryAssociatedTypeList",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionTypeElementList(_:)"],"f":[["case",12],[" ",17],["compositionTypeElementList",7],["(",17],["CompositionTypeElementListSyntax",18,412],[")",17]],"s":[["case",12],[" ",17],["compositionTypeElementList",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParamList(_:)"],"f":[["case",12],[" ",17],["differentiabilityParamList",7],["(",17],["DifferentiabilityParamListSyntax",18,414],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParamList",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]]},{"p":["SyntaxEnum","operatorPrecedenceAndTypes(_:)"],"f":[["case",12],[" ",17],["operatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18,416],[")",17]],"s":[["case",12],[" ",17],["operatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupNameElement(_:)"],"f":[["case",12],[" ",17],["precedenceGroupNameElement",7],["(",17],["PrecedenceGroupNameElementSyntax",18,418],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupNameElement",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityLabeledArgument(_:)"],"f":[["case",12],[" ",17],["availabilityLabeledArgument",7],["(",17],["AvailabilityLabeledArgumentSyntax",18,420],[")",17]],"s":[["case",12],[" ",17],["availabilityLabeledArgument",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","backDeployAttributeSpecList(_:)"],"f":[["case",12],[" ",17],["backDeployAttributeSpecList",7],["(",17],["BackDeployAttributeSpecListSyntax",18,422],[")",17]],"s":[["case",12],[" ",17],["backDeployAttributeSpecList",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[")",17]]},{"p":["SyntaxEnum","primaryAssociatedTypeClause(_:)"],"f":[["case",12],[" ",17],["primaryAssociatedTypeClause",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[")",17]],"s":[["case",12],[" ",17],["primaryAssociatedTypeClause",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","specializeAttributeSpecList(_:)"],"f":[["case",12],[" ",17],["specializeAttributeSpecList",7],["(",17],["SpecializeAttributeSpecListSyntax",18,426],[")",17]],"s":[["case",12],[" ",17],["specializeAttributeSpecList",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]]},{"p":["SyntaxEnum","implementsAttributeArguments(_:)"],"f":[["case",12],[" ",17],["implementsAttributeArguments",7],["(",17],["ImplementsAttributeArgumentsSyntax",18,428],[")",17]],"s":[["case",12],[" ",17],["implementsAttributeArguments",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","namedAttributeStringArgument(_:)"],"f":[["case",12],[" ",17],["namedAttributeStringArgument",7],["(",17],["NamedAttributeStringArgumentSyntax",18,430],[")",17]],"s":[["case",12],[" ",17],["namedAttributeStringArgument",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAssociativity(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAssociativity",7],["(",17],["PrecedenceGroupAssociativitySyntax",18,432],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAssociativity",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAttributeList(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAttributeList",7],["(",17],["PrecedenceGroupAttributeListSyntax",18,434],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAttributeList",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParamsClause(_:)"],"f":[["case",12],[" ",17],["differentiabilityParamsClause",7],["(",17],["DifferentiabilityParamsClauseSyntax",18,436],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParamsClause",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityVersionRestriction(_:)"],"f":[["case",12],[" ",17],["availabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18,438],[")",17]],"s":[["case",12],[" ",17],["availabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]]},{"p":["SyntaxEnum","multipleTrailingClosureElement(_:)"],"f":[["case",12],[" ",17],["multipleTrailingClosureElement",7],["(",17],["MultipleTrailingClosureElementSyntax",18,440],[")",17]],"s":[["case",12],[" ",17],["multipleTrailingClosureElement",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","implicitlyUnwrappedOptionalType(_:)"],"f":[["case",12],[" ",17],["implicitlyUnwrappedOptionalType",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[")",17]],"s":[["case",12],[" ",17],["implicitlyUnwrappedOptionalType",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiableAttributeArguments(_:)"],"f":[["case",12],[" ",17],["differentiableAttributeArguments",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18,444],[")",17]],"s":[["case",12],[" ",17],["differentiableAttributeArguments",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","multipleTrailingClosureElementList(_:)"],"f":[["case",12],[" ",17],["multipleTrailingClosureElementList",7],["(",17],["MultipleTrailingClosureElementListSyntax",18,446],[")",17]],"s":[["case",12],[" ",17],["multipleTrailingClosureElementList",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","derivativeRegistrationAttributeArguments(_:)"],"f":[["case",12],[" ",17],["derivativeRegistrationAttributeArguments",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[")",17]],"s":[["case",12],[" ",17],["derivativeRegistrationAttributeArguments",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","decl(_:)"],"f":[["case",12],[" ",17],["decl",7],["(",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["case",12],[" ",17],["decl",7],["(",17],["UnknownDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","expr(_:)"],"f":[["case",12],[" ",17],["expr",7],["(",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["case",12],[" ",17],["expr",7],["(",17],["UnknownExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","stmt(_:)"],"f":[["case",12],[" ",17],["stmt",7],["(",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["case",12],[" ",17],["stmt",7],["(",17],["UnknownStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","type(_:)"],"f":[["case",12],[" ",17],["type",7],["(",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["case",12],[" ",17],["type",7],["(",17],["UnknownTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","token(_:)"],"f":[["case",12],[" ",17],["token",7],["(",17],["TokenSyntax",18,454],[")",17]],"s":[["case",12],[" ",17],["token",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SyntaxEnum","asExpr(_:)"],"f":[["case",12],[" ",17],["asExpr",7],["(",17],["AsExprSyntax",18,455],[")",17]],"s":[["case",12],[" ",17],["asExpr",7],["(",17],["AsExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","doStmt(_:)"],"f":[["case",12],[" ",17],["doStmt",7],["(",17],["DoStmtSyntax",18,457],[")",17]],"s":[["case",12],[" ",17],["doStmt",7],["(",17],["DoStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifStmt(_:)"],"f":[["case",12],[" ",17],["ifStmt",7],["(",17],["IfStmtSyntax",18,459],[")",17]],"s":[["case",12],[" ",17],["ifStmt",7],["(",17],["IfStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","isExpr(_:)"],"f":[["case",12],[" ",17],["isExpr",7],["(",17],["IsExprSyntax",18,461],[")",17]],"s":[["case",12],[" ",17],["isExpr",7],["(",17],["IsExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","pattern(_:)"],"f":[["case",12],[" ",17],["pattern",7],["(",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["case",12],[" ",17],["pattern",7],["(",17],["UnknownPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","tryExpr(_:)"],"f":[["case",12],[" ",17],["tryExpr",7],["(",17],["TryExprSyntax",18,464],[")",17]],"s":[["case",12],[" ",17],["tryExpr",7],["(",17],["TryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknown(_:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["UnknownSyntax",18,466],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["UnknownSyntax",18],[")",17]]},{"p":["SyntaxEnum","caseItem(_:)"],"f":[["case",12],[" ",17],["caseItem",7],["(",17],["CaseItemSyntax",18,467],[")",17]],"s":[["case",12],[" ",17],["caseItem",7],["(",17],["CaseItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","declName(_:)"],"f":[["case",12],[" ",17],["declName",7],["(",17],["DeclNameSyntax",18,469],[")",17]],"s":[["case",12],[" ",17],["declName",7],["(",17],["DeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumDecl(_:)"],"f":[["case",12],[" ",17],["enumDecl",7],["(",17],["EnumDeclSyntax",18,471],[")",17]],"s":[["case",12],[" ",17],["enumDecl",7],["(",17],["EnumDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","exprList(_:)"],"f":[["case",12],[" ",17],["exprList",7],["(",17],["ExprListSyntax",18,473],[")",17]],"s":[["case",12],[" ",17],["exprList",7],["(",17],["ExprListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcName(_:)"],"f":[["case",12],[" ",17],["objcName",7],["(",17],["ObjcNameSyntax",18,475],[")",17]],"s":[["case",12],[" ",17],["objcName",7],["(",17],["ObjcNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeExpr(_:)"],"f":[["case",12],[" ",17],["typeExpr",7],["(",17],["TypeExprSyntax",18,477],[")",17]],"s":[["case",12],[" ",17],["typeExpr",7],["(",17],["TypeExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayExpr(_:)"],"f":[["case",12],[" ",17],["arrayExpr",7],["(",17],["ArrayExprSyntax",18,479],[")",17]],"s":[["case",12],[" ",17],["arrayExpr",7],["(",17],["ArrayExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayType(_:)"],"f":[["case",12],[" ",17],["arrayType",7],["(",17],["ArrayTypeSyntax",18,481],[")",17]],"s":[["case",12],[" ",17],["arrayType",7],["(",17],["ArrayTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrowExpr(_:)"],"f":[["case",12],[" ",17],["arrowExpr",7],["(",17],["ArrowExprSyntax",18,483],[")",17]],"s":[["case",12],[" ",17],["arrowExpr",7],["(",17],["ArrowExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","attribute(_:)"],"f":[["case",12],[" ",17],["attribute",7],["(",17],["AttributeSyntax",18,485],[")",17]],"s":[["case",12],[" ",17],["attribute",7],["(",17],["AttributeSyntax",18],[")",17]]},{"p":["SyntaxEnum","awaitExpr(_:)"],"f":[["case",12],[" ",17],["awaitExpr",7],["(",17],["AwaitExprSyntax",18,487],[")",17]],"s":[["case",12],[" ",17],["awaitExpr",7],["(",17],["AwaitExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","breakStmt(_:)"],"f":[["case",12],[" ",17],["breakStmt",7],["(",17],["BreakStmtSyntax",18,489],[")",17]],"s":[["case",12],[" ",17],["breakStmt",7],["(",17],["BreakStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchItem(_:)"],"f":[["case",12],[" ",17],["catchItem",7],["(",17],["CatchItemSyntax",18,491],[")",17]],"s":[["case",12],[" ",17],["catchItem",7],["(",17],["CatchItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","classDecl(_:)"],"f":[["case",12],[" ",17],["classDecl",7],["(",17],["ClassDeclSyntax",18,493],[")",17]],"s":[["case",12],[" ",17],["classDecl",7],["(",17],["ClassDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlock(_:)"],"f":[["case",12],[" ",17],["codeBlock",7],["(",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["case",12],[" ",17],["codeBlock",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","deferStmt(_:)"],"f":[["case",12],[" ",17],["deferStmt",7],["(",17],["DeferStmtSyntax",18,497],[")",17]],"s":[["case",12],[" ",17],["deferStmt",7],["(",17],["DeferStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","elseBlock(_:)"],"f":[["case",12],[" ",17],["elseBlock",7],["(",17],["ElseBlockSyntax",18,499],[")",17]],"s":[["case",12],[" ",17],["elseBlock",7],["(",17],["ElseBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","forInStmt(_:)"],"f":[["case",12],[" ",17],["forInStmt",7],["(",17],["ForInStmtSyntax",18,501],[")",17]],"s":[["case",12],[" ",17],["forInStmt",7],["(",17],["ForInStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","guardStmt(_:)"],"f":[["case",12],[" ",17],["guardStmt",7],["(",17],["GuardStmtSyntax",18,503],[")",17]],"s":[["case",12],[" ",17],["guardStmt",7],["(",17],["GuardStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","inOutExpr(_:)"],"f":[["case",12],[" ",17],["inOutExpr",7],["(",17],["InOutExprSyntax",18,505],[")",17]],"s":[["case",12],[" ",17],["inOutExpr",7],["(",17],["InOutExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","throwStmt(_:)"],"f":[["case",12],[" ",17],["throwStmt",7],["(",17],["ThrowStmtSyntax",18,507],[")",17]],"s":[["case",12],[" ",17],["throwStmt",7],["(",17],["ThrowStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","tokenList(_:)"],"f":[["case",12],[" ",17],["tokenList",7],["(",17],["TokenListSyntax",18,509],[")",17]],"s":[["case",12],[" ",17],["tokenList",7],["(",17],["TokenListSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExpr(_:)"],"f":[["case",12],[" ",17],["tupleExpr",7],["(",17],["TupleExprSyntax",18,511],[")",17]],"s":[["case",12],[" ",17],["tupleExpr",7],["(",17],["TupleExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleType(_:)"],"f":[["case",12],[" ",17],["tupleType",7],["(",17],["TupleTypeSyntax",18,513],[")",17]],"s":[["case",12],[" ",17],["tupleType",7],["(",17],["TupleTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","whileStmt(_:)"],"f":[["case",12],[" ",17],["whileStmt",7],["(",17],["WhileStmtSyntax",18,515],[")",17]],"s":[["case",12],[" ",17],["whileStmt",7],["(",17],["WhileStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","yieldList(_:)"],"f":[["case",12],[" ",17],["yieldList",7],["(",17],["YieldListSyntax",18,517],[")",17]],"s":[["case",12],[" ",17],["yieldList",7],["(",17],["YieldListSyntax",18],[")",17]]},{"p":["SyntaxEnum","yieldStmt(_:)"],"f":[["case",12],[" ",17],["yieldStmt",7],["(",17],["YieldStmtSyntax",18,519],[")",17]],"s":[["case",12],[" ",17],["yieldStmt",7],["(",17],["YieldStmtSyntax",18],[")",17]]},{"p":["TriviaPiece","garbageText(_:)"],"f":[["case",12],[" ",17],["garbageText",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["garbageText",7],["(",17],["String",18],[")",17]],"d":"Any skipped garbage text."},{"p":["TriviaPiece","lineComment(_:)"],"f":[["case",12],[" ",17],["lineComment",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["lineComment",7],["(",17],["String",18],[")",17]],"d":"A developer line comment, starting with '//'"},{"p":["TriviaPiece","blockComment(_:)"],"f":[["case",12],[" ",17],["blockComment",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["blockComment",7],["(",17],["String",18],[")",17]],"d":"A developer block comment, starting with '/*' and ending with '*/'."},{"p":["TriviaPiece","verticalTabs(_:)"],"f":[["case",12],[" ",17],["verticalTabs",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["verticalTabs",7],["(",17],["Int",18],[")",17]],"d":"A vertical tab '\\v' character."},{"p":["TriviaPiece","docLineComment(_:)"],"f":[["case",12],[" ",17],["docLineComment",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["docLineComment",7],["(",17],["String",18],[")",17]],"d":"A documentation line comment, starting with '///'."},{"p":["TriviaPiece","carriageReturns(_:)"],"f":[["case",12],[" ",17],["carriageReturns",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["carriageReturns",7],["(",17],["Int",18],[")",17]],"d":"A newline '\\r' character."},{"p":["TriviaPiece","docBlockComment(_:)"],"f":[["case",12],[" ",17],["docBlockComment",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["docBlockComment",7],["(",17],["String",18],[")",17]],"d":"A documentation block comment, starting with '/**' and ending with '*/'."},{"p":["TriviaPiece","carriageReturnLineFeeds(_:)"],"f":[["case",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18],[")",17]],"d":"A newline consists of contiguous '\\r' and '\\n' characters."},{"p":["TriviaPiece","tabs(_:)"],"f":[["case",12],[" ",17],["tabs",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["tabs",7],["(",17],["Int",18],[")",17]],"d":"A tab '\\t' character."},{"p":["TriviaPiece","spaces(_:)"],"f":[["case",12],[" ",17],["spaces",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["spaces",7],["(",17],["Int",18],[")",17]],"d":"A space ' ' character."},{"p":["TriviaPiece","newlines(_:)"],"f":[["case",12],[" ",17],["newlines",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["newlines",7],["(",17],["Int",18],[")",17]],"d":"A newline '\\n' character."},{"p":["TriviaPiece","formfeeds(_:)"],"f":[["case",12],[" ",17],["formfeeds",7],["(",17],["Int",18,7823],[")",17]],"s":[["case",12],[" ",17],["formfeeds",7],["(",17],["Int",18],[")",17]],"d":"A form-feed 'f' character."},{"p":["SourcePresence","missing"],"f":[["case",12],[" ",17],["missing",7]],"s":[["case",12],[" ",17],["missing",7]],"d":"The syntax was expected or optional, but not found in the source."},{"p":["SourcePresence","present"],"f":[["case",12],[" ",17],["present",7]],"s":[["case",12],[" ",17],["present",7]],"d":"The syntax was authored by a human and found, or was generated."},{"p":["TokenKind","anyKeyword"],"f":[["case",12],[" ",17],["anyKeyword",7]],"s":[["case",12],[" ",17],["anyKeyword",7]]},{"p":["TokenKind","forKeyword"],"f":[["case",12],[" ",17],["forKeyword",7]],"s":[["case",12],[" ",17],["forKeyword",7]]},{"p":["TokenKind","identifier(_:)"],"f":[["case",12],[" ",17],["identifier",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["identifier",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","letKeyword"],"f":[["case",12],[" ",17],["letKeyword",7]],"s":[["case",12],[" ",17],["letKeyword",7]]},{"p":["TokenKind","nilKeyword"],"f":[["case",12],[" ",17],["nilKeyword",7]],"s":[["case",12],[" ",17],["nilKeyword",7]]},{"p":["TokenKind","rightAngle"],"f":[["case",12],[" ",17],["rightAngle",7]],"s":[["case",12],[" ",17],["rightAngle",7]]},{"p":["TokenKind","rightBrace"],"f":[["case",12],[" ",17],["rightBrace",7]],"s":[["case",12],[" ",17],["rightBrace",7]]},{"p":["TokenKind","rightParen"],"f":[["case",12],[" ",17],["rightParen",7]],"s":[["case",12],[" ",17],["rightParen",7]]},{"p":["TokenKind","tryKeyword"],"f":[["case",12],[" ",17],["tryKeyword",7]],"s":[["case",12],[" ",17],["tryKeyword",7]]},{"p":["TokenKind","varKeyword"],"f":[["case",12],[" ",17],["varKeyword",7]],"s":[["case",12],[" ",17],["varKeyword",7]]},{"p":["TokenKind","caseKeyword"],"f":[["case",12],[" ",17],["caseKeyword",7]],"s":[["case",12],[" ",17],["caseKeyword",7]]},{"p":["TokenKind","elseKeyword"],"f":[["case",12],[" ",17],["elseKeyword",7]],"s":[["case",12],[" ",17],["elseKeyword",7]]},{"p":["TokenKind","enumKeyword"],"f":[["case",12],[" ",17],["enumKeyword",7]],"s":[["case",12],[" ",17],["enumKeyword",7]]},{"p":["TokenKind","funcKeyword"],"f":[["case",12],[" ",17],["funcKeyword",7]],"s":[["case",12],[" ",17],["funcKeyword",7]]},{"p":["TokenKind","initKeyword"],"f":[["case",12],[" ",17],["initKeyword",7]],"s":[["case",12],[" ",17],["initKeyword",7]]},{"p":["TokenKind","selfKeyword"],"f":[["case",12],[" ",17],["selfKeyword",7]],"s":[["case",12],[" ",17],["selfKeyword",7]]},{"p":["TokenKind","singleQuote"],"f":[["case",12],[" ",17],["singleQuote",7]],"s":[["case",12],[" ",17],["singleQuote",7]]},{"p":["TokenKind","stringQuote"],"f":[["case",12],[" ",17],["stringQuote",7]],"s":[["case",12],[" ",17],["stringQuote",7]]},{"p":["TokenKind","trueKeyword"],"f":[["case",12],[" ",17],["trueKeyword",7]],"s":[["case",12],[" ",17],["trueKeyword",7]]},{"p":["TokenKind","breakKeyword"],"f":[["case",12],[" ",17],["breakKeyword",7]],"s":[["case",12],[" ",17],["breakKeyword",7]]},{"p":["TokenKind","catchKeyword"],"f":[["case",12],[" ",17],["catchKeyword",7]],"s":[["case",12],[" ",17],["catchKeyword",7]]},{"p":["TokenKind","classKeyword"],"f":[["case",12],[" ",17],["classKeyword",7]],"s":[["case",12],[" ",17],["classKeyword",7]]},{"p":["TokenKind","deferKeyword"],"f":[["case",12],[" ",17],["deferKeyword",7]],"s":[["case",12],[" ",17],["deferKeyword",7]]},{"p":["TokenKind","falseKeyword"],"f":[["case",12],[" ",17],["falseKeyword",7]],"s":[["case",12],[" ",17],["falseKeyword",7]]},{"p":["TokenKind","guardKeyword"],"f":[["case",12],[" ",17],["guardKeyword",7]],"s":[["case",12],[" ",17],["guardKeyword",7]]},{"p":["TokenKind","inoutKeyword"],"f":[["case",12],[" ",17],["inoutKeyword",7]],"s":[["case",12],[" ",17],["inoutKeyword",7]]},{"p":["TokenKind","prefixPeriod"],"f":[["case",12],[" ",17],["prefixPeriod",7]],"s":[["case",12],[" ",17],["prefixPeriod",7]]},{"p":["TokenKind","regexLiteral(_:)"],"f":[["case",12],[" ",17],["regexLiteral",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["regexLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","superKeyword"],"f":[["case",12],[" ",17],["superKeyword",7]],"s":[["case",12],[" ",17],["superKeyword",7]]},{"p":["TokenKind","throwKeyword"],"f":[["case",12],[" ",17],["throwKeyword",7]],"s":[["case",12],[" ",17],["throwKeyword",7]]},{"p":["TokenKind","whereKeyword"],"f":[["case",12],[" ",17],["whereKeyword",7]],"s":[["case",12],[" ",17],["whereKeyword",7]]},{"p":["TokenKind","whileKeyword"],"f":[["case",12],[" ",17],["whileKeyword",7]],"s":[["case",12],[" ",17],["whileKeyword",7]]},{"p":["TokenKind","deinitKeyword"],"f":[["case",12],[" ",17],["deinitKeyword",7]],"s":[["case",12],[" ",17],["deinitKeyword",7]]},{"p":["TokenKind","importKeyword"],"f":[["case",12],[" ",17],["importKeyword",7]],"s":[["case",12],[" ",17],["importKeyword",7]]},{"p":["TokenKind","publicKeyword"],"f":[["case",12],[" ",17],["publicKeyword",7]],"s":[["case",12],[" ",17],["publicKeyword",7]]},{"p":["TokenKind","repeatKeyword"],"f":[["case",12],[" ",17],["repeatKeyword",7]],"s":[["case",12],[" ",17],["repeatKeyword",7]]},{"p":["TokenKind","returnKeyword"],"f":[["case",12],[" ",17],["returnKeyword",7]],"s":[["case",12],[" ",17],["returnKeyword",7]]},{"p":["TokenKind","staticKeyword"],"f":[["case",12],[" ",17],["staticKeyword",7]],"s":[["case",12],[" ",17],["staticKeyword",7]]},{"p":["TokenKind","stringLiteral(_:)"],"f":[["case",12],[" ",17],["stringLiteral",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["stringLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","stringSegment(_:)"],"f":[["case",12],[" ",17],["stringSegment",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["stringSegment",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","structKeyword"],"f":[["case",12],[" ",17],["structKeyword",7]],"s":[["case",12],[" ",17],["structKeyword",7]]},{"p":["TokenKind","switchKeyword"],"f":[["case",12],[" ",17],["switchKeyword",7]],"s":[["case",12],[" ",17],["switchKeyword",7]]},{"p":["TokenKind","throwsKeyword"],"f":[["case",12],[" ",17],["throwsKeyword",7]],"s":[["case",12],[" ",17],["throwsKeyword",7]]},{"p":["TokenKind","defaultKeyword"],"f":[["case",12],[" ",17],["defaultKeyword",7]],"s":[["case",12],[" ",17],["defaultKeyword",7]]},{"p":["TokenKind","integerLiteral(_:)"],"f":[["case",12],[" ",17],["integerLiteral",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["integerLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","poundIfKeyword"],"f":[["case",12],[" ",17],["poundIfKeyword",7]],"s":[["case",12],[" ",17],["poundIfKeyword",7]]},{"p":["TokenKind","prefixOperator(_:)"],"f":[["case",12],[" ",17],["prefixOperator",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["prefixOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","privateKeyword"],"f":[["case",12],[" ",17],["privateKeyword",7]],"s":[["case",12],[" ",17],["privateKeyword",7]]},{"p":["TokenKind","continueKeyword"],"f":[["case",12],[" ",17],["continueKeyword",7]],"s":[["case",12],[" ",17],["continueKeyword",7]]},{"p":["TokenKind","exclamationMark"],"f":[["case",12],[" ",17],["exclamationMark",7]],"s":[["case",12],[" ",17],["exclamationMark",7]]},{"p":["TokenKind","floatingLiteral(_:)"],"f":[["case",12],[" ",17],["floatingLiteral",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["floatingLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","internalKeyword"],"f":[["case",12],[" ",17],["internalKeyword",7]],"s":[["case",12],[" ",17],["internalKeyword",7]]},{"p":["TokenKind","operatorKeyword"],"f":[["case",12],[" ",17],["operatorKeyword",7]],"s":[["case",12],[" ",17],["operatorKeyword",7]]},{"p":["TokenKind","postfixOperator(_:)"],"f":[["case",12],[" ",17],["postfixOperator",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["postfixOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","prefixAmpersand"],"f":[["case",12],[" ",17],["prefixAmpersand",7]],"s":[["case",12],[" ",17],["prefixAmpersand",7]]},{"p":["TokenKind","protocolKeyword"],"f":[["case",12],[" ",17],["protocolKeyword",7]],"s":[["case",12],[" ",17],["protocolKeyword",7]]},{"p":["TokenKind","rethrowsKeyword"],"f":[["case",12],[" ",17],["rethrowsKeyword",7]],"s":[["case",12],[" ",17],["rethrowsKeyword",7]]},{"p":["TokenKind","wildcardKeyword"],"f":[["case",12],[" ",17],["wildcardKeyword",7]],"s":[["case",12],[" ",17],["wildcardKeyword",7]]},{"p":["TokenKind","dollarIdentifier(_:)"],"f":[["case",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","extensionKeyword"],"f":[["case",12],[" ",17],["extensionKeyword",7]],"s":[["case",12],[" ",17],["extensionKeyword",7]]},{"p":["TokenKind","poundElseKeyword"],"f":[["case",12],[" ",17],["poundElseKeyword",7]],"s":[["case",12],[" ",17],["poundElseKeyword",7]]},{"p":["TokenKind","poundFileKeyword"],"f":[["case",12],[" ",17],["poundFileKeyword",7]],"s":[["case",12],[" ",17],["poundFileKeyword",7]]},{"p":["TokenKind","poundLineKeyword"],"f":[["case",12],[" ",17],["poundLineKeyword",7]],"s":[["case",12],[" ",17],["poundLineKeyword",7]]},{"p":["TokenKind","subscriptKeyword"],"f":[["case",12],[" ",17],["subscriptKeyword",7]],"s":[["case",12],[" ",17],["subscriptKeyword",7]]},{"p":["TokenKind","typealiasKeyword"],"f":[["case",12],[" ",17],["typealiasKeyword",7]],"s":[["case",12],[" ",17],["typealiasKeyword",7]]},{"p":["TokenKind","contextualKeyword(_:)"],"f":[["case",12],[" ",17],["contextualKeyword",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["contextualKeyword",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","infixQuestionMark"],"f":[["case",12],[" ",17],["infixQuestionMark",7]],"s":[["case",12],[" ",17],["infixQuestionMark",7]]},{"p":["TokenKind","leftSquareBracket"],"f":[["case",12],[" ",17],["leftSquareBracket",7]],"s":[["case",12],[" ",17],["leftSquareBracket",7]]},{"p":["TokenKind","poundEndifKeyword"],"f":[["case",12],[" ",17],["poundEndifKeyword",7]],"s":[["case",12],[" ",17],["poundEndifKeyword",7]]},{"p":["TokenKind","poundErrorKeyword"],"f":[["case",12],[" ",17],["poundErrorKeyword",7]],"s":[["case",12],[" ",17],["poundErrorKeyword",7]]},{"p":["TokenKind","capitalSelfKeyword"],"f":[["case",12],[" ",17],["capitalSelfKeyword",7]],"s":[["case",12],[" ",17],["capitalSelfKeyword",7]]},{"p":["TokenKind","fallthroughKeyword"],"f":[["case",12],[" ",17],["fallthroughKeyword",7]],"s":[["case",12],[" ",17],["fallthroughKeyword",7]]},{"p":["TokenKind","fileprivateKeyword"],"f":[["case",12],[" ",17],["fileprivateKeyword",7]],"s":[["case",12],[" ",17],["fileprivateKeyword",7]]},{"p":["TokenKind","poundAssertKeyword"],"f":[["case",12],[" ",17],["poundAssertKeyword",7]],"s":[["case",12],[" ",17],["poundAssertKeyword",7]]},{"p":["TokenKind","poundColumnKeyword"],"f":[["case",12],[" ",17],["poundColumnKeyword",7]],"s":[["case",12],[" ",17],["poundColumnKeyword",7]]},{"p":["TokenKind","poundElseifKeyword"],"f":[["case",12],[" ",17],["poundElseifKeyword",7]],"s":[["case",12],[" ",17],["poundElseifKeyword",7]]},{"p":["TokenKind","poundFileIDKeyword"],"f":[["case",12],[" ",17],["poundFileIDKeyword",7]],"s":[["case",12],[" ",17],["poundFileIDKeyword",7]]},{"p":["TokenKind","rawStringDelimiter(_:)"],"f":[["case",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","rightSquareBracket"],"f":[["case",12],[" ",17],["rightSquareBracket",7]],"s":[["case",12],[" ",17],["rightSquareBracket",7]]},{"p":["TokenKind","postfixQuestionMark"],"f":[["case",12],[" ",17],["postfixQuestionMark",7]],"s":[["case",12],[" ",17],["postfixQuestionMark",7]]},{"p":["TokenKind","poundKeyPathKeyword"],"f":[["case",12],[" ",17],["poundKeyPathKeyword",7]],"s":[["case",12],[" ",17],["poundKeyPathKeyword",7]]},{"p":["TokenKind","poundWarningKeyword"],"f":[["case",12],[" ",17],["poundWarningKeyword",7]],"s":[["case",12],[" ",17],["poundWarningKeyword",7]]},{"p":["TokenKind","multilineStringQuote"],"f":[["case",12],[" ",17],["multilineStringQuote",7]],"s":[["case",12],[" ",17],["multilineStringQuote",7]]},{"p":["TokenKind","poundFilePathKeyword"],"f":[["case",12],[" ",17],["poundFilePathKeyword",7]],"s":[["case",12],[" ",17],["poundFilePathKeyword",7]]},{"p":["TokenKind","poundFunctionKeyword"],"f":[["case",12],[" ",17],["poundFunctionKeyword",7]],"s":[["case",12],[" ",17],["poundFunctionKeyword",7]]},{"p":["TokenKind","poundSelectorKeyword"],"f":[["case",12],[" ",17],["poundSelectorKeyword",7]],"s":[["case",12],[" ",17],["poundSelectorKeyword",7]]},{"p":["TokenKind","spacedBinaryOperator(_:)"],"f":[["case",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","associatedtypeKeyword"],"f":[["case",12],[" ",17],["associatedtypeKeyword",7]],"s":[["case",12],[" ",17],["associatedtypeKeyword",7]]},{"p":["TokenKind","poundAvailableKeyword"],"f":[["case",12],[" ",17],["poundAvailableKeyword",7]],"s":[["case",12],[" ",17],["poundAvailableKeyword",7]]},{"p":["TokenKind","poundDsohandleKeyword"],"f":[["case",12],[" ",17],["poundDsohandleKeyword",7]],"s":[["case",12],[" ",17],["poundDsohandleKeyword",7]]},{"p":["TokenKind","precedencegroupKeyword"],"f":[["case",12],[" ",17],["precedencegroupKeyword",7]],"s":[["case",12],[" ",17],["precedencegroupKeyword",7]]},{"p":["TokenKind","unspacedBinaryOperator(_:)"],"f":[["case",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","poundFileLiteralKeyword"],"f":[["case",12],[" ",17],["poundFileLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundFileLiteralKeyword",7]]},{"p":["TokenKind","poundUnavailableKeyword"],"f":[["case",12],[" ",17],["poundUnavailableKeyword",7]],"s":[["case",12],[" ",17],["poundUnavailableKeyword",7]]},{"p":["TokenKind","poundColorLiteralKeyword"],"f":[["case",12],[" ",17],["poundColorLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundColorLiteralKeyword",7]]},{"p":["TokenKind","poundImageLiteralKeyword"],"f":[["case",12],[" ",17],["poundImageLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundImageLiteralKeyword",7]]},{"p":["TokenKind","stringInterpolationAnchor"],"f":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"s":[["case",12],[" ",17],["stringInterpolationAnchor",7]]},{"p":["TokenKind","poundSourceLocationKeyword"],"f":[["case",12],[" ",17],["poundSourceLocationKeyword",7]],"s":[["case",12],[" ",17],["poundSourceLocationKeyword",7]]},{"p":["TokenKind","eof"],"f":[["case",12],[" ",17],["eof",7]],"s":[["case",12],[" ",17],["eof",7]]},{"p":["TokenKind","arrow"],"f":[["case",12],[" ",17],["arrow",7]],"s":[["case",12],[" ",17],["arrow",7]]},{"p":["TokenKind","colon"],"f":[["case",12],[" ",17],["colon",7]],"s":[["case",12],[" ",17],["colon",7]]},{"p":["TokenKind","comma"],"f":[["case",12],[" ",17],["comma",7]],"s":[["case",12],[" ",17],["comma",7]]},{"p":["TokenKind","equal"],"f":[["case",12],[" ",17],["equal",7]],"s":[["case",12],[" ",17],["equal",7]]},{"p":["TokenKind","pound"],"f":[["case",12],[" ",17],["pound",7]],"s":[["case",12],[" ",17],["pound",7]]},{"p":["TokenKind","yield"],"f":[["case",12],[" ",17],["yield",7]],"s":[["case",12],[" ",17],["yield",7]]},{"p":["TokenKind","atSign"],"f":[["case",12],[" ",17],["atSign",7]],"s":[["case",12],[" ",17],["atSign",7]]},{"p":["TokenKind","period"],"f":[["case",12],[" ",17],["period",7]],"s":[["case",12],[" ",17],["period",7]]},{"p":["TokenKind","unknown(_:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["String",18,7772],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","backtick"],"f":[["case",12],[" ",17],["backtick",7]],"s":[["case",12],[" ",17],["backtick",7]]},{"p":["TokenKind","ellipsis"],"f":[["case",12],[" ",17],["ellipsis",7]],"s":[["case",12],[" ",17],["ellipsis",7]]},{"p":["TokenKind","asKeyword"],"f":[["case",12],[" ",17],["asKeyword",7]],"s":[["case",12],[" ",17],["asKeyword",7]]},{"p":["TokenKind","backslash"],"f":[["case",12],[" ",17],["backslash",7]],"s":[["case",12],[" ",17],["backslash",7]]},{"p":["TokenKind","doKeyword"],"f":[["case",12],[" ",17],["doKeyword",7]],"s":[["case",12],[" ",17],["doKeyword",7]]},{"p":["TokenKind","ifKeyword"],"f":[["case",12],[" ",17],["ifKeyword",7]],"s":[["case",12],[" ",17],["ifKeyword",7]]},{"p":["TokenKind","inKeyword"],"f":[["case",12],[" ",17],["inKeyword",7]],"s":[["case",12],[" ",17],["inKeyword",7]]},{"p":["TokenKind","isKeyword"],"f":[["case",12],[" ",17],["isKeyword",7]],"s":[["case",12],[" ",17],["isKeyword",7]]},{"p":["TokenKind","leftAngle"],"f":[["case",12],[" ",17],["leftAngle",7]],"s":[["case",12],[" ",17],["leftAngle",7]]},{"p":["TokenKind","leftBrace"],"f":[["case",12],[" ",17],["leftBrace",7]],"s":[["case",12],[" ",17],["leftBrace",7]]},{"p":["TokenKind","leftParen"],"f":[["case",12],[" ",17],["leftParen",7]],"s":[["case",12],[" ",17],["leftParen",7]]},{"p":["TokenKind","semicolon"],"f":[["case",12],[" ",17],["semicolon",7]],"s":[["case",12],[" ",17],["semicolon",7]]},{"p":["AccessPathSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessPathSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ImportDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImportDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ImportDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImportDeclSyntaxBuilder",18,28],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImportDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImportDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImportDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImportDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ReturnStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ReturnStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ReturnStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ReturnStmtSyntaxBuilder",18,30],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ReturnStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ReturnStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ReturnStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ReturnStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["SourceFileSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SourceFileSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SourceFileSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SourceFileSyntaxBuilder",18,32],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SourceFileSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SourceFileSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SourceFileSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SourceFileSyntax` with all the fields populated in the builder\n           closure."},{"p":["StructDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StructDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["StructDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StructDeclSyntaxBuilder",18,34],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StructDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StructDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StructDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StructDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SwitchCaseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchCaseSyntaxBuilder",18,36],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchCaseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchCaseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchCaseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchCaseSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SwitchStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchStmtSyntaxBuilder",18,38],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["CatchClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CatchClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CatchClauseSyntaxBuilder",18,40],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CatchClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CatchClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CatchClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CatchClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClosureExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureExprSyntaxBuilder",18,42],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["KeyPathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `KeyPathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["KeyPathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["KeyPathExprSyntaxBuilder",18,44],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["KeyPathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `KeyPathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `KeyPathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `KeyPathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TernaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TernaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TernaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TernaryExprSyntaxBuilder",18,46],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TernaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TernaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TernaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TernaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["UnknownExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["UnknownStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["UnknownTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["WhereClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WhereClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["WhereClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WhereClauseSyntaxBuilder",18,52],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WhereClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WhereClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WhereClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WhereClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AccessorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorDeclSyntaxBuilder",18,54],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ArrayElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ArrayElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayElementSyntaxBuilder",18,58],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["CaseItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CaseItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ClosureParamSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureParamSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClosureParamSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureParamSyntaxBuilder",18,62],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureParamSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureParamSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureParamSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureParamSyntax` with all the fields populated in the builder\n           closure."},{"p":["ContinueStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ContinueStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ContinueStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ContinueStmtSyntaxBuilder",18,64],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ContinueStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ContinueStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ContinueStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ContinueStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclModifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclModifierSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclModifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclModifierSyntaxBuilder",18,66],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclModifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclModifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclModifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclModifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["EnumCaseDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCaseDeclSyntaxBuilder",18,68],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCaseDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCaseDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCaseDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCaseDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionDeclSyntaxBuilder",18,70],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionTypeSyntaxBuilder",18,72],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfConfigDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IfConfigDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfConfigDeclSyntaxBuilder",18,74],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfConfigDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfConfigDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfConfigDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfConfigDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["MetatypeTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MetatypeTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MetatypeTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MetatypeTypeSyntaxBuilder",18,76],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MetatypeTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MetatypeTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MetatypeTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MetatypeTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ModifierListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ModifierListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ObjCSelectorSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjCSelectorSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["OperatorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OperatorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OperatorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OperatorDeclSyntaxBuilder",18,82],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OperatorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OperatorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OperatorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OperatorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OptionalTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalTypeSyntaxBuilder",18,84],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ProtocolDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ProtocolDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ProtocolDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ProtocolDeclSyntaxBuilder",18,86],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ProtocolDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ProtocolDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ProtocolDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ProtocolDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ReturnClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ReturnClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ReturnClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ReturnClauseSyntaxBuilder",18,88],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ReturnClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ReturnClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ReturnClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ReturnClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["SequenceExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SequenceExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SequenceExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SequenceExprSyntaxBuilder",18,90],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SequenceExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SequenceExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SequenceExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SequenceExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SuperRefExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SuperRefExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SuperRefExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SuperRefExprSyntaxBuilder",18,92],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SuperRefExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SuperRefExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SuperRefExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SuperRefExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TuplePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TuplePatternSyntaxBuilder",18,94],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TuplePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TuplePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TuplePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TuplePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["VariableDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `VariableDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["VariableDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["VariableDeclSyntaxBuilder",18,96],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["VariableDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `VariableDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `VariableDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `VariableDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["VersionTupleSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `VersionTupleSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["VersionTupleSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["VersionTupleSyntaxBuilder",18,98],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["VersionTupleSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `VersionTupleSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `VersionTupleSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `VersionTupleSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AccessorBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorBlockSyntaxBuilder",18,100],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["AsTypePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AsTypePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AsTypePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AsTypePatternSyntaxBuilder",18,102],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AsTypePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AsTypePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AsTypePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AsTypePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributeListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["CatchItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["CodeBlockItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockItemSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CodeBlockItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CodeBlockItemSyntaxBuilder",18,108],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CodeBlockItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CodeBlockItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CodeBlockItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CodeBlockItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExtensionDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExtensionDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ExtensionDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExtensionDeclSyntaxBuilder",18,110],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExtensionDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExtensionDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExtensionDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExtensionDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["InheritedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InheritedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["InheritedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InheritedTypeSyntaxBuilder",18,112],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InheritedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InheritedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InheritedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InheritedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["IsTypePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IsTypePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IsTypePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IsTypePatternSyntaxBuilder",18,114],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IsTypePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IsTypePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IsTypePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IsTypePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcNamePieceSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcNamePieceSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ObjcNamePieceSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcNamePieceSyntaxBuilder",18,116],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcNamePieceSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcNamePieceSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcNamePieceSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcNamePieceSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFileExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFileExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundFileExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFileExprSyntaxBuilder",18,118],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFileExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFileExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFileExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFileExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundLineExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundLineExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundLineExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundLineExprSyntaxBuilder",18,120],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundLineExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundLineExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundLineExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundLineExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringSegmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringSegmentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["StringSegmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StringSegmentSyntaxBuilder",18,122],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StringSegmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StringSegmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StringSegmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StringSegmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["SubscriptDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SubscriptDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SubscriptDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SubscriptDeclSyntaxBuilder",18,124],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SubscriptDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SubscriptDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SubscriptDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SubscriptDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SubscriptExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SubscriptExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SubscriptExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SubscriptExprSyntaxBuilder",18,126],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SubscriptExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SubscriptExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SubscriptExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SubscriptExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypealiasDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypealiasDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypealiasDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypealiasDeclSyntaxBuilder",18,128],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypealiasDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypealiasDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypealiasDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypealiasDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["AssignmentExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AssignmentExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AssignmentExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AssignmentExprSyntaxBuilder",18,130],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AssignmentExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AssignmentExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AssignmentExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AssignmentExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AttributedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AttributedTypeSyntaxBuilder",18,132],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AttributedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AttributedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AttributedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AttributedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DictionaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryExprSyntaxBuilder",18,134],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DictionaryTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryTypeSyntaxBuilder",18,136],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ExpressionStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionStmtSyntaxBuilder",18,138],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IdentifierExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IdentifierExprSyntaxBuilder",18,140],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IdentifierExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IdentifierExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IdentifierExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IdentifierExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["IfConfigClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IfConfigClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfConfigClauseSyntaxBuilder",18,144],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfConfigClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfConfigClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfConfigClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfConfigClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["NilLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NilLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["NilLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["NilLiteralExprSyntaxBuilder",18,148],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["NilLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `NilLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `NilLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `NilLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternBindingSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternBindingSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PatternBindingSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PatternBindingSyntaxBuilder",18,150],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PatternBindingSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PatternBindingSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PatternBindingSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PatternBindingSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundErrorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundErrorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundErrorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundErrorDeclSyntaxBuilder",18,152],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundErrorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundErrorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundErrorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundErrorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SpecializeExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SpecializeExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SpecializeExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SpecializeExprSyntaxBuilder",18,154],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SpecializeExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SpecializeExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SpecializeExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SpecializeExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["TypeAnnotationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeAnnotationSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypeAnnotationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeAnnotationSyntaxBuilder",18,158],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeAnnotationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeAnnotationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeAnnotationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeAnnotationSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CatchClauseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchClauseListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["CompositionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CompositionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CompositionTypeSyntaxBuilder",18,163],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CompositionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CompositionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CompositionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CompositionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["CustomAttributeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CustomAttributeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CustomAttributeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CustomAttributeSyntaxBuilder",18,165],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CustomAttributeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CustomAttributeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CustomAttributeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CustomAttributeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclarationStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclarationStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclarationStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclarationStmtSyntaxBuilder",18,167],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclarationStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclarationStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclarationStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclarationStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["EnumCaseElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCaseElementSyntaxBuilder",18,169],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCaseElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCaseElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCaseElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCaseElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCasePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCasePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["EnumCasePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCasePatternSyntaxBuilder",18,171],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCasePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCasePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCasePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCasePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["FallthroughStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FallthroughStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FallthroughStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FallthroughStmtSyntaxBuilder",18,173],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FallthroughStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FallthroughStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FallthroughStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FallthroughStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["ForcedValueExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ForcedValueExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ForcedValueExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ForcedValueExprSyntaxBuilder",18,175],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ForcedValueExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ForcedValueExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ForcedValueExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ForcedValueExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericArgumentSyntaxBuilder",18,177],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["InitializerDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InitializerDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["InitializerDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InitializerDeclSyntaxBuilder",18,179],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InitializerDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InitializerDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InitializerDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InitializerDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["KeyPathBaseExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `KeyPathBaseExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["KeyPathBaseExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",18,181],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `KeyPathBaseExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `KeyPathBaseExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `KeyPathBaseExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MemberDeclBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberDeclBlockSyntaxBuilder",18,183],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberDeclBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberDeclBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberDeclBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberDeclBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcKeyPathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcKeyPathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ObjcKeyPathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",18,185],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcKeyPathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcKeyPathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcKeyPathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OptionalPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalPatternSyntaxBuilder",18,187],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ParameterClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ParameterClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ParameterClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ParameterClauseSyntaxBuilder",18,189],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ParameterClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ParameterClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ParameterClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ParameterClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundAssertStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundAssertStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundAssertStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundAssertStmtSyntaxBuilder",18,191],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundAssertStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundAssertStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundAssertStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundAssertStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundColumnExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundColumnExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundColumnExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundColumnExprSyntaxBuilder",18,193],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundColumnExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundColumnExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundColumnExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundColumnExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFileIDExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFileIDExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundFileIDExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFileIDExprSyntaxBuilder",18,195],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFileIDExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFileIDExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFileIDExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFileIDExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["RepeatWhileStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `RepeatWhileStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["RepeatWhileStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",18,197],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `RepeatWhileStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `RepeatWhileStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `RepeatWhileStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseLabelSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseLabelSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SwitchCaseLabelSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",18,199],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchCaseLabelSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchCaseLabelSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchCaseLabelSyntax` with all the fields populated in the builder\n           closure."},{"p":["WildcardPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WildcardPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["WildcardPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WildcardPatternSyntaxBuilder",18,201],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WildcardPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WildcardPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WildcardPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WildcardPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ClosureParamListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureParamListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ClosureSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClosureSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureSignatureSyntaxBuilder",18,207],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConditionElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConditionElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ConditionElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ConditionElementSyntaxBuilder",18,209],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ConditionElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ConditionElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ConditionElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ConditionElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclNameArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclNameArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameArgumentSyntaxBuilder",18,211],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["FloatLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FloatLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FloatLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FloatLiteralExprSyntaxBuilder",18,213],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FloatLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FloatLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FloatLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FloatLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionCallExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionCallExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionCallExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionCallExprSyntaxBuilder",18,215],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionCallExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionCallExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionCallExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionCallExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionDeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionDeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionDeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionDeclNameSyntaxBuilder",18,217],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionDeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionDeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionDeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionDeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericParameterSyntaxBuilder",18,219],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberAccessExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberAccessExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MemberAccessExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberAccessExprSyntaxBuilder",18,221],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberAccessExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberAccessExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberAccessExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberAccessExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcSelectorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcSelectorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ObjcSelectorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",18,223],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcSelectorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcSelectorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcSelectorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PostfixUnaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PostfixUnaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PostfixUnaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",18,225],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PostfixUnaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PostfixUnaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PostfixUnaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundWarningDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundWarningDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundWarningDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundWarningDeclSyntaxBuilder",18,227],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundWarningDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundWarningDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundWarningDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundWarningDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["RegexLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `RegexLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["RegexLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["RegexLiteralExprSyntaxBuilder",18,229],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["RegexLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `RegexLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `RegexLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `RegexLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleExprElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TupleExprElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleExprElementSyntaxBuilder",18,231],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleExprElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleExprElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleExprElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleExprElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleTypeElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TupleTypeElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleTypeElementSyntaxBuilder",18,233],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleTypeElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleTypeElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleTypeElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleTypeElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AccessorParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorParameterSyntaxBuilder",18,235],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AvailabilityEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityEntrySyntaxBuilder",18,237],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["CodeBlockItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DeclNameArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclNameArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",18,241],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeinitializerDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeinitializerDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeinitializerDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeinitializerDeclSyntaxBuilder",18,243],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeinitializerDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeinitializerDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeinitializerDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeinitializerDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DictionaryElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryElementSyntaxBuilder",18,245],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ExpressionPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionPatternSyntaxBuilder",18,247],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionSegmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionSegmentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ExpressionSegmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionSegmentSyntaxBuilder",18,249],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionSegmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionSegmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionSegmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionSegmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionParameterSyntaxBuilder",18,251],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["FunctionSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionSignatureSyntaxBuilder",18,253],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IdentifierPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IdentifierPatternSyntaxBuilder",18,255],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IdentifierPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IdentifierPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IdentifierPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IdentifierPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["InheritedTypeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InheritedTypeListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["InitializerClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InitializerClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["InitializerClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InitializerClauseSyntaxBuilder",18,259],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InitializerClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InitializerClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InitializerClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InitializerClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["NonEmptyTokenListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NonEmptyTokenListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ObjCSelectorPieceSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjCSelectorPieceSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ObjCSelectorPieceSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",18,263],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjCSelectorPieceSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjCSelectorPieceSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjCSelectorPieceSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjectLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjectLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ObjectLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",18,265],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjectLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjectLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjectLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFilePathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFilePathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundFilePathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFilePathExprSyntaxBuilder",18,267],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFilePathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFilePathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFilePathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFilePathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFunctionExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFunctionExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundFunctionExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFunctionExprSyntaxBuilder",18,269],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFunctionExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFunctionExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFunctionExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFunctionExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["QualifiedDeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `QualifiedDeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["QualifiedDeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",18,271],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `QualifiedDeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `QualifiedDeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `QualifiedDeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["StringLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StringLiteralExprSyntaxBuilder",18,273],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StringLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StringLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StringLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StringLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AssociatedtypeDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AssociatedtypeDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AssociatedtypeDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",18,275],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AssociatedtypeDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AssociatedtypeDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AssociatedtypeDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["BinaryOperatorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BinaryOperatorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["BinaryOperatorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",18,277],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BinaryOperatorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BinaryOperatorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BinaryOperatorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["BooleanLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BooleanLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["BooleanLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",18,279],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BooleanLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BooleanLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BooleanLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureItemSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClosureCaptureItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",18,281],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureCaptureItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureCaptureItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureCaptureItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ElseIfContinuationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ElseIfContinuationSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ElseIfContinuationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ElseIfContinuationSyntaxBuilder",18,283],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ElseIfContinuationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ElseIfContinuationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ElseIfContinuationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ElseIfContinuationSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericRequirementSyntaxBuilder",18,285],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericWhereClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericWhereClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericWhereClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericWhereClauseSyntaxBuilder",18,287],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericWhereClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericWhereClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericWhereClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericWhereClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfConfigClauseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigClauseListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["IntegerLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IntegerLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IntegerLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",18,291],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IntegerLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IntegerLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IntegerLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclListItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclListItemSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MemberDeclListItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberDeclListItemSyntaxBuilder",18,293],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberDeclListItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberDeclListItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberDeclListItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberDeclListItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternBindingListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternBindingListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["PoundDsohandleExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundDsohandleExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundDsohandleExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",18,297],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundDsohandleExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundDsohandleExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundDsohandleExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrefixOperatorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrefixOperatorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrefixOperatorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",18,299],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrefixOperatorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrefixOperatorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrefixOperatorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchDefaultLabelSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchDefaultLabelSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SwitchDefaultLabelSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",18,301],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchDefaultLabelSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchDefaultLabelSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchDefaultLabelSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessLevelModifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessLevelModifierSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AccessLevelModifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessLevelModifierSyntaxBuilder",18,303],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessLevelModifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessLevelModifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessLevelModifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessLevelModifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessPathComponentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessPathComponentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AccessPathComponentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessPathComponentSyntaxBuilder",18,305],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessPathComponentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessPathComponentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessPathComponentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessPathComponentSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["GenericArgumentListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["PostfixIfConfigExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PostfixIfConfigExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PostfixIfConfigExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",18,311],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PostfixIfConfigExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PostfixIfConfigExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PostfixIfConfigExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundSourceLocationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundSourceLocationSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundSourceLocationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundSourceLocationSyntaxBuilder",18,313],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundSourceLocationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundSourceLocationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundSourceLocationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundSourceLocationSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",18,315],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SameTypeRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SameTypeRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SameTypeRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SameTypeRequirementSyntaxBuilder",18,317],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SameTypeRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SameTypeRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SameTypeRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SameTypeRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["TargetFunctionEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TargetFunctionEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TargetFunctionEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",18,319],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TargetFunctionEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TargetFunctionEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TargetFunctionEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TuplePatternElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TuplePatternElementSyntaxBuilder",18,321],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TuplePatternElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TuplePatternElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TuplePatternElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TuplePatternElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ValueBindingPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ValueBindingPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ValueBindingPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ValueBindingPatternSyntaxBuilder",18,323],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ValueBindingPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ValueBindingPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ValueBindingPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ValueBindingPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AvailabilityArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",18,325],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilitySpecListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilitySpecListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ClassRestrictionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClassRestrictionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClassRestrictionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",18,329],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClassRestrictionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClassRestrictionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClassRestrictionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConditionElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConditionElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ConstrainedSugarTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConstrainedSugarTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ConstrainedSugarTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ConstrainedSugarTypeSyntaxBuilder",18,333],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ConstrainedSugarTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ConstrainedSugarTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ConstrainedSugarTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ConstrainedSugarTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclNameArgumentListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["GenericParameterListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["MemberTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberTypeIdentifierSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MemberTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",18,339],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberTypeIdentifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberTypeIdentifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberTypeIdentifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalChainingExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalChainingExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OptionalChainingExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalChainingExprSyntaxBuilder",18,341],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalChainingExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalChainingExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalChainingExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalChainingExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SimpleTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SimpleTypeIdentifierSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SimpleTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",18,343],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SimpleTypeIdentifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SimpleTypeIdentifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SimpleTypeIdentifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleExprElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["TupleTypeElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["AvailabilityConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AvailabilityConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityConditionSyntaxBuilder",18,349],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["BackDeployVersionListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BackDeployVersionListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DictionaryElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DiscardAssignmentExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DiscardAssignmentExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DiscardAssignmentExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",18,355],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DiscardAssignmentExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DiscardAssignmentExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DiscardAssignmentExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["EditorPlaceholderExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EditorPlaceholderExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["EditorPlaceholderExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",18,357],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EditorPlaceholderExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EditorPlaceholderExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EditorPlaceholderExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionParameterListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionParameterListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["GenericArgumentClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericArgumentClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",18,361],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericArgumentClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericArgumentClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericArgumentClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrimaryAssociatedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrimaryAssociatedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrimaryAssociatedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",18,363],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrimaryAssociatedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrimaryAssociatedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrimaryAssociatedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringLiteralSegmentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringLiteralSegmentsSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["SymbolicReferenceExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SymbolicReferenceExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["SymbolicReferenceExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",18,367],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SymbolicReferenceExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SymbolicReferenceExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SymbolicReferenceExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypeInheritanceClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeInheritanceClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypeInheritanceClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",18,369],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeInheritanceClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeInheritanceClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeInheritanceClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypeInitializerClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeInitializerClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypeInitializerClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",18,371],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeInitializerClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeInitializerClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeInitializerClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnresolvedPatternExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnresolvedPatternExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["UnresolvedPatternExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",18,373],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `UnresolvedPatternExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `UnresolvedPatternExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `UnresolvedPatternExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["CompositionTypeElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CompositionTypeElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CompositionTypeElementSyntaxBuilder",18,377],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CompositionTypeElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CompositionTypeElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CompositionTypeElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CompositionTypeElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConformanceRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConformanceRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ConformanceRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ConformanceRequirementSyntaxBuilder",18,379],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ConformanceRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ConformanceRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ConformanceRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ConformanceRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiabilityParamSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DifferentiabilityParamSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",18,381],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericParameterClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GenericParameterClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericParameterClauseSyntaxBuilder",18,383],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericParameterClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericParameterClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericParameterClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericParameterClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericRequirementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericRequirementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["LabeledSpecializeEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `LabeledSpecializeEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["LabeledSpecializeEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",18,387],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `LabeledSpecializeEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `LabeledSpecializeEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `LabeledSpecializeEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClosureCaptureSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",18,389],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureCaptureSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureCaptureSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureCaptureSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiabilityParamsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DifferentiabilityParamsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",18,391],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamsSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundSourceLocationArgsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundSourceLocationArgsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PoundSourceLocationArgsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",18,393],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundSourceLocationArgsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundSourceLocationArgsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundSourceLocationArgsSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupNameListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupNameListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupRelationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupRelationSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupRelationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",18,397],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupRelationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupRelationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupRelationSyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["UnavailabilityConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnavailabilityConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["UnavailabilityConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",18,401],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `UnavailabilityConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `UnavailabilityConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `UnavailabilityConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["MatchingPatternConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MatchingPatternConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MatchingPatternConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",18,403],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MatchingPatternConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MatchingPatternConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MatchingPatternConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalBindingConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalBindingConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OptionalBindingConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",18,405],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalBindingConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalBindingConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalBindingConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["BackDeployVersionArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BackDeployVersionArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["BackDeployVersionArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BackDeployVersionArgumentSyntaxBuilder",18,407],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BackDeployVersionArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BackDeployVersionArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BackDeployVersionArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BackDeployVersionArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAssignmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAssignmentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupAssignmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",18,409],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupAssignmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupAssignmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupAssignmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrimaryAssociatedTypeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrimaryAssociatedTypeListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["CompositionTypeElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DifferentiabilityParamListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["OperatorPrecedenceAndTypesSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OperatorPrecedenceAndTypesSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["OperatorPrecedenceAndTypesSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",18,417],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OperatorPrecedenceAndTypesSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OperatorPrecedenceAndTypesSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OperatorPrecedenceAndTypesSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupNameElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupNameElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupNameElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",18,419],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupNameElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupNameElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupNameElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityLabeledArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityLabeledArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AvailabilityLabeledArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",18,421],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityLabeledArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityLabeledArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityLabeledArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["BackDeployAttributeSpecListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BackDeployAttributeSpecListSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["BackDeployAttributeSpecListSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BackDeployAttributeSpecListSyntaxBuilder",18,423],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BackDeployAttributeSpecListSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BackDeployAttributeSpecListSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BackDeployAttributeSpecListSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BackDeployAttributeSpecListSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrimaryAssociatedTypeClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrimaryAssociatedTypeClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrimaryAssociatedTypeClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrimaryAssociatedTypeClauseSyntaxBuilder",18,425],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrimaryAssociatedTypeClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrimaryAssociatedTypeClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrimaryAssociatedTypeClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrimaryAssociatedTypeClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["SpecializeAttributeSpecListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SpecializeAttributeSpecListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ImplementsAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImplementsAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ImplementsAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",18,429],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImplementsAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImplementsAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImplementsAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["NamedAttributeStringArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NamedAttributeStringArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["NamedAttributeStringArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",18,431],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `NamedAttributeStringArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `NamedAttributeStringArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `NamedAttributeStringArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAssociativitySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAssociativitySyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PrecedenceGroupAssociativitySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",18,433],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupAssociativitySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupAssociativitySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupAssociativitySyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAttributeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAttributeListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DifferentiabilityParamsClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamsClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DifferentiabilityParamsClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",18,437],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamsClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamsClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamsClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityVersionRestrictionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityVersionRestrictionSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AvailabilityVersionRestrictionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",18,439],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityVersionRestrictionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityVersionRestrictionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityVersionRestrictionSyntax` with all the fields populated in the builder\n           closure."},{"p":["MultipleTrailingClosureElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MultipleTrailingClosureElementSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["MultipleTrailingClosureElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",18,441],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MultipleTrailingClosureElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MultipleTrailingClosureElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MultipleTrailingClosureElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImplicitlyUnwrappedOptionalTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",18,443],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImplicitlyUnwrappedOptionalTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImplicitlyUnwrappedOptionalTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImplicitlyUnwrappedOptionalTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiableAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiableAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DifferentiableAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",18,445],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiableAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiableAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiableAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["MultipleTrailingClosureElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MultipleTrailingClosureElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DerivativeRegistrationAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",18,449],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DerivativeRegistrationAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DerivativeRegistrationAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DerivativeRegistrationAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]],"d":"Create a `DeclSyntax` node from a specialized optional syntax node."},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]],"d":"Create a `DeclSyntax` node from a specialized syntax node."},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]],"d":"Create a `ExprSyntax` node from a specialized optional syntax node."},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]],"d":"Create a `ExprSyntax` node from a specialized syntax node."},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]],"d":"Create a `StmtSyntax` node from a specialized optional syntax node."},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]],"d":"Create a `StmtSyntax` node from a specialized syntax node."},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]],"d":"Create a `TypeSyntax` node from a specialized optional syntax node."},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]],"d":"Create a `TypeSyntax` node from a specialized syntax node."},{"p":["TokenSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TokenSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AsExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AsExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AsExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AsExprSyntaxBuilder",18,456],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AsExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AsExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AsExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AsExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["DoStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DoStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DoStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DoStmtSyntaxBuilder",18,458],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DoStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DoStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DoStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DoStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IfStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfStmtSyntaxBuilder",18,460],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IsExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IsExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["IsExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IsExprSyntaxBuilder",18,462],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IsExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IsExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IsExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IsExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]],"d":"Create a `PatternSyntax` node from a specialized optional syntax node."},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]],"d":"Create a `PatternSyntax` node from a specialized syntax node."},{"p":["TryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TryExprSyntaxBuilder",18,465],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Convert the given `Syntax` node to an `UnknownSyntax` if possible. Return\n`nil` if the conversion is not possible."},{"p":["CaseItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CaseItemSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CaseItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CaseItemSyntaxBuilder",18,468],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CaseItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CaseItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CaseItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CaseItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameSyntaxBuilder",18,470],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["EnumDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumDeclSyntaxBuilder",18,472],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExprListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExprListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["ObjcNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcNameSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["TypeExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TypeExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeExprSyntaxBuilder",18,478],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ArrayExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayExprSyntaxBuilder",18,480],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ArrayTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayTypeSyntaxBuilder",18,482],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrowExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrowExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ArrowExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrowExprSyntaxBuilder",18,484],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrowExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrowExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrowExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrowExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AttributeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AttributeSyntaxBuilder",18,486],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AttributeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AttributeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AttributeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AttributeSyntax` with all the fields populated in the builder\n           closure."},{"p":["AwaitExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AwaitExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["AwaitExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AwaitExprSyntaxBuilder",18,488],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AwaitExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AwaitExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AwaitExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AwaitExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["BreakStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BreakStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["BreakStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BreakStmtSyntaxBuilder",18,490],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BreakStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BreakStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BreakStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BreakStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["CatchItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchItemSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CatchItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CatchItemSyntaxBuilder",18,492],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CatchItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CatchItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CatchItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CatchItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClassDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClassDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ClassDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClassDeclSyntaxBuilder",18,494],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClassDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClassDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClassDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClassDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["CodeBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["CodeBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CodeBlockSyntaxBuilder",18,496],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CodeBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CodeBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CodeBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CodeBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeferStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeferStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["DeferStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeferStmtSyntaxBuilder",18,498],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeferStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeferStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeferStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeferStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["ElseBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ElseBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ElseBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ElseBlockSyntaxBuilder",18,500],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ElseBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ElseBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ElseBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ElseBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["ForInStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ForInStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ForInStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ForInStmtSyntaxBuilder",18,502],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ForInStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ForInStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ForInStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ForInStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["GuardStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GuardStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["GuardStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GuardStmtSyntaxBuilder",18,504],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GuardStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GuardStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GuardStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GuardStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["InOutExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InOutExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["InOutExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InOutExprSyntaxBuilder",18,506],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InOutExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InOutExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InOutExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InOutExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ThrowStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ThrowStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["ThrowStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ThrowStmtSyntaxBuilder",18,508],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ThrowStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ThrowStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ThrowStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ThrowStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["TokenListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TokenListSyntax` if possible. Returns \n`nil` if the conversion is not possible."},{"p":["TupleExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TupleExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleExprSyntaxBuilder",18,512],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["TupleTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleTypeSyntaxBuilder",18,514],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["WhileStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WhileStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["WhileStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WhileStmtSyntaxBuilder",18,516],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WhileStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WhileStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WhileStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WhileStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["YieldListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `YieldListSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["YieldListSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["YieldListSyntaxBuilder",18,518],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["YieldListSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `YieldListSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `YieldListSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `YieldListSyntax` with all the fields populated in the builder\n           closure."},{"p":["YieldStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `YieldStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible."},{"p":["YieldStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["YieldStmtSyntaxBuilder",18,520],[") -> ",17],["Void",18,7893],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["YieldStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `YieldStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `YieldStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `YieldStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["Syntax","init(fromProtocol:)"],"f":[["init",10],["?(",17],["fromProtocol",1],[" ",17],["syntax",2],[": ",17],["SyntaxProtocol",18,15],["?)",17]],"s":[["init",10],["?(",17],["fromProtocol",1],[": ",17],["SyntaxProtocol",18],["?)",17]]},{"p":["Syntax","init(fromProtocol:)"],"f":[["init",10],["(",17],["fromProtocol",1],[" ",17],["syntax",2],[": ",17],["SyntaxProtocol",18,15],[")",17]],"s":[["init",10],["(",17],["fromProtocol",1],[": ",17],["SyntaxProtocol",18],[")",17]]},{"p":["Syntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]],"d":"Create a `Syntax` node from a specialized optional syntax node."},{"p":["Syntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]],"d":"Create a `Syntax` node from a specialized syntax node."},{"p":["SyntaxChildrenIndex","init(nilLiteral:)"],"f":[["init",10],["(",17],["nilLiteral",1],[": ())",17]],"s":[["init",10],["(",17],["nilLiteral",1],[": ())",17]]},{"p":["SyntaxClassifications","init(_:in:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[", ",17],["in",1],[" ",17],["relRange",2],[": ",17],["ByteSourceRange",18,536],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[", ",17],["in",1],[": ",17],["ByteSourceRange",18],[")",17]]},{"p":["SyntaxVisitor","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["SyntaxProtocol","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntaxNode",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to this type. Returns `nil` if the\nconversion is not possible."},{"p":["SyntaxRewriter","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["SourceEdit","init(range:replacementLength:)"],"f":[["init",10],["(",17],["range",1],[": ",17],["ByteSourceRange",18,536],[", ",17],["replacementLength",1],[": ",17],["Int",18,7823],[")",17]],"s":[["init",10],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["replacementLength",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceEdit","init(offset:length:replacementLength:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7823],[", ",17],["length",1],[": ",17],["Int",18,7823],[", ",17],["replacementLength",1],[": ",17],["Int",18,7823],[")",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[", ",17],["replacementLength",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceRange","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,7899],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]]},{"p":["SourceRange","init(start:end:)"],"f":[["init",10],["(",17],["start",1],[": ",17],["SourceLocation",18,535],[", ",17],["end",1],[": ",17],["SourceLocation",18,535],[")",17]],"s":[["init",10],["(",17],["start",1],[": ",17],["SourceLocation",18],[", ",17],["end",1],[": ",17],["SourceLocation",18],[")",17]]},{"p":["SourceLength","init(utf8Length:)"],"f":[["init",10],["(",17],["utf8Length",1],[": ",17],["Int",18,7823],[")",17]],"s":[["init",10],["(",17],["utf8Length",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceLength","init(of:)"],"f":[["init",10],["(",17],["of",1],[" ",17],["text",2],[": ",17],["String",18,7772],[")",17]],"s":[["init",10],["(",17],["of",1],[": ",17],["String",18],[")",17]],"d":"Construct the source length of a given text"},{"p":["TokenSequence","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[")",17]]},{"p":["SourceLocation","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,7899],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]]},{"p":["SourceLocation","init(line:column:offset:file:)"],"f":[["init",10],["(",17],["line",1],[": ",17],["Int",18,7823],[", ",17],["column",1],[": ",17],["Int",18,7823],[", ",17],["offset",1],[": ",17],["Int",18,7823],[", ",17],["file",1],[": ",17],["String",18,7772],[")",17]],"s":[["init",10],["(",17],["line",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[", ",17],["offset",1],[": ",17],["Int",18],[", ",17],["file",1],[": ",17],["String",18],[")",17]]},{"p":["SourceLocation","init(offset:converter:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7823],[", ",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],["? = nil)",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["converter",1],[": ",17],["SourceLocationConverter",18],["?)",17]],"d":"Initialize SourceLocation with a utf8 offset.\nIf a SourceLocationConverter is given, line, column and file will be populated;\notherwise they will be nil."},{"p":["SourcePresence","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,7772],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]]},{"p":["ByteSourceRange","init(offset:length:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7823],[", ",17],["length",1],[": ",17],["Int",18,7823],[")",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[")",17]]},{"p":["ConcurrentEdits","init(concurrent:)"],"f":[["init",10],["(",17],["concurrent",1],[": [",17],["SourceEdit",18,530],["]) ",17],["throws",12]],"s":[["init",10],["(",17],["concurrent",1],[": [",17],["SourceEdit",18],["]) ",17],["throws",12]],"d":"Initialize this struct from edits that are already in a concurrent form\nand are guaranteed to satisfy the requirements posed above."},{"p":["ConcurrentEdits","init(fromSequential:)"],"f":[["init",10],["(",17],["fromSequential",1],[" ",17],["sequentialEdits",2],[": [",17],["SourceEdit",18,530],["])",17]],"s":[["init",10],["(",17],["fromSequential",1],[": [",17],["SourceEdit",18],["])",17]],"d":"Create concurrent from a set of sequential edits. Sequential edits are\napplied one after the other. Applying the first edit results in an\nintermediate string to which the second edit is applied etc. For example\napplying\n - insert 'x' at offset 0\n - insert 'y' at offset 1\n - insert 'z' at offset 2\n to '012345' results in 'xyz012345'."},{"p":["ConcurrentEdits","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["single",2],[": ",17],["SourceEdit",18,530],[")",17]],"s":[["init",10],["(",17],["SourceEdit",18],[")",17]],"d":"Construct a concurrent edits struct from a single edit. For a single edit,\nthere is no differentiation between being it being applied concurrently\nor sequentially."},{"p":["AbsolutePosition","init(utf8Offset:)"],"f":[["init",10],["(",17],["utf8Offset",1],[": ",17],["Int",18,7823],[")",17]],"s":[["init",10],["(",17],["utf8Offset",1],[": ",17],["Int",18],[")",17]]},{"p":["ReversedTokenSequence","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[")",17]]},{"p":["IncrementalParseLookup","init(transition:)"],"f":[["init",10],["(",17],["transition",1],[": ",17],["IncrementalParseTransition",18,548],[")",17]],"s":[["init",10],["(",17],["transition",1],[": ",17],["IncrementalParseTransition",18],[")",17]]},{"p":["SourceLocationConverter","init(file:tree:)"],"f":[["init",10],["(",17],["file",1],[": ",17],["String",18,7772],[", ",17],["tree",1],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["tree",1],[": ",17],["SourceFileSyntax",18],[")",17]],"d":"- Parameters:\n  - file: The file path associated with the syntax tree.\n  - tree: The syntax tree to convert positions to line/columns for."},{"p":["SourceLocationConverter","init(file:source:)"],"f":[["init",10],["(",17],["file",1],[": ",17],["String",18,7772],[", ",17],["source",1],[": ",17],["String",18,7772],[")",17]],"s":[["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["source",1],[": ",17],["String",18],[")",17]],"d":"- Parameters:\n  - file: The file path associated with the syntax tree.\n  - source: The source code to convert positions to line/columns for."},{"p":["IncrementalParseTransition","init(previousTree:edits:reusedNodeDelegate:)"],"f":[["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18,31],[", ",17],["edits",1],[": ",17],["ConcurrentEdits",18,537],[", ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18,16],["? = nil)",17]],"s":[["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18],[", ",17],["edits",1],[": ",17],["ConcurrentEdits",18],[", ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18],["?)",17]],"d":"- Parameters:\n  - previousTree: The previous tree to do lookups on.\n  - edits: The edits that have occurred since the last parse that resulted\n           in the new source that is about to be parsed.\n  - reusedNodeDelegate: Optional delegate to accept information about the\n                        reused regions and nodes."},{"p":["IncrementalParseTransition","init(previousTree:edits:reusedNodeDelegate:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18,31],[", ",17],["edits",1],[": [",17],["SourceEdit",18,530],["], ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18,16],["? = nil)",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18],[", ",17],["edits",1],[": [",17],["SourceEdit",18],["], ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18],["?)",17]],"a":{"a":{"d":true,"m":"Use the initializer taking 'ConcurrentEdits' instead"}},"d":"- Parameters:\n  - previousTree: The previous tree to do lookups on.\n  - edits: The edits that have occurred since the last parse that resulted\n           in the new source that is about to be parsed. There is a strict\n           requirement for the array of edits to:\n             1. not be overlapping.\n             2. should be in increasing source offset order.\n  - reusedNodeDelegate: Optional delegate to accept information about the\n                        reused regions and nodes."},{"p":["IncrementalParseReusedNodeCollector","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["Trivia","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TriviaPiece",18,22],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TriviaPiece",18],["...)",17]],"d":"Creates Trivia from the provided pieces."},{"p":["Trivia","init(pieces:)"],"f":[["init",10],["(",17],["pieces",1],[": [",17],["TriviaPiece",18,22],["])",17]],"s":[["init",10],["(",17],["pieces",1],[": [",17],["TriviaPiece",18],["])",17]],"d":"Creates Trivia with the provided underlying pieces."},{"p":["AccessPathSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["AccessPathComponentSyntax",18,304],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AccessPathComponentSyntax",18]]},{"p":["AccessorListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["AccessorDeclSyntax",18,53],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AccessorDeclSyntax",18]]},{"p":["CaseItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["CaseItemSyntax",18,467],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CaseItemSyntax",18]]},{"p":["ModifierListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["DeclModifierSyntax",18,65],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DeclModifierSyntax",18]]},{"p":["ObjCSelectorSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ObjCSelectorPieceSyntax",18,262],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ObjCSelectorPieceSyntax",18]]},{"p":["AttributeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["CatchItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["CatchItemSyntax",18,491],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CatchItemSyntax",18]]},{"p":["IdentifierListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]]},{"p":["MemberDeclListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["MemberDeclListItemSyntax",18,292],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["MemberDeclListItemSyntax",18]]},{"p":["SwitchCaseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["CatchClauseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["CatchClauseSyntax",18,39],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CatchClauseSyntax",18]]},{"p":["ArrayElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ArrayElementSyntax",18,57],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ArrayElementSyntax",18]]},{"p":["ClosureParamListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ClosureParamSyntax",18,61],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ClosureParamSyntax",18]]},{"p":["CodeBlockItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["CodeBlockItemSyntax",18,107],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CodeBlockItemSyntax",18]]},{"p":["InheritedTypeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["InheritedTypeSyntax",18,111],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["InheritedTypeSyntax",18]]},{"p":["NonEmptyTokenListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]]},{"p":["IfConfigClauseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["IfConfigClauseSyntax",18,143],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["IfConfigClauseSyntax",18]]},{"p":["PatternBindingListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["PatternBindingSyntax",18,149],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PatternBindingSyntax",18]]},{"p":["EnumCaseElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["EnumCaseElementSyntax",18,168],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["EnumCaseElementSyntax",18]]},{"p":["GenericArgumentListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["GenericArgumentSyntax",18,176],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericArgumentSyntax",18]]},{"p":["AvailabilitySpecListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["AvailabilityArgumentSyntax",18,324],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AvailabilityArgumentSyntax",18]]},{"p":["ConditionElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ConditionElementSyntax",18,208],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ConditionElementSyntax",18]]},{"p":["DeclNameArgumentListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["DeclNameArgumentSyntax",18,210],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DeclNameArgumentSyntax",18]]},{"p":["GenericParameterListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["GenericParameterSyntax",18,218],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericParameterSyntax",18]]},{"p":["TupleExprElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TupleExprElementSyntax",18,230],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TupleExprElementSyntax",18]]},{"p":["TupleTypeElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TupleTypeElementSyntax",18,232],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TupleTypeElementSyntax",18]]},{"p":["BackDeployVersionListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["BackDeployVersionArgumentSyntax",18,406],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["BackDeployVersionArgumentSyntax",18]]},{"p":["DictionaryElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["DictionaryElementSyntax",18,244],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DictionaryElementSyntax",18]]},{"p":["FunctionParameterListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["FunctionParameterSyntax",18,250],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["FunctionParameterSyntax",18]]},{"p":["StringLiteralSegmentsSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["ClosureCaptureItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ClosureCaptureItemSyntax",18,280],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ClosureCaptureItemSyntax",18]]},{"p":["GenericRequirementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["GenericRequirementSyntax",18,284],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericRequirementSyntax",18]]},{"p":["PrecedenceGroupNameListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["PrecedenceGroupNameElementSyntax",18,418],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PrecedenceGroupNameElementSyntax",18]]},{"p":["TuplePatternElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TuplePatternElementSyntax",18,320],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TuplePatternElementSyntax",18]]},{"p":["PrimaryAssociatedTypeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["PrimaryAssociatedTypeSyntax",18,362],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PrimaryAssociatedTypeSyntax",18]]},{"p":["CompositionTypeElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["CompositionTypeElementSyntax",18,376],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CompositionTypeElementSyntax",18]]},{"p":["DifferentiabilityParamListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["DifferentiabilityParamSyntax",18,380],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DifferentiabilityParamSyntax",18]]},{"p":["SpecializeAttributeSpecListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["PrecedenceGroupAttributeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["MultipleTrailingClosureElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["MultipleTrailingClosureElementSyntax",18,440],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["MultipleTrailingClosureElementSyntax",18]]},{"p":["ExprListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ExprSyntax",18]]},{"p":["ObjcNameSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["ObjcNamePieceSyntax",18,115],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ObjcNamePieceSyntax",18]]},{"p":["TokenListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxChildren","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]]},{"p":["Trivia","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TriviaPiece",18,22],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["TriviaPiece",18]]},{"p":["SourceLength","zero"],"f":[["static",12],[" ",17],["let",12],[" ",17],["zero",7],[": ",17],["SourceLength",18,532]],"s":[["static",12],[" ",17],["let",12],[" ",17],["zero",7],[": ",17],["SourceLength",18]],"d":"A zero-length source length"},{"p":["Trivia","zero"],"f":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["Trivia",18,542],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["Trivia",18]],"d":"Creates Trivia with no pieces."},{"p":["AccessPathSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessPathSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessPathSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AccessPathSyntax`."},{"p":["AccessPathSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessPathSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AccessPathSyntax`."},{"p":["AccessPathSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["AccessPathSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ImportDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ImportDeclSyntax","importKind"],"f":[["var",12],[" ",17],["importKind",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["importKind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ImportDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ImportDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ImportDeclSyntax","path"],"f":[["var",12],[" ",17],["path",7],[": ",17],["AccessPathSyntax",18,25],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["path",7],[": ",17],["AccessPathSyntax",18]]},{"p":["ImportDeclSyntax","importTok"],"f":[["var",12],[" ",17],["importTok",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["importTok",7],[": ",17],["TokenSyntax",18]]},{"p":["ImportDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["ReturnStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["ReturnStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ReturnStmtSyntax","returnKeyword"],"f":[["var",12],[" ",17],["returnKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ReturnStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SourceFileSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["SourceFileSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SourceFileSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SourceFileSyntax","eofToken"],"f":[["var",12],[" ",17],["eofToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["eofToken",7],[": ",17],["TokenSyntax",18]]},{"p":["StructDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["StructDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["StructDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["StructDeclSyntax","structKeyword"],"f":[["var",12],[" ",17],["structKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["structKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["StructDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StructDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["StructDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["SwitchCaseSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["SwitchCaseSyntax","unknownAttr"],"f":[["var",12],[" ",17],["unknownAttr",7],[": ",17],["AttributeSyntax",18,485],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["unknownAttr",7],[": ",17],["AttributeSyntax",18],["?",17]]},{"p":["SwitchCaseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SwitchCaseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SwitchCaseSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["Syntax",18]]},{"p":["SwitchStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["SwitchStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["SwitchStmtSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SwitchStmtSyntax","switchKeyword"],"f":[["var",12],[" ",17],["switchKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["switchKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SwitchStmtSyntax","cases"],"f":[["var",12],[" ",17],["cases",7],[": ",17],["SwitchCaseListSyntax",18,155],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["cases",7],[": ",17],["SwitchCaseListSyntax",18]]},{"p":["SwitchStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["SwitchStmtSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["CatchClauseSyntax","catchItems"],"f":[["var",12],[" ",17],["catchItems",7],[": ",17],["CatchItemListSyntax",18,105],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchItems",7],[": ",17],["CatchItemListSyntax",18],["?",17]]},{"p":["CatchClauseSyntax","catchKeyword"],"f":[["var",12],[" ",17],["catchKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["CatchClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CatchClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CatchClauseSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["ClosureExprSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureExprSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["ClosureExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureExprSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureExprSyntax","signature"],"f":[["var",12],[" ",17],["signature",7],[": ",17],["ClosureSignatureSyntax",18,206],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["signature",7],[": ",17],["ClosureSignatureSyntax",18],["?",17]]},{"p":["KeyPathExprSyntax","rootExpr"],"f":[["var",12],[" ",17],["rootExpr",7],[": ",17],["ExprSyntax",18,451],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rootExpr",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["KeyPathExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["KeyPathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["KeyPathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["KeyPathExprSyntax","backslash"],"f":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]]},{"p":["TernaryExprSyntax","firstChoice"],"f":[["var",12],[" ",17],["firstChoice",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["firstChoice",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TernaryExprSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["TernaryExprSyntax","secondChoice"],"f":[["var",12],[" ",17],["secondChoice",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondChoice",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TernaryExprSyntax","conditionExpression"],"f":[["var",12],[" ",17],["conditionExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditionExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","colonMark"],"f":[["var",12],[" ",17],["colonMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colonMark",7],[": ",17],["TokenSyntax",18]]},{"p":["UnknownDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnknownDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnknownExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnknownExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnknownStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnknownStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnknownTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnknownTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["WhereClauseSyntax","guardResult"],"f":[["var",12],[" ",17],["guardResult",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["guardResult",7],[": ",17],["ExprSyntax",18]]},{"p":["WhereClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["WhereClauseSyntax","whereKeyword"],"f":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["WhereClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","accessorKind"],"f":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorDeclSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessorDeclSyntax","throwsKeyword"],"f":[["var",12],[" ",17],["throwsKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","modifier"],"f":[["var",12],[" ",17],["modifier",7],[": ",17],["DeclModifierSyntax",18,65],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifier",7],[": ",17],["DeclModifierSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","parameter"],"f":[["var",12],[" ",17],["parameter",7],[": ",17],["AccessorParameterSyntax",18,234],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameter",7],[": ",17],["AccessorParameterSyntax",18],["?",17]]},{"p":["AccessorListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessorListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessorListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AccessorListSyntax`."},{"p":["AccessorListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AccessorListSyntax`."},{"p":["AccessorListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["AccessorListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ArrayElementSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ArrayElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ArrayElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ArrayElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CaseItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CaseItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CaseItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CaseItemListSyntax`."},{"p":["CaseItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CaseItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CaseItemListSyntax`."},{"p":["CaseItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["CaseItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureParamSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureParamSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureParamSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureParamSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ContinueStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ContinueStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ContinueStmtSyntax","continueKeyword"],"f":[["var",12],[" ",17],["continueKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["continueKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ContinueStmtSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclModifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeclModifierSyntax","detailLeftParen"],"f":[["var",12],[" ",17],["detailLeftParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detailLeftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","detailRightParen"],"f":[["var",12],[" ",17],["detailRightParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detailRightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclModifierSyntax","detail"],"f":[["var",12],[" ",17],["detail",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detail",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["EnumCaseDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the case declaration.\n"},{"p":["EnumCaseDeclSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]],"d":"The `case` keyword for this case."},{"p":["EnumCaseDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EnumCaseDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumCaseDeclSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["EnumCaseElementListSyntax",18,306],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["EnumCaseElementListSyntax",18]],"d":"The elements this case declares."},{"p":["EnumCaseDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the case declaration.\n"},{"p":["FunctionDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionDeclSyntax","funcKeyword"],"f":[["var",12],[" ",17],["funcKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["funcKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","signature"],"f":[["var",12],[" ",17],["signature",7],[": ",17],["FunctionSignatureSyntax",18,252],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["signature",7],[": ",17],["FunctionSignatureSyntax",18]]},{"p":["FunctionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionTypeSyntax","returnType"],"f":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18]]},{"p":["FunctionTypeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionTypeSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionTypeSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionTypeSyntax","arrow"],"f":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionTypeSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleTypeElementListSyntax",18,346],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleTypeElementListSyntax",18]]},{"p":["FunctionTypeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["IfConfigDeclSyntax","poundEndif"],"f":[["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18]]},{"p":["IfConfigDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IfConfigDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IfConfigDeclSyntax","clauses"],"f":[["var",12],[" ",17],["clauses",7],[": ",17],["IfConfigClauseListSyntax",18,288],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["clauses",7],[": ",17],["IfConfigClauseListSyntax",18]]},{"p":["MetatypeTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MetatypeTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["MetatypeTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MetatypeTypeSyntax","typeOrProtocol"],"f":[["var",12],[" ",17],["typeOrProtocol",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeOrProtocol",7],[": ",17],["TokenSyntax",18]]},{"p":["MetatypeTypeSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["ModifierListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ModifierListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ModifierListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ModifierListSyntax`."},{"p":["ModifierListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ModifierListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ModifierListSyntax`."},{"p":["ModifierListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ModifierListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjCSelectorSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjCSelectorSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjCSelectorSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ObjCSelectorSyntax`."},{"p":["ObjCSelectorSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjCSelectorSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ObjCSelectorSyntax`."},{"p":["ObjCSelectorSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ObjCSelectorSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["OperatorDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the 'operator' declaration.\n"},{"p":["OperatorDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["OperatorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OperatorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["OperatorDeclSyntax","operatorKeyword"],"f":[["var",12],[" ",17],["operatorKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["OperatorDeclSyntax","operatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["operatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?",17]],"d":"\nOptionally specify a precedence group and designated types.\n"},{"p":["OperatorDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the 'operator'\ndeclaration.\n"},{"p":["OptionalTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["OptionalTypeSyntax","wrappedType"],"f":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18]]},{"p":["OptionalTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OptionalTypeSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["ProtocolDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["ProtocolDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ProtocolDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ProtocolDeclSyntax","protocolKeyword"],"f":[["var",12],[" ",17],["protocolKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["protocolKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ProtocolDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","primaryAssociatedTypeClause"],"f":[["var",12],[" ",17],["primaryAssociatedTypeClause",7],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["primaryAssociatedTypeClause",7],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["ProtocolDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["ReturnClauseSyntax","returnType"],"f":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18]]},{"p":["ReturnClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ReturnClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ReturnClauseSyntax","arrow"],"f":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]]},{"p":["SequenceExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SequenceExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SequenceExprSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["ExprListSyntax",18,473],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["ExprListSyntax",18]]},{"p":["SuperRefExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SuperRefExprSyntax","superKeyword"],"f":[["var",12],[" ",17],["superKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["superKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SuperRefExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TuplePatternSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["TuplePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TuplePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TuplePatternSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["TuplePatternElementListSyntax",18,398],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["TuplePatternElementListSyntax",18]]},{"p":["TuplePatternSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["VariableDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["VariableDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["VariableDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["VariableDeclSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["VariableDeclSyntax","bindings"],"f":[["var",12],[" ",17],["bindings",7],[": ",17],["PatternBindingListSyntax",18,294],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["bindings",7],[": ",17],["PatternBindingListSyntax",18]]},{"p":["VariableDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["VersionTupleSyntax","patchVersion"],"f":[["var",12],[" ",17],["patchVersion",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["patchVersion",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe patch version if specified.\n"},{"p":["VersionTupleSyntax","majorMinor"],"f":[["var",12],[" ",17],["majorMinor",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["majorMinor",7],[": ",17],["Syntax",18]],"d":"\nIn case the version consists only of the major version, an\ninteger literal that specifies the major version. In case\nthe version consists of major and minor version number, a\nfloating literal in which the decimal part is interpreted\nas the minor version.\n"},{"p":["VersionTupleSyntax","patchPeriod"],"f":[["var",12],[" ",17],["patchPeriod",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["patchPeriod",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the version contains a patch number, the period\nseparating the minor from the patch number.\n"},{"p":["VersionTupleSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["VersionTupleSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessorBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorBlockSyntax","accessors"],"f":[["var",12],[" ",17],["accessors",7],[": ",17],["AccessorListSyntax",18,55],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessors",7],[": ",17],["AccessorListSyntax",18]]},{"p":["AccessorBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["AsTypePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AsTypePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AsTypePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["AsTypePatternSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["AsTypePatternSyntax","asKeyword"],"f":[["var",12],[" ",17],["asKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AttributeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["AttributeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AttributeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AttributeListSyntax`."},{"p":["AttributeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AttributeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AttributeListSyntax`."},{"p":["AttributeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["AttributeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CatchItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CatchItemListSyntax`."},{"p":["CatchItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CatchItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CatchItemListSyntax`."},{"p":["CatchItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["CatchItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CodeBlockItemSyntax","errorTokens"],"f":[["var",12],[" ",17],["errorTokens",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["errorTokens",7],[": ",17],["Syntax",18],["?",17]]},{"p":["CodeBlockItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CodeBlockItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CodeBlockItemSyntax","item"],"f":[["var",12],[" ",17],["item",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["item",7],[": ",17],["Syntax",18]],"d":"The underlying node inside the code block."},{"p":["CodeBlockItemSyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf present, the trailing semicolon at the end of the item.\n"},{"p":["ExtensionDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ExtensionDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ExtensionDeclSyntax","extendedType"],"f":[["var",12],[" ",17],["extendedType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["extendedType",7],[": ",17],["TypeSyntax",18]]},{"p":["ExtensionDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ExtensionDeclSyntax","extensionKeyword"],"f":[["var",12],[" ",17],["extensionKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["extensionKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ExtensionDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ExtensionDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ExtensionDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["ExtensionDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["InheritedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InheritedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["InheritedTypeSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["InheritedTypeSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["IsTypePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IsTypePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IsTypePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["IsTypePatternSyntax","isKeyword"],"f":[["var",12],[" ",17],["isKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcNamePieceSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjcNamePieceSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjcNamePieceSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcNamePieceSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ParenthesizedSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ParenthesizedSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileExprSyntax","poundFile"],"f":[["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundFileExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundLineExprSyntax","poundLine"],"f":[["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundLineExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundLineExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StringSegmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["StringSegmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StringSegmentSyntax","content"],"f":[["var",12],[" ",17],["content",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["content",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SubscriptDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SubscriptDeclSyntax","subscriptKeyword"],"f":[["var",12],[" ",17],["subscriptKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["subscriptKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","result"],"f":[["var",12],[" ",17],["result",7],[": ",17],["ReturnClauseSyntax",18,87],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["result",7],[": ",17],["ReturnClauseSyntax",18]]},{"p":["SubscriptDeclSyntax","indices"],"f":[["var",12],[" ",17],["indices",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["indices",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["SubscriptDeclSyntax","accessor"],"f":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["SubscriptExprSyntax","leftBracket"],"f":[["var",12],[" ",17],["leftBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptExprSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["SubscriptExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SubscriptExprSyntax","rightBracket"],"f":[["var",12],[" ",17],["rightBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SubscriptExprSyntax","trailingClosure"],"f":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["SubscriptExprSyntax","calledExpression"],"f":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["SubscriptExprSyntax","additionalTrailingClosures"],"f":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["TypealiasDeclSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,370],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TypealiasDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypealiasDeclSyntax","typealiasKeyword"],"f":[["var",12],[" ",17],["typealiasKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typealiasKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["TypealiasDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["WithCodeBlockSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["AssignmentExprSyntax","assignToken"],"f":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18]]},{"p":["AssignmentExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AssignmentExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AttributedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AttributedTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["AttributedTypeSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AttributedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AttributedTypeSyntax","specifier"],"f":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DictionaryExprSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryExprSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DictionaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DictionaryExprSyntax","content"],"f":[["var",12],[" ",17],["content",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["content",7],[": ",17],["Syntax",18]]},{"p":["DictionaryTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DictionaryTypeSyntax","keyType"],"f":[["var",12],[" ",17],["keyType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyType",7],[": ",17],["TypeSyntax",18]]},{"p":["DictionaryTypeSyntax","valueType"],"f":[["var",12],[" ",17],["valueType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valueType",7],[": ",17],["TypeSyntax",18]]},{"p":["DictionaryTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DictionaryTypeSyntax","leftSquareBracket"],"f":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryTypeSyntax","rightSquareBracket"],"f":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryTypeSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ExpressionStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ExpressionStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IdentifiedDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IdentifierExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IdentifierExprSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["IdentifierListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["IdentifierListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IdentifierListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `IdentifierListSyntax`."},{"p":["IdentifierListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IdentifierListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `IdentifierListSyntax`."},{"p":["IdentifierListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["IdentifierListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["IfConfigClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IfConfigClauseSyntax","poundKeyword"],"f":[["var",12],[" ",17],["poundKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["IfConfigClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IfConfigClauseSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["Syntax",18]]},{"p":["IfConfigClauseSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,451],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["MemberDeclListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["MemberDeclListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MemberDeclListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `MemberDeclListSyntax`."},{"p":["MemberDeclListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MemberDeclListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `MemberDeclListSyntax`."},{"p":["MemberDeclListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["MemberDeclListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["NilLiteralExprSyntax","nilKeyword"],"f":[["var",12],[" ",17],["nilKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["nilKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["NilLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["NilLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PatternBindingSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["PatternBindingSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PatternBindingSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PatternBindingSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PatternBindingSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["PatternBindingSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["PatternBindingSyntax","accessor"],"f":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18],["?",17]]},{"p":["PoundErrorDeclSyntax","poundError"],"f":[["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundErrorDeclSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundErrorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundErrorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundErrorDeclSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18,272],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18]]},{"p":["PoundErrorDeclSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["SpecializeExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["SpecializeExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SpecializeExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SpecializeExprSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,360],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SwitchCaseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["SwitchCaseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SwitchCaseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `SwitchCaseListSyntax`."},{"p":["SwitchCaseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SwitchCaseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `SwitchCaseListSyntax`."},{"p":["SwitchCaseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["SwitchCaseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TypeAnnotationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeAnnotationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TypeAnnotationSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["TypeAnnotationSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["UnknownPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnknownPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["WithStatementsSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["CatchClauseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchClauseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CatchClauseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CatchClauseListSyntax`."},{"p":["CatchClauseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CatchClauseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CatchClauseListSyntax`."},{"p":["CatchClauseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["CatchClauseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CompositionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CompositionTypeSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["CompositionTypeElementListSyntax",18,412],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["CompositionTypeElementListSyntax",18]]},{"p":["CustomAttributeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CustomAttributeSyntax","atSignToken"],"f":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18]],"d":"The `@` sign."},{"p":["CustomAttributeSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,344],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18],["?",17]]},{"p":["CustomAttributeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CustomAttributeSyntax","attributeName"],"f":[["var",12],[" ",17],["attributeName",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributeName",7],[": ",17],["TypeSyntax",18]],"d":"The name of the attribute."},{"p":["CustomAttributeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CustomAttributeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclarationStmtSyntax","declaration"],"f":[["var",12],[" ",17],["declaration",7],[": ",17],["DeclSyntax",18,450],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declaration",7],[": ",17],["DeclSyntax",18]]},{"p":["DeclarationStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclarationStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumCaseElementSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"The name of this case."},{"p":["EnumCaseElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EnumCaseElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe trailing comma of this element, if the case has\nmultiple elements.\n"},{"p":["EnumCaseElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumCaseElementSyntax","associatedValue"],"f":[["var",12],[" ",17],["associatedValue",7],[": ",17],["ParameterClauseSyntax",18,188],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedValue",7],[": ",17],["ParameterClauseSyntax",18],["?",17]],"d":"The set of associated values of the case."},{"p":["EnumCaseElementSyntax","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["InitializerClauseSyntax",18],["?",17]],"d":"\nThe raw value of this enum element, if present.\n"},{"p":["EnumCasePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EnumCasePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumCasePatternSyntax","associatedTuple"],"f":[["var",12],[" ",17],["associatedTuple",7],[": ",17],["TuplePatternSyntax",18,93],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedTuple",7],[": ",17],["TuplePatternSyntax",18],["?",17]]},{"p":["EnumCasePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["EnumCasePatternSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["EnumCasePatternSyntax","caseName"],"f":[["var",12],[" ",17],["caseName",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseName",7],[": ",17],["TokenSyntax",18]]},{"p":["FallthroughStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FallthroughStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FallthroughStmtSyntax","fallthroughKeyword"],"f":[["var",12],[" ",17],["fallthroughKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fallthroughKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForcedValueExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ForcedValueExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ForcedValueExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ForcedValueExprSyntax","exclamationMark"],"f":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentSyntax","argumentType"],"f":[["var",12],[" ",17],["argumentType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentType",7],[": ",17],["TypeSyntax",18]]},{"p":["GenericArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericArgumentSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["GenericArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InitializerDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","parameters"],"f":[["var",12],[" ",17],["parameters",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameters",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["InitializerDeclSyntax","initKeyword"],"f":[["var",12],[" ",17],["initKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["InitializerDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["InitializerDeclSyntax","optionalMark"],"f":[["var",12],[" ",17],["optionalMark",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["optionalMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InitializerDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["KeyPathBaseExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["KeyPathBaseExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["KeyPathBaseExprSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberDeclBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberDeclBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MemberDeclBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MemberDeclBlockSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclListSyntax",18,145],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclListSyntax",18]]},{"p":["MemberDeclBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","keyPath"],"f":[["var",12],[" ",17],["keyPath",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyPath",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjcKeyPathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjcKeyPathExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["ObjcNameSyntax",18,475],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["ObjcNameSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalPatternSyntax","subPattern"],"f":[["var",12],[" ",17],["subPattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["subPattern",7],[": ",17],["PatternSyntax",18]]},{"p":["OptionalPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OptionalPatternSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ParameterClauseSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ParameterClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ParameterClauseSyntax","parameterList"],"f":[["var",12],[" ",17],["parameterList",7],[": ",17],["FunctionParameterListSyntax",18,358],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameterList",7],[": ",17],["FunctionParameterListSyntax",18]]},{"p":["ParameterClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ParameterClauseSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundAssertStmtSyntax","poundAssert"],"f":[["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundAssertStmtSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundAssertStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundAssertStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundAssertStmtSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The comma after the assertion condition."},{"p":["PoundAssertStmtSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The assertion message."},{"p":["PoundAssertStmtSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18]],"d":"The assertion condition."},{"p":["PoundAssertStmtSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundColumnExprSyntax","poundColumn"],"f":[["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundColumnExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundColumnExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundFileIDExprSyntax","poundFileID"],"f":[["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileIDExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundFileIDExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["RepeatWhileStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["RepeatWhileStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["RepeatWhileStmtSyntax","whileKeyword"],"f":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["RepeatWhileStmtSyntax","repeatKeyword"],"f":[["var",12],[" ",17],["repeatKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["repeatKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["RepeatWhileStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["RepeatWhileStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["RepeatWhileStmtSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18]]},{"p":["RepeatWhileStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["SwitchCaseLabelSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchCaseLabelSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SwitchCaseLabelSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SwitchCaseLabelSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchCaseLabelSyntax","caseItems"],"f":[["var",12],[" ",17],["caseItems",7],[": ",17],["CaseItemListSyntax",18,59],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseItems",7],[": ",17],["CaseItemListSyntax",18]]},{"p":["WildcardPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["WildcardPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["WildcardPatternSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["WildcardPatternSyntax","wildcard"],"f":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ArrayElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ArrayElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ArrayElementListSyntax`."},{"p":["ArrayElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ArrayElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ArrayElementListSyntax`."},{"p":["ArrayElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ArrayElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureParamListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureParamListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureParamListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ClosureParamListSyntax`."},{"p":["ClosureParamListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureParamListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ClosureParamListSyntax`."},{"p":["ClosureParamListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ClosureParamListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureSignatureSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureSignatureSyntax","inTok"],"f":[["var",12],[" ",17],["inTok",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inTok",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureSignatureSyntax","input"],"f":[["var",12],[" ",17],["input",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["input",7],[": ",17],["Syntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","output"],"f":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","capture"],"f":[["var",12],[" ",17],["capture",7],[": ",17],["ClosureCaptureSignatureSyntax",18,388],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["capture",7],[": ",17],["ClosureCaptureSignatureSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","throwsTok"],"f":[["var",12],[" ",17],["throwsTok",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsTok",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ConditionElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ConditionElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ConditionElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ConditionElementSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["Syntax",18]]},{"p":["DeclNameArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclNameArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeclNameArgumentSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclNameArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["FloatLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FloatLiteralExprSyntax","floatingDigits"],"f":[["var",12],[" ",17],["floatingDigits",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["floatingDigits",7],[": ",17],["TokenSyntax",18]]},{"p":["FloatLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionCallExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["FunctionCallExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionCallExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionCallExprSyntax","trailingClosure"],"f":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","calledExpression"],"f":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["FunctionCallExprSyntax","additionalTrailingClosures"],"f":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionDeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionDeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionDeclNameSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the referenced function.\n"},{"p":["FunctionDeclNameSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the referenced function, optionally\nspecified.\n"},{"p":["GenericParameterSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["GenericParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericParameterSyntax","inheritedType"],"f":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["GenericParameterSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["GenericParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericParameterSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericParameterSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MemberAccessExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MemberAccessExprSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberAccessExprSyntax","base"],"f":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18,451],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcSelectorExprSyntax","poundSelector"],"f":[["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcSelectorExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcSelectorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjcSelectorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjcSelectorExprSyntax","kind"],"f":[["var",12],[" ",17],["kind",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["kind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcSelectorExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["ExprSyntax",18]]},{"p":["ObjcSelectorExprSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcSelectorExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PostfixUnaryExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["PostfixUnaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PostfixUnaryExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18]]},{"p":["PostfixUnaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundWarningDeclSyntax","poundWarning"],"f":[["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundWarningDeclSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundWarningDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundWarningDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundWarningDeclSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18,272],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18]]},{"p":["PoundWarningDeclSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["RegexLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["RegexLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["RegexLiteralExprSyntax","regex"],"f":[["var",12],[" ",17],["regex",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["regex",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleExprElementSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["TupleExprElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleExprElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleExprElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleExprElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleExprElementSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleTypeElementSyntax","secondName"],"f":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleTypeElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["TupleTypeElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","inOut"],"f":[["var",12],[" ",17],["inOut",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inOut",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","ellipsis"],"f":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorParameterSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessorParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessorParameterSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorParameterSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilityEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilityEntrySyntax","availabilityList"],"f":[["var",12],[" ",17],["availabilityList",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilityList",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilityEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["AvailabilityEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["AvailabilityEntrySyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18]]},{"p":["CodeBlockItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CodeBlockItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CodeBlockItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CodeBlockItemListSyntax`."},{"p":["CodeBlockItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CodeBlockItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CodeBlockItemListSyntax`."},{"p":["CodeBlockItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["CodeBlockItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DeclNameArgumentsSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclNameArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclNameArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeclNameArgumentsSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentListSyntax",18,334],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentListSyntax",18]]},{"p":["DeclNameArgumentsSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["DeinitializerDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["DeinitializerDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeinitializerDeclSyntax","deinitKeyword"],"f":[["var",12],[" ",17],["deinitKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["deinitKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DeinitializerDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeinitializerDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["DeinitializerDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["DictionaryElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DictionaryElementSyntax","keyExpression"],"f":[["var",12],[" ",17],["keyExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["DictionaryElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DictionaryElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DictionaryElementSyntax","valueExpression"],"f":[["var",12],[" ",17],["valueExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valueExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["DictionaryElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionPatternSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ExpressionPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ExpressionPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ExpressionSegmentSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionSegmentSyntax","expressions"],"f":[["var",12],[" ",17],["expressions",7],[": ",17],["TupleExprElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expressions",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["ExpressionSegmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ExpressionSegmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ExpressionSegmentSyntax","backslash"],"f":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionSegmentSyntax","delimiter"],"f":[["var",12],[" ",17],["delimiter",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["delimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ExpressionSegmentSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionParameterSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","secondName"],"f":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionParameterSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionParameterSyntax","defaultArgument"],"f":[["var",12],[" ",17],["defaultArgument",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["defaultArgument",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","ellipsis"],"f":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","firstName"],"f":[["var",12],[" ",17],["firstName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["firstName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionSignatureSyntax","asyncOrReasyncKeyword"],"f":[["var",12],[" ",17],["asyncOrReasyncKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncOrReasyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","input"],"f":[["var",12],[" ",17],["input",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["input",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["FunctionSignatureSyntax","output"],"f":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["IdentifierPatternSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IdentifierPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InheritedTypeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InheritedTypeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["InheritedTypeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["InheritedTypeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `InheritedTypeListSyntax`."},{"p":["InheritedTypeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `InheritedTypeListSyntax`."},{"p":["InheritedTypeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["InheritedTypeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["InitializerClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["InitializerClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InitializerClauseSyntax","equal"],"f":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]]},{"p":["InitializerClauseSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["ExprSyntax",18]]},{"p":["NonEmptyTokenListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["NonEmptyTokenListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["NonEmptyTokenListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `NonEmptyTokenListSyntax`."},{"p":["NonEmptyTokenListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["NonEmptyTokenListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `NonEmptyTokenListSyntax`."},{"p":["NonEmptyTokenListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["NonEmptyTokenListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjCSelectorPieceSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjCSelectorPieceSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjCSelectorPieceSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjCSelectorPieceSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjectLiteralExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjectLiteralExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjectLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjectLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjectLiteralExprSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleExprElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["ObjectLiteralExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFilePathExprSyntax","poundFilePath"],"f":[["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFilePathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundFilePathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundFunctionExprSyntax","poundFunction"],"f":[["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFunctionExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundFunctionExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["QualifiedDeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["QualifiedDeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["QualifiedDeclNameSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["QualifiedDeclNameSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]],"d":"\nThe base name of the referenced function.\n"},{"p":["QualifiedDeclNameSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18],["?",17]],"d":"\nThe base type of the qualified name, optionally specified.\n"},{"p":["QualifiedDeclNameSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the referenced function, optionally\nspecified.\n"},{"p":["StringLiteralExprSyntax","closeQuote"],"f":[["var",12],[" ",17],["closeQuote",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closeQuote",7],[": ",17],["TokenSyntax",18]]},{"p":["StringLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["StringLiteralExprSyntax","openDelimiter"],"f":[["var",12],[" ",17],["openDelimiter",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["openDelimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralExprSyntax","closeDelimiter"],"f":[["var",12],[" ",17],["closeDelimiter",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closeDelimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StringLiteralExprSyntax","segments"],"f":[["var",12],[" ",17],["segments",7],[": ",17],["StringLiteralSegmentsSyntax",18,364],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["segments",7],[": ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["StringLiteralExprSyntax","openQuote"],"f":[["var",12],[" ",17],["openQuote",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["openQuote",7],[": ",17],["TokenSyntax",18]]},{"p":["WithTrailingCommaSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["AssociatedtypeDeclSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,370],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AssociatedtypeDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AssociatedtypeDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","associatedtypeKeyword"],"f":[["var",12],[" ",17],["associatedtypeKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedtypeKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AssociatedtypeDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["BinaryOperatorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BinaryOperatorExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18]]},{"p":["BinaryOperatorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["BooleanLiteralExprSyntax","booleanLiteral"],"f":[["var",12],[" ",17],["booleanLiteral",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["booleanLiteral",7],[": ",17],["TokenSyntax",18]]},{"p":["BooleanLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BooleanLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureCaptureItemSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ClosureCaptureItemSyntax","assignToken"],"f":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureCaptureItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureCaptureItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureCaptureItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureCaptureItemSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureCaptureItemSyntax","specifier"],"f":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenListSyntax",18,509],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["ElseIfContinuationSyntax","ifStatement"],"f":[["var",12],[" ",17],["ifStatement",7],[": ",17],["IfStmtSyntax",18,459],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ifStatement",7],[": ",17],["IfStmtSyntax",18]]},{"p":["ElseIfContinuationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ElseIfContinuationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericRequirementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["GenericRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericRequirementSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["Syntax",18]]},{"p":["GenericWhereClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericWhereClauseSyntax","whereKeyword"],"f":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericWhereClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericWhereClauseSyntax","requirementList"],"f":[["var",12],[" ",17],["requirementList",7],[": ",17],["GenericRequirementListSyntax",18,384],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["requirementList",7],[": ",17],["GenericRequirementListSyntax",18]]},{"p":["IfConfigClauseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["IfConfigClauseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IfConfigClauseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `IfConfigClauseListSyntax`."},{"p":["IfConfigClauseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IfConfigClauseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `IfConfigClauseListSyntax`."},{"p":["IfConfigClauseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["IfConfigClauseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["IntegerLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IntegerLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IntegerLiteralExprSyntax","digits"],"f":[["var",12],[" ",17],["digits",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["digits",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberDeclListItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MemberDeclListItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MemberDeclListItemSyntax","decl"],"f":[["var",12],[" ",17],["decl",7],[": ",17],["DeclSyntax",18,450],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["decl",7],[": ",17],["DeclSyntax",18]],"d":"The declaration of the type member."},{"p":["MemberDeclListItemSyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"An optional trailing semicolon."},{"p":["PatternBindingListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PatternBindingListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PatternBindingListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PatternBindingListSyntax`."},{"p":["PatternBindingListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PatternBindingListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PatternBindingListSyntax`."},{"p":["PatternBindingListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["PatternBindingListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PoundDsohandleExprSyntax","poundDsohandle"],"f":[["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundDsohandleExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundDsohandleExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrefixOperatorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrefixOperatorExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PrefixOperatorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrefixOperatorExprSyntax","postfixExpression"],"f":[["var",12],[" ",17],["postfixExpression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["postfixExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["SwitchDefaultLabelSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SwitchDefaultLabelSyntax","defaultKeyword"],"f":[["var",12],[" ",17],["defaultKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["defaultKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchDefaultLabelSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SwitchDefaultLabelSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessLevelModifierSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessLevelModifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessLevelModifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessLevelModifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessLevelModifierSyntax","modifier"],"f":[["var",12],[" ",17],["modifier",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifier",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessLevelModifierSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessPathComponentSyntax","trailingDot"],"f":[["var",12],[" ",17],["trailingDot",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingDot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessPathComponentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AccessPathComponentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AccessPathComponentSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["EnumCaseElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["EnumCaseElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EnumCaseElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `EnumCaseElementListSyntax`."},{"p":["EnumCaseElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumCaseElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `EnumCaseElementListSyntax`."},{"p":["EnumCaseElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["EnumCaseElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericArgumentListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericArgumentListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericArgumentListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericArgumentListSyntax`."},{"p":["GenericArgumentListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericArgumentListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericArgumentListSyntax`."},{"p":["GenericArgumentListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["GenericArgumentListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PostfixIfConfigExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PostfixIfConfigExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PostfixIfConfigExprSyntax","base"],"f":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18,451],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["PostfixIfConfigExprSyntax","config"],"f":[["var",12],[" ",17],["config",7],[": ",17],["IfConfigDeclSyntax",18,73],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["config",7],[": ",17],["IfConfigDeclSyntax",18]]},{"p":["PoundSourceLocationSyntax","poundSourceLocation"],"f":[["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundSourceLocationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundSourceLocationSyntax","args"],"f":[["var",12],[" ",17],["args",7],[": ",17],["PoundSourceLocationArgsSyntax",18,392],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["args",7],[": ",17],["PoundSourceLocationArgsSyntax",18],["?",17]]},{"p":["PoundSourceLocationSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the 'precedencegroup' declaration.\n"},{"p":["PrecedenceGroupDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of this precedence group.\n"},{"p":["PrecedenceGroupDeclSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupDeclSyntax","groupAttributes"],"f":[["var",12],[" ",17],["groupAttributes",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["groupAttributes",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"\nThe characteristics of this precedence group.\n"},{"p":["PrecedenceGroupDeclSyntax","precedencegroupKeyword"],"f":[["var",12],[" ",17],["precedencegroupKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["precedencegroupKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the 'precedencegroup'\ndeclaration.\n"},{"p":["SameTypeRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SameTypeRequirementSyntax","leftTypeIdentifier"],"f":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["SameTypeRequirementSyntax","rightTypeIdentifier"],"f":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["SameTypeRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SameTypeRequirementSyntax","equalityToken"],"f":[["var",12],[" ",17],["equalityToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equalityToken",7],[": ",17],["TokenSyntax",18]]},{"p":["TargetFunctionEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TargetFunctionEntrySyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if this argument is followed by another one\n"},{"p":["TargetFunctionEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TargetFunctionEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["TargetFunctionEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["TargetFunctionEntrySyntax","declname"],"f":[["var",12],[" ",17],["declname",7],[": ",17],["DeclNameSyntax",18,469],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declname",7],[": ",17],["DeclNameSyntax",18]],"d":"The value for this argument"},{"p":["TuplePatternElementSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TuplePatternElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TuplePatternElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TuplePatternElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TuplePatternElementSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["TuplePatternElementSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ValueBindingPatternSyntax","valuePattern"],"f":[["var",12],[" ",17],["valuePattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valuePattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ValueBindingPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ValueBindingPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ValueBindingPatternSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilityArgumentSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if the argument is followed by another\nargument\n"},{"p":["AvailabilityArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilityArgumentSyntax","entry"],"f":[["var",12],[" ",17],["entry",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["entry",7],[": ",17],["Syntax",18]],"d":"The actual argument"},{"p":["AvailabilitySpecListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["AvailabilitySpecListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilitySpecListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AvailabilitySpecListSyntax`."},{"p":["AvailabilitySpecListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilitySpecListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AvailabilitySpecListSyntax`."},{"p":["AvailabilitySpecListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["AvailabilitySpecListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClassRestrictionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClassRestrictionTypeSyntax","classKeyword"],"f":[["var",12],[" ",17],["classKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["classKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ClassRestrictionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ConditionElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ConditionElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ConditionElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ConditionElementListSyntax`."},{"p":["ConditionElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ConditionElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ConditionElementListSyntax`."},{"p":["ConditionElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ConditionElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ConstrainedSugarTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ConstrainedSugarTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["ConstrainedSugarTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ConstrainedSugarTypeSyntax","someOrAnySpecifier"],"f":[["var",12],[" ",17],["someOrAnySpecifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["someOrAnySpecifier",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclNameArgumentListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DeclNameArgumentListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclNameArgumentListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DeclNameArgumentListSyntax`."},{"p":["DeclNameArgumentListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeclNameArgumentListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DeclNameArgumentListSyntax`."},{"p":["DeclNameArgumentListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["DeclNameArgumentListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericParameterListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericParameterListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericParameterListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericParameterListSyntax`."},{"p":["GenericParameterListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericParameterListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericParameterListSyntax`."},{"p":["GenericParameterListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["GenericParameterListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["MemberTypeIdentifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MemberTypeIdentifierSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["MemberTypeIdentifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MemberTypeIdentifierSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,360],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["MemberTypeIdentifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberTypeIdentifierSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalChainingExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["OptionalChainingExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OptionalChainingExprSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalChainingExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SimpleTypeIdentifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SimpleTypeIdentifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SimpleTypeIdentifierSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,360],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["SimpleTypeIdentifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleExprElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleExprElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleExprElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TupleExprElementListSyntax`."},{"p":["TupleExprElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleExprElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TupleExprElementListSyntax`."},{"p":["TupleExprElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["TupleExprElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleTypeElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleTypeElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleTypeElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleTypeElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TupleTypeElementListSyntax`."},{"p":["TupleTypeElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TupleTypeElementListSyntax`."},{"p":["TupleTypeElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["TupleTypeElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["AvailabilityConditionSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilityConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilityConditionSyntax","availabilitySpec"],"f":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilityConditionSyntax","poundAvailableKeyword"],"f":[["var",12],[" ",17],["poundAvailableKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundAvailableKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityConditionSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["BackDeployVersionListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["BackDeployVersionListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BackDeployVersionListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `BackDeployVersionListSyntax`."},{"p":["BackDeployVersionListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["BackDeployVersionListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `BackDeployVersionListSyntax`."},{"p":["BackDeployVersionListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["BackDeployVersionListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DictionaryElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DictionaryElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DictionaryElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DictionaryElementListSyntax`."},{"p":["DictionaryElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DictionaryElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DictionaryElementListSyntax`."},{"p":["DictionaryElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["DictionaryElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DiscardAssignmentExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DiscardAssignmentExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DiscardAssignmentExprSyntax","wildcard"],"f":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]]},{"p":["EditorPlaceholderExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["EditorPlaceholderExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EditorPlaceholderExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionParameterListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["FunctionParameterListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["FunctionParameterListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `FunctionParameterListSyntax`."},{"p":["FunctionParameterListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["FunctionParameterListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `FunctionParameterListSyntax`."},{"p":["FunctionParameterListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["FunctionParameterListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericArgumentClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericArgumentClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericArgumentClauseSyntax","leftAngleBracket"],"f":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentClauseSyntax","rightAngleBracket"],"f":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentClauseSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["GenericArgumentListSyntax",18,308],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["GenericArgumentListSyntax",18]]},{"p":["PrimaryAssociatedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrimaryAssociatedTypeSyntax","inheritedType"],"f":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,370],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrimaryAssociatedTypeSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["PrimaryAssociatedTypeSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralSegmentsSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["StringLiteralSegmentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["StringLiteralSegmentsSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `StringLiteralSegmentsSyntax`."},{"p":["StringLiteralSegmentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StringLiteralSegmentsSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `StringLiteralSegmentsSyntax`."},{"p":["StringLiteralSegmentsSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["StringLiteralSegmentsSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["SymbolicReferenceExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["SymbolicReferenceExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SymbolicReferenceExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SymbolicReferenceExprSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,360],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["TypeInheritanceClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeInheritanceClauseSyntax","inheritedTypeCollection"],"f":[["var",12],[" ",17],["inheritedTypeCollection",7],[": ",17],["InheritedTypeListSyntax",18,256],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedTypeCollection",7],[": ",17],["InheritedTypeListSyntax",18]]},{"p":["TypeInheritanceClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TypeInheritanceClauseSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["TypeInitializerClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeInitializerClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TypeInitializerClauseSyntax","equal"],"f":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]]},{"p":["TypeInitializerClauseSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TypeSyntax",18]]},{"p":["UnresolvedPatternExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnresolvedPatternExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnresolvedPatternExprSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ClosureCaptureItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureCaptureItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureCaptureItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ClosureCaptureItemListSyntax`."},{"p":["ClosureCaptureItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureCaptureItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ClosureCaptureItemListSyntax`."},{"p":["ClosureCaptureItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ClosureCaptureItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CompositionTypeElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CompositionTypeElementSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["CompositionTypeElementSyntax","ampersand"],"f":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ConformanceRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ConformanceRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ConformanceRequirementSyntax","leftTypeIdentifier"],"f":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["ConformanceRequirementSyntax","rightTypeIdentifier"],"f":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["ConformanceRequirementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiabilityParamSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DifferentiabilityParamSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DifferentiabilityParamSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DifferentiabilityParamSyntax","parameter"],"f":[["var",12],[" ",17],["parameter",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameter",7],[": ",17],["Syntax",18]]},{"p":["GenericParameterClauseSyntax","genericParameterList"],"f":[["var",12],[" ",17],["genericParameterList",7],[": ",17],["GenericParameterListSyntax",18,336],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterList",7],[": ",17],["GenericParameterListSyntax",18]]},{"p":["GenericParameterClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericParameterClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericParameterClauseSyntax","leftAngleBracket"],"f":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericParameterClauseSyntax","rightAngleBracket"],"f":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericRequirementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericRequirementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GenericRequirementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericRequirementListSyntax`."},{"p":["GenericRequirementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GenericRequirementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericRequirementListSyntax`."},{"p":["GenericRequirementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["GenericRequirementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["LabeledSpecializeEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["LabeledSpecializeEntrySyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if this argument is followed by another one\n"},{"p":["LabeledSpecializeEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["LabeledSpecializeEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["LabeledSpecializeEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["LabeledSpecializeEntrySyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18]],"d":"The value for this argument"},{"p":["ClosureCaptureSignatureSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureCaptureSignatureSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureCaptureSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClosureCaptureSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClosureCaptureSignatureSyntax","items"],"f":[["var",12],[" ",17],["items",7],[": ",17],["ClosureCaptureItemListSyntax",18,374],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["items",7],[": ",17],["ClosureCaptureItemListSyntax",18],["?",17]]},{"p":["DifferentiabilityParamsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamListSyntax",18,414],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamListSyntax",18]],"d":"The parameters for differentiation."},{"p":["DifferentiabilityParamsSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiabilityParamsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DifferentiabilityParamsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DifferentiabilityParamsSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineNumber"],"f":[["var",12],[" ",17],["lineNumber",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineNumber",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PoundSourceLocationArgsSyntax","fileArgColon"],"f":[["var",12],[" ",17],["fileArgColon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileArgColon",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","fileArgLabel"],"f":[["var",12],[" ",17],["fileArgLabel",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileArgLabel",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineArgColon"],"f":[["var",12],[" ",17],["lineArgColon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineArgColon",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineArgLabel"],"f":[["var",12],[" ",17],["lineArgLabel",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineArgLabel",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PoundSourceLocationArgsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","fileName"],"f":[["var",12],[" ",17],["fileName",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileName",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupNameListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupNameListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupNameListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupNameListSyntax`."},{"p":["PrecedenceGroupNameListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupNameListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupNameListSyntax`."},{"p":["PrecedenceGroupNameListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["PrecedenceGroupNameListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupRelationSyntax","higherThanOrLowerThan"],"f":[["var",12],[" ",17],["higherThanOrLowerThan",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["higherThanOrLowerThan",7],[": ",17],["TokenSyntax",18]],"d":"\nThe relation to specified other precedence groups.\n"},{"p":["PrecedenceGroupRelationSyntax","otherNames"],"f":[["var",12],[" ",17],["otherNames",7],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["otherNames",7],[": ",17],["PrecedenceGroupNameListSyntax",18]],"d":"\nThe name of other precedence group to which this precedence\ngroup relates.\n"},{"p":["PrecedenceGroupRelationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupRelationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupRelationSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["TuplePatternElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TuplePatternElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TuplePatternElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TuplePatternElementListSyntax`."},{"p":["TuplePatternElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TuplePatternElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TuplePatternElementListSyntax`."},{"p":["TuplePatternElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["TuplePatternElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["UnavailabilityConditionSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["UnavailabilityConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnavailabilityConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["UnavailabilityConditionSyntax","availabilitySpec"],"f":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["UnavailabilityConditionSyntax","poundUnavailableKeyword"],"f":[["var",12],[" ",17],["poundUnavailableKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundUnavailableKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["UnavailabilityConditionSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["MatchingPatternConditionSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["MatchingPatternConditionSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18]]},{"p":["MatchingPatternConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MatchingPatternConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MatchingPatternConditionSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["MatchingPatternConditionSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["OptionalBindingConditionSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18]]},{"p":["OptionalBindingConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OptionalBindingConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["OptionalBindingConditionSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["OptionalBindingConditionSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalBindingConditionSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["BackDeployVersionArgumentSyntax","availabilityVersionRestriction"],"f":[["var",12],[" ",17],["availabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18]]},{"p":["BackDeployVersionArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BackDeployVersionArgumentSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if the argument is followed by another\nargument\n"},{"p":["BackDeployVersionArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupAssignmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupAssignmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupAssignmentSyntax","assignmentKeyword"],"f":[["var",12],[" ",17],["assignmentKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignmentKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssignmentSyntax","flag"],"f":[["var",12],[" ",17],["flag",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["flag",7],[": ",17],["TokenSyntax",18]],"d":"\nWhen true, an operator in the corresponding precedence group\nuses the same grouping rules during optional chaining as the\nassignment operators from the standard library. Otherwise,\noperators in the precedence group follows the same optional\nchaining rules as operators that don't perform assignment.\n"},{"p":["PrecedenceGroupAssignmentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrimaryAssociatedTypeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrimaryAssociatedTypeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PrimaryAssociatedTypeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrimaryAssociatedTypeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrimaryAssociatedTypeListSyntax`."},{"p":["PrimaryAssociatedTypeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrimaryAssociatedTypeListSyntax`."},{"p":["PrimaryAssociatedTypeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["PrimaryAssociatedTypeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CompositionTypeElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CompositionTypeElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CompositionTypeElementListSyntax`."},{"p":["CompositionTypeElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CompositionTypeElementListSyntax`."},{"p":["CompositionTypeElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["CompositionTypeElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DifferentiabilityParamListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DifferentiabilityParamListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DifferentiabilityParamListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DifferentiabilityParamListSyntax`."},{"p":["DifferentiabilityParamListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DifferentiabilityParamListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DifferentiabilityParamListSyntax`."},{"p":["DifferentiabilityParamListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["DifferentiabilityParamListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["OperatorPrecedenceAndTypesSyntax","precedenceGroupAndDesignatedTypes"],"f":[["var",12],[" ",17],["precedenceGroupAndDesignatedTypes",7],[": ",17],["IdentifierListSyntax",18,141],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["precedenceGroupAndDesignatedTypes",7],[": ",17],["IdentifierListSyntax",18]],"d":"\nThe precedence group and designated types for this operator\n"},{"p":["OperatorPrecedenceAndTypesSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["OperatorPrecedenceAndTypesSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["OperatorPrecedenceAndTypesSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupNameElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupNameElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PrecedenceGroupNameElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupNameElementSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityLabeledArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilityLabeledArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilityLabeledArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating label and value"},{"p":["AvailabilityLabeledArgumentSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["AvailabilityLabeledArgumentSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["Syntax",18]],"d":"The value of this labeled argument"},{"p":["BackDeployAttributeSpecListSyntax","versionList"],"f":[["var",12],[" ",17],["versionList",7],[": ",17],["BackDeployVersionListSyntax",18,350],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["versionList",7],[": ",17],["BackDeployVersionListSyntax",18]],"d":"\nThe list of OS versions in which the declaration became ABI\nstable.\n"},{"p":["BackDeployAttributeSpecListSyntax","beforeLabel"],"f":[["var",12],[" ",17],["beforeLabel",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["beforeLabel",7],[": ",17],["TokenSyntax",18]],"d":"The \"before\" label."},{"p":["BackDeployAttributeSpecListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BackDeployAttributeSpecListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["BackDeployAttributeSpecListSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"\nThe colon separating \"before\" and the parameter list.\n"},{"p":["PrimaryAssociatedTypeClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrimaryAssociatedTypeClauseSyntax","primaryAssociatedTypeList"],"f":[["var",12],[" ",17],["primaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["primaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["PrimaryAssociatedTypeClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrimaryAssociatedTypeClauseSyntax","leftAngleBracket"],"f":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["PrimaryAssociatedTypeClauseSyntax","rightAngleBracket"],"f":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["SpecializeAttributeSpecListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["SpecializeAttributeSpecListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SpecializeAttributeSpecListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `SpecializeAttributeSpecListSyntax`."},{"p":["SpecializeAttributeSpecListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SpecializeAttributeSpecListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `SpecializeAttributeSpecListSyntax`."},{"p":["SpecializeAttributeSpecListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["SpecializeAttributeSpecListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ImplementsAttributeArgumentsSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the protocol's requirement if it\nis a function requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ImplementsAttributeArgumentsSyntax","declBaseName"],"f":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the protocol's requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ImplementsAttributeArgumentsSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["SimpleTypeIdentifierSyntax",18]],"d":"\nThe type for which the method with this attribute\nimplements a requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]],"d":"\nThe comma separating the type and method name\n"},{"p":["NamedAttributeStringArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["NamedAttributeStringArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["NamedAttributeStringArgumentSyntax","stringOrDeclname"],"f":[["var",12],[" ",17],["stringOrDeclname",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["stringOrDeclname",7],[": ",17],["Syntax",18]]},{"p":["NamedAttributeStringArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["NamedAttributeStringArgumentSyntax","nameTok"],"f":[["var",12],[" ",17],["nameTok",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["nameTok",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["PrecedenceGroupAssociativitySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupAssociativitySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupAssociativitySyntax","associativityKeyword"],"f":[["var",12],[" ",17],["associativityKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associativityKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssociativitySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssociativitySyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18]],"d":"\nOperators that are `left`-associative group left-to-right.\nOperators that are `right`-associative group right-to-left.\nOperators that are specified with an associativity of `none`\ndon't associate at all\n"},{"p":["PrecedenceGroupAttributeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupAttributeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["PrecedenceGroupAttributeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupAttributeListSyntax`."},{"p":["PrecedenceGroupAttributeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["PrecedenceGroupAttributeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupAttributeListSyntax`."},{"p":["PrecedenceGroupAttributeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["PrecedenceGroupAttributeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DifferentiabilityParamsClauseSyntax","parameters"],"f":[["var",12],[" ",17],["parameters",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameters",7],[": ",17],["Syntax",18]]},{"p":["DifferentiabilityParamsClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DifferentiabilityParamsClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DifferentiabilityParamsClauseSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"\nThe colon separating \"wrt\" and the parameter list.\n"},{"p":["DifferentiabilityParamsClauseSyntax","wrtLabel"],"f":[["var",12],[" ",17],["wrtLabel",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrtLabel",7],[": ",17],["TokenSyntax",18]],"d":"The \"wrt\" label."},{"p":["AvailabilityVersionRestrictionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AvailabilityVersionRestrictionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AvailabilityVersionRestrictionSyntax","version"],"f":[["var",12],[" ",17],["version",7],[": ",17],["VersionTupleSyntax",18,97],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["version",7],[": ",17],["VersionTupleSyntax",18],["?",17]]},{"p":["AvailabilityVersionRestrictionSyntax","platform"],"f":[["var",12],[" ",17],["platform",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["platform",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of the OS on which the availability should be\nrestricted or 'swift' if the availability should be\nrestricted based on a Swift version.\n"},{"p":["MultipleTrailingClosureElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MultipleTrailingClosureElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MultipleTrailingClosureElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["MultipleTrailingClosureElementSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]]},{"p":["MultipleTrailingClosureElementSyntax","closure"],"f":[["var",12],[" ",17],["closure",7],[": ",17],["ClosureExprSyntax",18,41],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closure",7],[": ",17],["ClosureExprSyntax",18]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","wrappedType"],"f":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","exclamationMark"],"f":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiableAttributeArgumentsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DifferentiableAttributeArgumentsSyntax","diffKindComma"],"f":[["var",12],[" ",17],["diffKindComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffKindComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe comma following the differentiability kind, if it exists.\n"},{"p":["DifferentiableAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","diffParamsComma"],"f":[["var",12],[" ",17],["diffParamsComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParamsComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe comma following the differentiability parameters clause,\nif it exists.\n"},{"p":["DifferentiableAttributeArgumentsSyntax","diffKind"],"f":[["var",12],[" ",17],["diffKind",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffKind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["MultipleTrailingClosureElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["MultipleTrailingClosureElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["MultipleTrailingClosureElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `MultipleTrailingClosureElementListSyntax`."},{"p":["MultipleTrailingClosureElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["MultipleTrailingClosureElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `MultipleTrailingClosureElementListSyntax`."},{"p":["MultipleTrailingClosureElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["MultipleTrailingClosureElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","accessorKind"],"f":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The accessor name."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","originalDeclName"],"f":[["var",12],[" ",17],["originalDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18,270],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["originalDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18]],"d":"The referenced original declaration name."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"\nThe colon separating the \"of\" label and the original\ndeclaration name.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe period separating the original declaration name and the\naccessor name.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","ofLabel"],"f":[["var",12],[" ",17],["ofLabel",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ofLabel",7],[": ",17],["TokenSyntax",18]],"d":"The \"of\" label."},{"p":["DeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["DeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["ExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["StmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["StmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["TokenSyntax","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["TokenSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TokenSyntax","contentLength"],"f":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18]],"d":"The length this node takes up spelled out in the source, excluding its\nleading or trailing trivia."},{"p":["TokenSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18]],"d":"The leading trivia (spaces, newlines, etc.) associated with this token."},{"p":["TokenSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TokenSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this token."},{"p":["TokenSyntax","leadingTriviaLength"],"f":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's leading trivia takes up spelled out in source."},{"p":["TokenSyntax","tokenClassification"],"f":[["var",12],[" ",17],["tokenClassification",7],[": ",17],["SyntaxClassifiedRange",18,526],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["tokenClassification",7],[": ",17],["SyntaxClassifiedRange",18]],"d":"The `SyntaxClassifiedRange` for the token text, excluding trivia."},{"p":["TokenSyntax","trailingTriviaLength"],"f":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's trailing trivia takes up spelled out in source."},{"p":["TokenSyntax","text"],"f":[["var",12],[" ",17],["text",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["text",7],[": ",17],["String",18]],"d":"The text of the token as written in the source code."},{"p":["TokenSyntax","presence"],"f":[["var",12],[" ",17],["presence",7],[": ",17],["SourcePresence",18,23],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["presence",7],[": ",17],["SourcePresence",18]]},{"p":["TokenSyntax","tokenKind"],"f":[["var",12],[" ",17],["tokenKind",7],[": ",17],["TokenKind",18,24],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tokenKind",7],[": ",17],["TokenKind",18]],"d":"The kind of token this node represents."},{"p":["AsExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AsExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AsExprSyntax","questionOrExclamationMark"],"f":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AsExprSyntax","asTok"],"f":[["var",12],[" ",17],["asTok",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asTok",7],[": ",17],["TokenSyntax",18]]},{"p":["AsExprSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["BracedSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["BracedSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["DoStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DoStmtSyntax","catchClauses"],"f":[["var",12],[" ",17],["catchClauses",7],[": ",17],["CatchClauseListSyntax",18,160],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchClauses",7],[": ",17],["CatchClauseListSyntax",18],["?",17]]},{"p":["DoStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DoStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DoStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["DoStmtSyntax","doKeyword"],"f":[["var",12],[" ",17],["doKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["doKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DoStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["IfStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["IfStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["IfStmtSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["IfStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IfStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IfStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["IfStmtSyntax","elseBody"],"f":[["var",12],[" ",17],["elseBody",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseBody",7],[": ",17],["Syntax",18],["?",17]]},{"p":["IfStmtSyntax","ifKeyword"],"f":[["var",12],[" ",17],["ifKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ifKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["IfStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["IsExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IsExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["IsExprSyntax","isTok"],"f":[["var",12],[" ",17],["isTok",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["isTok",7],[": ",17],["TokenSyntax",18]]},{"p":["IsExprSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["LabeledSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["LabeledSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["PatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TryExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["TryExprSyntax","tryKeyword"],"f":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["TryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TryExprSyntax","questionOrExclamationMark"],"f":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["UnknownSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["UnknownSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CaseItemSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["CaseItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CaseItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CaseItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CaseItemSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["DeclNameSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the protocol's requirement if it\nis a function requirement.\n"},{"p":["DeclNameSyntax","declBaseName"],"f":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the protocol's requirement.\n"},{"p":["DeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the enum declaration.\n"},{"p":["EnumDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of this enum.\n"},{"p":["EnumDeclSyntax","enumKeyword"],"f":[["var",12],[" ",17],["enumKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["enumKeyword",7],[": ",17],["TokenSyntax",18]],"d":"\nThe `enum` keyword for this declaration.\n"},{"p":["EnumDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["EnumDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["EnumDeclSyntax","genericParameters"],"f":[["var",12],[" ",17],["genericParameters",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameters",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]],"d":"\nThe generic parameters, if any, for this enum.\n"},{"p":["EnumDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]],"d":"\nThe inheritance clause describing conformances or raw\nvalues for this enum.\n"},{"p":["EnumDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]],"d":"\nThe `where` clause that applies to the generic parameters of\nthis enum.\n"},{"p":["EnumDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"d":"\nThe cases and other members of this enum.\n"},{"p":["EnumDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the enum declaration.\n"},{"p":["ExprListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ExprListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ExprListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ExprListSyntax`."},{"p":["ExprListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ExprListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ExprListSyntax`."},{"p":["ExprListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ExprListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjcNameSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjcNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ObjcNameSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ObjcNameSyntax`."},{"p":["ObjcNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ObjcNameSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ObjcNameSyntax`."},{"p":["ObjcNameSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["ObjcNameSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TypeExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TypeExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TypeExprSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["ArrayExprSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayExprSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ArrayExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ArrayExprSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["ArrayElementListSyntax",18,202],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["ArrayElementListSyntax",18]]},{"p":["ArrayTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ArrayTypeSyntax","elementType"],"f":[["var",12],[" ",17],["elementType",7],[": ",17],["TypeSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementType",7],[": ",17],["TypeSyntax",18]]},{"p":["ArrayTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ArrayTypeSyntax","leftSquareBracket"],"f":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayTypeSyntax","rightSquareBracket"],"f":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrowExprSyntax","arrowToken"],"f":[["var",12],[" ",17],["arrowToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrowToken",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrowExprSyntax","throwsToken"],"f":[["var",12],[" ",17],["throwsToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ArrowExprSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ArrowExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ArrowExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AttributeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the attribute takes arguments, the closing parenthesis.\n"},{"p":["AttributeSyntax","atSignToken"],"f":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18]],"d":"The `@` sign."},{"p":["AttributeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AttributeSyntax","attributeName"],"f":[["var",12],[" ",17],["attributeName",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributeName",7],[": ",17],["TokenSyntax",18]],"d":"The name of the attribute."},{"p":["AttributeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["AttributeSyntax","argument"],"f":[["var",12],[" ",17],["argument",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argument",7],[": ",17],["Syntax",18],["?",17]],"d":"\nThe arguments of the attribute. In case the attribute\ntakes multiple arguments, they are gather in the\nappropriate takes first.\n"},{"p":["AttributeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the attribute takes arguments, the opening parenthesis.\n"},{"p":["AttributeSyntax","tokenList"],"f":[["var",12],[" ",17],["tokenList",7],[": ",17],["TokenListSyntax",18,509],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tokenList",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["AwaitExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["AwaitExprSyntax","awaitKeyword"],"f":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AwaitExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["AwaitExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["BreakStmtSyntax","breakKeyword"],"f":[["var",12],[" ",17],["breakKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["breakKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["BreakStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["BreakStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["BreakStmtSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CatchItemSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["CatchItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CatchItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CatchItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CatchItemSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["ClassDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ClassDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ClassDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","classOrActorKeyword"],"f":[["var",12],[" ",17],["classOrActorKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["classOrActorKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ClassDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["ClassDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["CodeBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["CodeBlockSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["CodeBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["CodeBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["CodeBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclGroupSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["DeclGroupSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["DeclGroupSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["DeferStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["DeferStmtSyntax","deferKeyword"],"f":[["var",12],[" ",17],["deferKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["deferKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DeferStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["DeferStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["ElseBlockSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ElseBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ElseBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ElseBlockSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["ForInStmtSyntax","forKeyword"],"f":[["var",12],[" ",17],["forKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["forKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForInStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","tryKeyword"],"f":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","awaitKeyword"],"f":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ForInStmtSyntax","sequenceExpr"],"f":[["var",12],[" ",17],["sequenceExpr",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["sequenceExpr",7],[": ",17],["ExprSyntax",18]]},{"p":["ForInStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["ForInStmtSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["ForInStmtSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ForInStmtSyntax","inKeyword"],"f":[["var",12],[" ",17],["inKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForInStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["GuardStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["GuardStmtSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GuardStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["GuardStmtSyntax","guardKeyword"],"f":[["var",12],[" ",17],["guardKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["guardKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GuardStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["GuardStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["InOutExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["InOutExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["InOutExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["InOutExprSyntax","ampersand"],"f":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18]]},{"p":["ThrowStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,451],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ThrowStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["ThrowStmtSyntax","throwKeyword"],"f":[["var",12],[" ",17],["throwKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ThrowStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TokenListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TokenListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TokenListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TokenListSyntax`."},{"p":["TokenListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TokenListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TokenListSyntax`."},{"p":["TokenListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["TokenListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleExprSyntax","elementList"],"f":[["var",12],[" ",17],["elementList",7],[": ",17],["TupleExprElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["TupleExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["TupleTypeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["TupleTypeSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["TupleTypeElementListSyntax",18,346],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["TupleTypeElementListSyntax",18]]},{"p":["TupleTypeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["WhileStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["WhileStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["WhileStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["WhileStmtSyntax","whileKeyword"],"f":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["WhileStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["WhileStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,495],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["WhileStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["YieldListSyntax","elementList"],"f":[["var",12],[" ",17],["elementList",7],[": ",17],["ExprListSyntax",18,473],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementList",7],[": ",17],["ExprListSyntax",18]]},{"p":["YieldListSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["YieldListSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["YieldListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["YieldListSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["YieldStmtSyntax","yieldKeyword"],"f":[["var",12],[" ",17],["yieldKeyword",7],[": ",17],["TokenSyntax",18,454],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["yieldKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["YieldStmtSyntax","yields"],"f":[["var",12],[" ",17],["yields",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["yields",7],[": ",17],["Syntax",18]]},{"p":["Syntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type."},{"p":["Syntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]]},{"p":["SyntaxCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["SyntaxVerifierError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["SyntaxClassifiedRange","kind"],"f":[["var",12],[" ",17],["kind",7],[": ",17],["SyntaxClassification",18,18]],"s":[["var",12],[" ",17],["kind",7],[": ",17],["SyntaxClassification",18]]},{"p":["SyntaxClassifiedRange","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18,536]],"s":[["var",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18]]},{"p":["SyntaxClassifiedRange","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["SyntaxClassifiedRange","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["SyntaxClassifiedRange","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["SyntaxNode","asSyntax"],"f":[["var",12],[" ",17],["asSyntax",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSyntax",7],[": ",17],["Syntax",18]],"d":"Converts this node to a `Syntax` object.\n\nThis operation results in wrapping this node and all of its parents into\n`Syntax` objects. There's a cost associated with it that should be taken\ninto account before used inside performance critical code."},{"p":["SyntaxNode","asCaseItem"],"f":[["var",12],[" ",17],["asCaseItem",7],[": ",17],["CaseItemSyntax",18,467],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCaseItem",7],[": ",17],["CaseItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclName"],"f":[["var",12],[" ",17],["asDeclName",7],[": ",17],["DeclNameSyntax",18,469],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclName",7],[": ",17],["DeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumDecl"],"f":[["var",12],[" ",17],["asEnumDecl",7],[": ",17],["EnumDeclSyntax",18,471],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumDecl",7],[": ",17],["EnumDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asExprList"],"f":[["var",12],[" ",17],["asExprList",7],[": ",17],["ExprListSyntax",18,473],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExprList",7],[": ",17],["ExprListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcName"],"f":[["var",12],[" ",17],["asObjcName",7],[": ",17],["ObjcNameSyntax",18,475],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcName",7],[": ",17],["ObjcNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeExpr"],"f":[["var",12],[" ",17],["asTypeExpr",7],[": ",17],["TypeExprSyntax",18,477],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeExpr",7],[": ",17],["TypeExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isCaseItem"],"f":[["var",12],[" ",17],["isCaseItem",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCaseItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclName"],"f":[["var",12],[" ",17],["isDeclName",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumDecl"],"f":[["var",12],[" ",17],["isEnumDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExprList"],"f":[["var",12],[" ",17],["isExprList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExprList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcName"],"f":[["var",12],[" ",17],["isObjcName",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeExpr"],"f":[["var",12],[" ",17],["isTypeExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asArrayExpr"],"f":[["var",12],[" ",17],["asArrayExpr",7],[": ",17],["ArrayExprSyntax",18,479],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayExpr",7],[": ",17],["ArrayExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrayType"],"f":[["var",12],[" ",17],["asArrayType",7],[": ",17],["ArrayTypeSyntax",18,481],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayType",7],[": ",17],["ArrayTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrowExpr"],"f":[["var",12],[" ",17],["asArrowExpr",7],[": ",17],["ArrowExprSyntax",18,483],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrowExpr",7],[": ",17],["ArrowExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttribute"],"f":[["var",12],[" ",17],["asAttribute",7],[": ",17],["AttributeSyntax",18,485],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttribute",7],[": ",17],["AttributeSyntax",18],["?",17]]},{"p":["SyntaxNode","asAwaitExpr"],"f":[["var",12],[" ",17],["asAwaitExpr",7],[": ",17],["AwaitExprSyntax",18,487],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAwaitExpr",7],[": ",17],["AwaitExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asBreakStmt"],"f":[["var",12],[" ",17],["asBreakStmt",7],[": ",17],["BreakStmtSyntax",18,489],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBreakStmt",7],[": ",17],["BreakStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asCatchItem"],"f":[["var",12],[" ",17],["asCatchItem",7],[": ",17],["CatchItemSyntax",18,491],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchItem",7],[": ",17],["CatchItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asClassDecl"],"f":[["var",12],[" ",17],["asClassDecl",7],[": ",17],["ClassDeclSyntax",18,493],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClassDecl",7],[": ",17],["ClassDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlock"],"f":[["var",12],[" ",17],["asCodeBlock",7],[": ",17],["CodeBlockSyntax",18,495],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlock",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeferStmt"],"f":[["var",12],[" ",17],["asDeferStmt",7],[": ",17],["DeferStmtSyntax",18,497],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeferStmt",7],[": ",17],["DeferStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asElseBlock"],"f":[["var",12],[" ",17],["asElseBlock",7],[": ",17],["ElseBlockSyntax",18,499],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asElseBlock",7],[": ",17],["ElseBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asForInStmt"],"f":[["var",12],[" ",17],["asForInStmt",7],[": ",17],["ForInStmtSyntax",18,501],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asForInStmt",7],[": ",17],["ForInStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asGuardStmt"],"f":[["var",12],[" ",17],["asGuardStmt",7],[": ",17],["GuardStmtSyntax",18,503],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGuardStmt",7],[": ",17],["GuardStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asInOutExpr"],"f":[["var",12],[" ",17],["asInOutExpr",7],[": ",17],["InOutExprSyntax",18,505],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInOutExpr",7],[": ",17],["InOutExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asThrowStmt"],"f":[["var",12],[" ",17],["asThrowStmt",7],[": ",17],["ThrowStmtSyntax",18,507],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asThrowStmt",7],[": ",17],["ThrowStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asTokenList"],"f":[["var",12],[" ",17],["asTokenList",7],[": ",17],["TokenListSyntax",18,509],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTokenList",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExpr"],"f":[["var",12],[" ",17],["asTupleExpr",7],[": ",17],["TupleExprSyntax",18,511],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExpr",7],[": ",17],["TupleExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleType"],"f":[["var",12],[" ",17],["asTupleType",7],[": ",17],["TupleTypeSyntax",18,513],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleType",7],[": ",17],["TupleTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asWhileStmt"],"f":[["var",12],[" ",17],["asWhileStmt",7],[": ",17],["WhileStmtSyntax",18,515],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWhileStmt",7],[": ",17],["WhileStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asYieldList"],"f":[["var",12],[" ",17],["asYieldList",7],[": ",17],["YieldListSyntax",18,517],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asYieldList",7],[": ",17],["YieldListSyntax",18],["?",17]]},{"p":["SyntaxNode","asYieldStmt"],"f":[["var",12],[" ",17],["asYieldStmt",7],[": ",17],["YieldStmtSyntax",18,519],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asYieldStmt",7],[": ",17],["YieldStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A source-accurate description of this node."},{"p":["SyntaxNode","endPosition"],"f":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node, including its trivia."},{"p":["SyntaxNode","isArrayExpr"],"f":[["var",12],[" ",17],["isArrayExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrayType"],"f":[["var",12],[" ",17],["isArrayType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrowExpr"],"f":[["var",12],[" ",17],["isArrowExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrowExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttribute"],"f":[["var",12],[" ",17],["isAttribute",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttribute",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAwaitExpr"],"f":[["var",12],[" ",17],["isAwaitExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAwaitExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBreakStmt"],"f":[["var",12],[" ",17],["isBreakStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBreakStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCatchItem"],"f":[["var",12],[" ",17],["isCatchItem",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClassDecl"],"f":[["var",12],[" ",17],["isClassDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClassDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlock"],"f":[["var",12],[" ",17],["isCodeBlock",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeferStmt"],"f":[["var",12],[" ",17],["isDeferStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeferStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isElseBlock"],"f":[["var",12],[" ",17],["isElseBlock",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isElseBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isForInStmt"],"f":[["var",12],[" ",17],["isForInStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isForInStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGuardStmt"],"f":[["var",12],[" ",17],["isGuardStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGuardStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInOutExpr"],"f":[["var",12],[" ",17],["isInOutExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInOutExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isThrowStmt"],"f":[["var",12],[" ",17],["isThrowStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isThrowStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTokenList"],"f":[["var",12],[" ",17],["isTokenList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTokenList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExpr"],"f":[["var",12],[" ",17],["isTupleExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleType"],"f":[["var",12],[" ",17],["isTupleType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWhileStmt"],"f":[["var",12],[" ",17],["isWhileStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWhileStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isYieldList"],"f":[["var",12],[" ",17],["isYieldList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isYieldList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isYieldStmt"],"f":[["var",12],[" ",17],["isYieldStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isYieldStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["SyntaxNode","asAccessPath"],"f":[["var",12],[" ",17],["asAccessPath",7],[": ",17],["AccessPathSyntax",18,25],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessPath",7],[": ",17],["AccessPathSyntax",18],["?",17]]},{"p":["SyntaxNode","asImportDecl"],"f":[["var",12],[" ",17],["asImportDecl",7],[": ",17],["ImportDeclSyntax",18,27],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImportDecl",7],[": ",17],["ImportDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asReturnStmt"],"f":[["var",12],[" ",17],["asReturnStmt",7],[": ",17],["ReturnStmtSyntax",18,29],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asReturnStmt",7],[": ",17],["ReturnStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asSourceFile"],"f":[["var",12],[" ",17],["asSourceFile",7],[": ",17],["SourceFileSyntax",18,31],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSourceFile",7],[": ",17],["SourceFileSyntax",18],["?",17]]},{"p":["SyntaxNode","asStructDecl"],"f":[["var",12],[" ",17],["asStructDecl",7],[": ",17],["StructDeclSyntax",18,33],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStructDecl",7],[": ",17],["StructDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCase"],"f":[["var",12],[" ",17],["asSwitchCase",7],[": ",17],["SwitchCaseSyntax",18,35],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCase",7],[": ",17],["SwitchCaseSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchStmt"],"f":[["var",12],[" ",17],["asSwitchStmt",7],[": ",17],["SwitchStmtSyntax",18,37],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchStmt",7],[": ",17],["SwitchStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessPath"],"f":[["var",12],[" ",17],["isAccessPath",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessPath",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isImportDecl"],"f":[["var",12],[" ",17],["isImportDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImportDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isReturnStmt"],"f":[["var",12],[" ",17],["isReturnStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isReturnStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSourceFile"],"f":[["var",12],[" ",17],["isSourceFile",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSourceFile",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStructDecl"],"f":[["var",12],[" ",17],["isStructDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStructDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCase"],"f":[["var",12],[" ",17],["isSwitchCase",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCase",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchStmt"],"f":[["var",12],[" ",17],["isSwitchStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCatchClause"],"f":[["var",12],[" ",17],["asCatchClause",7],[": ",17],["CatchClauseSyntax",18,39],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchClause",7],[": ",17],["CatchClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureExpr"],"f":[["var",12],[" ",17],["asClosureExpr",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureExpr",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asKeyPathExpr"],"f":[["var",12],[" ",17],["asKeyPathExpr",7],[": ",17],["KeyPathExprSyntax",18,43],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyPathExpr",7],[": ",17],["KeyPathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTernaryExpr"],"f":[["var",12],[" ",17],["asTernaryExpr",7],[": ",17],["TernaryExprSyntax",18,45],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTernaryExpr",7],[": ",17],["TernaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownDecl"],"f":[["var",12],[" ",17],["asUnknownDecl",7],[": ",17],["UnknownDeclSyntax",18,47],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownDecl",7],[": ",17],["UnknownDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownExpr"],"f":[["var",12],[" ",17],["asUnknownExpr",7],[": ",17],["UnknownExprSyntax",18,48],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownExpr",7],[": ",17],["UnknownExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownStmt"],"f":[["var",12],[" ",17],["asUnknownStmt",7],[": ",17],["UnknownStmtSyntax",18,49],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownStmt",7],[": ",17],["UnknownStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownType"],"f":[["var",12],[" ",17],["asUnknownType",7],[": ",17],["UnknownTypeSyntax",18,50],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownType",7],[": ",17],["UnknownTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asWhereClause"],"f":[["var",12],[" ",17],["asWhereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWhereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","isCatchClause"],"f":[["var",12],[" ",17],["isCatchClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureExpr"],"f":[["var",12],[" ",17],["isClosureExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isKeyPathExpr"],"f":[["var",12],[" ",17],["isKeyPathExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyPathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTernaryExpr"],"f":[["var",12],[" ",17],["isTernaryExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTernaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownDecl"],"f":[["var",12],[" ",17],["isUnknownDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownExpr"],"f":[["var",12],[" ",17],["isUnknownExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownStmt"],"f":[["var",12],[" ",17],["isUnknownStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownType"],"f":[["var",12],[" ",17],["isUnknownType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWhereClause"],"f":[["var",12],[" ",17],["isWhereClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWhereClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorDecl"],"f":[["var",12],[" ",17],["asAccessorDecl",7],[": ",17],["AccessorDeclSyntax",18,53],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorDecl",7],[": ",17],["AccessorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asAccessorList"],"f":[["var",12],[" ",17],["asAccessorList",7],[": ",17],["AccessorListSyntax",18,55],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorList",7],[": ",17],["AccessorListSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrayElement"],"f":[["var",12],[" ",17],["asArrayElement",7],[": ",17],["ArrayElementSyntax",18,57],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayElement",7],[": ",17],["ArrayElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asCaseItemList"],"f":[["var",12],[" ",17],["asCaseItemList",7],[": ",17],["CaseItemListSyntax",18,59],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCaseItemList",7],[": ",17],["CaseItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureParam"],"f":[["var",12],[" ",17],["asClosureParam",7],[": ",17],["ClosureParamSyntax",18,61],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureParam",7],[": ",17],["ClosureParamSyntax",18],["?",17]]},{"p":["SyntaxNode","asContinueStmt"],"f":[["var",12],[" ",17],["asContinueStmt",7],[": ",17],["ContinueStmtSyntax",18,63],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asContinueStmt",7],[": ",17],["ContinueStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclModifier"],"f":[["var",12],[" ",17],["asDeclModifier",7],[": ",17],["DeclModifierSyntax",18,65],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclModifier",7],[": ",17],["DeclModifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseDecl"],"f":[["var",12],[" ",17],["asEnumCaseDecl",7],[": ",17],["EnumCaseDeclSyntax",18,67],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseDecl",7],[": ",17],["EnumCaseDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionDecl"],"f":[["var",12],[" ",17],["asFunctionDecl",7],[": ",17],["FunctionDeclSyntax",18,69],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionDecl",7],[": ",17],["FunctionDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionType"],"f":[["var",12],[" ",17],["asFunctionType",7],[": ",17],["FunctionTypeSyntax",18,71],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionType",7],[": ",17],["FunctionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigDecl"],"f":[["var",12],[" ",17],["asIfConfigDecl",7],[": ",17],["IfConfigDeclSyntax",18,73],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigDecl",7],[": ",17],["IfConfigDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asMetatypeType"],"f":[["var",12],[" ",17],["asMetatypeType",7],[": ",17],["MetatypeTypeSyntax",18,75],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMetatypeType",7],[": ",17],["MetatypeTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asModifierList"],"f":[["var",12],[" ",17],["asModifierList",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asModifierList",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjCSelector"],"f":[["var",12],[" ",17],["asObjCSelector",7],[": ",17],["ObjCSelectorSyntax",18,79],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjCSelector",7],[": ",17],["ObjCSelectorSyntax",18],["?",17]]},{"p":["SyntaxNode","asOperatorDecl"],"f":[["var",12],[" ",17],["asOperatorDecl",7],[": ",17],["OperatorDeclSyntax",18,81],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOperatorDecl",7],[": ",17],["OperatorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalType"],"f":[["var",12],[" ",17],["asOptionalType",7],[": ",17],["OptionalTypeSyntax",18,83],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalType",7],[": ",17],["OptionalTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asProtocolDecl"],"f":[["var",12],[" ",17],["asProtocolDecl",7],[": ",17],["ProtocolDeclSyntax",18,85],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asProtocolDecl",7],[": ",17],["ProtocolDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asReturnClause"],"f":[["var",12],[" ",17],["asReturnClause",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asReturnClause",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asSequenceExpr"],"f":[["var",12],[" ",17],["asSequenceExpr",7],[": ",17],["SequenceExprSyntax",18,89],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSequenceExpr",7],[": ",17],["SequenceExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSuperRefExpr"],"f":[["var",12],[" ",17],["asSuperRefExpr",7],[": ",17],["SuperRefExprSyntax",18,91],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSuperRefExpr",7],[": ",17],["SuperRefExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePattern"],"f":[["var",12],[" ",17],["asTuplePattern",7],[": ",17],["TuplePatternSyntax",18,93],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePattern",7],[": ",17],["TuplePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asVariableDecl"],"f":[["var",12],[" ",17],["asVariableDecl",7],[": ",17],["VariableDeclSyntax",18,95],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asVariableDecl",7],[": ",17],["VariableDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asVersionTuple"],"f":[["var",12],[" ",17],["asVersionTuple",7],[": ",17],["VersionTupleSyntax",18,97],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asVersionTuple",7],[": ",17],["VersionTupleSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorDecl"],"f":[["var",12],[" ",17],["isAccessorDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAccessorList"],"f":[["var",12],[" ",17],["isAccessorList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrayElement"],"f":[["var",12],[" ",17],["isArrayElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCaseItemList"],"f":[["var",12],[" ",17],["isCaseItemList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCaseItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureParam"],"f":[["var",12],[" ",17],["isClosureParam",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureParam",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isContinueStmt"],"f":[["var",12],[" ",17],["isContinueStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isContinueStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclModifier"],"f":[["var",12],[" ",17],["isDeclModifier",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclModifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseDecl"],"f":[["var",12],[" ",17],["isEnumCaseDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionDecl"],"f":[["var",12],[" ",17],["isFunctionDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionType"],"f":[["var",12],[" ",17],["isFunctionType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigDecl"],"f":[["var",12],[" ",17],["isIfConfigDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMetatypeType"],"f":[["var",12],[" ",17],["isMetatypeType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMetatypeType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isModifierList"],"f":[["var",12],[" ",17],["isModifierList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isModifierList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjCSelector"],"f":[["var",12],[" ",17],["isObjCSelector",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjCSelector",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOperatorDecl"],"f":[["var",12],[" ",17],["isOperatorDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOperatorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalType"],"f":[["var",12],[" ",17],["isOptionalType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isProtocolDecl"],"f":[["var",12],[" ",17],["isProtocolDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isProtocolDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isReturnClause"],"f":[["var",12],[" ",17],["isReturnClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isReturnClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSequenceExpr"],"f":[["var",12],[" ",17],["isSequenceExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSequenceExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSuperRefExpr"],"f":[["var",12],[" ",17],["isSuperRefExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSuperRefExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePattern"],"f":[["var",12],[" ",17],["isTuplePattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isVariableDecl"],"f":[["var",12],[" ",17],["isVariableDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isVariableDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isVersionTuple"],"f":[["var",12],[" ",17],["isVersionTuple",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isVersionTuple",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorBlock"],"f":[["var",12],[" ",17],["asAccessorBlock",7],[": ",17],["AccessorBlockSyntax",18,99],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorBlock",7],[": ",17],["AccessorBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asAsTypePattern"],"f":[["var",12],[" ",17],["asAsTypePattern",7],[": ",17],["AsTypePatternSyntax",18,101],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAsTypePattern",7],[": ",17],["AsTypePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttributeList"],"f":[["var",12],[" ",17],["asAttributeList",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttributeList",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCatchItemList"],"f":[["var",12],[" ",17],["asCatchItemList",7],[": ",17],["CatchItemListSyntax",18,105],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchItemList",7],[": ",17],["CatchItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlockItem"],"f":[["var",12],[" ",17],["asCodeBlockItem",7],[": ",17],["CodeBlockItemSyntax",18,107],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlockItem",7],[": ",17],["CodeBlockItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asExtensionDecl"],"f":[["var",12],[" ",17],["asExtensionDecl",7],[": ",17],["ExtensionDeclSyntax",18,109],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExtensionDecl",7],[": ",17],["ExtensionDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asInheritedType"],"f":[["var",12],[" ",17],["asInheritedType",7],[": ",17],["InheritedTypeSyntax",18,111],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInheritedType",7],[": ",17],["InheritedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asIsTypePattern"],"f":[["var",12],[" ",17],["asIsTypePattern",7],[": ",17],["IsTypePatternSyntax",18,113],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIsTypePattern",7],[": ",17],["IsTypePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcNamePiece"],"f":[["var",12],[" ",17],["asObjcNamePiece",7],[": ",17],["ObjcNamePieceSyntax",18,115],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcNamePiece",7],[": ",17],["ObjcNamePieceSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFileExpr"],"f":[["var",12],[" ",17],["asPoundFileExpr",7],[": ",17],["PoundFileExprSyntax",18,117],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFileExpr",7],[": ",17],["PoundFileExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundLineExpr"],"f":[["var",12],[" ",17],["asPoundLineExpr",7],[": ",17],["PoundLineExprSyntax",18,119],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundLineExpr",7],[": ",17],["PoundLineExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringSegment"],"f":[["var",12],[" ",17],["asStringSegment",7],[": ",17],["StringSegmentSyntax",18,121],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringSegment",7],[": ",17],["StringSegmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asSubscriptDecl"],"f":[["var",12],[" ",17],["asSubscriptDecl",7],[": ",17],["SubscriptDeclSyntax",18,123],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSubscriptDecl",7],[": ",17],["SubscriptDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSubscriptExpr"],"f":[["var",12],[" ",17],["asSubscriptExpr",7],[": ",17],["SubscriptExprSyntax",18,125],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSubscriptExpr",7],[": ",17],["SubscriptExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypealiasDecl"],"f":[["var",12],[" ",17],["asTypealiasDecl",7],[": ",17],["TypealiasDeclSyntax",18,127],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypealiasDecl",7],[": ",17],["TypealiasDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorBlock"],"f":[["var",12],[" ",17],["isAccessorBlock",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAsTypePattern"],"f":[["var",12],[" ",17],["isAsTypePattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAsTypePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttributeList"],"f":[["var",12],[" ",17],["isAttributeList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttributeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCatchItemList"],"f":[["var",12],[" ",17],["isCatchItemList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlockItem"],"f":[["var",12],[" ",17],["isCodeBlockItem",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlockItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExtensionDecl"],"f":[["var",12],[" ",17],["isExtensionDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExtensionDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInheritedType"],"f":[["var",12],[" ",17],["isInheritedType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInheritedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIsTypePattern"],"f":[["var",12],[" ",17],["isIsTypePattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIsTypePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcNamePiece"],"f":[["var",12],[" ",17],["isObjcNamePiece",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcNamePiece",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFileExpr"],"f":[["var",12],[" ",17],["isPoundFileExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFileExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundLineExpr"],"f":[["var",12],[" ",17],["isPoundLineExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundLineExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringSegment"],"f":[["var",12],[" ",17],["isStringSegment",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringSegment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSubscriptDecl"],"f":[["var",12],[" ",17],["isSubscriptDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSubscriptDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSubscriptExpr"],"f":[["var",12],[" ",17],["isSubscriptExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSubscriptExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypealiasDecl"],"f":[["var",12],[" ",17],["isTypealiasDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypealiasDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAssignmentExpr"],"f":[["var",12],[" ",17],["asAssignmentExpr",7],[": ",17],["AssignmentExprSyntax",18,129],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAssignmentExpr",7],[": ",17],["AssignmentExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttributedType"],"f":[["var",12],[" ",17],["asAttributedType",7],[": ",17],["AttributedTypeSyntax",18,131],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttributedType",7],[": ",17],["AttributedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryExpr"],"f":[["var",12],[" ",17],["asDictionaryExpr",7],[": ",17],["DictionaryExprSyntax",18,133],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryExpr",7],[": ",17],["DictionaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryType"],"f":[["var",12],[" ",17],["asDictionaryType",7],[": ",17],["DictionaryTypeSyntax",18,135],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryType",7],[": ",17],["DictionaryTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionStmt"],"f":[["var",12],[" ",17],["asExpressionStmt",7],[": ",17],["ExpressionStmtSyntax",18,137],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionStmt",7],[": ",17],["ExpressionStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierExpr"],"f":[["var",12],[" ",17],["asIdentifierExpr",7],[": ",17],["IdentifierExprSyntax",18,139],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierExpr",7],[": ",17],["IdentifierExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierList"],"f":[["var",12],[" ",17],["asIdentifierList",7],[": ",17],["IdentifierListSyntax",18,141],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierList",7],[": ",17],["IdentifierListSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigClause"],"f":[["var",12],[" ",17],["asIfConfigClause",7],[": ",17],["IfConfigClauseSyntax",18,143],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigClause",7],[": ",17],["IfConfigClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclList"],"f":[["var",12],[" ",17],["asMemberDeclList",7],[": ",17],["MemberDeclListSyntax",18,145],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclList",7],[": ",17],["MemberDeclListSyntax",18],["?",17]]},{"p":["SyntaxNode","asNilLiteralExpr"],"f":[["var",12],[" ",17],["asNilLiteralExpr",7],[": ",17],["NilLiteralExprSyntax",18,147],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNilLiteralExpr",7],[": ",17],["NilLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPatternBinding"],"f":[["var",12],[" ",17],["asPatternBinding",7],[": ",17],["PatternBindingSyntax",18,149],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPatternBinding",7],[": ",17],["PatternBindingSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundErrorDecl"],"f":[["var",12],[" ",17],["asPoundErrorDecl",7],[": ",17],["PoundErrorDeclSyntax",18,151],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundErrorDecl",7],[": ",17],["PoundErrorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSpecializeExpr"],"f":[["var",12],[" ",17],["asSpecializeExpr",7],[": ",17],["SpecializeExprSyntax",18,153],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSpecializeExpr",7],[": ",17],["SpecializeExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCaseList"],"f":[["var",12],[" ",17],["asSwitchCaseList",7],[": ",17],["SwitchCaseListSyntax",18,155],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCaseList",7],[": ",17],["SwitchCaseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeAnnotation"],"f":[["var",12],[" ",17],["asTypeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownPattern"],"f":[["var",12],[" ",17],["asUnknownPattern",7],[": ",17],["UnknownPatternSyntax",18,159],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownPattern",7],[": ",17],["UnknownPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isAssignmentExpr"],"f":[["var",12],[" ",17],["isAssignmentExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAssignmentExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttributedType"],"f":[["var",12],[" ",17],["isAttributedType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttributedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryExpr"],"f":[["var",12],[" ",17],["isDictionaryExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryType"],"f":[["var",12],[" ",17],["isDictionaryType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionStmt"],"f":[["var",12],[" ",17],["isExpressionStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierExpr"],"f":[["var",12],[" ",17],["isIdentifierExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierList"],"f":[["var",12],[" ",17],["isIdentifierList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigClause"],"f":[["var",12],[" ",17],["isIfConfigClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclList"],"f":[["var",12],[" ",17],["isMemberDeclList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNilLiteralExpr"],"f":[["var",12],[" ",17],["isNilLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNilLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPatternBinding"],"f":[["var",12],[" ",17],["isPatternBinding",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPatternBinding",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundErrorDecl"],"f":[["var",12],[" ",17],["isPoundErrorDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundErrorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSpecializeExpr"],"f":[["var",12],[" ",17],["isSpecializeExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSpecializeExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCaseList"],"f":[["var",12],[" ",17],["isSwitchCaseList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCaseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeAnnotation"],"f":[["var",12],[" ",17],["isTypeAnnotation",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeAnnotation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownPattern"],"f":[["var",12],[" ",17],["isUnknownPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCatchClauseList"],"f":[["var",12],[" ",17],["asCatchClauseList",7],[": ",17],["CatchClauseListSyntax",18,160],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchClauseList",7],[": ",17],["CatchClauseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCompositionType"],"f":[["var",12],[" ",17],["asCompositionType",7],[": ",17],["CompositionTypeSyntax",18,162],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionType",7],[": ",17],["CompositionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asCustomAttribute"],"f":[["var",12],[" ",17],["asCustomAttribute",7],[": ",17],["CustomAttributeSyntax",18,164],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCustomAttribute",7],[": ",17],["CustomAttributeSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclarationStmt"],"f":[["var",12],[" ",17],["asDeclarationStmt",7],[": ",17],["DeclarationStmtSyntax",18,166],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclarationStmt",7],[": ",17],["DeclarationStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseElement"],"f":[["var",12],[" ",17],["asEnumCaseElement",7],[": ",17],["EnumCaseElementSyntax",18,168],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseElement",7],[": ",17],["EnumCaseElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCasePattern"],"f":[["var",12],[" ",17],["asEnumCasePattern",7],[": ",17],["EnumCasePatternSyntax",18,170],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCasePattern",7],[": ",17],["EnumCasePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asFallthroughStmt"],"f":[["var",12],[" ",17],["asFallthroughStmt",7],[": ",17],["FallthroughStmtSyntax",18,172],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFallthroughStmt",7],[": ",17],["FallthroughStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asForcedValueExpr"],"f":[["var",12],[" ",17],["asForcedValueExpr",7],[": ",17],["ForcedValueExprSyntax",18,174],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asForcedValueExpr",7],[": ",17],["ForcedValueExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgument"],"f":[["var",12],[" ",17],["asGenericArgument",7],[": ",17],["GenericArgumentSyntax",18,176],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgument",7],[": ",17],["GenericArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asInitializerDecl"],"f":[["var",12],[" ",17],["asInitializerDecl",7],[": ",17],["InitializerDeclSyntax",18,178],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInitializerDecl",7],[": ",17],["InitializerDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asKeyPathBaseExpr"],"f":[["var",12],[" ",17],["asKeyPathBaseExpr",7],[": ",17],["KeyPathBaseExprSyntax",18,180],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyPathBaseExpr",7],[": ",17],["KeyPathBaseExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclBlock"],"f":[["var",12],[" ",17],["asMemberDeclBlock",7],[": ",17],["MemberDeclBlockSyntax",18,182],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclBlock",7],[": ",17],["MemberDeclBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcKeyPathExpr"],"f":[["var",12],[" ",17],["asObjcKeyPathExpr",7],[": ",17],["ObjcKeyPathExprSyntax",18,184],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcKeyPathExpr",7],[": ",17],["ObjcKeyPathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalPattern"],"f":[["var",12],[" ",17],["asOptionalPattern",7],[": ",17],["OptionalPatternSyntax",18,186],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalPattern",7],[": ",17],["OptionalPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asParameterClause"],"f":[["var",12],[" ",17],["asParameterClause",7],[": ",17],["ParameterClauseSyntax",18,188],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asParameterClause",7],[": ",17],["ParameterClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundAssertStmt"],"f":[["var",12],[" ",17],["asPoundAssertStmt",7],[": ",17],["PoundAssertStmtSyntax",18,190],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundAssertStmt",7],[": ",17],["PoundAssertStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundColumnExpr"],"f":[["var",12],[" ",17],["asPoundColumnExpr",7],[": ",17],["PoundColumnExprSyntax",18,192],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundColumnExpr",7],[": ",17],["PoundColumnExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFileIDExpr"],"f":[["var",12],[" ",17],["asPoundFileIDExpr",7],[": ",17],["PoundFileIDExprSyntax",18,194],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFileIDExpr",7],[": ",17],["PoundFileIDExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asRepeatWhileStmt"],"f":[["var",12],[" ",17],["asRepeatWhileStmt",7],[": ",17],["RepeatWhileStmtSyntax",18,196],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asRepeatWhileStmt",7],[": ",17],["RepeatWhileStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCaseLabel"],"f":[["var",12],[" ",17],["asSwitchCaseLabel",7],[": ",17],["SwitchCaseLabelSyntax",18,198],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCaseLabel",7],[": ",17],["SwitchCaseLabelSyntax",18],["?",17]]},{"p":["SyntaxNode","asWildcardPattern"],"f":[["var",12],[" ",17],["asWildcardPattern",7],[": ",17],["WildcardPatternSyntax",18,200],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWildcardPattern",7],[": ",17],["WildcardPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isCatchClauseList"],"f":[["var",12],[" ",17],["isCatchClauseList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchClauseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCompositionType"],"f":[["var",12],[" ",17],["isCompositionType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCustomAttribute"],"f":[["var",12],[" ",17],["isCustomAttribute",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCustomAttribute",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclarationStmt"],"f":[["var",12],[" ",17],["isDeclarationStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclarationStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseElement"],"f":[["var",12],[" ",17],["isEnumCaseElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCasePattern"],"f":[["var",12],[" ",17],["isEnumCasePattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCasePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFallthroughStmt"],"f":[["var",12],[" ",17],["isFallthroughStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFallthroughStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isForcedValueExpr"],"f":[["var",12],[" ",17],["isForcedValueExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isForcedValueExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgument"],"f":[["var",12],[" ",17],["isGenericArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInitializerDecl"],"f":[["var",12],[" ",17],["isInitializerDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInitializerDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isKeyPathBaseExpr"],"f":[["var",12],[" ",17],["isKeyPathBaseExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyPathBaseExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclBlock"],"f":[["var",12],[" ",17],["isMemberDeclBlock",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcKeyPathExpr"],"f":[["var",12],[" ",17],["isObjcKeyPathExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcKeyPathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalPattern"],"f":[["var",12],[" ",17],["isOptionalPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isParameterClause"],"f":[["var",12],[" ",17],["isParameterClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isParameterClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundAssertStmt"],"f":[["var",12],[" ",17],["isPoundAssertStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundAssertStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundColumnExpr"],"f":[["var",12],[" ",17],["isPoundColumnExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundColumnExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFileIDExpr"],"f":[["var",12],[" ",17],["isPoundFileIDExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFileIDExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isRepeatWhileStmt"],"f":[["var",12],[" ",17],["isRepeatWhileStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isRepeatWhileStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCaseLabel"],"f":[["var",12],[" ",17],["isSwitchCaseLabel",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCaseLabel",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWildcardPattern"],"f":[["var",12],[" ",17],["isWildcardPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWildcardPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asArrayElementList"],"f":[["var",12],[" ",17],["asArrayElementList",7],[": ",17],["ArrayElementListSyntax",18,202],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayElementList",7],[": ",17],["ArrayElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureParamList"],"f":[["var",12],[" ",17],["asClosureParamList",7],[": ",17],["ClosureParamListSyntax",18,204],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureParamList",7],[": ",17],["ClosureParamListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureSignature"],"f":[["var",12],[" ",17],["asClosureSignature",7],[": ",17],["ClosureSignatureSyntax",18,206],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureSignature",7],[": ",17],["ClosureSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asConditionElement"],"f":[["var",12],[" ",17],["asConditionElement",7],[": ",17],["ConditionElementSyntax",18,208],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConditionElement",7],[": ",17],["ConditionElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArgument"],"f":[["var",12],[" ",17],["asDeclNameArgument",7],[": ",17],["DeclNameArgumentSyntax",18,210],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArgument",7],[": ",17],["DeclNameArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asFloatLiteralExpr"],"f":[["var",12],[" ",17],["asFloatLiteralExpr",7],[": ",17],["FloatLiteralExprSyntax",18,212],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFloatLiteralExpr",7],[": ",17],["FloatLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionCallExpr"],"f":[["var",12],[" ",17],["asFunctionCallExpr",7],[": ",17],["FunctionCallExprSyntax",18,214],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionCallExpr",7],[": ",17],["FunctionCallExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionDeclName"],"f":[["var",12],[" ",17],["asFunctionDeclName",7],[": ",17],["FunctionDeclNameSyntax",18,216],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionDeclName",7],[": ",17],["FunctionDeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameter"],"f":[["var",12],[" ",17],["asGenericParameter",7],[": ",17],["GenericParameterSyntax",18,218],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameter",7],[": ",17],["GenericParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberAccessExpr"],"f":[["var",12],[" ",17],["asMemberAccessExpr",7],[": ",17],["MemberAccessExprSyntax",18,220],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberAccessExpr",7],[": ",17],["MemberAccessExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcSelectorExpr"],"f":[["var",12],[" ",17],["asObjcSelectorExpr",7],[": ",17],["ObjcSelectorExprSyntax",18,222],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcSelectorExpr",7],[": ",17],["ObjcSelectorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPostfixUnaryExpr"],"f":[["var",12],[" ",17],["asPostfixUnaryExpr",7],[": ",17],["PostfixUnaryExprSyntax",18,224],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPostfixUnaryExpr",7],[": ",17],["PostfixUnaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundWarningDecl"],"f":[["var",12],[" ",17],["asPoundWarningDecl",7],[": ",17],["PoundWarningDeclSyntax",18,226],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundWarningDecl",7],[": ",17],["PoundWarningDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asRegexLiteralExpr"],"f":[["var",12],[" ",17],["asRegexLiteralExpr",7],[": ",17],["RegexLiteralExprSyntax",18,228],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asRegexLiteralExpr",7],[": ",17],["RegexLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExprElement"],"f":[["var",12],[" ",17],["asTupleExprElement",7],[": ",17],["TupleExprElementSyntax",18,230],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExprElement",7],[": ",17],["TupleExprElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleTypeElement"],"f":[["var",12],[" ",17],["asTupleTypeElement",7],[": ",17],["TupleTypeElementSyntax",18,232],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleTypeElement",7],[": ",17],["TupleTypeElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isArrayElementList"],"f":[["var",12],[" ",17],["isArrayElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureParamList"],"f":[["var",12],[" ",17],["isClosureParamList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureParamList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureSignature"],"f":[["var",12],[" ",17],["isClosureSignature",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConditionElement"],"f":[["var",12],[" ",17],["isConditionElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConditionElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArgument"],"f":[["var",12],[" ",17],["isDeclNameArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFloatLiteralExpr"],"f":[["var",12],[" ",17],["isFloatLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFloatLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionCallExpr"],"f":[["var",12],[" ",17],["isFunctionCallExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionCallExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionDeclName"],"f":[["var",12],[" ",17],["isFunctionDeclName",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameter"],"f":[["var",12],[" ",17],["isGenericParameter",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberAccessExpr"],"f":[["var",12],[" ",17],["isMemberAccessExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberAccessExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcSelectorExpr"],"f":[["var",12],[" ",17],["isObjcSelectorExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcSelectorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPostfixUnaryExpr"],"f":[["var",12],[" ",17],["isPostfixUnaryExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPostfixUnaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundWarningDecl"],"f":[["var",12],[" ",17],["isPoundWarningDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundWarningDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isRegexLiteralExpr"],"f":[["var",12],[" ",17],["isRegexLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isRegexLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExprElement"],"f":[["var",12],[" ",17],["isTupleExprElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExprElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleTypeElement"],"f":[["var",12],[" ",17],["isTupleTypeElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleTypeElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorParameter"],"f":[["var",12],[" ",17],["asAccessorParameter",7],[": ",17],["AccessorParameterSyntax",18,234],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorParameter",7],[": ",17],["AccessorParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asAvailabilityEntry"],"f":[["var",12],[" ",17],["asAvailabilityEntry",7],[": ",17],["AvailabilityEntrySyntax",18,236],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityEntry",7],[": ",17],["AvailabilityEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlockItemList"],"f":[["var",12],[" ",17],["asCodeBlockItemList",7],[": ",17],["CodeBlockItemListSyntax",18,238],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlockItemList",7],[": ",17],["CodeBlockItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArguments"],"f":[["var",12],[" ",17],["asDeclNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeinitializerDecl"],"f":[["var",12],[" ",17],["asDeinitializerDecl",7],[": ",17],["DeinitializerDeclSyntax",18,242],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeinitializerDecl",7],[": ",17],["DeinitializerDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryElement"],"f":[["var",12],[" ",17],["asDictionaryElement",7],[": ",17],["DictionaryElementSyntax",18,244],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryElement",7],[": ",17],["DictionaryElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionPattern"],"f":[["var",12],[" ",17],["asExpressionPattern",7],[": ",17],["ExpressionPatternSyntax",18,246],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionPattern",7],[": ",17],["ExpressionPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionSegment"],"f":[["var",12],[" ",17],["asExpressionSegment",7],[": ",17],["ExpressionSegmentSyntax",18,248],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionSegment",7],[": ",17],["ExpressionSegmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionParameter"],"f":[["var",12],[" ",17],["asFunctionParameter",7],[": ",17],["FunctionParameterSyntax",18,250],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionParameter",7],[": ",17],["FunctionParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionSignature"],"f":[["var",12],[" ",17],["asFunctionSignature",7],[": ",17],["FunctionSignatureSyntax",18,252],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionSignature",7],[": ",17],["FunctionSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierPattern"],"f":[["var",12],[" ",17],["asIdentifierPattern",7],[": ",17],["IdentifierPatternSyntax",18,254],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierPattern",7],[": ",17],["IdentifierPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asInheritedTypeList"],"f":[["var",12],[" ",17],["asInheritedTypeList",7],[": ",17],["InheritedTypeListSyntax",18,256],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInheritedTypeList",7],[": ",17],["InheritedTypeListSyntax",18],["?",17]]},{"p":["SyntaxNode","asInitializerClause"],"f":[["var",12],[" ",17],["asInitializerClause",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInitializerClause",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asNonEmptyTokenList"],"f":[["var",12],[" ",17],["asNonEmptyTokenList",7],[": ",17],["NonEmptyTokenListSyntax",18,260],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNonEmptyTokenList",7],[": ",17],["NonEmptyTokenListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjCSelectorPiece"],"f":[["var",12],[" ",17],["asObjCSelectorPiece",7],[": ",17],["ObjCSelectorPieceSyntax",18,262],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjCSelectorPiece",7],[": ",17],["ObjCSelectorPieceSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjectLiteralExpr"],"f":[["var",12],[" ",17],["asObjectLiteralExpr",7],[": ",17],["ObjectLiteralExprSyntax",18,264],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjectLiteralExpr",7],[": ",17],["ObjectLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFilePathExpr"],"f":[["var",12],[" ",17],["asPoundFilePathExpr",7],[": ",17],["PoundFilePathExprSyntax",18,266],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFilePathExpr",7],[": ",17],["PoundFilePathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFunctionExpr"],"f":[["var",12],[" ",17],["asPoundFunctionExpr",7],[": ",17],["PoundFunctionExprSyntax",18,268],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFunctionExpr",7],[": ",17],["PoundFunctionExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asQualifiedDeclName"],"f":[["var",12],[" ",17],["asQualifiedDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18,270],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asQualifiedDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringLiteralExpr"],"f":[["var",12],[" ",17],["asStringLiteralExpr",7],[": ",17],["StringLiteralExprSyntax",18,272],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringLiteralExpr",7],[": ",17],["StringLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorParameter"],"f":[["var",12],[" ",17],["isAccessorParameter",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAvailabilityEntry"],"f":[["var",12],[" ",17],["isAvailabilityEntry",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlockItemList"],"f":[["var",12],[" ",17],["isCodeBlockItemList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlockItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArguments"],"f":[["var",12],[" ",17],["isDeclNameArguments",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeinitializerDecl"],"f":[["var",12],[" ",17],["isDeinitializerDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeinitializerDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryElement"],"f":[["var",12],[" ",17],["isDictionaryElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionPattern"],"f":[["var",12],[" ",17],["isExpressionPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionSegment"],"f":[["var",12],[" ",17],["isExpressionSegment",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionSegment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionParameter"],"f":[["var",12],[" ",17],["isFunctionParameter",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionSignature"],"f":[["var",12],[" ",17],["isFunctionSignature",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierPattern"],"f":[["var",12],[" ",17],["isIdentifierPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInheritedTypeList"],"f":[["var",12],[" ",17],["isInheritedTypeList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInheritedTypeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInitializerClause"],"f":[["var",12],[" ",17],["isInitializerClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInitializerClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNonEmptyTokenList"],"f":[["var",12],[" ",17],["isNonEmptyTokenList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNonEmptyTokenList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjCSelectorPiece"],"f":[["var",12],[" ",17],["isObjCSelectorPiece",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjCSelectorPiece",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjectLiteralExpr"],"f":[["var",12],[" ",17],["isObjectLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjectLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFilePathExpr"],"f":[["var",12],[" ",17],["isPoundFilePathExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFilePathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFunctionExpr"],"f":[["var",12],[" ",17],["isPoundFunctionExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFunctionExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isQualifiedDeclName"],"f":[["var",12],[" ",17],["isQualifiedDeclName",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isQualifiedDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringLiteralExpr"],"f":[["var",12],[" ",17],["isStringLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAssociatedtypeDecl"],"f":[["var",12],[" ",17],["asAssociatedtypeDecl",7],[": ",17],["AssociatedtypeDeclSyntax",18,274],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAssociatedtypeDecl",7],[": ",17],["AssociatedtypeDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asBinaryOperatorExpr"],"f":[["var",12],[" ",17],["asBinaryOperatorExpr",7],[": ",17],["BinaryOperatorExprSyntax",18,276],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBinaryOperatorExpr",7],[": ",17],["BinaryOperatorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asBooleanLiteralExpr"],"f":[["var",12],[" ",17],["asBooleanLiteralExpr",7],[": ",17],["BooleanLiteralExprSyntax",18,278],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBooleanLiteralExpr",7],[": ",17],["BooleanLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureCaptureItem"],"f":[["var",12],[" ",17],["asClosureCaptureItem",7],[": ",17],["ClosureCaptureItemSyntax",18,280],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureItem",7],[": ",17],["ClosureCaptureItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asElseIfContinuation"],"f":[["var",12],[" ",17],["asElseIfContinuation",7],[": ",17],["ElseIfContinuationSyntax",18,282],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asElseIfContinuation",7],[": ",17],["ElseIfContinuationSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericRequirement"],"f":[["var",12],[" ",17],["asGenericRequirement",7],[": ",17],["GenericRequirementSyntax",18,284],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericRequirement",7],[": ",17],["GenericRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericWhereClause"],"f":[["var",12],[" ",17],["asGenericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigClauseList"],"f":[["var",12],[" ",17],["asIfConfigClauseList",7],[": ",17],["IfConfigClauseListSyntax",18,288],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigClauseList",7],[": ",17],["IfConfigClauseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asIntegerLiteralExpr"],"f":[["var",12],[" ",17],["asIntegerLiteralExpr",7],[": ",17],["IntegerLiteralExprSyntax",18,290],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIntegerLiteralExpr",7],[": ",17],["IntegerLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclListItem"],"f":[["var",12],[" ",17],["asMemberDeclListItem",7],[": ",17],["MemberDeclListItemSyntax",18,292],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclListItem",7],[": ",17],["MemberDeclListItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asPatternBindingList"],"f":[["var",12],[" ",17],["asPatternBindingList",7],[": ",17],["PatternBindingListSyntax",18,294],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPatternBindingList",7],[": ",17],["PatternBindingListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundDsohandleExpr"],"f":[["var",12],[" ",17],["asPoundDsohandleExpr",7],[": ",17],["PoundDsohandleExprSyntax",18,296],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundDsohandleExpr",7],[": ",17],["PoundDsohandleExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrefixOperatorExpr"],"f":[["var",12],[" ",17],["asPrefixOperatorExpr",7],[": ",17],["PrefixOperatorExprSyntax",18,298],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrefixOperatorExpr",7],[": ",17],["PrefixOperatorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchDefaultLabel"],"f":[["var",12],[" ",17],["asSwitchDefaultLabel",7],[": ",17],["SwitchDefaultLabelSyntax",18,300],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchDefaultLabel",7],[": ",17],["SwitchDefaultLabelSyntax",18],["?",17]]},{"p":["SyntaxNode","isAssociatedtypeDecl"],"f":[["var",12],[" ",17],["isAssociatedtypeDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAssociatedtypeDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBinaryOperatorExpr"],"f":[["var",12],[" ",17],["isBinaryOperatorExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBinaryOperatorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBooleanLiteralExpr"],"f":[["var",12],[" ",17],["isBooleanLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBooleanLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureCaptureItem"],"f":[["var",12],[" ",17],["isClosureCaptureItem",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isElseIfContinuation"],"f":[["var",12],[" ",17],["isElseIfContinuation",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isElseIfContinuation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericRequirement"],"f":[["var",12],[" ",17],["isGenericRequirement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericWhereClause"],"f":[["var",12],[" ",17],["isGenericWhereClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericWhereClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigClauseList"],"f":[["var",12],[" ",17],["isIfConfigClauseList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigClauseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIntegerLiteralExpr"],"f":[["var",12],[" ",17],["isIntegerLiteralExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIntegerLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclListItem"],"f":[["var",12],[" ",17],["isMemberDeclListItem",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclListItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPatternBindingList"],"f":[["var",12],[" ",17],["isPatternBindingList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPatternBindingList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundDsohandleExpr"],"f":[["var",12],[" ",17],["isPoundDsohandleExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundDsohandleExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrefixOperatorExpr"],"f":[["var",12],[" ",17],["isPrefixOperatorExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrefixOperatorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchDefaultLabel"],"f":[["var",12],[" ",17],["isSwitchDefaultLabel",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchDefaultLabel",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessLevelModifier"],"f":[["var",12],[" ",17],["asAccessLevelModifier",7],[": ",17],["AccessLevelModifierSyntax",18,302],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessLevelModifier",7],[": ",17],["AccessLevelModifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asAccessPathComponent"],"f":[["var",12],[" ",17],["asAccessPathComponent",7],[": ",17],["AccessPathComponentSyntax",18,304],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessPathComponent",7],[": ",17],["AccessPathComponentSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseElementList"],"f":[["var",12],[" ",17],["asEnumCaseElementList",7],[": ",17],["EnumCaseElementListSyntax",18,306],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseElementList",7],[": ",17],["EnumCaseElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgumentList"],"f":[["var",12],[" ",17],["asGenericArgumentList",7],[": ",17],["GenericArgumentListSyntax",18,308],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgumentList",7],[": ",17],["GenericArgumentListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPostfixIfConfigExpr"],"f":[["var",12],[" ",17],["asPostfixIfConfigExpr",7],[": ",17],["PostfixIfConfigExprSyntax",18,310],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPostfixIfConfigExpr",7],[": ",17],["PostfixIfConfigExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundSourceLocation"],"f":[["var",12],[" ",17],["asPoundSourceLocation",7],[": ",17],["PoundSourceLocationSyntax",18,312],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundSourceLocation",7],[": ",17],["PoundSourceLocationSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupDecl"],"f":[["var",12],[" ",17],["asPrecedenceGroupDecl",7],[": ",17],["PrecedenceGroupDeclSyntax",18,314],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupDecl",7],[": ",17],["PrecedenceGroupDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSameTypeRequirement"],"f":[["var",12],[" ",17],["asSameTypeRequirement",7],[": ",17],["SameTypeRequirementSyntax",18,316],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSameTypeRequirement",7],[": ",17],["SameTypeRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asTargetFunctionEntry"],"f":[["var",12],[" ",17],["asTargetFunctionEntry",7],[": ",17],["TargetFunctionEntrySyntax",18,318],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTargetFunctionEntry",7],[": ",17],["TargetFunctionEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePatternElement"],"f":[["var",12],[" ",17],["asTuplePatternElement",7],[": ",17],["TuplePatternElementSyntax",18,320],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePatternElement",7],[": ",17],["TuplePatternElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asValueBindingPattern"],"f":[["var",12],[" ",17],["asValueBindingPattern",7],[": ",17],["ValueBindingPatternSyntax",18,322],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asValueBindingPattern",7],[": ",17],["ValueBindingPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessLevelModifier"],"f":[["var",12],[" ",17],["isAccessLevelModifier",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessLevelModifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAccessPathComponent"],"f":[["var",12],[" ",17],["isAccessPathComponent",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessPathComponent",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseElementList"],"f":[["var",12],[" ",17],["isEnumCaseElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgumentList"],"f":[["var",12],[" ",17],["isGenericArgumentList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgumentList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPostfixIfConfigExpr"],"f":[["var",12],[" ",17],["isPostfixIfConfigExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPostfixIfConfigExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundSourceLocation"],"f":[["var",12],[" ",17],["isPoundSourceLocation",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundSourceLocation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupDecl"],"f":[["var",12],[" ",17],["isPrecedenceGroupDecl",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSameTypeRequirement"],"f":[["var",12],[" ",17],["isSameTypeRequirement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSameTypeRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTargetFunctionEntry"],"f":[["var",12],[" ",17],["isTargetFunctionEntry",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTargetFunctionEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePatternElement"],"f":[["var",12],[" ",17],["isTuplePatternElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePatternElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isValueBindingPattern"],"f":[["var",12],[" ",17],["isValueBindingPattern",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isValueBindingPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityArgument"],"f":[["var",12],[" ",17],["asAvailabilityArgument",7],[": ",17],["AvailabilityArgumentSyntax",18,324],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityArgument",7],[": ",17],["AvailabilityArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asAvailabilitySpecList"],"f":[["var",12],[" ",17],["asAvailabilitySpecList",7],[": ",17],["AvailabilitySpecListSyntax",18,326],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilitySpecList",7],[": ",17],["AvailabilitySpecListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClassRestrictionType"],"f":[["var",12],[" ",17],["asClassRestrictionType",7],[": ",17],["ClassRestrictionTypeSyntax",18,328],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClassRestrictionType",7],[": ",17],["ClassRestrictionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asConditionElementList"],"f":[["var",12],[" ",17],["asConditionElementList",7],[": ",17],["ConditionElementListSyntax",18,330],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConditionElementList",7],[": ",17],["ConditionElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asConstrainedSugarType"],"f":[["var",12],[" ",17],["asConstrainedSugarType",7],[": ",17],["ConstrainedSugarTypeSyntax",18,332],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConstrainedSugarType",7],[": ",17],["ConstrainedSugarTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArgumentList"],"f":[["var",12],[" ",17],["asDeclNameArgumentList",7],[": ",17],["DeclNameArgumentListSyntax",18,334],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArgumentList",7],[": ",17],["DeclNameArgumentListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameterList"],"f":[["var",12],[" ",17],["asGenericParameterList",7],[": ",17],["GenericParameterListSyntax",18,336],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameterList",7],[": ",17],["GenericParameterListSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberTypeIdentifier"],"f":[["var",12],[" ",17],["asMemberTypeIdentifier",7],[": ",17],["MemberTypeIdentifierSyntax",18,338],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberTypeIdentifier",7],[": ",17],["MemberTypeIdentifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalChainingExpr"],"f":[["var",12],[" ",17],["asOptionalChainingExpr",7],[": ",17],["OptionalChainingExprSyntax",18,340],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalChainingExpr",7],[": ",17],["OptionalChainingExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSimpleTypeIdentifier"],"f":[["var",12],[" ",17],["asSimpleTypeIdentifier",7],[": ",17],["SimpleTypeIdentifierSyntax",18,342],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSimpleTypeIdentifier",7],[": ",17],["SimpleTypeIdentifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExprElementList"],"f":[["var",12],[" ",17],["asTupleExprElementList",7],[": ",17],["TupleExprElementListSyntax",18,344],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExprElementList",7],[": ",17],["TupleExprElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleTypeElementList"],"f":[["var",12],[" ",17],["asTupleTypeElementList",7],[": ",17],["TupleTypeElementListSyntax",18,346],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleTypeElementList",7],[": ",17],["TupleTypeElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityArgument"],"f":[["var",12],[" ",17],["isAvailabilityArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAvailabilitySpecList"],"f":[["var",12],[" ",17],["isAvailabilitySpecList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilitySpecList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClassRestrictionType"],"f":[["var",12],[" ",17],["isClassRestrictionType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClassRestrictionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConditionElementList"],"f":[["var",12],[" ",17],["isConditionElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConditionElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConstrainedSugarType"],"f":[["var",12],[" ",17],["isConstrainedSugarType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConstrainedSugarType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArgumentList"],"f":[["var",12],[" ",17],["isDeclNameArgumentList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArgumentList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameterList"],"f":[["var",12],[" ",17],["isGenericParameterList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameterList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberTypeIdentifier"],"f":[["var",12],[" ",17],["isMemberTypeIdentifier",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberTypeIdentifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalChainingExpr"],"f":[["var",12],[" ",17],["isOptionalChainingExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalChainingExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSimpleTypeIdentifier"],"f":[["var",12],[" ",17],["isSimpleTypeIdentifier",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSimpleTypeIdentifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExprElementList"],"f":[["var",12],[" ",17],["isTupleExprElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExprElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleTypeElementList"],"f":[["var",12],[" ",17],["isTupleTypeElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleTypeElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityCondition"],"f":[["var",12],[" ",17],["asAvailabilityCondition",7],[": ",17],["AvailabilityConditionSyntax",18,348],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityCondition",7],[": ",17],["AvailabilityConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","asBackDeployVersionList"],"f":[["var",12],[" ",17],["asBackDeployVersionList",7],[": ",17],["BackDeployVersionListSyntax",18,350],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBackDeployVersionList",7],[": ",17],["BackDeployVersionListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryElementList"],"f":[["var",12],[" ",17],["asDictionaryElementList",7],[": ",17],["DictionaryElementListSyntax",18,352],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryElementList",7],[": ",17],["DictionaryElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDiscardAssignmentExpr"],"f":[["var",12],[" ",17],["asDiscardAssignmentExpr",7],[": ",17],["DiscardAssignmentExprSyntax",18,354],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDiscardAssignmentExpr",7],[": ",17],["DiscardAssignmentExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asEditorPlaceholderExpr"],"f":[["var",12],[" ",17],["asEditorPlaceholderExpr",7],[": ",17],["EditorPlaceholderExprSyntax",18,356],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEditorPlaceholderExpr",7],[": ",17],["EditorPlaceholderExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionParameterList"],"f":[["var",12],[" ",17],["asFunctionParameterList",7],[": ",17],["FunctionParameterListSyntax",18,358],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionParameterList",7],[": ",17],["FunctionParameterListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgumentClause"],"f":[["var",12],[" ",17],["asGenericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,360],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrimaryAssociatedType"],"f":[["var",12],[" ",17],["asPrimaryAssociatedType",7],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrimaryAssociatedType",7],[": ",17],["PrimaryAssociatedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringLiteralSegments"],"f":[["var",12],[" ",17],["asStringLiteralSegments",7],[": ",17],["StringLiteralSegmentsSyntax",18,364],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringLiteralSegments",7],[": ",17],["StringLiteralSegmentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asSymbolicReferenceExpr"],"f":[["var",12],[" ",17],["asSymbolicReferenceExpr",7],[": ",17],["SymbolicReferenceExprSyntax",18,366],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSymbolicReferenceExpr",7],[": ",17],["SymbolicReferenceExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeInheritanceClause"],"f":[["var",12],[" ",17],["asTypeInheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,368],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeInheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeInitializerClause"],"f":[["var",12],[" ",17],["asTypeInitializerClause",7],[": ",17],["TypeInitializerClauseSyntax",18,370],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeInitializerClause",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnresolvedPatternExpr"],"f":[["var",12],[" ",17],["asUnresolvedPatternExpr",7],[": ",17],["UnresolvedPatternExprSyntax",18,372],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnresolvedPatternExpr",7],[": ",17],["UnresolvedPatternExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityCondition"],"f":[["var",12],[" ",17],["isAvailabilityCondition",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBackDeployVersionList"],"f":[["var",12],[" ",17],["isBackDeployVersionList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBackDeployVersionList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryElementList"],"f":[["var",12],[" ",17],["isDictionaryElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDiscardAssignmentExpr"],"f":[["var",12],[" ",17],["isDiscardAssignmentExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDiscardAssignmentExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEditorPlaceholderExpr"],"f":[["var",12],[" ",17],["isEditorPlaceholderExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEditorPlaceholderExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionParameterList"],"f":[["var",12],[" ",17],["isFunctionParameterList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionParameterList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgumentClause"],"f":[["var",12],[" ",17],["isGenericArgumentClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgumentClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrimaryAssociatedType"],"f":[["var",12],[" ",17],["isPrimaryAssociatedType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrimaryAssociatedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringLiteralSegments"],"f":[["var",12],[" ",17],["isStringLiteralSegments",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringLiteralSegments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSymbolicReferenceExpr"],"f":[["var",12],[" ",17],["isSymbolicReferenceExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSymbolicReferenceExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeInheritanceClause"],"f":[["var",12],[" ",17],["isTypeInheritanceClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeInheritanceClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeInitializerClause"],"f":[["var",12],[" ",17],["isTypeInitializerClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeInitializerClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnresolvedPatternExpr"],"f":[["var",12],[" ",17],["isUnresolvedPatternExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnresolvedPatternExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asClosureCaptureItemList"],"f":[["var",12],[" ",17],["asClosureCaptureItemList",7],[": ",17],["ClosureCaptureItemListSyntax",18,374],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureItemList",7],[": ",17],["ClosureCaptureItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCompositionTypeElement"],"f":[["var",12],[" ",17],["asCompositionTypeElement",7],[": ",17],["CompositionTypeElementSyntax",18,376],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionTypeElement",7],[": ",17],["CompositionTypeElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asConformanceRequirement"],"f":[["var",12],[" ",17],["asConformanceRequirement",7],[": ",17],["ConformanceRequirementSyntax",18,378],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConformanceRequirement",7],[": ",17],["ConformanceRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParam"],"f":[["var",12],[" ",17],["asDifferentiabilityParam",7],[": ",17],["DifferentiabilityParamSyntax",18,380],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParam",7],[": ",17],["DifferentiabilityParamSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameterClause"],"f":[["var",12],[" ",17],["asGenericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,382],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericRequirementList"],"f":[["var",12],[" ",17],["asGenericRequirementList",7],[": ",17],["GenericRequirementListSyntax",18,384],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericRequirementList",7],[": ",17],["GenericRequirementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asLabeledSpecializeEntry"],"f":[["var",12],[" ",17],["asLabeledSpecializeEntry",7],[": ",17],["LabeledSpecializeEntrySyntax",18,386],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asLabeledSpecializeEntry",7],[": ",17],["LabeledSpecializeEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","isClosureCaptureItemList"],"f":[["var",12],[" ",17],["isClosureCaptureItemList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCompositionTypeElement"],"f":[["var",12],[" ",17],["isCompositionTypeElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionTypeElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConformanceRequirement"],"f":[["var",12],[" ",17],["isConformanceRequirement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConformanceRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParam"],"f":[["var",12],[" ",17],["isDifferentiabilityParam",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParam",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameterClause"],"f":[["var",12],[" ",17],["isGenericParameterClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameterClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericRequirementList"],"f":[["var",12],[" ",17],["isGenericRequirementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericRequirementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isLabeledSpecializeEntry"],"f":[["var",12],[" ",17],["isLabeledSpecializeEntry",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isLabeledSpecializeEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asClosureCaptureSignature"],"f":[["var",12],[" ",17],["asClosureCaptureSignature",7],[": ",17],["ClosureCaptureSignatureSyntax",18,388],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureSignature",7],[": ",17],["ClosureCaptureSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParams"],"f":[["var",12],[" ",17],["asDifferentiabilityParams",7],[": ",17],["DifferentiabilityParamsSyntax",18,390],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParams",7],[": ",17],["DifferentiabilityParamsSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundSourceLocationArgs"],"f":[["var",12],[" ",17],["asPoundSourceLocationArgs",7],[": ",17],["PoundSourceLocationArgsSyntax",18,392],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundSourceLocationArgs",7],[": ",17],["PoundSourceLocationArgsSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupNameList"],"f":[["var",12],[" ",17],["asPrecedenceGroupNameList",7],[": ",17],["PrecedenceGroupNameListSyntax",18,394],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupNameList",7],[": ",17],["PrecedenceGroupNameListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupRelation"],"f":[["var",12],[" ",17],["asPrecedenceGroupRelation",7],[": ",17],["PrecedenceGroupRelationSyntax",18,396],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupRelation",7],[": ",17],["PrecedenceGroupRelationSyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePatternElementList"],"f":[["var",12],[" ",17],["asTuplePatternElementList",7],[": ",17],["TuplePatternElementListSyntax",18,398],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePatternElementList",7],[": ",17],["TuplePatternElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnavailabilityCondition"],"f":[["var",12],[" ",17],["asUnavailabilityCondition",7],[": ",17],["UnavailabilityConditionSyntax",18,400],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnavailabilityCondition",7],[": ",17],["UnavailabilityConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","isClosureCaptureSignature"],"f":[["var",12],[" ",17],["isClosureCaptureSignature",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParams"],"f":[["var",12],[" ",17],["isDifferentiabilityParams",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParams",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundSourceLocationArgs"],"f":[["var",12],[" ",17],["isPoundSourceLocationArgs",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundSourceLocationArgs",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupNameList"],"f":[["var",12],[" ",17],["isPrecedenceGroupNameList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupNameList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupRelation"],"f":[["var",12],[" ",17],["isPrecedenceGroupRelation",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupRelation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePatternElementList"],"f":[["var",12],[" ",17],["isTuplePatternElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePatternElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnavailabilityCondition"],"f":[["var",12],[" ",17],["isUnavailabilityCondition",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnavailabilityCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asMatchingPatternCondition"],"f":[["var",12],[" ",17],["asMatchingPatternCondition",7],[": ",17],["MatchingPatternConditionSyntax",18,402],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMatchingPatternCondition",7],[": ",17],["MatchingPatternConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalBindingCondition"],"f":[["var",12],[" ",17],["asOptionalBindingCondition",7],[": ",17],["OptionalBindingConditionSyntax",18,404],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalBindingCondition",7],[": ",17],["OptionalBindingConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","isMatchingPatternCondition"],"f":[["var",12],[" ",17],["isMatchingPatternCondition",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMatchingPatternCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalBindingCondition"],"f":[["var",12],[" ",17],["isOptionalBindingCondition",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalBindingCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asBackDeployVersionArgument"],"f":[["var",12],[" ",17],["asBackDeployVersionArgument",7],[": ",17],["BackDeployVersionArgumentSyntax",18,406],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBackDeployVersionArgument",7],[": ",17],["BackDeployVersionArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupAssignment"],"f":[["var",12],[" ",17],["asPrecedenceGroupAssignment",7],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAssignment",7],[": ",17],["PrecedenceGroupAssignmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrimaryAssociatedTypeList"],"f":[["var",12],[" ",17],["asPrimaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrimaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18],["?",17]]},{"p":["SyntaxNode","isBackDeployVersionArgument"],"f":[["var",12],[" ",17],["isBackDeployVersionArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBackDeployVersionArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupAssignment"],"f":[["var",12],[" ",17],["isPrecedenceGroupAssignment",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAssignment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrimaryAssociatedTypeList"],"f":[["var",12],[" ",17],["isPrimaryAssociatedTypeList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrimaryAssociatedTypeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCompositionTypeElementList"],"f":[["var",12],[" ",17],["asCompositionTypeElementList",7],[": ",17],["CompositionTypeElementListSyntax",18,412],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionTypeElementList",7],[": ",17],["CompositionTypeElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParamList"],"f":[["var",12],[" ",17],["asDifferentiabilityParamList",7],[": ",17],["DifferentiabilityParamListSyntax",18,414],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParamList",7],[": ",17],["DifferentiabilityParamListSyntax",18],["?",17]]},{"p":["SyntaxNode","asOperatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["asOperatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOperatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupNameElement"],"f":[["var",12],[" ",17],["asPrecedenceGroupNameElement",7],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupNameElement",7],[": ",17],["PrecedenceGroupNameElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isCompositionTypeElementList"],"f":[["var",12],[" ",17],["isCompositionTypeElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionTypeElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParamList"],"f":[["var",12],[" ",17],["isDifferentiabilityParamList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParamList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOperatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["isOperatorPrecedenceAndTypes",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOperatorPrecedenceAndTypes",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupNameElement"],"f":[["var",12],[" ",17],["isPrecedenceGroupNameElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupNameElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityLabeledArgument"],"f":[["var",12],[" ",17],["asAvailabilityLabeledArgument",7],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityLabeledArgument",7],[": ",17],["AvailabilityLabeledArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asBackDeployAttributeSpecList"],"f":[["var",12],[" ",17],["asBackDeployAttributeSpecList",7],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBackDeployAttributeSpecList",7],[": ",17],["BackDeployAttributeSpecListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrimaryAssociatedTypeClause"],"f":[["var",12],[" ",17],["asPrimaryAssociatedTypeClause",7],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrimaryAssociatedTypeClause",7],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asSpecializeAttributeSpecList"],"f":[["var",12],[" ",17],["asSpecializeAttributeSpecList",7],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSpecializeAttributeSpecList",7],[": ",17],["SpecializeAttributeSpecListSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityLabeledArgument"],"f":[["var",12],[" ",17],["isAvailabilityLabeledArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityLabeledArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBackDeployAttributeSpecList"],"f":[["var",12],[" ",17],["isBackDeployAttributeSpecList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBackDeployAttributeSpecList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrimaryAssociatedTypeClause"],"f":[["var",12],[" ",17],["isPrimaryAssociatedTypeClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrimaryAssociatedTypeClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSpecializeAttributeSpecList"],"f":[["var",12],[" ",17],["isSpecializeAttributeSpecList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSpecializeAttributeSpecList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","id"],"f":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18,522],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18]],"d":"Returns a value representing the unique identity of the node."},{"p":["SyntaxNode","asImplementsAttributeArguments"],"f":[["var",12],[" ",17],["asImplementsAttributeArguments",7],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImplementsAttributeArguments",7],[": ",17],["ImplementsAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asNamedAttributeStringArgument"],"f":[["var",12],[" ",17],["asNamedAttributeStringArgument",7],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNamedAttributeStringArgument",7],[": ",17],["NamedAttributeStringArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupAssociativity"],"f":[["var",12],[" ",17],["asPrecedenceGroupAssociativity",7],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAssociativity",7],[": ",17],["PrecedenceGroupAssociativitySyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupAttributeList"],"f":[["var",12],[" ",17],["asPrecedenceGroupAttributeList",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAttributeList",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18],["?",17]]},{"p":["SyntaxNode","isImplementsAttributeArguments"],"f":[["var",12],[" ",17],["isImplementsAttributeArguments",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplementsAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNamedAttributeStringArgument"],"f":[["var",12],[" ",17],["isNamedAttributeStringArgument",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNamedAttributeStringArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupAssociativity"],"f":[["var",12],[" ",17],["isPrecedenceGroupAssociativity",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAssociativity",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupAttributeList"],"f":[["var",12],[" ",17],["isPrecedenceGroupAttributeList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAttributeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDifferentiabilityParamsClause"],"f":[["var",12],[" ",17],["asDifferentiabilityParamsClause",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParamsClause",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","isDifferentiabilityParamsClause"],"f":[["var",12],[" ",17],["isDifferentiabilityParamsClause",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParamsClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityVersionRestriction"],"f":[["var",12],[" ",17],["asAvailabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18],["?",17]]},{"p":["SyntaxNode","asMultipleTrailingClosureElement"],"f":[["var",12],[" ",17],["asMultipleTrailingClosureElement",7],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMultipleTrailingClosureElement",7],[": ",17],["MultipleTrailingClosureElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityVersionRestriction"],"f":[["var",12],[" ",17],["isAvailabilityVersionRestriction",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityVersionRestriction",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMultipleTrailingClosureElement"],"f":[["var",12],[" ",17],["isMultipleTrailingClosureElement",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMultipleTrailingClosureElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asImplicitlyUnwrappedOptionalType"],"f":[["var",12],[" ",17],["asImplicitlyUnwrappedOptionalType",7],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImplicitlyUnwrappedOptionalType",7],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","isImplicitlyUnwrappedOptionalType"],"f":[["var",12],[" ",17],["isImplicitlyUnwrappedOptionalType",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplicitlyUnwrappedOptionalType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDifferentiableAttributeArguments"],"f":[["var",12],[" ",17],["asDifferentiableAttributeArguments",7],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiableAttributeArguments",7],[": ",17],["DifferentiableAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","isDifferentiableAttributeArguments"],"f":[["var",12],[" ",17],["isDifferentiableAttributeArguments",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiableAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asMultipleTrailingClosureElementList"],"f":[["var",12],[" ",17],["asMultipleTrailingClosureElementList",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMultipleTrailingClosureElementList",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","isMultipleTrailingClosureElementList"],"f":[["var",12],[" ",17],["isMultipleTrailingClosureElementList",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMultipleTrailingClosureElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDerivativeRegistrationAttributeArguments"],"f":[["var",12],[" ",17],["asDerivativeRegistrationAttributeArguments",7],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDerivativeRegistrationAttributeArguments",7],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","isDerivativeRegistrationAttributeArguments"],"f":[["var",12],[" ",17],["isDerivativeRegistrationAttributeArguments",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDerivativeRegistrationAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["SyntaxNode",18,528],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["SyntaxNode",18],["?",17]],"d":"The parent of this syntax node, or `nil` if this node is the root."},{"p":["SyntaxNode","asAsExpr"],"f":[["var",12],[" ",17],["asAsExpr",7],[": ",17],["AsExprSyntax",18,455],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAsExpr",7],[": ",17],["AsExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asDoStmt"],"f":[["var",12],[" ",17],["asDoStmt",7],[": ",17],["DoStmtSyntax",18,457],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDoStmt",7],[": ",17],["DoStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfStmt"],"f":[["var",12],[" ",17],["asIfStmt",7],[": ",17],["IfStmtSyntax",18,459],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfStmt",7],[": ",17],["IfStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIsExpr"],"f":[["var",12],[" ",17],["asIsExpr",7],[": ",17],["IsExprSyntax",18,461],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIsExpr",7],[": ",17],["IsExprSyntax",18],["?",17]]},{"p":["SyntaxNode","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"The textual byte length of this node including leading and trailing trivia."},{"p":["SyntaxNode","isAsExpr"],"f":[["var",12],[" ",17],["isAsExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAsExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDoStmt"],"f":[["var",12],[" ",17],["isDoStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDoStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfStmt"],"f":[["var",12],[" ",17],["isIfStmt",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIsExpr"],"f":[["var",12],[" ",17],["isIsExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIsExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","position"],"f":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node."},{"p":["SyntaxNode","asTryExpr"],"f":[["var",12],[" ",17],["asTryExpr",7],[": ",17],["TryExprSyntax",18,464],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTryExpr",7],[": ",17],["TryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknown"],"f":[["var",12],[" ",17],["asUnknown",7],[": ",17],["UnknownSyntax",18,466],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknown",7],[": ",17],["UnknownSyntax",18],["?",17]]},{"p":["SyntaxNode","byteRange"],"f":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18,536],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18]],"d":"The byte source range of this node including leading and trailing trivia."},{"p":["SyntaxNode","isTryExpr"],"f":[["var",12],[" ",17],["isTryExpr",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknown"],"f":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18]]},{"p":["SyntaxChildren","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["SyntaxChildren","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]]},{"p":["SyntaxProtocol","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"d":"Returns the underlying syntax node type."},{"p":["SyntaxProtocol","firstToken"],"f":[["var",12],[" ",17],["firstToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["firstToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Returns the first token node that is part of this syntax node."},{"p":["SyntaxProtocol","isImplicit"],"f":[["var",12],[" ",17],["isImplicit",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplicit",7],[": ",17],["Bool",18]],"d":"When isImplicit is true, the syntax node doesn't include any\nunderlying tokens, e.g. an empty CodeBlockItemList."},{"p":["SyntaxProtocol","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A source-accurate description of this node."},{"p":["SyntaxProtocol","endPosition"],"f":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node, including its trivia."},{"p":["SyntaxProtocol","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["SyntaxProtocol","isCollection"],"f":[["var",12],[" ",17],["isCollection",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCollection",7],[": ",17],["Bool",18]],"d":"Whether or not this node represents an SyntaxCollection."},{"p":["SyntaxProtocol","contentLength"],"f":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18]],"d":"The length this node takes up spelled out in the source, excluding its\nleading or trailing trivia."},{"p":["SyntaxProtocol","indexInParent"],"f":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18]],"d":"The index of this node in the parent's children."},{"p":["SyntaxProtocol","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia of this syntax node. Leading trivia is attached to\nthe first token syntax contained by this node. Without such token, this\nproperty will return nil."},{"p":["SyntaxProtocol","previousToken"],"f":[["var",12],[" ",17],["previousToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["previousToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Recursively walks through the tree to find the token semantically before\nthis node."},{"p":["SyntaxProtocol","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,542],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia of this syntax node. Trailing trivia is attached to\nthe last token syntax contained by this node. Without such token, this\nproperty will return nil."},{"p":["SyntaxProtocol","classifications"],"f":[["var",12],[" ",17],["classifications",7],[": ",17],["SyntaxClassifications",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["classifications",7],[": ",17],["SyntaxClassifications",18]],"d":"Sequence of `SyntaxClassifiedRange`s for this syntax node.\n\nThe provided classified ranges are consecutive and cover the full source\ntext of the node. The ranges may also span multiple tokens, if multiple\nconsecutive tokens would have the same classification then a single classified\nrange is provided for all of them."},{"p":["SyntaxProtocol","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"Returns a description used by dump."},{"p":["SyntaxProtocol","leadingTriviaLength"],"f":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's leading trivia takes up spelled out in source."},{"p":["SyntaxProtocol","trailingTriviaLength"],"f":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's trailing trivia takes up spelled out in source."},{"p":["SyntaxProtocol","byteSizeAfterTrimmingTrivia"],"f":[["var",12],[" ",17],["byteSizeAfterTrimmingTrivia",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSizeAfterTrimmingTrivia",7],[": ",17],["Int",18]],"d":"The textual byte length of this node exluding leading and trailing trivia."},{"p":["SyntaxProtocol","id"],"f":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18,522],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18]],"d":"Returns a value representing the unique identity of the node."},{"p":["SyntaxProtocol","endPositionBeforeTrailingTrivia"],"f":[["var",12],[" ",17],["endPositionBeforeTrailingTrivia",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPositionBeforeTrailingTrivia",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node's content, before any trailing trivia."},{"p":["SyntaxProtocol","positionAfterSkippingLeadingTrivia"],"f":[["var",12],[" ",17],["positionAfterSkippingLeadingTrivia",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["positionAfterSkippingLeadingTrivia",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node, skipping any\nleading trivia attached to the first token syntax."},{"p":["SyntaxProtocol","root"],"f":[["var",12],[" ",17],["root",7],[": ",17],["Syntax",18,521],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["root",7],[": ",17],["Syntax",18]],"d":"The root of the tree in which this node resides."},{"p":["SyntaxProtocol","index"],"f":[["var",12],[" ",17],["index",7],[": ",17],["SyntaxChildrenIndex",18,523],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["index",7],[": ",17],["SyntaxChildrenIndex",18]],"d":"The index of this node in a `SyntaxChildren` collection."},{"p":["SyntaxProtocol","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["Syntax",18,521],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["Syntax",18],["?",17]],"d":"The parent of this syntax node, or `nil` if this node is the root."},{"p":["SyntaxProtocol","tokens"],"f":[["var",12],[" ",17],["tokens",7],[": ",17],["TokenSequence",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["tokens",7],[": ",17],["TokenSequence",18]],"d":"Sequence of tokens that are part of this Syntax node."},{"p":["SyntaxProtocol","isToken"],"f":[["var",12],[" ",17],["isToken",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isToken",7],[": ",17],["Bool",18]],"d":"Whether or not this node is a token one."},{"p":["SyntaxProtocol","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"The textual byte length of this node including leading and trailing trivia."},{"p":["SyntaxProtocol","children"],"f":[["var",12],[" ",17],["children",7],[": ",17],["SyntaxChildren",18,529],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["children",7],[": ",17],["SyntaxChildren",18]],"d":"A sequence over the `present` children of this node."},{"p":["SyntaxProtocol","position"],"f":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18,538],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node. If the first token\nis with leading trivia, the position points to the start of the leading\ntrivia."},{"p":["SyntaxProtocol","byteRange"],"f":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18,536],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18]],"d":"The byte source range of this node including leading and trailing trivia."},{"p":["SyntaxProtocol","hasParent"],"f":[["var",12],[" ",17],["hasParent",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hasParent",7],[": ",17],["Bool",18]],"d":"Whether or not this node has a parent."},{"p":["SyntaxProtocol","isMissing"],"f":[["var",12],[" ",17],["isMissing",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMissing",7],[": ",17],["Bool",18]],"d":"Whether or not this node is marked as `missing`."},{"p":["SyntaxProtocol","isPresent"],"f":[["var",12],[" ",17],["isPresent",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPresent",7],[": ",17],["Bool",18]],"d":"Whether or not this node is marked as `present`."},{"p":["SyntaxProtocol","isUnknown"],"f":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18]],"d":"Whether or not this node represents an unknown node."},{"p":["SyntaxProtocol","lastToken"],"f":[["var",12],[" ",17],["lastToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["lastToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Returns the last token node that is part of this syntax node."},{"p":["SyntaxProtocol","nextToken"],"f":[["var",12],[" ",17],["nextToken",7],[": ",17],["TokenSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["nextToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Recursively walks through the tree to find the next token semantically\nafter this node."},{"p":["SourceEdit","replacementRange"],"f":[["var",12],[" ",17],["replacementRange",7],[": ",17],["ByteSourceRange",18,536],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["replacementRange",7],[": ",17],["ByteSourceRange",18]],"d":"After the edit has been applied the range of the replacement text."},{"p":["SourceEdit","replacementLength"],"f":[["let",12],[" ",17],["replacementLength",7],[": ",17],["Int",18,7823]],"s":[["let",12],[" ",17],["replacementLength",7],[": ",17],["Int",18]],"d":"The length of the edit replacement in UTF8 bytes."},{"p":["SourceEdit","range"],"f":[["let",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18,536]],"s":[["let",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18]],"d":"The byte range of the original source buffer that the edit applies to."},{"p":["SourceEdit","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["SourceEdit","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["SourceEdit","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["SourceRange","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]]},{"p":["SourceRange","end"],"f":[["let",12],[" ",17],["end",7],[": ",17],["SourceLocation",18,535]],"s":[["let",12],[" ",17],["end",7],[": ",17],["SourceLocation",18]],"d":"The beginning location in the source range."},{"p":["SourceRange","start"],"f":[["let",12],[" ",17],["start",7],[": ",17],["SourceLocation",18,535]],"s":[["let",12],[" ",17],["start",7],[": ",17],["SourceLocation",18]],"d":"The beginning location in the source range."},{"p":["TriviaPiece","sourceLength"],"f":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18]]},{"p":["TriviaPiece","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"Returns a description used by dump."},{"p":["SourceLength","utf8Length"],"f":[["let",12],[" ",17],["utf8Length",7],[": ",17],["Int",18,7823]],"s":[["let",12],[" ",17],["utf8Length",7],[": ",17],["Int",18]]},{"p":["TokenSequence","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["SourceLocation","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7772],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]]},{"p":["SourceLocation","file"],"f":[["var",12],[" ",17],["file",7],[": ",17],["String",18,7772],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["file",7],[": ",17],["String",18],["?",17]],"d":"The file in which this location resides."},{"p":["SourceLocation","line"],"f":[["var",12],[" ",17],["line",7],[": ",17],["Int",18,7823],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["line",7],[": ",17],["Int",18],["?",17]],"d":"The line in the file where this location resides. 1-based."},{"p":["SourceLocation","column"],"f":[["var",12],[" ",17],["column",7],[": ",17],["Int",18,7823],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["column",7],[": ",17],["Int",18],["?",17]],"d":"The UTF-8 byte offset from the beginning of the line where this location\nresides. 1-based."},{"p":["SourceLocation","offset"],"f":[["let",12],[" ",17],["offset",7],[": ",17],["Int",18,7823]],"s":[["let",12],[" ",17],["offset",7],[": ",17],["Int",18]],"d":"The UTF-8 byte offset into the file where this location resides."},{"p":["ByteSourceRange","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7823]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["ByteSourceRange","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7823]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["ByteSourceRange","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]]},{"p":["ByteSourceRange","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["ConcurrentEdits","edits"],"f":[["let",12],[" ",17],["edits",7],[": [",17],["SourceEdit",18,530],["]",17]],"s":[["let",12],[" ",17],["edits",7],[": [",17],["SourceEdit",18],["]",17]],"d":"The raw concurrent edits. Are guaranteed to satisfy the requirements\nstated above."},{"p":["AbsolutePosition","utf8Offset"],"f":[["let",12],[" ",17],["utf8Offset",7],[": ",17],["Int",18,7823]],"s":[["let",12],[" ",17],["utf8Offset",7],[": ",17],["Int",18]]},{"p":["ReversedTokenSequence","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7897],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]]},{"p":["IncrementalParseReusedNodeCollector","rangeAndNodes"],"f":[["var",12],[" ",17],["rangeAndNodes",7],[": [(",17],["ByteSourceRange",18,536],[", ",17],["SyntaxNode",18,528],[")]",17]],"s":[["var",12],[" ",17],["rangeAndNodes",7],[": [(",17],["ByteSourceRange",18],[", ",17],["SyntaxNode",18],[")]",17]]},{"p":["Trivia","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]]},{"p":["Trivia","sourceLength"],"f":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18]]},{"p":["Trivia","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"Get the byteSize of this trivia"},{"p":["Trivia","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,7823],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]]},{"p":["TokenKind","isKeyword"],"f":[["var",12],[" ",17],["isKeyword",7],[": ",17],["Bool",18,7820],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyword",7],[": ",17],["Bool",18]]},{"p":["SyntaxFactory","makeUnknownSyntax(tokens:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknownSyntax",7],["(",17],["tokens",1],[": [",17],["TokenSyntax",18,454],["]) -> ",17],["UnknownSyntax",18,466]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknownSyntax",7],["(",17],["tokens",1],[": [",17],["TokenSyntax",18],["]) -> ",17],["UnknownSyntax",18]]},{"p":["SyntaxFactory","makeAsExpr(asTok:questionOrExclamationMark:typeName:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsExpr",7],["(",17],["asTok",1],[": ",17],["TokenSyntax",18,454],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["typeName",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["AsExprSyntax",18,455]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsExpr",7],["(",17],["asTok",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["typeName",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AsExprSyntax",18]]},{"p":["SyntaxFactory","makeDoStmt(labelName:labelColon:doKeyword:body:catchClauses:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDoStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[", ",17],["catchClauses",1],[": ",17],["CatchClauseListSyntax",18,160],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDoStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["catchClauses",1],[": ",17],["CatchClauseListSyntax",18],["?) -> ",17],["DoStmtSyntax",18]]},{"p":["SyntaxFactory","makeIfStmt(labelName:labelColon:ifKeyword:conditions:body:elseKeyword:elseBody:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["elseBody",1],[": ",17],["Syntax",18,521],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["Syntax",18],["?) -> ",17],["IfStmtSyntax",18]]},{"p":["SyntaxFactory","makeIsExpr(isTok:typeName:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsExpr",7],["(",17],["isTok",1],[": ",17],["TokenSyntax",18,454],[", ",17],["typeName",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["IsExprSyntax",18,461]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsExpr",7],["(",17],["isTok",1],[": ",17],["TokenSyntax",18],[", ",17],["typeName",1],[": ",17],["TypeSyntax",18],[") -> ",17],["IsExprSyntax",18]]},{"p":["SyntaxFactory","makeTryExpr(tryKeyword:questionOrExclamationMark:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTryExpr",7],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["TryExprSyntax",18,464]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTryExpr",7],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["TryExprSyntax",18]]},{"p":["SyntaxFactory","makeUnknown(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknown",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknown",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCaseItem(pattern:whereClause:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CaseItemSyntax",18,467]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CaseItemSyntax",18]]},{"p":["SyntaxFactory","makeDeclName(declBaseName:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclName",7],["(",17],["declBaseName",1],[": ",17],["Syntax",18,521],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["DeclNameSyntax",18,469]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclName",7],["(",17],["declBaseName",1],[": ",17],["Syntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["DeclNameSyntax",18]]},{"p":["SyntaxFactory","makeEnumDecl(attributes:modifiers:enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameters",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["EnumDeclSyntax",18,471]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameters",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["EnumDeclSyntax",18]]},{"p":["SyntaxFactory","makeExprList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExprList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExprSyntax",18,451],["]) -> ",17],["ExprListSyntax",18,473]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExprList",7],["([",17],["ExprSyntax",18],["]) -> ",17],["ExprListSyntax",18]]},{"p":["SyntaxFactory","makeObjcName(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcName",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ObjcNamePieceSyntax",18,115],["]) -> ",17],["ObjcNameSyntax",18,475]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcName",7],["([",17],["ObjcNamePieceSyntax",18],["]) -> ",17],["ObjcNameSyntax",18]]},{"p":["SyntaxFactory","makeTypeExpr(type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeExpr",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["TypeExprSyntax",18,477]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeExpr",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeExprSyntax",18]]},{"p":["SyntaxFactory","makeArrayExpr(leftSquare:elements:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elements",1],[": ",17],["ArrayElementListSyntax",18,202],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ArrayExprSyntax",18,479]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ArrayElementListSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrayExprSyntax",18]]},{"p":["SyntaxFactory","makeArrayType(leftSquareBracket:elementType:rightSquareBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elementType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ArrayTypeSyntax",18,481]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["elementType",1],[": ",17],["TypeSyntax",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrayTypeSyntax",18]]},{"p":["SyntaxFactory","makeArrowExpr(asyncKeyword:throwsToken:arrowToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowExpr",7],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ArrowExprSyntax",18,483]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowExpr",7],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrowExprSyntax",18]]},{"p":["SyntaxFactory","makeAsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAttribute(atSignToken:attributeName:leftParen:argument:rightParen:tokenList:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,454],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["argument",1],[": ",17],["Syntax",18,521],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["tokenList",1],[": ",17],["TokenListSyntax",18,509],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["Syntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenList",1],[": ",17],["TokenListSyntax",18],["?) -> ",17],["AttributeSyntax",18]]},{"p":["SyntaxFactory","makeAwaitExpr(awaitKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAwaitExpr",7],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["AwaitExprSyntax",18,487]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAwaitExpr",7],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["AwaitExprSyntax",18]]},{"p":["SyntaxFactory","makeBreakStmt(breakKeyword:label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakStmt",7],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["label",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BreakStmtSyntax",18,489]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakStmt",7],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]]},{"p":["SyntaxFactory","makeCatchItem(pattern:whereClause:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,463],["?, ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CatchItemSyntax",18,491]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],["?, ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CatchItemSyntax",18]]},{"p":["SyntaxFactory","makeClassDecl(attributes:modifiers:classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ClassDeclSyntax",18,493]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ClassDeclSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlock(leftBrace:statements:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["CodeBlockSyntax",18,495]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["CodeBlockSyntax",18]]},{"p":["SyntaxFactory","makeDeferStmt(deferKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferStmt",7],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["DeferStmtSyntax",18,497]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferStmt",7],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["DeferStmtSyntax",18]]},{"p":["SyntaxFactory","makeDoKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDoKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDoKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeElseBlock(elseKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseBlock",7],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["ElseBlockSyntax",18,499]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseBlock",7],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["ElseBlockSyntax",18]]},{"p":["SyntaxFactory","makeForInStmt(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForInStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["sequenceExpr",1],[": ",17],["ExprSyntax",18,451],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["ForInStmtSyntax",18,501]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForInStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExprSyntax",18],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["ForInStmtSyntax",18]]},{"p":["SyntaxFactory","makeGuardStmt(guardKeyword:conditions:elseKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardStmt",7],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["GuardStmtSyntax",18,503]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardStmt",7],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["GuardStmtSyntax",18]]},{"p":["SyntaxFactory","makeIfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInOutExpr(ampersand:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInOutExpr",7],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["InOutExprSyntax",18,505]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInOutExpr",7],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["InOutExprSyntax",18]]},{"p":["SyntaxFactory","makeIsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeThrowStmt(throwKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowStmt",7],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ThrowStmtSyntax",18,507]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowStmt",7],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ThrowStmtSyntax",18]]},{"p":["SyntaxFactory","makeTokenList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTokenList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,454],["]) -> ",17],["TokenListSyntax",18,509]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTokenList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["TokenListSyntax",18]]},{"p":["SyntaxFactory","makeTupleExpr(leftParen:elementList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExpr",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elementList",1],[": ",17],["TupleExprElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TupleExprSyntax",18,511]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExpr",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TupleExprSyntax",18]]},{"p":["SyntaxFactory","makeTupleType(leftParen:elements:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elements",1],[": ",17],["TupleTypeElementListSyntax",18,346],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TupleTypeSyntax",18,513]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["TupleTypeElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TupleTypeSyntax",18]]},{"p":["SyntaxFactory","makeTypeToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhileStmt(labelName:labelColon:whileKeyword:conditions:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["WhileStmtSyntax",18,515]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["WhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeYieldList(leftParen:elementList:trailingComma:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldList",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elementList",1],[": ",17],["ExprListSyntax",18,473],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["YieldListSyntax",18,517]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldList",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExprListSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["YieldListSyntax",18]]},{"p":["SyntaxFactory","makeYieldStmt(yieldKeyword:yields:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldStmt",7],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["yields",1],[": ",17],["Syntax",18,521],[") -> ",17],["YieldStmtSyntax",18,519]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldStmt",7],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["yields",1],[": ",17],["Syntax",18],[") -> ",17],["YieldStmtSyntax",18]]},{"p":["SyntaxFactory","makeAccessPath(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPath",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AccessPathComponentSyntax",18,304],["]) -> ",17],["AccessPathSyntax",18,25]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPath",7],["([",17],["AccessPathComponentSyntax",18],["]) -> ",17],["AccessPathSyntax",18]]},{"p":["SyntaxFactory","makeAnyKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeArrowToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeColonToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeColonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeColonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCommaToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCommaToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCommaToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEqualToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEqualToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEqualToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeForKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeImportDecl(attributes:modifiers:importTok:importKind:path:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImportDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18,454],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["path",1],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImportDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["path",1],[": ",17],["AccessPathSyntax",18],[") -> ",17],["ImportDeclSyntax",18]]},{"p":["SyntaxFactory","makeLetKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLetKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLetKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeNilKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNilKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNilKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnStmt(returnKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnStmt",7],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnStmt",7],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]]},{"p":["SyntaxFactory","makeSourceFile(statements:eofToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSourceFile",7],["(",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SourceFileSyntax",18,31]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSourceFile",7],["(",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SourceFileSyntax",18]]},{"p":["SyntaxFactory","makeStructDecl(attributes:modifiers:structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStructDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStructDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["StructDeclSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCase(unknownAttr:label:statements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCase",7],["(",17],["unknownAttr",1],[": ",17],["AttributeSyntax",18,485],["?, ",17],["label",1],[": ",17],["Syntax",18,521],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SwitchCaseSyntax",18,35]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCase",7],["(",17],["unknownAttr",1],[": ",17],["AttributeSyntax",18],["?, ",17],["label",1],[": ",17],["Syntax",18],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SwitchCaseSyntax",18]]},{"p":["SyntaxFactory","makeSwitchStmt(labelName:labelColon:switchKeyword:expression:leftBrace:cases:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["cases",1],[": ",17],["SwitchCaseListSyntax",18,155],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SwitchStmtSyntax",18,37]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["cases",1],[": ",17],["SwitchCaseListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchStmtSyntax",18]]},{"p":["SyntaxFactory","makeTryKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTryKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTryKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeVarKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVarKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVarKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeYieldToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAtSignToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAtSignToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAtSignToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAsExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsExpr",7],["() -> ",17],["AsExprSyntax",18,455]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsExpr",7],["() -> ",17],["AsExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankDoStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDoStmt",7],["() -> ",17],["DoStmtSyntax",18,457]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDoStmt",7],["() -> ",17],["DoStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfStmt",7],["() -> ",17],["IfStmtSyntax",18,459]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfStmt",7],["() -> ",17],["IfStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIsExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsExpr",7],["() -> ",17],["IsExprSyntax",18,461]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsExpr",7],["() -> ",17],["IsExprSyntax",18]]},{"p":["SyntaxFactory","makeCaseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCatchClause(catchKeyword:catchItems:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClause",7],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["catchItems",1],[": ",17],["CatchItemListSyntax",18,105],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["CatchClauseSyntax",18,39]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClause",7],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["catchItems",1],[": ",17],["CatchItemListSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["CatchClauseSyntax",18]]},{"p":["SyntaxFactory","makeClosureExpr(leftBrace:signature:statements:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureExpr",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["signature",1],[": ",17],["ClosureSignatureSyntax",18,206],["?, ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ClosureExprSyntax",18,41]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureExpr",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ClosureSignatureSyntax",18],["?, ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureExprSyntax",18]]},{"p":["SyntaxFactory","makeElseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEnumKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFuncKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFuncKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFuncKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInitKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeKeyPathExpr(backslash:rootExpr:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathExpr",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,454],[", ",17],["rootExpr",1],[": ",17],["ExprSyntax",18,451],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["KeyPathExprSyntax",18,43]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathExpr",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["rootExpr",1],[": ",17],["ExprSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["KeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makePeriodToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSelfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTernaryExpr(conditionExpression:questionMark:firstChoice:colonMark:secondChoice:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTernaryExpr",7],["(",17],["conditionExpression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,454],[", ",17],["firstChoice",1],[": ",17],["ExprSyntax",18,451],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18,454],[", ",17],["secondChoice",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["TernaryExprSyntax",18,45]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTernaryExpr",7],["(",17],["conditionExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[", ",17],["firstChoice",1],[": ",17],["ExprSyntax",18],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18],[", ",17],["secondChoice",1],[": ",17],["ExprSyntax",18],[") -> ",17],["TernaryExprSyntax",18]]},{"p":["SyntaxFactory","makeTrueKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTrueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTrueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhereClause(whereKeyword:guardResult:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["guardResult",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["WhereClauseSyntax",18,51]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["guardResult",1],[": ",17],["ExprSyntax",18],[") -> ",17],["WhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeAccessorDecl(attributes:modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifier",1],[": ",17],["DeclModifierSyntax",18,65],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,454],[", ",17],["parameter",1],[": ",17],["AccessorParameterSyntax",18,234],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifier",1],[": ",17],["DeclModifierSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["AccessorParameterSyntax",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]]},{"p":["SyntaxFactory","makeAccessorList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AccessorDeclSyntax",18,53],["]) -> ",17],["AccessorListSyntax",18,55]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorList",7],["([",17],["AccessorDeclSyntax",18],["]) -> ",17],["AccessorListSyntax",18]]},{"p":["SyntaxFactory","makeArrayElement(expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElement",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElement",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTryExpr",7],["() -> ",17],["TryExprSyntax",18,464]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTryExpr",7],["() -> ",17],["TryExprSyntax",18]]},{"p":["SyntaxFactory","makeBreakKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCaseItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CaseItemSyntax",18,467],["]) -> ",17],["CaseItemListSyntax",18,59]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItemList",7],["([",17],["CaseItemSyntax",18],["]) -> ",17],["CaseItemListSyntax",18]]},{"p":["SyntaxFactory","makeCatchKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClassKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClosureParam(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParam",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParam",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]]},{"p":["SyntaxFactory","makeContinueStmt(continueKeyword:label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueStmt",7],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["label",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueStmt",7],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]]},{"p":["SyntaxFactory","makeDeclModifier(name:detailLeftParen:detail:detailRightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]]},{"p":["SyntaxFactory","makeDeferKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseDecl(attributes:modifiers:caseKeyword:elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elements",1],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["EnumCaseElementListSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]]},{"p":["SyntaxFactory","makeFalseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFalseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFalseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFunctionDecl(attributes:modifiers:funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["signature",1],[": ",17],["FunctionSignatureSyntax",18,252],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["signature",1],[": ",17],["FunctionSignatureSyntax",18],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]]},{"p":["SyntaxFactory","makeFunctionType(leftParen:arguments:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["arguments",1],[": ",17],["TupleTypeElementListSyntax",18,346],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18,454],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["FunctionTypeSyntax",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["TupleTypeElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["FunctionTypeSyntax",18]]},{"p":["SyntaxFactory","makeGuardKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigDecl(clauses:poundEndif:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigDecl",7],["(",17],["clauses",1],[": ",17],["IfConfigClauseListSyntax",18,288],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigDecl",7],["(",17],["clauses",1],[": ",17],["IfConfigClauseListSyntax",18],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IfConfigDeclSyntax",18]]},{"p":["SyntaxFactory","makeInoutKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInoutKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInoutKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeMetatypeType(baseType:period:typeOrProtocol:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMetatypeType",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["period",1],[": ",17],["TokenSyntax",18,454],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMetatypeType",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18],[") -> ",17],["MetatypeTypeSyntax",18]]},{"p":["SyntaxFactory","makeModifierList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeModifierList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DeclModifierSyntax",18,65],["]) -> ",17],["ModifierListSyntax",18,77]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeModifierList",7],["([",17],["DeclModifierSyntax",18],["]) -> ",17],["ModifierListSyntax",18]]},{"p":["SyntaxFactory","makeObjCSelector(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelector",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ObjCSelectorPieceSyntax",18,262],["]) -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelector",7],["([",17],["ObjCSelectorPieceSyntax",18],["]) -> ",17],["ObjCSelectorSyntax",18]]},{"p":["SyntaxFactory","makeOperatorDecl(attributes:modifiers:operatorKeyword:identifier:operatorPrecedenceAndTypes:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]]},{"p":["SyntaxFactory","makeOptionalType(wrappedType:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["OptionalTypeSyntax",18,83]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeProtocolDecl(attributes:modifiers:protocolKeyword:identifier:primaryAssociatedTypeClause:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["primaryAssociatedTypeClause",1],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ProtocolDeclSyntax",18]]},{"p":["SyntaxFactory","makeRegexLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnClause(arrow:returnType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnClause",7],["(",17],["arrow",1],[": ",17],["TokenSyntax",18,454],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["ReturnClauseSyntax",18,87]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnClause",7],["(",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["ReturnClauseSyntax",18]]},{"p":["SyntaxFactory","makeSequenceExpr(elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSequenceExpr",7],["(",17],["elements",1],[": ",17],["ExprListSyntax",18,473],[") -> ",17],["SequenceExprSyntax",18,89]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSequenceExpr",7],["(",17],["elements",1],[": ",17],["ExprListSyntax",18],[") -> ",17],["SequenceExprSyntax",18]]},{"p":["SyntaxFactory","makeSuperKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSuperRefExpr(superKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperRefExpr",7],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SuperRefExprSyntax",18,91]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperRefExpr",7],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SuperRefExprSyntax",18]]},{"p":["SyntaxFactory","makeThrowKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTuplePattern(leftParen:elements:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePattern",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["elements",1],[": ",17],["TuplePatternElementListSyntax",18,398],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TuplePatternSyntax",18,93]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePattern",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["TuplePatternElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TuplePatternSyntax",18]]},{"p":["SyntaxFactory","makeVariableDecl(attributes:modifiers:letOrVarKeyword:bindings:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["bindings",1],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["bindings",1],[": ",17],["PatternBindingListSyntax",18],[") -> ",17],["VariableDeclSyntax",18]]},{"p":["SyntaxFactory","makeVariableExpr(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableExpr",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableExpr",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeVersionTuple(majorMinor:patchPeriod:patchVersion:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVersionTuple",7],["(",17],["majorMinor",1],[": ",17],["Syntax",18,521],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVersionTuple",7],["(",17],["majorMinor",1],[": ",17],["Syntax",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]]},{"p":["SyntaxFactory","makeWhereKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhileKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAccessorBlock(leftBrace:accessors:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["accessors",1],[": ",17],["AccessorListSyntax",18,55],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AccessorBlockSyntax",18,99]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessors",1],[": ",17],["AccessorListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AccessorBlockSyntax",18]]},{"p":["SyntaxFactory","makeAsTypePattern(pattern:asKeyword:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsTypePattern",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["type",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["AsTypePatternSyntax",18,101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsTypePattern",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeAttributeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,521],["]) -> ",17],["AttributeListSyntax",18,103]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributeList",7],["([",17],["Syntax",18],["]) -> ",17],["AttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBacktickToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBacktickToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBacktickToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankCaseItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItem",7],["() -> ",17],["CaseItemSyntax",18,467]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItem",7],["() -> ",17],["CaseItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclName",7],["() -> ",17],["DeclNameSyntax",18,469]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclName",7],["() -> ",17],["DeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumDecl",7],["() -> ",17],["EnumDeclSyntax",18,471]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumDecl",7],["() -> ",17],["EnumDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankExprList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExprList",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExprList",7],["() -> ",17],["ExprListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcName",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcName",7],["() -> ",17],["ObjcNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeExpr",7],["() -> ",17],["TypeExprSyntax",18,477]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeExpr",7],["() -> ",17],["TypeExprSyntax",18]]},{"p":["SyntaxFactory","makeCatchItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CatchItemSyntax",18,491],["]) -> ",17],["CatchItemListSyntax",18,105]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItemList",7],["([",17],["CatchItemSyntax",18],["]) -> ",17],["CatchItemListSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlockItem(item:semicolon:errorTokens:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItem",7],["(",17],["item",1],[": ",17],["Syntax",18,521],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["errorTokens",1],[": ",17],["Syntax",18,521],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItem",7],["(",17],["item",1],[": ",17],["Syntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?, ",17],["errorTokens",1],[": ",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]]},{"p":["SyntaxFactory","makeDeinitKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEllipsisToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEllipsisToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEllipsisToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeExtensionDecl(attributes:modifiers:extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["extendedType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["TypeSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ExtensionDeclSyntax",18]]},{"p":["SyntaxFactory","makeImportKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImportKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImportKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInheritedType(typeName:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedType",7],["(",17],["typeName",1],[": ",17],["TypeSyntax",18,453],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedType",7],["(",17],["typeName",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]]},{"p":["SyntaxFactory","makeIsTypePattern(isKeyword:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsTypePattern",7],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["type",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["IsTypePatternSyntax",18,113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsTypePattern",7],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["IsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeObjcNamePiece(name:dot:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcNamePiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcNamePiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]]},{"p":["SyntaxFactory","makePoundFileExpr(poundFile:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileExpr",7],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundFileExprSyntax",18,117]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileExpr",7],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFileExprSyntax",18]]},{"p":["SyntaxFactory","makePoundLineExpr(poundLine:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineExpr",7],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundLineExprSyntax",18,119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineExpr",7],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundLineExprSyntax",18]]},{"p":["SyntaxFactory","makeProtocolToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePublicKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePublicKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePublicKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRepeatKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStaticKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStaticKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStaticKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringSegment(content:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["content",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["StringSegmentSyntax",18,121]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["content",1],[": ",17],["TokenSyntax",18],[") -> ",17],["StringSegmentSyntax",18]]},{"p":["SyntaxFactory","makeStringSegment(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStructKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStructKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStructKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptDecl(attributes:modifiers:subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["indices",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["result",1],[": ",17],["ReturnClauseSyntax",18,87],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["accessor",1],[": ",17],["Syntax",18,521],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["indices",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["result",1],[": ",17],["ReturnClauseSyntax",18],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["accessor",1],[": ",17],["Syntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptExpr(calledExpression:leftBracket:argumentList:rightBracket:trailingClosure:additionalTrailingClosures:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,344],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18,41],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]]},{"p":["SyntaxFactory","makeSwitchKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeThrowsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTypealiasDecl(attributes:modifiers:typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,370],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]]},{"p":["SyntaxFactory","makeVoidTupleType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVoidTupleType",7],["() -> ",17],["TupleTypeSyntax",18,513]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVoidTupleType",7],["() -> ",17],["TupleTypeSyntax",18]],"d":"MARK: Convenience APIs"},{"p":["SyntaxFactory","makeAssignmentExpr(assignToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssignmentExpr",7],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AssignmentExprSyntax",18,129]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssignmentExpr",7],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeAttributedType(specifier:attributes:baseType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributedType",7],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["baseType",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["AttributedTypeSyntax",18,131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributedType",7],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["baseType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AttributedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBackslashToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBackslashToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBackslashToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperator",7],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayExpr",7],["() -> ",17],["ArrayExprSyntax",18,479]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayExpr",7],["() -> ",17],["ArrayExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayType",7],["() -> ",17],["ArrayTypeSyntax",18,481]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayType",7],["() -> ",17],["ArrayTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrowExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrowExpr",7],["() -> ",17],["ArrowExprSyntax",18,483]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrowExpr",7],["() -> ",17],["ArrowExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttribute()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttribute",7],["() -> ",17],["AttributeSyntax",18,485]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttribute",7],["() -> ",17],["AttributeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAwaitExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAwaitExpr",7],["() -> ",17],["AwaitExprSyntax",18,487]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAwaitExpr",7],["() -> ",17],["AwaitExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankBreakStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBreakStmt",7],["() -> ",17],["BreakStmtSyntax",18,489]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBreakStmt",7],["() -> ",17],["BreakStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItem",7],["() -> ",17],["CatchItemSyntax",18,491]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItem",7],["() -> ",17],["CatchItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankClassDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassDecl",7],["() -> ",17],["ClassDeclSyntax",18,493]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassDecl",7],["() -> ",17],["ClassDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlock",7],["() -> ",17],["CodeBlockSyntax",18,495]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlock",7],["() -> ",17],["CodeBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeferStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeferStmt",7],["() -> ",17],["DeferStmtSyntax",18,497]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeferStmt",7],["() -> ",17],["DeferStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankElseBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseBlock",7],["() -> ",17],["ElseBlockSyntax",18,499]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseBlock",7],["() -> ",17],["ElseBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankForInStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForInStmt",7],["() -> ",17],["ForInStmtSyntax",18,501]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForInStmt",7],["() -> ",17],["ForInStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankGuardStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGuardStmt",7],["() -> ",17],["GuardStmtSyntax",18,503]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGuardStmt",7],["() -> ",17],["GuardStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankInOutExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInOutExpr",7],["() -> ",17],["InOutExprSyntax",18,505]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInOutExpr",7],["() -> ",17],["InOutExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankThrowStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankThrowStmt",7],["() -> ",17],["ThrowStmtSyntax",18,507]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankThrowStmt",7],["() -> ",17],["ThrowStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankTokenList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTokenList",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTokenList",7],["() -> ",17],["TokenListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExpr",7],["() -> ",17],["TupleExprSyntax",18,511]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExpr",7],["() -> ",17],["TupleExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleType",7],["() -> ",17],["TupleTypeSyntax",18,513]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleType",7],["() -> ",17],["TupleTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankWhileStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhileStmt",7],["() -> ",17],["WhileStmtSyntax",18,515]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhileStmt",7],["() -> ",17],["WhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankYieldList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldList",7],["() -> ",17],["YieldListSyntax",18,517]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldList",7],["() -> ",17],["YieldListSyntax",18]]},{"p":["SyntaxFactory","makeBlankYieldStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldStmt",7],["() -> ",17],["YieldStmtSyntax",18,519]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldStmt",7],["() -> ",17],["YieldStmtSyntax",18]]},{"p":["SyntaxFactory","makeDefaultKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDefaultKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDefaultKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryExpr(leftSquare:content:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,454],[", ",17],["content",1],[": ",17],["Syntax",18,521],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DictionaryExprSyntax",18,133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["content",1],[": ",17],["Syntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DictionaryExprSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryType(leftSquareBracket:keyType:colon:valueType:rightSquareBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["keyType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["valueType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["keyType",1],[": ",17],["TypeSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueType",1],[": ",17],["TypeSyntax",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DictionaryTypeSyntax",18]]},{"p":["SyntaxFactory","makeExpressionStmt(expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionStmt",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionStmt",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExpressionStmtSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierExpr(identifier:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,454],["]) -> ",17],["IdentifierListSyntax",18,141]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["IdentifierListSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigClause(poundKeyword:condition:elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClause",7],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,451],["?, ",17],["elements",1],[": ",17],["Syntax",18,521],[") -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClause",7],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],["?, ",17],["elements",1],[": ",17],["Syntax",18],[") -> ",17],["IfConfigClauseSyntax",18]]},{"p":["SyntaxFactory","makeIntegerLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftAngleToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftBraceToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftParenToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["MemberDeclListItemSyntax",18,292],["]) -> ",17],["MemberDeclListSyntax",18,145]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclList",7],["([",17],["MemberDeclListItemSyntax",18],["]) -> ",17],["MemberDeclListSyntax",18]]},{"p":["SyntaxFactory","makeNilLiteralExpr(nilKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNilLiteralExpr",7],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNilLiteralExpr",7],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["NilLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makePatternBinding(pattern:typeAnnotation:initializer:accessor:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBinding",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["accessor",1],[": ",17],["Syntax",18,521],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBinding",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["accessor",1],[": ",17],["Syntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]]},{"p":["SyntaxFactory","makePoundErrorDecl(poundError:leftParen:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorDecl",7],["(",17],["poundError",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18,272],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorDecl",7],["(",17],["poundError",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundErrorDeclSyntax",18]]},{"p":["SyntaxFactory","makePoundIfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrivateKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSemicolonToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSemicolonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSemicolonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSpecializeExpr(expression:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,360],[") -> ",17],["SpecializeExprSyntax",18,153]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SpecializeExprSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCaseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,521],["]) -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseList",7],["([",17],["Syntax",18],["]) -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SyntaxFactory","makeTypeAnnotation(colon:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeAnnotation",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["type",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeAnnotation",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeAnnotationSyntax",18]]},{"p":["SyntaxFactory","makeTypeIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeIdentifier",7],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TypeSyntax",18,453]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessPath()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPath",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPath",7],["() -> ",17],["AccessPathSyntax",18]]},{"p":["SyntaxFactory","makeBlankImportDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImportDecl",7],["() -> ",17],["ImportDeclSyntax",18,27]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImportDecl",7],["() -> ",17],["ImportDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankReturnStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnStmt",7],["() -> ",17],["ReturnStmtSyntax",18,29]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnStmt",7],["() -> ",17],["ReturnStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankSourceFile()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSourceFile",7],["() -> ",17],["SourceFileSyntax",18,31]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSourceFile",7],["() -> ",17],["SourceFileSyntax",18]]},{"p":["SyntaxFactory","makeBlankStructDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStructDecl",7],["() -> ",17],["StructDeclSyntax",18,33]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStructDecl",7],["() -> ",17],["StructDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCase()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCase",7],["() -> ",17],["SwitchCaseSyntax",18,35]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCase",7],["() -> ",17],["SwitchCaseSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchStmt",7],["() -> ",17],["SwitchStmtSyntax",18,37]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchStmt",7],["() -> ",17],["SwitchStmtSyntax",18]]},{"p":["SyntaxFactory","makeCatchClauseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClauseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CatchClauseSyntax",18,39],["]) -> ",17],["CatchClauseListSyntax",18,160]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClauseList",7],["([",17],["CatchClauseSyntax",18],["]) -> ",17],["CatchClauseListSyntax",18]]},{"p":["SyntaxFactory","makeCompositionType(elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionType",7],["(",17],["elements",1],[": ",17],["CompositionTypeElementListSyntax",18,412],[") -> ",17],["CompositionTypeSyntax",18,162]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionType",7],["(",17],["elements",1],[": ",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["CompositionTypeSyntax",18]]},{"p":["SyntaxFactory","makeContinueKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCustomAttribute(atSignToken:attributeName:leftParen:argumentList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCustomAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,454],[", ",17],["attributeName",1],[": ",17],["TypeSyntax",18,453],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,344],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCustomAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TypeSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]]},{"p":["SyntaxFactory","makeDeclarationStmt(declaration:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclarationStmt",7],["(",17],["declaration",1],[": ",17],["DeclSyntax",18,450],[") -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclarationStmt",7],["(",17],["declaration",1],[": ",17],["DeclSyntax",18],[") -> ",17],["DeclarationStmtSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseElement(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElement",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["associatedValue",1],[": ",17],["ParameterClauseSyntax",18,188],["?, ",17],["rawValue",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElement",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedValue",1],[": ",17],["ParameterClauseSyntax",18],["?, ",17],["rawValue",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]]},{"p":["SyntaxFactory","makeEnumCasePattern(type:period:caseName:associatedTuple:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCasePattern",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,453],["?, ",17],["period",1],[": ",17],["TokenSyntax",18,454],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18,454],[", ",17],["associatedTuple",1],[": ",17],["TuplePatternSyntax",18,93],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCasePattern",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedTuple",1],[": ",17],["TuplePatternSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]]},{"p":["SyntaxFactory","makeFallthroughStmt(fallthroughKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughStmt",7],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughStmt",7],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["FallthroughStmtSyntax",18]]},{"p":["SyntaxFactory","makeFloatingLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatingLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatingLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeForcedValueExpr(expression:exclamationMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForcedValueExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForcedValueExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ForcedValueExprSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgument(argumentType:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgument",7],["(",17],["argumentType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgument",7],["(",17],["argumentType",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]]},{"p":["SyntaxFactory","makeInitializerDecl(attributes:modifiers:initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,382],["?, ",17],["parameters",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["parameters",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeInternalKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInternalKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInternalKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeKeyPathBaseExpr(period:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathBaseExpr",7],["(",17],["period",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathBaseExpr",7],["(",17],["period",1],[": ",17],["TokenSyntax",18],[") -> ",17],["KeyPathBaseExprSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclBlock(leftBrace:members:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["members",1],[": ",17],["MemberDeclListSyntax",18,145],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["members",1],[": ",17],["MemberDeclListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["MemberDeclBlockSyntax",18]]},{"p":["SyntaxFactory","makeObjcKeyPathExpr(keyPath:leftParen:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcKeyPathExpr",7],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["name",1],[": ",17],["ObjcNameSyntax",18,475],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcKeyPathExpr",7],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ObjcNameSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjcKeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeOperatorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeOptionalPattern(subPattern:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalPattern",7],["(",17],["subPattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["OptionalPatternSyntax",18,186]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalPattern",7],["(",17],["subPattern",1],[": ",17],["PatternSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalPatternSyntax",18]]},{"p":["SyntaxFactory","makeParameterClause(leftParen:parameterList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeParameterClause",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["parameterList",1],[": ",17],["FunctionParameterListSyntax",18,358],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ParameterClauseSyntax",18,188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeParameterClause",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterList",1],[": ",17],["FunctionParameterListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makePostfixOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundAssertStmt(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertStmt",7],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,451],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["message",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertStmt",7],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundAssertStmtSyntax",18]]},{"p":["SyntaxFactory","makePoundColumnExpr(poundColumn:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnExpr",7],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnExpr",7],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundColumnExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFileIDExpr(poundFileID:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDExpr",7],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDExpr",7],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFileIDExprSyntax",18]]},{"p":["SyntaxFactory","makeProtocolKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRepeatWhileStmt(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],[") -> ",17],["RepeatWhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeRethrowsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRethrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRethrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightAngleToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightBraceToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightParenToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCaseLabel(caseKeyword:caseItems:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseLabel",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["caseItems",1],[": ",17],["CaseItemListSyntax",18,59],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseLabel",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItems",1],[": ",17],["CaseItemListSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchCaseLabelSyntax",18]]},{"p":["SyntaxFactory","makeWildcardKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWildcardPattern(wildcard:typeAnnotation:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardPattern",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,454],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardPattern",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]]},{"p":["SyntaxFactory","make__FILE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__FILE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__FILE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","make__LINE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__LINE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__LINE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeArrayElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ArrayElementSyntax",18,57],["]) -> ",17],["ArrayElementListSyntax",18,202]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElementList",7],["([",17],["ArrayElementSyntax",18],["]) -> ",17],["ArrayElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClause",7],["() -> ",17],["CatchClauseSyntax",18,39]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClause",7],["() -> ",17],["CatchClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureExpr",7],["() -> ",17],["ClosureExprSyntax",18,41]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureExpr",7],["() -> ",17],["ClosureExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankKeyPathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathExpr",7],["() -> ",17],["KeyPathExprSyntax",18,43]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathExpr",7],["() -> ",17],["KeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTernaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTernaryExpr",7],["() -> ",17],["TernaryExprSyntax",18,45]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTernaryExpr",7],["() -> ",17],["TernaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownDecl",7],["() -> ",17],["UnknownDeclSyntax",18,47]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownDecl",7],["() -> ",17],["UnknownDeclSyntax",18]],"d":"MARK: Syntax Node Creation APIs"},{"p":["SyntaxFactory","makeBlankUnknownExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownExpr",7],["() -> ",17],["UnknownExprSyntax",18,48]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownExpr",7],["() -> ",17],["UnknownExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownStmt",7],["() -> ",17],["UnknownStmtSyntax",18,49]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownStmt",7],["() -> ",17],["UnknownStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownType",7],["() -> ",17],["UnknownTypeSyntax",18,50]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownType",7],["() -> ",17],["UnknownTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankWhereClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhereClause",7],["() -> ",17],["WhereClauseSyntax",18,51]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhereClause",7],["() -> ",17],["WhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeClosureParamList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParamList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ClosureParamSyntax",18,61],["]) -> ",17],["ClosureParamListSyntax",18,204]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParamList",7],["([",17],["ClosureParamSyntax",18],["]) -> ",17],["ClosureParamListSyntax",18]]},{"p":["SyntaxFactory","makeClosureSignature(attributes:capture:input:asyncKeyword:throwsTok:output:inTok:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureSignature",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["capture",1],[": ",17],["ClosureCaptureSignatureSyntax",18,388],["?, ",17],["input",1],[": ",17],["Syntax",18,521],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18,87],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureSignature",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["capture",1],[": ",17],["ClosureCaptureSignatureSyntax",18],["?, ",17],["input",1],[": ",17],["Syntax",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeConditionElement(condition:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElement",7],["(",17],["condition",1],[": ",17],["Syntax",18,521],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElement",7],["(",17],["condition",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ConditionElementSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArgument(name:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgument",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgument",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DeclNameArgumentSyntax",18]]},{"p":["SyntaxFactory","makeDollarIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDollarIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDollarIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeExtensionKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFloatLiteralExpr(floatingDigits:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatLiteralExpr",7],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatLiteralExpr",7],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18],[") -> ",17],["FloatLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionCallExpr(calledExpression:leftParen:argumentList:rightParen:trailingClosure:additionalTrailingClosures:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionCallExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18,41],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionCallExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionDeclName(name:arguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDeclName",7],["(",17],["name",1],[": ",17],["Syntax",18,521],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDeclName",7],["(",17],["name",1],[": ",17],["Syntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameter(attributes:name:colon:inheritedType:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18,453],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameter(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeMemberAccessExpr(base:dot:name:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberAccessExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18,451],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18,454],[", ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberAccessExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]]},{"p":["SyntaxFactory","makeObjcSelectorExpr(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcSelectorExpr",7],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["kind",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["name",1],[": ",17],["ExprSyntax",18,451],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcSelectorExpr",7],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjcSelectorExprSyntax",18]]},{"p":["SyntaxFactory","makePostfixUnaryExpr(expression:operatorToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixUnaryExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixUnaryExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PostfixUnaryExprSyntax",18]]},{"p":["SyntaxFactory","makePoundElseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFileKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundLineKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundWarningDecl(poundWarning:leftParen:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningDecl",7],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18,272],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningDecl",7],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundWarningDeclSyntax",18]]},{"p":["SyntaxFactory","makeRegexLiteralExpr(regex:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteralExpr",7],["(",17],["regex",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteralExpr",7],["(",17],["regex",1],[": ",17],["TokenSyntax",18],[") -> ",17],["RegexLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeSingleQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSingleQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSingleQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTupleExprElement(label:colon:expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(name:colon:type:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,453],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(type:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,453],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(inOut:name:secondName:colon:type:ellipsis:initializer:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["inOut",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,453],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["inOut",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTypealiasKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAccessorParameter(leftParen:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorParameter",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AccessorParameterSyntax",18,234]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorParameter",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AccessorParameterSyntax",18]]},{"p":["SyntaxFactory","makeAnyTypeIdentifier(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TypeSyntax",18,453]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityEntry(label:colon:availabilityList:semicolon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["availabilityList",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityList",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AvailabilityEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorDecl",7],["() -> ",17],["AccessorDeclSyntax",18,53]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorDecl",7],["() -> ",17],["AccessorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorList",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorList",7],["() -> ",17],["AccessorListSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElement",7],["() -> ",17],["ArrayElementSyntax",18,57]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElement",7],["() -> ",17],["ArrayElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankCaseItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItemList",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItemList",7],["() -> ",17],["CaseItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureParam()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParam",7],["() -> ",17],["ClosureParamSyntax",18,61]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParam",7],["() -> ",17],["ClosureParamSyntax",18]]},{"p":["SyntaxFactory","makeBlankContinueStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankContinueStmt",7],["() -> ",17],["ContinueStmtSyntax",18,63]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankContinueStmt",7],["() -> ",17],["ContinueStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclModifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclModifier",7],["() -> ",17],["DeclModifierSyntax",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclModifier",7],["() -> ",17],["DeclModifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseDecl",7],["() -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseDecl",7],["() -> ",17],["EnumCaseDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDecl",7],["() -> ",17],["FunctionDeclSyntax",18,69]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDecl",7],["() -> ",17],["FunctionDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionType",7],["() -> ",17],["FunctionTypeSyntax",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionType",7],["() -> ",17],["FunctionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigDecl",7],["() -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigDecl",7],["() -> ",17],["IfConfigDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankMetatypeType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMetatypeType",7],["() -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMetatypeType",7],["() -> ",17],["MetatypeTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankModifierList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankModifierList",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankModifierList",7],["() -> ",17],["ModifierListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjCSelector()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelector",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelector",7],["() -> ",17],["ObjCSelectorSyntax",18]]},{"p":["SyntaxFactory","makeBlankOperatorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorDecl",7],["() -> ",17],["OperatorDeclSyntax",18,81]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorDecl",7],["() -> ",17],["OperatorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalType",7],["() -> ",17],["OptionalTypeSyntax",18,83]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalType",7],["() -> ",17],["OptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankProtocolDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankProtocolDecl",7],["() -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankProtocolDecl",7],["() -> ",17],["ProtocolDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankReturnClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnClause",7],["() -> ",17],["ReturnClauseSyntax",18,87]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnClause",7],["() -> ",17],["ReturnClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankSequenceExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSequenceExpr",7],["() -> ",17],["SequenceExprSyntax",18,89]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSequenceExpr",7],["() -> ",17],["SequenceExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSuperRefExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSuperRefExpr",7],["() -> ",17],["SuperRefExprSyntax",18,91]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSuperRefExpr",7],["() -> ",17],["SuperRefExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePattern",7],["() -> ",17],["TuplePatternSyntax",18,93]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePattern",7],["() -> ",17],["TuplePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankVariableDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVariableDecl",7],["() -> ",17],["VariableDeclSyntax",18,95]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVariableDecl",7],["() -> ",17],["VariableDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankVersionTuple()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVersionTuple",7],["() -> ",17],["VersionTupleSyntax",18,97]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVersionTuple",7],["() -> ",17],["VersionTupleSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlockItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CodeBlockItemSyntax",18,107],["]) -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItemList",7],["([",17],["CodeBlockItemSyntax",18],["]) -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["SyntaxFactory","makeContextualKeyword(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContextualKeyword",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContextualKeyword",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArguments(leftParen:arguments:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArguments",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentListSyntax",18,334],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArguments",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DeclNameArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeDeinitializerDecl(attributes:modifiers:deinitKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryElement(keyExpression:colon:valueExpression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElement",7],["(",17],["keyExpression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["valueExpression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElement",7],["(",17],["keyExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]]},{"p":["SyntaxFactory","makeExpressionPattern(expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionPattern",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionPattern",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExpressionPatternSyntax",18]]},{"p":["SyntaxFactory","makeExpressionSegment(backslash:delimiter:leftParen:expressions:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionSegment",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,454],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["expressions",1],[": ",17],["TupleExprElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionSegment",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressions",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ExpressionSegmentSyntax",18]]},{"p":["SyntaxFactory","makeFunctionParameter(attributes:firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,453],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["defaultArgument",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]]},{"p":["SyntaxFactory","makeFunctionSignature(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionSignature",7],["(",17],["input",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionSignature",7],["(",17],["input",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierPattern(identifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierPattern",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierPattern",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IdentifierPatternSyntax",18]]},{"p":["SyntaxFactory","makeInheritedTypeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedTypeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["InheritedTypeSyntax",18,111],["]) -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedTypeList",7],["([",17],["InheritedTypeSyntax",18],["]) -> ",17],["InheritedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeInitializerClause(equal:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18,454],[", ",17],["value",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["InitializerClauseSyntax",18,258]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExprSyntax",18],[") -> ",17],["InitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeNonEmptyTokenList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNonEmptyTokenList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,454],["]) -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNonEmptyTokenList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["SyntaxFactory","makeObjCSelectorPiece(name:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelectorPiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelectorPiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]]},{"p":["SyntaxFactory","makeObjectLiteralExpr(identifier:leftParen:arguments:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjectLiteralExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["arguments",1],[": ",17],["TupleExprElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjectLiteralExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjectLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makePoundEndifKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundEndifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundEndifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundErrorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFilePathExpr(poundFilePath:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathExpr",7],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathExpr",7],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFilePathExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFunctionExpr(poundFunction:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionExpr",7],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionExpr",7],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFunctionExprSyntax",18]]},{"p":["SyntaxFactory","makePrefixPeriodToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixPeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixPeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeQualifiedDeclName(baseType:dot:name:arguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeQualifiedDeclName",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,453],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeQualifiedDeclName",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralExpr(openDelimiter:openQuote:segments:closeQuote:closeDelimiter:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,454],[", ",17],["segments",1],[": ",17],["StringLiteralSegmentsSyntax",18,364],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,454],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["segments",1],[": ",17],["StringLiteralSegmentsSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralExpr(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","make__COLUMN__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__COLUMN__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__COLUMN__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAssociatedtypeDecl(attributes:modifiers:associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,370],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]]},{"p":["SyntaxFactory","makeBinaryOperatorExpr(operatorToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["BinaryOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorBlock",7],["() -> ",17],["AccessorBlockSyntax",18,99]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorBlock",7],["() -> ",17],["AccessorBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankAsTypePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsTypePattern",7],["() -> ",17],["AsTypePatternSyntax",18,101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsTypePattern",7],["() -> ",17],["AsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttributeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributeList",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributeList",7],["() -> ",17],["AttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItemList",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItemList",7],["() -> ",17],["CatchItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlockItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItem",7],["() -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItem",7],["() -> ",17],["CodeBlockItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankExtensionDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExtensionDecl",7],["() -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExtensionDecl",7],["() -> ",17],["ExtensionDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankInheritedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedType",7],["() -> ",17],["InheritedTypeSyntax",18,111]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedType",7],["() -> ",17],["InheritedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankIsTypePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsTypePattern",7],["() -> ",17],["IsTypePatternSyntax",18,113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsTypePattern",7],["() -> ",17],["IsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcNamePiece()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcNamePiece",7],["() -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcNamePiece",7],["() -> ",17],["ObjcNamePieceSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFileExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileExpr",7],["() -> ",17],["PoundFileExprSyntax",18,117]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileExpr",7],["() -> ",17],["PoundFileExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundLineExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundLineExpr",7],["() -> ",17],["PoundLineExprSyntax",18,119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundLineExpr",7],["() -> ",17],["PoundLineExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringSegment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringSegment",7],["() -> ",17],["StringSegmentSyntax",18,121]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringSegment",7],["() -> ",17],["StringSegmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankSubscriptDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptDecl",7],["() -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptDecl",7],["() -> ",17],["SubscriptDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSubscriptExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptExpr",7],["() -> ",17],["SubscriptExprSyntax",18,125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptExpr",7],["() -> ",17],["SubscriptExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypealiasDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypealiasDecl",7],["() -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypealiasDecl",7],["() -> ",17],["TypealiasDeclSyntax",18]]},{"p":["SyntaxFactory","makeBooleanLiteralExpr(booleanLiteral:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBooleanLiteralExpr",7],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBooleanLiteralExpr",7],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18],[") -> ",17],["BooleanLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeCapitalSelfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCapitalSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCapitalSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureItem(specifier:name:assignToken:expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItem",7],["(",17],["specifier",1],[": ",17],["TokenListSyntax",18,509],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItem",7],["(",17],["specifier",1],[": ",17],["TokenListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]]},{"p":["SyntaxFactory","makeElseIfContinuation(ifStatement:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseIfContinuation",7],["(",17],["ifStatement",1],[": ",17],["IfStmtSyntax",18,459],[") -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseIfContinuation",7],["(",17],["ifStatement",1],[": ",17],["IfStmtSyntax",18],[") -> ",17],["ElseIfContinuationSyntax",18]]},{"p":["SyntaxFactory","makeFallthroughKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFileprivateKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFileprivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFileprivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeGenericRequirement(body:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirement",7],["(",17],["body",1],[": ",17],["Syntax",18,521],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirement",7],["(",17],["body",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericRequirementSyntax",18]]},{"p":["SyntaxFactory","makeGenericWhereClause(whereKeyword:requirementList:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["requirementList",1],[": ",17],["GenericRequirementListSyntax",18,384],[") -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementList",1],[": ",17],["GenericRequirementListSyntax",18],[") -> ",17],["GenericWhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigClauseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClauseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["IfConfigClauseSyntax",18,143],["]) -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClauseList",7],["([",17],["IfConfigClauseSyntax",18],["]) -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["SyntaxFactory","makeIntegerLiteralExpr(digits:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteralExpr",7],["(",17],["digits",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteralExpr",7],["(",17],["digits",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IntegerLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclListItem(decl:semicolon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclListItem",7],["(",17],["decl",1],[": ",17],["DeclSyntax",18,450],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclListItem",7],["(",17],["decl",1],[": ",17],["DeclSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]]},{"p":["SyntaxFactory","makePatternBindingList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBindingList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PatternBindingSyntax",18,149],["]) -> ",17],["PatternBindingListSyntax",18,294]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBindingList",7],["([",17],["PatternBindingSyntax",18],["]) -> ",17],["PatternBindingListSyntax",18]]},{"p":["SyntaxFactory","makePoundAssertKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundColumnKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundDsohandleExpr(poundDsohandle:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleExpr",7],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleExpr",7],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundDsohandleExprSyntax",18]]},{"p":["SyntaxFactory","makePoundElseifKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFileIDKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixOperatorExpr(operatorToken:postfixExpression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["postfixExpression",1],[": ",17],["ExprSyntax",18,451],[") -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["postfixExpression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["PrefixOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeRawStringDelimiter(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRawStringDelimiter",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRawStringDelimiter",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSelfTypeIdentifier(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TypeSyntax",18,453]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeSwitchDefaultLabel(defaultKeyword:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchDefaultLabel",7],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchDefaultLabel",7],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchDefaultLabelSyntax",18]]},{"p":["SyntaxFactory","makeAccessLevelModifier(name:leftParen:modifier:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessLevelModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessLevelModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]]},{"p":["SyntaxFactory","makeAccessPathComponent(name:trailingDot:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPathComponent",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPathComponent",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]]},{"p":["SyntaxFactory","makeBlankAssignmentExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssignmentExpr",7],["() -> ",17],["AssignmentExprSyntax",18,129]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssignmentExpr",7],["() -> ",17],["AssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttributedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributedType",7],["() -> ",17],["AttributedTypeSyntax",18,131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributedType",7],["() -> ",17],["AttributedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryExpr",7],["() -> ",17],["DictionaryExprSyntax",18,133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryExpr",7],["() -> ",17],["DictionaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryType",7],["() -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryType",7],["() -> ",17],["DictionaryTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionStmt",7],["() -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionStmt",7],["() -> ",17],["ExpressionStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierExpr",7],["() -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierExpr",7],["() -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierList",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierList",7],["() -> ",17],["IdentifierListSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClause",7],["() -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClause",7],["() -> ",17],["IfConfigClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclList",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclList",7],["() -> ",17],["MemberDeclListSyntax",18]]},{"p":["SyntaxFactory","makeBlankNilLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNilLiteralExpr",7],["() -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNilLiteralExpr",7],["() -> ",17],["NilLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPatternBinding()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBinding",7],["() -> ",17],["PatternBindingSyntax",18,149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBinding",7],["() -> ",17],["PatternBindingSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundErrorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundErrorDecl",7],["() -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundErrorDecl",7],["() -> ",17],["PoundErrorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSpecializeExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeExpr",7],["() -> ",17],["SpecializeExprSyntax",18,153]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeExpr",7],["() -> ",17],["SpecializeExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCaseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseList",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseList",7],["() -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeAnnotation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeAnnotation",7],["() -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeAnnotation",7],["() -> ",17],["TypeAnnotationSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownPattern",7],["() -> ",17],["UnknownPatternSyntax",18,159]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownPattern",7],["() -> ",17],["UnknownPatternSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["EnumCaseElementSyntax",18,168],["]) -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElementList",7],["([",17],["EnumCaseElementSyntax",18],["]) -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgumentList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericArgumentSyntax",18,176],["]) -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentList",7],["([",17],["GenericArgumentSyntax",18],["]) -> ",17],["GenericArgumentListSyntax",18]]},{"p":["SyntaxFactory","makePostfixIfConfigExpr(base:config:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixIfConfigExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18,451],["?, ",17],["config",1],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixIfConfigExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18],["?, ",17],["config",1],[": ",17],["IfConfigDeclSyntax",18],[") -> ",17],["PostfixIfConfigExprSyntax",18]]},{"p":["SyntaxFactory","makePoundKeyPathKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundKeyPathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundKeyPathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocation(poundSourceLocation:leftParen:args:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocation",7],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["args",1],[": ",17],["PoundSourceLocationArgsSyntax",18,392],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocation",7],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["args",1],[": ",17],["PoundSourceLocationArgsSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundSourceLocationSyntax",18]]},{"p":["SyntaxFactory","makePoundWarningKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupDecl(attributes:modifiers:precedencegroupKeyword:identifier:leftBrace:groupAttributes:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,454],[", ",17],["groupAttributes",1],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["groupAttributes",1],[": ",17],["PrecedenceGroupAttributeListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]]},{"p":["SyntaxFactory","makeSameTypeRequirement(leftTypeIdentifier:equalityToken:rightTypeIdentifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSameTypeRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18,453],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18,454],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSameTypeRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18],[") -> ",17],["SameTypeRequirementSyntax",18]]},{"p":["SyntaxFactory","makeTargetFunctionEntry(label:colon:declname:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTargetFunctionEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["declname",1],[": ",17],["DeclNameSyntax",18,469],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTargetFunctionEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["declname",1],[": ",17],["DeclNameSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]]},{"p":["SyntaxFactory","makeTuplePatternElement(labelName:labelColon:pattern:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElement",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElement",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]]},{"p":["SyntaxFactory","makeValueBindingPattern(letOrVarKeyword:valuePattern:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeValueBindingPattern",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["valuePattern",1],[": ",17],["PatternSyntax",18,463],[") -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeValueBindingPattern",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["valuePattern",1],[": ",17],["PatternSyntax",18],[") -> ",17],["ValueBindingPatternSyntax",18]]},{"p":["SyntaxFactory","make__FUNCTION__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__FUNCTION__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__FUNCTION__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityArgument(entry:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityArgument",7],["(",17],["entry",1],[": ",17],["Syntax",18,521],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityArgument",7],["(",17],["entry",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilitySpecList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilitySpecList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AvailabilityArgumentSyntax",18,324],["]) -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilitySpecList",7],["([",17],["AvailabilityArgumentSyntax",18],["]) -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchClauseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClauseList",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClauseList",7],["() -> ",17],["CatchClauseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionType",7],["() -> ",17],["CompositionTypeSyntax",18,162]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionType",7],["() -> ",17],["CompositionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankCustomAttribute()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCustomAttribute",7],["() -> ",17],["CustomAttributeSyntax",18,164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCustomAttribute",7],["() -> ",17],["CustomAttributeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclarationStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclarationStmt",7],["() -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclarationStmt",7],["() -> ",17],["DeclarationStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElement",7],["() -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElement",7],["() -> ",17],["EnumCaseElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCasePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCasePattern",7],["() -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCasePattern",7],["() -> ",17],["EnumCasePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankFallthroughStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFallthroughStmt",7],["() -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFallthroughStmt",7],["() -> ",17],["FallthroughStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankForcedValueExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForcedValueExpr",7],["() -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForcedValueExpr",7],["() -> ",17],["ForcedValueExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgument",7],["() -> ",17],["GenericArgumentSyntax",18,176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgument",7],["() -> ",17],["GenericArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankInitializerDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerDecl",7],["() -> ",17],["InitializerDeclSyntax",18,178]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerDecl",7],["() -> ",17],["InitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankKeyPathBaseExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclBlock",7],["() -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclBlock",7],["() -> ",17],["MemberDeclBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcKeyPathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalPattern",7],["() -> ",17],["OptionalPatternSyntax",18,186]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalPattern",7],["() -> ",17],["OptionalPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankParameterClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankParameterClause",7],["() -> ",17],["ParameterClauseSyntax",18,188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankParameterClause",7],["() -> ",17],["ParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundAssertStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundAssertStmt",7],["() -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundAssertStmt",7],["() -> ",17],["PoundAssertStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundColumnExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundColumnExpr",7],["() -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundColumnExpr",7],["() -> ",17],["PoundColumnExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFileIDExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankRepeatWhileStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCaseLabel()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabelSyntax",18]]},{"p":["SyntaxFactory","makeBlankWildcardPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWildcardPattern",7],["() -> ",17],["WildcardPatternSyntax",18,200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWildcardPattern",7],["() -> ",17],["WildcardPatternSyntax",18]]},{"p":["SyntaxFactory","makeClassRestrictionType(classKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassRestrictionType",7],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassRestrictionType",7],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClassRestrictionTypeSyntax",18]]},{"p":["SyntaxFactory","makeConditionElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ConditionElementSyntax",18,208],["]) -> ",17],["ConditionElementListSyntax",18,330]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElementList",7],["([",17],["ConditionElementSyntax",18],["]) -> ",17],["ConditionElementListSyntax",18]]},{"p":["SyntaxFactory","makeConstrainedSugarType(someOrAnySpecifier:baseType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConstrainedSugarType",7],["(",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["baseType",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["ConstrainedSugarTypeSyntax",18,332]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConstrainedSugarType",7],["(",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18],[", ",17],["baseType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["ConstrainedSugarTypeSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArgumentList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgumentList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DeclNameArgumentSyntax",18,210],["]) -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgumentList",7],["([",17],["DeclNameArgumentSyntax",18],["]) -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeExclamationMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExclamationMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExclamationMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameterList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericParameterSyntax",18,218],["]) -> ",17],["GenericParameterListSyntax",18,336]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterList",7],["([",17],["GenericParameterSyntax",18],["]) -> ",17],["GenericParameterListSyntax",18]]},{"p":["SyntaxFactory","makeMemberTypeIdentifier(baseType:period:name:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberTypeIdentifier",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["period",1],[": ",17],["TokenSyntax",18,454],[", ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberTypeIdentifier",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeOptionalChainingExpr(expression:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalChainingExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,451],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["OptionalChainingExprSyntax",18,340]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalChainingExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalChainingExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFilePathKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFunctionKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSelectorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSelectorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSelectorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixAmpersandToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixAmpersandToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixAmpersandToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSimpleTypeIdentifier(name:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSimpleTypeIdentifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,342]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSimpleTypeIdentifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeSpacedBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpacedBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTupleExprElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TupleExprElementSyntax",18,230],["]) -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElementList",7],["([",17],["TupleExprElementSyntax",18],["]) -> ",17],["TupleExprElementListSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TupleTypeElementSyntax",18,232],["]) -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElementList",7],["([",17],["TupleTypeElementSyntax",18],["]) -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeAssociatedtypeKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"MARK: Token Creation APIs"},{"p":["SyntaxFactory","makeAvailabilityCondition(poundAvailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityCondition",7],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityCondition",7],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AvailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBackDeployVersionList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployVersionList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["BackDeployVersionArgumentSyntax",18,406],["]) -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployVersionList",7],["([",17],["BackDeployVersionArgumentSyntax",18],["]) -> ",17],["BackDeployVersionListSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElementList",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElementList",7],["() -> ",17],["ArrayElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureParamList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParamList",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParamList",7],["() -> ",17],["ClosureParamListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureSignature",7],["() -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureSignature",7],["() -> ",17],["ClosureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankConditionElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElement",7],["() -> ",17],["ConditionElementSyntax",18,208]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElement",7],["() -> ",17],["ConditionElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgument",7],["() -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgument",7],["() -> ",17],["DeclNameArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankFloatLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionCallExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionCallExpr",7],["() -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionCallExpr",7],["() -> ",17],["FunctionCallExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDeclName",7],["() -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDeclName",7],["() -> ",17],["FunctionDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameter",7],["() -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameter",7],["() -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberAccessExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberAccessExpr",7],["() -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberAccessExpr",7],["() -> ",17],["MemberAccessExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcSelectorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPostfixUnaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundWarningDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundWarningDecl",7],["() -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundWarningDecl",7],["() -> ",17],["PoundWarningDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankRegexLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExprElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElement",7],["() -> ",17],["TupleExprElementSyntax",18,230]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElement",7],["() -> ",17],["TupleExprElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleTypeElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElement",7],["() -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElement",7],["() -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DictionaryElementSyntax",18,244],["]) -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElementList",7],["([",17],["DictionaryElementSyntax",18],["]) -> ",17],["DictionaryElementListSyntax",18]]},{"p":["SyntaxFactory","makeDiscardAssignmentExpr(wildcard:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDiscardAssignmentExpr",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DiscardAssignmentExprSyntax",18,354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDiscardAssignmentExpr",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DiscardAssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeEditorPlaceholderExpr(identifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEditorPlaceholderExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["EditorPlaceholderExprSyntax",18,356]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEditorPlaceholderExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[") -> ",17],["EditorPlaceholderExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionParameterList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameterList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["FunctionParameterSyntax",18,250],["]) -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameterList",7],["([",17],["FunctionParameterSyntax",18],["]) -> ",17],["FunctionParameterListSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgumentClause(leftAngleBracket:arguments:rightAngleBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["arguments",1],[": ",17],["GenericArgumentListSyntax",18,308],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["GenericArgumentListSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SyntaxFactory","makePoundAvailableKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAvailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAvailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundDsohandleKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrimaryAssociatedType(attributes:name:colon:inheritedType:initializer:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedType",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18,453],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,370],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedType",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralSegments(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralSegments",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,521],["]) -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralSegments",7],["([",17],["Syntax",18],["]) -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["SyntaxFactory","makeSymbolicReferenceExpr(identifier:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSymbolicReferenceExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["SymbolicReferenceExprSyntax",18,366]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSymbolicReferenceExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]]},{"p":["SyntaxFactory","makeTypeInheritanceClause(colon:inheritedTypeCollection:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInheritanceClause",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["inheritedTypeCollection",1],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["TypeInheritanceClauseSyntax",18,368]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInheritanceClause",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollection",1],[": ",17],["InheritedTypeListSyntax",18],[") -> ",17],["TypeInheritanceClauseSyntax",18]]},{"p":["SyntaxFactory","makeTypeInitializerClause(equal:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18,454],[", ",17],["value",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["TypeInitializerClauseSyntax",18,370]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeInitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeUnresolvedPatternExpr(pattern:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnresolvedPatternExpr",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[") -> ",17],["UnresolvedPatternExprSyntax",18,372]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnresolvedPatternExpr",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[") -> ",17],["UnresolvedPatternExprSyntax",18]]},{"p":["SyntaxFactory","make__DSO_HANDLE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__DSO_HANDLE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__DSO_HANDLE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorParameter",7],["() -> ",17],["AccessorParameterSyntax",18,234]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorParameter",7],["() -> ",17],["AccessorParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityEntry",7],["() -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityEntry",7],["() -> ",17],["AvailabilityEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlockItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItemList",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItemList",7],["() -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArguments",7],["() -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArguments",7],["() -> ",17],["DeclNameArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeinitializerDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeinitializerDecl",7],["() -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeinitializerDecl",7],["() -> ",17],["DeinitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElement",7],["() -> ",17],["DictionaryElementSyntax",18,244]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElement",7],["() -> ",17],["DictionaryElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionPattern",7],["() -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionPattern",7],["() -> ",17],["ExpressionPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionSegment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionSegment",7],["() -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionSegment",7],["() -> ",17],["ExpressionSegmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameter",7],["() -> ",17],["FunctionParameterSyntax",18,250]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameter",7],["() -> ",17],["FunctionParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionSignature",7],["() -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionSignature",7],["() -> ",17],["FunctionSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierPattern",7],["() -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierPattern",7],["() -> ",17],["IdentifierPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankInheritedTypeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedTypeList",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedTypeList",7],["() -> ",17],["InheritedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankInitializerClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerClause",7],["() -> ",17],["InitializerClauseSyntax",18,258]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerClause",7],["() -> ",17],["InitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankNonEmptyTokenList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjCSelectorPiece()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPieceSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjectLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFilePathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFunctionExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankQualifiedDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankQualifiedDeclName",7],["() -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankQualifiedDeclName",7],["() -> ",17],["QualifiedDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralExpr",7],["() -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralExpr",7],["() -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ClosureCaptureItemSyntax",18,280],["]) -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItemList",7],["([",17],["ClosureCaptureItemSyntax",18],["]) -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["SyntaxFactory","makeCompositionTypeElement(type:ampersand:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,453],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CompositionTypeElementSyntax",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeConformanceRequirement(leftTypeIdentifier:colon:rightTypeIdentifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConformanceRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18,453],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18,453],[") -> ",17],["ConformanceRequirementSyntax",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConformanceRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18],[") -> ",17],["ConformanceRequirementSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParam(parameter:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParam",7],["(",17],["parameter",1],[": ",17],["Syntax",18,521],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamSyntax",18,380]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParam",7],["(",17],["parameter",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameterClause(leftAngleBracket:genericParameterList:rightAngleBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["genericParameterList",1],[": ",17],["GenericParameterListSyntax",18,336],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterList",1],[": ",17],["GenericParameterListSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeGenericRequirementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericRequirementSyntax",18,284],["]) -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirementList",7],["([",17],["GenericRequirementSyntax",18],["]) -> ",17],["GenericRequirementListSyntax",18]]},{"p":["SyntaxFactory","makeInfixQuestionMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLabeledSpecializeEntry(label:colon:value:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLabeledSpecializeEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["value",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLabeledSpecializeEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]]},{"p":["SyntaxFactory","makeLeftSquareBracketToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedencegroupKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedencegroupKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedencegroupKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeUnspacedBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnspacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnspacedBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAssociatedtypeDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankBinaryOperatorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankBooleanLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankElseIfContinuation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseIfContinuation",7],["() -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseIfContinuation",7],["() -> ",17],["ElseIfContinuationSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirement",7],["() -> ",17],["GenericRequirementSyntax",18,284]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirement",7],["() -> ",17],["GenericRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericWhereClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericWhereClause",7],["() -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericWhereClause",7],["() -> ",17],["GenericWhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigClauseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClauseList",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClauseList",7],["() -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankIntegerLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclListItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclListItem",7],["() -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclListItem",7],["() -> ",17],["MemberDeclListItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankPatternBindingList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBindingList",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBindingList",7],["() -> ",17],["PatternBindingListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundDsohandleExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrefixOperatorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchDefaultLabel()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabelSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureSignature(leftSquare:items:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureSignature",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,454],[", ",17],["items",1],[": ",17],["ClosureCaptureItemListSyntax",18,374],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureSignature",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["items",1],[": ",17],["ClosureCaptureItemListSyntax",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureCaptureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParams(leftParen:diffParams:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParams",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["diffParams",1],[": ",17],["DifferentiabilityParamListSyntax",18,414],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParams",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParams",1],[": ",17],["DifferentiabilityParamListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DifferentiabilityParamsSyntax",18]]},{"p":["SyntaxFactory","makePoundFileLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocationArgs(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationArgs",7],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18,454],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18,454],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,454],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18,454],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationArgs",7],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundSourceLocationArgsSyntax",18]]},{"p":["SyntaxFactory","makePoundUnavailableKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundUnavailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundUnavailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupNameList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PrecedenceGroupNameElementSyntax",18,418],["]) -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameList",7],["([",17],["PrecedenceGroupNameElementSyntax",18],["]) -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupRelation(higherThanOrLowerThan:colon:otherNames:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupRelation",7],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["otherNames",1],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[") -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupRelation",7],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNames",1],[": ",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["PrecedenceGroupRelationSyntax",18]]},{"p":["SyntaxFactory","makeRightSquareBracketToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTuplePatternElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TuplePatternElementSyntax",18,320],["]) -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElementList",7],["([",17],["TuplePatternElementSyntax",18],["]) -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["SyntaxFactory","makeUnavailabilityCondition(poundUnavailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnavailabilityCondition",7],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,454],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnavailabilityCondition",7],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["UnavailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessLevelModifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessLevelModifier",7],["() -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessLevelModifier",7],["() -> ",17],["AccessLevelModifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessPathComponent()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPathComponent",7],["() -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPathComponent",7],["() -> ",17],["AccessPathComponentSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElementList",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElementList",7],["() -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgumentList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentList",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentList",7],["() -> ",17],["GenericArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPostfixIfConfigExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundSourceLocation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocation",7],["() -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocation",7],["() -> ",17],["PoundSourceLocationSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSameTypeRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSameTypeRequirement",7],["() -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSameTypeRequirement",7],["() -> ",17],["SameTypeRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTargetFunctionEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePatternElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElement",7],["() -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElement",7],["() -> ",17],["TuplePatternElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankValueBindingPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankValueBindingPattern",7],["() -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankValueBindingPattern",7],["() -> ",17],["ValueBindingPatternSyntax",18]]},{"p":["SyntaxFactory","makeMatchingPatternCondition(caseKeyword:pattern:typeAnnotation:initializer:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMatchingPatternCondition",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMatchingPatternCondition",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],[") -> ",17],["MatchingPatternConditionSyntax",18]]},{"p":["SyntaxFactory","makeOptionalBindingCondition(letOrVarKeyword:pattern:typeAnnotation:initializer:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalBindingCondition",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18,463],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalBindingCondition",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],[") -> ",17],["OptionalBindingConditionSyntax",18]]},{"p":["SyntaxFactory","makePostfixQuestionMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundColorLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColorLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColorLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundImageLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundImageLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundImageLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBackDeployVersionArgument(availabilityVersionRestriction:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployVersionArgument",7],["(",17],["availabilityVersionRestriction",1],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BackDeployVersionArgumentSyntax",18,406]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployVersionArgument",7],["(",17],["availabilityVersionRestriction",1],[": ",17],["AvailabilityVersionRestrictionSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["BackDeployVersionArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityArgument",7],["() -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityArgument",7],["() -> ",17],["AvailabilityArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilitySpecList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClassRestrictionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassRestrictionType",7],["() -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassRestrictionType",7],["() -> ",17],["ClassRestrictionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankConditionElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElementList",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElementList",7],["() -> ",17],["ConditionElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankConstrainedSugarType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarTypeSyntax",18,332]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArgumentList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameterList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterList",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterList",7],["() -> ",17],["GenericParameterListSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberTypeIdentifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalChainingExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExprSyntax",18,340]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSimpleTypeIdentifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifierSyntax",18,342]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExprElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElementList",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElementList",7],["() -> ",17],["TupleExprElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleTypeElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElementList",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElementList",7],["() -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeMultilineStringQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultilineStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultilineStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAssignment(assignmentKeyword:colon:flag:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssignment",7],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["flag",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PrecedenceGroupAssignmentSyntax",18,408]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssignment",7],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupAssignmentSyntax",18]]},{"p":["SyntaxFactory","makePrimaryAssociatedTypeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PrimaryAssociatedTypeSyntax",18,362],["]) -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeList",7],["([",17],["PrimaryAssociatedTypeSyntax",18],["]) -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityCondition",7],["() -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityCondition",7],["() -> ",17],["AvailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankBackDeployVersionList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployVersionList",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployVersionList",7],["() -> ",17],["BackDeployVersionListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElementList",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElementList",7],["() -> ",17],["DictionaryElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDiscardAssignmentExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExprSyntax",18,354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankEditorPlaceholderExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExprSyntax",18,356]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionParameterList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameterList",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameterList",7],["() -> ",17],["FunctionParameterListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgumentClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentClause",7],["() -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentClause",7],["() -> ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrimaryAssociatedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringLiteralSegments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralSegments",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralSegments",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankSymbolicReferenceExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExprSyntax",18,366]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeInheritanceClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClauseSyntax",18,368]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeInitializerClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInitializerClause",7],["() -> ",17],["TypeInitializerClauseSyntax",18,370]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInitializerClause",7],["() -> ",17],["TypeInitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnresolvedPatternExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExprSyntax",18,372]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExprSyntax",18]]},{"p":["SyntaxFactory","makeCompositionTypeElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CompositionTypeElementSyntax",18,376],["]) -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElementList",7],["([",17],["CompositionTypeElementSyntax",18],["]) -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParamList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DifferentiabilityParamSyntax",18,380],["]) -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamList",7],["([",17],["DifferentiabilityParamSyntax",18],["]) -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["SyntaxFactory","makeOperatorPrecedenceAndTypes(colon:precedenceGroupAndDesignatedTypes:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorPrecedenceAndTypes",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18,416]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorPrecedenceAndTypes",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["IdentifierListSyntax",18],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocationKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupNameElement(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,454],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,418]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityLabeledArgument(label:colon:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityLabeledArgument",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["value",1],[": ",17],["Syntax",18,521],[") -> ",17],["AvailabilityLabeledArgumentSyntax",18,420]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityLabeledArgument",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["Syntax",18],[") -> ",17],["AvailabilityLabeledArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBackDeployAttributeSpecList(beforeLabel:colon:versionList:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployAttributeSpecList",7],["(",17],["beforeLabel",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["versionList",1],[": ",17],["BackDeployVersionListSyntax",18,350],[") -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBackDeployAttributeSpecList",7],["(",17],["beforeLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["versionList",1],[": ",17],["BackDeployVersionListSyntax",18],[") -> ",17],["BackDeployAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionTypeElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElement",7],["() -> ",17],["CompositionTypeElementSyntax",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElement",7],["() -> ",17],["CompositionTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankConformanceRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConformanceRequirement",7],["() -> ",17],["ConformanceRequirementSyntax",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConformanceRequirement",7],["() -> ",17],["ConformanceRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParam()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParamSyntax",18,380]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParamSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameterClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterClause",7],["() -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterClause",7],["() -> ",17],["GenericParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericRequirementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirementList",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirementList",7],["() -> ",17],["GenericRequirementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankLabeledSpecializeEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntrySyntax",18]]},{"p":["SyntaxFactory","makePrimaryAssociatedTypeClause(leftAngleBracket:primaryAssociatedTypeList:rightAngleBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,454],[", ",17],["primaryAssociatedTypeList",1],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["primaryAssociatedTypeList",1],[": ",17],["PrimaryAssociatedTypeListSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]]},{"p":["SyntaxFactory","makeSpecializeAttributeSpecList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeAttributeSpecList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,521],["]) -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeAttributeSpecList",7],["([",17],["Syntax",18],["]) -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParams()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParamsSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundSourceLocationArgs()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgsSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupNameList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupRelation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelationSyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePatternElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElementList",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElementList",7],["() -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnavailabilityCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnavailabilityCondition",7],["() -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnavailabilityCondition",7],["() -> ",17],["UnavailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeImplementsAttributeArguments(type:comma:declBaseName:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImplementsAttributeArguments",7],["(",17],["type",1],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,454],[", ",17],["declBaseName",1],[": ",17],["Syntax",18,521],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImplementsAttributeArguments",7],["(",17],["type",1],[": ",17],["SimpleTypeIdentifierSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["declBaseName",1],[": ",17],["Syntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeNamedAttributeStringArgument(nameTok:colon:stringOrDeclname:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNamedAttributeStringArgument",7],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["stringOrDeclname",1],[": ",17],["Syntax",18,521],[") -> ",17],["NamedAttributeStringArgumentSyntax",18,430]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNamedAttributeStringArgument",7],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["stringOrDeclname",1],[": ",17],["Syntax",18],[") -> ",17],["NamedAttributeStringArgumentSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAssociativity(associativityKeyword:colon:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssociativity",7],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["value",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["PrecedenceGroupAssociativitySyntax",18,432]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssociativity",7],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupAssociativitySyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAttributeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAttributeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,521],["]) -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAttributeList",7],["([",17],["Syntax",18],["]) -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankMatchingPatternCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMatchingPatternCondition",7],["() -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMatchingPatternCondition",7],["() -> ",17],["MatchingPatternConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalBindingCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalBindingCondition",7],["() -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalBindingCondition",7],["() -> ",17],["OptionalBindingConditionSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParamsClause(wrtLabel:colon:parameters:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamsClause",7],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["parameters",1],[": ",17],["Syntax",18,521],[") -> ",17],["DifferentiabilityParamsClauseSyntax",18,436]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamsClause",7],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["Syntax",18],[") -> ",17],["DifferentiabilityParamsClauseSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityVersionRestriction(platform:version:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityVersionRestriction",7],["(",17],["platform",1],[": ",17],["TokenSyntax",18,454],[", ",17],["version",1],[": ",17],["VersionTupleSyntax",18,97],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,438]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityVersionRestriction",7],["(",17],["platform",1],[": ",17],["TokenSyntax",18],[", ",17],["version",1],[": ",17],["VersionTupleSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]]},{"p":["SyntaxFactory","makeBlankBackDeployVersionArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgumentSyntax",18,406]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAssignment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignmentSyntax",18,408]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrimaryAssociatedTypeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeMultipleTrailingClosureElement(label:colon:closure:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["closure",1],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["closure",1],[": ",17],["ClosureExprSyntax",18],[") -> ",17],["MultipleTrailingClosureElementSyntax",18]]},{"p":["SyntaxFactory","makeStringInterpolationAnchorToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringInterpolationAnchorToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringInterpolationAnchorToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionTypeElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParamList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["SyntaxFactory","makeBlankOperatorPrecedenceAndTypes()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypesSyntax",18,416]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypesSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupNameElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18,418]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18]]},{"p":["SyntaxFactory","makeImplicitlyUnwrappedOptionalType(wrappedType:exclamationMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImplicitlyUnwrappedOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18,453],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImplicitlyUnwrappedOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityLabeledArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgumentSyntax",18,420]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankBackDeployAttributeSpecList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrimaryAssociatedTypeClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankSpecializeAttributeSpecList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiableAttributeArguments(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiableAttributeArguments",7],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["whereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiableAttributeArguments",7],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankImplementsAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankNamedAttributeStringArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgumentSyntax",18,430]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAssociativity()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativitySyntax",18,432]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativitySyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAttributeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParamsClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClauseSyntax",18,436]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClauseSyntax",18]]},{"p":["SyntaxFactory","makeMultipleTrailingClosureElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["MultipleTrailingClosureElementSyntax",18,440],["]) -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElementList",7],["([",17],["MultipleTrailingClosureElementSyntax",18],["]) -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityVersionRestriction()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestrictionSyntax",18,438]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestrictionSyntax",18]]},{"p":["SyntaxFactory","makeBlankMultipleTrailingClosureElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankImplicitlyUnwrappedOptionalType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiableAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankMultipleTrailingClosureElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["SyntaxFactory","makeDerivativeRegistrationAttributeArguments(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDerivativeRegistrationAttributeArguments",7],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18,454],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,454],[", ",17],["originalDeclName",1],[": ",17],["QualifiedDeclNameSyntax",18,270],[", ",17],["period",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18,454],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDerivativeRegistrationAttributeArguments",7],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["QualifiedDeclNameSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankDerivativeRegistrationAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeToken(_:presence:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeToken",7],["(",17],["_",1],[" ",17],["kind",2],[": ",17],["TokenKind",18,24],[", ",17],["presence",1],[": ",17],["SourcePresence",18,23],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,542],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,542],[" = []) -> ",17],["TokenSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeToken",7],["(",17],["TokenKind",18],[", ",17],["presence",1],[": ",17],["SourcePresence",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxVerifier","verify(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["verify",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[") ",17],["throws",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["verify",7],["(",17],["Syntax",18],[") ",17],["throws",12]]},{"p":["Trivia","garbageText(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["garbageText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["garbageText",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for GarbageText."},{"p":["Trivia","lineComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["lineComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["lineComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for LineComment."},{"p":["Trivia","blockComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["blockComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["blockComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for BlockComment."},{"p":["Trivia","verticalTabs(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["verticalTabs",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["verticalTabs",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\u{2B7F}' characters."},{"p":["Trivia","docLineComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["docLineComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["docLineComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for DocLineComment."},{"p":["Trivia","carriageReturns(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturns",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturns",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\r' characters."},{"p":["Trivia","docBlockComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["docBlockComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7772],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["docBlockComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for DocBlockComment."},{"p":["Trivia","carriageReturnLineFeeds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\r\\n' characters."},{"p":["Trivia","tabs(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tabs",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tabs",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\t' characters."},{"p":["Trivia","spaces(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["spaces",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["spaces",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of ' ' characters."},{"p":["Trivia","newlines(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["newlines",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["newlines",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\n' characters."},{"p":["Trivia","formfeeds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["formfeeds",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7823],[") -> ",17],["Trivia",18,542]],"s":[["static",12],[" ",17],["func",12],[" ",17],["formfeeds",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\u{240C}' characters."},{"p":["AccessPathSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AccessPathSyntax` with that element prepended to the\n           beginning."},{"p":["AccessPathSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessPathSyntax",18,25],[".",17],["Iterator",18,26]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessPathSyntax",18],[".",17],["Iterator",18]]},{"p":["AccessPathSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the last element.\n\n- Returns: A new `AccessPathSyntax` with the last element removed."},{"p":["AccessPathSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the first element.\n\n- Returns: A new `AccessPathSyntax` with the first element removed."},{"p":["AccessPathSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with all trivia removed."},{"p":["AccessPathSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AccessPathSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AccessPathSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its leading trivia removed."},{"p":["AccessPathSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its trailing trivia removed."},{"p":["AccessPathSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessPathSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessPathSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AccessPathComponentSyntax",18,304],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AccessPathComponentSyntax",18],["?",17]]},{"p":["AccessPathSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["AccessPathSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AccessPathSyntax` with the element at the provided index\n           removed."},{"p":["AccessPathSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AccessPathSyntax` with that element appended to the end."},{"p":["AccessPathSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AccessPathComponentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AccessPathSyntax` with that element appended to the end."},{"p":["AccessPathSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AccessPathSyntax` with the new element at the provided index."},{"p":["ImportDeclSyntax","withImportTok(_:)"],"f":[["func",12],[" ",17],["withImportTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withImportTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `importTok` replaced.\n- param newChild: The new `importTok` to replace the node's\n                  current `importTok`, if present."},{"p":["ImportDeclSyntax","withImportKind(_:)"],"f":[["func",12],[" ",17],["withImportKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withImportKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `importKind` replaced.\n- param newChild: The new `importKind` to replace the node's\n                  current `importKind`, if present."},{"p":["ImportDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ImportDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ImportDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["ImportDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ImportDeclSyntax","addPathComponent(_:)"],"f":[["func",12],[" ",17],["addPathComponent",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `PathComponent` to the node's `path`\ncollection.\n- param element: The new `PathComponent` to add to the node's\n                 `path` collection.\n- returns: A copy of the receiver with the provided `PathComponent`\n           appended to its `path` collection."},{"p":["ImportDeclSyntax","withPath(_:)"],"f":[["func",12],[" ",17],["withPath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessPathSyntax",18,25],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withPath",7],["(",17],["AccessPathSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `path` replaced.\n- param newChild: The new `path` to replace the node's\n                  current `path`, if present."},{"p":["ImportDeclSyntaxBuilder","useImportTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useImportTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useImportTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","useImportKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useImportKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useImportKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addPathComponent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addPathComponent",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["addPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[")",17]]},{"p":["ReturnStmtSyntax","withReturnKeyword(_:)"],"f":[["func",12],[" ",17],["withReturnKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["func",12],[" ",17],["withReturnKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]],"d":"Returns a copy of the receiver with its `returnKeyword` replaced.\n- param newChild: The new `returnKeyword` to replace the node's\n                  current `returnKeyword`, if present."},{"p":["ReturnStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ReturnStmtSyntaxBuilder","useReturnKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useReturnKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ReturnStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SourceFileSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SourceFileSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["SourceFileSyntax","withEOFToken(_:)"],"f":[["func",12],[" ",17],["withEOFToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["withEOFToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SourceFileSyntax",18]],"d":"Returns a copy of the receiver with its `eofToken` replaced.\n- param newChild: The new `eofToken` to replace the node's\n                  current `eofToken`, if present."},{"p":["SourceFileSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["SourceFileSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present."},{"p":["SourceFileSyntaxBuilder","useEOFToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEOFToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEOFToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SourceFileSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["StructDeclSyntax","withStructKeyword(_:)"],"f":[["func",12],[" ",17],["withStructKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withStructKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `structKeyword` replaced.\n- param newChild: The new `structKeyword` to replace the node's\n                  current `structKeyword`, if present."},{"p":["StructDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["StructDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["StructDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["StructDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["StructDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["StructDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["StructDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["StructDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["StructDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["StructDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["StructDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["StructDeclSyntaxBuilder","useStructKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useStructKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useStructKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SwitchCaseSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SwitchCaseSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["SwitchCaseSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present."},{"p":["SwitchCaseSyntax","withUnknownAttr(_:)"],"f":[["func",12],[" ",17],["withUnknownAttr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeSyntax",18,485],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withUnknownAttr",7],["(",17],["AttributeSyntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `unknownAttr` replaced.\n- param newChild: The new `unknownAttr` to replace the node's\n                  current `unknownAttr`, if present."},{"p":["SwitchCaseSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["Syntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["SwitchCaseSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["SwitchCaseSyntaxBuilder","useUnknownAttr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useUnknownAttr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[")",17]],"s":[["func",12],[" ",17],["useUnknownAttr",7],["(",17],["AttributeSyntax",18],[")",17]]},{"p":["SwitchCaseSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["Syntax",18],[")",17]]},{"p":["SwitchStmtSyntax","withSwitchKeyword(_:)"],"f":[["func",12],[" ",17],["withSwitchKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withSwitchKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `switchKeyword` replaced.\n- param newChild: The new `switchKeyword` to replace the node's\n                  current `switchKeyword`, if present."},{"p":["SwitchStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["SwitchStmtSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["SwitchStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["SwitchStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["SwitchStmtSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["SwitchStmtSyntax","addCase(_:)"],"f":[["func",12],[" ",17],["addCase",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["addCase",7],["(",17],["Syntax",18],[") -> ",17],["SwitchStmtSyntax",18]],"d":"Adds the provided `Case` to the node's `cases`\ncollection.\n- param element: The new `Case` to add to the node's\n                 `cases` collection.\n- returns: A copy of the receiver with the provided `Case`\n           appended to its `cases` collection."},{"p":["SwitchStmtSyntax","withCases(_:)"],"f":[["func",12],[" ",17],["withCases",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["SwitchCaseListSyntax",18,155],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withCases",7],["(",17],["SwitchCaseListSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `cases` replaced.\n- param newChild: The new `cases` to replace the node's\n                  current `cases`, if present."},{"p":["SwitchStmtSyntaxBuilder","useSwitchKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSwitchKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSwitchKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","addCase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCase",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addCase",7],["(",17],["Syntax",18],[")",17]]},{"p":["CatchClauseSyntax","addCatchItem(_:)"],"f":[["func",12],[" ",17],["addCatchItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["addCatchItem",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchClauseSyntax",18]],"d":"Adds the provided `CatchItem` to the node's `catchItems`\ncollection.\n- param element: The new `CatchItem` to add to the node's\n                 `catchItems` collection.\n- returns: A copy of the receiver with the provided `CatchItem`\n           appended to its `catchItems` collection."},{"p":["CatchClauseSyntax","withCatchItems(_:)"],"f":[["func",12],[" ",17],["withCatchItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CatchItemListSyntax",18,105],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withCatchItems",7],["(",17],["CatchItemListSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `catchItems` replaced.\n- param newChild: The new `catchItems` to replace the node's\n                  current `catchItems`, if present."},{"p":["CatchClauseSyntax","withCatchKeyword(_:)"],"f":[["func",12],[" ",17],["withCatchKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withCatchKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `catchKeyword` replaced.\n- param newChild: The new `catchKeyword` to replace the node's\n                  current `catchKeyword`, if present."},{"p":["CatchClauseSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["CatchClauseSyntaxBuilder","addCatchItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCatchItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CatchItemSyntax",18,491],[")",17]],"s":[["func",12],[" ",17],["addCatchItem",7],["(",17],["CatchItemSyntax",18],[")",17]]},{"p":["CatchClauseSyntaxBuilder","useCatchKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCatchKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCatchKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CatchClauseSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ClosureExprSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["ClosureExprSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["ClosureExprSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["ClosureExprSyntax","withSignature(_:)"],"f":[["func",12],[" ",17],["withSignature",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureSignatureSyntax",18,206],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withSignature",7],["(",17],["ClosureSignatureSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `signature` replaced.\n- param newChild: The new `signature` to replace the node's\n                  current `signature`, if present."},{"p":["ClosureExprSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["ClosureExprSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present."},{"p":["ClosureExprSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useSignature(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSignature",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["useSignature",7],["(",17],["ClosureSignatureSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["KeyPathExprSyntax","withRootExpr(_:)"],"f":[["func",12],[" ",17],["withRootExpr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withRootExpr",7],["(",17],["ExprSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `rootExpr` replaced.\n- param newChild: The new `rootExpr` to replace the node's\n                  current `rootExpr`, if present."},{"p":["KeyPathExprSyntax","withBackslash(_:)"],"f":[["func",12],[" ",17],["withBackslash",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withBackslash",7],["(",17],["TokenSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `backslash` replaced.\n- param newChild: The new `backslash` to replace the node's\n                  current `backslash`, if present."},{"p":["KeyPathExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["KeyPathExprSyntaxBuilder","useRootExpr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRootExpr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useRootExpr",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["KeyPathExprSyntaxBuilder","useBackslash(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBackslash",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useBackslash",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["KeyPathExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntax","withColonMark(_:)"],"f":[["func",12],[" ",17],["withColonMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withColonMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `colonMark` replaced.\n- param newChild: The new `colonMark` to replace the node's\n                  current `colonMark`, if present."},{"p":["TernaryExprSyntax","withFirstChoice(_:)"],"f":[["func",12],[" ",17],["withFirstChoice",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withFirstChoice",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `firstChoice` replaced.\n- param newChild: The new `firstChoice` to replace the node's\n                  current `firstChoice`, if present."},{"p":["TernaryExprSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["TernaryExprSyntax","withSecondChoice(_:)"],"f":[["func",12],[" ",17],["withSecondChoice",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withSecondChoice",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `secondChoice` replaced.\n- param newChild: The new `secondChoice` to replace the node's\n                  current `secondChoice`, if present."},{"p":["TernaryExprSyntax","withConditionExpression(_:)"],"f":[["func",12],[" ",17],["withConditionExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withConditionExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `conditionExpression` replaced.\n- param newChild: The new `conditionExpression` to replace the node's\n                  current `conditionExpression`, if present."},{"p":["TernaryExprSyntaxBuilder","useColonMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColonMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColonMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useFirstChoice(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFirstChoice",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useFirstChoice",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useSecondChoice(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondChoice",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useSecondChoice",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useConditionExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useConditionExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useConditionExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["WhereClauseSyntax","withWhereKeyword(_:)"],"f":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["WhereClauseSyntax",18,51]],"s":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `whereKeyword` replaced.\n- param newChild: The new `whereKeyword` to replace the node's\n                  current `whereKeyword`, if present."},{"p":["WhereClauseSyntax","withGuardResult(_:)"],"f":[["func",12],[" ",17],["withGuardResult",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["WhereClauseSyntax",18,51]],"s":[["func",12],[" ",17],["withGuardResult",7],["(",17],["ExprSyntax",18],["?) -> ",17],["WhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `guardResult` replaced.\n- param newChild: The new `guardResult` to replace the node's\n                  current `guardResult`, if present."},{"p":["WhereClauseSyntaxBuilder","useWhereKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWhereKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhereClauseSyntaxBuilder","useGuardResult(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGuardResult",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useGuardResult",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["AccessorDeclSyntax","withAccessorKind(_:)"],"f":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `accessorKind` replaced.\n- param newChild: The new `accessorKind` to replace the node's\n                  current `accessorKind`, if present."},{"p":["AccessorDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AccessorDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AccessorDeclSyntax","withModifier(_:)"],"f":[["func",12],[" ",17],["withModifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclModifierSyntax",18,65],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withModifier",7],["(",17],["DeclModifierSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifier` replaced.\n- param newChild: The new `modifier` to replace the node's\n                  current `modifier`, if present."},{"p":["AccessorDeclSyntax","withParameter(_:)"],"f":[["func",12],[" ",17],["withParameter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessorParameterSyntax",18,234],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withParameter",7],["(",17],["AccessorParameterSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `parameter` replaced.\n- param newChild: The new `parameter` to replace the node's\n                  current `parameter`, if present."},{"p":["AccessorDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AccessorDeclSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["AccessorDeclSyntax","withThrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withThrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `throwsKeyword` replaced.\n- param newChild: The new `throwsKeyword` to replace the node's\n                  current `throwsKeyword`, if present."},{"p":["AccessorDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["AccessorDeclSyntaxBuilder","useAccessorKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessorKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAccessorKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useModifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["useModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["useParameter",7],["(",17],["AccessorParameterSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useThrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["AccessorListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AccessorListSyntax` with that element prepended to the\n           beginning."},{"p":["AccessorListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessorListSyntax",18,55],[".",17],["Iterator",18,56]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessorListSyntax",18],[".",17],["Iterator",18]]},{"p":["AccessorListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the last element.\n\n- Returns: A new `AccessorListSyntax` with the last element removed."},{"p":["AccessorListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the first element.\n\n- Returns: A new `AccessorListSyntax` with the first element removed."},{"p":["AccessorListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with all trivia removed."},{"p":["AccessorListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AccessorListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AccessorListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its leading trivia removed."},{"p":["AccessorListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its trailing trivia removed."},{"p":["AccessorListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessorListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AccessorListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AccessorDeclSyntax",18,53],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AccessorDeclSyntax",18],["?",17]]},{"p":["AccessorListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["AccessorListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AccessorListSyntax` with the element at the provided index\n           removed."},{"p":["AccessorListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AccessorListSyntax` with that element appended to the end."},{"p":["AccessorListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AccessorDeclSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AccessorListSyntax` with that element appended to the end."},{"p":["AccessorListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AccessorListSyntax` with the new element at the provided index."},{"p":["ArrayElementSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ArrayElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["ArrayElementSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ArrayElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CaseItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CaseItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CaseItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CaseItemListSyntax",18,59],[".",17],["Iterator",18,60]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CaseItemListSyntax",18],[".",17],["Iterator",18]]},{"p":["CaseItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the last element.\n\n- Returns: A new `CaseItemListSyntax` with the last element removed."},{"p":["CaseItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the first element.\n\n- Returns: A new `CaseItemListSyntax` with the first element removed."},{"p":["CaseItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with all trivia removed."},{"p":["CaseItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CaseItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CaseItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its leading trivia removed."},{"p":["CaseItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its trailing trivia removed."},{"p":["CaseItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CaseItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CaseItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CaseItemSyntax",18,467],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CaseItemSyntax",18],["?",17]]},{"p":["CaseItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["CaseItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CaseItemListSyntax` with the element at the provided index\n           removed."},{"p":["CaseItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CaseItemListSyntax` with that element appended to the end."},{"p":["CaseItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,467],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CaseItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CaseItemListSyntax` with that element appended to the end."},{"p":["CaseItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CaseItemListSyntax` with the new element at the provided index."},{"p":["ClosureParamSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["ClosureParamSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ClosureParamSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureParamSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ContinueStmtSyntax","withContinueKeyword(_:)"],"f":[["func",12],[" ",17],["withContinueKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["func",12],[" ",17],["withContinueKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]],"d":"Returns a copy of the receiver with its `continueKeyword` replaced.\n- param newChild: The new `continueKeyword` to replace the node's\n                  current `continueKeyword`, if present."},{"p":["ContinueStmtSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["ContinueStmtSyntaxBuilder","useContinueKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContinueKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useContinueKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ContinueStmtSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntax","withDetail(_:)"],"f":[["func",12],[" ",17],["withDetail",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetail",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detail` replaced.\n- param newChild: The new `detail` to replace the node's\n                  current `detail`, if present."},{"p":["DeclModifierSyntax","withDetailLeftParen(_:)"],"f":[["func",12],[" ",17],["withDetailLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetailLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detailLeftParen` replaced.\n- param newChild: The new `detailLeftParen` to replace the node's\n                  current `detailLeftParen`, if present."},{"p":["DeclModifierSyntax","withDetailRightParen(_:)"],"f":[["func",12],[" ",17],["withDetailRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetailRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detailRightParen` replaced.\n- param newChild: The new `detailRightParen` to replace the node's\n                  current `detailRightParen`, if present."},{"p":["DeclModifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["DeclModifierSyntaxBuilder","useDetailLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetailLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDetailLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useDetailRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetailRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDetailRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useDetail(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetail",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDetail",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["EnumCaseDeclSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["EnumCaseDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["EnumCaseDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["EnumCaseDeclSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["EnumCaseElementListSyntax",18,306],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["EnumCaseElementListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["EnumCaseDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["EnumCaseDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["EnumCaseDeclSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["EnumCaseElementSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["FunctionDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["FunctionDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["FunctionDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["FunctionDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["FunctionDeclSyntax","withSignature(_:)"],"f":[["func",12],[" ",17],["withSignature",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["FunctionSignatureSyntax",18,252],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withSignature",7],["(",17],["FunctionSignatureSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `signature` replaced.\n- param newChild: The new `signature` to replace the node's\n                  current `signature`, if present."},{"p":["FunctionDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["FunctionDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["FunctionDeclSyntax","withFuncKeyword(_:)"],"f":[["func",12],[" ",17],["withFuncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withFuncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `funcKeyword` replaced.\n- param newChild: The new `funcKeyword` to replace the node's\n                  current `funcKeyword`, if present."},{"p":["FunctionDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["FunctionDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["FunctionDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["FunctionDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useSignature(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSignature",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["useSignature",7],["(",17],["FunctionSignatureSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useFuncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFuncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFuncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["FunctionTypeSyntax","withReturnType(_:)"],"f":[["func",12],[" ",17],["withReturnType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withReturnType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `returnType` replaced.\n- param newChild: The new `returnType` to replace the node's\n                  current `returnType`, if present."},{"p":["FunctionTypeSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["FunctionTypeSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["FunctionTypeSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleTypeElementListSyntax",18,346],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["TupleTypeElementListSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["FunctionTypeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["FunctionTypeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["FunctionTypeSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["FunctionTypeSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["FunctionTypeSyntax","withArrow(_:)"],"f":[["func",12],[" ",17],["withArrow",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withArrow",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `arrow` replaced.\n- param newChild: The new `arrow` to replace the node's\n                  current `arrow`, if present."},{"p":["FunctionTypeSyntaxBuilder","useReturnType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useReturnType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useArrow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrow",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useArrow",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfConfigDeclSyntax","withClauses(_:)"],"f":[["func",12],[" ",17],["withClauses",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfConfigClauseListSyntax",18,288],["?) -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["withClauses",7],["(",17],["IfConfigClauseListSyntax",18],["?) -> ",17],["IfConfigDeclSyntax",18]],"d":"Returns a copy of the receiver with its `clauses` replaced.\n- param newChild: The new `clauses` to replace the node's\n                  current `clauses`, if present."},{"p":["IfConfigDeclSyntax","withPoundEndif(_:)"],"f":[["func",12],[" ",17],["withPoundEndif",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["withPoundEndif",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfConfigDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundEndif` replaced.\n- param newChild: The new `poundEndif` to replace the node's\n                  current `poundEndif`, if present."},{"p":["IfConfigDeclSyntax","addClause(_:)"],"f":[["func",12],[" ",17],["addClause",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["addClause",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigDeclSyntax",18]],"d":"Adds the provided `Clause` to the node's `clauses`\ncollection.\n- param element: The new `Clause` to add to the node's\n                 `clauses` collection.\n- returns: A copy of the receiver with the provided `Clause`\n           appended to its `clauses` collection."},{"p":["IfConfigDeclSyntaxBuilder","usePoundEndif(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundEndif",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundEndif",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfConfigDeclSyntaxBuilder","addClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addClause",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["addClause",7],["(",17],["IfConfigClauseSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntax","withTypeOrProtocol(_:)"],"f":[["func",12],[" ",17],["withTypeOrProtocol",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withTypeOrProtocol",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `typeOrProtocol` replaced.\n- param newChild: The new `typeOrProtocol` to replace the node's\n                  current `typeOrProtocol`, if present."},{"p":["MetatypeTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["MetatypeTypeSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["MetatypeTypeSyntaxBuilder","useTypeOrProtocol(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeOrProtocol",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTypeOrProtocol",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ModifierListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ModifierListSyntax` with that element prepended to the\n           beginning."},{"p":["ModifierListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ModifierListSyntax",18,77],[".",17],["Iterator",18,78]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ModifierListSyntax",18],[".",17],["Iterator",18]]},{"p":["ModifierListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the last element.\n\n- Returns: A new `ModifierListSyntax` with the last element removed."},{"p":["ModifierListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the first element.\n\n- Returns: A new `ModifierListSyntax` with the first element removed."},{"p":["ModifierListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with all trivia removed."},{"p":["ModifierListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ModifierListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ModifierListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its leading trivia removed."},{"p":["ModifierListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its trailing trivia removed."},{"p":["ModifierListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ModifierListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ModifierListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DeclModifierSyntax",18,65],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DeclModifierSyntax",18],["?",17]]},{"p":["ModifierListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ModifierListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ModifierListSyntax` with the element at the provided index\n           removed."},{"p":["ModifierListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ModifierListSyntax` with that element appended to the end."},{"p":["ModifierListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DeclModifierSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ModifierListSyntax` with that element appended to the end."},{"p":["ModifierListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ModifierListSyntax` with the new element at the provided index."},{"p":["ObjCSelectorSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ObjCSelectorSyntax` with that element prepended to the\n           beginning."},{"p":["ObjCSelectorSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjCSelectorSyntax",18,79],[".",17],["Iterator",18,80]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjCSelectorSyntax",18],[".",17],["Iterator",18]]},{"p":["ObjCSelectorSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the last element.\n\n- Returns: A new `ObjCSelectorSyntax` with the last element removed."},{"p":["ObjCSelectorSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the first element.\n\n- Returns: A new `ObjCSelectorSyntax` with the first element removed."},{"p":["ObjCSelectorSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with all trivia removed."},{"p":["ObjCSelectorSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ObjCSelectorSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ObjCSelectorSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its leading trivia removed."},{"p":["ObjCSelectorSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its trailing trivia removed."},{"p":["ObjCSelectorSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjCSelectorSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjCSelectorSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ObjCSelectorPieceSyntax",18,262],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ObjCSelectorPieceSyntax",18],["?",17]]},{"p":["ObjCSelectorSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ObjCSelectorSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ObjCSelectorSyntax` with the element at the provided index\n           removed."},{"p":["ObjCSelectorSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ObjCSelectorSyntax` with that element appended to the end."},{"p":["ObjCSelectorSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ObjCSelectorPieceSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ObjCSelectorSyntax` with that element appended to the end."},{"p":["ObjCSelectorSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ObjCSelectorSyntax` with the new element at the provided index."},{"p":["OperatorDeclSyntax","withOperatorPrecedenceAndTypes(_:)"],"f":[["func",12],[" ",17],["withOperatorPrecedenceAndTypes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withOperatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `operatorPrecedenceAndTypes` replaced.\n- param newChild: The new `operatorPrecedenceAndTypes` to replace the node's\n                  current `operatorPrecedenceAndTypes`, if present."},{"p":["OperatorDeclSyntax","withOperatorKeyword(_:)"],"f":[["func",12],[" ",17],["withOperatorKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withOperatorKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `operatorKeyword` replaced.\n- param newChild: The new `operatorKeyword` to replace the node's\n                  current `operatorKeyword`, if present."},{"p":["OperatorDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["OperatorDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["OperatorDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["OperatorDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["OperatorDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["OperatorDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["OperatorDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["OperatorDeclSyntaxBuilder","useOperatorPrecedenceAndTypes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorPrecedenceAndTypes",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[")",17]],"s":[["func",12],[" ",17],["useOperatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","useOperatorKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOperatorKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalTypeSyntax","withWrappedType(_:)"],"f":[["func",12],[" ",17],["withWrappedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["OptionalTypeSyntax",18,83]],"s":[["func",12],[" ",17],["withWrappedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["OptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `wrappedType` replaced.\n- param newChild: The new `wrappedType` to replace the node's\n                  current `wrappedType`, if present."},{"p":["OptionalTypeSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OptionalTypeSyntax",18,83]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalTypeSyntaxBuilder","useWrappedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrappedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useWrappedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["OptionalTypeSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntax","withProtocolKeyword(_:)"],"f":[["func",12],[" ",17],["withProtocolKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withProtocolKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `protocolKeyword` replaced.\n- param newChild: The new `protocolKeyword` to replace the node's\n                  current `protocolKeyword`, if present."},{"p":["ProtocolDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ProtocolDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ProtocolDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["ProtocolDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ProtocolDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ProtocolDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["ProtocolDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ProtocolDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["ProtocolDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ProtocolDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ProtocolDeclSyntax","withPrimaryAssociatedTypeClause(_:)"],"f":[["func",12],[" ",17],["withPrimaryAssociatedTypeClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withPrimaryAssociatedTypeClause",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `primaryAssociatedTypeClause` replaced.\n- param newChild: The new `primaryAssociatedTypeClause` to replace the node's\n                  current `primaryAssociatedTypeClause`, if present."},{"p":["ProtocolDeclSyntaxBuilder","useProtocolKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useProtocolKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useProtocolKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","usePrimaryAssociatedTypeClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePrimaryAssociatedTypeClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[")",17]],"s":[["func",12],[" ",17],["usePrimaryAssociatedTypeClause",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[")",17]]},{"p":["ReturnClauseSyntax","withReturnType(_:)"],"f":[["func",12],[" ",17],["withReturnType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ReturnClauseSyntax",18,87]],"s":[["func",12],[" ",17],["withReturnType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ReturnClauseSyntax",18]],"d":"Returns a copy of the receiver with its `returnType` replaced.\n- param newChild: The new `returnType` to replace the node's\n                  current `returnType`, if present."},{"p":["ReturnClauseSyntax","withArrow(_:)"],"f":[["func",12],[" ",17],["withArrow",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ReturnClauseSyntax",18,87]],"s":[["func",12],[" ",17],["withArrow",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ReturnClauseSyntax",18]],"d":"Returns a copy of the receiver with its `arrow` replaced.\n- param newChild: The new `arrow` to replace the node's\n                  current `arrow`, if present."},{"p":["ReturnClauseSyntaxBuilder","useReturnType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useReturnType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ReturnClauseSyntaxBuilder","useArrow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrow",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useArrow",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SequenceExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ExprSyntax",18,451],[") -> ",17],["SequenceExprSyntax",18,89]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[") -> ",17],["SequenceExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["SequenceExprSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprListSyntax",18,473],["?) -> ",17],["SequenceExprSyntax",18,89]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["ExprListSyntax",18],["?) -> ",17],["SequenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["SequenceExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SuperRefExprSyntax","withSuperKeyword(_:)"],"f":[["func",12],[" ",17],["withSuperKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SuperRefExprSyntax",18,91]],"s":[["func",12],[" ",17],["withSuperKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SuperRefExprSyntax",18]],"d":"Returns a copy of the receiver with its `superKeyword` replaced.\n- param newChild: The new `superKeyword` to replace the node's\n                  current `superKeyword`, if present."},{"p":["SuperRefExprSyntaxBuilder","useSuperKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSuperKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSuperKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["TuplePatternSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TuplePatternElementListSyntax",18,398],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["TuplePatternElementListSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["TuplePatternSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["TuplePatternSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["TuplePatternSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TuplePatternElementSyntax",18],[")",17]]},{"p":["TuplePatternSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VariableDeclSyntax","addBinding(_:)"],"f":[["func",12],[" ",17],["addBinding",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addBinding",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Binding` to the node's `bindings`\ncollection.\n- param element: The new `Binding` to add to the node's\n                 `bindings` collection.\n- returns: A copy of the receiver with the provided `Binding`\n           appended to its `bindings` collection."},{"p":["VariableDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["VariableDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["VariableDeclSyntax","withBindings(_:)"],"f":[["func",12],[" ",17],["withBindings",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternBindingListSyntax",18,294],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withBindings",7],["(",17],["PatternBindingListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `bindings` replaced.\n- param newChild: The new `bindings` to replace the node's\n                  current `bindings`, if present."},{"p":["VariableDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["VariableDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["VariableDeclSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["VariableDeclSyntaxBuilder","addBinding(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addBinding",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["addBinding",7],["(",17],["PatternBindingSyntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VersionTupleSyntax","withPatchVersion(_:)"],"f":[["func",12],[" ",17],["withPatchVersion",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withPatchVersion",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `patchVersion` replaced.\n- param newChild: The new `patchVersion` to replace the node's\n                  current `patchVersion`, if present."},{"p":["VersionTupleSyntax","withMajorMinor(_:)"],"f":[["func",12],[" ",17],["withMajorMinor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withMajorMinor",7],["(",17],["Syntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `majorMinor` replaced.\n- param newChild: The new `majorMinor` to replace the node's\n                  current `majorMinor`, if present."},{"p":["VersionTupleSyntax","withPatchPeriod(_:)"],"f":[["func",12],[" ",17],["withPatchPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withPatchPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `patchPeriod` replaced.\n- param newChild: The new `patchPeriod` to replace the node's\n                  current `patchPeriod`, if present."},{"p":["VersionTupleSyntaxBuilder","usePatchVersion(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePatchVersion",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePatchVersion",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VersionTupleSyntaxBuilder","useMajorMinor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMajorMinor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useMajorMinor",7],["(",17],["Syntax",18],[")",17]]},{"p":["VersionTupleSyntaxBuilder","usePatchPeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePatchPeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePatchPeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorBlockSyntax","addAccessor(_:)"],"f":[["func",12],[" ",17],["addAccessor",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["addAccessor",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorBlockSyntax",18]],"d":"Adds the provided `Accessor` to the node's `accessors`\ncollection.\n- param element: The new `Accessor` to add to the node's\n                 `accessors` collection.\n- returns: A copy of the receiver with the provided `Accessor`\n           appended to its `accessors` collection."},{"p":["AccessorBlockSyntax","withAccessors(_:)"],"f":[["func",12],[" ",17],["withAccessors",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessorListSyntax",18,55],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withAccessors",7],["(",17],["AccessorListSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `accessors` replaced.\n- param newChild: The new `accessors` to replace the node's\n                  current `accessors`, if present."},{"p":["AccessorBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["AccessorBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["AccessorBlockSyntaxBuilder","addAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAccessor",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["addAccessor",7],["(",17],["AccessorDeclSyntax",18],[")",17]]},{"p":["AccessorBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsTypePatternSyntax","withAsKeyword(_:)"],"f":[["func",12],[" ",17],["withAsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withAsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `asKeyword` replaced.\n- param newChild: The new `asKeyword` to replace the node's\n                  current `asKeyword`, if present."},{"p":["AsTypePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["AsTypePatternSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["AsTypePatternSyntaxBuilder","useAsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsTypePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AsTypePatternSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["AttributeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AttributeListSyntax` with that element prepended to the\n           beginning."},{"p":["AttributeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AttributeListSyntax",18,103],[".",17],["Iterator",18,104]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AttributeListSyntax",18],[".",17],["Iterator",18]]},{"p":["AttributeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the last element.\n\n- Returns: A new `AttributeListSyntax` with the last element removed."},{"p":["AttributeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the first element.\n\n- Returns: A new `AttributeListSyntax` with the first element removed."},{"p":["AttributeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with all trivia removed."},{"p":["AttributeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AttributeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AttributeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its leading trivia removed."},{"p":["AttributeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its trailing trivia removed."},{"p":["AttributeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AttributeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AttributeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]]},{"p":["AttributeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["AttributeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AttributeListSyntax` with the element at the provided index\n           removed."},{"p":["AttributeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AttributeListSyntax` with that element appended to the end."},{"p":["AttributeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AttributeListSyntax` with that element appended to the end."},{"p":["AttributeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AttributeListSyntax` with the new element at the provided index."},{"p":["CatchItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CatchItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CatchItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchItemListSyntax",18,105],[".",17],["Iterator",18,106]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchItemListSyntax",18],[".",17],["Iterator",18]]},{"p":["CatchItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the last element.\n\n- Returns: A new `CatchItemListSyntax` with the last element removed."},{"p":["CatchItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the first element.\n\n- Returns: A new `CatchItemListSyntax` with the first element removed."},{"p":["CatchItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with all trivia removed."},{"p":["CatchItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CatchItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CatchItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its leading trivia removed."},{"p":["CatchItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its trailing trivia removed."},{"p":["CatchItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CatchItemSyntax",18,491],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CatchItemSyntax",18],["?",17]]},{"p":["CatchItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["CatchItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CatchItemListSyntax` with the element at the provided index\n           removed."},{"p":["CatchItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CatchItemListSyntax` with that element appended to the end."},{"p":["CatchItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,491],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CatchItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CatchItemListSyntax` with that element appended to the end."},{"p":["CatchItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CatchItemListSyntax` with the new element at the provided index."},{"p":["CodeBlockItemSyntax","withItem(_:)"],"f":[["func",12],[" ",17],["withItem",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withItem",7],["(",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `item` replaced.\n- param newChild: The new `item` to replace the node's\n                  current `item`, if present."},{"p":["CodeBlockItemSyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["CodeBlockItemSyntax","withErrorTokens(_:)"],"f":[["func",12],[" ",17],["withErrorTokens",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withErrorTokens",7],["(",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `errorTokens` replaced.\n- param newChild: The new `errorTokens` to replace the node's\n                  current `errorTokens`, if present."},{"p":["CodeBlockItemSyntaxBuilder","useItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useItem",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useItem",7],["(",17],["Syntax",18],[")",17]]},{"p":["CodeBlockItemSyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockItemSyntaxBuilder","useErrorTokens(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useErrorTokens",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useErrorTokens",7],["(",17],["Syntax",18],[")",17]]},{"p":["ExtensionDeclSyntax","withExtensionKeyword(_:)"],"f":[["func",12],[" ",17],["withExtensionKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withExtensionKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `extensionKeyword` replaced.\n- param newChild: The new `extensionKeyword` to replace the node's\n                  current `extensionKeyword`, if present."},{"p":["ExtensionDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ExtensionDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ExtensionDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["ExtensionDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ExtensionDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ExtensionDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["ExtensionDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ExtensionDeclSyntax","withExtendedType(_:)"],"f":[["func",12],[" ",17],["withExtendedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withExtendedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `extendedType` replaced.\n- param newChild: The new `extendedType` to replace the node's\n                  current `extendedType`, if present."},{"p":["ExtensionDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ExtensionDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ExtensionDeclSyntaxBuilder","useExtensionKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExtensionKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useExtensionKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useExtendedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExtendedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useExtendedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["InheritedTypeSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["InheritedTypeSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["InheritedTypeSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["InheritedTypeSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsTypePatternSyntax","withIsKeyword(_:)"],"f":[["func",12],[" ",17],["withIsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IsTypePatternSyntax",18,113]],"s":[["func",12],[" ",17],["withIsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `isKeyword` replaced.\n- param newChild: The new `isKeyword` to replace the node's\n                  current `isKeyword`, if present."},{"p":["IsTypePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["IsTypePatternSyntax",18,113]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["IsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["IsTypePatternSyntaxBuilder","useIsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsTypePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ObjcNamePieceSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcNamePieceSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["ObjcNamePieceSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcNamePieceSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParenthesizedSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["ParenthesizedSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["PoundFileExprSyntax","withPoundFile(_:)"],"f":[["func",12],[" ",17],["withPoundFile",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundFileExprSyntax",18,117]],"s":[["func",12],[" ",17],["withPoundFile",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFileExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFile` replaced.\n- param newChild: The new `poundFile` to replace the node's\n                  current `poundFile`, if present."},{"p":["PoundFileExprSyntaxBuilder","usePoundFile(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFile",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundFile",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundLineExprSyntax","withPoundLine(_:)"],"f":[["func",12],[" ",17],["withPoundLine",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundLineExprSyntax",18,119]],"s":[["func",12],[" ",17],["withPoundLine",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundLineExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundLine` replaced.\n- param newChild: The new `poundLine` to replace the node's\n                  current `poundLine`, if present."},{"p":["PoundLineExprSyntaxBuilder","usePoundLine(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundLine",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundLine",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringSegmentSyntax","withContent(_:)"],"f":[["func",12],[" ",17],["withContent",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringSegmentSyntax",18,121]],"s":[["func",12],[" ",17],["withContent",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `content` replaced.\n- param newChild: The new `content` to replace the node's\n                  current `content`, if present."},{"p":["StringSegmentSyntaxBuilder","useContent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContent",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useContent",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntax","withSubscriptKeyword(_:)"],"f":[["func",12],[" ",17],["withSubscriptKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withSubscriptKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `subscriptKeyword` replaced.\n- param newChild: The new `subscriptKeyword` to replace the node's\n                  current `subscriptKeyword`, if present."},{"p":["SubscriptDeclSyntax","withResult(_:)"],"f":[["func",12],[" ",17],["withResult",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withResult",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `result` replaced.\n- param newChild: The new `result` to replace the node's\n                  current `result`, if present."},{"p":["SubscriptDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SubscriptDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["SubscriptDeclSyntax","withIndices(_:)"],"f":[["func",12],[" ",17],["withIndices",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withIndices",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `indices` replaced.\n- param newChild: The new `indices` to replace the node's\n                  current `indices`, if present."},{"p":["SubscriptDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["SubscriptDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["SubscriptDeclSyntax","withAccessor(_:)"],"f":[["func",12],[" ",17],["withAccessor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withAccessor",7],["(",17],["Syntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `accessor` replaced.\n- param newChild: The new `accessor` to replace the node's\n                  current `accessor`, if present."},{"p":["SubscriptDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["SubscriptDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["SubscriptDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["SubscriptDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["SubscriptDeclSyntaxBuilder","useSubscriptKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSubscriptKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSubscriptKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useIndices(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIndices",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useIndices",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useAccessor",7],["(",17],["Syntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useResult(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useResult",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useResult",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["SubscriptExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SubscriptExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["SubscriptExprSyntax","withLeftBracket(_:)"],"f":[["func",12],[" ",17],["withLeftBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withLeftBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftBracket` replaced.\n- param newChild: The new `leftBracket` to replace the node's\n                  current `leftBracket`, if present."},{"p":["SubscriptExprSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["SubscriptExprSyntax","withRightBracket(_:)"],"f":[["func",12],[" ",17],["withRightBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withRightBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightBracket` replaced.\n- param newChild: The new `rightBracket` to replace the node's\n                  current `rightBracket`, if present."},{"p":["SubscriptExprSyntax","withTrailingClosure(_:)"],"f":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `trailingClosure` replaced.\n- param newChild: The new `trailingClosure` to replace the node's\n                  current `trailingClosure`, if present."},{"p":["SubscriptExprSyntax","withCalledExpression(_:)"],"f":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `calledExpression` replaced.\n- param newChild: The new `calledExpression` to replace the node's\n                  current `calledExpression`, if present."},{"p":["SubscriptExprSyntax","addAdditionalTrailingClosure(_:)"],"f":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SubscriptExprSyntax",18]],"d":"Adds the provided `AdditionalTrailingClosure` to the node's `additionalTrailingClosures`\ncollection.\n- param element: The new `AdditionalTrailingClosure` to add to the node's\n                 `additionalTrailingClosures` collection.\n- returns: A copy of the receiver with the provided `AdditionalTrailingClosure`\n           appended to its `additionalTrailingClosures` collection."},{"p":["SubscriptExprSyntax","withAdditionalTrailingClosures(_:)"],"f":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `additionalTrailingClosures` replaced.\n- param newChild: The new `additionalTrailingClosures` to replace the node's\n                  current `additionalTrailingClosures`, if present."},{"p":["SubscriptExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useLeftBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useRightBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useTrailingClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useCalledExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCalledExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useCalledExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","addAdditionalTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntax","withTypealiasKeyword(_:)"],"f":[["func",12],[" ",17],["withTypealiasKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withTypealiasKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `typealiasKeyword` replaced.\n- param newChild: The new `typealiasKeyword` to replace the node's\n                  current `typealiasKeyword`, if present."},{"p":["TypealiasDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["TypealiasDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["TypealiasDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["TypealiasDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["TypealiasDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["TypealiasDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["TypealiasDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["TypealiasDeclSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,370],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["TypealiasDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["TypealiasDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["TypealiasDeclSyntaxBuilder","useTypealiasKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypealiasKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTypealiasKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["WithCodeBlockSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["Self",18]]},{"p":["AssignmentExprSyntax","withAssignToken(_:)"],"f":[["func",12],[" ",17],["withAssignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AssignmentExprSyntax",18,129]],"s":[["func",12],[" ",17],["withAssignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssignmentExprSyntax",18]],"d":"Returns a copy of the receiver with its `assignToken` replaced.\n- param newChild: The new `assignToken` to replace the node's\n                  current `assignToken`, if present."},{"p":["AssignmentExprSyntaxBuilder","useAssignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAssignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributedTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["AttributedTypeSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AttributedTypeSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AttributedTypeSyntax","withSpecifier(_:)"],"f":[["func",12],[" ",17],["withSpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withSpecifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `specifier` replaced.\n- param newChild: The new `specifier` to replace the node's\n                  current `specifier`, if present."},{"p":["AttributedTypeSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AttributedTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AttributedTypeSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AttributedTypeSyntaxBuilder","useSpecifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSpecifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSpecifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryExprSyntax","withContent(_:)"],"f":[["func",12],[" ",17],["withContent",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withContent",7],["(",17],["Syntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `content` replaced.\n- param newChild: The new `content` to replace the node's\n                  current `content`, if present."},{"p":["DictionaryExprSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["DictionaryExprSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["DictionaryExprSyntaxBuilder","useContent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContent",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useContent",7],["(",17],["Syntax",18],[")",17]]},{"p":["DictionaryExprSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryExprSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntax","withKeyType(_:)"],"f":[["func",12],[" ",17],["withKeyType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withKeyType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `keyType` replaced.\n- param newChild: The new `keyType` to replace the node's\n                  current `keyType`, if present."},{"p":["DictionaryTypeSyntax","withValueType(_:)"],"f":[["func",12],[" ",17],["withValueType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withValueType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `valueType` replaced.\n- param newChild: The new `valueType` to replace the node's\n                  current `valueType`, if present."},{"p":["DictionaryTypeSyntax","withLeftSquareBracket(_:)"],"f":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquareBracket` replaced.\n- param newChild: The new `leftSquareBracket` to replace the node's\n                  current `leftSquareBracket`, if present."},{"p":["DictionaryTypeSyntax","withRightSquareBracket(_:)"],"f":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquareBracket` replaced.\n- param newChild: The new `rightSquareBracket` to replace the node's\n                  current `rightSquareBracket`, if present."},{"p":["DictionaryTypeSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DictionaryTypeSyntaxBuilder","useKeyType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useKeyType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useValueType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValueType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useValueType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useLeftSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useRightSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ExpressionStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ExpressionStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["IdentifiedDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["IdentifierExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["IdentifierExprSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["IdentifierExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IdentifierExprSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["IdentifierListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `IdentifierListSyntax` with that element prepended to the\n           beginning."},{"p":["IdentifierListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IdentifierListSyntax",18,141],[".",17],["Iterator",18,142]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IdentifierListSyntax",18],[".",17],["Iterator",18]]},{"p":["IdentifierListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the last element.\n\n- Returns: A new `IdentifierListSyntax` with the last element removed."},{"p":["IdentifierListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the first element.\n\n- Returns: A new `IdentifierListSyntax` with the first element removed."},{"p":["IdentifierListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with all trivia removed."},{"p":["IdentifierListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["IdentifierListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["IdentifierListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its leading trivia removed."},{"p":["IdentifierListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its trailing trivia removed."},{"p":["IdentifierListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["IdentifierListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["IdentifierListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,454],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]]},{"p":["IdentifierListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["IdentifierListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `IdentifierListSyntax` with the element at the provided index\n           removed."},{"p":["IdentifierListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `IdentifierListSyntax` with that element appended to the end."},{"p":["IdentifierListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `IdentifierListSyntax` with that element appended to the end."},{"p":["IdentifierListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `IdentifierListSyntax` with the new element at the provided index."},{"p":["IfConfigClauseSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["Syntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["IfConfigClauseSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["IfConfigClauseSyntax","withPoundKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withPoundKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `poundKeyword` replaced.\n- param newChild: The new `poundKeyword` to replace the node's\n                  current `poundKeyword`, if present."},{"p":["IfConfigClauseSyntaxBuilder","useElements(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElements",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useElements",7],["(",17],["Syntax",18],[")",17]]},{"p":["IfConfigClauseSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["IfConfigClauseSyntaxBuilder","usePoundKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `MemberDeclListSyntax` with that element prepended to the\n           beginning."},{"p":["MemberDeclListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MemberDeclListSyntax",18,145],[".",17],["Iterator",18,146]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MemberDeclListSyntax",18],[".",17],["Iterator",18]]},{"p":["MemberDeclListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the last element.\n\n- Returns: A new `MemberDeclListSyntax` with the last element removed."},{"p":["MemberDeclListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the first element.\n\n- Returns: A new `MemberDeclListSyntax` with the first element removed."},{"p":["MemberDeclListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with all trivia removed."},{"p":["MemberDeclListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["MemberDeclListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["MemberDeclListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its leading trivia removed."},{"p":["MemberDeclListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its trailing trivia removed."},{"p":["MemberDeclListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["MemberDeclListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["MemberDeclListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["MemberDeclListItemSyntax",18,292],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["MemberDeclListItemSyntax",18],["?",17]]},{"p":["MemberDeclListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["MemberDeclListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `MemberDeclListSyntax` with the element at the provided index\n           removed."},{"p":["MemberDeclListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["appending",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `MemberDeclListSyntax` with that element appended to the end."},{"p":["MemberDeclListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["MemberDeclListItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `MemberDeclListSyntax` with that element appended to the end."},{"p":["MemberDeclListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `MemberDeclListSyntax` with the new element at the provided index."},{"p":["NilLiteralExprSyntax","withNilKeyword(_:)"],"f":[["func",12],[" ",17],["withNilKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["func",12],[" ",17],["withNilKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NilLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `nilKeyword` replaced.\n- param newChild: The new `nilKeyword` to replace the node's\n                  current `nilKeyword`, if present."},{"p":["NilLiteralExprSyntaxBuilder","useNilKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useNilKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useNilKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["PatternBindingSyntax","withAccessor(_:)"],"f":[["func",12],[" ",17],["withAccessor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withAccessor",7],["(",17],["Syntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `accessor` replaced.\n- param newChild: The new `accessor` to replace the node's\n                  current `accessor`, if present."},{"p":["PatternBindingSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["PatternBindingSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["PatternBindingSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["PatternBindingSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useAccessor",7],["(",17],["Syntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntax","withPoundError(_:)"],"f":[["func",12],[" ",17],["withPoundError",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withPoundError",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundError` replaced.\n- param newChild: The new `poundError` to replace the node's\n                  current `poundError`, if present."},{"p":["PoundErrorDeclSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralExprSyntax",18,272],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["StringLiteralExprSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundErrorDeclSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["PoundErrorDeclSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["PoundErrorDeclSyntaxBuilder","usePoundError(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundError",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundError",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SpecializeExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["SpecializeExprSyntax",18,153]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SpecializeExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["SpecializeExprSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["SpecializeExprSyntax",18,153]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SpecializeExprSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SpecializeExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SpecializeExprSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SwitchCaseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `SwitchCaseListSyntax` with that element prepended to the\n           beginning."},{"p":["SwitchCaseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SwitchCaseListSyntax",18,155],[".",17],["Iterator",18,156]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SwitchCaseListSyntax",18],[".",17],["Iterator",18]]},{"p":["SwitchCaseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the last element.\n\n- Returns: A new `SwitchCaseListSyntax` with the last element removed."},{"p":["SwitchCaseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the first element.\n\n- Returns: A new `SwitchCaseListSyntax` with the first element removed."},{"p":["SwitchCaseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with all trivia removed."},{"p":["SwitchCaseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["SwitchCaseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["SwitchCaseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its leading trivia removed."},{"p":["SwitchCaseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its trailing trivia removed."},{"p":["SwitchCaseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SwitchCaseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SwitchCaseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]]},{"p":["SwitchCaseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["SwitchCaseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `SwitchCaseListSyntax` with the element at the provided index\n           removed."},{"p":["SwitchCaseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `SwitchCaseListSyntax` with that element appended to the end."},{"p":["SwitchCaseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `SwitchCaseListSyntax` with that element appended to the end."},{"p":["SwitchCaseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `SwitchCaseListSyntax` with the new element at the provided index."},{"p":["TypeAnnotationSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeAnnotationSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TypeAnnotationSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeAnnotationSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TypeAnnotationSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["TypeAnnotationSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WithStatementsSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["CatchClauseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CatchClauseListSyntax` with that element prepended to the\n           beginning."},{"p":["CatchClauseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchClauseListSyntax",18,160],[".",17],["Iterator",18,161]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchClauseListSyntax",18],[".",17],["Iterator",18]]},{"p":["CatchClauseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the last element.\n\n- Returns: A new `CatchClauseListSyntax` with the last element removed."},{"p":["CatchClauseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the first element.\n\n- Returns: A new `CatchClauseListSyntax` with the first element removed."},{"p":["CatchClauseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with all trivia removed."},{"p":["CatchClauseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CatchClauseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CatchClauseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its leading trivia removed."},{"p":["CatchClauseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its trailing trivia removed."},{"p":["CatchClauseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchClauseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CatchClauseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CatchClauseSyntax",18,39],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CatchClauseSyntax",18],["?",17]]},{"p":["CatchClauseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["CatchClauseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CatchClauseListSyntax` with the element at the provided index\n           removed."},{"p":["CatchClauseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CatchClauseListSyntax` with that element appended to the end."},{"p":["CatchClauseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CatchClauseSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CatchClauseListSyntax` with that element appended to the end."},{"p":["CatchClauseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CatchClauseListSyntax` with the new element at the provided index."},{"p":["CompositionTypeSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["CompositionTypeSyntax",18,162]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["CompositionTypeSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CompositionTypeElementListSyntax",18,412],["?) -> ",17],["CompositionTypeSyntax",18,162]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["CompositionTypeElementListSyntax",18],["?) -> ",17],["CompositionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["CompositionTypeSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CompositionTypeElementSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]]},{"p":["CustomAttributeSyntax","withAttributeName(_:)"],"f":[["func",12],[" ",17],["withAttributeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withAttributeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `attributeName` replaced.\n- param newChild: The new `attributeName` to replace the node's\n                  current `attributeName`, if present."},{"p":["CustomAttributeSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["CustomAttributeSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["CustomAttributeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["CustomAttributeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["CustomAttributeSyntax","withAtSignToken(_:)"],"f":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `atSignToken` replaced.\n- param newChild: The new `atSignToken` to replace the node's\n                  current `atSignToken`, if present."},{"p":["CustomAttributeSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["CustomAttributeSyntaxBuilder","useAttributeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAttributeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useAttributeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useAtSignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAtSignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAtSignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclarationStmtSyntax","withDeclaration(_:)"],"f":[["func",12],[" ",17],["withDeclaration",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclSyntax",18,450],["?) -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["func",12],[" ",17],["withDeclaration",7],["(",17],["DeclSyntax",18],["?) -> ",17],["DeclarationStmtSyntax",18]],"d":"Returns a copy of the receiver with its `declaration` replaced.\n- param newChild: The new `declaration` to replace the node's\n                  current `declaration`, if present."},{"p":["DeclarationStmtSyntaxBuilder","useDeclaration(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclaration",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclSyntax",18,450],[")",17]],"s":[["func",12],[" ",17],["useDeclaration",7],["(",17],["DeclSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntax","withRawValue(_:)"],"f":[["func",12],[" ",17],["withRawValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withRawValue",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `rawValue` replaced.\n- param newChild: The new `rawValue` to replace the node's\n                  current `rawValue`, if present."},{"p":["EnumCaseElementSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["EnumCaseElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["EnumCaseElementSyntax","withAssociatedValue(_:)"],"f":[["func",12],[" ",17],["withAssociatedValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withAssociatedValue",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `associatedValue` replaced.\n- param newChild: The new `associatedValue` to replace the node's\n                  current `associatedValue`, if present."},{"p":["EnumCaseElementSyntaxBuilder","useRawValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRawValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useRawValue",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useAssociatedValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useAssociatedValue",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntax","withCaseName(_:)"],"f":[["func",12],[" ",17],["withCaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withCaseName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `caseName` replaced.\n- param newChild: The new `caseName` to replace the node's\n                  current `caseName`, if present."},{"p":["EnumCasePatternSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["EnumCasePatternSyntax","withAssociatedTuple(_:)"],"f":[["func",12],[" ",17],["withAssociatedTuple",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TuplePatternSyntax",18,93],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withAssociatedTuple",7],["(",17],["TuplePatternSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `associatedTuple` replaced.\n- param newChild: The new `associatedTuple` to replace the node's\n                  current `associatedTuple`, if present."},{"p":["EnumCasePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["EnumCasePatternSyntaxBuilder","useCaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCaseName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","useAssociatedTuple(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedTuple",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["useAssociatedTuple",7],["(",17],["TuplePatternSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FallthroughStmtSyntax","withFallthroughKeyword(_:)"],"f":[["func",12],[" ",17],["withFallthroughKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["func",12],[" ",17],["withFallthroughKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FallthroughStmtSyntax",18]],"d":"Returns a copy of the receiver with its `fallthroughKeyword` replaced.\n- param newChild: The new `fallthroughKeyword` to replace the node's\n                  current `fallthroughKeyword`, if present."},{"p":["FallthroughStmtSyntaxBuilder","useFallthroughKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFallthroughKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFallthroughKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForcedValueExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ForcedValueExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ForcedValueExprSyntax","withExclamationMark(_:)"],"f":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForcedValueExprSyntax",18]],"d":"Returns a copy of the receiver with its `exclamationMark` replaced.\n- param newChild: The new `exclamationMark` to replace the node's\n                  current `exclamationMark`, if present."},{"p":["ForcedValueExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ForcedValueExprSyntaxBuilder","useExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericArgumentSyntax","withArgumentType(_:)"],"f":[["func",12],[" ",17],["withArgumentType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["func",12],[" ",17],["withArgumentType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `argumentType` replaced.\n- param newChild: The new `argumentType` to replace the node's\n                  current `argumentType`, if present."},{"p":["GenericArgumentSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["GenericArgumentSyntaxBuilder","useArgumentType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgumentType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useArgumentType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["GenericArgumentSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["InitializerDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["InitializerDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["InitializerDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["InitializerDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["InitializerDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["InitializerDeclSyntax","withParameters(_:)"],"f":[["func",12],[" ",17],["withParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withParameters",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `parameters` replaced.\n- param newChild: The new `parameters` to replace the node's\n                  current `parameters`, if present."},{"p":["InitializerDeclSyntax","withInitKeyword(_:)"],"f":[["func",12],[" ",17],["withInitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withInitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initKeyword` replaced.\n- param newChild: The new `initKeyword` to replace the node's\n                  current `initKeyword`, if present."},{"p":["InitializerDeclSyntax","withOptionalMark(_:)"],"f":[["func",12],[" ",17],["withOptionalMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withOptionalMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `optionalMark` replaced.\n- param newChild: The new `optionalMark` to replace the node's\n                  current `optionalMark`, if present."},{"p":["InitializerDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["InitializerDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["InitializerDeclSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["InitializerDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["InitializerDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useParameters",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useInitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useInitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useOptionalMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOptionalMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOptionalMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["KeyPathBaseExprSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["KeyPathBaseExprSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["KeyPathBaseExprSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntax","addMember(_:)"],"f":[["func",12],[" ",17],["addMember",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["addMember",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclBlockSyntax",18]],"d":"Adds the provided `Member` to the node's `members`\ncollection.\n- param element: The new `Member` to add to the node's\n                 `members` collection.\n- returns: A copy of the receiver with the provided `Member`\n           appended to its `members` collection."},{"p":["MemberDeclBlockSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclListSyntax",18,145],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclListSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["MemberDeclBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["MemberDeclBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["MemberDeclBlockSyntaxBuilder","addMember(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addMember",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["addMember",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntax","withKeyPath(_:)"],"f":[["func",12],[" ",17],["withKeyPath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withKeyPath",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `keyPath` replaced.\n- param newChild: The new `keyPath` to replace the node's\n                  current `keyPath`, if present."},{"p":["ObjcKeyPathExprSyntax","addNamePiece(_:)"],"f":[["func",12],[" ",17],["addNamePiece",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["addNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Adds the provided `NamePiece` to the node's `name`\ncollection.\n- param element: The new `NamePiece` to add to the node's\n                 `name` collection.\n- returns: A copy of the receiver with the provided `NamePiece`\n           appended to its `name` collection."},{"p":["ObjcKeyPathExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["ObjcKeyPathExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["ObjcKeyPathExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ObjcNameSyntax",18,475],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withName",7],["(",17],["ObjcNameSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcKeyPathExprSyntaxBuilder","useKeyPath(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyPath",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useKeyPath",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","addNamePiece(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addNamePiece",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["addNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalPatternSyntax","withSubPattern(_:)"],"f":[["func",12],[" ",17],["withSubPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["OptionalPatternSyntax",18,186]],"s":[["func",12],[" ",17],["withSubPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["OptionalPatternSyntax",18]],"d":"Returns a copy of the receiver with its `subPattern` replaced.\n- param newChild: The new `subPattern` to replace the node's\n                  current `subPattern`, if present."},{"p":["OptionalPatternSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OptionalPatternSyntax",18,186]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalPatternSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalPatternSyntaxBuilder","useSubPattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSubPattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["useSubPattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["OptionalPatternSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParameterClauseSyntax","addParameter(_:)"],"f":[["func",12],[" ",17],["addParameter",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["addParameter",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["ParameterClauseSyntax",18]],"d":"Adds the provided `Parameter` to the node's `parameterList`\ncollection.\n- param element: The new `Parameter` to add to the node's\n                 `parameterList` collection.\n- returns: A copy of the receiver with the provided `Parameter`\n           appended to its `parameterList` collection."},{"p":["ParameterClauseSyntax","withParameterList(_:)"],"f":[["func",12],[" ",17],["withParameterList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["FunctionParameterListSyntax",18,358],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withParameterList",7],["(",17],["FunctionParameterListSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `parameterList` replaced.\n- param newChild: The new `parameterList` to replace the node's\n                  current `parameterList`, if present."},{"p":["ParameterClauseSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["ParameterClauseSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["ParameterClauseSyntaxBuilder","addParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addParameter",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["addParameter",7],["(",17],["FunctionParameterSyntax",18],[")",17]]},{"p":["ParameterClauseSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParameterClauseSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntax","withPoundAssert(_:)"],"f":[["func",12],[" ",17],["withPoundAssert",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withPoundAssert",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `poundAssert` replaced.\n- param newChild: The new `poundAssert` to replace the node's\n                  current `poundAssert`, if present."},{"p":["PoundAssertStmtSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundAssertStmtSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["PoundAssertStmtSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["PoundAssertStmtSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["PoundAssertStmtSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["PoundAssertStmtSyntaxBuilder","usePoundAssert(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundAssert",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundAssert",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundColumnExprSyntax","withPoundColumn(_:)"],"f":[["func",12],[" ",17],["withPoundColumn",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["func",12],[" ",17],["withPoundColumn",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundColumnExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundColumn` replaced.\n- param newChild: The new `poundColumn` to replace the node's\n                  current `poundColumn`, if present."},{"p":["PoundColumnExprSyntaxBuilder","usePoundColumn(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundColumn",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundColumn",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFileIDExprSyntax","withPoundFileID(_:)"],"f":[["func",12],[" ",17],["withPoundFileID",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["func",12],[" ",17],["withPoundFileID",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFileIDExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFileID` replaced.\n- param newChild: The new `poundFileID` to replace the node's\n                  current `poundFileID`, if present."},{"p":["PoundFileIDExprSyntaxBuilder","usePoundFileID(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFileID",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundFileID",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntax","withRepeatKeyword(_:)"],"f":[["func",12],[" ",17],["withRepeatKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withRepeatKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `repeatKeyword` replaced.\n- param newChild: The new `repeatKeyword` to replace the node's\n                  current `repeatKeyword`, if present."},{"p":["RepeatWhileStmtSyntax","withWhileKeyword(_:)"],"f":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whileKeyword` replaced.\n- param newChild: The new `whileKeyword` to replace the node's\n                  current `whileKeyword`, if present."},{"p":["RepeatWhileStmtSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["RepeatWhileStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["RepeatWhileStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["RepeatWhileStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["RepeatWhileStmtSyntaxBuilder","useRepeatKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRepeatKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRepeatKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useWhileKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhileKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWhileKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntax","addCaseItem(_:)"],"f":[["func",12],[" ",17],["addCaseItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["addCaseItem",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Adds the provided `CaseItem` to the node's `caseItems`\ncollection.\n- param element: The new `CaseItem` to add to the node's\n                 `caseItems` collection.\n- returns: A copy of the receiver with the provided `CaseItem`\n           appended to its `caseItems` collection."},{"p":["SwitchCaseLabelSyntax","withCaseItems(_:)"],"f":[["func",12],[" ",17],["withCaseItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CaseItemListSyntax",18,59],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withCaseItems",7],["(",17],["CaseItemListSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `caseItems` replaced.\n- param newChild: The new `caseItems` to replace the node's\n                  current `caseItems`, if present."},{"p":["SwitchCaseLabelSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["SwitchCaseLabelSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["SwitchCaseLabelSyntaxBuilder","addCaseItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCaseItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CaseItemSyntax",18,467],[")",17]],"s":[["func",12],[" ",17],["addCaseItem",7],["(",17],["CaseItemSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WildcardPatternSyntax","withWildcard(_:)"],"f":[["func",12],[" ",17],["withWildcard",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["func",12],[" ",17],["withWildcard",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]],"d":"Returns a copy of the receiver with its `wildcard` replaced.\n- param newChild: The new `wildcard` to replace the node's\n                  current `wildcard`, if present."},{"p":["WildcardPatternSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["WildcardPatternSyntaxBuilder","useWildcard(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWildcard",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWildcard",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WildcardPatternSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["ArrayElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ArrayElementListSyntax` with that element prepended to the\n           beginning."},{"p":["ArrayElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ArrayElementListSyntax",18,202],[".",17],["Iterator",18,203]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ArrayElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["ArrayElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the last element.\n\n- Returns: A new `ArrayElementListSyntax` with the last element removed."},{"p":["ArrayElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the first element.\n\n- Returns: A new `ArrayElementListSyntax` with the first element removed."},{"p":["ArrayElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with all trivia removed."},{"p":["ArrayElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ArrayElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ArrayElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its leading trivia removed."},{"p":["ArrayElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its trailing trivia removed."},{"p":["ArrayElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ArrayElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ArrayElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ArrayElementSyntax",18,57],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ArrayElementSyntax",18],["?",17]]},{"p":["ArrayElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ArrayElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ArrayElementListSyntax` with the element at the provided index\n           removed."},{"p":["ArrayElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ArrayElementListSyntax` with that element appended to the end."},{"p":["ArrayElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ArrayElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ArrayElementListSyntax` with that element appended to the end."},{"p":["ArrayElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ArrayElementListSyntax` with the new element at the provided index."},{"p":["ClosureParamListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ClosureParamListSyntax` with that element prepended to the\n           beginning."},{"p":["ClosureParamListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureParamListSyntax",18,204],[".",17],["Iterator",18,205]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureParamListSyntax",18],[".",17],["Iterator",18]]},{"p":["ClosureParamListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the last element.\n\n- Returns: A new `ClosureParamListSyntax` with the last element removed."},{"p":["ClosureParamListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the first element.\n\n- Returns: A new `ClosureParamListSyntax` with the first element removed."},{"p":["ClosureParamListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with all trivia removed."},{"p":["ClosureParamListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ClosureParamListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ClosureParamListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its leading trivia removed."},{"p":["ClosureParamListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its trailing trivia removed."},{"p":["ClosureParamListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureParamListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureParamListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ClosureParamSyntax",18,61],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ClosureParamSyntax",18],["?",17]]},{"p":["ClosureParamListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ClosureParamListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ClosureParamListSyntax` with the element at the provided index\n           removed."},{"p":["ClosureParamListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ClosureParamListSyntax` with that element appended to the end."},{"p":["ClosureParamListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ClosureParamSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ClosureParamListSyntax` with that element appended to the end."},{"p":["ClosureParamListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ClosureParamListSyntax` with the new element at the provided index."},{"p":["ClosureSignatureSyntax","withOutput(_:)"],"f":[["func",12],[" ",17],["withOutput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withOutput",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `output` replaced.\n- param newChild: The new `output` to replace the node's\n                  current `output`, if present."},{"p":["ClosureSignatureSyntax","withCapture(_:)"],"f":[["func",12],[" ",17],["withCapture",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withCapture",7],["(",17],["ClosureCaptureSignatureSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `capture` replaced.\n- param newChild: The new `capture` to replace the node's\n                  current `capture`, if present."},{"p":["ClosureSignatureSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ClosureSignatureSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ClosureSignatureSyntax","withThrowsTok(_:)"],"f":[["func",12],[" ",17],["withThrowsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withThrowsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `throwsTok` replaced.\n- param newChild: The new `throwsTok` to replace the node's\n                  current `throwsTok`, if present."},{"p":["ClosureSignatureSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ClosureSignatureSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["ClosureSignatureSyntax","withInTok(_:)"],"f":[["func",12],[" ",17],["withInTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withInTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `inTok` replaced.\n- param newChild: The new `inTok` to replace the node's\n                  current `inTok`, if present."},{"p":["ClosureSignatureSyntax","withInput(_:)"],"f":[["func",12],[" ",17],["withInput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withInput",7],["(",17],["Syntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `input` replaced.\n- param newChild: The new `input` to replace the node's\n                  current `input`, if present."},{"p":["ClosureSignatureSyntaxBuilder","useCapture(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCapture",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["useCapture",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useThrowsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useInTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useInTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useInput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useInput",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useOutput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOutput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useOutput",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["ConditionElementSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["Syntax",18],["?) -> ",17],["ConditionElementSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["ConditionElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ConditionElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["ConditionElementSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["Syntax",18],[")",17]]},{"p":["ConditionElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["DeclNameArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DeclNameArgumentSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FloatLiteralExprSyntax","withFloatingDigits(_:)"],"f":[["func",12],[" ",17],["withFloatingDigits",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["func",12],[" ",17],["withFloatingDigits",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FloatLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `floatingDigits` replaced.\n- param newChild: The new `floatingDigits` to replace the node's\n                  current `floatingDigits`, if present."},{"p":["FloatLiteralExprSyntaxBuilder","useFloatingDigits(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFloatingDigits",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFloatingDigits",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["FunctionCallExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["FunctionCallExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["FunctionCallExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["FunctionCallExprSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["FunctionCallExprSyntax","withTrailingClosure(_:)"],"f":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `trailingClosure` replaced.\n- param newChild: The new `trailingClosure` to replace the node's\n                  current `trailingClosure`, if present."},{"p":["FunctionCallExprSyntax","withCalledExpression(_:)"],"f":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `calledExpression` replaced.\n- param newChild: The new `calledExpression` to replace the node's\n                  current `calledExpression`, if present."},{"p":["FunctionCallExprSyntax","addAdditionalTrailingClosure(_:)"],"f":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["FunctionCallExprSyntax",18]],"d":"Adds the provided `AdditionalTrailingClosure` to the node's `additionalTrailingClosures`\ncollection.\n- param element: The new `AdditionalTrailingClosure` to add to the node's\n                 `additionalTrailingClosures` collection.\n- returns: A copy of the receiver with the provided `AdditionalTrailingClosure`\n           appended to its `additionalTrailingClosures` collection."},{"p":["FunctionCallExprSyntax","withAdditionalTrailingClosures(_:)"],"f":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `additionalTrailingClosures` replaced.\n- param newChild: The new `additionalTrailingClosures` to replace the node's\n                  current `additionalTrailingClosures`, if present."},{"p":["FunctionCallExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useTrailingClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useCalledExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCalledExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useCalledExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","addAdditionalTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["FunctionDeclNameSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["func",12],[" ",17],["withName",7],["(",17],["Syntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["FunctionDeclNameSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["FunctionDeclNameSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclNameSyntaxBuilder","useArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["GenericParameterSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["GenericParameterSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["GenericParameterSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["GenericParameterSyntax","withInheritedType(_:)"],"f":[["func",12],[" ",17],["withInheritedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withInheritedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedType` replaced.\n- param newChild: The new `inheritedType` to replace the node's\n                  current `inheritedType`, if present."},{"p":["GenericParameterSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["GenericParameterSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["GenericParameterSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["GenericParameterSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useInheritedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["MemberAccessExprSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["MemberAccessExprSyntax","withBase(_:)"],"f":[["func",12],[" ",17],["withBase",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withBase",7],["(",17],["ExprSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `base` replaced.\n- param newChild: The new `base` to replace the node's\n                  current `base`, if present."},{"p":["MemberAccessExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["MemberAccessExprSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useBase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBase",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useBase",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntax","withPoundSelector(_:)"],"f":[["func",12],[" ",17],["withPoundSelector",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withPoundSelector",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundSelector` replaced.\n- param newChild: The new `poundSelector` to replace the node's\n                  current `poundSelector`, if present."},{"p":["ObjcSelectorExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["ObjcSelectorExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["ObjcSelectorExprSyntax","withKind(_:)"],"f":[["func",12],[" ",17],["withKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `kind` replaced.\n- param newChild: The new `kind` to replace the node's\n                  current `kind`, if present."},{"p":["ObjcSelectorExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withName",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcSelectorExprSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ObjcSelectorExprSyntaxBuilder","usePoundSelector(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundSelector",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundSelector",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PostfixUnaryExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PostfixUnaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["PostfixUnaryExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PostfixUnaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["PostfixUnaryExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PostfixUnaryExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntax","withPoundWarning(_:)"],"f":[["func",12],[" ",17],["withPoundWarning",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withPoundWarning",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundWarning` replaced.\n- param newChild: The new `poundWarning` to replace the node's\n                  current `poundWarning`, if present."},{"p":["PoundWarningDeclSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralExprSyntax",18,272],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["StringLiteralExprSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundWarningDeclSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["PoundWarningDeclSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["PoundWarningDeclSyntaxBuilder","usePoundWarning(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundWarning",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundWarning",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RegexLiteralExprSyntax","withRegex(_:)"],"f":[["func",12],[" ",17],["withRegex",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["func",12],[" ",17],["withRegex",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RegexLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `regex` replaced.\n- param newChild: The new `regex` to replace the node's\n                  current `regex`, if present."},{"p":["RegexLiteralExprSyntaxBuilder","useRegex(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRegex",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRegex",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["TupleExprElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["TupleExprElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TupleExprElementSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["TupleExprElementSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TupleTypeElementSyntax","withEllipsis(_:)"],"f":[["func",12],[" ",17],["withEllipsis",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withEllipsis",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `ellipsis` replaced.\n- param newChild: The new `ellipsis` to replace the node's\n                  current `ellipsis`, if present."},{"p":["TupleTypeElementSyntax","withSecondName(_:)"],"f":[["func",12],[" ",17],["withSecondName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withSecondName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `secondName` replaced.\n- param newChild: The new `secondName` to replace the node's\n                  current `secondName`, if present."},{"p":["TupleTypeElementSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["TupleTypeElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["TupleTypeElementSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["TupleTypeElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TupleTypeElementSyntax","withInOut(_:)"],"f":[["func",12],[" ",17],["withInOut",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withInOut",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `inOut` replaced.\n- param newChild: The new `inOut` to replace the node's\n                  current `inOut`, if present."},{"p":["TupleTypeElementSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useEllipsis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEllipsis",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEllipsis",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useSecondName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSecondName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useInOut(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInOut",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useInOut",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AccessorParameterSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AccessorParameterSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessorParameterSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntax","addAvailability(_:)"],"f":[["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilityEntrySyntax",18]],"d":"Adds the provided `Availability` to the node's `availabilityList`\ncollection.\n- param element: The new `Availability` to add to the node's\n                 `availabilityList` collection.\n- returns: A copy of the receiver with the provided `Availability`\n           appended to its `availabilityList` collection."},{"p":["AvailabilityEntrySyntax","withAvailabilityList(_:)"],"f":[["func",12],[" ",17],["withAvailabilityList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withAvailabilityList",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `availabilityList` replaced.\n- param newChild: The new `availabilityList` to replace the node's\n                  current `availabilityList`, if present."},{"p":["AvailabilityEntrySyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["AvailabilityEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["AvailabilityEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["AvailabilityEntrySyntaxBuilder","addAvailability(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CodeBlockItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CodeBlockItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CodeBlockItemListSyntax",18,238],[".",17],["Iterator",18,239]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CodeBlockItemListSyntax",18],[".",17],["Iterator",18]]},{"p":["CodeBlockItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the last element.\n\n- Returns: A new `CodeBlockItemListSyntax` with the last element removed."},{"p":["CodeBlockItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the first element.\n\n- Returns: A new `CodeBlockItemListSyntax` with the first element removed."},{"p":["CodeBlockItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with all trivia removed."},{"p":["CodeBlockItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CodeBlockItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CodeBlockItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its leading trivia removed."},{"p":["CodeBlockItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its trailing trivia removed."},{"p":["CodeBlockItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CodeBlockItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CodeBlockItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CodeBlockItemSyntax",18,107],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CodeBlockItemSyntax",18],["?",17]]},{"p":["CodeBlockItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["CodeBlockItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CodeBlockItemListSyntax` with the element at the provided index\n           removed."},{"p":["CodeBlockItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CodeBlockItemListSyntax` with that element appended to the end."},{"p":["CodeBlockItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CodeBlockItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CodeBlockItemListSyntax` with that element appended to the end."},{"p":["CodeBlockItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CodeBlockItemListSyntax` with the new element at the provided index."},{"p":["DeclNameArgumentsSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentListSyntax",18,334],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentListSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["DeclNameArgumentsSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["DeclNameArgumentsSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["DeclNameArgumentsSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["DeclNameArgumentsSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]]},{"p":["DeclNameArgumentsSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentsSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["DeinitializerDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["DeinitializerDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["DeinitializerDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["DeinitializerDeclSyntax","withDeinitKeyword(_:)"],"f":[["func",12],[" ",17],["withDeinitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withDeinitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `deinitKeyword` replaced.\n- param newChild: The new `deinitKeyword` to replace the node's\n                  current `deinitKeyword`, if present."},{"p":["DeinitializerDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["DeinitializerDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","useDeinitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeinitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDeinitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["DictionaryElementSyntax","withKeyExpression(_:)"],"f":[["func",12],[" ",17],["withKeyExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withKeyExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `keyExpression` replaced.\n- param newChild: The new `keyExpression` to replace the node's\n                  current `keyExpression`, if present."},{"p":["DictionaryElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["DictionaryElementSyntax","withValueExpression(_:)"],"f":[["func",12],[" ",17],["withValueExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withValueExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `valueExpression` replaced.\n- param newChild: The new `valueExpression` to replace the node's\n                  current `valueExpression`, if present."},{"p":["DictionaryElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DictionaryElementSyntaxBuilder","useKeyExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useKeyExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useValueExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValueExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useValueExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionPatternSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ExpressionPatternSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ExpressionPatternSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntax","addExpression(_:)"],"f":[["func",12],[" ",17],["addExpression",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["addExpression",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["ExpressionSegmentSyntax",18]],"d":"Adds the provided `Expression` to the node's `expressions`\ncollection.\n- param element: The new `Expression` to add to the node's\n                 `expressions` collection.\n- returns: A copy of the receiver with the provided `Expression`\n           appended to its `expressions` collection."},{"p":["ExpressionSegmentSyntax","withBackslash(_:)"],"f":[["func",12],[" ",17],["withBackslash",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withBackslash",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `backslash` replaced.\n- param newChild: The new `backslash` to replace the node's\n                  current `backslash`, if present."},{"p":["ExpressionSegmentSyntax","withDelimiter(_:)"],"f":[["func",12],[" ",17],["withDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `delimiter` replaced.\n- param newChild: The new `delimiter` to replace the node's\n                  current `delimiter`, if present."},{"p":["ExpressionSegmentSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["ExpressionSegmentSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["ExpressionSegmentSyntax","withExpressions(_:)"],"f":[["func",12],[" ",17],["withExpressions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withExpressions",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `expressions` replaced.\n- param newChild: The new `expressions` to replace the node's\n                  current `expressions`, if present."},{"p":["ExpressionSegmentSyntaxBuilder","addExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addExpression",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addExpression",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useBackslash(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBackslash",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useBackslash",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["FunctionParameterSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["FunctionParameterSyntax","withEllipsis(_:)"],"f":[["func",12],[" ",17],["withEllipsis",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withEllipsis",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `ellipsis` replaced.\n- param newChild: The new `ellipsis` to replace the node's\n                  current `ellipsis`, if present."},{"p":["FunctionParameterSyntax","withFirstName(_:)"],"f":[["func",12],[" ",17],["withFirstName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withFirstName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `firstName` replaced.\n- param newChild: The new `firstName` to replace the node's\n                  current `firstName`, if present."},{"p":["FunctionParameterSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["FunctionParameterSyntax","withSecondName(_:)"],"f":[["func",12],[" ",17],["withSecondName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withSecondName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `secondName` replaced.\n- param newChild: The new `secondName` to replace the node's\n                  current `secondName`, if present."},{"p":["FunctionParameterSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["FunctionParameterSyntax","withDefaultArgument(_:)"],"f":[["func",12],[" ",17],["withDefaultArgument",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withDefaultArgument",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `defaultArgument` replaced.\n- param newChild: The new `defaultArgument` to replace the node's\n                  current `defaultArgument`, if present."},{"p":["FunctionParameterSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["FunctionParameterSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["FunctionParameterSyntaxBuilder","useEllipsis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEllipsis",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEllipsis",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useFirstName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFirstName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFirstName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useSecondName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSecondName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useDefaultArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDefaultArgument",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useDefaultArgument",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntax","withOutput(_:)"],"f":[["func",12],[" ",17],["withOutput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withOutput",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `output` replaced.\n- param newChild: The new `output` to replace the node's\n                  current `output`, if present."},{"p":["FunctionSignatureSyntax","withAsyncOrReasyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncOrReasyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withAsyncOrReasyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `asyncOrReasyncKeyword` replaced.\n- param newChild: The new `asyncOrReasyncKeyword` to replace the node's\n                  current `asyncOrReasyncKeyword`, if present."},{"p":["FunctionSignatureSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["FunctionSignatureSyntax","withInput(_:)"],"f":[["func",12],[" ",17],["withInput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withInput",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `input` replaced.\n- param newChild: The new `input` to replace the node's\n                  current `input`, if present."},{"p":["FunctionSignatureSyntaxBuilder","useAsyncOrReasyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncOrReasyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsyncOrReasyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useInput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useInput",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useOutput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOutput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useOutput",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["IdentifierPatternSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IdentifierPatternSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["IdentifierPatternSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InheritedTypeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `InheritedTypeListSyntax` with that element prepended to the\n           beginning."},{"p":["InheritedTypeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InheritedTypeListSyntax",18,256],[".",17],["Iterator",18,257]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InheritedTypeListSyntax",18],[".",17],["Iterator",18]]},{"p":["InheritedTypeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the last element.\n\n- Returns: A new `InheritedTypeListSyntax` with the last element removed."},{"p":["InheritedTypeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the first element.\n\n- Returns: A new `InheritedTypeListSyntax` with the first element removed."},{"p":["InheritedTypeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with all trivia removed."},{"p":["InheritedTypeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["InheritedTypeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["InheritedTypeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its leading trivia removed."},{"p":["InheritedTypeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its trailing trivia removed."},{"p":["InheritedTypeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["InheritedTypeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["InheritedTypeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["InheritedTypeSyntax",18,111],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["InheritedTypeSyntax",18],["?",17]]},{"p":["InheritedTypeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["InheritedTypeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `InheritedTypeListSyntax` with the element at the provided index\n           removed."},{"p":["InheritedTypeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["appending",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `InheritedTypeListSyntax` with that element appended to the end."},{"p":["InheritedTypeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["InheritedTypeSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `InheritedTypeListSyntax` with that element appended to the end."},{"p":["InheritedTypeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `InheritedTypeListSyntax` with the new element at the provided index."},{"p":["InitializerClauseSyntax","withEqual(_:)"],"f":[["func",12],[" ",17],["withEqual",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InitializerClauseSyntax",18,258]],"s":[["func",12],[" ",17],["withEqual",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `equal` replaced.\n- param newChild: The new `equal` to replace the node's\n                  current `equal`, if present."},{"p":["InitializerClauseSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["InitializerClauseSyntax",18,258]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["ExprSyntax",18],["?) -> ",17],["InitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["InitializerClauseSyntaxBuilder","useEqual(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqual",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEqual",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerClauseSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["NonEmptyTokenListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `NonEmptyTokenListSyntax` with that element prepended to the\n           beginning."},{"p":["NonEmptyTokenListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260],[".",17],["Iterator",18,261]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["NonEmptyTokenListSyntax",18],[".",17],["Iterator",18]]},{"p":["NonEmptyTokenListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the last element.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the last element removed."},{"p":["NonEmptyTokenListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the first element.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the first element removed."},{"p":["NonEmptyTokenListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with all trivia removed."},{"p":["NonEmptyTokenListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["NonEmptyTokenListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["NonEmptyTokenListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its leading trivia removed."},{"p":["NonEmptyTokenListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its trailing trivia removed."},{"p":["NonEmptyTokenListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["NonEmptyTokenListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["NonEmptyTokenListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,454],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]]},{"p":["NonEmptyTokenListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["NonEmptyTokenListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `NonEmptyTokenListSyntax` with the element at the provided index\n           removed."},{"p":["NonEmptyTokenListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `NonEmptyTokenListSyntax` with that element appended to the end."},{"p":["NonEmptyTokenListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `NonEmptyTokenListSyntax` with that element appended to the end."},{"p":["NonEmptyTokenListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the new element at the provided index."},{"p":["ObjCSelectorPieceSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjCSelectorPieceSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ObjCSelectorPieceSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjCSelectorPieceSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["ObjectLiteralExprSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["ObjectLiteralExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["ObjectLiteralExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["ObjectLiteralExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["ObjectLiteralExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFilePathExprSyntax","withPoundFilePath(_:)"],"f":[["func",12],[" ",17],["withPoundFilePath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["func",12],[" ",17],["withPoundFilePath",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFilePathExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFilePath` replaced.\n- param newChild: The new `poundFilePath` to replace the node's\n                  current `poundFilePath`, if present."},{"p":["PoundFilePathExprSyntaxBuilder","usePoundFilePath(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFilePath",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundFilePath",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFunctionExprSyntax","withPoundFunction(_:)"],"f":[["func",12],[" ",17],["withPoundFunction",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["func",12],[" ",17],["withPoundFunction",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFunctionExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFunction` replaced.\n- param newChild: The new `poundFunction` to replace the node's\n                  current `poundFunction`, if present."},{"p":["PoundFunctionExprSyntaxBuilder","usePoundFunction(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFunction",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundFunction",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["QualifiedDeclNameSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["QualifiedDeclNameSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["QualifiedDeclNameSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["QualifiedDeclNameSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntax","addSegment(_:)"],"f":[["func",12],[" ",17],["addSegment",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["addSegment",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralExprSyntax",18]],"d":"Adds the provided `Segment` to the node's `segments`\ncollection.\n- param element: The new `Segment` to add to the node's\n                 `segments` collection.\n- returns: A copy of the receiver with the provided `Segment`\n           appended to its `segments` collection."},{"p":["StringLiteralExprSyntax","withSegments(_:)"],"f":[["func",12],[" ",17],["withSegments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withSegments",7],["(",17],["StringLiteralSegmentsSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `segments` replaced.\n- param newChild: The new `segments` to replace the node's\n                  current `segments`, if present."},{"p":["StringLiteralExprSyntax","withOpenQuote(_:)"],"f":[["func",12],[" ",17],["withOpenQuote",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withOpenQuote",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `openQuote` replaced.\n- param newChild: The new `openQuote` to replace the node's\n                  current `openQuote`, if present."},{"p":["StringLiteralExprSyntax","withCloseQuote(_:)"],"f":[["func",12],[" ",17],["withCloseQuote",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withCloseQuote",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `closeQuote` replaced.\n- param newChild: The new `closeQuote` to replace the node's\n                  current `closeQuote`, if present."},{"p":["StringLiteralExprSyntax","withOpenDelimiter(_:)"],"f":[["func",12],[" ",17],["withOpenDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withOpenDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `openDelimiter` replaced.\n- param newChild: The new `openDelimiter` to replace the node's\n                  current `openDelimiter`, if present."},{"p":["StringLiteralExprSyntax","withCloseDelimiter(_:)"],"f":[["func",12],[" ",17],["withCloseDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withCloseDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `closeDelimiter` replaced.\n- param newChild: The new `closeDelimiter` to replace the node's\n                  current `closeDelimiter`, if present."},{"p":["StringLiteralExprSyntaxBuilder","addSegment(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addSegment",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addSegment",7],["(",17],["Syntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useOpenQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOpenQuote",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOpenQuote",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useCloseQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCloseQuote",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCloseQuote",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useOpenDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOpenDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOpenDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useCloseDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCloseDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCloseDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WithTrailingCommaSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["AssociatedtypeDeclSyntax","withAssociatedtypeKeyword(_:)"],"f":[["func",12],[" ",17],["withAssociatedtypeKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withAssociatedtypeKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `associatedtypeKeyword` replaced.\n- param newChild: The new `associatedtypeKeyword` to replace the node's\n                  current `associatedtypeKeyword`, if present."},{"p":["AssociatedtypeDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["AssociatedtypeDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AssociatedtypeDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["AssociatedtypeDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AssociatedtypeDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["AssociatedtypeDeclSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,370],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["AssociatedtypeDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["AssociatedtypeDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["AssociatedtypeDeclSyntaxBuilder","useAssociatedtypeKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedtypeKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAssociatedtypeKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["BinaryOperatorExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BinaryOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["BinaryOperatorExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BooleanLiteralExprSyntax","withBooleanLiteral(_:)"],"f":[["func",12],[" ",17],["withBooleanLiteral",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["func",12],[" ",17],["withBooleanLiteral",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BooleanLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `booleanLiteral` replaced.\n- param newChild: The new `booleanLiteral` to replace the node's\n                  current `booleanLiteral`, if present."},{"p":["BooleanLiteralExprSyntaxBuilder","useBooleanLiteral(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBooleanLiteral",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useBooleanLiteral",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntax","withSpecifier(_:)"],"f":[["func",12],[" ",17],["withSpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenListSyntax",18,509],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withSpecifier",7],["(",17],["TokenListSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `specifier` replaced.\n- param newChild: The new `specifier` to replace the node's\n                  current `specifier`, if present."},{"p":["ClosureCaptureItemSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ClosureCaptureItemSyntax","withAssignToken(_:)"],"f":[["func",12],[" ",17],["withAssignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withAssignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `assignToken` replaced.\n- param newChild: The new `assignToken` to replace the node's\n                  current `assignToken`, if present."},{"p":["ClosureCaptureItemSyntax","addSpecifierToken(_:)"],"f":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["TokenSyntax",18],[") -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Adds the provided `SpecifierToken` to the node's `specifier`\ncollection.\n- param element: The new `SpecifierToken` to add to the node's\n                 `specifier` collection.\n- returns: A copy of the receiver with the provided `SpecifierToken`\n           appended to its `specifier` collection."},{"p":["ClosureCaptureItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["ClosureCaptureItemSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ClosureCaptureItemSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useAssignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAssignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","addSpecifierToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addSpecifierToken",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ElseIfContinuationSyntax","withIfStatement(_:)"],"f":[["func",12],[" ",17],["withIfStatement",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfStmtSyntax",18,459],["?) -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["func",12],[" ",17],["withIfStatement",7],["(",17],["IfStmtSyntax",18],["?) -> ",17],["ElseIfContinuationSyntax",18]],"d":"Returns a copy of the receiver with its `ifStatement` replaced.\n- param newChild: The new `ifStatement` to replace the node's\n                  current `ifStatement`, if present."},{"p":["ElseIfContinuationSyntaxBuilder","useIfStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIfStatement",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["useIfStatement",7],["(",17],["IfStmtSyntax",18],[")",17]]},{"p":["GenericRequirementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["GenericRequirementSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["Syntax",18],["?) -> ",17],["GenericRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["GenericRequirementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericRequirementSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["Syntax",18],[")",17]]},{"p":["GenericWhereClauseSyntax","withWhereKeyword(_:)"],"f":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericWhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `whereKeyword` replaced.\n- param newChild: The new `whereKeyword` to replace the node's\n                  current `whereKeyword`, if present."},{"p":["GenericWhereClauseSyntax","addRequirement(_:)"],"f":[["func",12],[" ",17],["addRequirement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["addRequirement",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericWhereClauseSyntax",18]],"d":"Adds the provided `Requirement` to the node's `requirementList`\ncollection.\n- param element: The new `Requirement` to add to the node's\n                 `requirementList` collection.\n- returns: A copy of the receiver with the provided `Requirement`\n           appended to its `requirementList` collection."},{"p":["GenericWhereClauseSyntax","withRequirementList(_:)"],"f":[["func",12],[" ",17],["withRequirementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericRequirementListSyntax",18,384],["?) -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["withRequirementList",7],["(",17],["GenericRequirementListSyntax",18],["?) -> ",17],["GenericWhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `requirementList` replaced.\n- param newChild: The new `requirementList` to replace the node's\n                  current `requirementList`, if present."},{"p":["GenericWhereClauseSyntaxBuilder","useWhereKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWhereKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericWhereClauseSyntaxBuilder","addRequirement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addRequirement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["addRequirement",7],["(",17],["GenericRequirementSyntax",18],[")",17]]},{"p":["IfConfigClauseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `IfConfigClauseListSyntax` with that element prepended to the\n           beginning."},{"p":["IfConfigClauseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IfConfigClauseListSyntax",18,288],[".",17],["Iterator",18,289]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IfConfigClauseListSyntax",18],[".",17],["Iterator",18]]},{"p":["IfConfigClauseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the last element.\n\n- Returns: A new `IfConfigClauseListSyntax` with the last element removed."},{"p":["IfConfigClauseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the first element.\n\n- Returns: A new `IfConfigClauseListSyntax` with the first element removed."},{"p":["IfConfigClauseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with all trivia removed."},{"p":["IfConfigClauseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["IfConfigClauseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["IfConfigClauseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its leading trivia removed."},{"p":["IfConfigClauseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its trailing trivia removed."},{"p":["IfConfigClauseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["IfConfigClauseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["IfConfigClauseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["IfConfigClauseSyntax",18,143],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["IfConfigClauseSyntax",18],["?",17]]},{"p":["IfConfigClauseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["IfConfigClauseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `IfConfigClauseListSyntax` with the element at the provided index\n           removed."},{"p":["IfConfigClauseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["appending",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `IfConfigClauseListSyntax` with that element appended to the end."},{"p":["IfConfigClauseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["IfConfigClauseSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `IfConfigClauseListSyntax` with that element appended to the end."},{"p":["IfConfigClauseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `IfConfigClauseListSyntax` with the new element at the provided index."},{"p":["IntegerLiteralExprSyntax","withDigits(_:)"],"f":[["func",12],[" ",17],["withDigits",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["func",12],[" ",17],["withDigits",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IntegerLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `digits` replaced.\n- param newChild: The new `digits` to replace the node's\n                  current `digits`, if present."},{"p":["IntegerLiteralExprSyntaxBuilder","useDigits(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDigits",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDigits",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclListItemSyntax","withDecl(_:)"],"f":[["func",12],[" ",17],["withDecl",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclSyntax",18,450],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["func",12],[" ",17],["withDecl",7],["(",17],["DeclSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]],"d":"Returns a copy of the receiver with its `decl` replaced.\n- param newChild: The new `decl` to replace the node's\n                  current `decl`, if present."},{"p":["MemberDeclListItemSyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["MemberDeclListItemSyntaxBuilder","useDecl(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDecl",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclSyntax",18,450],[")",17]],"s":[["func",12],[" ",17],["useDecl",7],["(",17],["DeclSyntax",18],[")",17]]},{"p":["MemberDeclListItemSyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PatternBindingListSyntax` with that element prepended to the\n           beginning."},{"p":["PatternBindingListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PatternBindingListSyntax",18,294],[".",17],["Iterator",18,295]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PatternBindingListSyntax",18],[".",17],["Iterator",18]]},{"p":["PatternBindingListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the last element.\n\n- Returns: A new `PatternBindingListSyntax` with the last element removed."},{"p":["PatternBindingListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the first element.\n\n- Returns: A new `PatternBindingListSyntax` with the first element removed."},{"p":["PatternBindingListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with all trivia removed."},{"p":["PatternBindingListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PatternBindingListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PatternBindingListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its leading trivia removed."},{"p":["PatternBindingListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its trailing trivia removed."},{"p":["PatternBindingListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PatternBindingListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PatternBindingListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PatternBindingSyntax",18,149],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PatternBindingSyntax",18],["?",17]]},{"p":["PatternBindingListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["PatternBindingListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PatternBindingListSyntax` with the element at the provided index\n           removed."},{"p":["PatternBindingListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PatternBindingListSyntax` with that element appended to the end."},{"p":["PatternBindingListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PatternBindingSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PatternBindingListSyntax` with that element appended to the end."},{"p":["PatternBindingListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PatternBindingListSyntax` with the new element at the provided index."},{"p":["PoundDsohandleExprSyntax","withPoundDsohandle(_:)"],"f":[["func",12],[" ",17],["withPoundDsohandle",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["func",12],[" ",17],["withPoundDsohandle",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundDsohandleExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundDsohandle` replaced.\n- param newChild: The new `poundDsohandle` to replace the node's\n                  current `poundDsohandle`, if present."},{"p":["PoundDsohandleExprSyntaxBuilder","usePoundDsohandle(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundDsohandle",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundDsohandle",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrefixOperatorExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrefixOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["PrefixOperatorExprSyntax","withPostfixExpression(_:)"],"f":[["func",12],[" ",17],["withPostfixExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["func",12],[" ",17],["withPostfixExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PrefixOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `postfixExpression` replaced.\n- param newChild: The new `postfixExpression` to replace the node's\n                  current `postfixExpression`, if present."},{"p":["PrefixOperatorExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrefixOperatorExprSyntaxBuilder","usePostfixExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePostfixExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["usePostfixExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SwitchDefaultLabelSyntax","withDefaultKeyword(_:)"],"f":[["func",12],[" ",17],["withDefaultKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["func",12],[" ",17],["withDefaultKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchDefaultLabelSyntax",18]],"d":"Returns a copy of the receiver with its `defaultKeyword` replaced.\n- param newChild: The new `defaultKeyword` to replace the node's\n                  current `defaultKeyword`, if present."},{"p":["SwitchDefaultLabelSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchDefaultLabelSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["SwitchDefaultLabelSyntaxBuilder","useDefaultKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDefaultKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDefaultKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchDefaultLabelSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntax","withModifier(_:)"],"f":[["func",12],[" ",17],["withModifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withModifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `modifier` replaced.\n- param newChild: The new `modifier` to replace the node's\n                  current `modifier`, if present."},{"p":["AccessLevelModifierSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AccessLevelModifierSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AccessLevelModifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessLevelModifierSyntaxBuilder","useModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useModifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useModifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessPathComponentSyntax","withTrailingDot(_:)"],"f":[["func",12],[" ",17],["withTrailingDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["func",12],[" ",17],["withTrailingDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingDot` replaced.\n- param newChild: The new `trailingDot` to replace the node's\n                  current `trailingDot`, if present."},{"p":["AccessPathComponentSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessPathComponentSyntaxBuilder","useTrailingDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessPathComponentSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `EnumCaseElementListSyntax` with that element prepended to the\n           beginning."},{"p":["EnumCaseElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EnumCaseElementListSyntax",18,306],[".",17],["Iterator",18,307]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EnumCaseElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["EnumCaseElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the last element.\n\n- Returns: A new `EnumCaseElementListSyntax` with the last element removed."},{"p":["EnumCaseElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the first element.\n\n- Returns: A new `EnumCaseElementListSyntax` with the first element removed."},{"p":["EnumCaseElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with all trivia removed."},{"p":["EnumCaseElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["EnumCaseElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["EnumCaseElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its leading trivia removed."},{"p":["EnumCaseElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its trailing trivia removed."},{"p":["EnumCaseElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["EnumCaseElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["EnumCaseElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["EnumCaseElementSyntax",18,168],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["EnumCaseElementSyntax",18],["?",17]]},{"p":["EnumCaseElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["EnumCaseElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `EnumCaseElementListSyntax` with the element at the provided index\n           removed."},{"p":["EnumCaseElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["appending",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `EnumCaseElementListSyntax` with that element appended to the end."},{"p":["EnumCaseElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["EnumCaseElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `EnumCaseElementListSyntax` with that element appended to the end."},{"p":["EnumCaseElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `EnumCaseElementListSyntax` with the new element at the provided index."},{"p":["GenericArgumentListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericArgumentListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericArgumentListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericArgumentListSyntax",18,308],[".",17],["Iterator",18,309]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericArgumentListSyntax",18],[".",17],["Iterator",18]]},{"p":["GenericArgumentListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the last element.\n\n- Returns: A new `GenericArgumentListSyntax` with the last element removed."},{"p":["GenericArgumentListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the first element.\n\n- Returns: A new `GenericArgumentListSyntax` with the first element removed."},{"p":["GenericArgumentListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with all trivia removed."},{"p":["GenericArgumentListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericArgumentListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericArgumentListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its leading trivia removed."},{"p":["GenericArgumentListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its trailing trivia removed."},{"p":["GenericArgumentListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericArgumentListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericArgumentListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericArgumentSyntax",18,176],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericArgumentSyntax",18],["?",17]]},{"p":["GenericArgumentListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["GenericArgumentListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericArgumentListSyntax` with the element at the provided index\n           removed."},{"p":["GenericArgumentListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericArgumentListSyntax` with that element appended to the end."},{"p":["GenericArgumentListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericArgumentListSyntax` with that element appended to the end."},{"p":["GenericArgumentListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericArgumentListSyntax` with the new element at the provided index."},{"p":["PostfixIfConfigExprSyntax","withConfig(_:)"],"f":[["func",12],[" ",17],["withConfig",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfConfigDeclSyntax",18,73],["?) -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["func",12],[" ",17],["withConfig",7],["(",17],["IfConfigDeclSyntax",18],["?) -> ",17],["PostfixIfConfigExprSyntax",18]],"d":"Returns a copy of the receiver with its `config` replaced.\n- param newChild: The new `config` to replace the node's\n                  current `config`, if present."},{"p":["PostfixIfConfigExprSyntax","withBase(_:)"],"f":[["func",12],[" ",17],["withBase",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["func",12],[" ",17],["withBase",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PostfixIfConfigExprSyntax",18]],"d":"Returns a copy of the receiver with its `base` replaced.\n- param newChild: The new `base` to replace the node's\n                  current `base`, if present."},{"p":["PostfixIfConfigExprSyntaxBuilder","useConfig(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useConfig",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["useConfig",7],["(",17],["IfConfigDeclSyntax",18],[")",17]]},{"p":["PostfixIfConfigExprSyntaxBuilder","useBase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBase",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useBase",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntax","withPoundSourceLocation(_:)"],"f":[["func",12],[" ",17],["withPoundSourceLocation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withPoundSourceLocation",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `poundSourceLocation` replaced.\n- param newChild: The new `poundSourceLocation` to replace the node's\n                  current `poundSourceLocation`, if present."},{"p":["PoundSourceLocationSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["PoundSourceLocationSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["PoundSourceLocationSyntax","withArgs(_:)"],"f":[["func",12],[" ",17],["withArgs",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `args` replaced.\n- param newChild: The new `args` to replace the node's\n                  current `args`, if present."},{"p":["PoundSourceLocationSyntaxBuilder","usePoundSourceLocation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundSourceLocation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundSourceLocation",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useArgs(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgs",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[")",17]],"s":[["func",12],[" ",17],["useArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntax","addGroupAttribute(_:)"],"f":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `GroupAttribute` to the node's `groupAttributes`\ncollection.\n- param element: The new `GroupAttribute` to add to the node's\n                 `groupAttributes` collection.\n- returns: A copy of the receiver with the provided `GroupAttribute`\n           appended to its `groupAttributes` collection."},{"p":["PrecedenceGroupDeclSyntax","withGroupAttributes(_:)"],"f":[["func",12],[" ",17],["withGroupAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withGroupAttributes",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `groupAttributes` replaced.\n- param newChild: The new `groupAttributes` to replace the node's\n                  current `groupAttributes`, if present."},{"p":["PrecedenceGroupDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["PrecedenceGroupDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["PrecedenceGroupDeclSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["PrecedenceGroupDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["PrecedenceGroupDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["PrecedenceGroupDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["PrecedenceGroupDeclSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["PrecedenceGroupDeclSyntax","withPrecedencegroupKeyword(_:)"],"f":[["func",12],[" ",17],["withPrecedencegroupKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withPrecedencegroupKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `precedencegroupKeyword` replaced.\n- param newChild: The new `precedencegroupKeyword` to replace the node's\n                  current `precedencegroupKeyword`, if present."},{"p":["PrecedenceGroupDeclSyntaxBuilder","addGroupAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addGroupAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","usePrecedencegroupKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePrecedencegroupKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePrecedencegroupKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntax","withLeftTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `leftTypeIdentifier` replaced.\n- param newChild: The new `leftTypeIdentifier` to replace the node's\n                  current `leftTypeIdentifier`, if present."},{"p":["SameTypeRequirementSyntax","withRightTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `rightTypeIdentifier` replaced.\n- param newChild: The new `rightTypeIdentifier` to replace the node's\n                  current `rightTypeIdentifier`, if present."},{"p":["SameTypeRequirementSyntax","withEqualityToken(_:)"],"f":[["func",12],[" ",17],["withEqualityToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withEqualityToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `equalityToken` replaced.\n- param newChild: The new `equalityToken` to replace the node's\n                  current `equalityToken`, if present."},{"p":["SameTypeRequirementSyntaxBuilder","useLeftTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntaxBuilder","useRightTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntaxBuilder","useEqualityToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqualityToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEqualityToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntax","withDeclname(_:)"],"f":[["func",12],[" ",17],["withDeclname",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameSyntax",18,469],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withDeclname",7],["(",17],["DeclNameSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `declname` replaced.\n- param newChild: The new `declname` to replace the node's\n                  current `declname`, if present."},{"p":["TargetFunctionEntrySyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["TargetFunctionEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TargetFunctionEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["TargetFunctionEntrySyntaxBuilder","useDeclname(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclname",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[")",17]],"s":[["func",12],[" ",17],["useDeclname",7],["(",17],["DeclNameSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["TuplePatternElementSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["TuplePatternElementSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["TuplePatternElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["TuplePatternElementSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ValueBindingPatternSyntax","withValuePattern(_:)"],"f":[["func",12],[" ",17],["withValuePattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["func",12],[" ",17],["withValuePattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["ValueBindingPatternSyntax",18]],"d":"Returns a copy of the receiver with its `valuePattern` replaced.\n- param newChild: The new `valuePattern` to replace the node's\n                  current `valuePattern`, if present."},{"p":["ValueBindingPatternSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ValueBindingPatternSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["ValueBindingPatternSyntaxBuilder","useValuePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValuePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["useValuePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ValueBindingPatternSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityArgumentSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["AvailabilityArgumentSyntax","withEntry(_:)"],"f":[["func",12],[" ",17],["withEntry",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["func",12],[" ",17],["withEntry",7],["(",17],["Syntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `entry` replaced.\n- param newChild: The new `entry` to replace the node's\n                  current `entry`, if present."},{"p":["AvailabilityArgumentSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityArgumentSyntaxBuilder","useEntry(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEntry",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useEntry",7],["(",17],["Syntax",18],[")",17]]},{"p":["AvailabilitySpecListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AvailabilitySpecListSyntax` with that element prepended to the\n           beginning."},{"p":["AvailabilitySpecListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326],[".",17],["Iterator",18,327]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AvailabilitySpecListSyntax",18],[".",17],["Iterator",18]]},{"p":["AvailabilitySpecListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the last element.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the last element removed."},{"p":["AvailabilitySpecListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the first element.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the first element removed."},{"p":["AvailabilitySpecListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with all trivia removed."},{"p":["AvailabilitySpecListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AvailabilitySpecListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AvailabilitySpecListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its leading trivia removed."},{"p":["AvailabilitySpecListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its trailing trivia removed."},{"p":["AvailabilitySpecListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AvailabilitySpecListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["AvailabilitySpecListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AvailabilityArgumentSyntax",18,324],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AvailabilityArgumentSyntax",18],["?",17]]},{"p":["AvailabilitySpecListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["AvailabilitySpecListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AvailabilitySpecListSyntax` with the element at the provided index\n           removed."},{"p":["AvailabilitySpecListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AvailabilitySpecListSyntax` with that element appended to the end."},{"p":["AvailabilitySpecListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AvailabilityArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AvailabilitySpecListSyntax` with that element appended to the end."},{"p":["AvailabilitySpecListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the new element at the provided index."},{"p":["ClassRestrictionTypeSyntax","withClassKeyword(_:)"],"f":[["func",12],[" ",17],["withClassKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["func",12],[" ",17],["withClassKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassRestrictionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `classKeyword` replaced.\n- param newChild: The new `classKeyword` to replace the node's\n                  current `classKeyword`, if present."},{"p":["ClassRestrictionTypeSyntaxBuilder","useClassKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClassKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useClassKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ConditionElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ConditionElementListSyntax` with that element prepended to the\n           beginning."},{"p":["ConditionElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ConditionElementListSyntax",18,330],[".",17],["Iterator",18,331]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ConditionElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["ConditionElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the last element.\n\n- Returns: A new `ConditionElementListSyntax` with the last element removed."},{"p":["ConditionElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the first element.\n\n- Returns: A new `ConditionElementListSyntax` with the first element removed."},{"p":["ConditionElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with all trivia removed."},{"p":["ConditionElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ConditionElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ConditionElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its leading trivia removed."},{"p":["ConditionElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its trailing trivia removed."},{"p":["ConditionElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ConditionElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ConditionElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ConditionElementSyntax",18,208],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ConditionElementSyntax",18],["?",17]]},{"p":["ConditionElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ConditionElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ConditionElementListSyntax` with the element at the provided index\n           removed."},{"p":["ConditionElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ConditionElementListSyntax` with that element appended to the end."},{"p":["ConditionElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ConditionElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ConditionElementListSyntax` with that element appended to the end."},{"p":["ConditionElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ConditionElementListSyntax` with the new element at the provided index."},{"p":["ConstrainedSugarTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ConstrainedSugarTypeSyntax",18,332]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ConstrainedSugarTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["ConstrainedSugarTypeSyntax","withSomeOrAnySpecifier(_:)"],"f":[["func",12],[" ",17],["withSomeOrAnySpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ConstrainedSugarTypeSyntax",18,332]],"s":[["func",12],[" ",17],["withSomeOrAnySpecifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ConstrainedSugarTypeSyntax",18]],"d":"Returns a copy of the receiver with its `someOrAnySpecifier` replaced.\n- param newChild: The new `someOrAnySpecifier` to replace the node's\n                  current `someOrAnySpecifier`, if present."},{"p":["ConstrainedSugarTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ConstrainedSugarTypeSyntaxBuilder","useSomeOrAnySpecifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSomeOrAnySpecifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useSomeOrAnySpecifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DeclNameArgumentListSyntax` with that element prepended to the\n           beginning."},{"p":["DeclNameArgumentListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334],[".",17],["Iterator",18,335]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DeclNameArgumentListSyntax",18],[".",17],["Iterator",18]]},{"p":["DeclNameArgumentListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the last element.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the last element removed."},{"p":["DeclNameArgumentListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the first element.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the first element removed."},{"p":["DeclNameArgumentListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with all trivia removed."},{"p":["DeclNameArgumentListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DeclNameArgumentListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DeclNameArgumentListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its leading trivia removed."},{"p":["DeclNameArgumentListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its trailing trivia removed."},{"p":["DeclNameArgumentListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DeclNameArgumentListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DeclNameArgumentListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DeclNameArgumentSyntax",18,210],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DeclNameArgumentSyntax",18],["?",17]]},{"p":["DeclNameArgumentListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["DeclNameArgumentListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DeclNameArgumentListSyntax` with the element at the provided index\n           removed."},{"p":["DeclNameArgumentListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DeclNameArgumentListSyntax` with that element appended to the end."},{"p":["DeclNameArgumentListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DeclNameArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DeclNameArgumentListSyntax` with that element appended to the end."},{"p":["DeclNameArgumentListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,334]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the new element at the provided index."},{"p":["GenericParameterListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericParameterListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericParameterListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericParameterListSyntax",18,336],[".",17],["Iterator",18,337]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericParameterListSyntax",18],[".",17],["Iterator",18]]},{"p":["GenericParameterListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the last element.\n\n- Returns: A new `GenericParameterListSyntax` with the last element removed."},{"p":["GenericParameterListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the first element.\n\n- Returns: A new `GenericParameterListSyntax` with the first element removed."},{"p":["GenericParameterListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with all trivia removed."},{"p":["GenericParameterListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericParameterListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericParameterListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its leading trivia removed."},{"p":["GenericParameterListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its trailing trivia removed."},{"p":["GenericParameterListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericParameterListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericParameterListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericParameterSyntax",18,218],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericParameterSyntax",18],["?",17]]},{"p":["GenericParameterListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["GenericParameterListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericParameterListSyntax` with the element at the provided index\n           removed."},{"p":["GenericParameterListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericParameterListSyntax` with that element appended to the end."},{"p":["GenericParameterListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericParameterSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericParameterListSyntax` with that element appended to the end."},{"p":["GenericParameterListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,336]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericParameterListSyntax` with the new element at the provided index."},{"p":["MemberTypeIdentifierSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["MemberTypeIdentifierSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["MemberTypeIdentifierSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["MemberTypeIdentifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MemberTypeIdentifierSyntax",18,338]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["MemberTypeIdentifierSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalChainingExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["OptionalChainingExprSyntax",18,340]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["OptionalChainingExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["OptionalChainingExprSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OptionalChainingExprSyntax",18,340]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalChainingExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalChainingExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["OptionalChainingExprSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SimpleTypeIdentifierSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,342]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SimpleTypeIdentifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,342]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["SimpleTypeIdentifierSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SimpleTypeIdentifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TupleExprElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TupleExprElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleExprElementListSyntax",18,344],[".",17],["Iterator",18,345]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleExprElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["TupleExprElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the last element.\n\n- Returns: A new `TupleExprElementListSyntax` with the last element removed."},{"p":["TupleExprElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the first element.\n\n- Returns: A new `TupleExprElementListSyntax` with the first element removed."},{"p":["TupleExprElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with all trivia removed."},{"p":["TupleExprElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TupleExprElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TupleExprElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its leading trivia removed."},{"p":["TupleExprElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its trailing trivia removed."},{"p":["TupleExprElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleExprElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleExprElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TupleExprElementSyntax",18,230],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TupleExprElementSyntax",18],["?",17]]},{"p":["TupleExprElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["TupleExprElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TupleExprElementListSyntax` with the element at the provided index\n           removed."},{"p":["TupleExprElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TupleExprElementListSyntax` with that element appended to the end."},{"p":["TupleExprElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TupleExprElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TupleExprElementListSyntax` with that element appended to the end."},{"p":["TupleExprElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,344]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TupleExprElementListSyntax` with the new element at the provided index."},{"p":["TupleTypeElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TupleTypeElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TupleTypeElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleTypeElementListSyntax",18,346],[".",17],["Iterator",18,347]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleTypeElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["TupleTypeElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the last element.\n\n- Returns: A new `TupleTypeElementListSyntax` with the last element removed."},{"p":["TupleTypeElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the first element.\n\n- Returns: A new `TupleTypeElementListSyntax` with the first element removed."},{"p":["TupleTypeElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with all trivia removed."},{"p":["TupleTypeElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TupleTypeElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TupleTypeElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its leading trivia removed."},{"p":["TupleTypeElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its trailing trivia removed."},{"p":["TupleTypeElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleTypeElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TupleTypeElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TupleTypeElementSyntax",18,232],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TupleTypeElementSyntax",18],["?",17]]},{"p":["TupleTypeElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["TupleTypeElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TupleTypeElementListSyntax` with the element at the provided index\n           removed."},{"p":["TupleTypeElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TupleTypeElementListSyntax` with that element appended to the end."},{"p":["TupleTypeElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TupleTypeElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TupleTypeElementListSyntax` with that element appended to the end."},{"p":["TupleTypeElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,346]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TupleTypeElementListSyntax` with the new element at the provided index."},{"p":["AvailabilityConditionSyntax","addAvailabilityArgument(_:)"],"f":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilityConditionSyntax",18]],"d":"Adds the provided `AvailabilityArgument` to the node's `availabilitySpec`\ncollection.\n- param element: The new `AvailabilityArgument` to add to the node's\n                 `availabilitySpec` collection.\n- returns: A copy of the receiver with the provided `AvailabilityArgument`\n           appended to its `availabilitySpec` collection."},{"p":["AvailabilityConditionSyntax","withAvailabilitySpec(_:)"],"f":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `availabilitySpec` replaced.\n- param newChild: The new `availabilitySpec` to replace the node's\n                  current `availabilitySpec`, if present."},{"p":["AvailabilityConditionSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AvailabilityConditionSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AvailabilityConditionSyntax","withPoundAvailableKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundAvailableKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityConditionSyntax",18,348]],"s":[["func",12],[" ",17],["withPoundAvailableKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `poundAvailableKeyword` replaced.\n- param newChild: The new `poundAvailableKeyword` to replace the node's\n                  current `poundAvailableKeyword`, if present."},{"p":["AvailabilityConditionSyntaxBuilder","addAvailabilityArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","usePoundAvailableKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundAvailableKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundAvailableKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BackDeployVersionListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `BackDeployVersionListSyntax` with that element prepended to the\n           beginning."},{"p":["BackDeployVersionListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["BackDeployVersionListSyntax",18,350],[".",17],["Iterator",18,351]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["BackDeployVersionListSyntax",18],[".",17],["Iterator",18]]},{"p":["BackDeployVersionListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by removing the last element.\n\n- Returns: A new `BackDeployVersionListSyntax` with the last element removed."},{"p":["BackDeployVersionListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by removing the first element.\n\n- Returns: A new `BackDeployVersionListSyntax` with the first element removed."},{"p":["BackDeployVersionListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18]],"d":"Returns a new `BackDeployVersionListSyntax` with all trivia removed."},{"p":["BackDeployVersionListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Returns a new `BackDeployVersionListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["BackDeployVersionListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Returns a new `BackDeployVersionListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["BackDeployVersionListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18]],"d":"Returns a new `BackDeployVersionListSyntax` with its leading trivia removed."},{"p":["BackDeployVersionListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["BackDeployVersionListSyntax",18]],"d":"Returns a new `BackDeployVersionListSyntax` with its trailing trivia removed."},{"p":["BackDeployVersionListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["BackDeployVersionListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["BackDeployVersionListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["BackDeployVersionArgumentSyntax",18,406],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["BackDeployVersionArgumentSyntax",18],["?",17]]},{"p":["BackDeployVersionListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["BackDeployVersionListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `BackDeployVersionListSyntax` with the element at the provided index\n           removed."},{"p":["BackDeployVersionListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["appending",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `BackDeployVersionListSyntax` with that element appended to the end."},{"p":["BackDeployVersionListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["BackDeployVersionArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `BackDeployVersionListSyntax` with that element appended to the end."},{"p":["BackDeployVersionListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["BackDeployVersionListSyntax",18,350]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["BackDeployVersionListSyntax",18]],"d":"Creates a new `BackDeployVersionListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `BackDeployVersionListSyntax` with the new element at the provided index."},{"p":["DictionaryElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DictionaryElementListSyntax` with that element prepended to the\n           beginning."},{"p":["DictionaryElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DictionaryElementListSyntax",18,352],[".",17],["Iterator",18,353]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DictionaryElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["DictionaryElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the last element.\n\n- Returns: A new `DictionaryElementListSyntax` with the last element removed."},{"p":["DictionaryElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the first element.\n\n- Returns: A new `DictionaryElementListSyntax` with the first element removed."},{"p":["DictionaryElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with all trivia removed."},{"p":["DictionaryElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DictionaryElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DictionaryElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its leading trivia removed."},{"p":["DictionaryElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its trailing trivia removed."},{"p":["DictionaryElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DictionaryElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DictionaryElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DictionaryElementSyntax",18,244],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DictionaryElementSyntax",18],["?",17]]},{"p":["DictionaryElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["DictionaryElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DictionaryElementListSyntax` with the element at the provided index\n           removed."},{"p":["DictionaryElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DictionaryElementListSyntax` with that element appended to the end."},{"p":["DictionaryElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DictionaryElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DictionaryElementListSyntax` with that element appended to the end."},{"p":["DictionaryElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,352]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DictionaryElementListSyntax` with the new element at the provided index."},{"p":["DiscardAssignmentExprSyntax","withWildcard(_:)"],"f":[["func",12],[" ",17],["withWildcard",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DiscardAssignmentExprSyntax",18,354]],"s":[["func",12],[" ",17],["withWildcard",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DiscardAssignmentExprSyntax",18]],"d":"Returns a copy of the receiver with its `wildcard` replaced.\n- param newChild: The new `wildcard` to replace the node's\n                  current `wildcard`, if present."},{"p":["DiscardAssignmentExprSyntaxBuilder","useWildcard(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWildcard",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWildcard",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EditorPlaceholderExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EditorPlaceholderExprSyntax",18,356]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EditorPlaceholderExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["EditorPlaceholderExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `FunctionParameterListSyntax` with that element prepended to the\n           beginning."},{"p":["FunctionParameterListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["FunctionParameterListSyntax",18,358],[".",17],["Iterator",18,359]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["FunctionParameterListSyntax",18],[".",17],["Iterator",18]]},{"p":["FunctionParameterListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the last element.\n\n- Returns: A new `FunctionParameterListSyntax` with the last element removed."},{"p":["FunctionParameterListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the first element.\n\n- Returns: A new `FunctionParameterListSyntax` with the first element removed."},{"p":["FunctionParameterListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with all trivia removed."},{"p":["FunctionParameterListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["FunctionParameterListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["FunctionParameterListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its leading trivia removed."},{"p":["FunctionParameterListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its trailing trivia removed."},{"p":["FunctionParameterListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["FunctionParameterListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["FunctionParameterListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["FunctionParameterSyntax",18,250],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["FunctionParameterSyntax",18],["?",17]]},{"p":["FunctionParameterListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["FunctionParameterListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `FunctionParameterListSyntax` with the element at the provided index\n           removed."},{"p":["FunctionParameterListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["appending",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `FunctionParameterListSyntax` with that element appended to the end."},{"p":["FunctionParameterListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["FunctionParameterSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `FunctionParameterListSyntax` with that element appended to the end."},{"p":["FunctionParameterListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,358]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `FunctionParameterListSyntax` with the new element at the provided index."},{"p":["GenericArgumentClauseSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["GenericArgumentClauseSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentListSyntax",18,308],["?) -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["GenericArgumentListSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["GenericArgumentClauseSyntax","withLeftAngleBracket(_:)"],"f":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftAngleBracket` replaced.\n- param newChild: The new `leftAngleBracket` to replace the node's\n                  current `leftAngleBracket`, if present."},{"p":["GenericArgumentClauseSyntax","withRightAngleBracket(_:)"],"f":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericArgumentClauseSyntax",18,360]],"s":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightAngleBracket` replaced.\n- param newChild: The new `rightAngleBracket` to replace the node's\n                  current `rightAngleBracket`, if present."},{"p":["GenericArgumentClauseSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["GenericArgumentSyntax",18],[")",17]]},{"p":["GenericArgumentClauseSyntaxBuilder","useLeftAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericArgumentClauseSyntaxBuilder","useRightAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntax","withInheritedType(_:)"],"f":[["func",12],[" ",17],["withInheritedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withInheritedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedType` replaced.\n- param newChild: The new `inheritedType` to replace the node's\n                  current `inheritedType`, if present."},{"p":["PrimaryAssociatedTypeSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["PrimaryAssociatedTypeSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,370],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useInheritedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralSegmentsSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `StringLiteralSegmentsSyntax` with that element prepended to the\n           beginning."},{"p":["StringLiteralSegmentsSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364],[".",17],["Iterator",18,365]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StringLiteralSegmentsSyntax",18],[".",17],["Iterator",18]]},{"p":["StringLiteralSegmentsSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the last element.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the last element removed."},{"p":["StringLiteralSegmentsSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the first element.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the first element removed."},{"p":["StringLiteralSegmentsSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with all trivia removed."},{"p":["StringLiteralSegmentsSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["StringLiteralSegmentsSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["StringLiteralSegmentsSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its leading trivia removed."},{"p":["StringLiteralSegmentsSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its trailing trivia removed."},{"p":["StringLiteralSegmentsSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["StringLiteralSegmentsSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["StringLiteralSegmentsSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]]},{"p":["StringLiteralSegmentsSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["StringLiteralSegmentsSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `StringLiteralSegmentsSyntax` with the element at the provided index\n           removed."},{"p":["StringLiteralSegmentsSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `StringLiteralSegmentsSyntax` with that element appended to the end."},{"p":["StringLiteralSegmentsSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with that element appended to the end."},{"p":["StringLiteralSegmentsSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["StringLiteralSegmentsSyntax",18,364]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the new element at the provided index."},{"p":["SymbolicReferenceExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["SymbolicReferenceExprSyntax",18,366]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["SymbolicReferenceExprSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,360],["?) -> ",17],["SymbolicReferenceExprSyntax",18,366]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SymbolicReferenceExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SymbolicReferenceExprSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["TypeInheritanceClauseSyntax","addInheritedType(_:)"],"f":[["func",12],[" ",17],["addInheritedType",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["TypeInheritanceClauseSyntax",18,368]],"s":[["func",12],[" ",17],["addInheritedType",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Adds the provided `InheritedType` to the node's `inheritedTypeCollection`\ncollection.\n- param element: The new `InheritedType` to add to the node's\n                 `inheritedTypeCollection` collection.\n- returns: A copy of the receiver with the provided `InheritedType`\n           appended to its `inheritedTypeCollection` collection."},{"p":["TypeInheritanceClauseSyntax","withInheritedTypeCollection(_:)"],"f":[["func",12],[" ",17],["withInheritedTypeCollection",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InheritedTypeListSyntax",18,256],["?) -> ",17],["TypeInheritanceClauseSyntax",18,368]],"s":[["func",12],[" ",17],["withInheritedTypeCollection",7],["(",17],["InheritedTypeListSyntax",18],["?) -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedTypeCollection` replaced.\n- param newChild: The new `inheritedTypeCollection` to replace the node's\n                  current `inheritedTypeCollection`, if present."},{"p":["TypeInheritanceClauseSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TypeInheritanceClauseSyntax",18,368]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TypeInheritanceClauseSyntaxBuilder","addInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addInheritedType",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["addInheritedType",7],["(",17],["InheritedTypeSyntax",18],[")",17]]},{"p":["TypeInheritanceClauseSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypeInitializerClauseSyntax","withEqual(_:)"],"f":[["func",12],[" ",17],["withEqual",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TypeInitializerClauseSyntax",18,370]],"s":[["func",12],[" ",17],["withEqual",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeInitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `equal` replaced.\n- param newChild: The new `equal` to replace the node's\n                  current `equal`, if present."},{"p":["TypeInitializerClauseSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["TypeInitializerClauseSyntax",18,370]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeInitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["TypeInitializerClauseSyntaxBuilder","useEqual(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqual",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEqual",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypeInitializerClauseSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["UnresolvedPatternExprSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["UnresolvedPatternExprSyntax",18,372]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["UnresolvedPatternExprSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["UnresolvedPatternExprSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ClosureCaptureItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ClosureCaptureItemListSyntax` with that element prepended to the\n           beginning."},{"p":["ClosureCaptureItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374],[".",17],["Iterator",18,375]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureCaptureItemListSyntax",18],[".",17],["Iterator",18]]},{"p":["ClosureCaptureItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the last element.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the last element removed."},{"p":["ClosureCaptureItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the first element.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the first element removed."},{"p":["ClosureCaptureItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with all trivia removed."},{"p":["ClosureCaptureItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ClosureCaptureItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ClosureCaptureItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its leading trivia removed."},{"p":["ClosureCaptureItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its trailing trivia removed."},{"p":["ClosureCaptureItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureCaptureItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ClosureCaptureItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ClosureCaptureItemSyntax",18,280],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ClosureCaptureItemSyntax",18],["?",17]]},{"p":["ClosureCaptureItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ClosureCaptureItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ClosureCaptureItemListSyntax` with the element at the provided index\n           removed."},{"p":["ClosureCaptureItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ClosureCaptureItemListSyntax` with that element appended to the end."},{"p":["ClosureCaptureItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ClosureCaptureItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with that element appended to the end."},{"p":["ClosureCaptureItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,374]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the new element at the provided index."},{"p":["CompositionTypeElementSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["CompositionTypeElementSyntax",18,376]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["CompositionTypeElementSyntax","withAmpersand(_:)"],"f":[["func",12],[" ",17],["withAmpersand",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CompositionTypeElementSyntax",18,376]],"s":[["func",12],[" ",17],["withAmpersand",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `ampersand` replaced.\n- param newChild: The new `ampersand` to replace the node's\n                  current `ampersand`, if present."},{"p":["CompositionTypeElementSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["CompositionTypeElementSyntaxBuilder","useAmpersand(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAmpersand",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAmpersand",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntax","withLeftTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ConformanceRequirementSyntax",18,378]],"s":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `leftTypeIdentifier` replaced.\n- param newChild: The new `leftTypeIdentifier` to replace the node's\n                  current `leftTypeIdentifier`, if present."},{"p":["ConformanceRequirementSyntax","withRightTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ConformanceRequirementSyntax",18,378]],"s":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `rightTypeIdentifier` replaced.\n- param newChild: The new `rightTypeIdentifier` to replace the node's\n                  current `rightTypeIdentifier`, if present."},{"p":["ConformanceRequirementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ConformanceRequirementSyntax",18,378]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ConformanceRequirementSyntaxBuilder","useLeftTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntaxBuilder","useRightTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamSyntax","withParameter(_:)"],"f":[["func",12],[" ",17],["withParameter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["DifferentiabilityParamSyntax",18,380]],"s":[["func",12],[" ",17],["withParameter",7],["(",17],["Syntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]],"d":"Returns a copy of the receiver with its `parameter` replaced.\n- param newChild: The new `parameter` to replace the node's\n                  current `parameter`, if present."},{"p":["DifferentiabilityParamSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamSyntax",18,380]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["DifferentiabilityParamSyntaxBuilder","useParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useParameter",7],["(",17],["Syntax",18],[")",17]]},{"p":["DifferentiabilityParamSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntax","addGenericParameter(_:)"],"f":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterClauseSyntax",18]],"d":"Adds the provided `GenericParameter` to the node's `genericParameterList`\ncollection.\n- param element: The new `GenericParameter` to add to the node's\n                 `genericParameterList` collection.\n- returns: A copy of the receiver with the provided `GenericParameter`\n           appended to its `genericParameterList` collection."},{"p":["GenericParameterClauseSyntax","withGenericParameterList(_:)"],"f":[["func",12],[" ",17],["withGenericParameterList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterListSyntax",18,336],["?) -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["func",12],[" ",17],["withGenericParameterList",7],["(",17],["GenericParameterListSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterList` replaced.\n- param newChild: The new `genericParameterList` to replace the node's\n                  current `genericParameterList`, if present."},{"p":["GenericParameterClauseSyntax","withLeftAngleBracket(_:)"],"f":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftAngleBracket` replaced.\n- param newChild: The new `leftAngleBracket` to replace the node's\n                  current `leftAngleBracket`, if present."},{"p":["GenericParameterClauseSyntax","withRightAngleBracket(_:)"],"f":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GenericParameterClauseSyntax",18,382]],"s":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightAngleBracket` replaced.\n- param newChild: The new `rightAngleBracket` to replace the node's\n                  current `rightAngleBracket`, if present."},{"p":["GenericParameterClauseSyntaxBuilder","addGenericParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addGenericParameter",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["GenericParameterSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntaxBuilder","useLeftAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntaxBuilder","useRightAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericRequirementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericRequirementListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericRequirementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericRequirementListSyntax",18,384],[".",17],["Iterator",18,385]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericRequirementListSyntax",18],[".",17],["Iterator",18]]},{"p":["GenericRequirementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the last element.\n\n- Returns: A new `GenericRequirementListSyntax` with the last element removed."},{"p":["GenericRequirementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the first element.\n\n- Returns: A new `GenericRequirementListSyntax` with the first element removed."},{"p":["GenericRequirementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with all trivia removed."},{"p":["GenericRequirementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericRequirementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericRequirementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its leading trivia removed."},{"p":["GenericRequirementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its trailing trivia removed."},{"p":["GenericRequirementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericRequirementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["GenericRequirementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericRequirementSyntax",18,284],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericRequirementSyntax",18],["?",17]]},{"p":["GenericRequirementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["GenericRequirementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericRequirementListSyntax` with the element at the provided index\n           removed."},{"p":["GenericRequirementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericRequirementListSyntax` with that element appended to the end."},{"p":["GenericRequirementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericRequirementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericRequirementListSyntax` with that element appended to the end."},{"p":["GenericRequirementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,384]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericRequirementListSyntax` with the new element at the provided index."},{"p":["LabeledSpecializeEntrySyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["LabeledSpecializeEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["LabeledSpecializeEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["LabeledSpecializeEntrySyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,386]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["LabeledSpecializeEntrySyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["ClosureCaptureSignatureSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["ClosureCaptureSignatureSyntax","addItem(_:)"],"f":[["func",12],[" ",17],["addItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["func",12],[" ",17],["addItem",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Adds the provided `Item` to the node's `items`\ncollection.\n- param element: The new `Item` to add to the node's\n                 `items` collection.\n- returns: A copy of the receiver with the provided `Item`\n           appended to its `items` collection."},{"p":["ClosureCaptureSignatureSyntax","withItems(_:)"],"f":[["func",12],[" ",17],["withItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,388]],"s":[["func",12],[" ",17],["withItems",7],["(",17],["ClosureCaptureItemListSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `items` replaced.\n- param newChild: The new `items` to replace the node's\n                  current `items`, if present."},{"p":["ClosureCaptureSignatureSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntaxBuilder","addItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["addItem",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntax","addDifferentiabilityParam(_:)"],"f":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Adds the provided `DifferentiabilityParam` to the node's `diffParams`\ncollection.\n- param element: The new `DifferentiabilityParam` to add to the node's\n                 `diffParams` collection.\n- returns: A copy of the receiver with the provided `DifferentiabilityParam`\n           appended to its `diffParams` collection."},{"p":["DifferentiabilityParamsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],["?) -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamListSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DifferentiabilityParamsSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["DifferentiabilityParamsSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamsSyntax",18,390]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["DifferentiabilityParamsSyntaxBuilder","addDifferentiabilityParam(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[")",17]],"s":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntax","withFileName(_:)"],"f":[["func",12],[" ",17],["withFileName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withFileName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileName` replaced.\n- param newChild: The new `fileName` to replace the node's\n                  current `fileName`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineNumber(_:)"],"f":[["func",12],[" ",17],["withLineNumber",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withLineNumber",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineNumber` replaced.\n- param newChild: The new `lineNumber` to replace the node's\n                  current `lineNumber`, if present."},{"p":["PoundSourceLocationArgsSyntax","withFileArgColon(_:)"],"f":[["func",12],[" ",17],["withFileArgColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withFileArgColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileArgColon` replaced.\n- param newChild: The new `fileArgColon` to replace the node's\n                  current `fileArgColon`, if present."},{"p":["PoundSourceLocationArgsSyntax","withFileArgLabel(_:)"],"f":[["func",12],[" ",17],["withFileArgLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withFileArgLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileArgLabel` replaced.\n- param newChild: The new `fileArgLabel` to replace the node's\n                  current `fileArgLabel`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineArgColon(_:)"],"f":[["func",12],[" ",17],["withLineArgColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withLineArgColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineArgColon` replaced.\n- param newChild: The new `lineArgColon` to replace the node's\n                  current `lineArgColon`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineArgLabel(_:)"],"f":[["func",12],[" ",17],["withLineArgLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withLineArgLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineArgLabel` replaced.\n- param newChild: The new `lineArgLabel` to replace the node's\n                  current `lineArgLabel`, if present."},{"p":["PoundSourceLocationArgsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,392]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFileName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineNumber(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineNumber",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLineNumber",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileArgColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileArgColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFileArgColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileArgLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileArgLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFileArgLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineArgColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineArgColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLineArgColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineArgLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineArgLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLineArgLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element prepended to the\n           beginning."},{"p":["PrecedenceGroupNameListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394],[".",17],["Iterator",18,395]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18],[".",17],["Iterator",18]]},{"p":["PrecedenceGroupNameListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the last element.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the last element removed."},{"p":["PrecedenceGroupNameListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the first element.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the first element removed."},{"p":["PrecedenceGroupNameListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with all trivia removed."},{"p":["PrecedenceGroupNameListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupNameListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupNameListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its leading trivia removed."},{"p":["PrecedenceGroupNameListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its trailing trivia removed."},{"p":["PrecedenceGroupNameListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupNameListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupNameListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18,418],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18],["?",17]]},{"p":["PrecedenceGroupNameListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["PrecedenceGroupNameListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrecedenceGroupNameListSyntax` with the element at the provided index\n           removed."},{"p":["PrecedenceGroupNameListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupNameListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupNameListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["PrecedenceGroupNameListSyntax",18,394]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the new element at the provided index."},{"p":["PrecedenceGroupRelationSyntax","withHigherThanOrLowerThan(_:)"],"f":[["func",12],[" ",17],["withHigherThanOrLowerThan",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["func",12],[" ",17],["withHigherThanOrLowerThan",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `higherThanOrLowerThan` replaced.\n- param newChild: The new `higherThanOrLowerThan` to replace the node's\n                  current `higherThanOrLowerThan`, if present."},{"p":["PrecedenceGroupRelationSyntax","addOtherName(_:)"],"f":[["func",12],[" ",17],["addOtherName",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["func",12],[" ",17],["addOtherName",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Adds the provided `OtherName` to the node's `otherNames`\ncollection.\n- param element: The new `OtherName` to add to the node's\n                 `otherNames` collection.\n- returns: A copy of the receiver with the provided `OtherName`\n           appended to its `otherNames` collection."},{"p":["PrecedenceGroupRelationSyntax","withOtherNames(_:)"],"f":[["func",12],[" ",17],["withOtherNames",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["func",12],[" ",17],["withOtherNames",7],["(",17],["PrecedenceGroupNameListSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `otherNames` replaced.\n- param newChild: The new `otherNames` to replace the node's\n                  current `otherNames`, if present."},{"p":["PrecedenceGroupRelationSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,396]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupRelationSyntaxBuilder","useHigherThanOrLowerThan(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useHigherThanOrLowerThan",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useHigherThanOrLowerThan",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupRelationSyntaxBuilder","addOtherName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addOtherName",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[")",17]],"s":[["func",12],[" ",17],["addOtherName",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]]},{"p":["PrecedenceGroupRelationSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TuplePatternElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TuplePatternElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TuplePatternElementListSyntax",18,398],[".",17],["Iterator",18,399]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TuplePatternElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["TuplePatternElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the last element.\n\n- Returns: A new `TuplePatternElementListSyntax` with the last element removed."},{"p":["TuplePatternElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the first element.\n\n- Returns: A new `TuplePatternElementListSyntax` with the first element removed."},{"p":["TuplePatternElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with all trivia removed."},{"p":["TuplePatternElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TuplePatternElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TuplePatternElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its leading trivia removed."},{"p":["TuplePatternElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its trailing trivia removed."},{"p":["TuplePatternElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TuplePatternElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TuplePatternElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TuplePatternElementSyntax",18,320],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TuplePatternElementSyntax",18],["?",17]]},{"p":["TuplePatternElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["TuplePatternElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TuplePatternElementListSyntax` with the element at the provided index\n           removed."},{"p":["TuplePatternElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TuplePatternElementListSyntax` with that element appended to the end."},{"p":["TuplePatternElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TuplePatternElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TuplePatternElementListSyntax` with that element appended to the end."},{"p":["TuplePatternElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,398]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TuplePatternElementListSyntax` with the new element at the provided index."},{"p":["UnavailabilityConditionSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["UnavailabilityConditionSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["UnavailabilityConditionSyntax","withAvailabilitySpec(_:)"],"f":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `availabilitySpec` replaced.\n- param newChild: The new `availabilitySpec` to replace the node's\n                  current `availabilitySpec`, if present."},{"p":["UnavailabilityConditionSyntax","addAvailabilityArgument(_:)"],"f":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Adds the provided `AvailabilityArgument` to the node's `availabilitySpec`\ncollection.\n- param element: The new `AvailabilityArgument` to add to the node's\n                 `availabilitySpec` collection.\n- returns: A copy of the receiver with the provided `AvailabilityArgument`\n           appended to its `availabilitySpec` collection."},{"p":["UnavailabilityConditionSyntax","withPoundUnavailableKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundUnavailableKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["UnavailabilityConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withPoundUnavailableKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `poundUnavailableKeyword` replaced.\n- param newChild: The new `poundUnavailableKeyword` to replace the node's\n                  current `poundUnavailableKeyword`, if present."},{"p":["UnavailabilityConditionSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","addAvailabilityArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","usePoundUnavailableKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundUnavailableKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePoundUnavailableKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["MatchingPatternConditionSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["MatchingPatternConditionSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["MatchingPatternConditionSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["MatchingPatternConditionSyntax",18,402]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["MatchingPatternConditionSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["OptionalBindingConditionSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["OptionalBindingConditionSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["OptionalBindingConditionSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OptionalBindingConditionSyntax",18,404]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["OptionalBindingConditionSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BackDeployVersionArgumentSyntax","withAvailabilityVersionRestriction(_:)"],"f":[["func",12],[" ",17],["withAvailabilityVersionRestriction",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],["?) -> ",17],["BackDeployVersionArgumentSyntax",18,406]],"s":[["func",12],[" ",17],["withAvailabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],["?) -> ",17],["BackDeployVersionArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `availabilityVersionRestriction` replaced.\n- param newChild: The new `availabilityVersionRestriction` to replace the node's\n                  current `availabilityVersionRestriction`, if present."},{"p":["BackDeployVersionArgumentSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BackDeployVersionArgumentSyntax",18,406]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BackDeployVersionArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["BackDeployVersionArgumentSyntaxBuilder","useAvailabilityVersionRestriction(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAvailabilityVersionRestriction",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[")",17]],"s":[["func",12],[" ",17],["useAvailabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]]},{"p":["BackDeployVersionArgumentSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntax","withAssignmentKeyword(_:)"],"f":[["func",12],[" ",17],["withAssignmentKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,408]],"s":[["func",12],[" ",17],["withAssignmentKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `assignmentKeyword` replaced.\n- param newChild: The new `assignmentKeyword` to replace the node's\n                  current `assignmentKeyword`, if present."},{"p":["PrecedenceGroupAssignmentSyntax","withFlag(_:)"],"f":[["func",12],[" ",17],["withFlag",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,408]],"s":[["func",12],[" ",17],["withFlag",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `flag` replaced.\n- param newChild: The new `flag` to replace the node's\n                  current `flag`, if present."},{"p":["PrecedenceGroupAssignmentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,408]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useAssignmentKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignmentKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAssignmentKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useFlag(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFlag",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useFlag",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element prepended to the\n           beginning."},{"p":["PrimaryAssociatedTypeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410],[".",17],["Iterator",18,411]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18],[".",17],["Iterator",18]]},{"p":["PrimaryAssociatedTypeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the last element.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the last element removed."},{"p":["PrimaryAssociatedTypeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the first element.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the first element removed."},{"p":["PrimaryAssociatedTypeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with all trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrimaryAssociatedTypeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrimaryAssociatedTypeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its leading trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its trailing trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrimaryAssociatedTypeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrimaryAssociatedTypeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18,362],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["PrimaryAssociatedTypeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the element at the provided index\n           removed."},{"p":["PrimaryAssociatedTypeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element appended to the end."},{"p":["PrimaryAssociatedTypeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element appended to the end."},{"p":["PrimaryAssociatedTypeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,410]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the new element at the provided index."},{"p":["CompositionTypeElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CompositionTypeElementListSyntax` with that element prepended to the\n           beginning."},{"p":["CompositionTypeElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412],[".",17],["Iterator",18,413]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompositionTypeElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["CompositionTypeElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the last element.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the last element removed."},{"p":["CompositionTypeElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the first element.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the first element removed."},{"p":["CompositionTypeElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with all trivia removed."},{"p":["CompositionTypeElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CompositionTypeElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CompositionTypeElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its leading trivia removed."},{"p":["CompositionTypeElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its trailing trivia removed."},{"p":["CompositionTypeElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["CompositionTypeElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CompositionTypeElementSyntax",18,376],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CompositionTypeElementSyntax",18],["?",17]]},{"p":["CompositionTypeElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["CompositionTypeElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CompositionTypeElementListSyntax` with the element at the provided index\n           removed."},{"p":["CompositionTypeElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CompositionTypeElementListSyntax` with that element appended to the end."},{"p":["CompositionTypeElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,376],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CompositionTypeElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CompositionTypeElementListSyntax` with that element appended to the end."},{"p":["CompositionTypeElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["CompositionTypeElementListSyntax",18,412]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the new element at the provided index."},{"p":["DifferentiabilityParamListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DifferentiabilityParamListSyntax` with that element prepended to the\n           beginning."},{"p":["DifferentiabilityParamListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414],[".",17],["Iterator",18,415]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DifferentiabilityParamListSyntax",18],[".",17],["Iterator",18]]},{"p":["DifferentiabilityParamListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the last element.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the last element removed."},{"p":["DifferentiabilityParamListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the first element.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the first element removed."},{"p":["DifferentiabilityParamListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with all trivia removed."},{"p":["DifferentiabilityParamListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DifferentiabilityParamListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DifferentiabilityParamListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its leading trivia removed."},{"p":["DifferentiabilityParamListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its trailing trivia removed."},{"p":["DifferentiabilityParamListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DifferentiabilityParamListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["DifferentiabilityParamListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DifferentiabilityParamSyntax",18,380],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DifferentiabilityParamSyntax",18],["?",17]]},{"p":["DifferentiabilityParamListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["DifferentiabilityParamListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DifferentiabilityParamListSyntax` with the element at the provided index\n           removed."},{"p":["DifferentiabilityParamListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DifferentiabilityParamListSyntax` with that element appended to the end."},{"p":["DifferentiabilityParamListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DifferentiabilityParamSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with that element appended to the end."},{"p":["DifferentiabilityParamListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["DifferentiabilityParamListSyntax",18,414]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the new element at the provided index."},{"p":["OperatorPrecedenceAndTypesSyntax","addPrecedenceGroupAndDesignatedType(_:)"],"f":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18,416]],"s":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["TokenSyntax",18],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Adds the provided `PrecedenceGroupAndDesignatedType` to the node's `precedenceGroupAndDesignatedTypes`\ncollection.\n- param element: The new `PrecedenceGroupAndDesignatedType` to add to the node's\n                 `precedenceGroupAndDesignatedTypes` collection.\n- returns: A copy of the receiver with the provided `PrecedenceGroupAndDesignatedType`\n           appended to its `precedenceGroupAndDesignatedTypes` collection."},{"p":["OperatorPrecedenceAndTypesSyntax","withPrecedenceGroupAndDesignatedTypes(_:)"],"f":[["func",12],[" ",17],["withPrecedenceGroupAndDesignatedTypes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IdentifierListSyntax",18,141],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18,416]],"s":[["func",12],[" ",17],["withPrecedenceGroupAndDesignatedTypes",7],["(",17],["IdentifierListSyntax",18],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Returns a copy of the receiver with its `precedenceGroupAndDesignatedTypes` replaced.\n- param newChild: The new `precedenceGroupAndDesignatedTypes` to replace the node's\n                  current `precedenceGroupAndDesignatedTypes`, if present."},{"p":["OperatorPrecedenceAndTypesSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18,416]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder","addPrecedenceGroupAndDesignatedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameElementSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,418]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["PrecedenceGroupNameElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,418]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["PrecedenceGroupNameElementSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["AvailabilityLabeledArgumentSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["AvailabilityLabeledArgumentSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["Syntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["Syntax",18],[")",17]]},{"p":["BackDeployAttributeSpecListSyntax","withVersionList(_:)"],"f":[["func",12],[" ",17],["withVersionList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["BackDeployVersionListSyntax",18,350],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["func",12],[" ",17],["withVersionList",7],["(",17],["BackDeployVersionListSyntax",18],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18]],"d":"Returns a copy of the receiver with its `versionList` replaced.\n- param newChild: The new `versionList` to replace the node's\n                  current `versionList`, if present."},{"p":["BackDeployAttributeSpecListSyntax","addAvailability(_:)"],"f":[["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["BackDeployAttributeSpecListSyntax",18]],"d":"Adds the provided `Availability` to the node's `versionList`\ncollection.\n- param element: The new `Availability` to add to the node's\n                 `versionList` collection.\n- returns: A copy of the receiver with the provided `Availability`\n           appended to its `versionList` collection."},{"p":["BackDeployAttributeSpecListSyntax","withBeforeLabel(_:)"],"f":[["func",12],[" ",17],["withBeforeLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["func",12],[" ",17],["withBeforeLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18]],"d":"Returns a copy of the receiver with its `beforeLabel` replaced.\n- param newChild: The new `beforeLabel` to replace the node's\n                  current `beforeLabel`, if present."},{"p":["BackDeployAttributeSpecListSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18,422]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BackDeployAttributeSpecListSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["BackDeployAttributeSpecListSyntaxBuilder","useBeforeLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBeforeLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useBeforeLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BackDeployAttributeSpecListSyntaxBuilder","addAvailability(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[")",17]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["BackDeployVersionArgumentSyntax",18],[")",17]]},{"p":["BackDeployAttributeSpecListSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeClauseSyntax","addPrimaryAssociatedType(_:)"],"f":[["func",12],[" ",17],["addPrimaryAssociatedType",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["func",12],[" ",17],["addPrimaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]],"d":"Adds the provided `PrimaryAssociatedType` to the node's `primaryAssociatedTypeList`\ncollection.\n- param element: The new `PrimaryAssociatedType` to add to the node's\n                 `primaryAssociatedTypeList` collection.\n- returns: A copy of the receiver with the provided `PrimaryAssociatedType`\n           appended to its `primaryAssociatedTypeList` collection."},{"p":["PrimaryAssociatedTypeClauseSyntax","withPrimaryAssociatedTypeList(_:)"],"f":[["func",12],[" ",17],["withPrimaryAssociatedTypeList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["func",12],[" ",17],["withPrimaryAssociatedTypeList",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]],"d":"Returns a copy of the receiver with its `primaryAssociatedTypeList` replaced.\n- param newChild: The new `primaryAssociatedTypeList` to replace the node's\n                  current `primaryAssociatedTypeList`, if present."},{"p":["PrimaryAssociatedTypeClauseSyntax","withLeftAngleBracket(_:)"],"f":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftAngleBracket` replaced.\n- param newChild: The new `leftAngleBracket` to replace the node's\n                  current `leftAngleBracket`, if present."},{"p":["PrimaryAssociatedTypeClauseSyntax","withRightAngleBracket(_:)"],"f":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18,424]],"s":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightAngleBracket` replaced.\n- param newChild: The new `rightAngleBracket` to replace the node's\n                  current `rightAngleBracket`, if present."},{"p":["PrimaryAssociatedTypeClauseSyntaxBuilder","addPrimaryAssociatedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addPrimaryAssociatedType",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[")",17]],"s":[["func",12],[" ",17],["addPrimaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeClauseSyntaxBuilder","useLeftAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeClauseSyntaxBuilder","useRightAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SpecializeAttributeSpecListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element prepended to the\n           beginning."},{"p":["SpecializeAttributeSpecListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426],[".",17],["Iterator",18,427]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18],[".",17],["Iterator",18]]},{"p":["SpecializeAttributeSpecListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the last element.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the last element removed."},{"p":["SpecializeAttributeSpecListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the first element.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the first element removed."},{"p":["SpecializeAttributeSpecListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with all trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["SpecializeAttributeSpecListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["SpecializeAttributeSpecListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its leading trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its trailing trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SpecializeAttributeSpecListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SpecializeAttributeSpecListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]]},{"p":["SpecializeAttributeSpecListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["SpecializeAttributeSpecListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the element at the provided index\n           removed."},{"p":["SpecializeAttributeSpecListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element appended to the end."},{"p":["SpecializeAttributeSpecListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element appended to the end."},{"p":["SpecializeAttributeSpecListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,426]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the new element at the provided index."},{"p":["ImplementsAttributeArgumentsSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withDeclBaseName(_:)"],"f":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["Syntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `declBaseName` replaced.\n- param newChild: The new `declBaseName` to replace the node's\n                  current `declBaseName`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["func",12],[" ",17],["withType",7],["(",17],["SimpleTypeIdentifierSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,428]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useDeclBaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclBaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useDeclBaseName",7],["(",17],["Syntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntax","withStringOrDeclname(_:)"],"f":[["func",12],[" ",17],["withStringOrDeclname",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,430]],"s":[["func",12],[" ",17],["withStringOrDeclname",7],["(",17],["Syntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `stringOrDeclname` replaced.\n- param newChild: The new `stringOrDeclname` to replace the node's\n                  current `stringOrDeclname`, if present."},{"p":["NamedAttributeStringArgumentSyntax","withNameTok(_:)"],"f":[["func",12],[" ",17],["withNameTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,430]],"s":[["func",12],[" ",17],["withNameTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `nameTok` replaced.\n- param newChild: The new `nameTok` to replace the node's\n                  current `nameTok`, if present."},{"p":["NamedAttributeStringArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,430]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useStringOrDeclname(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useStringOrDeclname",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useStringOrDeclname",7],["(",17],["Syntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useNameTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useNameTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useNameTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntax","withAssociativityKeyword(_:)"],"f":[["func",12],[" ",17],["withAssociativityKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,432]],"s":[["func",12],[" ",17],["withAssociativityKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `associativityKeyword` replaced.\n- param newChild: The new `associativityKeyword` to replace the node's\n                  current `associativityKeyword`, if present."},{"p":["PrecedenceGroupAssociativitySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,432]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupAssociativitySyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,432]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useAssociativityKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociativityKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAssociativityKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAttributeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element prepended to the\n           beginning."},{"p":["PrecedenceGroupAttributeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434],[".",17],["Iterator",18,435]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18],[".",17],["Iterator",18]]},{"p":["PrecedenceGroupAttributeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the last element.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the last element removed."},{"p":["PrecedenceGroupAttributeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the first element.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the first element removed."},{"p":["PrecedenceGroupAttributeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with all trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupAttributeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupAttributeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its leading trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its trailing trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupAttributeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["PrecedenceGroupAttributeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]]},{"p":["PrecedenceGroupAttributeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["PrecedenceGroupAttributeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the element at the provided index\n           removed."},{"p":["PrecedenceGroupAttributeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupAttributeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupAttributeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,521],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,434]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the new element at the provided index."},{"p":["DifferentiabilityParamsClauseSyntax","withWrtLabel(_:)"],"f":[["func",12],[" ",17],["withWrtLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,436]],"s":[["func",12],[" ",17],["withWrtLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `wrtLabel` replaced.\n- param newChild: The new `wrtLabel` to replace the node's\n                  current `wrtLabel`, if present."},{"p":["DifferentiabilityParamsClauseSyntax","withParameters(_:)"],"f":[["func",12],[" ",17],["withParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,436]],"s":[["func",12],[" ",17],["withParameters",7],["(",17],["Syntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `parameters` replaced.\n- param newChild: The new `parameters` to replace the node's\n                  current `parameters`, if present."},{"p":["DifferentiabilityParamsClauseSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,436]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useWrtLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrtLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWrtLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useParameters",7],["(",17],["Syntax",18],[")",17]]},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityVersionRestrictionSyntax","withVersion(_:)"],"f":[["func",12],[" ",17],["withVersion",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["VersionTupleSyntax",18,97],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,438]],"s":[["func",12],[" ",17],["withVersion",7],["(",17],["VersionTupleSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]],"d":"Returns a copy of the receiver with its `version` replaced.\n- param newChild: The new `version` to replace the node's\n                  current `version`, if present."},{"p":["AvailabilityVersionRestrictionSyntax","withPlatform(_:)"],"f":[["func",12],[" ",17],["withPlatform",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,438]],"s":[["func",12],[" ",17],["withPlatform",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]],"d":"Returns a copy of the receiver with its `platform` replaced.\n- param newChild: The new `platform` to replace the node's\n                  current `platform`, if present."},{"p":["AvailabilityVersionRestrictionSyntaxBuilder","useVersion(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useVersion",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["useVersion",7],["(",17],["VersionTupleSyntax",18],[")",17]]},{"p":["AvailabilityVersionRestrictionSyntaxBuilder","usePlatform(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePlatform",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePlatform",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntax","withClosure(_:)"],"f":[["func",12],[" ",17],["withClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["func",12],[" ",17],["withClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `closure` replaced.\n- param newChild: The new `closure` to replace the node's\n                  current `closure`, if present."},{"p":["MultipleTrailingClosureElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["MultipleTrailingClosureElementSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","withWrappedType(_:)"],"f":[["func",12],[" ",17],["withWrappedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442]],"s":[["func",12],[" ",17],["withWrappedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `wrappedType` replaced.\n- param newChild: The new `wrappedType` to replace the node's\n                  current `wrappedType`, if present."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","withExclamationMark(_:)"],"f":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442]],"s":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `exclamationMark` replaced.\n- param newChild: The new `exclamationMark` to replace the node's\n                  current `exclamationMark`, if present."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder","useWrappedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrappedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useWrappedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder","useExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffKind(_:)"],"f":[["func",12],[" ",17],["withDiffKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["func",12],[" ",17],["withDiffKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffKind` replaced.\n- param newChild: The new `diffKind` to replace the node's\n                  current `diffKind`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffKindComma(_:)"],"f":[["func",12],[" ",17],["withDiffKindComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["func",12],[" ",17],["withDiffKindComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffKindComma` replaced.\n- param newChild: The new `diffKindComma` to replace the node's\n                  current `diffKindComma`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffParamsComma(_:)"],"f":[["func",12],[" ",17],["withDiffParamsComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,444]],"s":[["func",12],[" ",17],["withDiffParamsComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParamsComma` replaced.\n- param newChild: The new `diffParamsComma` to replace the node's\n                  current `diffParamsComma`, if present."},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDiffKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffParams(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParams",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["useDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffKindComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffKindComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDiffKindComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffParamsComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParamsComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDiffParamsComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["MultipleTrailingClosureElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its trailing trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element prepended to the\n           beginning."},{"p":["MultipleTrailingClosureElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446],[".",17],["Iterator",18,447]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18],[".",17],["Iterator",18]]},{"p":["MultipleTrailingClosureElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the last element.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the last element removed."},{"p":["MultipleTrailingClosureElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the first element.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the first element removed."},{"p":["MultipleTrailingClosureElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with all trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["MultipleTrailingClosureElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its leading trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["MultipleTrailingClosureElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["MultipleTrailingClosureElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18,440],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18],["?",17]]},{"p":["MultipleTrailingClosureElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["MultipleTrailingClosureElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the element at the provided index\n           removed."},{"p":["MultipleTrailingClosureElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["appending",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element appended to the end."},{"p":["MultipleTrailingClosureElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element appended to the end."},{"p":["MultipleTrailingClosureElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,446]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the new element at the provided index."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withOfLabel(_:)"],"f":[["func",12],[" ",17],["withOfLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withOfLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `ofLabel` replaced.\n- param newChild: The new `ofLabel` to replace the node's\n                  current `ofLabel`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withAccessorKind(_:)"],"f":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `accessorKind` replaced.\n- param newChild: The new `accessorKind` to replace the node's\n                  current `accessorKind`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withOriginalDeclName(_:)"],"f":[["func",12],[" ",17],["withOriginalDeclName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["QualifiedDeclNameSyntax",18,270],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withOriginalDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `originalDeclName` replaced.\n- param newChild: The new `originalDeclName` to replace the node's\n                  current `originalDeclName`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useOfLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOfLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useOfLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useDiffParams(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParams",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["useDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useAccessorKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessorKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAccessorKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useOriginalDeclName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOriginalDeclName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["useOriginalDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["DeclSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["DeclSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `DeclSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["DeclSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]]},{"p":["DeclSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]]},{"p":["ExprSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["ExprSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["ExprSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `ExprSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["ExprSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]]},{"p":["ExprSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]]},{"p":["StmtSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["StmtSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["StmtSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `StmtSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["StmtSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]]},{"p":["StmtSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]]},{"p":["TypeSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["TypeSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["TypeSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `TypeSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["TypeSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]]},{"p":["TypeSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]]},{"p":["TokenSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with all trivia removed."},{"p":["TokenSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its leading trivia replaced\nby the provided trivia."},{"p":["TokenSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its trailing trivia replaced\nby the provided trivia."},{"p":["TokenSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its leading trivia removed."},{"p":["TokenSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its trailing trivia removed."},{"p":["TokenSyntax","withKind(_:)"],"f":[["func",12],[" ",17],["withKind",7],["(",17],["_",1],[" ",17],["tokenKind",2],[": ",17],["TokenKind",18,24],[") -> ",17],["TokenSyntax",18,454]],"s":[["func",12],[" ",17],["withKind",7],["(",17],["TokenKind",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its kind replaced\nby the provided token kind."},{"p":["AsExprSyntax","withAsTok(_:)"],"f":[["func",12],[" ",17],["withAsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AsExprSyntax",18,455]],"s":[["func",12],[" ",17],["withAsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `asTok` replaced.\n- param newChild: The new `asTok` to replace the node's\n                  current `asTok`, if present."},{"p":["AsExprSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["AsExprSyntax",18,455]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["AsExprSyntax","withQuestionOrExclamationMark(_:)"],"f":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AsExprSyntax",18,455]],"s":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionOrExclamationMark` replaced.\n- param newChild: The new `questionOrExclamationMark` to replace the node's\n                  current `questionOrExclamationMark`, if present."},{"p":["AsExprSyntaxBuilder","useAsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsExprSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AsExprSyntaxBuilder","useQuestionOrExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BracedSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["BracedSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DoStmtSyntax","withDoKeyword(_:)"],"f":[["func",12],[" ",17],["withDoKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["withDoKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `doKeyword` replaced.\n- param newChild: The new `doKeyword` to replace the node's\n                  current `doKeyword`, if present."},{"p":["DoStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["DoStmtSyntax","addCatchClause(_:)"],"f":[["func",12],[" ",17],["addCatchClause",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["addCatchClause",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["DoStmtSyntax",18]],"d":"Adds the provided `CatchClause` to the node's `catchClauses`\ncollection.\n- param element: The new `CatchClause` to add to the node's\n                 `catchClauses` collection.\n- returns: A copy of the receiver with the provided `CatchClause`\n           appended to its `catchClauses` collection."},{"p":["DoStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["DoStmtSyntax","withCatchClauses(_:)"],"f":[["func",12],[" ",17],["withCatchClauses",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CatchClauseListSyntax",18,160],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["withCatchClauses",7],["(",17],["CatchClauseListSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `catchClauses` replaced.\n- param newChild: The new `catchClauses` to replace the node's\n                  current `catchClauses`, if present."},{"p":["DoStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["DoStmtSyntax",18,457]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["DoStmtSyntaxBuilder","useDoKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDoKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDoKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","addCatchClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCatchClause",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["addCatchClause",7],["(",17],["CatchClauseSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["IfStmtSyntax","withIfKeyword(_:)"],"f":[["func",12],[" ",17],["withIfKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withIfKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `ifKeyword` replaced.\n- param newChild: The new `ifKeyword` to replace the node's\n                  current `ifKeyword`, if present."},{"p":["IfStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["IfStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["IfStmtSyntax","withElseBody(_:)"],"f":[["func",12],[" ",17],["withElseBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withElseBody",7],["(",17],["Syntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseBody` replaced.\n- param newChild: The new `elseBody` to replace the node's\n                  current `elseBody`, if present."},{"p":["IfStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["IfStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["IfStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["IfStmtSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["IfStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["IfStmtSyntax",18,459]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["IfStmtSyntaxBuilder","useIfKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIfKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIfKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useElseBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useElseBody",7],["(",17],["Syntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["IsExprSyntax","withIsTok(_:)"],"f":[["func",12],[" ",17],["withIsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["IsExprSyntax",18,461]],"s":[["func",12],[" ",17],["withIsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IsExprSyntax",18]],"d":"Returns a copy of the receiver with its `isTok` replaced.\n- param newChild: The new `isTok` to replace the node's\n                  current `isTok`, if present."},{"p":["IsExprSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["IsExprSyntax",18,461]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["IsExprSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["IsExprSyntaxBuilder","useIsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsExprSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["LabeledSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["LabeledSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["PatternSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["PatternSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["PatternSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `PatternSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["PatternSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]]},{"p":["PatternSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]]},{"p":["TryExprSyntax","withTryKeyword(_:)"],"f":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TryExprSyntax",18,464]],"s":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `tryKeyword` replaced.\n- param newChild: The new `tryKeyword` to replace the node's\n                  current `tryKeyword`, if present."},{"p":["TryExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["TryExprSyntax",18,464]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["TryExprSyntax","withQuestionOrExclamationMark(_:)"],"f":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TryExprSyntax",18,464]],"s":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionOrExclamationMark` replaced.\n- param newChild: The new `questionOrExclamationMark` to replace the node's\n                  current `questionOrExclamationMark`, if present."},{"p":["TryExprSyntaxBuilder","useTryKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTryKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTryKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TryExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TryExprSyntaxBuilder","useQuestionOrExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CaseItemSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["CaseItemSyntax",18,467]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["CaseItemSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["CaseItemSyntax",18,467]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["CaseItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CaseItemSyntax",18,467]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["CaseItemSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["CaseItemSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["CaseItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameSyntax","withDeclBaseName(_:)"],"f":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["DeclNameSyntax",18,469]],"s":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["Syntax",18],["?) -> ",17],["DeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `declBaseName` replaced.\n- param newChild: The new `declBaseName` to replace the node's\n                  current `declBaseName`, if present."},{"p":["DeclNameSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["DeclNameSyntax",18,469]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["DeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["DeclNameSyntaxBuilder","useDeclBaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclBaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useDeclBaseName",7],["(",17],["Syntax",18],[")",17]]},{"p":["DeclNameSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["EnumDeclSyntax","withEnumKeyword(_:)"],"f":[["func",12],[" ",17],["withEnumKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withEnumKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `enumKeyword` replaced.\n- param newChild: The new `enumKeyword` to replace the node's\n                  current `enumKeyword`, if present."},{"p":["EnumDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["EnumDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["EnumDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["EnumDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["EnumDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["EnumDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["EnumDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["EnumDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["EnumDeclSyntax","withGenericParameters(_:)"],"f":[["func",12],[" ",17],["withGenericParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withGenericParameters",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameters` replaced.\n- param newChild: The new `genericParameters` to replace the node's\n                  current `genericParameters`, if present."},{"p":["EnumDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["EnumDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["EnumDeclSyntax",18,471]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["EnumDeclSyntaxBuilder","useEnumKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEnumKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useEnumKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useGenericParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameters",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ExprListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ExprListSyntax` with that element prepended to the\n           beginning."},{"p":["ExprListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExprListSyntax",18,473],[".",17],["Iterator",18,474]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExprListSyntax",18],[".",17],["Iterator",18]]},{"p":["ExprListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the last element.\n\n- Returns: A new `ExprListSyntax` with the last element removed."},{"p":["ExprListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the first element.\n\n- Returns: A new `ExprListSyntax` with the first element removed."},{"p":["ExprListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with all trivia removed."},{"p":["ExprListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ExprListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ExprListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its leading trivia removed."},{"p":["ExprListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its trailing trivia removed."},{"p":["ExprListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ExprListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ExprListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ExprSyntax",18,451],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ExprSyntax",18],["?",17]]},{"p":["ExprListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ExprListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ExprListSyntax` with the element at the provided index\n           removed."},{"p":["ExprListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ExprListSyntax` with that element appended to the end."},{"p":["ExprListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,451],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ExprSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ExprListSyntax` with that element appended to the end."},{"p":["ExprListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,451],[") -> ",17],["ExprListSyntax",18,473]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ExprListSyntax` with the new element at the provided index."},{"p":["ObjcNameSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ObjcNameSyntax` with that element prepended to the\n           beginning."},{"p":["ObjcNameSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjcNameSyntax",18,475],[".",17],["Iterator",18,476]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjcNameSyntax",18],[".",17],["Iterator",18]]},{"p":["ObjcNameSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the last element.\n\n- Returns: A new `ObjcNameSyntax` with the last element removed."},{"p":["ObjcNameSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the first element.\n\n- Returns: A new `ObjcNameSyntax` with the first element removed."},{"p":["ObjcNameSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with all trivia removed."},{"p":["ObjcNameSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ObjcNameSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ObjcNameSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its leading trivia removed."},{"p":["ObjcNameSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its trailing trivia removed."},{"p":["ObjcNameSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjcNameSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["ObjcNameSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ObjcNamePieceSyntax",18,115],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ObjcNamePieceSyntax",18],["?",17]]},{"p":["ObjcNameSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["ObjcNameSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ObjcNameSyntax` with the element at the provided index\n           removed."},{"p":["ObjcNameSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ObjcNameSyntax` with that element appended to the end."},{"p":["ObjcNameSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ObjcNamePieceSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ObjcNameSyntax` with that element appended to the end."},{"p":["ObjcNameSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,475]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ObjcNameSyntax` with the new element at the provided index."},{"p":["TypeExprSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["TypeExprSyntax",18,477]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeExprSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TypeExprSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ArrayExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayExprSyntax",18,479]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["ArrayExprSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ArrayElementListSyntax",18,202],["?) -> ",17],["ArrayExprSyntax",18,479]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["ArrayElementListSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["ArrayExprSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayExprSyntax",18,479]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["ArrayExprSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayExprSyntax",18,479]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["ArrayExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ArrayElementSyntax",18],[")",17]]},{"p":["ArrayExprSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayExprSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayTypeSyntax","withElementType(_:)"],"f":[["func",12],[" ",17],["withElementType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,453],["?) -> ",17],["ArrayTypeSyntax",18,481]],"s":[["func",12],[" ",17],["withElementType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elementType` replaced.\n- param newChild: The new `elementType` to replace the node's\n                  current `elementType`, if present."},{"p":["ArrayTypeSyntax","withLeftSquareBracket(_:)"],"f":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayTypeSyntax",18,481]],"s":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquareBracket` replaced.\n- param newChild: The new `leftSquareBracket` to replace the node's\n                  current `leftSquareBracket`, if present."},{"p":["ArrayTypeSyntax","withRightSquareBracket(_:)"],"f":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrayTypeSyntax",18,481]],"s":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquareBracket` replaced.\n- param newChild: The new `rightSquareBracket` to replace the node's\n                  current `rightSquareBracket`, if present."},{"p":["ArrayTypeSyntaxBuilder","useElementType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElementType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useElementType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ArrayTypeSyntaxBuilder","useLeftSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayTypeSyntaxBuilder","useRightSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntax","withArrowToken(_:)"],"f":[["func",12],[" ",17],["withArrowToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrowExprSyntax",18,483]],"s":[["func",12],[" ",17],["withArrowToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `arrowToken` replaced.\n- param newChild: The new `arrowToken` to replace the node's\n                  current `arrowToken`, if present."},{"p":["ArrowExprSyntax","withThrowsToken(_:)"],"f":[["func",12],[" ",17],["withThrowsToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrowExprSyntax",18,483]],"s":[["func",12],[" ",17],["withThrowsToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `throwsToken` replaced.\n- param newChild: The new `throwsToken` to replace the node's\n                  current `throwsToken`, if present."},{"p":["ArrowExprSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ArrowExprSyntax",18,483]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["ArrowExprSyntaxBuilder","useArrowToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrowToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useArrowToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntaxBuilder","useThrowsToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowsToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntax","withAttributeName(_:)"],"f":[["func",12],[" ",17],["withAttributeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withAttributeName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `attributeName` replaced.\n- param newChild: The new `attributeName` to replace the node's\n                  current `attributeName`, if present."},{"p":["AttributeSyntax","withArgument(_:)"],"f":[["func",12],[" ",17],["withArgument",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withArgument",7],["(",17],["Syntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `argument` replaced.\n- param newChild: The new `argument` to replace the node's\n                  current `argument`, if present."},{"p":["AttributeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AttributeSyntax","withTokenList(_:)"],"f":[["func",12],[" ",17],["withTokenList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenListSyntax",18,509],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withTokenList",7],["(",17],["TokenListSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `tokenList` replaced.\n- param newChild: The new `tokenList` to replace the node's\n                  current `tokenList`, if present."},{"p":["AttributeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AttributeSyntax","withAtSignToken(_:)"],"f":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `atSignToken` replaced.\n- param newChild: The new `atSignToken` to replace the node's\n                  current `atSignToken`, if present."},{"p":["AttributeSyntax","addToken(_:)"],"f":[["func",12],[" ",17],["addToken",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["AttributeSyntax",18,485]],"s":[["func",12],[" ",17],["addToken",7],["(",17],["TokenSyntax",18],[") -> ",17],["AttributeSyntax",18]],"d":"Adds the provided `Token` to the node's `tokenList`\ncollection.\n- param element: The new `Token` to add to the node's\n                 `tokenList` collection.\n- returns: A copy of the receiver with the provided `Token`\n           appended to its `tokenList` collection."},{"p":["AttributeSyntaxBuilder","useAttributeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAttributeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAttributeName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgument",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useArgument",7],["(",17],["Syntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useAtSignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAtSignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAtSignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","addToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addToken",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["addToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AwaitExprSyntax","withAwaitKeyword(_:)"],"f":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["AwaitExprSyntax",18,487]],"s":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AwaitExprSyntax",18]],"d":"Returns a copy of the receiver with its `awaitKeyword` replaced.\n- param newChild: The new `awaitKeyword` to replace the node's\n                  current `awaitKeyword`, if present."},{"p":["AwaitExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["AwaitExprSyntax",18,487]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["AwaitExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["AwaitExprSyntaxBuilder","useAwaitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AwaitExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["BreakStmtSyntax","withBreakKeyword(_:)"],"f":[["func",12],[" ",17],["withBreakKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BreakStmtSyntax",18,489]],"s":[["func",12],[" ",17],["withBreakKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]],"d":"Returns a copy of the receiver with its `breakKeyword` replaced.\n- param newChild: The new `breakKeyword` to replace the node's\n                  current `breakKeyword`, if present."},{"p":["BreakStmtSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["BreakStmtSyntax",18,489]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["BreakStmtSyntaxBuilder","useBreakKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBreakKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useBreakKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BreakStmtSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CatchItemSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["CatchItemSyntax",18,491]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["CatchItemSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["CatchItemSyntax",18,491]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["CatchItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CatchItemSyntax",18,491]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["CatchItemSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["CatchItemSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["CatchItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntax","withClassOrActorKeyword(_:)"],"f":[["func",12],[" ",17],["withClassOrActorKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withClassOrActorKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `classOrActorKeyword` replaced.\n- param newChild: The new `classOrActorKeyword` to replace the node's\n                  current `classOrActorKeyword`, if present."},{"p":["ClassDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ClassDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ClassDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["ClassDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,521],[") -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ClassDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ClassDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["ClassDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ClassDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["ClassDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ClassDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ClassDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,382],["?) -> ",17],["ClassDeclSyntax",18,493]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["ClassDeclSyntaxBuilder","useClassOrActorKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClassOrActorKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useClassOrActorKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["CodeBlockSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockSyntax",18,495]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["CodeBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CodeBlockSyntax",18,495]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["CodeBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["CodeBlockSyntax",18,495]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["CodeBlockSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["CodeBlockSyntax",18,495]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present."},{"p":["CodeBlockSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["CodeBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclGroupSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeclGroupSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeclGroupSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeferStmtSyntax","withDeferKeyword(_:)"],"f":[["func",12],[" ",17],["withDeferKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["DeferStmtSyntax",18,497]],"s":[["func",12],[" ",17],["withDeferKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeferStmtSyntax",18]],"d":"Returns a copy of the receiver with its `deferKeyword` replaced.\n- param newChild: The new `deferKeyword` to replace the node's\n                  current `deferKeyword`, if present."},{"p":["DeferStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["DeferStmtSyntax",18,497]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DeferStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["DeferStmtSyntaxBuilder","useDeferKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeferKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useDeferKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeferStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ElseBlockSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ElseBlockSyntax",18,499]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ElseBlockSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["ElseBlockSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["ElseBlockSyntax",18,499]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["ElseBlockSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["ElseBlockSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ElseBlockSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ForInStmtSyntax","withForKeyword(_:)"],"f":[["func",12],[" ",17],["withForKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withForKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `forKeyword` replaced.\n- param newChild: The new `forKeyword` to replace the node's\n                  current `forKeyword`, if present."},{"p":["ForInStmtSyntax","withInKeyword(_:)"],"f":[["func",12],[" ",17],["withInKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withInKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `inKeyword` replaced.\n- param newChild: The new `inKeyword` to replace the node's\n                  current `inKeyword`, if present."},{"p":["ForInStmtSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,463],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["ForInStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["ForInStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["ForInStmtSyntax","withTryKeyword(_:)"],"f":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `tryKeyword` replaced.\n- param newChild: The new `tryKeyword` to replace the node's\n                  current `tryKeyword`, if present."},{"p":["ForInStmtSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["ForInStmtSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["ForInStmtSyntax","withAwaitKeyword(_:)"],"f":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `awaitKeyword` replaced.\n- param newChild: The new `awaitKeyword` to replace the node's\n                  current `awaitKeyword`, if present."},{"p":["ForInStmtSyntax","withSequenceExpr(_:)"],"f":[["func",12],[" ",17],["withSequenceExpr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withSequenceExpr",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `sequenceExpr` replaced.\n- param newChild: The new `sequenceExpr` to replace the node's\n                  current `sequenceExpr`, if present."},{"p":["ForInStmtSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["ForInStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["ForInStmtSyntax",18,501]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["ForInStmtSyntaxBuilder","useForKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useForKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useForKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useInKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useInKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useTryKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTryKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTryKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useAwaitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useSequenceExpr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSequenceExpr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useSequenceExpr",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["GuardStmtSyntax","withGuardKeyword(_:)"],"f":[["func",12],[" ",17],["withGuardKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GuardStmtSyntax",18,503]],"s":[["func",12],[" ",17],["withGuardKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `guardKeyword` replaced.\n- param newChild: The new `guardKeyword` to replace the node's\n                  current `guardKeyword`, if present."},{"p":["GuardStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["GuardStmtSyntax",18,503]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["GuardStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["GuardStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["GuardStmtSyntax",18,503]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["GuardStmtSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["GuardStmtSyntax",18,503]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["GuardStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["GuardStmtSyntax",18,503]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["GuardStmtSyntaxBuilder","useGuardKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGuardKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useGuardKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["InOutExprSyntax","withAmpersand(_:)"],"f":[["func",12],[" ",17],["withAmpersand",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["InOutExprSyntax",18,505]],"s":[["func",12],[" ",17],["withAmpersand",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InOutExprSyntax",18]],"d":"Returns a copy of the receiver with its `ampersand` replaced.\n- param newChild: The new `ampersand` to replace the node's\n                  current `ampersand`, if present."},{"p":["InOutExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["InOutExprSyntax",18,505]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["InOutExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["InOutExprSyntaxBuilder","useAmpersand(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAmpersand",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useAmpersand",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InOutExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ThrowStmtSyntax","withThrowKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["ThrowStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withThrowKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ThrowStmtSyntax",18]],"d":"Returns a copy of the receiver with its `throwKeyword` replaced.\n- param newChild: The new `throwKeyword` to replace the node's\n                  current `throwKeyword`, if present."},{"p":["ThrowStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,451],["?) -> ",17],["ThrowStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ThrowStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ThrowStmtSyntaxBuilder","useThrowKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useThrowKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ThrowStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TokenListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TokenListSyntax` with that element prepended to the\n           beginning."},{"p":["TokenListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenListSyntax",18,509],[".",17],["Iterator",18,510]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenListSyntax",18],[".",17],["Iterator",18]]},{"p":["TokenListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the last element.\n\n- Returns: A new `TokenListSyntax` with the last element removed."},{"p":["TokenListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the first element.\n\n- Returns: A new `TokenListSyntax` with the first element removed."},{"p":["TokenListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with all trivia removed."},{"p":["TokenListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TokenListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TokenListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its leading trivia removed."},{"p":["TokenListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its trailing trivia removed."},{"p":["TokenListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TokenListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["TokenListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,454],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]]},{"p":["TokenListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]]},{"p":["TokenListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TokenListSyntax` with the element at the provided index\n           removed."},{"p":["TokenListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TokenListSyntax` with that element appended to the end."},{"p":["TokenListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TokenListSyntax` with that element appended to the end."},{"p":["TokenListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7823],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["TokenListSyntax",18,509]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TokenListSyntax` with the new element at the provided index."},{"p":["TupleExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprSyntax",18,511]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elementList`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elementList` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elementList` collection."},{"p":["TupleExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprSyntax",18,511]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["TupleExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleExprSyntax",18,511]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["TupleExprSyntax","withElementList(_:)"],"f":[["func",12],[" ",17],["withElementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,344],["?) -> ",17],["TupleExprSyntax",18,511]],"s":[["func",12],[" ",17],["withElementList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `elementList` replaced.\n- param newChild: The new `elementList` to replace the node's\n                  current `elementList`, if present."},{"p":["TupleExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["TupleExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeSyntax",18,513]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["TupleTypeSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleTypeElementListSyntax",18,346],["?) -> ",17],["TupleTypeSyntax",18,513]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["TupleTypeElementListSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["TupleTypeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeSyntax",18,513]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["TupleTypeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["TupleTypeSyntax",18,513]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["TupleTypeSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["TupleTypeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntax","withWhileKeyword(_:)"],"f":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whileKeyword` replaced.\n- param newChild: The new `whileKeyword` to replace the node's\n                  current `whileKeyword`, if present."},{"p":["WhileStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["WhileStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["WhileStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present."},{"p":["WhileStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["WhileStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present."},{"p":["WhileStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,495],["?) -> ",17],["WhileStmtSyntax",18,515]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["WhileStmtSyntaxBuilder","useWhileKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhileKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useWhileKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["YieldListSyntax","withElementList(_:)"],"f":[["func",12],[" ",17],["withElementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprListSyntax",18,473],["?) -> ",17],["YieldListSyntax",18,517]],"s":[["func",12],[" ",17],["withElementList",7],["(",17],["ExprListSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `elementList` replaced.\n- param newChild: The new `elementList` to replace the node's\n                  current `elementList`, if present."},{"p":["YieldListSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ExprSyntax",18,451],[") -> ",17],["YieldListSyntax",18,517]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[") -> ",17],["YieldListSyntax",18]],"d":"Adds the provided `Element` to the node's `elementList`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elementList` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elementList` collection."},{"p":["YieldListSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["YieldListSyntax",18,517]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["YieldListSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["YieldListSyntax",18,517]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["YieldListSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["YieldListSyntax",18,517]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["YieldListSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldStmtSyntax","withYieldKeyword(_:)"],"f":[["func",12],[" ",17],["withYieldKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,454],["?) -> ",17],["YieldStmtSyntax",18,519]],"s":[["func",12],[" ",17],["withYieldKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldStmtSyntax",18]],"d":"Returns a copy of the receiver with its `yieldKeyword` replaced.\n- param newChild: The new `yieldKeyword` to replace the node's\n                  current `yieldKeyword`, if present."},{"p":["YieldStmtSyntax","withYields(_:)"],"f":[["func",12],[" ",17],["withYields",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,521],["?) -> ",17],["YieldStmtSyntax",18,519]],"s":[["func",12],[" ",17],["withYields",7],["(",17],["Syntax",18],["?) -> ",17],["YieldStmtSyntax",18]],"d":"Returns a copy of the receiver with its `yields` replaced.\n- param newChild: The new `yields` to replace the node's\n                  current `yields`, if present."},{"p":["YieldStmtSyntaxBuilder","useYieldKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useYieldKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["useYieldKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldStmtSyntaxBuilder","useYields(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useYields",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["useYields",7],["(",17],["Syntax",18],[")",17]]},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["DeclSyntaxProtocol",18,5],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["DeclSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nDeclSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["ExprSyntaxProtocol",18,6],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["ExprSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nExprSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["StmtSyntaxProtocol",18,7],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["StmtSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nStmtSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["TypeSyntaxProtocol",18,8],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["TypeSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nTypeSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["PatternSyntaxProtocol",18,11],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["PatternSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nPatternSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["SyntaxProtocol",18,15],[".Protocol) -> ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["SyntaxProtocol",18],[".Protocol) -> ",17],["SyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nDeclSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nExprSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nStmtSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nTypeSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nPatternSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["SyntaxProtocol",18,15],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["SyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to SyntaxProtocol. This API is just added\nfor consistency.\nNote that this will incur an existential conversion."},{"p":["Syntax","endLocation(converter:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7820],[" = false) -> ",17],["SourceLocation",18,535]],"s":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The ending location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's location. Defaults to `false`."},{"p":["Syntax","sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7820],[" = true, ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7820],[" = false) -> ",17],["SourceRange",18,531]],"s":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceRange",18]],"d":"The source range, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                         the node's start location. Defaults to `true`.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's end location. Defaults to `false`."},{"p":["Syntax","startLocation(converter:afterLeadingTrivia:)"],"f":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7820],[" = true) -> ",17],["SourceLocation",18,535]],"s":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The starting location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                        the node's location. Defaults to `true`."},{"p":["Syntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["SyntaxEnum",18,20],[".Type) -> ",17],["SyntaxEnum",18,20]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["SyntaxEnum",18],[".Type) -> ",17],["SyntaxEnum",18]],"d":"Get an enum that can be used to exhaustively switch over all syntax nodes."},{"p":["Syntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]]},{"p":["Syntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7820],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]]},{"p":["Syntax","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,7896],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitAny(_:)"],"f":[["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxAnyVisitor","visitAnyPost(_:)"],"f":[["func",12],[" ",17],["visitAnyPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["visitAnyPost",7],["(",17],["Syntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConstrainedSugarTypeSyntax",18,332],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConstrainedSugarTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,334],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,336],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,338],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,340],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,344],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,346],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,348],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionListSyntax",18,350],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,352],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,354],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,356],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,358],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,366],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,372],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,378],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,384],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,386],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,390],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,396],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,398],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,400],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,402],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,404],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,412],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,455],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,457],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,461],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,464],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,466],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,471],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,473],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,475],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,477],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,479],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,481],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,483],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,487],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,489],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,493],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,497],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,499],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,501],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,503],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,505],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,507],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,509],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,511],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,513],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,515],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,517],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,519],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImportDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SourceFileSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StructDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TernaryExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ContinueStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MetatypeTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ModifierListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ProtocolDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SequenceExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SuperRefExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VariableDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VersionTupleSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorBlockSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExtensionDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundLineExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringSegmentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypealiasDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributedTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NilLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CustomAttributeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclarationStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCasePatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FallthroughStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForcedValueExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundColumnExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WildcardPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureSignatureSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionCallExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberAccessExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorParameterSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionSignatureSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathComponentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConstrainedSugarTypeSyntax",18,332],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConstrainedSugarTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,334],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,336],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,338],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,340],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,344],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,346],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,348],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionListSyntax",18,350],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployVersionListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,352],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,354],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,358],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,372],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,384],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,386],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,390],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,396],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,398],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,400],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,402],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,404],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployVersionArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,412],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,455],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,457],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DoStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,461],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,464],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TryExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,466],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,467],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,471],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,473],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExprListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,475],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNameSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,477],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,479],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,481],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,483],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrowExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AwaitExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,489],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BreakStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,491],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,493],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassDeclSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,497],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeferStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,499],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseBlockSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,501],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForInStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,503],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GuardStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,505],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InOutExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,507],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ThrowStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,509],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,511],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,513],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,515],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhileStmtSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,517],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldListSyntax",18],[")",17]]},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,519],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldStmtSyntax",18],[")",17]]},{"p":["SyntaxClassifications","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SyntaxClassifications",18,524],[".",17],["Iterator",18,525]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SyntaxClassifications",18],[".",17],["Iterator",18]]},{"p":["SyntaxClassifications","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["SyntaxClassifiedRange",18,526],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"Updates `curOffset` and returns consecutive classified ranges, excluding\nones that do not intersect with the provided range"},{"p":["SyntaxNode","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7879]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7879]],"g":[["Target",0,0]],"d":"Prints the raw value of this node to the provided stream.\n- Parameter stream: The stream to which to print the raw tree."},{"p":["SyntaxVisitor","walk(_:)"],"f":[["func",12],[" ",17],["walk",7],["<",17],["SyntaxType",0],[">(",17],["_",1],[" ",17],["node",2],[": ",17],["SyntaxType",18],[") ",17],["where",12],[" ",17],["SyntaxType",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["walk",7],["<",17],["SyntaxType",0],[">(",17],["SyntaxType",18],[")",17]],"c":[["SyntaxType",1,"SyntaxProtocol",15]],"g":[["SyntaxType",0,0]],"d":"Walk all nodes of the given syntax tree, calling the corresponding `visit` \nfunction for every node that is being visited."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessPathSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImportDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ReturnStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SourceFileSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StructDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `KeyPathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TernaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WhereClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CaseItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureParamSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclModifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MetatypeTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ModifierListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjCSelectorSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OperatorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ProtocolDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ReturnClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SequenceExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SuperRefExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `VariableDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `VersionTupleSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AsTypePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExtensionDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InheritedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IsTypePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcNamePieceSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFileExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundLineExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringSegmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SubscriptDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SubscriptExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypealiasDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AssignmentExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NilLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PatternBindingSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundErrorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SpecializeExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeAnnotationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchClauseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CustomAttributeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclarationStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCasePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FallthroughStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ForcedValueExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InitializerDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `KeyPathBaseExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcKeyPathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ParameterClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundAssertStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundColumnExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFileIDExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `RepeatWhileStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseLabelSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WildcardPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureParamListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConditionElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FloatLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionCallExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionDeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberAccessExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcSelectorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PostfixUnaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundWarningDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `RegexLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeinitializerDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionSegmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InheritedTypeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InitializerClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NonEmptyTokenListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjCSelectorPieceSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjectLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFilePathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFunctionExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `QualifiedDeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AssociatedtypeDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BinaryOperatorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BooleanLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ElseIfContinuationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericWhereClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigClauseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IntegerLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclListItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PatternBindingListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundDsohandleExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrefixOperatorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchDefaultLabelSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessLevelModifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessPathComponentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PostfixIfConfigExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundSourceLocationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SameTypeRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TargetFunctionEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ValueBindingPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilitySpecListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClassRestrictionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConditionElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConstrainedSugarTypeSyntax",18,332],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConstrainedSugarTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConstrainedSugarTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,334],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,336],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,338],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberTypeIdentifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,340],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalChainingExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SimpleTypeIdentifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,344],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,346],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,348],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionListSyntax",18,350],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BackDeployVersionListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,352],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,354],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DiscardAssignmentExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,356],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EditorPlaceholderExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,358],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionParameterListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrimaryAssociatedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringLiteralSegmentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,366],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SymbolicReferenceExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeInheritanceClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeInitializerClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,372],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnresolvedPatternExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,378],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConformanceRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,384],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericRequirementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,386],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `LabeledSpecializeEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,390],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundSourceLocationArgsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupNameListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,396],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupRelationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,398],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,400],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnavailabilityConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,402],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MatchingPatternConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,404],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalBindingConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BackDeployVersionArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAssignmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrimaryAssociatedTypeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,412],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OperatorPrecedenceAndTypesSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupNameElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityLabeledArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BackDeployAttributeSpecListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrimaryAssociatedTypeClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SpecializeAttributeSpecListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImplementsAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NamedAttributeStringArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAssociativitySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAttributeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamsClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityVersionRestrictionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MultipleTrailingClosureElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImplicitlyUnwrappedOptionalTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiableAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MultipleTrailingClosureElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DerivativeRegistrationAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TokenSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,455],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AsExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,457],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DoStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,461],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IsExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,464],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,466],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CaseItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,471],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,473],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExprListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,475],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,477],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,479],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,481],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,483],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrowExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,487],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AwaitExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,489],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BreakStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,493],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClassDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,497],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeferStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,499],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ElseBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,501],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ForInStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,503],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GuardStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,505],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InOutExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,507],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ThrowStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,509],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TokenListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,511],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,513],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,515],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WhileStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,517],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `YieldListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,519],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `YieldStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ContinueStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathSyntax",18],[")",17]],"d":"The function called after visiting `AccessPathSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImportDeclSyntax",18],[")",17]],"d":"The function called after visiting `ImportDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnStmtSyntax",18],[")",17]],"d":"The function called after visiting `ReturnStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SourceFileSyntax",18],[")",17]],"d":"The function called after visiting `SourceFileSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StructDeclSyntax",18],[")",17]],"d":"The function called after visiting `StructDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchStmtSyntax",18],[")",17]],"d":"The function called after visiting `SwitchStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseSyntax",18],[")",17]],"d":"The function called after visiting `CatchClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureExprSyntax",18],[")",17]],"d":"The function called after visiting `ClosureExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathExprSyntax",18],[")",17]],"d":"The function called after visiting `KeyPathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TernaryExprSyntax",18],[")",17]],"d":"The function called after visiting `TernaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownDeclSyntax",18],[")",17]],"d":"The function called after visiting `UnknownDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownExprSyntax",18],[")",17]],"d":"The function called after visiting `UnknownExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownStmtSyntax",18],[")",17]],"d":"The function called after visiting `UnknownStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownTypeSyntax",18],[")",17]],"d":"The function called after visiting `UnknownTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhereClauseSyntax",18],[")",17]],"d":"The function called after visiting `WhereClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorDeclSyntax",18],[")",17]],"d":"The function called after visiting `AccessorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorListSyntax",18],[")",17]],"d":"The function called after visiting `AccessorListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementSyntax",18],[")",17]],"d":"The function called after visiting `ArrayElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemListSyntax",18],[")",17]],"d":"The function called after visiting `CaseItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamSyntax",18],[")",17]],"d":"The function called after visiting `ClosureParamSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ContinueStmtSyntax",18],[")",17]],"d":"The function called after visiting `ContinueStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclModifierSyntax",18],[")",17]],"d":"The function called after visiting `DeclModifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclSyntax",18],[")",17]],"d":"The function called after visiting `FunctionDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionTypeSyntax",18],[")",17]],"d":"The function called after visiting `FunctionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigDeclSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MetatypeTypeSyntax",18],[")",17]],"d":"The function called after visiting `MetatypeTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ModifierListSyntax",18],[")",17]],"d":"The function called after visiting `ModifierListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorSyntax",18],[")",17]],"d":"The function called after visiting `ObjCSelectorSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorDeclSyntax",18],[")",17]],"d":"The function called after visiting `OperatorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalTypeSyntax",18],[")",17]],"d":"The function called after visiting `OptionalTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ProtocolDeclSyntax",18],[")",17]],"d":"The function called after visiting `ProtocolDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnClauseSyntax",18],[")",17]],"d":"The function called after visiting `ReturnClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SequenceExprSyntax",18],[")",17]],"d":"The function called after visiting `SequenceExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SuperRefExprSyntax",18],[")",17]],"d":"The function called after visiting `SuperRefExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VariableDeclSyntax",18],[")",17]],"d":"The function called after visiting `VariableDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VersionTupleSyntax",18],[")",17]],"d":"The function called after visiting `VersionTupleSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorBlockSyntax",18],[")",17]],"d":"The function called after visiting `AccessorBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsTypePatternSyntax",18],[")",17]],"d":"The function called after visiting `AsTypePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeListSyntax",18],[")",17]],"d":"The function called after visiting `AttributeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemListSyntax",18],[")",17]],"d":"The function called after visiting `CatchItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExtensionDeclSyntax",18],[")",17]],"d":"The function called after visiting `ExtensionDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeSyntax",18],[")",17]],"d":"The function called after visiting `InheritedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsTypePatternSyntax",18],[")",17]],"d":"The function called after visiting `IsTypePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]],"d":"The function called after visiting `ObjcNamePieceSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFileExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundLineExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundLineExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringSegmentSyntax",18],[")",17]],"d":"The function called after visiting `StringSegmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptDeclSyntax",18],[")",17]],"d":"The function called after visiting `SubscriptDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptExprSyntax",18],[")",17]],"d":"The function called after visiting `SubscriptExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypealiasDeclSyntax",18],[")",17]],"d":"The function called after visiting `TypealiasDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssignmentExprSyntax",18],[")",17]],"d":"The function called after visiting `AssignmentExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributedTypeSyntax",18],[")",17]],"d":"The function called after visiting `AttributedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryExprSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryTypeSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionStmtSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierExprSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierListSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NilLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `NilLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingSyntax",18],[")",17]],"d":"The function called after visiting `PatternBindingSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]],"d":"The function called after visiting `PoundErrorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeExprSyntax",18],[")",17]],"d":"The function called after visiting `SpecializeExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseListSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeAnnotationSyntax",18],[")",17]],"d":"The function called after visiting `TypeAnnotationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownPatternSyntax",18],[")",17]],"d":"The function called after visiting `UnknownPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseListSyntax",18],[")",17]],"d":"The function called after visiting `CatchClauseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CustomAttributeSyntax",18],[")",17]],"d":"The function called after visiting `CustomAttributeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclarationStmtSyntax",18],[")",17]],"d":"The function called after visiting `DeclarationStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCasePatternSyntax",18],[")",17]],"d":"The function called after visiting `EnumCasePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FallthroughStmtSyntax",18],[")",17]],"d":"The function called after visiting `FallthroughStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForcedValueExprSyntax",18],[")",17]],"d":"The function called after visiting `ForcedValueExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerDeclSyntax",18],[")",17]],"d":"The function called after visiting `InitializerDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]],"d":"The function called after visiting `KeyPathBaseExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjcKeyPathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalPatternSyntax",18],[")",17]],"d":"The function called after visiting `OptionalPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ParameterClauseSyntax",18],[")",17]],"d":"The function called after visiting `ParameterClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]],"d":"The function called after visiting `PoundAssertStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundColumnExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundColumnExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFileIDExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]],"d":"The function called after visiting `RepeatWhileStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseLabelSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WildcardPatternSyntax",18],[")",17]],"d":"The function called after visiting `WildcardPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementListSyntax",18],[")",17]],"d":"The function called after visiting `ArrayElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamListSyntax",18],[")",17]],"d":"The function called after visiting `ClosureParamListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureSignatureSyntax",18],[")",17]],"d":"The function called after visiting `ClosureSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementSyntax",18],[")",17]],"d":"The function called after visiting `ConditionElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `FloatLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionCallExprSyntax",18],[")",17]],"d":"The function called after visiting `FunctionCallExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]],"d":"The function called after visiting `FunctionDeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberAccessExprSyntax",18],[")",17]],"d":"The function called after visiting `MemberAccessExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjcSelectorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]],"d":"The function called after visiting `PostfixUnaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]],"d":"The function called after visiting `PoundWarningDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `RegexLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorParameterSyntax",18],[")",17]],"d":"The function called after visiting `AccessorParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]],"d":"The function called after visiting `DeinitializerDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionPatternSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionSegmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterSyntax",18],[")",17]],"d":"The function called after visiting `FunctionParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionSignatureSyntax",18],[")",17]],"d":"The function called after visiting `FunctionSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierPatternSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeListSyntax",18],[")",17]],"d":"The function called after visiting `InheritedTypeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerClauseSyntax",18],[")",17]],"d":"The function called after visiting `InitializerClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]],"d":"The function called after visiting `NonEmptyTokenListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]],"d":"The function called after visiting `ObjCSelectorPieceSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjectLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFilePathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFunctionExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]],"d":"The function called after visiting `QualifiedDeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `StringLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]],"d":"The function called after visiting `AssociatedtypeDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]],"d":"The function called after visiting `BinaryOperatorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `BooleanLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]],"d":"The function called after visiting `ElseIfContinuationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementSyntax",18],[")",17]],"d":"The function called after visiting `GenericRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericWhereClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigClauseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `IntegerLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclListItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingListSyntax",18],[")",17]],"d":"The function called after visiting `PatternBindingListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundDsohandleExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]],"d":"The function called after visiting `PrefixOperatorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]],"d":"The function called after visiting `SwitchDefaultLabelSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]],"d":"The function called after visiting `AccessLevelModifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathComponentSyntax",18],[")",17]],"d":"The function called after visiting `AccessPathComponentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentListSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]],"d":"The function called after visiting `PostfixIfConfigExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]],"d":"The function called after visiting `PoundSourceLocationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]],"d":"The function called after visiting `SameTypeRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]],"d":"The function called after visiting `TargetFunctionEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]],"d":"The function called after visiting `ValueBindingPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilitySpecListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]],"d":"The function called after visiting `ClassRestrictionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementListSyntax",18],[")",17]],"d":"The function called after visiting `ConditionElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConstrainedSugarTypeSyntax",18,332],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConstrainedSugarTypeSyntax",18],[")",17]],"d":"The function called after visiting `ConstrainedSugarTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,334],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,336],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterListSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,338],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]],"d":"The function called after visiting `MemberTypeIdentifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,340],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]],"d":"The function called after visiting `OptionalChainingExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]],"d":"The function called after visiting `SimpleTypeIdentifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,344],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementListSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,346],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,348],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionListSyntax",18,350],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployVersionListSyntax",18],[")",17]],"d":"The function called after visiting `BackDeployVersionListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,352],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementListSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,354],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]],"d":"The function called after visiting `DiscardAssignmentExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]],"d":"The function called after visiting `EditorPlaceholderExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,358],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterListSyntax",18],[")",17]],"d":"The function called after visiting `FunctionParameterListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]],"d":"The function called after visiting `PrimaryAssociatedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]],"d":"The function called after visiting `StringLiteralSegmentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]],"d":"The function called after visiting `SymbolicReferenceExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]],"d":"The function called after visiting `TypeInheritanceClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]],"d":"The function called after visiting `TypeInitializerClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,372],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]],"d":"The function called after visiting `UnresolvedPatternExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]],"d":"The function called after visiting `ConformanceRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,384],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementListSyntax",18],[")",17]],"d":"The function called after visiting `GenericRequirementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,386],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]],"d":"The function called after visiting `LabeledSpecializeEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,390],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]],"d":"The function called after visiting `PoundSourceLocationArgsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupNameListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,396],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupRelationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,398],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,400],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]],"d":"The function called after visiting `UnavailabilityConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,402],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]],"d":"The function called after visiting `MatchingPatternConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,404],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]],"d":"The function called after visiting `OptionalBindingConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployVersionArgumentSyntax",18],[")",17]],"d":"The function called after visiting `BackDeployVersionArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAssignmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]],"d":"The function called after visiting `PrimaryAssociatedTypeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,412],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]],"d":"The function called after visiting `OperatorPrecedenceAndTypesSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupNameElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityLabeledArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[")",17]],"d":"The function called after visiting `BackDeployAttributeSpecListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[")",17]],"d":"The function called after visiting `PrimaryAssociatedTypeClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]],"d":"The function called after visiting `SpecializeAttributeSpecListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `ImplementsAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]],"d":"The function called after visiting `NamedAttributeStringArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAssociativitySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAttributeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamsClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityVersionRestrictionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]],"d":"The function called after visiting `MultipleTrailingClosureElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]],"d":"The function called after visiting `ImplicitlyUnwrappedOptionalTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiableAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]],"d":"The function called after visiting `MultipleTrailingClosureElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DerivativeRegistrationAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenSyntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,455],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsExprSyntax",18],[")",17]],"d":"The function called after visiting `AsExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,457],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DoStmtSyntax",18],[")",17]],"d":"The function called after visiting `DoStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfStmtSyntax",18],[")",17]],"d":"The function called after visiting `IfStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,461],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsExprSyntax",18],[")",17]],"d":"The function called after visiting `IsExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,464],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TryExprSyntax",18],[")",17]],"d":"The function called after visiting `TryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,466],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownSyntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,467],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemSyntax",18],[")",17]],"d":"The function called after visiting `CaseItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,471],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumDeclSyntax",18],[")",17]],"d":"The function called after visiting `EnumDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,473],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExprListSyntax",18],[")",17]],"d":"The function called after visiting `ExprListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,475],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNameSyntax",18],[")",17]],"d":"The function called after visiting `ObjcNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,477],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeExprSyntax",18],[")",17]],"d":"The function called after visiting `TypeExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,479],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayExprSyntax",18],[")",17]],"d":"The function called after visiting `ArrayExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,481],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayTypeSyntax",18],[")",17]],"d":"The function called after visiting `ArrayTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,483],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrowExprSyntax",18],[")",17]],"d":"The function called after visiting `ArrowExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeSyntax",18],[")",17]],"d":"The function called after visiting `AttributeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AwaitExprSyntax",18],[")",17]],"d":"The function called after visiting `AwaitExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,489],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BreakStmtSyntax",18],[")",17]],"d":"The function called after visiting `BreakStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,491],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemSyntax",18],[")",17]],"d":"The function called after visiting `CatchItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,493],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassDeclSyntax",18],[")",17]],"d":"The function called after visiting `ClassDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,497],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeferStmtSyntax",18],[")",17]],"d":"The function called after visiting `DeferStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,499],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseBlockSyntax",18],[")",17]],"d":"The function called after visiting `ElseBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,501],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForInStmtSyntax",18],[")",17]],"d":"The function called after visiting `ForInStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,503],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GuardStmtSyntax",18],[")",17]],"d":"The function called after visiting `GuardStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,505],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InOutExprSyntax",18],[")",17]],"d":"The function called after visiting `InOutExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,507],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ThrowStmtSyntax",18],[")",17]],"d":"The function called after visiting `ThrowStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,509],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenListSyntax",18],[")",17]],"d":"The function called after visiting `TokenListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,511],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,513],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,515],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhileStmtSyntax",18],[")",17]],"d":"The function called after visiting `WhileStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,517],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldListSyntax",18],[")",17]],"d":"The function called after visiting `YieldListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,519],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldStmtSyntax",18],[")",17]],"d":"The function called after visiting `YieldStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxChildren","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SyntaxChildren","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["SyntaxChildrenIndex",18,523]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]]},{"p":["SyntaxHashable","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,7896],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]]},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ParenthesizedSyntax",18,0],[".Protocol) -> ",17],["ParenthesizedSyntax",18,0],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ParenthesizedSyntax",18],[".Protocol) -> ",17],["ParenthesizedSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`ParenthesizedSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithCodeBlockSyntax",18,1],[".Protocol) -> ",17],["WithCodeBlockSyntax",18,1],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithCodeBlockSyntax",18],[".Protocol) -> ",17],["WithCodeBlockSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithCodeBlockSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["IdentifiedDeclSyntax",18,2],[".Protocol) -> ",17],["IdentifiedDeclSyntax",18,2],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["IdentifiedDeclSyntax",18],[".Protocol) -> ",17],["IdentifiedDeclSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`IdentifiedDeclSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithStatementsSyntax",18,3],[".Protocol) -> ",17],["WithStatementsSyntax",18,3],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithStatementsSyntax",18],[".Protocol) -> ",17],["WithStatementsSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithStatementsSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithTrailingCommaSyntax",18,4],[".Protocol) -> ",17],["WithTrailingCommaSyntax",18,4],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithTrailingCommaSyntax",18],[".Protocol) -> ",17],["WithTrailingCommaSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithTrailingCommaSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["BracedSyntax",18,9],[".Protocol) -> ",17],["BracedSyntax",18,9],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["BracedSyntax",18],[".Protocol) -> ",17],["BracedSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`BracedSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["LabeledSyntax",18,10],[".Protocol) -> ",17],["LabeledSyntax",18,10],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["LabeledSyntax",18],[".Protocol) -> ",17],["LabeledSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`LabeledSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclGroupSyntax",18,12],[".Protocol) -> ",17],["DeclGroupSyntax",18,12],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclGroupSyntax",18],[".Protocol) -> ",17],["DeclGroupSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`DeclGroupSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ParenthesizedSyntax",18,0],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ParenthesizedSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`ParenthesizedSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithCodeBlockSyntax",18,1],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithCodeBlockSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithCodeBlockSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["IdentifiedDeclSyntax",18,2],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["IdentifiedDeclSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`IdentifiedDeclSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithStatementsSyntax",18,3],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithStatementsSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithStatementsSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithTrailingCommaSyntax",18,4],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithTrailingCommaSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithTrailingCommaSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["BracedSyntax",18,9],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["BracedSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`BracedSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["LabeledSyntax",18,10],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["LabeledSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`LabeledSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclGroupSyntax",18,12],[".Protocol) -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclGroupSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`DeclGroupSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","endLocation(converter:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7820],[" = false) -> ",17],["SourceLocation",18,535]],"s":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The ending location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's location. Defaults to `false`."},{"p":["SyntaxProtocol","sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7820],[" = true, ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7820],[" = false) -> ",17],["SourceRange",18,531]],"s":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceRange",18]],"d":"The source range, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                         the node's start location. Defaults to `true`.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's end location. Defaults to `false`."},{"p":["SyntaxProtocol","startLocation(converter:afterLeadingTrivia:)"],"f":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,547],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7820],[" = true) -> ",17],["SourceLocation",18,535]],"s":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The starting location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                        the node's location. Defaults to `true`."},{"p":["SyntaxProtocol","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with all trivia removed."},{"p":["SyntaxProtocol","classification(at:)"],"f":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[" ",17],["position",2],[": ",17],["AbsolutePosition",18,538],[") -> ",17],["SyntaxClassifiedRange",18,526],["?",17]],"s":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"The `SyntaxClassifiedRange` for an absolute position.\n- Parameters:\n  - at: The absolute position.\n- Returns: The `SyntaxClassifiedRange` for the position or nil if the source text\n  at the given position is unclassified."},{"p":["SyntaxProtocol","classification(at:)"],"f":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[" ",17],["offset",2],[": ",17],["Int",18,7823],[") -> ",17],["SyntaxClassifiedRange",18,526],["?",17]],"s":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"The `SyntaxClassifiedRange` for a relative byte offset.\n- Parameters:\n  - at: The relative to the node byte offset.\n- Returns: The `SyntaxClassifiedRange` for the offset or nil if the source text\n  at the given offset is unclassified."},{"p":["SyntaxProtocol","classifications(in:)"],"f":[["func",12],[" ",17],["classifications",7],["(",17],["in",1],[" ",17],["range",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["SyntaxClassifications",18,524]],"s":[["func",12],[" ",17],["classifications",7],["(",17],["in",1],[": ",17],["ByteSourceRange",18],[") -> ",17],["SyntaxClassifications",18]],"d":"Sequence of `SyntaxClassifiedRange`s contained in this syntax node within\na relative range.\n\nThe provided classified ranges may extend beyond the provided `range`.\nActive classifications (non-`none`) will extend the range to include the\nfull classified range (e.g. from the beginning of the comment block), while\n`none` classified ranges will extend to the beginning or end of the token\nthat the `range` touches.\nIt is guaranteed that no classified range will be provided that doesn't\nintersect the provided `range`.\n\n- Parameters:\n  - in: The relative byte range to pull `SyntaxClassifiedRange`s from.\n- Returns: Sequence of `SyntaxClassifiedRange`s."},{"p":["SyntaxProtocol","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["Self",18]],"d":"Returns a new syntax node with its leading trivia replaced\nby the provided trivia."},{"p":["SyntaxProtocol","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,542],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["Self",18]],"d":"Returns a new syntax node with its trailing trivia replaced\nby the provided trivia."},{"p":["SyntaxProtocol","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with its leading trivia removed."},{"p":["SyntaxProtocol","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with its trailing trivia removed."},{"p":["SyntaxProtocol","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7879]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7879]],"g":[["Target",0,1]],"d":"Prints the raw value of this node to the provided stream.\n- Parameter stream: The stream to which to print the raw tree."},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundErrorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `InitializerDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundWarningDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `DeinitializerDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `AssociatedtypeDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PrecedenceGroupDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundSourceLocationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,471],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `EnumDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,493],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ClassDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ImportDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `StructDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `UnknownDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `AccessorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `EnumCaseDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `FunctionDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `IfConfigDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `OperatorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ProtocolDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `VariableDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ExtensionDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `SubscriptDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["DeclSyntax",18,450]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `TypealiasDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AssignmentExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `DictionaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IdentifierExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `NilLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SpecializeExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ForcedValueExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `KeyPathBaseExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjcKeyPathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundColumnExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `FloatLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `FunctionCallExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `MemberAccessExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjcSelectorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PostfixUnaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `RegexLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjectLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFilePathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFunctionExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `StringLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `BinaryOperatorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `BooleanLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IntegerLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundDsohandleExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PrefixOperatorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PostfixIfConfigExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFileIDExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,340],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `OptionalChainingExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,354],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `DiscardAssignmentExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,356],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `EditorPlaceholderExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,366],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SymbolicReferenceExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,372],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `UnresolvedPatternExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,455],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AsExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,461],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IsExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,464],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,477],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TypeExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,479],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ArrayExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,483],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ArrowExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,487],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AwaitExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,505],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `InOutExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,511],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TupleExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ClosureExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `KeyPathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TernaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `UnknownExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SequenceExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SuperRefExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFileExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundLineExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["ExprSyntax",18,451]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SubscriptExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ExpressionStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DeclarationStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `FallthroughStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `PoundAssertStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `RepeatWhileStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,457],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DoStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,459],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `IfStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,489],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `BreakStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,497],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DeferStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,501],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ForInStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,503],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `GuardStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,507],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ThrowStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,515],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `WhileStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,519],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `YieldStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ReturnStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `SwitchStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `UnknownStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["StmtSyntax",18,452]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ContinueStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `AttributedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `DictionaryTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `CompositionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ClassRestrictionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConstrainedSugarTypeSyntax",18,332],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConstrainedSugarTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ConstrainedSugarTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,442],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ImplicitlyUnwrappedOptionalTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,481],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ArrayTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,513],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `TupleTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,338],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `MemberTypeIdentifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,342],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `SimpleTypeIdentifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `UnknownTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `FunctionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `MetatypeTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["TypeSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `OptionalTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `ExpressionPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `IdentifierPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `ValueBindingPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `TuplePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `AsTypePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `IsTypePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `UnknownPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `EnumCasePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `OptionalPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["PatternSyntax",18,463]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `WildcardPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessPathSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SourceFileSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `WhereClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ArrayElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CaseItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureParamSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclModifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ModifierListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjCSelectorSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ReturnClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `VersionTupleSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AttributeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InheritedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjcNamePieceSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `StringSegmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IdentifierListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IfConfigClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PatternBindingSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeAnnotationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchClauseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CustomAttributeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `EnumCaseElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ParameterClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseLabelSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ArrayElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureParamListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConditionElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionDeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleExprElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleTypeElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DictionaryElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ExpressionSegmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InheritedTypeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InitializerClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `NonEmptyTokenListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjCSelectorPieceSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `QualifiedDeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ElseIfContinuationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericWhereClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IfConfigClauseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclListItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PatternBindingListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchDefaultLabelSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessLevelModifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessPathComponentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `EnumCaseElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SameTypeRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TargetFunctionEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TuplePatternElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilitySpecListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConditionElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,334],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,336],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,344],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleExprElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,346],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleTypeElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,348],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionListSyntax",18,350],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `BackDeployVersionListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,352],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DictionaryElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,358],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionParameterListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,360],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,362],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrimaryAssociatedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,364],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `StringLiteralSegmentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,368],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeInheritanceClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,370],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeInitializerClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,374],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,376],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CompositionTypeElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,378],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConformanceRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,380],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,382],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,384],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericRequirementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,386],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `LabeledSpecializeEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,388],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,390],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,392],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PoundSourceLocationArgsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,394],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupNameListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,396],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupRelationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,398],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TuplePatternElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,400],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `UnavailabilityConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,402],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MatchingPatternConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,404],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `OptionalBindingConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployVersionArgumentSyntax",18,406],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployVersionArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `BackDeployVersionArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,408],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAssignmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,410],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrimaryAssociatedTypeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,412],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CompositionTypeElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,414],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,416],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `OperatorPrecedenceAndTypesSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,418],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupNameElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,420],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityLabeledArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BackDeployAttributeSpecListSyntax",18,422],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BackDeployAttributeSpecListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `BackDeployAttributeSpecListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeClauseSyntax",18,424],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrimaryAssociatedTypeClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,426],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SpecializeAttributeSpecListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,428],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ImplementsAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,430],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `NamedAttributeStringArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,432],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAssociativitySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,434],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAttributeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,436],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamsClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,438],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityVersionRestrictionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,440],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MultipleTrailingClosureElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,444],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiableAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,446],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MultipleTrailingClosureElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,448],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DerivativeRegistrationAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,454],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TokenSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,466],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit an `UnknownSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,467],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CaseItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,469],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,473],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ExprListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,475],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjcNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,485],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AttributeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,491],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,495],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,499],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ElseBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,509],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TokenListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,517],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `YieldListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[") -> ",17],["Syntax",18,521]],"s":[["func",12],[" ",17],["visit",7],["(",17],["Syntax",18],[") -> ",17],["Syntax",18]],"d":"Visit any Syntax node. \n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visitAny(_:)"],"f":[["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[") -> ",17],["Syntax",18,521],["?",17]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["Syntax",18],["?",17]],"d":"Override point to choose custom visitation dispatch instead of the\nspecialized `visit(_:)` methods. Use this instead of those methods if\nyou intend to dynamically dispatch rewriting behavior.\n- note: If this method returns a non-nil result, the specialized\n        `visit(_:)` methods will not be called for this node and the \n        visited node will be replaced by the returned node in the \n        rewritten tree."},{"p":["SyntaxRewriter","visitPre(_:)"],"f":[["func",12],[" ",17],["visitPre",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["visitPre",7],["(",17],["Syntax",18],[")",17]],"d":"The function called before visiting the node and its descendents.\n  - node: the node we are about to visit."},{"p":["SyntaxRewriter","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["Syntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVerifier","visitAny(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,521],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]]},{"p":["SourceEdit","intersectsRange(_:)"],"f":[["func",12],[" ",17],["intersectsRange",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["intersectsRange",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["SourceEdit","intersectsOrTouchesRange(_:)"],"f":[["func",12],[" ",17],["intersectsOrTouchesRange",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["intersectsOrTouchesRange",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["TriviaPiece","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7879]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7879]],"g":[["Target",0,0]],"d":"Prints the provided trivia as they would be written in a source file.\n\n- Parameter stream: The stream to which to print the trivia."},{"p":["TokenSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenSequence",18,533],[".",17],["Iterator",18,534]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenSequence",18],[".",17],["Iterator",18]]},{"p":["TokenSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,454],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]]},{"p":["TokenSequence","reversed()"],"f":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedTokenSequence",18,539]],"s":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedTokenSequence",18]]},{"p":["ByteSourceRange","intersects(_:)"],"f":[["func",12],[" ",17],["intersects",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["intersects",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["ByteSourceRange","intersected(_:)"],"f":[["func",12],[" ",17],["intersected",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["ByteSourceRange",18,536]],"s":[["func",12],[" ",17],["intersected",7],["(",17],["ByteSourceRange",18],[") -> ",17],["ByteSourceRange",18]],"d":"Returns the byte range for the overlapping region between two ranges."},{"p":["ByteSourceRange","intersectsOrTouches(_:)"],"f":[["func",12],[" ",17],["intersectsOrTouches",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,536],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["intersectsOrTouches",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["ReversedTokenSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedTokenSequence",18,539],[".",17],["Iterator",18,540]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedTokenSequence",18],[".",17],["Iterator",18]]},{"p":["ReversedTokenSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,454],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]]},{"p":["ReversedTokenSequence","reversed()"],"f":[["func",12],[" ",17],["reversed",7],["() -> ",17],["TokenSequence",18,533]],"s":[["func",12],[" ",17],["reversed",7],["() -> ",17],["TokenSequence",18]]},{"p":["IncrementalParseLookup","lookUp(_:kind:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["lookUp",7],["(",17],["_",1],[" ",17],["newOffset",2],[": ",17],["Int",18,7823],[", ",17],["kind",1],[": ",17],["CSyntaxKind",18,7735],[") -> ",17],["SyntaxNode",18,528],["?",17]],"s":[["func",12],[" ",17],["lookUp",7],["(",17],["Int",18],[", ",17],["kind",1],[": ",17],["CSyntaxKind",18],[") -> ",17],["SyntaxNode",18],["?",17]],"d":"Does a lookup to see if the current source `offset` should be associated\nwith a known `Syntax` node and its region skipped during parsing.\n\nThe implementation is responsible for checking whether an incremental edit\nhas invalidated the previous `Syntax` node.\n\n- Parameters:\n  - offset: The byte offset of the source string that is currently parsed.\n  - kind: The `CSyntaxKind` that the parser expects at this position.\n- Returns: A `SyntaxNode` node from the previous parse invocation,\n           representing the contents of this region, if it is still valid\n           to re-use. `nil` otherwise."},{"p":["SourceLocationConverter","isValid(line:column:)"],"f":[["func",12],[" ",17],["isValid",7],["(",17],["line",1],[": ",17],["Int",18,7823],[", ",17],["column",1],[": ",17],["Int",18,7823],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isValid",7],["(",17],["line",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[") -> ",17],["Bool",18]],"d":"Returns false if the `line`/`column` pair is out-of-bounds for the file or\nthat specific line."},{"p":["SourceLocationConverter","isValid(position:)"],"f":[["func",12],[" ",17],["isValid",7],["(",17],["position",1],[" ",17],["pos",2],[": ",17],["AbsolutePosition",18,538],[") -> ",17],["Bool",18,7820]],"s":[["func",12],[" ",17],["isValid",7],["(",17],["position",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["Bool",18]],"d":"Returns false if the `position` is out-of-bounds for the file."},{"p":["SourceLocationConverter","location(for:)"],"f":[["func",12],[" ",17],["location",7],["(",17],["for",1],[" ",17],["origpos",2],[": ",17],["AbsolutePosition",18,538],[") -> ",17],["SourceLocation",18,535]],"s":[["func",12],[" ",17],["location",7],["(",17],["for",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["SourceLocation",18]],"d":"Convert a `AbsolutePosition` to a `SourceLocation`. If the position is\nexceeding the file length then the `SourceLocation` for the end of file\nis returned. If position is negative the location for start of file is\nreturned."},{"p":["SourceLocationConverter","position(ofLine:column:)"],"f":[["func",12],[" ",17],["position",7],["(",17],["ofLine",1],[" ",17],["line",2],[": ",17],["Int",18,7823],[", ",17],["column",1],[": ",17],["Int",18,7823],[") -> ",17],["AbsolutePosition",18,538]],"s":[["func",12],[" ",17],["position",7],["(",17],["ofLine",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[") -> ",17],["AbsolutePosition",18]],"d":"Convert a line/column to a `SourceLocation`. If the line/column exceeds\nthe boundaries of the file or the line, the position returned is one\nadjusted to the closest boundary (beginning/end of file or line).\n\n- Parameters:\n  - line: A 1-based line number.\n  - column: A 1-based, UTF8 offset from the start of line."},{"p":["IncrementalParseReusedNodeDelegate","parserReusedNode(range:previousNode:)"],"f":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18,536],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18,528],[")",17]],"s":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18],[")",17]],"d":"Accepts the range and `Syntax` node of skipped source region.\n\n- Parameters:\n  - range: The source region of the currently parsed source.\n  - previousNode: The node from the previous tree that is associated with\n                  the skipped source region."},{"p":["IncrementalParseReusedNodeCollector","parserReusedNode(range:previousNode:)"],"f":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18,536],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18,528],[")",17]],"s":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18],[")",17]]},{"p":["Trivia","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Int",18,7823],[") -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18],[") -> ",17],["Int",18]]},{"p":["Trivia","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["piece",2],[": ",17],["TriviaPiece",18,22],[") -> ",17],["Trivia",18,542]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TriviaPiece",18],[") -> ",17],["Trivia",18]],"d":"Creates a new `Trivia` by appending the provided `TriviaPiece` to the end."},{"p":["Syntax","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Syntax",18,521],[", ",17],["rhs",2],[": ",17],["Syntax",18,521],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Syntax",18],[", ",17],["Syntax",18],[") -> ",17],["Bool",18]]},{"p":["SyntaxChildrenIndex","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SyntaxChildrenIndex",18,523],[", ",17],["rhs",2],[": ",17],["SyntaxChildrenIndex",18,523],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SyntaxChildrenIndex",18],[", ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Bool",18]]},{"p":["SyntaxChildrenIndexData","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SyntaxChildrenIndexData",18,527],[", ",17],["rhs",2],[": ",17],["SyntaxChildrenIndexData",18,527],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SyntaxChildrenIndexData",18],[", ",17],["SyntaxChildrenIndexData",18],[") -> ",17],["Bool",18]]},{"p":["SyntaxHashable","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Self",18],[", ",17],["rhs",2],[": ",17],["Self",18],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Bool",18]]},{"p":["SourceLength","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,532],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["Bool",18]]},{"p":["SourceLength","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,532],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[") -> ",17],["SourceLength",18,532]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["SourceLength",18]],"d":"Combine the length of two source length."},{"p":["SourceLength","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,532],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[") -> ",17],["SourceLength",18,532]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["SourceLength",18]]},{"p":["SourceLength","+=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["SourceLength",18,532],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["inout",12],[" ",17],["SourceLength",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["SourceLength","-=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["SourceLength",18,532],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["inout",12],[" ",17],["SourceLength",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["AbsolutePosition","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,538],[", ",17],["rhs",2],[": ",17],["AbsolutePosition",18,538],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["AbsolutePosition",18],[") -> ",17],["Bool",18]]},{"p":["AbsolutePosition","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,538],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[") -> ",17],["AbsolutePosition",18,538]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[") -> ",17],["AbsolutePosition",18]],"d":"Determine the AbsolutePosition by advancing the `lhs` by the given source\nlength."},{"p":["AbsolutePosition","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,538],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[") -> ",17],["AbsolutePosition",18,538]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[") -> ",17],["AbsolutePosition",18]]},{"p":["AbsolutePosition","+=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["AbsolutePosition",18,538],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["inout",12],[" ",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["AbsolutePosition","-=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["AbsolutePosition",18,538],[", ",17],["rhs",2],[": ",17],["SourceLength",18,532],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["inout",12],[" ",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["TokenKind","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["TokenKind",18,24],[", ",17],["rhs",2],[": ",17],["TokenKind",18,24],[") -> ",17],["Bool",18,7820]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["TokenKind",18],[", ",17],["TokenKind",18],[") -> ",17],["Bool",18]]},{"p":["+(_:_:)"],"f":[["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["Trivia",18,542],[", ",17],["rhs",2],[": ",17],["Trivia",18,542],[") -> ",17],["Trivia",18,542]],"s":[["func",12],[" ",17],["+",7],[" ",17],["(",17],["Trivia",18],[", ",17],["Trivia",18],[") -> ",17],["Trivia",18]],"d":"Concatenates two collections of `Trivia` into one collection."},{"p":["cNodeLayoutHash()"],"f":[["func",12],[" ",17],["cNodeLayoutHash",7],["() -> ",17],["Int",18,7823]],"s":[["func",12],[" ",17],["cNodeLayoutHash",7],["() -> ",17],["Int",18]],"d":"Computes a hash value that describes the layout of all C nodes which are\npassed as opaque values between `SwiftSyntaxParser` and `SwiftSyntax`.\nThis should match the value returned by the `cNodeLayoutHash` function in\nthe `SwiftSyntaxParser` module."},{"p":["AccessPathSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["AccessPathSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AccessPathComponentSyntax",18,304]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["AccessorListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["AccessorListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AccessorDeclSyntax",18,53]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CaseItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["CaseItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CaseItemSyntax",18,467]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ModifierListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ModifierListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DeclModifierSyntax",18,65]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ObjCSelectorSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ObjCSelectorSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["AttributeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["AttributeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CatchItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["CatchItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CatchItemSyntax",18,491]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["IdentifierListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["IdentifierListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,454]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["MemberDeclListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["MemberDeclListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["MemberDeclListItemSyntax",18,292]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["SwitchCaseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["SwitchCaseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CatchClauseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["CatchClauseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CatchClauseSyntax",18,39]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ArrayElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ArrayElementSyntax",18,57]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ArrayElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ClosureParamListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ClosureParamListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ClosureParamSyntax",18,61]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CodeBlockItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["CodeBlockItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CodeBlockItemSyntax",18,107]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["InheritedTypeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["InheritedTypeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["InheritedTypeSyntax",18,111]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["NonEmptyTokenListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["NonEmptyTokenListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,454]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["IfConfigClauseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["IfConfigClauseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["IfConfigClauseSyntax",18,143]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["PatternBindingListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["PatternBindingListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PatternBindingSyntax",18,149]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["EnumCaseElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["EnumCaseElementSyntax",18,168]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["EnumCaseElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["GenericArgumentListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["GenericArgumentListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericArgumentSyntax",18,176]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["AvailabilitySpecListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["AvailabilitySpecListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ConditionElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ConditionElementSyntax",18,208]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ConditionElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["DeclNameArgumentListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["DeclNameArgumentListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DeclNameArgumentSyntax",18,210]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["GenericParameterListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["GenericParameterListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericParameterSyntax",18,218]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TupleExprElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TupleExprElementSyntax",18,230]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TupleExprElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["TupleTypeElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TupleTypeElementSyntax",18,232]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TupleTypeElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["BackDeployVersionListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["BackDeployVersionListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["BackDeployVersionArgumentSyntax",18,406]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["DictionaryElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DictionaryElementSyntax",18,244]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["DictionaryElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["FunctionParameterListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["FunctionParameterListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["FunctionParameterSyntax",18,250]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["StringLiteralSegmentsSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["StringLiteralSegmentsSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ClosureCaptureItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ClosureCaptureItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["GenericRequirementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["GenericRequirementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericRequirementSyntax",18,284]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["PrecedenceGroupNameListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["PrecedenceGroupNameListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PrecedenceGroupNameElementSyntax",18,418]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TuplePatternElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TuplePatternElementSyntax",18,320]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TuplePatternElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["PrimaryAssociatedTypeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["PrimaryAssociatedTypeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PrimaryAssociatedTypeSyntax",18,362]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CompositionTypeElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CompositionTypeElementSyntax",18,376]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CompositionTypeElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["DifferentiabilityParamListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["DifferentiabilityParamListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DifferentiabilityParamSyntax",18,380]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["SpecializeAttributeSpecListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["SpecializeAttributeSpecListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["PrecedenceGroupAttributeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["PrecedenceGroupAttributeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["MultipleTrailingClosureElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["MultipleTrailingClosureElementSyntax",18,440]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["MultipleTrailingClosureElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ExprListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ExprListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ExprSyntax",18,451]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["ObjcNameSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["ObjcNameSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ObjcNamePieceSyntax",18,115]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["TokenListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["TokenListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,454]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["SyntaxChildren","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,523]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["SyntaxChildren","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,521]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["CClientNode"],"f":[["typealias",12],[" ",17],["CClientNode",7],[" = ",17],["UnsafeMutableRawPointer",18,7878]],"s":[["typealias",12],[" ",17],["CClientNode",7]]},{"p":["CSyntaxKind"],"f":[["typealias",12],[" ",17],["CSyntaxKind",7],[" = ",17],["UInt16",18,7898]],"s":[["typealias",12],[" ",17],["CSyntaxKind",7]]}],"edges":{"conformer":[0,15,[],0,7882,[],0,7884,[],0,7891,[],1,15,[],1,7882,[],1,7884,[],1,7891,[],2,15,[],2,7882,[],2,7884,[],2,7891,[],3,15,[],3,7882,[],3,7884,[],3,7891,[],4,15,[],4,7882,[],4,7884,[],4,7891,[],5,15,[],5,7882,[],5,7884,[],5,7891,[],6,15,[],6,7882,[],6,7884,[],6,7891,[],7,15,[],7,7882,[],7,7884,[],7,7891,[],8,15,[],8,7882,[],8,7884,[],8,7891,[],9,15,[],9,7882,[],9,7884,[],9,7891,[],10,15,[],10,7882,[],10,7884,[],10,7891,[],11,15,[],11,7882,[],11,7884,[],11,7891,[],12,15,[],12,7882,[],12,7884,[],12,7891,[],13,15,[],13,7773,[],13,7882,[],13,7884,[],13,7891,[],14,7737,[],14,7769,[],15,7882,[],15,7884,[],15,7891,[],17,7884,[],17,7894,[],17,7900,[],18,7737,[],18,7769,[],19,7737,[],19,7769,[],22,7769,[],22,7882,[],22,7891,[],23,7737,[],23,7769,[],23,7816,[],24,7769,[],25,13,[],25,14,[],25,15,[],25,7737,[],25,7739,[],25,7769,[],25,7773,[],25,7824,[],25,7880,[],25,7882,[],25,7884,[],25,7891,[],26,7876,[],27,5,[],27,14,[],27,15,[],27,7737,[],27,7769,[],27,7880,[],27,7882,[],27,7884,[],27,7891,[],29,7,[],29,14,[],29,15,[],29,7737,[],29,7769,[],29,7880,[],29,7882,[],29,7884,[],29,7891,[],31,3,[],31,14,[],31,15,[],31,7737,[],31,7769,[],31,7880,[],31,7882,[],31,7884,[],31,7891,[],33,2,[],33,5,[],33,12,[],33,14,[],33,15,[],33,7737,[],33,7769,[],33,7880,[],33,7882,[],33,7884,[],33,7891,[],35,3,[],35,14,[],35,15,[],35,7737,[],35,7769,[],35,7880,[],35,7882,[],35,7884,[],35,7891,[],37,7,[],37,9,[],37,10,[],37,14,[],37,15,[],37,7737,[],37,7769,[],37,7880,[],37,7882,[],37,7884,[],37,7891,[],39,1,[],39,14,[],39,15,[],39,7737,[],39,7769,[],39,7880,[],39,7882,[],39,7884,[],39,7891,[],41,3,[],41,6,[],41,9,[],41,14,[],41,15,[],41,7737,[],41,7769,[],41,7880,[],41,7882,[],41,7884,[],41,7891,[],43,6,[],43,14,[],43,15,[],43,7737,[],43,7769,[],43,7880,[],43,7882,[],43,7884,[],43,7891,[],45,6,[],45,14,[],45,15,[],45,7737,[],45,7769,[],45,7880,[],45,7882,[],45,7884,[],45,7891,[],47,5,[],47,14,[],47,15,[],47,7737,[],47,7769,[],47,7880,[],47,7882,[],47,7884,[],47,7891,[],48,6,[],48,14,[],48,15,[],48,7737,[],48,7769,[],48,7880,[],48,7882,[],48,7884,[],48,7891,[],49,7,[],49,14,[],49,15,[],49,7737,[],49,7769,[],49,7880,[],49,7882,[],49,7884,[],49,7891,[],50,8,[],50,14,[],50,15,[],50,7737,[],50,7769,[],50,7880,[],50,7882,[],50,7884,[],50,7891,[],51,14,[],51,15,[],51,7737,[],51,7769,[],51,7880,[],51,7882,[],51,7884,[],51,7891,[],53,5,[],53,14,[],53,15,[],53,7737,[],53,7769,[],53,7880,[],53,7882,[],53,7884,[],53,7891,[],55,13,[],55,14,[],55,15,[],55,7737,[],55,7739,[],55,7769,[],55,7773,[],55,7824,[],55,7880,[],55,7882,[],55,7884,[],55,7891,[],56,7876,[],57,4,[],57,14,[],57,15,[],57,7737,[],57,7769,[],57,7880,[],57,7882,[],57,7884,[],57,7891,[],59,13,[],59,14,[],59,15,[],59,7737,[],59,7739,[],59,7769,[],59,7773,[],59,7824,[],59,7880,[],59,7882,[],59,7884,[],59,7891,[],60,7876,[],61,4,[],61,14,[],61,15,[],61,7737,[],61,7769,[],61,7880,[],61,7882,[],61,7884,[],61,7891,[],63,7,[],63,14,[],63,15,[],63,7737,[],63,7769,[],63,7880,[],63,7882,[],63,7884,[],63,7891,[],65,14,[],65,15,[],65,7737,[],65,7769,[],65,7880,[],65,7882,[],65,7884,[],65,7891,[],67,5,[],67,14,[],67,15,[],67,7737,[],67,7769,[],67,7880,[],67,7882,[],67,7884,[],67,7891,[],69,2,[],69,5,[],69,14,[],69,15,[],69,7737,[],69,7769,[],69,7880,[],69,7882,[],69,7884,[],69,7891,[],71,0,[],71,8,[],71,14,[],71,15,[],71,7737,[],71,7769,[],71,7880,[],71,7882,[],71,7884,[],71,7891,[],73,5,[],73,14,[],73,15,[],73,7737,[],73,7769,[],73,7880,[],73,7882,[],73,7884,[],73,7891,[],75,8,[],75,14,[],75,15,[],75,7737,[],75,7769,[],75,7880,[],75,7882,[],75,7884,[],75,7891,[],77,13,[],77,14,[],77,15,[],77,7737,[],77,7739,[],77,7769,[],77,7773,[],77,7824,[],77,7880,[],77,7882,[],77,7884,[],77,7891,[],78,7876,[],79,13,[],79,14,[],79,15,[],79,7737,[],79,7739,[],79,7769,[],79,7773,[],79,7824,[],79,7880,[],79,7882,[],79,7884,[],79,7891,[],80,7876,[],81,2,[],81,5,[],81,14,[],81,15,[],81,7737,[],81,7769,[],81,7880,[],81,7882,[],81,7884,[],81,7891,[],83,8,[],83,14,[],83,15,[],83,7737,[],83,7769,[],83,7880,[],83,7882,[],83,7884,[],83,7891,[],85,2,[],85,5,[],85,12,[],85,14,[],85,15,[],85,7737,[],85,7769,[],85,7880,[],85,7882,[],85,7884,[],85,7891,[],87,14,[],87,15,[],87,7737,[],87,7769,[],87,7880,[],87,7882,[],87,7884,[],87,7891,[],89,6,[],89,14,[],89,15,[],89,7737,[],89,7769,[],89,7880,[],89,7882,[],89,7884,[],89,7891,[],91,6,[],91,14,[],91,15,[],91,7737,[],91,7769,[],91,7880,[],91,7882,[],91,7884,[],91,7891,[],93,0,[],93,11,[],93,14,[],93,15,[],93,7737,[],93,7769,[],93,7880,[],93,7882,[],93,7884,[],93,7891,[],95,5,[],95,14,[],95,15,[],95,7737,[],95,7769,[],95,7880,[],95,7882,[],95,7884,[],95,7891,[],97,14,[],97,15,[],97,7737,[],97,7769,[],97,7880,[],97,7882,[],97,7884,[],97,7891,[],99,9,[],99,14,[],99,15,[],99,7737,[],99,7769,[],99,7880,[],99,7882,[],99,7884,[],99,7891,[],101,11,[],101,14,[],101,15,[],101,7737,[],101,7769,[],101,7880,[],101,7882,[],101,7884,[],101,7891,[],103,13,[],103,14,[],103,15,[],103,7737,[],103,7739,[],103,7769,[],103,7773,[],103,7824,[],103,7880,[],103,7882,[],103,7884,[],103,7891,[],104,7876,[],105,13,[],105,14,[],105,15,[],105,7737,[],105,7739,[],105,7769,[],105,7773,[],105,7824,[],105,7880,[],105,7882,[],105,7884,[],105,7891,[],106,7876,[],107,14,[],107,15,[],107,7737,[],107,7769,[],107,7880,[],107,7882,[],107,7884,[],107,7891,[],109,5,[],109,12,[],109,14,[],109,15,[],109,7737,[],109,7769,[],109,7880,[],109,7882,[],109,7884,[],109,7891,[],111,4,[],111,14,[],111,15,[],111,7737,[],111,7769,[],111,7880,[],111,7882,[],111,7884,[],111,7891,[],113,11,[],113,14,[],113,15,[],113,7737,[],113,7769,[],113,7880,[],113,7882,[],113,7884,[],113,7891,[],115,14,[],115,15,[],115,7737,[],115,7769,[],115,7880,[],115,7882,[],115,7884,[],115,7891,[],117,6,[],117,14,[],117,15,[],117,7737,[],117,7769,[],117,7880,[],117,7882,[],117,7884,[],117,7891,[],119,6,[],119,14,[],119,15,[],119,7737,[],119,7769,[],119,7880,[],119,7882,[],119,7884,[],119,7891,[],121,14,[],121,15,[],121,7737,[],121,7769,[],121,7880,[],121,7882,[],121,7884,[],121,7891,[],123,5,[],123,14,[],123,15,[],123,7737,[],123,7769,[],123,7880,[],123,7882,[],123,7884,[],123,7891,[],125,6,[],125,14,[],125,15,[],125,7737,[],125,7769,[],125,7880,[],125,7882,[],125,7884,[],125,7891,[],127,2,[],127,5,[],127,14,[],127,15,[],127,7737,[],127,7769,[],127,7880,[],127,7882,[],127,7884,[],127,7891,[],129,6,[],129,14,[],129,15,[],129,7737,[],129,7769,[],129,7880,[],129,7882,[],129,7884,[],129,7891,[],131,8,[],131,14,[],131,15,[],131,7737,[],131,7769,[],131,7880,[],131,7882,[],131,7884,[],131,7891,[],133,6,[],133,14,[],133,15,[],133,7737,[],133,7769,[],133,7880,[],133,7882,[],133,7884,[],133,7891,[],135,8,[],135,14,[],135,15,[],135,7737,[],135,7769,[],135,7880,[],135,7882,[],135,7884,[],135,7891,[],137,7,[],137,14,[],137,15,[],137,7737,[],137,7769,[],137,7880,[],137,7882,[],137,7884,[],137,7891,[],139,6,[],139,14,[],139,15,[],139,7737,[],139,7769,[],139,7880,[],139,7882,[],139,7884,[],139,7891,[],141,13,[],141,14,[],141,15,[],141,7737,[],141,7739,[],141,7769,[],141,7773,[],141,7824,[],141,7880,[],141,7882,[],141,7884,[],141,7891,[],142,7876,[],143,14,[],143,15,[],143,7737,[],143,7769,[],143,7880,[],143,7882,[],143,7884,[],143,7891,[],145,13,[],145,14,[],145,15,[],145,7737,[],145,7739,[],145,7769,[],145,7773,[],145,7824,[],145,7880,[],145,7882,[],145,7884,[],145,7891,[],146,7876,[],147,6,[],147,14,[],147,15,[],147,7737,[],147,7769,[],147,7880,[],147,7882,[],147,7884,[],147,7891,[],149,4,[],149,14,[],149,15,[],149,7737,[],149,7769,[],149,7880,[],149,7882,[],149,7884,[],149,7891,[],151,0,[],151,5,[],151,14,[],151,15,[],151,7737,[],151,7769,[],151,7880,[],151,7882,[],151,7884,[],151,7891,[],153,6,[],153,14,[],153,15,[],153,7737,[],153,7769,[],153,7880,[],153,7882,[],153,7884,[],153,7891,[],155,13,[],155,14,[],155,15,[],155,7737,[],155,7739,[],155,7769,[],155,7773,[],155,7824,[],155,7880,[],155,7882,[],155,7884,[],155,7891,[],156,7876,[],157,14,[],157,15,[],157,7737,[],157,7769,[],157,7880,[],157,7882,[],157,7884,[],157,7891,[],159,11,[],159,14,[],159,15,[],159,7737,[],159,7769,[],159,7880,[],159,7882,[],159,7884,[],159,7891,[],160,13,[],160,14,[],160,15,[],160,7737,[],160,7739,[],160,7769,[],160,7773,[],160,7824,[],160,7880,[],160,7882,[],160,7884,[],160,7891,[],161,7876,[],162,8,[],162,14,[],162,15,[],162,7737,[],162,7769,[],162,7880,[],162,7882,[],162,7884,[],162,7891,[],164,14,[],164,15,[],164,7737,[],164,7769,[],164,7880,[],164,7882,[],164,7884,[],164,7891,[],166,7,[],166,14,[],166,15,[],166,7737,[],166,7769,[],166,7880,[],166,7882,[],166,7884,[],166,7891,[],168,4,[],168,14,[],168,15,[],168,7737,[],168,7769,[],168,7880,[],168,7882,[],168,7884,[],168,7891,[],170,11,[],170,14,[],170,15,[],170,7737,[],170,7769,[],170,7880,[],170,7882,[],170,7884,[],170,7891,[],172,7,[],172,14,[],172,15,[],172,7737,[],172,7769,[],172,7880,[],172,7882,[],172,7884,[],172,7891,[],174,6,[],174,14,[],174,15,[],174,7737,[],174,7769,[],174,7880,[],174,7882,[],174,7884,[],174,7891,[],176,4,[],176,14,[],176,15,[],176,7737,[],176,7769,[],176,7880,[],176,7882,[],176,7884,[],176,7891,[],178,5,[],178,14,[],178,15,[],178,7737,[],178,7769,[],178,7880,[],178,7882,[],178,7884,[],178,7891,[],180,6,[],180,14,[],180,15,[],180,7737,[],180,7769,[],180,7880,[],180,7882,[],180,7884,[],180,7891,[],182,9,[],182,14,[],182,15,[],182,7737,[],182,7769,[],182,7880,[],182,7882,[],182,7884,[],182,7891,[],184,0,[],184,6,[],184,14,[],184,15,[],184,7737,[],184,7769,[],184,7880,[],184,7882,[],184,7884,[],184,7891,[],186,11,[],186,14,[],186,15,[],186,7737,[],186,7769,[],186,7880,[],186,7882,[],186,7884,[],186,7891,[],188,0,[],188,14,[],188,15,[],188,7737,[],188,7769,[],188,7880,[],188,7882,[],188,7884,[],188,7891,[],190,7,[],190,14,[],190,15,[],190,7737,[],190,7769,[],190,7880,[],190,7882,[],190,7884,[],190,7891,[],192,6,[],192,14,[],192,15,[],192,7737,[],192,7769,[],192,7880,[],192,7882,[],192,7884,[],192,7891,[],194,6,[],194,14,[],194,15,[],194,7737,[],194,7769,[],194,7880,[],194,7882,[],194,7884,[],194,7891,[],196,1,[],196,7,[],196,10,[],196,14,[],196,15,[],196,7737,[],196,7769,[],196,7880,[],196,7882,[],196,7884,[],196,7891,[],198,14,[],198,15,[],198,7737,[],198,7769,[],198,7880,[],198,7882,[],198,7884,[],198,7891,[],200,11,[],200,14,[],200,15,[],200,7737,[],200,7769,[],200,7880,[],200,7882,[],200,7884,[],200,7891,[],202,13,[],202,14,[],202,15,[],202,7737,[],202,7739,[],202,7769,[],202,7773,[],202,7824,[],202,7880,[],202,7882,[],202,7884,[],202,7891,[],203,7876,[],204,13,[],204,14,[],204,15,[],204,7737,[],204,7739,[],204,7769,[],204,7773,[],204,7824,[],204,7880,[],204,7882,[],204,7884,[],204,7891,[],205,7876,[],206,14,[],206,15,[],206,7737,[],206,7769,[],206,7880,[],206,7882,[],206,7884,[],206,7891,[],208,4,[],208,14,[],208,15,[],208,7737,[],208,7769,[],208,7880,[],208,7882,[],208,7884,[],208,7891,[],210,14,[],210,15,[],210,7737,[],210,7769,[],210,7880,[],210,7882,[],210,7884,[],210,7891,[],212,6,[],212,14,[],212,15,[],212,7737,[],212,7769,[],212,7880,[],212,7882,[],212,7884,[],212,7891,[],214,6,[],214,14,[],214,15,[],214,7737,[],214,7769,[],214,7880,[],214,7882,[],214,7884,[],214,7891,[],216,14,[],216,15,[],216,7737,[],216,7769,[],216,7880,[],216,7882,[],216,7884,[],216,7891,[],218,4,[],218,14,[],218,15,[],218,7737,[],218,7769,[],218,7880,[],218,7882,[],218,7884,[],218,7891,[],220,6,[],220,14,[],220,15,[],220,7737,[],220,7769,[],220,7880,[],220,7882,[],220,7884,[],220,7891,[],222,0,[],222,6,[],222,14,[],222,15,[],222,7737,[],222,7769,[],222,7880,[],222,7882,[],222,7884,[],222,7891,[],224,6,[],224,14,[],224,15,[],224,7737,[],224,7769,[],224,7880,[],224,7882,[],224,7884,[],224,7891,[],226,0,[],226,5,[],226,14,[],226,15,[],226,7737,[],226,7769,[],226,7880,[],226,7882,[],226,7884,[],226,7891,[],228,6,[],228,14,[],228,15,[],228,7737,[],228,7769,[],228,7880,[],228,7882,[],228,7884,[],228,7891,[],230,4,[],230,14,[],230,15,[],230,7737,[],230,7769,[],230,7880,[],230,7882,[],230,7884,[],230,7891,[],232,4,[],232,14,[],232,15,[],232,7737,[],232,7769,[],232,7880,[],232,7882,[],232,7884,[],232,7891,[],234,0,[],234,14,[],234,15,[],234,7737,[],234,7769,[],234,7880,[],234,7882,[],234,7884,[],234,7891,[],236,14,[],236,15,[],236,7737,[],236,7769,[],236,7880,[],236,7882,[],236,7884,[],236,7891,[],238,13,[],238,14,[],238,15,[],238,7737,[],238,7739,[],238,7769,[],238,7773,[],238,7824,[],238,7880,[],238,7882,[],238,7884,[],238,7891,[],239,7876,[],240,0,[],240,14,[],240,15,[],240,7737,[],240,7769,[],240,7880,[],240,7882,[],240,7884,[],240,7891,[],242,5,[],242,14,[],242,15,[],242,7737,[],242,7769,[],242,7880,[],242,7882,[],242,7884,[],242,7891,[],244,4,[],244,14,[],244,15,[],244,7737,[],244,7769,[],244,7880,[],244,7882,[],244,7884,[],244,7891,[],246,11,[],246,14,[],246,15,[],246,7737,[],246,7769,[],246,7880,[],246,7882,[],246,7884,[],246,7891,[],248,0,[],248,14,[],248,15,[],248,7737,[],248,7769,[],248,7880,[],248,7882,[],248,7884,[],248,7891,[],250,4,[],250,14,[],250,15,[],250,7737,[],250,7769,[],250,7880,[],250,7882,[],250,7884,[],250,7891,[],252,14,[],252,15,[],252,7737,[],252,7769,[],252,7880,[],252,7882,[],252,7884,[],252,7891,[],254,11,[],254,14,[],254,15,[],254,7737,[],254,7769,[],254,7880,[],254,7882,[],254,7884,[],254,7891,[],256,13,[],256,14,[],256,15,[],256,7737,[],256,7739,[],256,7769,[],256,7773,[],256,7824,[],256,7880,[],256,7882,[],256,7884,[],256,7891,[],257,7876,[],258,14,[],258,15,[],258,7737,[],258,7769,[],258,7880,[],258,7882,[],258,7884,[],258,7891,[],260,13,[],260,14,[],260,15,[],260,7737,[],260,7739,[],260,7769,[],260,7773,[],260,7824,[],260,7880,[],260,7882,[],260,7884,[],260,7891,[],261,7876,[],262,14,[],262,15,[],262,7737,[],262,7769,[],262,7880,[],262,7882,[],262,7884,[],262,7891,[],264,0,[],264,6,[],264,14,[],264,15,[],264,7737,[],264,7769,[],264,7880,[],264,7882,[],264,7884,[],264,7891,[],266,6,[],266,14,[],266,15,[],266,7737,[],266,7769,[],266,7880,[],266,7882,[],266,7884,[],266,7891,[],268,6,[],268,14,[],268,15,[],268,7737,[],268,7769,[],268,7880,[],268,7882,[],268,7884,[],268,7891,[],270,14,[],270,15,[],270,7737,[],270,7769,[],270,7880,[],270,7882,[],270,7884,[],270,7891,[],272,6,[],272,14,[],272,15,[],272,7737,[],272,7769,[],272,7880,[],272,7882,[],272,7884,[],272,7891,[],274,2,[],274,5,[],274,14,[],274,15,[],274,7737,[],274,7769,[],274,7880,[],274,7882,[],274,7884,[],274,7891,[],276,6,[],276,14,[],276,15,[],276,7737,[],276,7769,[],276,7880,[],276,7882,[],276,7884,[],276,7891,[],278,6,[],278,14,[],278,15,[],278,7737,[],278,7769,[],278,7880,[],278,7882,[],278,7884,[],278,7891,[],280,4,[],280,14,[],280,15,[],280,7737,[],280,7769,[],280,7880,[],280,7882,[],280,7884,[],280,7891,[],282,14,[],282,15,[],282,7737,[],282,7769,[],282,7880,[],282,7882,[],282,7884,[],282,7891,[],284,4,[],284,14,[],284,15,[],284,7737,[],284,7769,[],284,7880,[],284,7882,[],284,7884,[],284,7891,[],286,14,[],286,15,[],286,7737,[],286,7769,[],286,7880,[],286,7882,[],286,7884,[],286,7891,[],288,13,[],288,14,[],288,15,[],288,7737,[],288,7739,[],288,7769,[],288,7773,[],288,7824,[],288,7880,[],288,7882,[],288,7884,[],288,7891,[],289,7876,[],290,6,[],290,14,[],290,15,[],290,7737,[],290,7769,[],290,7880,[],290,7882,[],290,7884,[],290,7891,[],292,14,[],292,15,[],292,7737,[],292,7769,[],292,7880,[],292,7882,[],292,7884,[],292,7891,[],294,13,[],294,14,[],294,15,[],294,7737,[],294,7739,[],294,7769,[],294,7773,[],294,7824,[],294,7880,[],294,7882,[],294,7884,[],294,7891,[],295,7876,[],296,6,[],296,14,[],296,15,[],296,7737,[],296,7769,[],296,7880,[],296,7882,[],296,7884,[],296,7891,[],298,6,[],298,14,[],298,15,[],298,7737,[],298,7769,[],298,7880,[],298,7882,[],298,7884,[],298,7891,[],300,14,[],300,15,[],300,7737,[],300,7769,[],300,7880,[],300,7882,[],300,7884,[],300,7891,[],302,14,[],302,15,[],302,7737,[],302,7769,[],302,7880,[],302,7882,[],302,7884,[],302,7891,[],304,14,[],304,15,[],304,7737,[],304,7769,[],304,7880,[],304,7882,[],304,7884,[],304,7891,[],306,13,[],306,14,[],306,15,[],306,7737,[],306,7739,[],306,7769,[],306,7773,[],306,7824,[],306,7880,[],306,7882,[],306,7884,[],306,7891,[],307,7876,[],308,13,[],308,14,[],308,15,[],308,7737,[],308,7739,[],308,7769,[],308,7773,[],308,7824,[],308,7880,[],308,7882,[],308,7884,[],308,7891,[],309,7876,[],310,6,[],310,14,[],310,15,[],310,7737,[],310,7769,[],310,7880,[],310,7882,[],310,7884,[],310,7891,[],312,0,[],312,5,[],312,14,[],312,15,[],312,7737,[],312,7769,[],312,7880,[],312,7882,[],312,7884,[],312,7891,[],314,2,[],314,5,[],314,14,[],314,15,[],314,7737,[],314,7769,[],314,7880,[],314,7882,[],314,7884,[],314,7891,[],316,14,[],316,15,[],316,7737,[],316,7769,[],316,7880,[],316,7882,[],316,7884,[],316,7891,[],318,4,[],318,14,[],318,15,[],318,7737,[],318,7769,[],318,7880,[],318,7882,[],318,7884,[],318,7891,[],320,4,[],320,10,[],320,14,[],320,15,[],320,7737,[],320,7769,[],320,7880,[],320,7882,[],320,7884,[],320,7891,[],322,11,[],322,14,[],322,15,[],322,7737,[],322,7769,[],322,7880,[],322,7882,[],322,7884,[],322,7891,[],324,14,[],324,15,[],324,7737,[],324,7769,[],324,7880,[],324,7882,[],324,7884,[],324,7891,[],326,13,[],326,14,[],326,15,[],326,7737,[],326,7739,[],326,7769,[],326,7773,[],326,7824,[],326,7880,[],326,7882,[],326,7884,[],326,7891,[],327,7876,[],328,8,[],328,14,[],328,15,[],328,7737,[],328,7769,[],328,7880,[],328,7882,[],328,7884,[],328,7891,[],330,13,[],330,14,[],330,15,[],330,7737,[],330,7739,[],330,7769,[],330,7773,[],330,7824,[],330,7880,[],330,7882,[],330,7884,[],330,7891,[],331,7876,[],332,8,[],332,14,[],332,15,[],332,7737,[],332,7769,[],332,7880,[],332,7882,[],332,7884,[],332,7891,[],334,13,[],334,14,[],334,15,[],334,7737,[],334,7739,[],334,7769,[],334,7773,[],334,7824,[],334,7880,[],334,7882,[],334,7884,[],334,7891,[],335,7876,[],336,13,[],336,14,[],336,15,[],336,7737,[],336,7739,[],336,7769,[],336,7773,[],336,7824,[],336,7880,[],336,7882,[],336,7884,[],336,7891,[],337,7876,[],338,8,[],338,14,[],338,15,[],338,7737,[],338,7769,[],338,7880,[],338,7882,[],338,7884,[],338,7891,[],340,6,[],340,14,[],340,15,[],340,7737,[],340,7769,[],340,7880,[],340,7882,[],340,7884,[],340,7891,[],342,8,[],342,14,[],342,15,[],342,7737,[],342,7769,[],342,7880,[],342,7882,[],342,7884,[],342,7891,[],344,13,[],344,14,[],344,15,[],344,7737,[],344,7739,[],344,7769,[],344,7773,[],344,7824,[],344,7880,[],344,7882,[],344,7884,[],344,7891,[],345,7876,[],346,13,[],346,14,[],346,15,[],346,7737,[],346,7739,[],346,7769,[],346,7773,[],346,7824,[],346,7880,[],346,7882,[],346,7884,[],346,7891,[],347,7876,[],348,14,[],348,15,[],348,7737,[],348,7769,[],348,7880,[],348,7882,[],348,7884,[],348,7891,[],350,13,[],350,14,[],350,15,[],350,7737,[],350,7739,[],350,7769,[],350,7773,[],350,7824,[],350,7880,[],350,7882,[],350,7884,[],350,7891,[],351,7876,[],352,13,[],352,14,[],352,15,[],352,7737,[],352,7739,[],352,7769,[],352,7773,[],352,7824,[],352,7880,[],352,7882,[],352,7884,[],352,7891,[],353,7876,[],354,6,[],354,14,[],354,15,[],354,7737,[],354,7769,[],354,7880,[],354,7882,[],354,7884,[],354,7891,[],356,6,[],356,14,[],356,15,[],356,7737,[],356,7769,[],356,7880,[],356,7882,[],356,7884,[],356,7891,[],358,13,[],358,14,[],358,15,[],358,7737,[],358,7739,[],358,7769,[],358,7773,[],358,7824,[],358,7880,[],358,7882,[],358,7884,[],358,7891,[],359,7876,[],360,14,[],360,15,[],360,7737,[],360,7769,[],360,7880,[],360,7882,[],360,7884,[],360,7891,[],362,4,[],362,14,[],362,15,[],362,7737,[],362,7769,[],362,7880,[],362,7882,[],362,7884,[],362,7891,[],364,13,[],364,14,[],364,15,[],364,7737,[],364,7739,[],364,7769,[],364,7773,[],364,7824,[],364,7880,[],364,7882,[],364,7884,[],364,7891,[],365,7876,[],366,6,[],366,14,[],366,15,[],366,7737,[],366,7769,[],366,7880,[],366,7882,[],366,7884,[],366,7891,[],368,14,[],368,15,[],368,7737,[],368,7769,[],368,7880,[],368,7882,[],368,7884,[],368,7891,[],370,14,[],370,15,[],370,7737,[],370,7769,[],370,7880,[],370,7882,[],370,7884,[],370,7891,[],372,6,[],372,14,[],372,15,[],372,7737,[],372,7769,[],372,7880,[],372,7882,[],372,7884,[],372,7891,[],374,13,[],374,14,[],374,15,[],374,7737,[],374,7739,[],374,7769,[],374,7773,[],374,7824,[],374,7880,[],374,7882,[],374,7884,[],374,7891,[],375,7876,[],376,14,[],376,15,[],376,7737,[],376,7769,[],376,7880,[],376,7882,[],376,7884,[],376,7891,[],378,14,[],378,15,[],378,7737,[],378,7769,[],378,7880,[],378,7882,[],378,7884,[],378,7891,[],380,4,[],380,14,[],380,15,[],380,7737,[],380,7769,[],380,7880,[],380,7882,[],380,7884,[],380,7891,[],382,14,[],382,15,[],382,7737,[],382,7769,[],382,7880,[],382,7882,[],382,7884,[],382,7891,[],384,13,[],384,14,[],384,15,[],384,7737,[],384,7739,[],384,7769,[],384,7773,[],384,7824,[],384,7880,[],384,7882,[],384,7884,[],384,7891,[],385,7876,[],386,4,[],386,14,[],386,15,[],386,7737,[],386,7769,[],386,7880,[],386,7882,[],386,7884,[],386,7891,[],388,14,[],388,15,[],388,7737,[],388,7769,[],388,7880,[],388,7882,[],388,7884,[],388,7891,[],390,14,[],390,15,[],390,7737,[],390,7769,[],390,7880,[],390,7882,[],390,7884,[],390,7891,[],392,14,[],392,15,[],392,7737,[],392,7769,[],392,7880,[],392,7882,[],392,7884,[],392,7891,[],394,13,[],394,14,[],394,15,[],394,7737,[],394,7739,[],394,7769,[],394,7773,[],394,7824,[],394,7880,[],394,7882,[],394,7884,[],394,7891,[],395,7876,[],396,14,[],396,15,[],396,7737,[],396,7769,[],396,7880,[],396,7882,[],396,7884,[],396,7891,[],398,13,[],398,14,[],398,15,[],398,7737,[],398,7739,[],398,7769,[],398,7773,[],398,7824,[],398,7880,[],398,7882,[],398,7884,[],398,7891,[],399,7876,[],400,14,[],400,15,[],400,7737,[],400,7769,[],400,7880,[],400,7882,[],400,7884,[],400,7891,[],402,14,[],402,15,[],402,7737,[],402,7769,[],402,7880,[],402,7882,[],402,7884,[],402,7891,[],404,14,[],404,15,[],404,7737,[],404,7769,[],404,7880,[],404,7882,[],404,7884,[],404,7891,[],406,14,[],406,15,[],406,7737,[],406,7769,[],406,7880,[],406,7882,[],406,7884,[],406,7891,[],408,14,[],408,15,[],408,7737,[],408,7769,[],408,7880,[],408,7882,[],408,7884,[],408,7891,[],410,13,[],410,14,[],410,15,[],410,7737,[],410,7739,[],410,7769,[],410,7773,[],410,7824,[],410,7880,[],410,7882,[],410,7884,[],410,7891,[],411,7876,[],412,13,[],412,14,[],412,15,[],412,7737,[],412,7739,[],412,7769,[],412,7773,[],412,7824,[],412,7880,[],412,7882,[],412,7884,[],412,7891,[],413,7876,[],414,13,[],414,14,[],414,15,[],414,7737,[],414,7739,[],414,7769,[],414,7773,[],414,7824,[],414,7880,[],414,7882,[],414,7884,[],414,7891,[],415,7876,[],416,14,[],416,15,[],416,7737,[],416,7769,[],416,7880,[],416,7882,[],416,7884,[],416,7891,[],418,14,[],418,15,[],418,7737,[],418,7769,[],418,7880,[],418,7882,[],418,7884,[],418,7891,[],420,14,[],420,15,[],420,7737,[],420,7769,[],420,7880,[],420,7882,[],420,7884,[],420,7891,[],422,14,[],422,15,[],422,7737,[],422,7769,[],422,7880,[],422,7882,[],422,7884,[],422,7891,[],424,14,[],424,15,[],424,7737,[],424,7769,[],424,7880,[],424,7882,[],424,7884,[],424,7891,[],426,13,[],426,14,[],426,15,[],426,7737,[],426,7739,[],426,7769,[],426,7773,[],426,7824,[],426,7880,[],426,7882,[],426,7884,[],426,7891,[],427,7876,[],428,14,[],428,15,[],428,7737,[],428,7769,[],428,7880,[],428,7882,[],428,7884,[],428,7891,[],430,14,[],430,15,[],430,7737,[],430,7769,[],430,7880,[],430,7882,[],430,7884,[],430,7891,[],432,14,[],432,15,[],432,7737,[],432,7769,[],432,7880,[],432,7882,[],432,7884,[],432,7891,[],434,13,[],434,14,[],434,15,[],434,7737,[],434,7739,[],434,7769,[],434,7773,[],434,7824,[],434,7880,[],434,7882,[],434,7884,[],434,7891,[],435,7876,[],436,14,[],436,15,[],436,7737,[],436,7769,[],436,7880,[],436,7882,[],436,7884,[],436,7891,[],438,14,[],438,15,[],438,7737,[],438,7769,[],438,7880,[],438,7882,[],438,7884,[],438,7891,[],440,14,[],440,15,[],440,7737,[],440,7769,[],440,7880,[],440,7882,[],440,7884,[],440,7891,[],442,8,[],442,14,[],442,15,[],442,7737,[],442,7769,[],442,7880,[],442,7882,[],442,7884,[],442,7891,[],444,14,[],444,15,[],444,7737,[],444,7769,[],444,7880,[],444,7882,[],444,7884,[],444,7891,[],446,13,[],446,14,[],446,15,[],446,7737,[],446,7739,[],446,7769,[],446,7773,[],446,7824,[],446,7880,[],446,7882,[],446,7884,[],446,7891,[],447,7876,[],448,14,[],448,15,[],448,7737,[],448,7769,[],448,7880,[],448,7882,[],448,7884,[],448,7891,[],450,5,[],450,14,[],450,15,[],450,7737,[],450,7769,[],450,7880,[],450,7882,[],450,7884,[],450,7891,[],451,6,[],451,14,[],451,15,[],451,7737,[],451,7769,[],451,7880,[],451,7882,[],451,7884,[],451,7891,[],452,7,[],452,14,[],452,15,[],452,7737,[],452,7769,[],452,7880,[],452,7882,[],452,7884,[],452,7891,[],453,8,[],453,14,[],453,15,[],453,7737,[],453,7769,[],453,7880,[],453,7882,[],453,7884,[],453,7891,[],454,14,[],454,15,[],454,7737,[],454,7769,[],454,7880,[],454,7882,[],454,7884,[],454,7891,[],455,6,[],455,14,[],455,15,[],455,7737,[],455,7769,[],455,7880,[],455,7882,[],455,7884,[],455,7891,[],457,1,[],457,7,[],457,10,[],457,14,[],457,15,[],457,7737,[],457,7769,[],457,7880,[],457,7882,[],457,7884,[],457,7891,[],459,1,[],459,7,[],459,10,[],459,14,[],459,15,[],459,7737,[],459,7769,[],459,7880,[],459,7882,[],459,7884,[],459,7891,[],461,6,[],461,14,[],461,15,[],461,7737,[],461,7769,[],461,7880,[],461,7882,[],461,7884,[],461,7891,[],463,11,[],463,14,[],463,15,[],463,7737,[],463,7769,[],463,7880,[],463,7882,[],463,7884,[],463,7891,[],464,6,[],464,14,[],464,15,[],464,7737,[],464,7769,[],464,7880,[],464,7882,[],464,7884,[],464,7891,[],466,14,[],466,15,[],466,7737,[],466,7769,[],466,7880,[],466,7882,[],466,7884,[],466,7891,[],467,4,[],467,14,[],467,15,[],467,7737,[],467,7769,[],467,7880,[],467,7882,[],467,7884,[],467,7891,[],469,14,[],469,15,[],469,7737,[],469,7769,[],469,7880,[],469,7882,[],469,7884,[],469,7891,[],471,2,[],471,5,[],471,14,[],471,15,[],471,7737,[],471,7769,[],471,7880,[],471,7882,[],471,7884,[],471,7891,[],473,13,[],473,14,[],473,15,[],473,7737,[],473,7739,[],473,7769,[],473,7773,[],473,7824,[],473,7880,[],473,7882,[],473,7884,[],473,7891,[],474,7876,[],475,13,[],475,14,[],475,15,[],475,7737,[],475,7739,[],475,7769,[],475,7773,[],475,7824,[],475,7880,[],475,7882,[],475,7884,[],475,7891,[],476,7876,[],477,6,[],477,14,[],477,15,[],477,7737,[],477,7769,[],477,7880,[],477,7882,[],477,7884,[],477,7891,[],479,6,[],479,14,[],479,15,[],479,7737,[],479,7769,[],479,7880,[],479,7882,[],479,7884,[],479,7891,[],481,8,[],481,14,[],481,15,[],481,7737,[],481,7769,[],481,7880,[],481,7882,[],481,7884,[],481,7891,[],483,6,[],483,14,[],483,15,[],483,7737,[],483,7769,[],483,7880,[],483,7882,[],483,7884,[],483,7891,[],485,14,[],485,15,[],485,7737,[],485,7769,[],485,7880,[],485,7882,[],485,7884,[],485,7891,[],487,6,[],487,14,[],487,15,[],487,7737,[],487,7769,[],487,7880,[],487,7882,[],487,7884,[],487,7891,[],489,7,[],489,14,[],489,15,[],489,7737,[],489,7769,[],489,7880,[],489,7882,[],489,7884,[],489,7891,[],491,4,[],491,14,[],491,15,[],491,7737,[],491,7769,[],491,7880,[],491,7882,[],491,7884,[],491,7891,[],493,2,[],493,5,[],493,12,[],493,14,[],493,15,[],493,7737,[],493,7769,[],493,7880,[],493,7882,[],493,7884,[],493,7891,[],495,3,[],495,9,[],495,14,[],495,15,[],495,7737,[],495,7769,[],495,7880,[],495,7882,[],495,7884,[],495,7891,[],497,1,[],497,7,[],497,14,[],497,15,[],497,7737,[],497,7769,[],497,7880,[],497,7882,[],497,7884,[],497,7891,[],499,1,[],499,14,[],499,15,[],499,7737,[],499,7769,[],499,7880,[],499,7882,[],499,7884,[],499,7891,[],501,1,[],501,7,[],501,10,[],501,14,[],501,15,[],501,7737,[],501,7769,[],501,7880,[],501,7882,[],501,7884,[],501,7891,[],503,1,[],503,7,[],503,14,[],503,15,[],503,7737,[],503,7769,[],503,7880,[],503,7882,[],503,7884,[],503,7891,[],505,6,[],505,14,[],505,15,[],505,7737,[],505,7769,[],505,7880,[],505,7882,[],505,7884,[],505,7891,[],507,7,[],507,14,[],507,15,[],507,7737,[],507,7769,[],507,7880,[],507,7882,[],507,7884,[],507,7891,[],509,13,[],509,14,[],509,15,[],509,7737,[],509,7739,[],509,7769,[],509,7773,[],509,7824,[],509,7880,[],509,7882,[],509,7884,[],509,7891,[],510,7876,[],511,0,[],511,6,[],511,14,[],511,15,[],511,7737,[],511,7769,[],511,7880,[],511,7882,[],511,7884,[],511,7891,[],513,0,[],513,8,[],513,14,[],513,15,[],513,7737,[],513,7769,[],513,7880,[],513,7882,[],513,7884,[],513,7891,[],515,1,[],515,7,[],515,10,[],515,14,[],515,15,[],515,7737,[],515,7769,[],515,7880,[],515,7882,[],515,7884,[],515,7891,[],517,14,[],517,15,[],517,7737,[],517,7769,[],517,7880,[],517,7882,[],517,7884,[],517,7891,[],519,7,[],519,14,[],519,15,[],519,7737,[],519,7769,[],519,7880,[],519,7882,[],519,7884,[],519,7891,[],521,14,[],521,15,[],521,7737,[],521,7769,[],521,7880,[],521,7882,[],521,7884,[],521,7891,[],522,7737,[],522,7769,[],523,7759,[],523,7769,[],523,7887,[],524,7773,[],525,7876,[],526,7769,[],527,7759,[],527,7769,[],528,7882,[],528,7884,[],529,7739,[],529,7773,[],529,7824,[],530,7769,[],531,7736,[],531,7737,[],531,7769,[],531,7821,[],531,7891,[],532,7759,[],532,7769,[],533,7773,[],533,7880,[],534,7876,[],535,7736,[],535,7737,[],535,7769,[],535,7821,[],535,7891,[],536,7769,[],538,7759,[],538,7769,[],539,7773,[],539,7880,[],540,7876,[],542,7769,[],542,7773,[],542,7824,[],542,7889,[],549,16,[]],"feature":[3423,25,3423,27,3423,29,3423,31,3423,33,3423,35,3423,37,3423,39,3423,41,3423,43,3423,45,3423,47,3423,48,3423,49,3423,50,3423,51,3423,53,3423,55,3423,57,3423,59,3423,61,3423,63,3423,65,3423,67,3423,69,3423,71,3423,73,3423,75,3423,77,3423,79,3423,81,3423,83,3423,85,3423,87,3423,89,3423,91,3423,93,3423,95,3423,97,3423,99,3423,101,3423,103,3423,105,3423,107,3423,109,3423,111,3423,113,3423,115,3423,117,3423,119,3423,121,3423,123,3423,125,3423,127,3423,129,3423,131,3423,133,3423,135,3423,137,3423,139,3423,141,3423,143,3423,145,3423,147,3423,149,3423,151,3423,153,3423,155,3423,157,3423,159,3423,160,3423,162,3423,164,3423,166,3423,168,3423,170,3423,172,3423,174,3423,176,3423,178,3423,180,3423,182,3423,184,3423,186,3423,188,3423,190,3423,192,3423,194,3423,196,3423,198,3423,200,3423,202,3423,204,3423,206,3423,208,3423,210,3423,212,3423,214,3423,216,3423,218,3423,220,3423,222,3423,224,3423,226,3423,228,3423,230,3423,232,3423,234,3423,236,3423,238,3423,240,3423,242,3423,244,3423,246,3423,248,3423,250,3423,252,3423,254,3423,256,3423,258,3423,260,3423,262,3423,264,3423,266,3423,268,3423,270,3423,272,3423,274,3423,276,3423,278,3423,280,3423,282,3423,284,3423,286,3423,288,3423,290,3423,292,3423,294,3423,296,3423,298,3423,300,3423,302,3423,304,3423,306,3423,308,3423,310,3423,312,3423,314,3423,316,3423,318,3423,320,3423,322,3423,324,3423,326,3423,328,3423,330,3423,332,3423,334,3423,336,3423,338,3423,340,3423,342,3423,344,3423,346,3423,348,3423,350,3423,352,3423,354,3423,356,3423,358,3423,360,3423,362,3423,364,3423,366,3423,368,3423,370,3423,372,3423,374,3423,376,3423,378,3423,380,3423,382,3423,384,3423,386,3423,388,3423,390,3423,392,3423,394,3423,396,3423,398,3423,400,3423,402,3423,404,3423,406,3423,408,3423,410,3423,412,3423,414,3423,416,3423,418,3423,420,3423,422,3423,424,3423,426,3423,428,3423,430,3423,432,3423,434,3423,436,3423,438,3423,440,3423,442,3423,444,3423,446,3423,448,3423,450,3423,451,3423,452,3423,453,3423,454,3423,455,3423,457,3423,459,3423,461,3423,463,3423,464,3423,466,3423,467,3423,469,3423,471,3423,473,3423,475,3423,477,3423,479,3423,481,3423,483,3423,485,3423,487,3423,489,3423,491,3423,493,3423,495,3423,497,3423,499,3423,501,3423,503,3423,505,3423,507,3423,509,3423,511,3423,513,3423,515,3423,517,3423,519,3423,521,3424,25,3424,27,3424,29,3424,31,3424,33,3424,35,3424,37,3424,39,3424,41,3424,43,3424,45,3424,47,3424,48,3424,49,3424,50,3424,51,3424,53,3424,55,3424,57,3424,59,3424,61,3424,63,3424,65,3424,67,3424,69,3424,71,3424,73,3424,75,3424,77,3424,79,3424,81,3424,83,3424,85,3424,87,3424,89,3424,91,3424,93,3424,95,3424,97,3424,99,3424,101,3424,103,3424,105,3424,107,3424,109,3424,111,3424,113,3424,115,3424,117,3424,119,3424,121,3424,123,3424,125,3424,127,3424,129,3424,131,3424,133,3424,135,3424,137,3424,139,3424,141,3424,143,3424,145,3424,147,3424,149,3424,151,3424,153,3424,155,3424,157,3424,159,3424,160,3424,162,3424,164,3424,166,3424,168,3424,170,3424,172,3424,174,3424,176,3424,178,3424,180,3424,182,3424,184,3424,186,3424,188,3424,190,3424,192,3424,194,3424,196,3424,198,3424,200,3424,202,3424,204,3424,206,3424,208,3424,210,3424,212,3424,214,3424,216,3424,218,3424,220,3424,222,3424,224,3424,226,3424,228,3424,230,3424,232,3424,234,3424,236,3424,238,3424,240,3424,242,3424,244,3424,246,3424,248,3424,250,3424,252,3424,254,3424,256,3424,258,3424,260,3424,262,3424,264,3424,266,3424,268,3424,270,3424,272,3424,274,3424,276,3424,278,3424,280,3424,282,3424,284,3424,286,3424,288,3424,290,3424,292,3424,294,3424,296,3424,298,3424,300,3424,302,3424,304,3424,306,3424,308,3424,310,3424,312,3424,314,3424,316,3424,318,3424,320,3424,322,3424,324,3424,326,3424,328,3424,330,3424,332,3424,334,3424,336,3424,338,3424,340,3424,342,3424,344,3424,346,3424,348,3424,350,3424,352,3424,354,3424,356,3424,358,3424,360,3424,362,3424,364,3424,366,3424,368,3424,370,3424,372,3424,374,3424,376,3424,378,3424,380,3424,382,3424,384,3424,386,3424,388,3424,390,3424,392,3424,394,3424,396,3424,398,3424,400,3424,402,3424,404,3424,406,3424,408,3424,410,3424,412,3424,414,3424,416,3424,418,3424,420,3424,422,3424,424,3424,426,3424,428,3424,430,3424,432,3424,434,3424,436,3424,438,3424,440,3424,442,3424,444,3424,446,3424,448,3424,450,3424,451,3424,452,3424,453,3424,454,3424,455,3424,457,3424,459,3424,461,3424,463,3424,464,3424,466,3424,467,3424,469,3424,471,3424,473,3424,475,3424,477,3424,479,3424,481,3424,483,3424,485,3424,487,3424,489,3424,491,3424,493,3424,495,3424,497,3424,499,3424,501,3424,503,3424,505,3424,507,3424,509,3424,511,3424,513,3424,515,3424,517,3424,519,3424,521,3425,25,3425,27,3425,29,3425,31,3425,33,3425,35,3425,37,3425,39,3425,41,3425,43,3425,45,3425,47,3425,48,3425,49,3425,50,3425,51,3425,53,3425,55,3425,57,3425,59,3425,61,3425,63,3425,65,3425,67,3425,69,3425,71,3425,73,3425,75,3425,77,3425,79,3425,81,3425,83,3425,85,3425,87,3425,89,3425,91,3425,93,3425,95,3425,97,3425,99,3425,101,3425,103,3425,105,3425,107,3425,109,3425,111,3425,113,3425,115,3425,117,3425,119,3425,121,3425,123,3425,125,3425,127,3425,129,3425,131,3425,133,3425,135,3425,137,3425,139,3425,141,3425,143,3425,145,3425,147,3425,149,3425,151,3425,153,3425,155,3425,157,3425,159,3425,160,3425,162,3425,164,3425,166,3425,168,3425,170,3425,172,3425,174,3425,176,3425,178,3425,180,3425,182,3425,184,3425,186,3425,188,3425,190,3425,192,3425,194,3425,196,3425,198,3425,200,3425,202,3425,204,3425,206,3425,208,3425,210,3425,212,3425,214,3425,216,3425,218,3425,220,3425,222,3425,224,3425,226,3425,228,3425,230,3425,232,3425,234,3425,236,3425,238,3425,240,3425,242,3425,244,3425,246,3425,248,3425,250,3425,252,3425,254,3425,256,3425,258,3425,260,3425,262,3425,264,3425,266,3425,268,3425,270,3425,272,3425,274,3425,276,3425,278,3425,280,3425,282,3425,284,3425,286,3425,288,3425,290,3425,292,3425,294,3425,296,3425,298,3425,300,3425,302,3425,304,3425,306,3425,308,3425,310,3425,312,3425,314,3425,316,3425,318,3425,320,3425,322,3425,324,3425,326,3425,328,3425,330,3425,332,3425,334,3425,336,3425,338,3425,340,3425,342,3425,344,3425,346,3425,348,3425,350,3425,352,3425,354,3425,356,3425,358,3425,360,3425,362,3425,364,3425,366,3425,368,3425,370,3425,372,3425,374,3425,376,3425,378,3425,380,3425,382,3425,384,3425,386,3425,388,3425,390,3425,392,3425,394,3425,396,3425,398,3425,400,3425,402,3425,404,3425,406,3425,408,3425,410,3425,412,3425,414,3425,416,3425,418,3425,420,3425,422,3425,424,3425,426,3425,428,3425,430,3425,432,3425,434,3425,436,3425,438,3425,440,3425,442,3425,444,3425,446,3425,448,3425,450,3425,451,3425,452,3425,453,3425,454,3425,455,3425,457,3425,459,3425,461,3425,463,3425,464,3425,466,3425,467,3425,469,3425,471,3425,473,3425,475,3425,477,3425,479,3425,481,3425,483,3425,485,3425,487,3425,489,3425,491,3425,493,3425,495,3425,497,3425,499,3425,501,3425,503,3425,505,3425,507,3425,509,3425,511,3425,513,3425,515,3425,517,3425,519,3425,521,3426,25,3426,27,3426,29,3426,31,3426,33,3426,35,3426,37,3426,39,3426,41,3426,43,3426,45,3426,47,3426,48,3426,49,3426,50,3426,51,3426,53,3426,55,3426,57,3426,59,3426,61,3426,63,3426,65,3426,67,3426,69,3426,71,3426,73,3426,75,3426,77,3426,79,3426,81,3426,83,3426,85,3426,87,3426,89,3426,91,3426,93,3426,95,3426,97,3426,99,3426,101,3426,103,3426,105,3426,107,3426,109,3426,111,3426,113,3426,115,3426,117,3426,119,3426,121,3426,123,3426,125,3426,127,3426,129,3426,131,3426,133,3426,135,3426,137,3426,139,3426,141,3426,143,3426,145,3426,147,3426,149,3426,151,3426,153,3426,155,3426,157,3426,159,3426,160,3426,162,3426,164,3426,166,3426,168,3426,170,3426,172,3426,174,3426,176,3426,178,3426,180,3426,182,3426,184,3426,186,3426,188,3426,190,3426,192,3426,194,3426,196,3426,198,3426,200,3426,202,3426,204,3426,206,3426,208,3426,210,3426,212,3426,214,3426,216,3426,218,3426,220,3426,222,3426,224,3426,226,3426,228,3426,230,3426,232,3426,234,3426,236,3426,238,3426,240,3426,242,3426,244,3426,246,3426,248,3426,250,3426,252,3426,254,3426,256,3426,258,3426,260,3426,262,3426,264,3426,266,3426,268,3426,270,3426,272,3426,274,3426,276,3426,278,3426,280,3426,282,3426,284,3426,286,3426,288,3426,290,3426,292,3426,294,3426,296,3426,298,3426,300,3426,302,3426,304,3426,306,3426,308,3426,310,3426,312,3426,314,3426,316,3426,318,3426,320,3426,322,3426,324,3426,326,3426,328,3426,330,3426,332,3426,334,3426,336,3426,338,3426,340,3426,342,3426,344,3426,346,3426,348,3426,350,3426,352,3426,354,3426,356,3426,358,3426,360,3426,362,3426,364,3426,366,3426,368,3426,370,3426,372,3426,374,3426,376,3426,378,3426,380,3426,382,3426,384,3426,386,3426,388,3426,390,3426,392,3426,394,3426,396,3426,398,3426,400,3426,402,3426,404,3426,406,3426,408,3426,410,3426,412,3426,414,3426,416,3426,418,3426,420,3426,422,3426,424,3426,426,3426,428,3426,430,3426,432,3426,434,3426,436,3426,438,3426,440,3426,442,3426,444,3426,446,3426,448,3426,450,3426,451,3426,452,3426,453,3426,454,3426,455,3426,457,3426,459,3426,461,3426,463,3426,464,3426,466,3426,467,3426,469,3426,471,3426,473,3426,475,3426,477,3426,479,3426,481,3426,483,3426,485,3426,487,3426,489,3426,491,3426,493,3426,495,3426,497,3426,499,3426,501,3426,503,3426,505,3426,507,3426,509,3426,511,3426,513,3426,515,3426,517,3426,519,3426,521,3427,25,3427,27,3427,29,3427,31,3427,33,3427,35,3427,37,3427,39,3427,41,3427,43,3427,45,3427,47,3427,48,3427,49,3427,50,3427,51,3427,53,3427,55,3427,57,3427,59,3427,61,3427,63,3427,65,3427,67,3427,69,3427,71,3427,73,3427,75,3427,77,3427,79,3427,81,3427,83,3427,85,3427,87,3427,89,3427,91,3427,93,3427,95,3427,97,3427,99,3427,101,3427,103,3427,105,3427,107,3427,109,3427,111,3427,113,3427,115,3427,117,3427,119,3427,121,3427,123,3427,125,3427,127,3427,129,3427,131,3427,133,3427,135,3427,137,3427,139,3427,141,3427,143,3427,145,3427,147,3427,149,3427,151,3427,153,3427,155,3427,157,3427,159,3427,160,3427,162,3427,164,3427,166,3427,168,3427,170,3427,172,3427,174,3427,176,3427,178,3427,180,3427,182,3427,184,3427,186,3427,188,3427,190,3427,192,3427,194,3427,196,3427,198,3427,200,3427,202,3427,204,3427,206,3427,208,3427,210,3427,212,3427,214,3427,216,3427,218,3427,220,3427,222,3427,224,3427,226,3427,228,3427,230,3427,232,3427,234,3427,236,3427,238,3427,240,3427,242,3427,244,3427,246,3427,248,3427,250,3427,252,3427,254,3427,256,3427,258,3427,260,3427,262,3427,264,3427,266,3427,268,3427,270,3427,272,3427,274,3427,276,3427,278,3427,280,3427,282,3427,284,3427,286,3427,288,3427,290,3427,292,3427,294,3427,296,3427,298,3427,300,3427,302,3427,304,3427,306,3427,308,3427,310,3427,312,3427,314,3427,316,3427,318,3427,320,3427,322,3427,324,3427,326,3427,328,3427,330,3427,332,3427,334,3427,336,3427,338,3427,340,3427,342,3427,344,3427,346,3427,348,3427,350,3427,352,3427,354,3427,356,3427,358,3427,360,3427,362,3427,364,3427,366,3427,368,3427,370,3427,372,3427,374,3427,376,3427,378,3427,380,3427,382,3427,384,3427,386,3427,388,3427,390,3427,392,3427,394,3427,396,3427,398,3427,400,3427,402,3427,404,3427,406,3427,408,3427,410,3427,412,3427,414,3427,416,3427,418,3427,420,3427,422,3427,424,3427,426,3427,428,3427,430,3427,432,3427,434,3427,436,3427,438,3427,440,3427,442,3427,444,3427,446,3427,448,3427,450,3427,451,3427,452,3427,453,3427,454,3427,455,3427,457,3427,459,3427,461,3427,463,3427,464,3427,466,3427,467,3427,469,3427,471,3427,473,3427,475,3427,477,3427,479,3427,481,3427,483,3427,485,3427,487,3427,489,3427,491,3427,493,3427,495,3427,497,3427,499,3427,501,3427,503,3427,505,3427,507,3427,509,3427,511,3427,513,3427,515,3427,517,3427,519,3427,521,3428,25,3428,27,3428,29,3428,31,3428,33,3428,35,3428,37,3428,39,3428,41,3428,43,3428,45,3428,47,3428,48,3428,49,3428,50,3428,51,3428,53,3428,55,3428,57,3428,59,3428,61,3428,63,3428,65,3428,67,3428,69,3428,71,3428,73,3428,75,3428,77,3428,79,3428,81,3428,83,3428,85,3428,87,3428,89,3428,91,3428,93,3428,95,3428,97,3428,99,3428,101,3428,103,3428,105,3428,107,3428,109,3428,111,3428,113,3428,115,3428,117,3428,119,3428,121,3428,123,3428,125,3428,127,3428,129,3428,131,3428,133,3428,135,3428,137,3428,139,3428,141,3428,143,3428,145,3428,147,3428,149,3428,151,3428,153,3428,155,3428,157,3428,159,3428,160,3428,162,3428,164,3428,166,3428,168,3428,170,3428,172,3428,174,3428,176,3428,178,3428,180,3428,182,3428,184,3428,186,3428,188,3428,190,3428,192,3428,194,3428,196,3428,198,3428,200,3428,202,3428,204,3428,206,3428,208,3428,210,3428,212,3428,214,3428,216,3428,218,3428,220,3428,222,3428,224,3428,226,3428,228,3428,230,3428,232,3428,234,3428,236,3428,238,3428,240,3428,242,3428,244,3428,246,3428,248,3428,250,3428,252,3428,254,3428,256,3428,258,3428,260,3428,262,3428,264,3428,266,3428,268,3428,270,3428,272,3428,274,3428,276,3428,278,3428,280,3428,282,3428,284,3428,286,3428,288,3428,290,3428,292,3428,294,3428,296,3428,298,3428,300,3428,302,3428,304,3428,306,3428,308,3428,310,3428,312,3428,314,3428,316,3428,318,3428,320,3428,322,3428,324,3428,326,3428,328,3428,330,3428,332,3428,334,3428,336,3428,338,3428,340,3428,342,3428,344,3428,346,3428,348,3428,350,3428,352,3428,354,3428,356,3428,358,3428,360,3428,362,3428,364,3428,366,3428,368,3428,370,3428,372,3428,374,3428,376,3428,378,3428,380,3428,382,3428,384,3428,386,3428,388,3428,390,3428,392,3428,394,3428,396,3428,398,3428,400,3428,402,3428,404,3428,406,3428,408,3428,410,3428,412,3428,414,3428,416,3428,418,3428,420,3428,422,3428,424,3428,426,3428,428,3428,430,3428,432,3428,434,3428,436,3428,438,3428,440,3428,442,3428,444,3428,446,3428,448,3428,450,3428,451,3428,452,3428,453,3428,454,3428,455,3428,457,3428,459,3428,461,3428,463,3428,464,3428,466,3428,467,3428,469,3428,471,3428,473,3428,475,3428,477,3428,479,3428,481,3428,483,3428,485,3428,487,3428,489,3428,491,3428,493,3428,495,3428,497,3428,499,3428,501,3428,503,3428,505,3428,507,3428,509,3428,511,3428,513,3428,515,3428,517,3428,519,3428,521,3429,25,3429,27,3429,29,3429,31,3429,33,3429,35,3429,37,3429,39,3429,41,3429,43,3429,45,3429,47,3429,48,3429,49,3429,50,3429,51,3429,53,3429,55,3429,57,3429,59,3429,61,3429,63,3429,65,3429,67,3429,69,3429,71,3429,73,3429,75,3429,77,3429,79,3429,81,3429,83,3429,85,3429,87,3429,89,3429,91,3429,93,3429,95,3429,97,3429,99,3429,101,3429,103,3429,105,3429,107,3429,109,3429,111,3429,113,3429,115,3429,117,3429,119,3429,121,3429,123,3429,125,3429,127,3429,129,3429,131,3429,133,3429,135,3429,137,3429,139,3429,141,3429,143,3429,145,3429,147,3429,149,3429,151,3429,153,3429,155,3429,157,3429,159,3429,160,3429,162,3429,164,3429,166,3429,168,3429,170,3429,172,3429,174,3429,176,3429,178,3429,180,3429,182,3429,184,3429,186,3429,188,3429,190,3429,192,3429,194,3429,196,3429,198,3429,200,3429,202,3429,204,3429,206,3429,208,3429,210,3429,212,3429,214,3429,216,3429,218,3429,220,3429,222,3429,224,3429,226,3429,228,3429,230,3429,232,3429,234,3429,236,3429,238,3429,240,3429,242,3429,244,3429,246,3429,248,3429,250,3429,252,3429,254,3429,256,3429,258,3429,260,3429,262,3429,264,3429,266,3429,268,3429,270,3429,272,3429,274,3429,276,3429,278,3429,280,3429,282,3429,284,3429,286,3429,288,3429,290,3429,292,3429,294,3429,296,3429,298,3429,300,3429,302,3429,304,3429,306,3429,308,3429,310,3429,312,3429,314,3429,316,3429,318,3429,320,3429,322,3429,324,3429,326,3429,328,3429,330,3429,332,3429,334,3429,336,3429,338,3429,340,3429,342,3429,344,3429,346,3429,348,3429,350,3429,352,3429,354,3429,356,3429,358,3429,360,3429,362,3429,364,3429,366,3429,368,3429,370,3429,372,3429,374,3429,376,3429,378,3429,380,3429,382,3429,384,3429,386,3429,388,3429,390,3429,392,3429,394,3429,396,3429,398,3429,400,3429,402,3429,404,3429,406,3429,408,3429,410,3429,412,3429,414,3429,416,3429,418,3429,420,3429,422,3429,424,3429,426,3429,428,3429,430,3429,432,3429,434,3429,436,3429,438,3429,440,3429,442,3429,444,3429,446,3429,448,3429,450,3429,451,3429,452,3429,453,3429,454,3429,455,3429,457,3429,459,3429,461,3429,463,3429,464,3429,466,3429,467,3429,469,3429,471,3429,473,3429,475,3429,477,3429,479,3429,481,3429,483,3429,485,3429,487,3429,489,3429,491,3429,493,3429,495,3429,497,3429,499,3429,501,3429,503,3429,505,3429,507,3429,509,3429,511,3429,513,3429,515,3429,517,3429,519,3429,521,3430,25,3430,27,3430,29,3430,31,3430,33,3430,35,3430,37,3430,39,3430,41,3430,43,3430,45,3430,47,3430,48,3430,49,3430,50,3430,51,3430,53,3430,55,3430,57,3430,59,3430,61,3430,63,3430,65,3430,67,3430,69,3430,71,3430,73,3430,75,3430,77,3430,79,3430,81,3430,83,3430,85,3430,87,3430,89,3430,91,3430,93,3430,95,3430,97,3430,99,3430,101,3430,103,3430,105,3430,107,3430,109,3430,111,3430,113,3430,115,3430,117,3430,119,3430,121,3430,123,3430,125,3430,127,3430,129,3430,131,3430,133,3430,135,3430,137,3430,139,3430,141,3430,143,3430,145,3430,147,3430,149,3430,151,3430,153,3430,155,3430,157,3430,159,3430,160,3430,162,3430,164,3430,166,3430,168,3430,170,3430,172,3430,174,3430,176,3430,178,3430,180,3430,182,3430,184,3430,186,3430,188,3430,190,3430,192,3430,194,3430,196,3430,198,3430,200,3430,202,3430,204,3430,206,3430,208,3430,210,3430,212,3430,214,3430,216,3430,218,3430,220,3430,222,3430,224,3430,226,3430,228,3430,230,3430,232,3430,234,3430,236,3430,238,3430,240,3430,242,3430,244,3430,246,3430,248,3430,250,3430,252,3430,254,3430,256,3430,258,3430,260,3430,262,3430,264,3430,266,3430,268,3430,270,3430,272,3430,274,3430,276,3430,278,3430,280,3430,282,3430,284,3430,286,3430,288,3430,290,3430,292,3430,294,3430,296,3430,298,3430,300,3430,302,3430,304,3430,306,3430,308,3430,310,3430,312,3430,314,3430,316,3430,318,3430,320,3430,322,3430,324,3430,326,3430,328,3430,330,3430,332,3430,334,3430,336,3430,338,3430,340,3430,342,3430,344,3430,346,3430,348,3430,350,3430,352,3430,354,3430,356,3430,358,3430,360,3430,362,3430,364,3430,366,3430,368,3430,370,3430,372,3430,374,3430,376,3430,378,3430,380,3430,382,3430,384,3430,386,3430,388,3430,390,3430,392,3430,394,3430,396,3430,398,3430,400,3430,402,3430,404,3430,406,3430,408,3430,410,3430,412,3430,414,3430,416,3430,418,3430,420,3430,422,3430,424,3430,426,3430,428,3430,430,3430,432,3430,434,3430,436,3430,438,3430,440,3430,442,3430,444,3430,446,3430,448,3430,450,3430,451,3430,452,3430,453,3430,454,3430,455,3430,457,3430,459,3430,461,3430,463,3430,464,3430,466,3430,467,3430,469,3430,471,3430,473,3430,475,3430,477,3430,479,3430,481,3430,483,3430,485,3430,487,3430,489,3430,491,3430,493,3430,495,3430,497,3430,499,3430,501,3430,503,3430,505,3430,507,3430,509,3430,511,3430,513,3430,515,3430,517,3430,519,3430,521,3431,25,3431,27,3431,29,3431,31,3431,33,3431,35,3431,37,3431,39,3431,41,3431,43,3431,45,3431,47,3431,48,3431,49,3431,50,3431,51,3431,53,3431,55,3431,57,3431,59,3431,61,3431,63,3431,65,3431,67,3431,69,3431,71,3431,73,3431,75,3431,77,3431,79,3431,81,3431,83,3431,85,3431,87,3431,89,3431,91,3431,93,3431,95,3431,97,3431,99,3431,101,3431,103,3431,105,3431,107,3431,109,3431,111,3431,113,3431,115,3431,117,3431,119,3431,121,3431,123,3431,125,3431,127,3431,129,3431,131,3431,133,3431,135,3431,137,3431,139,3431,141,3431,143,3431,145,3431,147,3431,149,3431,151,3431,153,3431,155,3431,157,3431,159,3431,160,3431,162,3431,164,3431,166,3431,168,3431,170,3431,172,3431,174,3431,176,3431,178,3431,180,3431,182,3431,184,3431,186,3431,188,3431,190,3431,192,3431,194,3431,196,3431,198,3431,200,3431,202,3431,204,3431,206,3431,208,3431,210,3431,212,3431,214,3431,216,3431,218,3431,220,3431,222,3431,224,3431,226,3431,228,3431,230,3431,232,3431,234,3431,236,3431,238,3431,240,3431,242,3431,244,3431,246,3431,248,3431,250,3431,252,3431,254,3431,256,3431,258,3431,260,3431,262,3431,264,3431,266,3431,268,3431,270,3431,272,3431,274,3431,276,3431,278,3431,280,3431,282,3431,284,3431,286,3431,288,3431,290,3431,292,3431,294,3431,296,3431,298,3431,300,3431,302,3431,304,3431,306,3431,308,3431,310,3431,312,3431,314,3431,316,3431,318,3431,320,3431,322,3431,324,3431,326,3431,328,3431,330,3431,332,3431,334,3431,336,3431,338,3431,340,3431,342,3431,344,3431,346,3431,348,3431,350,3431,352,3431,354,3431,356,3431,358,3431,360,3431,362,3431,364,3431,366,3431,368,3431,370,3431,372,3431,374,3431,376,3431,378,3431,380,3431,382,3431,384,3431,386,3431,388,3431,390,3431,392,3431,394,3431,396,3431,398,3431,400,3431,402,3431,404,3431,406,3431,408,3431,410,3431,412,3431,414,3431,416,3431,418,3431,420,3431,422,3431,424,3431,426,3431,428,3431,430,3431,432,3431,434,3431,436,3431,438,3431,440,3431,442,3431,444,3431,446,3431,448,3431,450,3431,451,3431,452,3431,453,3431,454,3431,455,3431,457,3431,459,3431,461,3431,463,3431,464,3431,466,3431,467,3431,469,3431,471,3431,473,3431,475,3431,477,3431,479,3431,481,3431,483,3431,485,3431,487,3431,489,3431,491,3431,493,3431,495,3431,497,3431,499,3431,501,3431,503,3431,505,3431,507,3431,509,3431,511,3431,513,3431,515,3431,517,3431,519,3431,521,3432,25,3432,27,3432,29,3432,31,3432,33,3432,35,3432,37,3432,39,3432,41,3432,43,3432,45,3432,47,3432,48,3432,49,3432,50,3432,51,3432,53,3432,55,3432,57,3432,59,3432,61,3432,63,3432,65,3432,67,3432,69,3432,71,3432,73,3432,75,3432,77,3432,79,3432,81,3432,83,3432,85,3432,87,3432,89,3432,91,3432,93,3432,95,3432,97,3432,99,3432,101,3432,103,3432,105,3432,107,3432,109,3432,111,3432,113,3432,115,3432,117,3432,119,3432,121,3432,123,3432,125,3432,127,3432,129,3432,131,3432,133,3432,135,3432,137,3432,139,3432,141,3432,143,3432,145,3432,147,3432,149,3432,151,3432,153,3432,155,3432,157,3432,159,3432,160,3432,162,3432,164,3432,166,3432,168,3432,170,3432,172,3432,174,3432,176,3432,178,3432,180,3432,182,3432,184,3432,186,3432,188,3432,190,3432,192,3432,194,3432,196,3432,198,3432,200,3432,202,3432,204,3432,206,3432,208,3432,210,3432,212,3432,214,3432,216,3432,218,3432,220,3432,222,3432,224,3432,226,3432,228,3432,230,3432,232,3432,234,3432,236,3432,238,3432,240,3432,242,3432,244,3432,246,3432,248,3432,250,3432,252,3432,254,3432,256,3432,258,3432,260,3432,262,3432,264,3432,266,3432,268,3432,270,3432,272,3432,274,3432,276,3432,278,3432,280,3432,282,3432,284,3432,286,3432,288,3432,290,3432,292,3432,294,3432,296,3432,298,3432,300,3432,302,3432,304,3432,306,3432,308,3432,310,3432,312,3432,314,3432,316,3432,318,3432,320,3432,322,3432,324,3432,326,3432,328,3432,330,3432,332,3432,334,3432,336,3432,338,3432,340,3432,342,3432,344,3432,346,3432,348,3432,350,3432,352,3432,354,3432,356,3432,358,3432,360,3432,362,3432,364,3432,366,3432,368,3432,370,3432,372,3432,374,3432,376,3432,378,3432,380,3432,382,3432,384,3432,386,3432,388,3432,390,3432,392,3432,394,3432,396,3432,398,3432,400,3432,402,3432,404,3432,406,3432,408,3432,410,3432,412,3432,414,3432,416,3432,418,3432,420,3432,422,3432,424,3432,426,3432,428,3432,430,3432,432,3432,434,3432,436,3432,438,3432,440,3432,442,3432,444,3432,446,3432,448,3432,450,3432,451,3432,452,3432,453,3432,454,3432,455,3432,457,3432,459,3432,461,3432,463,3432,464,3432,466,3432,467,3432,469,3432,471,3432,473,3432,475,3432,477,3432,479,3432,481,3432,483,3432,485,3432,487,3432,489,3432,491,3432,493,3432,495,3432,497,3432,499,3432,501,3432,503,3432,505,3432,507,3432,509,3432,511,3432,513,3432,515,3432,517,3432,519,3432,521,3433,25,3433,27,3433,29,3433,31,3433,33,3433,35,3433,37,3433,39,3433,41,3433,43,3433,45,3433,47,3433,48,3433,49,3433,50,3433,51,3433,53,3433,55,3433,57,3433,59,3433,61,3433,63,3433,65,3433,67,3433,69,3433,71,3433,73,3433,75,3433,77,3433,79,3433,81,3433,83,3433,85,3433,87,3433,89,3433,91,3433,93,3433,95,3433,97,3433,99,3433,101,3433,103,3433,105,3433,107,3433,109,3433,111,3433,113,3433,115,3433,117,3433,119,3433,121,3433,123,3433,125,3433,127,3433,129,3433,131,3433,133,3433,135,3433,137,3433,139,3433,141,3433,143,3433,145,3433,147,3433,149,3433,151,3433,153,3433,155,3433,157,3433,159,3433,160,3433,162,3433,164,3433,166,3433,168,3433,170,3433,172,3433,174,3433,176,3433,178,3433,180,3433,182,3433,184,3433,186,3433,188,3433,190,3433,192,3433,194,3433,196,3433,198,3433,200,3433,202,3433,204,3433,206,3433,208,3433,210,3433,212,3433,214,3433,216,3433,218,3433,220,3433,222,3433,224,3433,226,3433,228,3433,230,3433,232,3433,234,3433,236,3433,238,3433,240,3433,242,3433,244,3433,246,3433,248,3433,250,3433,252,3433,254,3433,256,3433,258,3433,260,3433,262,3433,264,3433,266,3433,268,3433,270,3433,272,3433,274,3433,276,3433,278,3433,280,3433,282,3433,284,3433,286,3433,288,3433,290,3433,292,3433,294,3433,296,3433,298,3433,300,3433,302,3433,304,3433,306,3433,308,3433,310,3433,312,3433,314,3433,316,3433,318,3433,320,3433,322,3433,324,3433,326,3433,328,3433,330,3433,332,3433,334,3433,336,3433,338,3433,340,3433,342,3433,344,3433,346,3433,348,3433,350,3433,352,3433,354,3433,356,3433,358,3433,360,3433,362,3433,364,3433,366,3433,368,3433,370,3433,372,3433,374,3433,376,3433,378,3433,380,3433,382,3433,384,3433,386,3433,388,3433,390,3433,392,3433,394,3433,396,3433,398,3433,400,3433,402,3433,404,3433,406,3433,408,3433,410,3433,412,3433,414,3433,416,3433,418,3433,420,3433,422,3433,424,3433,426,3433,428,3433,430,3433,432,3433,434,3433,436,3433,438,3433,440,3433,442,3433,444,3433,446,3433,448,3433,450,3433,451,3433,452,3433,453,3433,454,3433,455,3433,457,3433,459,3433,461,3433,463,3433,464,3433,466,3433,467,3433,469,3433,471,3433,473,3433,475,3433,477,3433,479,3433,481,3433,483,3433,485,3433,487,3433,489,3433,491,3433,493,3433,495,3433,497,3433,499,3433,501,3433,503,3433,505,3433,507,3433,509,3433,511,3433,513,3433,515,3433,517,3433,519,3433,521,3434,25,3434,27,3434,29,3434,31,3434,33,3434,35,3434,37,3434,39,3434,41,3434,43,3434,45,3434,47,3434,48,3434,49,3434,50,3434,51,3434,53,3434,55,3434,57,3434,59,3434,61,3434,63,3434,65,3434,67,3434,69,3434,71,3434,73,3434,75,3434,77,3434,79,3434,81,3434,83,3434,85,3434,87,3434,89,3434,91,3434,93,3434,95,3434,97,3434,99,3434,101,3434,103,3434,105,3434,107,3434,109,3434,111,3434,113,3434,115,3434,117,3434,119,3434,121,3434,123,3434,125,3434,127,3434,129,3434,131,3434,133,3434,135,3434,137,3434,139,3434,141,3434,143,3434,145,3434,147,3434,149,3434,151,3434,153,3434,155,3434,157,3434,159,3434,160,3434,162,3434,164,3434,166,3434,168,3434,170,3434,172,3434,174,3434,176,3434,178,3434,180,3434,182,3434,184,3434,186,3434,188,3434,190,3434,192,3434,194,3434,196,3434,198,3434,200,3434,202,3434,204,3434,206,3434,208,3434,210,3434,212,3434,214,3434,216,3434,218,3434,220,3434,222,3434,224,3434,226,3434,228,3434,230,3434,232,3434,234,3434,236,3434,238,3434,240,3434,242,3434,244,3434,246,3434,248,3434,250,3434,252,3434,254,3434,256,3434,258,3434,260,3434,262,3434,264,3434,266,3434,268,3434,270,3434,272,3434,274,3434,276,3434,278,3434,280,3434,282,3434,284,3434,286,3434,288,3434,290,3434,292,3434,294,3434,296,3434,298,3434,300,3434,302,3434,304,3434,306,3434,308,3434,310,3434,312,3434,314,3434,316,3434,318,3434,320,3434,322,3434,324,3434,326,3434,328,3434,330,3434,332,3434,334,3434,336,3434,338,3434,340,3434,342,3434,344,3434,346,3434,348,3434,350,3434,352,3434,354,3434,356,3434,358,3434,360,3434,362,3434,364,3434,366,3434,368,3434,370,3434,372,3434,374,3434,376,3434,378,3434,380,3434,382,3434,384,3434,386,3434,388,3434,390,3434,392,3434,394,3434,396,3434,398,3434,400,3434,402,3434,404,3434,406,3434,408,3434,410,3434,412,3434,414,3434,416,3434,418,3434,420,3434,422,3434,424,3434,426,3434,428,3434,430,3434,432,3434,434,3434,436,3434,438,3434,440,3434,442,3434,444,3434,446,3434,448,3434,450,3434,451,3434,452,3434,453,3434,454,3434,455,3434,457,3434,459,3434,461,3434,463,3434,464,3434,466,3434,467,3434,469,3434,471,3434,473,3434,475,3434,477,3434,479,3434,481,3434,483,3434,485,3434,487,3434,489,3434,491,3434,493,3434,495,3434,497,3434,499,3434,501,3434,503,3434,505,3434,507,3434,509,3434,511,3434,513,3434,515,3434,517,3434,519,3434,521,3435,25,3435,27,3435,29,3435,31,3435,33,3435,35,3435,37,3435,39,3435,41,3435,43,3435,45,3435,47,3435,48,3435,49,3435,50,3435,51,3435,53,3435,55,3435,57,3435,59,3435,61,3435,63,3435,65,3435,67,3435,69,3435,71,3435,73,3435,75,3435,77,3435,79,3435,81,3435,83,3435,85,3435,87,3435,89,3435,91,3435,93,3435,95,3435,97,3435,99,3435,101,3435,103,3435,105,3435,107,3435,109,3435,111,3435,113,3435,115,3435,117,3435,119,3435,121,3435,123,3435,125,3435,127,3435,129,3435,131,3435,133,3435,135,3435,137,3435,139,3435,141,3435,143,3435,145,3435,147,3435,149,3435,151,3435,153,3435,155,3435,157,3435,159,3435,160,3435,162,3435,164,3435,166,3435,168,3435,170,3435,172,3435,174,3435,176,3435,178,3435,180,3435,182,3435,184,3435,186,3435,188,3435,190,3435,192,3435,194,3435,196,3435,198,3435,200,3435,202,3435,204,3435,206,3435,208,3435,210,3435,212,3435,214,3435,216,3435,218,3435,220,3435,222,3435,224,3435,226,3435,228,3435,230,3435,232,3435,234,3435,236,3435,238,3435,240,3435,242,3435,244,3435,246,3435,248,3435,250,3435,252,3435,254,3435,256,3435,258,3435,260,3435,262,3435,264,3435,266,3435,268,3435,270,3435,272,3435,274,3435,276,3435,278,3435,280,3435,282,3435,284,3435,286,3435,288,3435,290,3435,292,3435,294,3435,296,3435,298,3435,300,3435,302,3435,304,3435,306,3435,308,3435,310,3435,312,3435,314,3435,316,3435,318,3435,320,3435,322,3435,324,3435,326,3435,328,3435,330,3435,332,3435,334,3435,336,3435,338,3435,340,3435,342,3435,344,3435,346,3435,348,3435,350,3435,352,3435,354,3435,356,3435,358,3435,360,3435,362,3435,364,3435,366,3435,368,3435,370,3435,372,3435,374,3435,376,3435,378,3435,380,3435,382,3435,384,3435,386,3435,388,3435,390,3435,392,3435,394,3435,396,3435,398,3435,400,3435,402,3435,404,3435,406,3435,408,3435,410,3435,412,3435,414,3435,416,3435,418,3435,420,3435,422,3435,424,3435,426,3435,428,3435,430,3435,432,3435,434,3435,436,3435,438,3435,440,3435,442,3435,444,3435,446,3435,448,3435,450,3435,451,3435,452,3435,453,3435,454,3435,455,3435,457,3435,459,3435,461,3435,463,3435,464,3435,466,3435,467,3435,469,3435,471,3435,473,3435,475,3435,477,3435,479,3435,481,3435,483,3435,485,3435,487,3435,489,3435,491,3435,493,3435,495,3435,497,3435,499,3435,501,3435,503,3435,505,3435,507,3435,509,3435,511,3435,513,3435,515,3435,517,3435,519,3435,521,3436,25,3436,27,3436,29,3436,31,3436,33,3436,35,3436,37,3436,39,3436,41,3436,43,3436,45,3436,47,3436,48,3436,49,3436,50,3436,51,3436,53,3436,55,3436,57,3436,59,3436,61,3436,63,3436,65,3436,67,3436,69,3436,71,3436,73,3436,75,3436,77,3436,79,3436,81,3436,83,3436,85,3436,87,3436,89,3436,91,3436,93,3436,95,3436,97,3436,99,3436,101,3436,103,3436,105,3436,107,3436,109,3436,111,3436,113,3436,115,3436,117,3436,119,3436,121,3436,123,3436,125,3436,127,3436,129,3436,131,3436,133,3436,135,3436,137,3436,139,3436,141,3436,143,3436,145,3436,147,3436,149,3436,151,3436,153,3436,155,3436,157,3436,159,3436,160,3436,162,3436,164,3436,166,3436,168,3436,170,3436,172,3436,174,3436,176,3436,178,3436,180,3436,182,3436,184,3436,186,3436,188,3436,190,3436,192,3436,194,3436,196,3436,198,3436,200,3436,202,3436,204,3436,206,3436,208,3436,210,3436,212,3436,214,3436,216,3436,218,3436,220,3436,222,3436,224,3436,226,3436,228,3436,230,3436,232,3436,234,3436,236,3436,238,3436,240,3436,242,3436,244,3436,246,3436,248,3436,250,3436,252,3436,254,3436,256,3436,258,3436,260,3436,262,3436,264,3436,266,3436,268,3436,270,3436,272,3436,274,3436,276,3436,278,3436,280,3436,282,3436,284,3436,286,3436,288,3436,290,3436,292,3436,294,3436,296,3436,298,3436,300,3436,302,3436,304,3436,306,3436,308,3436,310,3436,312,3436,314,3436,316,3436,318,3436,320,3436,322,3436,324,3436,326,3436,328,3436,330,3436,332,3436,334,3436,336,3436,338,3436,340,3436,342,3436,344,3436,346,3436,348,3436,350,3436,352,3436,354,3436,356,3436,358,3436,360,3436,362,3436,364,3436,366,3436,368,3436,370,3436,372,3436,374,3436,376,3436,378,3436,380,3436,382,3436,384,3436,386,3436,388,3436,390,3436,392,3436,394,3436,396,3436,398,3436,400,3436,402,3436,404,3436,406,3436,408,3436,410,3436,412,3436,414,3436,416,3436,418,3436,420,3436,422,3436,424,3436,426,3436,428,3436,430,3436,432,3436,434,3436,436,3436,438,3436,440,3436,442,3436,444,3436,446,3436,448,3436,450,3436,451,3436,452,3436,453,3436,454,3436,455,3436,457,3436,459,3436,461,3436,463,3436,464,3436,466,3436,467,3436,469,3436,471,3436,473,3436,475,3436,477,3436,479,3436,481,3436,483,3436,485,3436,487,3436,489,3436,491,3436,493,3436,495,3436,497,3436,499,3436,501,3436,503,3436,505,3436,507,3436,509,3436,511,3436,513,3436,515,3436,517,3436,519,3436,521,3437,25,3437,27,3437,29,3437,31,3437,33,3437,35,3437,37,3437,39,3437,41,3437,43,3437,45,3437,47,3437,48,3437,49,3437,50,3437,51,3437,53,3437,55,3437,57,3437,59,3437,61,3437,63,3437,65,3437,67,3437,69,3437,71,3437,73,3437,75,3437,77,3437,79,3437,81,3437,83,3437,85,3437,87,3437,89,3437,91,3437,93,3437,95,3437,97,3437,99,3437,101,3437,103,3437,105,3437,107,3437,109,3437,111,3437,113,3437,115,3437,117,3437,119,3437,121,3437,123,3437,125,3437,127,3437,129,3437,131,3437,133,3437,135,3437,137,3437,139,3437,141,3437,143,3437,145,3437,147,3437,149,3437,151,3437,153,3437,155,3437,157,3437,159,3437,160,3437,162,3437,164,3437,166,3437,168,3437,170,3437,172,3437,174,3437,176,3437,178,3437,180,3437,182,3437,184,3437,186,3437,188,3437,190,3437,192,3437,194,3437,196,3437,198,3437,200,3437,202,3437,204,3437,206,3437,208,3437,210,3437,212,3437,214,3437,216,3437,218,3437,220,3437,222,3437,224,3437,226,3437,228,3437,230,3437,232,3437,234,3437,236,3437,238,3437,240,3437,242,3437,244,3437,246,3437,248,3437,250,3437,252,3437,254,3437,256,3437,258,3437,260,3437,262,3437,264,3437,266,3437,268,3437,270,3437,272,3437,274,3437,276,3437,278,3437,280,3437,282,3437,284,3437,286,3437,288,3437,290,3437,292,3437,294,3437,296,3437,298,3437,300,3437,302,3437,304,3437,306,3437,308,3437,310,3437,312,3437,314,3437,316,3437,318,3437,320,3437,322,3437,324,3437,326,3437,328,3437,330,3437,332,3437,334,3437,336,3437,338,3437,340,3437,342,3437,344,3437,346,3437,348,3437,350,3437,352,3437,354,3437,356,3437,358,3437,360,3437,362,3437,364,3437,366,3437,368,3437,370,3437,372,3437,374,3437,376,3437,378,3437,380,3437,382,3437,384,3437,386,3437,388,3437,390,3437,392,3437,394,3437,396,3437,398,3437,400,3437,402,3437,404,3437,406,3437,408,3437,410,3437,412,3437,414,3437,416,3437,418,3437,420,3437,422,3437,424,3437,426,3437,428,3437,430,3437,432,3437,434,3437,436,3437,438,3437,440,3437,442,3437,444,3437,446,3437,448,3437,450,3437,451,3437,452,3437,453,3437,454,3437,455,3437,457,3437,459,3437,461,3437,463,3437,464,3437,466,3437,467,3437,469,3437,471,3437,473,3437,475,3437,477,3437,479,3437,481,3437,483,3437,485,3437,487,3437,489,3437,491,3437,493,3437,495,3437,497,3437,499,3437,501,3437,503,3437,505,3437,507,3437,509,3437,511,3437,513,3437,515,3437,517,3437,519,3437,521,3438,25,3438,27,3438,29,3438,31,3438,33,3438,35,3438,37,3438,39,3438,41,3438,43,3438,45,3438,47,3438,48,3438,49,3438,50,3438,51,3438,53,3438,55,3438,57,3438,59,3438,61,3438,63,3438,65,3438,67,3438,69,3438,71,3438,73,3438,75,3438,77,3438,79,3438,81,3438,83,3438,85,3438,87,3438,89,3438,91,3438,93,3438,95,3438,97,3438,99,3438,101,3438,103,3438,105,3438,107,3438,109,3438,111,3438,113,3438,115,3438,117,3438,119,3438,121,3438,123,3438,125,3438,127,3438,129,3438,131,3438,133,3438,135,3438,137,3438,139,3438,141,3438,143,3438,145,3438,147,3438,149,3438,151,3438,153,3438,155,3438,157,3438,159,3438,160,3438,162,3438,164,3438,166,3438,168,3438,170,3438,172,3438,174,3438,176,3438,178,3438,180,3438,182,3438,184,3438,186,3438,188,3438,190,3438,192,3438,194,3438,196,3438,198,3438,200,3438,202,3438,204,3438,206,3438,208,3438,210,3438,212,3438,214,3438,216,3438,218,3438,220,3438,222,3438,224,3438,226,3438,228,3438,230,3438,232,3438,234,3438,236,3438,238,3438,240,3438,242,3438,244,3438,246,3438,248,3438,250,3438,252,3438,254,3438,256,3438,258,3438,260,3438,262,3438,264,3438,266,3438,268,3438,270,3438,272,3438,274,3438,276,3438,278,3438,280,3438,282,3438,284,3438,286,3438,288,3438,290,3438,292,3438,294,3438,296,3438,298,3438,300,3438,302,3438,304,3438,306,3438,308,3438,310,3438,312,3438,314,3438,316,3438,318,3438,320,3438,322,3438,324,3438,326,3438,328,3438,330,3438,332,3438,334,3438,336,3438,338,3438,340,3438,342,3438,344,3438,346,3438,348,3438,350,3438,352,3438,354,3438,356,3438,358,3438,360,3438,362,3438,364,3438,366,3438,368,3438,370,3438,372,3438,374,3438,376,3438,378,3438,380,3438,382,3438,384,3438,386,3438,388,3438,390,3438,392,3438,394,3438,396,3438,398,3438,400,3438,402,3438,404,3438,406,3438,408,3438,410,3438,412,3438,414,3438,416,3438,418,3438,420,3438,422,3438,424,3438,426,3438,428,3438,430,3438,432,3438,434,3438,436,3438,438,3438,440,3438,442,3438,444,3438,446,3438,448,3438,450,3438,451,3438,452,3438,453,3438,454,3438,455,3438,457,3438,459,3438,461,3438,463,3438,464,3438,466,3438,467,3438,469,3438,471,3438,473,3438,475,3438,477,3438,479,3438,481,3438,483,3438,485,3438,487,3438,489,3438,491,3438,493,3438,495,3438,497,3438,499,3438,501,3438,503,3438,505,3438,507,3438,509,3438,511,3438,513,3438,515,3438,517,3438,519,3438,521,3439,25,3439,27,3439,29,3439,31,3439,33,3439,35,3439,37,3439,39,3439,41,3439,43,3439,45,3439,47,3439,48,3439,49,3439,50,3439,51,3439,53,3439,55,3439,57,3439,59,3439,61,3439,63,3439,65,3439,67,3439,69,3439,71,3439,73,3439,75,3439,77,3439,79,3439,81,3439,83,3439,85,3439,87,3439,89,3439,91,3439,93,3439,95,3439,97,3439,99,3439,101,3439,103,3439,105,3439,107,3439,109,3439,111,3439,113,3439,115,3439,117,3439,119,3439,121,3439,123,3439,125,3439,127,3439,129,3439,131,3439,133,3439,135,3439,137,3439,139,3439,141,3439,143,3439,145,3439,147,3439,149,3439,151,3439,153,3439,155,3439,157,3439,159,3439,160,3439,162,3439,164,3439,166,3439,168,3439,170,3439,172,3439,174,3439,176,3439,178,3439,180,3439,182,3439,184,3439,186,3439,188,3439,190,3439,192,3439,194,3439,196,3439,198,3439,200,3439,202,3439,204,3439,206,3439,208,3439,210,3439,212,3439,214,3439,216,3439,218,3439,220,3439,222,3439,224,3439,226,3439,228,3439,230,3439,232,3439,234,3439,236,3439,238,3439,240,3439,242,3439,244,3439,246,3439,248,3439,250,3439,252,3439,254,3439,256,3439,258,3439,260,3439,262,3439,264,3439,266,3439,268,3439,270,3439,272,3439,274,3439,276,3439,278,3439,280,3439,282,3439,284,3439,286,3439,288,3439,290,3439,292,3439,294,3439,296,3439,298,3439,300,3439,302,3439,304,3439,306,3439,308,3439,310,3439,312,3439,314,3439,316,3439,318,3439,320,3439,322,3439,324,3439,326,3439,328,3439,330,3439,332,3439,334,3439,336,3439,338,3439,340,3439,342,3439,344,3439,346,3439,348,3439,350,3439,352,3439,354,3439,356,3439,358,3439,360,3439,362,3439,364,3439,366,3439,368,3439,370,3439,372,3439,374,3439,376,3439,378,3439,380,3439,382,3439,384,3439,386,3439,388,3439,390,3439,392,3439,394,3439,396,3439,398,3439,400,3439,402,3439,404,3439,406,3439,408,3439,410,3439,412,3439,414,3439,416,3439,418,3439,420,3439,422,3439,424,3439,426,3439,428,3439,430,3439,432,3439,434,3439,436,3439,438,3439,440,3439,442,3439,444,3439,446,3439,448,3439,450,3439,451,3439,452,3439,453,3439,454,3439,455,3439,457,3439,459,3439,461,3439,463,3439,464,3439,466,3439,467,3439,469,3439,471,3439,473,3439,475,3439,477,3439,479,3439,481,3439,483,3439,485,3439,487,3439,489,3439,491,3439,493,3439,495,3439,497,3439,499,3439,501,3439,503,3439,505,3439,507,3439,509,3439,511,3439,513,3439,515,3439,517,3439,519,3439,521,3440,25,3440,27,3440,29,3440,31,3440,33,3440,35,3440,37,3440,39,3440,41,3440,43,3440,45,3440,47,3440,48,3440,49,3440,50,3440,51,3440,53,3440,55,3440,57,3440,59,3440,61,3440,63,3440,65,3440,67,3440,69,3440,71,3440,73,3440,75,3440,77,3440,79,3440,81,3440,83,3440,85,3440,87,3440,89,3440,91,3440,93,3440,95,3440,97,3440,99,3440,101,3440,103,3440,105,3440,107,3440,109,3440,111,3440,113,3440,115,3440,117,3440,119,3440,121,3440,123,3440,125,3440,127,3440,129,3440,131,3440,133,3440,135,3440,137,3440,139,3440,141,3440,143,3440,145,3440,147,3440,149,3440,151,3440,153,3440,155,3440,157,3440,159,3440,160,3440,162,3440,164,3440,166,3440,168,3440,170,3440,172,3440,174,3440,176,3440,178,3440,180,3440,182,3440,184,3440,186,3440,188,3440,190,3440,192,3440,194,3440,196,3440,198,3440,200,3440,202,3440,204,3440,206,3440,208,3440,210,3440,212,3440,214,3440,216,3440,218,3440,220,3440,222,3440,224,3440,226,3440,228,3440,230,3440,232,3440,234,3440,236,3440,238,3440,240,3440,242,3440,244,3440,246,3440,248,3440,250,3440,252,3440,254,3440,256,3440,258,3440,260,3440,262,3440,264,3440,266,3440,268,3440,270,3440,272,3440,274,3440,276,3440,278,3440,280,3440,282,3440,284,3440,286,3440,288,3440,290,3440,292,3440,294,3440,296,3440,298,3440,300,3440,302,3440,304,3440,306,3440,308,3440,310,3440,312,3440,314,3440,316,3440,318,3440,320,3440,322,3440,324,3440,326,3440,328,3440,330,3440,332,3440,334,3440,336,3440,338,3440,340,3440,342,3440,344,3440,346,3440,348,3440,350,3440,352,3440,354,3440,356,3440,358,3440,360,3440,362,3440,364,3440,366,3440,368,3440,370,3440,372,3440,374,3440,376,3440,378,3440,380,3440,382,3440,384,3440,386,3440,388,3440,390,3440,392,3440,394,3440,396,3440,398,3440,400,3440,402,3440,404,3440,406,3440,408,3440,410,3440,412,3440,414,3440,416,3440,418,3440,420,3440,422,3440,424,3440,426,3440,428,3440,430,3440,432,3440,434,3440,436,3440,438,3440,440,3440,442,3440,444,3440,446,3440,448,3440,450,3440,451,3440,452,3440,453,3440,454,3440,455,3440,457,3440,459,3440,461,3440,463,3440,464,3440,466,3440,467,3440,469,3440,471,3440,473,3440,475,3440,477,3440,479,3440,481,3440,483,3440,485,3440,487,3440,489,3440,491,3440,493,3440,495,3440,497,3440,499,3440,501,3440,503,3440,505,3440,507,3440,509,3440,511,3440,513,3440,515,3440,517,3440,519,3440,521,3441,25,3441,27,3441,29,3441,31,3441,33,3441,35,3441,37,3441,39,3441,41,3441,43,3441,45,3441,47,3441,48,3441,49,3441,50,3441,51,3441,53,3441,55,3441,57,3441,59,3441,61,3441,63,3441,65,3441,67,3441,69,3441,71,3441,73,3441,75,3441,77,3441,79,3441,81,3441,83,3441,85,3441,87,3441,89,3441,91,3441,93,3441,95,3441,97,3441,99,3441,101,3441,103,3441,105,3441,107,3441,109,3441,111,3441,113,3441,115,3441,117,3441,119,3441,121,3441,123,3441,125,3441,127,3441,129,3441,131,3441,133,3441,135,3441,137,3441,139,3441,141,3441,143,3441,145,3441,147,3441,149,3441,151,3441,153,3441,155,3441,157,3441,159,3441,160,3441,162,3441,164,3441,166,3441,168,3441,170,3441,172,3441,174,3441,176,3441,178,3441,180,3441,182,3441,184,3441,186,3441,188,3441,190,3441,192,3441,194,3441,196,3441,198,3441,200,3441,202,3441,204,3441,206,3441,208,3441,210,3441,212,3441,214,3441,216,3441,218,3441,220,3441,222,3441,224,3441,226,3441,228,3441,230,3441,232,3441,234,3441,236,3441,238,3441,240,3441,242,3441,244,3441,246,3441,248,3441,250,3441,252,3441,254,3441,256,3441,258,3441,260,3441,262,3441,264,3441,266,3441,268,3441,270,3441,272,3441,274,3441,276,3441,278,3441,280,3441,282,3441,284,3441,286,3441,288,3441,290,3441,292,3441,294,3441,296,3441,298,3441,300,3441,302,3441,304,3441,306,3441,308,3441,310,3441,312,3441,314,3441,316,3441,318,3441,320,3441,322,3441,324,3441,326,3441,328,3441,330,3441,332,3441,334,3441,336,3441,338,3441,340,3441,342,3441,344,3441,346,3441,348,3441,350,3441,352,3441,354,3441,356,3441,358,3441,360,3441,362,3441,364,3441,366,3441,368,3441,370,3441,372,3441,374,3441,376,3441,378,3441,380,3441,382,3441,384,3441,386,3441,388,3441,390,3441,392,3441,394,3441,396,3441,398,3441,400,3441,402,3441,404,3441,406,3441,408,3441,410,3441,412,3441,414,3441,416,3441,418,3441,420,3441,422,3441,424,3441,426,3441,428,3441,430,3441,432,3441,434,3441,436,3441,438,3441,440,3441,442,3441,444,3441,446,3441,448,3441,450,3441,451,3441,452,3441,453,3441,454,3441,455,3441,457,3441,459,3441,461,3441,463,3441,464,3441,466,3441,467,3441,469,3441,471,3441,473,3441,475,3441,477,3441,479,3441,481,3441,483,3441,485,3441,487,3441,489,3441,491,3441,493,3441,495,3441,497,3441,499,3441,501,3441,503,3441,505,3441,507,3441,509,3441,511,3441,513,3441,515,3441,517,3441,519,3441,521,3442,25,3442,27,3442,29,3442,31,3442,33,3442,35,3442,37,3442,39,3442,41,3442,43,3442,45,3442,47,3442,48,3442,49,3442,50,3442,51,3442,53,3442,55,3442,57,3442,59,3442,61,3442,63,3442,65,3442,67,3442,69,3442,71,3442,73,3442,75,3442,77,3442,79,3442,81,3442,83,3442,85,3442,87,3442,89,3442,91,3442,93,3442,95,3442,97,3442,99,3442,101,3442,103,3442,105,3442,107,3442,109,3442,111,3442,113,3442,115,3442,117,3442,119,3442,121,3442,123,3442,125,3442,127,3442,129,3442,131,3442,133,3442,135,3442,137,3442,139,3442,141,3442,143,3442,145,3442,147,3442,149,3442,151,3442,153,3442,155,3442,157,3442,159,3442,160,3442,162,3442,164,3442,166,3442,168,3442,170,3442,172,3442,174,3442,176,3442,178,3442,180,3442,182,3442,184,3442,186,3442,188,3442,190,3442,192,3442,194,3442,196,3442,198,3442,200,3442,202,3442,204,3442,206,3442,208,3442,210,3442,212,3442,214,3442,216,3442,218,3442,220,3442,222,3442,224,3442,226,3442,228,3442,230,3442,232,3442,234,3442,236,3442,238,3442,240,3442,242,3442,244,3442,246,3442,248,3442,250,3442,252,3442,254,3442,256,3442,258,3442,260,3442,262,3442,264,3442,266,3442,268,3442,270,3442,272,3442,274,3442,276,3442,278,3442,280,3442,282,3442,284,3442,286,3442,288,3442,290,3442,292,3442,294,3442,296,3442,298,3442,300,3442,302,3442,304,3442,306,3442,308,3442,310,3442,312,3442,314,3442,316,3442,318,3442,320,3442,322,3442,324,3442,326,3442,328,3442,330,3442,332,3442,334,3442,336,3442,338,3442,340,3442,342,3442,344,3442,346,3442,348,3442,350,3442,352,3442,354,3442,356,3442,358,3442,360,3442,362,3442,364,3442,366,3442,368,3442,370,3442,372,3442,374,3442,376,3442,378,3442,380,3442,382,3442,384,3442,386,3442,388,3442,390,3442,392,3442,394,3442,396,3442,398,3442,400,3442,402,3442,404,3442,406,3442,408,3442,410,3442,412,3442,414,3442,416,3442,418,3442,420,3442,422,3442,424,3442,426,3442,428,3442,430,3442,432,3442,434,3442,436,3442,438,3442,440,3442,442,3442,444,3442,446,3442,448,3442,450,3442,451,3442,452,3442,453,3442,454,3442,455,3442,457,3442,459,3442,461,3442,463,3442,464,3442,466,3442,467,3442,469,3442,471,3442,473,3442,475,3442,477,3442,479,3442,481,3442,483,3442,485,3442,487,3442,489,3442,491,3442,493,3442,495,3442,497,3442,499,3442,501,3442,503,3442,505,3442,507,3442,509,3442,511,3442,513,3442,515,3442,517,3442,519,3442,521,3443,25,3443,27,3443,29,3443,31,3443,33,3443,35,3443,37,3443,39,3443,41,3443,43,3443,45,3443,47,3443,48,3443,49,3443,50,3443,51,3443,53,3443,55,3443,57,3443,59,3443,61,3443,63,3443,65,3443,67,3443,69,3443,71,3443,73,3443,75,3443,77,3443,79,3443,81,3443,83,3443,85,3443,87,3443,89,3443,91,3443,93,3443,95,3443,97,3443,99,3443,101,3443,103,3443,105,3443,107,3443,109,3443,111,3443,113,3443,115,3443,117,3443,119,3443,121,3443,123,3443,125,3443,127,3443,129,3443,131,3443,133,3443,135,3443,137,3443,139,3443,141,3443,143,3443,145,3443,147,3443,149,3443,151,3443,153,3443,155,3443,157,3443,159,3443,160,3443,162,3443,164,3443,166,3443,168,3443,170,3443,172,3443,174,3443,176,3443,178,3443,180,3443,182,3443,184,3443,186,3443,188,3443,190,3443,192,3443,194,3443,196,3443,198,3443,200,3443,202,3443,204,3443,206,3443,208,3443,210,3443,212,3443,214,3443,216,3443,218,3443,220,3443,222,3443,224,3443,226,3443,228,3443,230,3443,232,3443,234,3443,236,3443,238,3443,240,3443,242,3443,244,3443,246,3443,248,3443,250,3443,252,3443,254,3443,256,3443,258,3443,260,3443,262,3443,264,3443,266,3443,268,3443,270,3443,272,3443,274,3443,276,3443,278,3443,280,3443,282,3443,284,3443,286,3443,288,3443,290,3443,292,3443,294,3443,296,3443,298,3443,300,3443,302,3443,304,3443,306,3443,308,3443,310,3443,312,3443,314,3443,316,3443,318,3443,320,3443,322,3443,324,3443,326,3443,328,3443,330,3443,332,3443,334,3443,336,3443,338,3443,340,3443,342,3443,344,3443,346,3443,348,3443,350,3443,352,3443,354,3443,356,3443,358,3443,360,3443,362,3443,364,3443,366,3443,368,3443,370,3443,372,3443,374,3443,376,3443,378,3443,380,3443,382,3443,384,3443,386,3443,388,3443,390,3443,392,3443,394,3443,396,3443,398,3443,400,3443,402,3443,404,3443,406,3443,408,3443,410,3443,412,3443,414,3443,416,3443,418,3443,420,3443,422,3443,424,3443,426,3443,428,3443,430,3443,432,3443,434,3443,436,3443,438,3443,440,3443,442,3443,444,3443,446,3443,448,3443,450,3443,451,3443,452,3443,453,3443,454,3443,455,3443,457,3443,459,3443,461,3443,463,3443,464,3443,466,3443,467,3443,469,3443,471,3443,473,3443,475,3443,477,3443,479,3443,481,3443,483,3443,485,3443,487,3443,489,3443,491,3443,493,3443,495,3443,497,3443,499,3443,501,3443,503,3443,505,3443,507,3443,509,3443,511,3443,513,3443,515,3443,517,3443,519,3443,521,3444,25,3444,27,3444,29,3444,31,3444,33,3444,35,3444,37,3444,39,3444,41,3444,43,3444,45,3444,47,3444,48,3444,49,3444,50,3444,51,3444,53,3444,55,3444,57,3444,59,3444,61,3444,63,3444,65,3444,67,3444,69,3444,71,3444,73,3444,75,3444,77,3444,79,3444,81,3444,83,3444,85,3444,87,3444,89,3444,91,3444,93,3444,95,3444,97,3444,99,3444,101,3444,103,3444,105,3444,107,3444,109,3444,111,3444,113,3444,115,3444,117,3444,119,3444,121,3444,123,3444,125,3444,127,3444,129,3444,131,3444,133,3444,135,3444,137,3444,139,3444,141,3444,143,3444,145,3444,147,3444,149,3444,151,3444,153,3444,155,3444,157,3444,159,3444,160,3444,162,3444,164,3444,166,3444,168,3444,170,3444,172,3444,174,3444,176,3444,178,3444,180,3444,182,3444,184,3444,186,3444,188,3444,190,3444,192,3444,194,3444,196,3444,198,3444,200,3444,202,3444,204,3444,206,3444,208,3444,210,3444,212,3444,214,3444,216,3444,218,3444,220,3444,222,3444,224,3444,226,3444,228,3444,230,3444,232,3444,234,3444,236,3444,238,3444,240,3444,242,3444,244,3444,246,3444,248,3444,250,3444,252,3444,254,3444,256,3444,258,3444,260,3444,262,3444,264,3444,266,3444,268,3444,270,3444,272,3444,274,3444,276,3444,278,3444,280,3444,282,3444,284,3444,286,3444,288,3444,290,3444,292,3444,294,3444,296,3444,298,3444,300,3444,302,3444,304,3444,306,3444,308,3444,310,3444,312,3444,314,3444,316,3444,318,3444,320,3444,322,3444,324,3444,326,3444,328,3444,330,3444,332,3444,334,3444,336,3444,338,3444,340,3444,342,3444,344,3444,346,3444,348,3444,350,3444,352,3444,354,3444,356,3444,358,3444,360,3444,362,3444,364,3444,366,3444,368,3444,370,3444,372,3444,374,3444,376,3444,378,3444,380,3444,382,3444,384,3444,386,3444,388,3444,390,3444,392,3444,394,3444,396,3444,398,3444,400,3444,402,3444,404,3444,406,3444,408,3444,410,3444,412,3444,414,3444,416,3444,418,3444,420,3444,422,3444,424,3444,426,3444,428,3444,430,3444,432,3444,434,3444,436,3444,438,3444,440,3444,442,3444,444,3444,446,3444,448,3444,450,3444,451,3444,452,3444,453,3444,454,3444,455,3444,457,3444,459,3444,461,3444,463,3444,464,3444,466,3444,467,3444,469,3444,471,3444,473,3444,475,3444,477,3444,479,3444,481,3444,483,3444,485,3444,487,3444,489,3444,491,3444,493,3444,495,3444,497,3444,499,3444,501,3444,503,3444,505,3444,507,3444,509,3444,511,3444,513,3444,515,3444,517,3444,519,3444,521,3445,25,3445,27,3445,29,3445,31,3445,33,3445,35,3445,37,3445,39,3445,41,3445,43,3445,45,3445,47,3445,48,3445,49,3445,50,3445,51,3445,53,3445,55,3445,57,3445,59,3445,61,3445,63,3445,65,3445,67,3445,69,3445,71,3445,73,3445,75,3445,77,3445,79,3445,81,3445,83,3445,85,3445,87,3445,89,3445,91,3445,93,3445,95,3445,97,3445,99,3445,101,3445,103,3445,105,3445,107,3445,109,3445,111,3445,113,3445,115,3445,117,3445,119,3445,121,3445,123,3445,125,3445,127,3445,129,3445,131,3445,133,3445,135,3445,137,3445,139,3445,141,3445,143,3445,145,3445,147,3445,149,3445,151,3445,153,3445,155,3445,157,3445,159,3445,160,3445,162,3445,164,3445,166,3445,168,3445,170,3445,172,3445,174,3445,176,3445,178,3445,180,3445,182,3445,184,3445,186,3445,188,3445,190,3445,192,3445,194,3445,196,3445,198,3445,200,3445,202,3445,204,3445,206,3445,208,3445,210,3445,212,3445,214,3445,216,3445,218,3445,220,3445,222,3445,224,3445,226,3445,228,3445,230,3445,232,3445,234,3445,236,3445,238,3445,240,3445,242,3445,244,3445,246,3445,248,3445,250,3445,252,3445,254,3445,256,3445,258,3445,260,3445,262,3445,264,3445,266,3445,268,3445,270,3445,272,3445,274,3445,276,3445,278,3445,280,3445,282,3445,284,3445,286,3445,288,3445,290,3445,292,3445,294,3445,296,3445,298,3445,300,3445,302,3445,304,3445,306,3445,308,3445,310,3445,312,3445,314,3445,316,3445,318,3445,320,3445,322,3445,324,3445,326,3445,328,3445,330,3445,332,3445,334,3445,336,3445,338,3445,340,3445,342,3445,344,3445,346,3445,348,3445,350,3445,352,3445,354,3445,356,3445,358,3445,360,3445,362,3445,364,3445,366,3445,368,3445,370,3445,372,3445,374,3445,376,3445,378,3445,380,3445,382,3445,384,3445,386,3445,388,3445,390,3445,392,3445,394,3445,396,3445,398,3445,400,3445,402,3445,404,3445,406,3445,408,3445,410,3445,412,3445,414,3445,416,3445,418,3445,420,3445,422,3445,424,3445,426,3445,428,3445,430,3445,432,3445,434,3445,436,3445,438,3445,440,3445,442,3445,444,3445,446,3445,448,3445,450,3445,451,3445,452,3445,453,3445,454,3445,455,3445,457,3445,459,3445,461,3445,463,3445,464,3445,466,3445,467,3445,469,3445,471,3445,473,3445,475,3445,477,3445,479,3445,481,3445,483,3445,485,3445,487,3445,489,3445,491,3445,493,3445,495,3445,497,3445,499,3445,501,3445,503,3445,505,3445,507,3445,509,3445,511,3445,513,3445,515,3445,517,3445,519,3445,521,3446,25,3446,27,3446,29,3446,31,3446,33,3446,35,3446,37,3446,39,3446,41,3446,43,3446,45,3446,47,3446,48,3446,49,3446,50,3446,51,3446,53,3446,55,3446,57,3446,59,3446,61,3446,63,3446,65,3446,67,3446,69,3446,71,3446,73,3446,75,3446,77,3446,79,3446,81,3446,83,3446,85,3446,87,3446,89,3446,91,3446,93,3446,95,3446,97,3446,99,3446,101,3446,103,3446,105,3446,107,3446,109,3446,111,3446,113,3446,115,3446,117,3446,119,3446,121,3446,123,3446,125,3446,127,3446,129,3446,131,3446,133,3446,135,3446,137,3446,139,3446,141,3446,143,3446,145,3446,147,3446,149,3446,151,3446,153,3446,155,3446,157,3446,159,3446,160,3446,162,3446,164,3446,166,3446,168,3446,170,3446,172,3446,174,3446,176,3446,178,3446,180,3446,182,3446,184,3446,186,3446,188,3446,190,3446,192,3446,194,3446,196,3446,198,3446,200,3446,202,3446,204,3446,206,3446,208,3446,210,3446,212,3446,214,3446,216,3446,218,3446,220,3446,222,3446,224,3446,226,3446,228,3446,230,3446,232,3446,234,3446,236,3446,238,3446,240,3446,242,3446,244,3446,246,3446,248,3446,250,3446,252,3446,254,3446,256,3446,258,3446,260,3446,262,3446,264,3446,266,3446,268,3446,270,3446,272,3446,274,3446,276,3446,278,3446,280,3446,282,3446,284,3446,286,3446,288,3446,290,3446,292,3446,294,3446,296,3446,298,3446,300,3446,302,3446,304,3446,306,3446,308,3446,310,3446,312,3446,314,3446,316,3446,318,3446,320,3446,322,3446,324,3446,326,3446,328,3446,330,3446,332,3446,334,3446,336,3446,338,3446,340,3446,342,3446,344,3446,346,3446,348,3446,350,3446,352,3446,354,3446,356,3446,358,3446,360,3446,362,3446,364,3446,366,3446,368,3446,370,3446,372,3446,374,3446,376,3446,378,3446,380,3446,382,3446,384,3446,386,3446,388,3446,390,3446,392,3446,394,3446,396,3446,398,3446,400,3446,402,3446,404,3446,406,3446,408,3446,410,3446,412,3446,414,3446,416,3446,418,3446,420,3446,422,3446,424,3446,426,3446,428,3446,430,3446,432,3446,434,3446,436,3446,438,3446,440,3446,442,3446,444,3446,446,3446,448,3446,450,3446,451,3446,452,3446,453,3446,454,3446,455,3446,457,3446,459,3446,461,3446,463,3446,464,3446,466,3446,467,3446,469,3446,471,3446,473,3446,475,3446,477,3446,479,3446,481,3446,483,3446,485,3446,487,3446,489,3446,491,3446,493,3446,495,3446,497,3446,499,3446,501,3446,503,3446,505,3446,507,3446,509,3446,511,3446,513,3446,515,3446,517,3446,519,3446,521,3447,25,3447,27,3447,29,3447,31,3447,33,3447,35,3447,37,3447,39,3447,41,3447,43,3447,45,3447,47,3447,48,3447,49,3447,50,3447,51,3447,53,3447,55,3447,57,3447,59,3447,61,3447,63,3447,65,3447,67,3447,69,3447,71,3447,73,3447,75,3447,77,3447,79,3447,81,3447,83,3447,85,3447,87,3447,89,3447,91,3447,93,3447,95,3447,97,3447,99,3447,101,3447,103,3447,105,3447,107,3447,109,3447,111,3447,113,3447,115,3447,117,3447,119,3447,121,3447,123,3447,125,3447,127,3447,129,3447,131,3447,133,3447,135,3447,137,3447,139,3447,141,3447,143,3447,145,3447,147,3447,149,3447,151,3447,153,3447,155,3447,157,3447,159,3447,160,3447,162,3447,164,3447,166,3447,168,3447,170,3447,172,3447,174,3447,176,3447,178,3447,180,3447,182,3447,184,3447,186,3447,188,3447,190,3447,192,3447,194,3447,196,3447,198,3447,200,3447,202,3447,204,3447,206,3447,208,3447,210,3447,212,3447,214,3447,216,3447,218,3447,220,3447,222,3447,224,3447,226,3447,228,3447,230,3447,232,3447,234,3447,236,3447,238,3447,240,3447,242,3447,244,3447,246,3447,248,3447,250,3447,252,3447,254,3447,256,3447,258,3447,260,3447,262,3447,264,3447,266,3447,268,3447,270,3447,272,3447,274,3447,276,3447,278,3447,280,3447,282,3447,284,3447,286,3447,288,3447,290,3447,292,3447,294,3447,296,3447,298,3447,300,3447,302,3447,304,3447,306,3447,308,3447,310,3447,312,3447,314,3447,316,3447,318,3447,320,3447,322,3447,324,3447,326,3447,328,3447,330,3447,332,3447,334,3447,336,3447,338,3447,340,3447,342,3447,344,3447,346,3447,348,3447,350,3447,352,3447,354,3447,356,3447,358,3447,360,3447,362,3447,364,3447,366,3447,368,3447,370,3447,372,3447,374,3447,376,3447,378,3447,380,3447,382,3447,384,3447,386,3447,388,3447,390,3447,392,3447,394,3447,396,3447,398,3447,400,3447,402,3447,404,3447,406,3447,408,3447,410,3447,412,3447,414,3447,416,3447,418,3447,420,3447,422,3447,424,3447,426,3447,428,3447,430,3447,432,3447,434,3447,436,3447,438,3447,440,3447,442,3447,444,3447,446,3447,448,3447,450,3447,451,3447,452,3447,453,3447,454,3447,455,3447,457,3447,459,3447,461,3447,463,3447,464,3447,466,3447,467,3447,469,3447,471,3447,473,3447,475,3447,477,3447,479,3447,481,3447,483,3447,485,3447,487,3447,489,3447,491,3447,493,3447,495,3447,497,3447,499,3447,501,3447,503,3447,505,3447,507,3447,509,3447,511,3447,513,3447,515,3447,517,3447,519,3447,521,3448,25,3448,27,3448,29,3448,31,3448,33,3448,35,3448,37,3448,39,3448,41,3448,43,3448,45,3448,47,3448,48,3448,49,3448,50,3448,51,3448,53,3448,55,3448,57,3448,59,3448,61,3448,63,3448,65,3448,67,3448,69,3448,71,3448,73,3448,75,3448,77,3448,79,3448,81,3448,83,3448,85,3448,87,3448,89,3448,91,3448,93,3448,95,3448,97,3448,99,3448,101,3448,103,3448,105,3448,107,3448,109,3448,111,3448,113,3448,115,3448,117,3448,119,3448,121,3448,123,3448,125,3448,127,3448,129,3448,131,3448,133,3448,135,3448,137,3448,139,3448,141,3448,143,3448,145,3448,147,3448,149,3448,151,3448,153,3448,155,3448,157,3448,159,3448,160,3448,162,3448,164,3448,166,3448,168,3448,170,3448,172,3448,174,3448,176,3448,178,3448,180,3448,182,3448,184,3448,186,3448,188,3448,190,3448,192,3448,194,3448,196,3448,198,3448,200,3448,202,3448,204,3448,206,3448,208,3448,210,3448,212,3448,214,3448,216,3448,218,3448,220,3448,222,3448,224,3448,226,3448,228,3448,230,3448,232,3448,234,3448,236,3448,238,3448,240,3448,242,3448,244,3448,246,3448,248,3448,250,3448,252,3448,254,3448,256,3448,258,3448,260,3448,262,3448,264,3448,266,3448,268,3448,270,3448,272,3448,274,3448,276,3448,278,3448,280,3448,282,3448,284,3448,286,3448,288,3448,290,3448,292,3448,294,3448,296,3448,298,3448,300,3448,302,3448,304,3448,306,3448,308,3448,310,3448,312,3448,314,3448,316,3448,318,3448,320,3448,322,3448,324,3448,326,3448,328,3448,330,3448,332,3448,334,3448,336,3448,338,3448,340,3448,342,3448,344,3448,346,3448,348,3448,350,3448,352,3448,354,3448,356,3448,358,3448,360,3448,362,3448,364,3448,366,3448,368,3448,370,3448,372,3448,374,3448,376,3448,378,3448,380,3448,382,3448,384,3448,386,3448,388,3448,390,3448,392,3448,394,3448,396,3448,398,3448,400,3448,402,3448,404,3448,406,3448,408,3448,410,3448,412,3448,414,3448,416,3448,418,3448,420,3448,422,3448,424,3448,426,3448,428,3448,430,3448,432,3448,434,3448,436,3448,438,3448,440,3448,442,3448,444,3448,446,3448,448,3448,450,3448,451,3448,452,3448,453,3448,454,3448,455,3448,457,3448,459,3448,461,3448,463,3448,464,3448,466,3448,467,3448,469,3448,471,3448,473,3448,475,3448,477,3448,479,3448,481,3448,483,3448,485,3448,487,3448,489,3448,491,3448,493,3448,495,3448,497,3448,499,3448,501,3448,503,3448,505,3448,507,3448,509,3448,511,3448,513,3448,515,3448,517,3448,519,3448,521,3449,25,3449,27,3449,29,3449,31,3449,33,3449,35,3449,37,3449,39,3449,41,3449,43,3449,45,3449,47,3449,48,3449,49,3449,50,3449,51,3449,53,3449,55,3449,57,3449,59,3449,61,3449,63,3449,65,3449,67,3449,69,3449,71,3449,73,3449,75,3449,77,3449,79,3449,81,3449,83,3449,85,3449,87,3449,89,3449,91,3449,93,3449,95,3449,97,3449,99,3449,101,3449,103,3449,105,3449,107,3449,109,3449,111,3449,113,3449,115,3449,117,3449,119,3449,121,3449,123,3449,125,3449,127,3449,129,3449,131,3449,133,3449,135,3449,137,3449,139,3449,141,3449,143,3449,145,3449,147,3449,149,3449,151,3449,153,3449,155,3449,157,3449,159,3449,160,3449,162,3449,164,3449,166,3449,168,3449,170,3449,172,3449,174,3449,176,3449,178,3449,180,3449,182,3449,184,3449,186,3449,188,3449,190,3449,192,3449,194,3449,196,3449,198,3449,200,3449,202,3449,204,3449,206,3449,208,3449,210,3449,212,3449,214,3449,216,3449,218,3449,220,3449,222,3449,224,3449,226,3449,228,3449,230,3449,232,3449,234,3449,236,3449,238,3449,240,3449,242,3449,244,3449,246,3449,248,3449,250,3449,252,3449,254,3449,256,3449,258,3449,260,3449,262,3449,264,3449,266,3449,268,3449,270,3449,272,3449,274,3449,276,3449,278,3449,280,3449,282,3449,284,3449,286,3449,288,3449,290,3449,292,3449,294,3449,296,3449,298,3449,300,3449,302,3449,304,3449,306,3449,308,3449,310,3449,312,3449,314,3449,316,3449,318,3449,320,3449,322,3449,324,3449,326,3449,328,3449,330,3449,332,3449,334,3449,336,3449,338,3449,340,3449,342,3449,344,3449,346,3449,348,3449,350,3449,352,3449,354,3449,356,3449,358,3449,360,3449,362,3449,364,3449,366,3449,368,3449,370,3449,372,3449,374,3449,376,3449,378,3449,380,3449,382,3449,384,3449,386,3449,388,3449,390,3449,392,3449,394,3449,396,3449,398,3449,400,3449,402,3449,404,3449,406,3449,408,3449,410,3449,412,3449,414,3449,416,3449,418,3449,420,3449,422,3449,424,3449,426,3449,428,3449,430,3449,432,3449,434,3449,436,3449,438,3449,440,3449,442,3449,444,3449,446,3449,448,3449,450,3449,451,3449,452,3449,453,3449,454,3449,455,3449,457,3449,459,3449,461,3449,463,3449,464,3449,466,3449,467,3449,469,3449,471,3449,473,3449,475,3449,477,3449,479,3449,481,3449,483,3449,485,3449,487,3449,489,3449,491,3449,493,3449,495,3449,497,3449,499,3449,501,3449,503,3449,505,3449,507,3449,509,3449,511,3449,513,3449,515,3449,517,3449,519,3449,521,3450,25,3450,27,3450,29,3450,31,3450,33,3450,35,3450,37,3450,39,3450,41,3450,43,3450,45,3450,47,3450,48,3450,49,3450,50,3450,51,3450,53,3450,55,3450,57,3450,59,3450,61,3450,63,3450,65,3450,67,3450,69,3450,71,3450,73,3450,75,3450,77,3450,79,3450,81,3450,83,3450,85,3450,87,3450,89,3450,91,3450,93,3450,95,3450,97,3450,99,3450,101,3450,103,3450,105,3450,107,3450,109,3450,111,3450,113,3450,115,3450,117,3450,119,3450,121,3450,123,3450,125,3450,127,3450,129,3450,131,3450,133,3450,135,3450,137,3450,139,3450,141,3450,143,3450,145,3450,147,3450,149,3450,151,3450,153,3450,155,3450,157,3450,159,3450,160,3450,162,3450,164,3450,166,3450,168,3450,170,3450,172,3450,174,3450,176,3450,178,3450,180,3450,182,3450,184,3450,186,3450,188,3450,190,3450,192,3450,194,3450,196,3450,198,3450,200,3450,202,3450,204,3450,206,3450,208,3450,210,3450,212,3450,214,3450,216,3450,218,3450,220,3450,222,3450,224,3450,226,3450,228,3450,230,3450,232,3450,234,3450,236,3450,238,3450,240,3450,242,3450,244,3450,246,3450,248,3450,250,3450,252,3450,254,3450,256,3450,258,3450,260,3450,262,3450,264,3450,266,3450,268,3450,270,3450,272,3450,274,3450,276,3450,278,3450,280,3450,282,3450,284,3450,286,3450,288,3450,290,3450,292,3450,294,3450,296,3450,298,3450,300,3450,302,3450,304,3450,306,3450,308,3450,310,3450,312,3450,314,3450,316,3450,318,3450,320,3450,322,3450,324,3450,326,3450,328,3450,330,3450,332,3450,334,3450,336,3450,338,3450,340,3450,342,3450,344,3450,346,3450,348,3450,350,3450,352,3450,354,3450,356,3450,358,3450,360,3450,362,3450,364,3450,366,3450,368,3450,370,3450,372,3450,374,3450,376,3450,378,3450,380,3450,382,3450,384,3450,386,3450,388,3450,390,3450,392,3450,394,3450,396,3450,398,3450,400,3450,402,3450,404,3450,406,3450,408,3450,410,3450,412,3450,414,3450,416,3450,418,3450,420,3450,422,3450,424,3450,426,3450,428,3450,430,3450,432,3450,434,3450,436,3450,438,3450,440,3450,442,3450,444,3450,446,3450,448,3450,450,3450,451,3450,452,3450,453,3450,454,3450,455,3450,457,3450,459,3450,461,3450,463,3450,464,3450,466,3450,467,3450,469,3450,471,3450,473,3450,475,3450,477,3450,479,3450,481,3450,483,3450,485,3450,487,3450,489,3450,491,3450,493,3450,495,3450,497,3450,499,3450,501,3450,503,3450,505,3450,507,3450,509,3450,511,3450,513,3450,515,3450,517,3450,519,3450,521,3451,25,3451,27,3451,29,3451,31,3451,33,3451,35,3451,37,3451,39,3451,41,3451,43,3451,45,3451,47,3451,48,3451,49,3451,50,3451,51,3451,53,3451,55,3451,57,3451,59,3451,61,3451,63,3451,65,3451,67,3451,69,3451,71,3451,73,3451,75,3451,77,3451,79,3451,81,3451,83,3451,85,3451,87,3451,89,3451,91,3451,93,3451,95,3451,97,3451,99,3451,101,3451,103,3451,105,3451,107,3451,109,3451,111,3451,113,3451,115,3451,117,3451,119,3451,121,3451,123,3451,125,3451,127,3451,129,3451,131,3451,133,3451,135,3451,137,3451,139,3451,141,3451,143,3451,145,3451,147,3451,149,3451,151,3451,153,3451,155,3451,157,3451,159,3451,160,3451,162,3451,164,3451,166,3451,168,3451,170,3451,172,3451,174,3451,176,3451,178,3451,180,3451,182,3451,184,3451,186,3451,188,3451,190,3451,192,3451,194,3451,196,3451,198,3451,200,3451,202,3451,204,3451,206,3451,208,3451,210,3451,212,3451,214,3451,216,3451,218,3451,220,3451,222,3451,224,3451,226,3451,228,3451,230,3451,232,3451,234,3451,236,3451,238,3451,240,3451,242,3451,244,3451,246,3451,248,3451,250,3451,252,3451,254,3451,256,3451,258,3451,260,3451,262,3451,264,3451,266,3451,268,3451,270,3451,272,3451,274,3451,276,3451,278,3451,280,3451,282,3451,284,3451,286,3451,288,3451,290,3451,292,3451,294,3451,296,3451,298,3451,300,3451,302,3451,304,3451,306,3451,308,3451,310,3451,312,3451,314,3451,316,3451,318,3451,320,3451,322,3451,324,3451,326,3451,328,3451,330,3451,332,3451,334,3451,336,3451,338,3451,340,3451,342,3451,344,3451,346,3451,348,3451,350,3451,352,3451,354,3451,356,3451,358,3451,360,3451,362,3451,364,3451,366,3451,368,3451,370,3451,372,3451,374,3451,376,3451,378,3451,380,3451,382,3451,384,3451,386,3451,388,3451,390,3451,392,3451,394,3451,396,3451,398,3451,400,3451,402,3451,404,3451,406,3451,408,3451,410,3451,412,3451,414,3451,416,3451,418,3451,420,3451,422,3451,424,3451,426,3451,428,3451,430,3451,432,3451,434,3451,436,3451,438,3451,440,3451,442,3451,444,3451,446,3451,448,3451,450,3451,451,3451,452,3451,453,3451,454,3451,455,3451,457,3451,459,3451,461,3451,463,3451,464,3451,466,3451,467,3451,469,3451,471,3451,473,3451,475,3451,477,3451,479,3451,481,3451,483,3451,485,3451,487,3451,489,3451,491,3451,493,3451,495,3451,497,3451,499,3451,501,3451,503,3451,505,3451,507,3451,509,3451,511,3451,513,3451,515,3451,517,3451,519,3451,521,3452,25,3452,27,3452,29,3452,31,3452,33,3452,35,3452,37,3452,39,3452,41,3452,43,3452,45,3452,47,3452,48,3452,49,3452,50,3452,51,3452,53,3452,55,3452,57,3452,59,3452,61,3452,63,3452,65,3452,67,3452,69,3452,71,3452,73,3452,75,3452,77,3452,79,3452,81,3452,83,3452,85,3452,87,3452,89,3452,91,3452,93,3452,95,3452,97,3452,99,3452,101,3452,103,3452,105,3452,107,3452,109,3452,111,3452,113,3452,115,3452,117,3452,119,3452,121,3452,123,3452,125,3452,127,3452,129,3452,131,3452,133,3452,135,3452,137,3452,139,3452,141,3452,143,3452,145,3452,147,3452,149,3452,151,3452,153,3452,155,3452,157,3452,159,3452,160,3452,162,3452,164,3452,166,3452,168,3452,170,3452,172,3452,174,3452,176,3452,178,3452,180,3452,182,3452,184,3452,186,3452,188,3452,190,3452,192,3452,194,3452,196,3452,198,3452,200,3452,202,3452,204,3452,206,3452,208,3452,210,3452,212,3452,214,3452,216,3452,218,3452,220,3452,222,3452,224,3452,226,3452,228,3452,230,3452,232,3452,234,3452,236,3452,238,3452,240,3452,242,3452,244,3452,246,3452,248,3452,250,3452,252,3452,254,3452,256,3452,258,3452,260,3452,262,3452,264,3452,266,3452,268,3452,270,3452,272,3452,274,3452,276,3452,278,3452,280,3452,282,3452,284,3452,286,3452,288,3452,290,3452,292,3452,294,3452,296,3452,298,3452,300,3452,302,3452,304,3452,306,3452,308,3452,310,3452,312,3452,314,3452,316,3452,318,3452,320,3452,322,3452,324,3452,326,3452,328,3452,330,3452,332,3452,334,3452,336,3452,338,3452,340,3452,342,3452,344,3452,346,3452,348,3452,350,3452,352,3452,354,3452,356,3452,358,3452,360,3452,362,3452,364,3452,366,3452,368,3452,370,3452,372,3452,374,3452,376,3452,378,3452,380,3452,382,3452,384,3452,386,3452,388,3452,390,3452,392,3452,394,3452,396,3452,398,3452,400,3452,402,3452,404,3452,406,3452,408,3452,410,3452,412,3452,414,3452,416,3452,418,3452,420,3452,422,3452,424,3452,426,3452,428,3452,430,3452,432,3452,434,3452,436,3452,438,3452,440,3452,442,3452,444,3452,446,3452,448,3452,450,3452,451,3452,452,3452,453,3452,454,3452,455,3452,457,3452,459,3452,461,3452,463,3452,464,3452,466,3452,467,3452,469,3452,471,3452,473,3452,475,3452,477,3452,479,3452,481,3452,483,3452,485,3452,487,3452,489,3452,491,3452,493,3452,495,3452,497,3452,499,3452,501,3452,503,3452,505,3452,507,3452,509,3452,511,3452,513,3452,515,3452,517,3452,519,3452,521,3453,25,3453,27,3453,29,3453,31,3453,33,3453,35,3453,37,3453,39,3453,41,3453,43,3453,45,3453,47,3453,48,3453,49,3453,50,3453,51,3453,53,3453,55,3453,57,3453,59,3453,61,3453,63,3453,65,3453,67,3453,69,3453,71,3453,73,3453,75,3453,77,3453,79,3453,81,3453,83,3453,85,3453,87,3453,89,3453,91,3453,93,3453,95,3453,97,3453,99,3453,101,3453,103,3453,105,3453,107,3453,109,3453,111,3453,113,3453,115,3453,117,3453,119,3453,121,3453,123,3453,125,3453,127,3453,129,3453,131,3453,133,3453,135,3453,137,3453,139,3453,141,3453,143,3453,145,3453,147,3453,149,3453,151,3453,153,3453,155,3453,157,3453,159,3453,160,3453,162,3453,164,3453,166,3453,168,3453,170,3453,172,3453,174,3453,176,3453,178,3453,180,3453,182,3453,184,3453,186,3453,188,3453,190,3453,192,3453,194,3453,196,3453,198,3453,200,3453,202,3453,204,3453,206,3453,208,3453,210,3453,212,3453,214,3453,216,3453,218,3453,220,3453,222,3453,224,3453,226,3453,228,3453,230,3453,232,3453,234,3453,236,3453,238,3453,240,3453,242,3453,244,3453,246,3453,248,3453,250,3453,252,3453,254,3453,256,3453,258,3453,260,3453,262,3453,264,3453,266,3453,268,3453,270,3453,272,3453,274,3453,276,3453,278,3453,280,3453,282,3453,284,3453,286,3453,288,3453,290,3453,292,3453,294,3453,296,3453,298,3453,300,3453,302,3453,304,3453,306,3453,308,3453,310,3453,312,3453,314,3453,316,3453,318,3453,320,3453,322,3453,324,3453,326,3453,328,3453,330,3453,332,3453,334,3453,336,3453,338,3453,340,3453,342,3453,344,3453,346,3453,348,3453,350,3453,352,3453,354,3453,356,3453,358,3453,360,3453,362,3453,364,3453,366,3453,368,3453,370,3453,372,3453,374,3453,376,3453,378,3453,380,3453,382,3453,384,3453,386,3453,388,3453,390,3453,392,3453,394,3453,396,3453,398,3453,400,3453,402,3453,404,3453,406,3453,408,3453,410,3453,412,3453,414,3453,416,3453,418,3453,420,3453,422,3453,424,3453,426,3453,428,3453,430,3453,432,3453,434,3453,436,3453,438,3453,440,3453,442,3453,444,3453,446,3453,448,3453,450,3453,451,3453,452,3453,453,3453,454,3453,455,3453,457,3453,459,3453,461,3453,463,3453,464,3453,466,3453,467,3453,469,3453,471,3453,473,3453,475,3453,477,3453,479,3453,481,3453,483,3453,485,3453,487,3453,489,3453,491,3453,493,3453,495,3453,497,3453,499,3453,501,3453,503,3453,505,3453,507,3453,509,3453,511,3453,513,3453,515,3453,517,3453,519,3453,521,3454,25,3454,27,3454,29,3454,31,3454,33,3454,35,3454,37,3454,39,3454,41,3454,43,3454,45,3454,47,3454,48,3454,49,3454,50,3454,51,3454,53,3454,55,3454,57,3454,59,3454,61,3454,63,3454,65,3454,67,3454,69,3454,71,3454,73,3454,75,3454,77,3454,79,3454,81,3454,83,3454,85,3454,87,3454,89,3454,91,3454,93,3454,95,3454,97,3454,99,3454,101,3454,103,3454,105,3454,107,3454,109,3454,111,3454,113,3454,115,3454,117,3454,119,3454,121,3454,123,3454,125,3454,127,3454,129,3454,131,3454,133,3454,135,3454,137,3454,139,3454,141,3454,143,3454,145,3454,147,3454,149,3454,151,3454,153,3454,155,3454,157,3454,159,3454,160,3454,162,3454,164,3454,166,3454,168,3454,170,3454,172,3454,174,3454,176,3454,178,3454,180,3454,182,3454,184,3454,186,3454,188,3454,190,3454,192,3454,194,3454,196,3454,198,3454,200,3454,202,3454,204,3454,206,3454,208,3454,210,3454,212,3454,214,3454,216,3454,218,3454,220,3454,222,3454,224,3454,226,3454,228,3454,230,3454,232,3454,234,3454,236,3454,238,3454,240,3454,242,3454,244,3454,246,3454,248,3454,250,3454,252,3454,254,3454,256,3454,258,3454,260,3454,262,3454,264,3454,266,3454,268,3454,270,3454,272,3454,274,3454,276,3454,278,3454,280,3454,282,3454,284,3454,286,3454,288,3454,290,3454,292,3454,294,3454,296,3454,298,3454,300,3454,302,3454,304,3454,306,3454,308,3454,310,3454,312,3454,314,3454,316,3454,318,3454,320,3454,322,3454,324,3454,326,3454,328,3454,330,3454,332,3454,334,3454,336,3454,338,3454,340,3454,342,3454,344,3454,346,3454,348,3454,350,3454,352,3454,354,3454,356,3454,358,3454,360,3454,362,3454,364,3454,366,3454,368,3454,370,3454,372,3454,374,3454,376,3454,378,3454,380,3454,382,3454,384,3454,386,3454,388,3454,390,3454,392,3454,394,3454,396,3454,398,3454,400,3454,402,3454,404,3454,406,3454,408,3454,410,3454,412,3454,414,3454,416,3454,418,3454,420,3454,422,3454,424,3454,426,3454,428,3454,430,3454,432,3454,434,3454,436,3454,438,3454,440,3454,442,3454,444,3454,446,3454,448,3454,450,3454,451,3454,452,3454,453,3454,454,3454,455,3454,457,3454,459,3454,461,3454,463,3454,464,3454,466,3454,467,3454,469,3454,471,3454,473,3454,475,3454,477,3454,479,3454,481,3454,483,3454,485,3454,487,3454,489,3454,491,3454,493,3454,495,3454,497,3454,499,3454,501,3454,503,3454,505,3454,507,3454,509,3454,511,3454,513,3454,515,3454,517,3454,519,3454,521,3455,25,3455,27,3455,29,3455,31,3455,33,3455,35,3455,37,3455,39,3455,41,3455,43,3455,45,3455,47,3455,48,3455,49,3455,50,3455,51,3455,53,3455,55,3455,57,3455,59,3455,61,3455,63,3455,65,3455,67,3455,69,3455,71,3455,73,3455,75,3455,77,3455,79,3455,81,3455,83,3455,85,3455,87,3455,89,3455,91,3455,93,3455,95,3455,97,3455,99,3455,101,3455,103,3455,105,3455,107,3455,109,3455,111,3455,113,3455,115,3455,117,3455,119,3455,121,3455,123,3455,125,3455,127,3455,129,3455,131,3455,133,3455,135,3455,137,3455,139,3455,141,3455,143,3455,145,3455,147,3455,149,3455,151,3455,153,3455,155,3455,157,3455,159,3455,160,3455,162,3455,164,3455,166,3455,168,3455,170,3455,172,3455,174,3455,176,3455,178,3455,180,3455,182,3455,184,3455,186,3455,188,3455,190,3455,192,3455,194,3455,196,3455,198,3455,200,3455,202,3455,204,3455,206,3455,208,3455,210,3455,212,3455,214,3455,216,3455,218,3455,220,3455,222,3455,224,3455,226,3455,228,3455,230,3455,232,3455,234,3455,236,3455,238,3455,240,3455,242,3455,244,3455,246,3455,248,3455,250,3455,252,3455,254,3455,256,3455,258,3455,260,3455,262,3455,264,3455,266,3455,268,3455,270,3455,272,3455,274,3455,276,3455,278,3455,280,3455,282,3455,284,3455,286,3455,288,3455,290,3455,292,3455,294,3455,296,3455,298,3455,300,3455,302,3455,304,3455,306,3455,308,3455,310,3455,312,3455,314,3455,316,3455,318,3455,320,3455,322,3455,324,3455,326,3455,328,3455,330,3455,332,3455,334,3455,336,3455,338,3455,340,3455,342,3455,344,3455,346,3455,348,3455,350,3455,352,3455,354,3455,356,3455,358,3455,360,3455,362,3455,364,3455,366,3455,368,3455,370,3455,372,3455,374,3455,376,3455,378,3455,380,3455,382,3455,384,3455,386,3455,388,3455,390,3455,392,3455,394,3455,396,3455,398,3455,400,3455,402,3455,404,3455,406,3455,408,3455,410,3455,412,3455,414,3455,416,3455,418,3455,420,3455,422,3455,424,3455,426,3455,428,3455,430,3455,432,3455,434,3455,436,3455,438,3455,440,3455,442,3455,444,3455,446,3455,448,3455,450,3455,451,3455,452,3455,453,3455,454,3455,455,3455,457,3455,459,3455,461,3455,463,3455,464,3455,466,3455,467,3455,469,3455,471,3455,473,3455,475,3455,477,3455,479,3455,481,3455,483,3455,485,3455,487,3455,489,3455,491,3455,493,3455,495,3455,497,3455,499,3455,501,3455,503,3455,505,3455,507,3455,509,3455,511,3455,513,3455,515,3455,517,3455,519,3455,521,3456,25,3456,27,3456,29,3456,31,3456,33,3456,35,3456,37,3456,39,3456,41,3456,43,3456,45,3456,47,3456,48,3456,49,3456,50,3456,51,3456,53,3456,55,3456,57,3456,59,3456,61,3456,63,3456,65,3456,67,3456,69,3456,71,3456,73,3456,75,3456,77,3456,79,3456,81,3456,83,3456,85,3456,87,3456,89,3456,91,3456,93,3456,95,3456,97,3456,99,3456,101,3456,103,3456,105,3456,107,3456,109,3456,111,3456,113,3456,115,3456,117,3456,119,3456,121,3456,123,3456,125,3456,127,3456,129,3456,131,3456,133,3456,135,3456,137,3456,139,3456,141,3456,143,3456,145,3456,147,3456,149,3456,151,3456,153,3456,155,3456,157,3456,159,3456,160,3456,162,3456,164,3456,166,3456,168,3456,170,3456,172,3456,174,3456,176,3456,178,3456,180,3456,182,3456,184,3456,186,3456,188,3456,190,3456,192,3456,194,3456,196,3456,198,3456,200,3456,202,3456,204,3456,206,3456,208,3456,210,3456,212,3456,214,3456,216,3456,218,3456,220,3456,222,3456,224,3456,226,3456,228,3456,230,3456,232,3456,234,3456,236,3456,238,3456,240,3456,242,3456,244,3456,246,3456,248,3456,250,3456,252,3456,254,3456,256,3456,258,3456,260,3456,262,3456,264,3456,266,3456,268,3456,270,3456,272,3456,274,3456,276,3456,278,3456,280,3456,282,3456,284,3456,286,3456,288,3456,290,3456,292,3456,294,3456,296,3456,298,3456,300,3456,302,3456,304,3456,306,3456,308,3456,310,3456,312,3456,314,3456,316,3456,318,3456,320,3456,322,3456,324,3456,326,3456,328,3456,330,3456,332,3456,334,3456,336,3456,338,3456,340,3456,342,3456,344,3456,346,3456,348,3456,350,3456,352,3456,354,3456,356,3456,358,3456,360,3456,362,3456,364,3456,366,3456,368,3456,370,3456,372,3456,374,3456,376,3456,378,3456,380,3456,382,3456,384,3456,386,3456,388,3456,390,3456,392,3456,394,3456,396,3456,398,3456,400,3456,402,3456,404,3456,406,3456,408,3456,410,3456,412,3456,414,3456,416,3456,418,3456,420,3456,422,3456,424,3456,426,3456,428,3456,430,3456,432,3456,434,3456,436,3456,438,3456,440,3456,442,3456,444,3456,446,3456,448,3456,450,3456,451,3456,452,3456,453,3456,454,3456,455,3456,457,3456,459,3456,461,3456,463,3456,464,3456,466,3456,467,3456,469,3456,471,3456,473,3456,475,3456,477,3456,479,3456,481,3456,483,3456,485,3456,487,3456,489,3456,491,3456,493,3456,495,3456,497,3456,499,3456,501,3456,503,3456,505,3456,507,3456,509,3456,511,3456,513,3456,515,3456,517,3456,519,3456,521,7325,25,7325,27,7325,29,7325,31,7325,33,7325,35,7325,37,7325,39,7325,41,7325,43,7325,45,7325,47,7325,48,7325,49,7325,50,7325,51,7325,53,7325,55,7325,57,7325,59,7325,61,7325,63,7325,65,7325,67,7325,69,7325,71,7325,73,7325,75,7325,77,7325,79,7325,81,7325,83,7325,85,7325,87,7325,89,7325,91,7325,93,7325,95,7325,97,7325,99,7325,101,7325,103,7325,105,7325,107,7325,109,7325,111,7325,113,7325,115,7325,117,7325,119,7325,121,7325,123,7325,125,7325,127,7325,129,7325,131,7325,133,7325,135,7325,137,7325,139,7325,141,7325,143,7325,145,7325,147,7325,149,7325,151,7325,153,7325,155,7325,157,7325,159,7325,160,7325,162,7325,164,7325,166,7325,168,7325,170,7325,172,7325,174,7325,176,7325,178,7325,180,7325,182,7325,184,7325,186,7325,188,7325,190,7325,192,7325,194,7325,196,7325,198,7325,200,7325,202,7325,204,7325,206,7325,208,7325,210,7325,212,7325,214,7325,216,7325,218,7325,220,7325,222,7325,224,7325,226,7325,228,7325,230,7325,232,7325,234,7325,236,7325,238,7325,240,7325,242,7325,244,7325,246,7325,248,7325,250,7325,252,7325,254,7325,256,7325,258,7325,260,7325,262,7325,264,7325,266,7325,268,7325,270,7325,272,7325,274,7325,276,7325,278,7325,280,7325,282,7325,284,7325,286,7325,288,7325,290,7325,292,7325,294,7325,296,7325,298,7325,300,7325,302,7325,304,7325,306,7325,308,7325,310,7325,312,7325,314,7325,316,7325,318,7325,320,7325,322,7325,324,7325,326,7325,328,7325,330,7325,332,7325,334,7325,336,7325,338,7325,340,7325,342,7325,344,7325,346,7325,348,7325,350,7325,352,7325,354,7325,356,7325,358,7325,360,7325,362,7325,364,7325,366,7325,368,7325,370,7325,372,7325,374,7325,376,7325,378,7325,380,7325,382,7325,384,7325,386,7325,388,7325,390,7325,392,7325,394,7325,396,7325,398,7325,400,7325,402,7325,404,7325,406,7325,408,7325,410,7325,412,7325,414,7325,416,7325,418,7325,420,7325,422,7325,424,7325,426,7325,428,7325,430,7325,432,7325,434,7325,436,7325,438,7325,440,7325,442,7325,444,7325,446,7325,448,7325,450,7325,451,7325,452,7325,453,7325,454,7325,455,7325,457,7325,459,7325,461,7325,463,7325,464,7325,466,7325,467,7325,469,7325,471,7325,473,7325,475,7325,477,7325,479,7325,481,7325,483,7325,485,7325,487,7325,489,7325,491,7325,493,7325,495,7325,497,7325,499,7325,501,7325,503,7325,505,7325,507,7325,509,7325,511,7325,513,7325,515,7325,517,7325,519,7326,25,7326,27,7326,29,7326,31,7326,33,7326,35,7326,37,7326,39,7326,41,7326,43,7326,45,7326,47,7326,48,7326,49,7326,50,7326,51,7326,53,7326,55,7326,57,7326,59,7326,61,7326,63,7326,65,7326,67,7326,69,7326,71,7326,73,7326,75,7326,77,7326,79,7326,81,7326,83,7326,85,7326,87,7326,89,7326,91,7326,93,7326,95,7326,97,7326,99,7326,101,7326,103,7326,105,7326,107,7326,109,7326,111,7326,113,7326,115,7326,117,7326,119,7326,121,7326,123,7326,125,7326,127,7326,129,7326,131,7326,133,7326,135,7326,137,7326,139,7326,141,7326,143,7326,145,7326,147,7326,149,7326,151,7326,153,7326,155,7326,157,7326,159,7326,160,7326,162,7326,164,7326,166,7326,168,7326,170,7326,172,7326,174,7326,176,7326,178,7326,180,7326,182,7326,184,7326,186,7326,188,7326,190,7326,192,7326,194,7326,196,7326,198,7326,200,7326,202,7326,204,7326,206,7326,208,7326,210,7326,212,7326,214,7326,216,7326,218,7326,220,7326,222,7326,224,7326,226,7326,228,7326,230,7326,232,7326,234,7326,236,7326,238,7326,240,7326,242,7326,244,7326,246,7326,248,7326,250,7326,252,7326,254,7326,256,7326,258,7326,260,7326,262,7326,264,7326,266,7326,268,7326,270,7326,272,7326,274,7326,276,7326,278,7326,280,7326,282,7326,284,7326,286,7326,288,7326,290,7326,292,7326,294,7326,296,7326,298,7326,300,7326,302,7326,304,7326,306,7326,308,7326,310,7326,312,7326,314,7326,316,7326,318,7326,320,7326,322,7326,324,7326,326,7326,328,7326,330,7326,332,7326,334,7326,336,7326,338,7326,340,7326,342,7326,344,7326,346,7326,348,7326,350,7326,352,7326,354,7326,356,7326,358,7326,360,7326,362,7326,364,7326,366,7326,368,7326,370,7326,372,7326,374,7326,376,7326,378,7326,380,7326,382,7326,384,7326,386,7326,388,7326,390,7326,392,7326,394,7326,396,7326,398,7326,400,7326,402,7326,404,7326,406,7326,408,7326,410,7326,412,7326,414,7326,416,7326,418,7326,420,7326,422,7326,424,7326,426,7326,428,7326,430,7326,432,7326,434,7326,436,7326,438,7326,440,7326,442,7326,444,7326,446,7326,448,7326,454,7326,455,7326,457,7326,459,7326,461,7326,464,7326,466,7326,467,7326,469,7326,471,7326,473,7326,475,7326,477,7326,479,7326,481,7326,483,7326,485,7326,487,7326,489,7326,491,7326,493,7326,495,7326,497,7326,499,7326,501,7326,503,7326,505,7326,507,7326,509,7326,511,7326,513,7326,515,7326,517,7326,519,7326,521,7327,25,7327,27,7327,29,7327,31,7327,33,7327,35,7327,37,7327,39,7327,41,7327,43,7327,45,7327,47,7327,48,7327,49,7327,50,7327,51,7327,53,7327,55,7327,57,7327,59,7327,61,7327,63,7327,65,7327,67,7327,69,7327,71,7327,73,7327,75,7327,77,7327,79,7327,81,7327,83,7327,85,7327,87,7327,89,7327,91,7327,93,7327,95,7327,97,7327,99,7327,101,7327,103,7327,105,7327,107,7327,109,7327,111,7327,113,7327,115,7327,117,7327,119,7327,121,7327,123,7327,125,7327,127,7327,129,7327,131,7327,133,7327,135,7327,137,7327,139,7327,141,7327,143,7327,145,7327,147,7327,149,7327,151,7327,153,7327,155,7327,157,7327,159,7327,160,7327,162,7327,164,7327,166,7327,168,7327,170,7327,172,7327,174,7327,176,7327,178,7327,180,7327,182,7327,184,7327,186,7327,188,7327,190,7327,192,7327,194,7327,196,7327,198,7327,200,7327,202,7327,204,7327,206,7327,208,7327,210,7327,212,7327,214,7327,216,7327,218,7327,220,7327,222,7327,224,7327,226,7327,228,7327,230,7327,232,7327,234,7327,236,7327,238,7327,240,7327,242,7327,244,7327,246,7327,248,7327,250,7327,252,7327,254,7327,256,7327,258,7327,260,7327,262,7327,264,7327,266,7327,268,7327,270,7327,272,7327,274,7327,276,7327,278,7327,280,7327,282,7327,284,7327,286,7327,288,7327,290,7327,292,7327,294,7327,296,7327,298,7327,300,7327,302,7327,304,7327,306,7327,308,7327,310,7327,312,7327,314,7327,316,7327,318,7327,320,7327,322,7327,324,7327,326,7327,328,7327,330,7327,332,7327,334,7327,336,7327,338,7327,340,7327,342,7327,344,7327,346,7327,348,7327,350,7327,352,7327,354,7327,356,7327,358,7327,360,7327,362,7327,364,7327,366,7327,368,7327,370,7327,372,7327,374,7327,376,7327,378,7327,380,7327,382,7327,384,7327,386,7327,388,7327,390,7327,392,7327,394,7327,396,7327,398,7327,400,7327,402,7327,404,7327,406,7327,408,7327,410,7327,412,7327,414,7327,416,7327,418,7327,420,7327,422,7327,424,7327,426,7327,428,7327,430,7327,432,7327,434,7327,436,7327,438,7327,440,7327,442,7327,444,7327,446,7327,448,7327,454,7327,455,7327,457,7327,459,7327,461,7327,464,7327,466,7327,467,7327,469,7327,471,7327,473,7327,475,7327,477,7327,479,7327,481,7327,483,7327,485,7327,487,7327,489,7327,491,7327,493,7327,495,7327,497,7327,499,7327,501,7327,503,7327,505,7327,507,7327,509,7327,511,7327,513,7327,515,7327,517,7327,519,7327,521,7328,25,7328,27,7328,29,7328,31,7328,33,7328,35,7328,37,7328,39,7328,41,7328,43,7328,45,7328,47,7328,48,7328,49,7328,50,7328,51,7328,53,7328,55,7328,57,7328,59,7328,61,7328,63,7328,65,7328,67,7328,69,7328,71,7328,73,7328,75,7328,77,7328,79,7328,81,7328,83,7328,85,7328,87,7328,89,7328,91,7328,93,7328,95,7328,97,7328,99,7328,101,7328,103,7328,105,7328,107,7328,109,7328,111,7328,113,7328,115,7328,117,7328,119,7328,121,7328,123,7328,125,7328,127,7328,129,7328,131,7328,133,7328,135,7328,137,7328,139,7328,141,7328,143,7328,145,7328,147,7328,149,7328,151,7328,153,7328,155,7328,157,7328,159,7328,160,7328,162,7328,164,7328,166,7328,168,7328,170,7328,172,7328,174,7328,176,7328,178,7328,180,7328,182,7328,184,7328,186,7328,188,7328,190,7328,192,7328,194,7328,196,7328,198,7328,200,7328,202,7328,204,7328,206,7328,208,7328,210,7328,212,7328,214,7328,216,7328,218,7328,220,7328,222,7328,224,7328,226,7328,228,7328,230,7328,232,7328,234,7328,236,7328,238,7328,240,7328,242,7328,244,7328,246,7328,248,7328,250,7328,252,7328,254,7328,256,7328,258,7328,260,7328,262,7328,264,7328,266,7328,268,7328,270,7328,272,7328,274,7328,276,7328,278,7328,280,7328,282,7328,284,7328,286,7328,288,7328,290,7328,292,7328,294,7328,296,7328,298,7328,300,7328,302,7328,304,7328,306,7328,308,7328,310,7328,312,7328,314,7328,316,7328,318,7328,320,7328,322,7328,324,7328,326,7328,328,7328,330,7328,332,7328,334,7328,336,7328,338,7328,340,7328,342,7328,344,7328,346,7328,348,7328,350,7328,352,7328,354,7328,356,7328,358,7328,360,7328,362,7328,364,7328,366,7328,368,7328,370,7328,372,7328,374,7328,376,7328,378,7328,380,7328,382,7328,384,7328,386,7328,388,7328,390,7328,392,7328,394,7328,396,7328,398,7328,400,7328,402,7328,404,7328,406,7328,408,7328,410,7328,412,7328,414,7328,416,7328,418,7328,420,7328,422,7328,424,7328,426,7328,428,7328,430,7328,432,7328,434,7328,436,7328,438,7328,440,7328,442,7328,444,7328,446,7328,448,7328,454,7328,455,7328,457,7328,459,7328,461,7328,464,7328,466,7328,467,7328,469,7328,471,7328,473,7328,475,7328,477,7328,479,7328,481,7328,483,7328,485,7328,487,7328,489,7328,491,7328,493,7328,495,7328,497,7328,499,7328,501,7328,503,7328,505,7328,507,7328,509,7328,511,7328,513,7328,515,7328,517,7328,519,7328,521,7329,25,7329,27,7329,29,7329,31,7329,33,7329,35,7329,37,7329,39,7329,41,7329,43,7329,45,7329,47,7329,48,7329,49,7329,50,7329,51,7329,53,7329,55,7329,57,7329,59,7329,61,7329,63,7329,65,7329,67,7329,69,7329,71,7329,73,7329,75,7329,77,7329,79,7329,81,7329,83,7329,85,7329,87,7329,89,7329,91,7329,93,7329,95,7329,97,7329,99,7329,101,7329,103,7329,105,7329,107,7329,109,7329,111,7329,113,7329,115,7329,117,7329,119,7329,121,7329,123,7329,125,7329,127,7329,129,7329,131,7329,133,7329,135,7329,137,7329,139,7329,141,7329,143,7329,145,7329,147,7329,149,7329,151,7329,153,7329,155,7329,157,7329,159,7329,160,7329,162,7329,164,7329,166,7329,168,7329,170,7329,172,7329,174,7329,176,7329,178,7329,180,7329,182,7329,184,7329,186,7329,188,7329,190,7329,192,7329,194,7329,196,7329,198,7329,200,7329,202,7329,204,7329,206,7329,208,7329,210,7329,212,7329,214,7329,216,7329,218,7329,220,7329,222,7329,224,7329,226,7329,228,7329,230,7329,232,7329,234,7329,236,7329,238,7329,240,7329,242,7329,244,7329,246,7329,248,7329,250,7329,252,7329,254,7329,256,7329,258,7329,260,7329,262,7329,264,7329,266,7329,268,7329,270,7329,272,7329,274,7329,276,7329,278,7329,280,7329,282,7329,284,7329,286,7329,288,7329,290,7329,292,7329,294,7329,296,7329,298,7329,300,7329,302,7329,304,7329,306,7329,308,7329,310,7329,312,7329,314,7329,316,7329,318,7329,320,7329,322,7329,324,7329,326,7329,328,7329,330,7329,332,7329,334,7329,336,7329,338,7329,340,7329,342,7329,344,7329,346,7329,348,7329,350,7329,352,7329,354,7329,356,7329,358,7329,360,7329,362,7329,364,7329,366,7329,368,7329,370,7329,372,7329,374,7329,376,7329,378,7329,380,7329,382,7329,384,7329,386,7329,388,7329,390,7329,392,7329,394,7329,396,7329,398,7329,400,7329,402,7329,404,7329,406,7329,408,7329,410,7329,412,7329,414,7329,416,7329,418,7329,420,7329,422,7329,424,7329,426,7329,428,7329,430,7329,432,7329,434,7329,436,7329,438,7329,440,7329,442,7329,444,7329,446,7329,448,7329,454,7329,455,7329,457,7329,459,7329,461,7329,464,7329,466,7329,467,7329,469,7329,471,7329,473,7329,475,7329,477,7329,479,7329,481,7329,483,7329,485,7329,487,7329,489,7329,491,7329,493,7329,495,7329,497,7329,499,7329,501,7329,503,7329,505,7329,507,7329,509,7329,511,7329,513,7329,515,7329,517,7329,519,7329,521,7330,25,7330,27,7330,29,7330,31,7330,33,7330,35,7330,37,7330,39,7330,41,7330,43,7330,45,7330,47,7330,48,7330,49,7330,50,7330,51,7330,53,7330,55,7330,57,7330,59,7330,61,7330,63,7330,65,7330,67,7330,69,7330,71,7330,73,7330,75,7330,77,7330,79,7330,81,7330,83,7330,85,7330,87,7330,89,7330,91,7330,93,7330,95,7330,97,7330,99,7330,101,7330,103,7330,105,7330,107,7330,109,7330,111,7330,113,7330,115,7330,117,7330,119,7330,121,7330,123,7330,125,7330,127,7330,129,7330,131,7330,133,7330,135,7330,137,7330,139,7330,141,7330,143,7330,145,7330,147,7330,149,7330,151,7330,153,7330,155,7330,157,7330,159,7330,160,7330,162,7330,164,7330,166,7330,168,7330,170,7330,172,7330,174,7330,176,7330,178,7330,180,7330,182,7330,184,7330,186,7330,188,7330,190,7330,192,7330,194,7330,196,7330,198,7330,200,7330,202,7330,204,7330,206,7330,208,7330,210,7330,212,7330,214,7330,216,7330,218,7330,220,7330,222,7330,224,7330,226,7330,228,7330,230,7330,232,7330,234,7330,236,7330,238,7330,240,7330,242,7330,244,7330,246,7330,248,7330,250,7330,252,7330,254,7330,256,7330,258,7330,260,7330,262,7330,264,7330,266,7330,268,7330,270,7330,272,7330,274,7330,276,7330,278,7330,280,7330,282,7330,284,7330,286,7330,288,7330,290,7330,292,7330,294,7330,296,7330,298,7330,300,7330,302,7330,304,7330,306,7330,308,7330,310,7330,312,7330,314,7330,316,7330,318,7330,320,7330,322,7330,324,7330,326,7330,328,7330,330,7330,332,7330,334,7330,336,7330,338,7330,340,7330,342,7330,344,7330,346,7330,348,7330,350,7330,352,7330,354,7330,356,7330,358,7330,360,7330,362,7330,364,7330,366,7330,368,7330,370,7330,372,7330,374,7330,376,7330,378,7330,380,7330,382,7330,384,7330,386,7330,388,7330,390,7330,392,7330,394,7330,396,7330,398,7330,400,7330,402,7330,404,7330,406,7330,408,7330,410,7330,412,7330,414,7330,416,7330,418,7330,420,7330,422,7330,424,7330,426,7330,428,7330,430,7330,432,7330,434,7330,436,7330,438,7330,440,7330,442,7330,444,7330,446,7330,448,7330,454,7330,455,7330,457,7330,459,7330,461,7330,464,7330,466,7330,467,7330,469,7330,471,7330,473,7330,475,7330,477,7330,479,7330,481,7330,483,7330,485,7330,487,7330,489,7330,491,7330,493,7330,495,7330,497,7330,499,7330,501,7330,503,7330,505,7330,507,7330,509,7330,511,7330,513,7330,515,7330,517,7330,519,7330,521,7331,25,7331,27,7331,29,7331,31,7331,33,7331,35,7331,37,7331,39,7331,41,7331,43,7331,45,7331,47,7331,48,7331,49,7331,50,7331,51,7331,53,7331,55,7331,57,7331,59,7331,61,7331,63,7331,65,7331,67,7331,69,7331,71,7331,73,7331,75,7331,77,7331,79,7331,81,7331,83,7331,85,7331,87,7331,89,7331,91,7331,93,7331,95,7331,97,7331,99,7331,101,7331,103,7331,105,7331,107,7331,109,7331,111,7331,113,7331,115,7331,117,7331,119,7331,121,7331,123,7331,125,7331,127,7331,129,7331,131,7331,133,7331,135,7331,137,7331,139,7331,141,7331,143,7331,145,7331,147,7331,149,7331,151,7331,153,7331,155,7331,157,7331,159,7331,160,7331,162,7331,164,7331,166,7331,168,7331,170,7331,172,7331,174,7331,176,7331,178,7331,180,7331,182,7331,184,7331,186,7331,188,7331,190,7331,192,7331,194,7331,196,7331,198,7331,200,7331,202,7331,204,7331,206,7331,208,7331,210,7331,212,7331,214,7331,216,7331,218,7331,220,7331,222,7331,224,7331,226,7331,228,7331,230,7331,232,7331,234,7331,236,7331,238,7331,240,7331,242,7331,244,7331,246,7331,248,7331,250,7331,252,7331,254,7331,256,7331,258,7331,260,7331,262,7331,264,7331,266,7331,268,7331,270,7331,272,7331,274,7331,276,7331,278,7331,280,7331,282,7331,284,7331,286,7331,288,7331,290,7331,292,7331,294,7331,296,7331,298,7331,300,7331,302,7331,304,7331,306,7331,308,7331,310,7331,312,7331,314,7331,316,7331,318,7331,320,7331,322,7331,324,7331,326,7331,328,7331,330,7331,332,7331,334,7331,336,7331,338,7331,340,7331,342,7331,344,7331,346,7331,348,7331,350,7331,352,7331,354,7331,356,7331,358,7331,360,7331,362,7331,364,7331,366,7331,368,7331,370,7331,372,7331,374,7331,376,7331,378,7331,380,7331,382,7331,384,7331,386,7331,388,7331,390,7331,392,7331,394,7331,396,7331,398,7331,400,7331,402,7331,404,7331,406,7331,408,7331,410,7331,412,7331,414,7331,416,7331,418,7331,420,7331,422,7331,424,7331,426,7331,428,7331,430,7331,432,7331,434,7331,436,7331,438,7331,440,7331,442,7331,444,7331,446,7331,448,7331,454,7331,455,7331,457,7331,459,7331,461,7331,464,7331,466,7331,467,7331,469,7331,471,7331,473,7331,475,7331,477,7331,479,7331,481,7331,483,7331,485,7331,487,7331,489,7331,491,7331,493,7331,495,7331,497,7331,499,7331,501,7331,503,7331,505,7331,507,7331,509,7331,511,7331,513,7331,515,7331,517,7331,519,7331,521,7332,25,7332,27,7332,29,7332,31,7332,33,7332,35,7332,37,7332,39,7332,41,7332,43,7332,45,7332,47,7332,48,7332,49,7332,50,7332,51,7332,53,7332,55,7332,57,7332,59,7332,61,7332,63,7332,65,7332,67,7332,69,7332,71,7332,73,7332,75,7332,77,7332,79,7332,81,7332,83,7332,85,7332,87,7332,89,7332,91,7332,93,7332,95,7332,97,7332,99,7332,101,7332,103,7332,105,7332,107,7332,109,7332,111,7332,113,7332,115,7332,117,7332,119,7332,121,7332,123,7332,125,7332,127,7332,129,7332,131,7332,133,7332,135,7332,137,7332,139,7332,141,7332,143,7332,145,7332,147,7332,149,7332,151,7332,153,7332,155,7332,157,7332,159,7332,160,7332,162,7332,164,7332,166,7332,168,7332,170,7332,172,7332,174,7332,176,7332,178,7332,180,7332,182,7332,184,7332,186,7332,188,7332,190,7332,192,7332,194,7332,196,7332,198,7332,200,7332,202,7332,204,7332,206,7332,208,7332,210,7332,212,7332,214,7332,216,7332,218,7332,220,7332,222,7332,224,7332,226,7332,228,7332,230,7332,232,7332,234,7332,236,7332,238,7332,240,7332,242,7332,244,7332,246,7332,248,7332,250,7332,252,7332,254,7332,256,7332,258,7332,260,7332,262,7332,264,7332,266,7332,268,7332,270,7332,272,7332,274,7332,276,7332,278,7332,280,7332,282,7332,284,7332,286,7332,288,7332,290,7332,292,7332,294,7332,296,7332,298,7332,300,7332,302,7332,304,7332,306,7332,308,7332,310,7332,312,7332,314,7332,316,7332,318,7332,320,7332,322,7332,324,7332,326,7332,328,7332,330,7332,332,7332,334,7332,336,7332,338,7332,340,7332,342,7332,344,7332,346,7332,348,7332,350,7332,352,7332,354,7332,356,7332,358,7332,360,7332,362,7332,364,7332,366,7332,368,7332,370,7332,372,7332,374,7332,376,7332,378,7332,380,7332,382,7332,384,7332,386,7332,388,7332,390,7332,392,7332,394,7332,396,7332,398,7332,400,7332,402,7332,404,7332,406,7332,408,7332,410,7332,412,7332,414,7332,416,7332,418,7332,420,7332,422,7332,424,7332,426,7332,428,7332,430,7332,432,7332,434,7332,436,7332,438,7332,440,7332,442,7332,444,7332,446,7332,448,7332,454,7332,455,7332,457,7332,459,7332,461,7332,464,7332,466,7332,467,7332,469,7332,471,7332,473,7332,475,7332,477,7332,479,7332,481,7332,483,7332,485,7332,487,7332,489,7332,491,7332,493,7332,495,7332,497,7332,499,7332,501,7332,503,7332,505,7332,507,7332,509,7332,511,7332,513,7332,515,7332,517,7332,519,7332,521,7333,25,7333,27,7333,29,7333,31,7333,33,7333,35,7333,37,7333,39,7333,41,7333,43,7333,45,7333,47,7333,48,7333,49,7333,50,7333,51,7333,53,7333,55,7333,57,7333,59,7333,61,7333,63,7333,65,7333,67,7333,69,7333,71,7333,73,7333,75,7333,77,7333,79,7333,81,7333,83,7333,85,7333,87,7333,89,7333,91,7333,93,7333,95,7333,97,7333,99,7333,101,7333,103,7333,105,7333,107,7333,109,7333,111,7333,113,7333,115,7333,117,7333,119,7333,121,7333,123,7333,125,7333,127,7333,129,7333,131,7333,133,7333,135,7333,137,7333,139,7333,141,7333,143,7333,145,7333,147,7333,149,7333,151,7333,153,7333,155,7333,157,7333,159,7333,160,7333,162,7333,164,7333,166,7333,168,7333,170,7333,172,7333,174,7333,176,7333,178,7333,180,7333,182,7333,184,7333,186,7333,188,7333,190,7333,192,7333,194,7333,196,7333,198,7333,200,7333,202,7333,204,7333,206,7333,208,7333,210,7333,212,7333,214,7333,216,7333,218,7333,220,7333,222,7333,224,7333,226,7333,228,7333,230,7333,232,7333,234,7333,236,7333,238,7333,240,7333,242,7333,244,7333,246,7333,248,7333,250,7333,252,7333,254,7333,256,7333,258,7333,260,7333,262,7333,264,7333,266,7333,268,7333,270,7333,272,7333,274,7333,276,7333,278,7333,280,7333,282,7333,284,7333,286,7333,288,7333,290,7333,292,7333,294,7333,296,7333,298,7333,300,7333,302,7333,304,7333,306,7333,308,7333,310,7333,312,7333,314,7333,316,7333,318,7333,320,7333,322,7333,324,7333,326,7333,328,7333,330,7333,332,7333,334,7333,336,7333,338,7333,340,7333,342,7333,344,7333,346,7333,348,7333,350,7333,352,7333,354,7333,356,7333,358,7333,360,7333,362,7333,364,7333,366,7333,368,7333,370,7333,372,7333,374,7333,376,7333,378,7333,380,7333,382,7333,384,7333,386,7333,388,7333,390,7333,392,7333,394,7333,396,7333,398,7333,400,7333,402,7333,404,7333,406,7333,408,7333,410,7333,412,7333,414,7333,416,7333,418,7333,420,7333,422,7333,424,7333,426,7333,428,7333,430,7333,432,7333,434,7333,436,7333,438,7333,440,7333,442,7333,444,7333,446,7333,448,7333,454,7333,455,7333,457,7333,459,7333,461,7333,464,7333,466,7333,467,7333,469,7333,471,7333,473,7333,475,7333,477,7333,479,7333,481,7333,483,7333,485,7333,487,7333,489,7333,491,7333,493,7333,495,7333,497,7333,499,7333,501,7333,503,7333,505,7333,507,7333,509,7333,511,7333,513,7333,515,7333,517,7333,519,7333,521,7334,25,7334,27,7334,29,7334,31,7334,33,7334,35,7334,37,7334,39,7334,41,7334,43,7334,45,7334,47,7334,48,7334,49,7334,50,7334,51,7334,53,7334,55,7334,57,7334,59,7334,61,7334,63,7334,65,7334,67,7334,69,7334,71,7334,73,7334,75,7334,77,7334,79,7334,81,7334,83,7334,85,7334,87,7334,89,7334,91,7334,93,7334,95,7334,97,7334,99,7334,101,7334,103,7334,105,7334,107,7334,109,7334,111,7334,113,7334,115,7334,117,7334,119,7334,121,7334,123,7334,125,7334,127,7334,129,7334,131,7334,133,7334,135,7334,137,7334,139,7334,141,7334,143,7334,145,7334,147,7334,149,7334,151,7334,153,7334,155,7334,157,7334,159,7334,160,7334,162,7334,164,7334,166,7334,168,7334,170,7334,172,7334,174,7334,176,7334,178,7334,180,7334,182,7334,184,7334,186,7334,188,7334,190,7334,192,7334,194,7334,196,7334,198,7334,200,7334,202,7334,204,7334,206,7334,208,7334,210,7334,212,7334,214,7334,216,7334,218,7334,220,7334,222,7334,224,7334,226,7334,228,7334,230,7334,232,7334,234,7334,236,7334,238,7334,240,7334,242,7334,244,7334,246,7334,248,7334,250,7334,252,7334,254,7334,256,7334,258,7334,260,7334,262,7334,264,7334,266,7334,268,7334,270,7334,272,7334,274,7334,276,7334,278,7334,280,7334,282,7334,284,7334,286,7334,288,7334,290,7334,292,7334,294,7334,296,7334,298,7334,300,7334,302,7334,304,7334,306,7334,308,7334,310,7334,312,7334,314,7334,316,7334,318,7334,320,7334,322,7334,324,7334,326,7334,328,7334,330,7334,332,7334,334,7334,336,7334,338,7334,340,7334,342,7334,344,7334,346,7334,348,7334,350,7334,352,7334,354,7334,356,7334,358,7334,360,7334,362,7334,364,7334,366,7334,368,7334,370,7334,372,7334,374,7334,376,7334,378,7334,380,7334,382,7334,384,7334,386,7334,388,7334,390,7334,392,7334,394,7334,396,7334,398,7334,400,7334,402,7334,404,7334,406,7334,408,7334,410,7334,412,7334,414,7334,416,7334,418,7334,420,7334,422,7334,424,7334,426,7334,428,7334,430,7334,432,7334,434,7334,436,7334,438,7334,440,7334,442,7334,444,7334,446,7334,448,7334,454,7334,455,7334,457,7334,459,7334,461,7334,464,7334,466,7334,467,7334,469,7334,471,7334,473,7334,475,7334,477,7334,479,7334,481,7334,483,7334,485,7334,487,7334,489,7334,491,7334,493,7334,495,7334,497,7334,499,7334,501,7334,503,7334,505,7334,507,7334,509,7334,511,7334,513,7334,515,7334,517,7334,519,7334,521,7335,25,7335,27,7335,29,7335,31,7335,33,7335,35,7335,37,7335,39,7335,41,7335,43,7335,45,7335,47,7335,48,7335,49,7335,50,7335,51,7335,53,7335,55,7335,57,7335,59,7335,61,7335,63,7335,65,7335,67,7335,69,7335,71,7335,73,7335,75,7335,77,7335,79,7335,81,7335,83,7335,85,7335,87,7335,89,7335,91,7335,93,7335,95,7335,97,7335,99,7335,101,7335,103,7335,105,7335,107,7335,109,7335,111,7335,113,7335,115,7335,117,7335,119,7335,121,7335,123,7335,125,7335,127,7335,129,7335,131,7335,133,7335,135,7335,137,7335,139,7335,141,7335,143,7335,145,7335,147,7335,149,7335,151,7335,153,7335,155,7335,157,7335,159,7335,160,7335,162,7335,164,7335,166,7335,168,7335,170,7335,172,7335,174,7335,176,7335,178,7335,180,7335,182,7335,184,7335,186,7335,188,7335,190,7335,192,7335,194,7335,196,7335,198,7335,200,7335,202,7335,204,7335,206,7335,208,7335,210,7335,212,7335,214,7335,216,7335,218,7335,220,7335,222,7335,224,7335,226,7335,228,7335,230,7335,232,7335,234,7335,236,7335,238,7335,240,7335,242,7335,244,7335,246,7335,248,7335,250,7335,252,7335,254,7335,256,7335,258,7335,260,7335,262,7335,264,7335,266,7335,268,7335,270,7335,272,7335,274,7335,276,7335,278,7335,280,7335,282,7335,284,7335,286,7335,288,7335,290,7335,292,7335,294,7335,296,7335,298,7335,300,7335,302,7335,304,7335,306,7335,308,7335,310,7335,312,7335,314,7335,316,7335,318,7335,320,7335,322,7335,324,7335,326,7335,328,7335,330,7335,332,7335,334,7335,336,7335,338,7335,340,7335,342,7335,344,7335,346,7335,348,7335,350,7335,352,7335,354,7335,356,7335,358,7335,360,7335,362,7335,364,7335,366,7335,368,7335,370,7335,372,7335,374,7335,376,7335,378,7335,380,7335,382,7335,384,7335,386,7335,388,7335,390,7335,392,7335,394,7335,396,7335,398,7335,400,7335,402,7335,404,7335,406,7335,408,7335,410,7335,412,7335,414,7335,416,7335,418,7335,420,7335,422,7335,424,7335,426,7335,428,7335,430,7335,432,7335,434,7335,436,7335,438,7335,440,7335,442,7335,444,7335,446,7335,448,7335,454,7335,455,7335,457,7335,459,7335,461,7335,464,7335,466,7335,467,7335,469,7335,471,7335,473,7335,475,7335,477,7335,479,7335,481,7335,483,7335,485,7335,487,7335,489,7335,491,7335,493,7335,495,7335,497,7335,499,7335,501,7335,503,7335,505,7335,507,7335,509,7335,511,7335,513,7335,515,7335,517,7335,519,7335,521,7336,25,7336,27,7336,29,7336,31,7336,33,7336,35,7336,37,7336,39,7336,41,7336,43,7336,45,7336,47,7336,48,7336,49,7336,50,7336,51,7336,53,7336,55,7336,57,7336,59,7336,61,7336,63,7336,65,7336,67,7336,69,7336,71,7336,73,7336,75,7336,77,7336,79,7336,81,7336,83,7336,85,7336,87,7336,89,7336,91,7336,93,7336,95,7336,97,7336,99,7336,101,7336,103,7336,105,7336,107,7336,109,7336,111,7336,113,7336,115,7336,117,7336,119,7336,121,7336,123,7336,125,7336,127,7336,129,7336,131,7336,133,7336,135,7336,137,7336,139,7336,141,7336,143,7336,145,7336,147,7336,149,7336,151,7336,153,7336,155,7336,157,7336,159,7336,160,7336,162,7336,164,7336,166,7336,168,7336,170,7336,172,7336,174,7336,176,7336,178,7336,180,7336,182,7336,184,7336,186,7336,188,7336,190,7336,192,7336,194,7336,196,7336,198,7336,200,7336,202,7336,204,7336,206,7336,208,7336,210,7336,212,7336,214,7336,216,7336,218,7336,220,7336,222,7336,224,7336,226,7336,228,7336,230,7336,232,7336,234,7336,236,7336,238,7336,240,7336,242,7336,244,7336,246,7336,248,7336,250,7336,252,7336,254,7336,256,7336,258,7336,260,7336,262,7336,264,7336,266,7336,268,7336,270,7336,272,7336,274,7336,276,7336,278,7336,280,7336,282,7336,284,7336,286,7336,288,7336,290,7336,292,7336,294,7336,296,7336,298,7336,300,7336,302,7336,304,7336,306,7336,308,7336,310,7336,312,7336,314,7336,316,7336,318,7336,320,7336,322,7336,324,7336,326,7336,328,7336,330,7336,332,7336,334,7336,336,7336,338,7336,340,7336,342,7336,344,7336,346,7336,348,7336,350,7336,352,7336,354,7336,356,7336,358,7336,360,7336,362,7336,364,7336,366,7336,368,7336,370,7336,372,7336,374,7336,376,7336,378,7336,380,7336,382,7336,384,7336,386,7336,388,7336,390,7336,392,7336,394,7336,396,7336,398,7336,400,7336,402,7336,404,7336,406,7336,408,7336,410,7336,412,7336,414,7336,416,7336,418,7336,420,7336,422,7336,424,7336,426,7336,428,7336,430,7336,432,7336,434,7336,436,7336,438,7336,440,7336,442,7336,444,7336,446,7336,448,7336,454,7336,455,7336,457,7336,459,7336,461,7336,464,7336,466,7336,467,7336,469,7336,471,7336,473,7336,475,7336,477,7336,479,7336,481,7336,483,7336,485,7336,487,7336,489,7336,491,7336,493,7336,495,7336,497,7336,499,7336,501,7336,503,7336,505,7336,507,7336,509,7336,511,7336,513,7336,515,7336,517,7336,519,7336,521,7337,25,7337,27,7337,29,7337,31,7337,33,7337,35,7337,37,7337,39,7337,41,7337,43,7337,45,7337,47,7337,48,7337,49,7337,50,7337,51,7337,53,7337,55,7337,57,7337,59,7337,61,7337,63,7337,65,7337,67,7337,69,7337,71,7337,73,7337,75,7337,77,7337,79,7337,81,7337,83,7337,85,7337,87,7337,89,7337,91,7337,93,7337,95,7337,97,7337,99,7337,101,7337,103,7337,105,7337,107,7337,109,7337,111,7337,113,7337,115,7337,117,7337,119,7337,121,7337,123,7337,125,7337,127,7337,129,7337,131,7337,133,7337,135,7337,137,7337,139,7337,141,7337,143,7337,145,7337,147,7337,149,7337,151,7337,153,7337,155,7337,157,7337,159,7337,160,7337,162,7337,164,7337,166,7337,168,7337,170,7337,172,7337,174,7337,176,7337,178,7337,180,7337,182,7337,184,7337,186,7337,188,7337,190,7337,192,7337,194,7337,196,7337,198,7337,200,7337,202,7337,204,7337,206,7337,208,7337,210,7337,212,7337,214,7337,216,7337,218,7337,220,7337,222,7337,224,7337,226,7337,228,7337,230,7337,232,7337,234,7337,236,7337,238,7337,240,7337,242,7337,244,7337,246,7337,248,7337,250,7337,252,7337,254,7337,256,7337,258,7337,260,7337,262,7337,264,7337,266,7337,268,7337,270,7337,272,7337,274,7337,276,7337,278,7337,280,7337,282,7337,284,7337,286,7337,288,7337,290,7337,292,7337,294,7337,296,7337,298,7337,300,7337,302,7337,304,7337,306,7337,308,7337,310,7337,312,7337,314,7337,316,7337,318,7337,320,7337,322,7337,324,7337,326,7337,328,7337,330,7337,332,7337,334,7337,336,7337,338,7337,340,7337,342,7337,344,7337,346,7337,348,7337,350,7337,352,7337,354,7337,356,7337,358,7337,360,7337,362,7337,364,7337,366,7337,368,7337,370,7337,372,7337,374,7337,376,7337,378,7337,380,7337,382,7337,384,7337,386,7337,388,7337,390,7337,392,7337,394,7337,396,7337,398,7337,400,7337,402,7337,404,7337,406,7337,408,7337,410,7337,412,7337,414,7337,416,7337,418,7337,420,7337,422,7337,424,7337,426,7337,428,7337,430,7337,432,7337,434,7337,436,7337,438,7337,440,7337,442,7337,444,7337,446,7337,448,7337,454,7337,455,7337,457,7337,459,7337,461,7337,464,7337,466,7337,467,7337,469,7337,471,7337,473,7337,475,7337,477,7337,479,7337,481,7337,483,7337,485,7337,487,7337,489,7337,491,7337,493,7337,495,7337,497,7337,499,7337,501,7337,503,7337,505,7337,507,7337,509,7337,511,7337,513,7337,515,7337,517,7337,519,7337,521,7338,25,7338,27,7338,29,7338,31,7338,33,7338,35,7338,37,7338,39,7338,41,7338,43,7338,45,7338,47,7338,48,7338,49,7338,50,7338,51,7338,53,7338,55,7338,57,7338,59,7338,61,7338,63,7338,65,7338,67,7338,69,7338,71,7338,73,7338,75,7338,77,7338,79,7338,81,7338,83,7338,85,7338,87,7338,89,7338,91,7338,93,7338,95,7338,97,7338,99,7338,101,7338,103,7338,105,7338,107,7338,109,7338,111,7338,113,7338,115,7338,117,7338,119,7338,121,7338,123,7338,125,7338,127,7338,129,7338,131,7338,133,7338,135,7338,137,7338,139,7338,141,7338,143,7338,145,7338,147,7338,149,7338,151,7338,153,7338,155,7338,157,7338,159,7338,160,7338,162,7338,164,7338,166,7338,168,7338,170,7338,172,7338,174,7338,176,7338,178,7338,180,7338,182,7338,184,7338,186,7338,188,7338,190,7338,192,7338,194,7338,196,7338,198,7338,200,7338,202,7338,204,7338,206,7338,208,7338,210,7338,212,7338,214,7338,216,7338,218,7338,220,7338,222,7338,224,7338,226,7338,228,7338,230,7338,232,7338,234,7338,236,7338,238,7338,240,7338,242,7338,244,7338,246,7338,248,7338,250,7338,252,7338,254,7338,256,7338,258,7338,260,7338,262,7338,264,7338,266,7338,268,7338,270,7338,272,7338,274,7338,276,7338,278,7338,280,7338,282,7338,284,7338,286,7338,288,7338,290,7338,292,7338,294,7338,296,7338,298,7338,300,7338,302,7338,304,7338,306,7338,308,7338,310,7338,312,7338,314,7338,316,7338,318,7338,320,7338,322,7338,324,7338,326,7338,328,7338,330,7338,332,7338,334,7338,336,7338,338,7338,340,7338,342,7338,344,7338,346,7338,348,7338,350,7338,352,7338,354,7338,356,7338,358,7338,360,7338,362,7338,364,7338,366,7338,368,7338,370,7338,372,7338,374,7338,376,7338,378,7338,380,7338,382,7338,384,7338,386,7338,388,7338,390,7338,392,7338,394,7338,396,7338,398,7338,400,7338,402,7338,404,7338,406,7338,408,7338,410,7338,412,7338,414,7338,416,7338,418,7338,420,7338,422,7338,424,7338,426,7338,428,7338,430,7338,432,7338,434,7338,436,7338,438,7338,440,7338,442,7338,444,7338,446,7338,448,7338,454,7338,455,7338,457,7338,459,7338,461,7338,464,7338,466,7338,467,7338,469,7338,471,7338,473,7338,475,7338,477,7338,479,7338,481,7338,483,7338,485,7338,487,7338,489,7338,491,7338,493,7338,495,7338,497,7338,499,7338,501,7338,503,7338,505,7338,507,7338,509,7338,511,7338,513,7338,515,7338,517,7338,519,7338,521,7339,25,7339,27,7339,29,7339,31,7339,33,7339,35,7339,37,7339,39,7339,41,7339,43,7339,45,7339,47,7339,48,7339,49,7339,50,7339,51,7339,53,7339,55,7339,57,7339,59,7339,61,7339,63,7339,65,7339,67,7339,69,7339,71,7339,73,7339,75,7339,77,7339,79,7339,81,7339,83,7339,85,7339,87,7339,89,7339,91,7339,93,7339,95,7339,97,7339,99,7339,101,7339,103,7339,105,7339,107,7339,109,7339,111,7339,113,7339,115,7339,117,7339,119,7339,121,7339,123,7339,125,7339,127,7339,129,7339,131,7339,133,7339,135,7339,137,7339,139,7339,141,7339,143,7339,145,7339,147,7339,149,7339,151,7339,153,7339,155,7339,157,7339,159,7339,160,7339,162,7339,164,7339,166,7339,168,7339,170,7339,172,7339,174,7339,176,7339,178,7339,180,7339,182,7339,184,7339,186,7339,188,7339,190,7339,192,7339,194,7339,196,7339,198,7339,200,7339,202,7339,204,7339,206,7339,208,7339,210,7339,212,7339,214,7339,216,7339,218,7339,220,7339,222,7339,224,7339,226,7339,228,7339,230,7339,232,7339,234,7339,236,7339,238,7339,240,7339,242,7339,244,7339,246,7339,248,7339,250,7339,252,7339,254,7339,256,7339,258,7339,260,7339,262,7339,264,7339,266,7339,268,7339,270,7339,272,7339,274,7339,276,7339,278,7339,280,7339,282,7339,284,7339,286,7339,288,7339,290,7339,292,7339,294,7339,296,7339,298,7339,300,7339,302,7339,304,7339,306,7339,308,7339,310,7339,312,7339,314,7339,316,7339,318,7339,320,7339,322,7339,324,7339,326,7339,328,7339,330,7339,332,7339,334,7339,336,7339,338,7339,340,7339,342,7339,344,7339,346,7339,348,7339,350,7339,352,7339,354,7339,356,7339,358,7339,360,7339,362,7339,364,7339,366,7339,368,7339,370,7339,372,7339,374,7339,376,7339,378,7339,380,7339,382,7339,384,7339,386,7339,388,7339,390,7339,392,7339,394,7339,396,7339,398,7339,400,7339,402,7339,404,7339,406,7339,408,7339,410,7339,412,7339,414,7339,416,7339,418,7339,420,7339,422,7339,424,7339,426,7339,428,7339,430,7339,432,7339,434,7339,436,7339,438,7339,440,7339,442,7339,444,7339,446,7339,448,7339,454,7339,455,7339,457,7339,459,7339,461,7339,464,7339,466,7339,467,7339,469,7339,471,7339,473,7339,475,7339,477,7339,479,7339,481,7339,483,7339,485,7339,487,7339,489,7339,491,7339,493,7339,495,7339,497,7339,499,7339,501,7339,503,7339,505,7339,507,7339,509,7339,511,7339,513,7339,515,7339,517,7339,519,7339,521,7340,25,7340,27,7340,29,7340,31,7340,33,7340,35,7340,37,7340,39,7340,41,7340,43,7340,45,7340,47,7340,48,7340,49,7340,50,7340,51,7340,53,7340,55,7340,57,7340,59,7340,61,7340,63,7340,65,7340,67,7340,69,7340,71,7340,73,7340,75,7340,77,7340,79,7340,81,7340,83,7340,85,7340,87,7340,89,7340,91,7340,93,7340,95,7340,97,7340,99,7340,101,7340,103,7340,105,7340,107,7340,109,7340,111,7340,113,7340,115,7340,117,7340,119,7340,121,7340,123,7340,125,7340,127,7340,129,7340,131,7340,133,7340,135,7340,137,7340,139,7340,141,7340,143,7340,145,7340,147,7340,149,7340,151,7340,153,7340,155,7340,157,7340,159,7340,160,7340,162,7340,164,7340,166,7340,168,7340,170,7340,172,7340,174,7340,176,7340,178,7340,180,7340,182,7340,184,7340,186,7340,188,7340,190,7340,192,7340,194,7340,196,7340,198,7340,200,7340,202,7340,204,7340,206,7340,208,7340,210,7340,212,7340,214,7340,216,7340,218,7340,220,7340,222,7340,224,7340,226,7340,228,7340,230,7340,232,7340,234,7340,236,7340,238,7340,240,7340,242,7340,244,7340,246,7340,248,7340,250,7340,252,7340,254,7340,256,7340,258,7340,260,7340,262,7340,264,7340,266,7340,268,7340,270,7340,272,7340,274,7340,276,7340,278,7340,280,7340,282,7340,284,7340,286,7340,288,7340,290,7340,292,7340,294,7340,296,7340,298,7340,300,7340,302,7340,304,7340,306,7340,308,7340,310,7340,312,7340,314,7340,316,7340,318,7340,320,7340,322,7340,324,7340,326,7340,328,7340,330,7340,332,7340,334,7340,336,7340,338,7340,340,7340,342,7340,344,7340,346,7340,348,7340,350,7340,352,7340,354,7340,356,7340,358,7340,360,7340,362,7340,364,7340,366,7340,368,7340,370,7340,372,7340,374,7340,376,7340,378,7340,380,7340,382,7340,384,7340,386,7340,388,7340,390,7340,392,7340,394,7340,396,7340,398,7340,400,7340,402,7340,404,7340,406,7340,408,7340,410,7340,412,7340,414,7340,416,7340,418,7340,420,7340,422,7340,424,7340,426,7340,428,7340,430,7340,432,7340,434,7340,436,7340,438,7340,440,7340,442,7340,444,7340,446,7340,448,7340,454,7340,455,7340,457,7340,459,7340,461,7340,464,7340,466,7340,467,7340,469,7340,471,7340,473,7340,475,7340,477,7340,479,7340,481,7340,483,7340,485,7340,487,7340,489,7340,491,7340,493,7340,495,7340,497,7340,499,7340,501,7340,503,7340,505,7340,507,7340,509,7340,511,7340,513,7340,515,7340,517,7340,519,7340,521,7341,25,7341,27,7341,29,7341,31,7341,33,7341,35,7341,37,7341,39,7341,41,7341,43,7341,45,7341,47,7341,48,7341,49,7341,50,7341,51,7341,53,7341,55,7341,57,7341,59,7341,61,7341,63,7341,65,7341,67,7341,69,7341,71,7341,73,7341,75,7341,77,7341,79,7341,81,7341,83,7341,85,7341,87,7341,89,7341,91,7341,93,7341,95,7341,97,7341,99,7341,101,7341,103,7341,105,7341,107,7341,109,7341,111,7341,113,7341,115,7341,117,7341,119,7341,121,7341,123,7341,125,7341,127,7341,129,7341,131,7341,133,7341,135,7341,137,7341,139,7341,141,7341,143,7341,145,7341,147,7341,149,7341,151,7341,153,7341,155,7341,157,7341,159,7341,160,7341,162,7341,164,7341,166,7341,168,7341,170,7341,172,7341,174,7341,176,7341,178,7341,180,7341,182,7341,184,7341,186,7341,188,7341,190,7341,192,7341,194,7341,196,7341,198,7341,200,7341,202,7341,204,7341,206,7341,208,7341,210,7341,212,7341,214,7341,216,7341,218,7341,220,7341,222,7341,224,7341,226,7341,228,7341,230,7341,232,7341,234,7341,236,7341,238,7341,240,7341,242,7341,244,7341,246,7341,248,7341,250,7341,252,7341,254,7341,256,7341,258,7341,260,7341,262,7341,264,7341,266,7341,268,7341,270,7341,272,7341,274,7341,276,7341,278,7341,280,7341,282,7341,284,7341,286,7341,288,7341,290,7341,292,7341,294,7341,296,7341,298,7341,300,7341,302,7341,304,7341,306,7341,308,7341,310,7341,312,7341,314,7341,316,7341,318,7341,320,7341,322,7341,324,7341,326,7341,328,7341,330,7341,332,7341,334,7341,336,7341,338,7341,340,7341,342,7341,344,7341,346,7341,348,7341,350,7341,352,7341,354,7341,356,7341,358,7341,360,7341,362,7341,364,7341,366,7341,368,7341,370,7341,372,7341,374,7341,376,7341,378,7341,380,7341,382,7341,384,7341,386,7341,388,7341,390,7341,392,7341,394,7341,396,7341,398,7341,400,7341,402,7341,404,7341,406,7341,408,7341,410,7341,412,7341,414,7341,416,7341,418,7341,420,7341,422,7341,424,7341,426,7341,428,7341,430,7341,432,7341,434,7341,436,7341,438,7341,440,7341,442,7341,444,7341,446,7341,448,7341,454,7341,455,7341,457,7341,459,7341,461,7341,464,7341,466,7341,467,7341,469,7341,471,7341,473,7341,475,7341,477,7341,479,7341,481,7341,483,7341,485,7341,487,7341,489,7341,491,7341,493,7341,495,7341,497,7341,499,7341,501,7341,503,7341,505,7341,507,7341,509,7341,511,7341,513,7341,515,7341,517,7341,519,7341,521,7342,25,7342,27,7342,29,7342,31,7342,33,7342,35,7342,37,7342,39,7342,41,7342,43,7342,45,7342,47,7342,48,7342,49,7342,50,7342,51,7342,53,7342,55,7342,57,7342,59,7342,61,7342,63,7342,65,7342,67,7342,69,7342,71,7342,73,7342,75,7342,77,7342,79,7342,81,7342,83,7342,85,7342,87,7342,89,7342,91,7342,93,7342,95,7342,97,7342,99,7342,101,7342,103,7342,105,7342,107,7342,109,7342,111,7342,113,7342,115,7342,117,7342,119,7342,121,7342,123,7342,125,7342,127,7342,129,7342,131,7342,133,7342,135,7342,137,7342,139,7342,141,7342,143,7342,145,7342,147,7342,149,7342,151,7342,153,7342,155,7342,157,7342,159,7342,160,7342,162,7342,164,7342,166,7342,168,7342,170,7342,172,7342,174,7342,176,7342,178,7342,180,7342,182,7342,184,7342,186,7342,188,7342,190,7342,192,7342,194,7342,196,7342,198,7342,200,7342,202,7342,204,7342,206,7342,208,7342,210,7342,212,7342,214,7342,216,7342,218,7342,220,7342,222,7342,224,7342,226,7342,228,7342,230,7342,232,7342,234,7342,236,7342,238,7342,240,7342,242,7342,244,7342,246,7342,248,7342,250,7342,252,7342,254,7342,256,7342,258,7342,260,7342,262,7342,264,7342,266,7342,268,7342,270,7342,272,7342,274,7342,276,7342,278,7342,280,7342,282,7342,284,7342,286,7342,288,7342,290,7342,292,7342,294,7342,296,7342,298,7342,300,7342,302,7342,304,7342,306,7342,308,7342,310,7342,312,7342,314,7342,316,7342,318,7342,320,7342,322,7342,324,7342,326,7342,328,7342,330,7342,332,7342,334,7342,336,7342,338,7342,340,7342,342,7342,344,7342,346,7342,348,7342,350,7342,352,7342,354,7342,356,7342,358,7342,360,7342,362,7342,364,7342,366,7342,368,7342,370,7342,372,7342,374,7342,376,7342,378,7342,380,7342,382,7342,384,7342,386,7342,388,7342,390,7342,392,7342,394,7342,396,7342,398,7342,400,7342,402,7342,404,7342,406,7342,408,7342,410,7342,412,7342,414,7342,416,7342,418,7342,420,7342,422,7342,424,7342,426,7342,428,7342,430,7342,432,7342,434,7342,436,7342,438,7342,440,7342,442,7342,444,7342,446,7342,448,7342,450,7342,451,7342,452,7342,453,7342,454,7342,455,7342,457,7342,459,7342,461,7342,463,7342,464,7342,466,7342,467,7342,469,7342,471,7342,473,7342,475,7342,477,7342,479,7342,481,7342,483,7342,485,7342,487,7342,489,7342,491,7342,493,7342,495,7342,497,7342,499,7342,501,7342,503,7342,505,7342,507,7342,509,7342,511,7342,513,7342,515,7342,517,7342,519,7343,25,7343,27,7343,29,7343,31,7343,33,7343,35,7343,37,7343,39,7343,41,7343,43,7343,45,7343,47,7343,48,7343,49,7343,50,7343,51,7343,53,7343,55,7343,57,7343,59,7343,61,7343,63,7343,65,7343,67,7343,69,7343,71,7343,73,7343,75,7343,77,7343,79,7343,81,7343,83,7343,85,7343,87,7343,89,7343,91,7343,93,7343,95,7343,97,7343,99,7343,101,7343,103,7343,105,7343,107,7343,109,7343,111,7343,113,7343,115,7343,117,7343,119,7343,121,7343,123,7343,125,7343,127,7343,129,7343,131,7343,133,7343,135,7343,137,7343,139,7343,141,7343,143,7343,145,7343,147,7343,149,7343,151,7343,153,7343,155,7343,157,7343,159,7343,160,7343,162,7343,164,7343,166,7343,168,7343,170,7343,172,7343,174,7343,176,7343,178,7343,180,7343,182,7343,184,7343,186,7343,188,7343,190,7343,192,7343,194,7343,196,7343,198,7343,200,7343,202,7343,204,7343,206,7343,208,7343,210,7343,212,7343,214,7343,216,7343,218,7343,220,7343,222,7343,224,7343,226,7343,228,7343,230,7343,232,7343,234,7343,236,7343,238,7343,240,7343,242,7343,244,7343,246,7343,248,7343,250,7343,252,7343,254,7343,256,7343,258,7343,260,7343,262,7343,264,7343,266,7343,268,7343,270,7343,272,7343,274,7343,276,7343,278,7343,280,7343,282,7343,284,7343,286,7343,288,7343,290,7343,292,7343,294,7343,296,7343,298,7343,300,7343,302,7343,304,7343,306,7343,308,7343,310,7343,312,7343,314,7343,316,7343,318,7343,320,7343,322,7343,324,7343,326,7343,328,7343,330,7343,332,7343,334,7343,336,7343,338,7343,340,7343,342,7343,344,7343,346,7343,348,7343,350,7343,352,7343,354,7343,356,7343,358,7343,360,7343,362,7343,364,7343,366,7343,368,7343,370,7343,372,7343,374,7343,376,7343,378,7343,380,7343,382,7343,384,7343,386,7343,388,7343,390,7343,392,7343,394,7343,396,7343,398,7343,400,7343,402,7343,404,7343,406,7343,408,7343,410,7343,412,7343,414,7343,416,7343,418,7343,420,7343,422,7343,424,7343,426,7343,428,7343,430,7343,432,7343,434,7343,436,7343,438,7343,440,7343,442,7343,444,7343,446,7343,448,7343,450,7343,451,7343,452,7343,453,7343,454,7343,455,7343,457,7343,459,7343,461,7343,463,7343,464,7343,466,7343,467,7343,469,7343,471,7343,473,7343,475,7343,477,7343,479,7343,481,7343,483,7343,485,7343,487,7343,489,7343,491,7343,493,7343,495,7343,497,7343,499,7343,501,7343,503,7343,505,7343,507,7343,509,7343,511,7343,513,7343,515,7343,517,7343,519,7344,25,7344,27,7344,29,7344,31,7344,33,7344,35,7344,37,7344,39,7344,41,7344,43,7344,45,7344,47,7344,48,7344,49,7344,50,7344,51,7344,53,7344,55,7344,57,7344,59,7344,61,7344,63,7344,65,7344,67,7344,69,7344,71,7344,73,7344,75,7344,77,7344,79,7344,81,7344,83,7344,85,7344,87,7344,89,7344,91,7344,93,7344,95,7344,97,7344,99,7344,101,7344,103,7344,105,7344,107,7344,109,7344,111,7344,113,7344,115,7344,117,7344,119,7344,121,7344,123,7344,125,7344,127,7344,129,7344,131,7344,133,7344,135,7344,137,7344,139,7344,141,7344,143,7344,145,7344,147,7344,149,7344,151,7344,153,7344,155,7344,157,7344,159,7344,160,7344,162,7344,164,7344,166,7344,168,7344,170,7344,172,7344,174,7344,176,7344,178,7344,180,7344,182,7344,184,7344,186,7344,188,7344,190,7344,192,7344,194,7344,196,7344,198,7344,200,7344,202,7344,204,7344,206,7344,208,7344,210,7344,212,7344,214,7344,216,7344,218,7344,220,7344,222,7344,224,7344,226,7344,228,7344,230,7344,232,7344,234,7344,236,7344,238,7344,240,7344,242,7344,244,7344,246,7344,248,7344,250,7344,252,7344,254,7344,256,7344,258,7344,260,7344,262,7344,264,7344,266,7344,268,7344,270,7344,272,7344,274,7344,276,7344,278,7344,280,7344,282,7344,284,7344,286,7344,288,7344,290,7344,292,7344,294,7344,296,7344,298,7344,300,7344,302,7344,304,7344,306,7344,308,7344,310,7344,312,7344,314,7344,316,7344,318,7344,320,7344,322,7344,324,7344,326,7344,328,7344,330,7344,332,7344,334,7344,336,7344,338,7344,340,7344,342,7344,344,7344,346,7344,348,7344,350,7344,352,7344,354,7344,356,7344,358,7344,360,7344,362,7344,364,7344,366,7344,368,7344,370,7344,372,7344,374,7344,376,7344,378,7344,380,7344,382,7344,384,7344,386,7344,388,7344,390,7344,392,7344,394,7344,396,7344,398,7344,400,7344,402,7344,404,7344,406,7344,408,7344,410,7344,412,7344,414,7344,416,7344,418,7344,420,7344,422,7344,424,7344,426,7344,428,7344,430,7344,432,7344,434,7344,436,7344,438,7344,440,7344,442,7344,444,7344,446,7344,448,7344,450,7344,451,7344,452,7344,453,7344,454,7344,455,7344,457,7344,459,7344,461,7344,463,7344,464,7344,466,7344,467,7344,469,7344,471,7344,473,7344,475,7344,477,7344,479,7344,481,7344,483,7344,485,7344,487,7344,489,7344,491,7344,493,7344,495,7344,497,7344,499,7344,501,7344,503,7344,505,7344,507,7344,509,7344,511,7344,513,7344,515,7344,517,7344,519,7345,27,7345,29,7345,31,7345,33,7345,35,7345,37,7345,39,7345,41,7345,43,7345,45,7345,47,7345,48,7345,49,7345,50,7345,51,7345,53,7345,57,7345,61,7345,63,7345,65,7345,67,7345,69,7345,71,7345,73,7345,75,7345,81,7345,83,7345,85,7345,87,7345,89,7345,91,7345,93,7345,95,7345,97,7345,99,7345,101,7345,107,7345,109,7345,111,7345,113,7345,115,7345,117,7345,119,7345,121,7345,123,7345,125,7345,127,7345,129,7345,131,7345,133,7345,135,7345,137,7345,139,7345,143,7345,147,7345,149,7345,151,7345,153,7345,157,7345,159,7345,162,7345,164,7345,166,7345,168,7345,170,7345,172,7345,174,7345,176,7345,178,7345,180,7345,182,7345,184,7345,186,7345,188,7345,190,7345,192,7345,194,7345,196,7345,198,7345,200,7345,206,7345,208,7345,210,7345,212,7345,214,7345,216,7345,218,7345,220,7345,222,7345,224,7345,226,7345,228,7345,230,7345,232,7345,234,7345,236,7345,240,7345,242,7345,244,7345,246,7345,248,7345,250,7345,252,7345,254,7345,258,7345,262,7345,264,7345,266,7345,268,7345,270,7345,272,7345,274,7345,276,7345,278,7345,280,7345,282,7345,284,7345,286,7345,290,7345,292,7345,296,7345,298,7345,300,7345,302,7345,304,7345,310,7345,312,7345,314,7345,316,7345,318,7345,320,7345,322,7345,324,7345,328,7345,332,7345,338,7345,340,7345,342,7345,348,7345,354,7345,356,7345,360,7345,362,7345,366,7345,368,7345,370,7345,372,7345,376,7345,378,7345,380,7345,382,7345,386,7345,388,7345,390,7345,392,7345,396,7345,400,7345,402,7345,404,7345,406,7345,408,7345,416,7345,418,7345,420,7345,422,7345,424,7345,428,7345,430,7345,432,7345,436,7345,438,7345,440,7345,442,7345,444,7345,448,7345,450,7345,451,7345,452,7345,453,7345,455,7345,457,7345,459,7345,461,7345,463,7345,464,7345,466,7345,467,7345,469,7345,471,7345,477,7345,479,7345,481,7345,483,7345,485,7345,487,7345,489,7345,491,7345,493,7345,495,7345,497,7345,499,7345,501,7345,503,7345,505,7345,507,7345,511,7345,513,7345,515,7345,517,7345,519,7345,521,7346,25,7346,27,7346,29,7346,31,7346,33,7346,35,7346,37,7346,39,7346,41,7346,43,7346,45,7346,47,7346,48,7346,49,7346,50,7346,51,7346,53,7346,55,7346,57,7346,59,7346,61,7346,63,7346,65,7346,67,7346,69,7346,71,7346,73,7346,75,7346,77,7346,79,7346,81,7346,83,7346,85,7346,87,7346,89,7346,91,7346,93,7346,95,7346,97,7346,99,7346,101,7346,103,7346,105,7346,107,7346,109,7346,111,7346,113,7346,115,7346,117,7346,119,7346,121,7346,123,7346,125,7346,127,7346,129,7346,131,7346,133,7346,135,7346,137,7346,139,7346,141,7346,143,7346,145,7346,147,7346,149,7346,151,7346,153,7346,155,7346,157,7346,159,7346,160,7346,162,7346,164,7346,166,7346,168,7346,170,7346,172,7346,174,7346,176,7346,178,7346,180,7346,182,7346,184,7346,186,7346,188,7346,190,7346,192,7346,194,7346,196,7346,198,7346,200,7346,202,7346,204,7346,206,7346,208,7346,210,7346,212,7346,214,7346,216,7346,218,7346,220,7346,222,7346,224,7346,226,7346,228,7346,230,7346,232,7346,234,7346,236,7346,238,7346,240,7346,242,7346,244,7346,246,7346,248,7346,250,7346,252,7346,254,7346,256,7346,258,7346,260,7346,262,7346,264,7346,266,7346,268,7346,270,7346,272,7346,274,7346,276,7346,278,7346,280,7346,282,7346,284,7346,286,7346,288,7346,290,7346,292,7346,294,7346,296,7346,298,7346,300,7346,302,7346,304,7346,306,7346,308,7346,310,7346,312,7346,314,7346,316,7346,318,7346,320,7346,322,7346,324,7346,326,7346,328,7346,330,7346,332,7346,334,7346,336,7346,338,7346,340,7346,342,7346,344,7346,346,7346,348,7346,350,7346,352,7346,354,7346,356,7346,358,7346,360,7346,362,7346,364,7346,366,7346,368,7346,370,7346,372,7346,374,7346,376,7346,378,7346,380,7346,382,7346,384,7346,386,7346,388,7346,390,7346,392,7346,394,7346,396,7346,398,7346,400,7346,402,7346,404,7346,406,7346,408,7346,410,7346,412,7346,414,7346,416,7346,418,7346,420,7346,422,7346,424,7346,426,7346,428,7346,430,7346,432,7346,434,7346,436,7346,438,7346,440,7346,442,7346,444,7346,446,7346,448,7346,450,7346,451,7346,452,7346,453,7346,454,7346,455,7346,457,7346,459,7346,461,7346,463,7346,464,7346,466,7346,467,7346,469,7346,471,7346,473,7346,475,7346,477,7346,479,7346,481,7346,483,7346,485,7346,487,7346,489,7346,491,7346,493,7346,495,7346,497,7346,499,7346,501,7346,503,7346,505,7346,507,7346,509,7346,511,7346,513,7346,515,7346,517,7346,519,7346,521,7347,25,7347,27,7347,29,7347,31,7347,33,7347,35,7347,37,7347,39,7347,41,7347,43,7347,45,7347,47,7347,48,7347,49,7347,50,7347,51,7347,53,7347,55,7347,57,7347,59,7347,61,7347,63,7347,65,7347,67,7347,69,7347,71,7347,73,7347,75,7347,77,7347,79,7347,81,7347,83,7347,85,7347,87,7347,89,7347,91,7347,93,7347,95,7347,97,7347,99,7347,101,7347,103,7347,105,7347,107,7347,109,7347,111,7347,113,7347,115,7347,117,7347,119,7347,121,7347,123,7347,125,7347,127,7347,129,7347,131,7347,133,7347,135,7347,137,7347,139,7347,141,7347,143,7347,145,7347,147,7347,149,7347,151,7347,153,7347,155,7347,157,7347,159,7347,160,7347,162,7347,164,7347,166,7347,168,7347,170,7347,172,7347,174,7347,176,7347,178,7347,180,7347,182,7347,184,7347,186,7347,188,7347,190,7347,192,7347,194,7347,196,7347,198,7347,200,7347,202,7347,204,7347,206,7347,208,7347,210,7347,212,7347,214,7347,216,7347,218,7347,220,7347,222,7347,224,7347,226,7347,228,7347,230,7347,232,7347,234,7347,236,7347,238,7347,240,7347,242,7347,244,7347,246,7347,248,7347,250,7347,252,7347,254,7347,256,7347,258,7347,260,7347,262,7347,264,7347,266,7347,268,7347,270,7347,272,7347,274,7347,276,7347,278,7347,280,7347,282,7347,284,7347,286,7347,288,7347,290,7347,292,7347,294,7347,296,7347,298,7347,300,7347,302,7347,304,7347,306,7347,308,7347,310,7347,312,7347,314,7347,316,7347,318,7347,320,7347,322,7347,324,7347,326,7347,328,7347,330,7347,332,7347,334,7347,336,7347,338,7347,340,7347,342,7347,344,7347,346,7347,348,7347,350,7347,352,7347,354,7347,356,7347,358,7347,360,7347,362,7347,364,7347,366,7347,368,7347,370,7347,372,7347,374,7347,376,7347,378,7347,380,7347,382,7347,384,7347,386,7347,388,7347,390,7347,392,7347,394,7347,396,7347,398,7347,400,7347,402,7347,404,7347,406,7347,408,7347,410,7347,412,7347,414,7347,416,7347,418,7347,420,7347,422,7347,424,7347,426,7347,428,7347,430,7347,432,7347,434,7347,436,7347,438,7347,440,7347,442,7347,444,7347,446,7347,448,7347,450,7347,451,7347,452,7347,453,7347,454,7347,455,7347,457,7347,459,7347,461,7347,463,7347,464,7347,466,7347,467,7347,469,7347,471,7347,473,7347,475,7347,477,7347,479,7347,481,7347,483,7347,485,7347,487,7347,489,7347,491,7347,493,7347,495,7347,497,7347,499,7347,501,7347,503,7347,505,7347,507,7347,509,7347,511,7347,513,7347,515,7347,517,7347,519,7347,521,7348,25,7348,27,7348,29,7348,31,7348,33,7348,35,7348,37,7348,39,7348,41,7348,43,7348,45,7348,47,7348,48,7348,49,7348,50,7348,51,7348,53,7348,55,7348,57,7348,59,7348,61,7348,63,7348,65,7348,67,7348,69,7348,71,7348,73,7348,75,7348,77,7348,79,7348,81,7348,83,7348,85,7348,87,7348,89,7348,91,7348,93,7348,95,7348,97,7348,99,7348,101,7348,103,7348,105,7348,107,7348,109,7348,111,7348,113,7348,115,7348,117,7348,119,7348,121,7348,123,7348,125,7348,127,7348,129,7348,131,7348,133,7348,135,7348,137,7348,139,7348,141,7348,143,7348,145,7348,147,7348,149,7348,151,7348,153,7348,155,7348,157,7348,159,7348,160,7348,162,7348,164,7348,166,7348,168,7348,170,7348,172,7348,174,7348,176,7348,178,7348,180,7348,182,7348,184,7348,186,7348,188,7348,190,7348,192,7348,194,7348,196,7348,198,7348,200,7348,202,7348,204,7348,206,7348,208,7348,210,7348,212,7348,214,7348,216,7348,218,7348,220,7348,222,7348,224,7348,226,7348,228,7348,230,7348,232,7348,234,7348,236,7348,238,7348,240,7348,242,7348,244,7348,246,7348,248,7348,250,7348,252,7348,254,7348,256,7348,258,7348,260,7348,262,7348,264,7348,266,7348,268,7348,270,7348,272,7348,274,7348,276,7348,278,7348,280,7348,282,7348,284,7348,286,7348,288,7348,290,7348,292,7348,294,7348,296,7348,298,7348,300,7348,302,7348,304,7348,306,7348,308,7348,310,7348,312,7348,314,7348,316,7348,318,7348,320,7348,322,7348,324,7348,326,7348,328,7348,330,7348,332,7348,334,7348,336,7348,338,7348,340,7348,342,7348,344,7348,346,7348,348,7348,350,7348,352,7348,354,7348,356,7348,358,7348,360,7348,362,7348,364,7348,366,7348,368,7348,370,7348,372,7348,374,7348,376,7348,378,7348,380,7348,382,7348,384,7348,386,7348,388,7348,390,7348,392,7348,394,7348,396,7348,398,7348,400,7348,402,7348,404,7348,406,7348,408,7348,410,7348,412,7348,414,7348,416,7348,418,7348,420,7348,422,7348,424,7348,426,7348,428,7348,430,7348,432,7348,434,7348,436,7348,438,7348,440,7348,442,7348,444,7348,446,7348,448,7348,450,7348,451,7348,452,7348,453,7348,454,7348,455,7348,457,7348,459,7348,461,7348,463,7348,464,7348,466,7348,467,7348,469,7348,471,7348,473,7348,475,7348,477,7348,479,7348,481,7348,483,7348,485,7348,487,7348,489,7348,491,7348,493,7348,495,7348,497,7348,499,7348,501,7348,503,7348,505,7348,507,7348,509,7348,511,7348,513,7348,515,7348,517,7348,519,7348,521,7349,27,7349,29,7349,31,7349,33,7349,35,7349,37,7349,39,7349,41,7349,43,7349,45,7349,47,7349,48,7349,49,7349,50,7349,51,7349,53,7349,57,7349,61,7349,63,7349,65,7349,67,7349,69,7349,71,7349,73,7349,75,7349,81,7349,83,7349,85,7349,87,7349,89,7349,91,7349,93,7349,95,7349,97,7349,99,7349,101,7349,107,7349,109,7349,111,7349,113,7349,115,7349,117,7349,119,7349,121,7349,123,7349,125,7349,127,7349,129,7349,131,7349,133,7349,135,7349,137,7349,139,7349,143,7349,147,7349,149,7349,151,7349,153,7349,157,7349,159,7349,162,7349,164,7349,166,7349,168,7349,170,7349,172,7349,174,7349,176,7349,178,7349,180,7349,182,7349,184,7349,186,7349,188,7349,190,7349,192,7349,194,7349,196,7349,198,7349,200,7349,206,7349,208,7349,210,7349,212,7349,214,7349,216,7349,218,7349,220,7349,222,7349,224,7349,226,7349,228,7349,230,7349,232,7349,234,7349,236,7349,240,7349,242,7349,244,7349,246,7349,248,7349,250,7349,252,7349,254,7349,258,7349,262,7349,264,7349,266,7349,268,7349,270,7349,272,7349,274,7349,276,7349,278,7349,280,7349,282,7349,284,7349,286,7349,290,7349,292,7349,296,7349,298,7349,300,7349,302,7349,304,7349,310,7349,312,7349,314,7349,316,7349,318,7349,320,7349,322,7349,324,7349,328,7349,332,7349,338,7349,340,7349,342,7349,348,7349,354,7349,356,7349,360,7349,362,7349,366,7349,368,7349,370,7349,372,7349,376,7349,378,7349,380,7349,382,7349,386,7349,388,7349,390,7349,392,7349,396,7349,400,7349,402,7349,404,7349,406,7349,408,7349,416,7349,418,7349,420,7349,422,7349,424,7349,428,7349,430,7349,432,7349,436,7349,438,7349,440,7349,442,7349,444,7349,448,7349,450,7349,451,7349,452,7349,453,7349,455,7349,457,7349,459,7349,461,7349,463,7349,464,7349,466,7349,467,7349,469,7349,471,7349,477,7349,479,7349,481,7349,483,7349,485,7349,487,7349,489,7349,491,7349,493,7349,495,7349,497,7349,499,7349,501,7349,503,7349,505,7349,507,7349,511,7349,513,7349,515,7349,517,7349,519,7349,521,7350,27,7350,29,7350,31,7350,33,7350,35,7350,37,7350,39,7350,41,7350,43,7350,45,7350,47,7350,48,7350,49,7350,50,7350,51,7350,53,7350,57,7350,61,7350,63,7350,65,7350,67,7350,69,7350,71,7350,73,7350,75,7350,81,7350,83,7350,85,7350,87,7350,89,7350,91,7350,93,7350,95,7350,97,7350,99,7350,101,7350,107,7350,109,7350,111,7350,113,7350,115,7350,117,7350,119,7350,121,7350,123,7350,125,7350,127,7350,129,7350,131,7350,133,7350,135,7350,137,7350,139,7350,143,7350,147,7350,149,7350,151,7350,153,7350,157,7350,159,7350,162,7350,164,7350,166,7350,168,7350,170,7350,172,7350,174,7350,176,7350,178,7350,180,7350,182,7350,184,7350,186,7350,188,7350,190,7350,192,7350,194,7350,196,7350,198,7350,200,7350,206,7350,208,7350,210,7350,212,7350,214,7350,216,7350,218,7350,220,7350,222,7350,224,7350,226,7350,228,7350,230,7350,232,7350,234,7350,236,7350,240,7350,242,7350,244,7350,246,7350,248,7350,250,7350,252,7350,254,7350,258,7350,262,7350,264,7350,266,7350,268,7350,270,7350,272,7350,274,7350,276,7350,278,7350,280,7350,282,7350,284,7350,286,7350,290,7350,292,7350,296,7350,298,7350,300,7350,302,7350,304,7350,310,7350,312,7350,314,7350,316,7350,318,7350,320,7350,322,7350,324,7350,328,7350,332,7350,338,7350,340,7350,342,7350,348,7350,354,7350,356,7350,360,7350,362,7350,366,7350,368,7350,370,7350,372,7350,376,7350,378,7350,380,7350,382,7350,386,7350,388,7350,390,7350,392,7350,396,7350,400,7350,402,7350,404,7350,406,7350,408,7350,416,7350,418,7350,420,7350,422,7350,424,7350,428,7350,430,7350,432,7350,436,7350,438,7350,440,7350,442,7350,444,7350,448,7350,450,7350,451,7350,452,7350,453,7350,455,7350,457,7350,459,7350,461,7350,463,7350,464,7350,466,7350,467,7350,469,7350,471,7350,477,7350,479,7350,481,7350,483,7350,485,7350,487,7350,489,7350,491,7350,493,7350,495,7350,497,7350,499,7350,501,7350,503,7350,505,7350,507,7350,511,7350,513,7350,515,7350,517,7350,519,7350,521,7351,27,7351,29,7351,31,7351,33,7351,35,7351,37,7351,39,7351,41,7351,43,7351,45,7351,47,7351,48,7351,49,7351,50,7351,51,7351,53,7351,57,7351,61,7351,63,7351,65,7351,67,7351,69,7351,71,7351,73,7351,75,7351,81,7351,83,7351,85,7351,87,7351,89,7351,91,7351,93,7351,95,7351,97,7351,99,7351,101,7351,107,7351,109,7351,111,7351,113,7351,115,7351,117,7351,119,7351,121,7351,123,7351,125,7351,127,7351,129,7351,131,7351,133,7351,135,7351,137,7351,139,7351,143,7351,147,7351,149,7351,151,7351,153,7351,157,7351,159,7351,162,7351,164,7351,166,7351,168,7351,170,7351,172,7351,174,7351,176,7351,178,7351,180,7351,182,7351,184,7351,186,7351,188,7351,190,7351,192,7351,194,7351,196,7351,198,7351,200,7351,206,7351,208,7351,210,7351,212,7351,214,7351,216,7351,218,7351,220,7351,222,7351,224,7351,226,7351,228,7351,230,7351,232,7351,234,7351,236,7351,240,7351,242,7351,244,7351,246,7351,248,7351,250,7351,252,7351,254,7351,258,7351,262,7351,264,7351,266,7351,268,7351,270,7351,272,7351,274,7351,276,7351,278,7351,280,7351,282,7351,284,7351,286,7351,290,7351,292,7351,296,7351,298,7351,300,7351,302,7351,304,7351,310,7351,312,7351,314,7351,316,7351,318,7351,320,7351,322,7351,324,7351,328,7351,332,7351,338,7351,340,7351,342,7351,348,7351,354,7351,356,7351,360,7351,362,7351,366,7351,368,7351,370,7351,372,7351,376,7351,378,7351,380,7351,382,7351,386,7351,388,7351,390,7351,392,7351,396,7351,400,7351,402,7351,404,7351,406,7351,408,7351,416,7351,418,7351,420,7351,422,7351,424,7351,428,7351,430,7351,432,7351,436,7351,438,7351,440,7351,442,7351,444,7351,448,7351,450,7351,451,7351,452,7351,453,7351,455,7351,457,7351,459,7351,461,7351,463,7351,464,7351,466,7351,467,7351,469,7351,471,7351,477,7351,479,7351,481,7351,483,7351,485,7351,487,7351,489,7351,491,7351,493,7351,495,7351,497,7351,499,7351,501,7351,503,7351,505,7351,507,7351,511,7351,513,7351,515,7351,517,7351,519,7351,521,7352,27,7352,29,7352,31,7352,33,7352,35,7352,37,7352,39,7352,41,7352,43,7352,45,7352,47,7352,48,7352,49,7352,50,7352,51,7352,53,7352,57,7352,61,7352,63,7352,65,7352,67,7352,69,7352,71,7352,73,7352,75,7352,81,7352,83,7352,85,7352,87,7352,89,7352,91,7352,93,7352,95,7352,97,7352,99,7352,101,7352,107,7352,109,7352,111,7352,113,7352,115,7352,117,7352,119,7352,121,7352,123,7352,125,7352,127,7352,129,7352,131,7352,133,7352,135,7352,137,7352,139,7352,143,7352,147,7352,149,7352,151,7352,153,7352,157,7352,159,7352,162,7352,164,7352,166,7352,168,7352,170,7352,172,7352,174,7352,176,7352,178,7352,180,7352,182,7352,184,7352,186,7352,188,7352,190,7352,192,7352,194,7352,196,7352,198,7352,200,7352,206,7352,208,7352,210,7352,212,7352,214,7352,216,7352,218,7352,220,7352,222,7352,224,7352,226,7352,228,7352,230,7352,232,7352,234,7352,236,7352,240,7352,242,7352,244,7352,246,7352,248,7352,250,7352,252,7352,254,7352,258,7352,262,7352,264,7352,266,7352,268,7352,270,7352,272,7352,274,7352,276,7352,278,7352,280,7352,282,7352,284,7352,286,7352,290,7352,292,7352,296,7352,298,7352,300,7352,302,7352,304,7352,310,7352,312,7352,314,7352,316,7352,318,7352,320,7352,322,7352,324,7352,328,7352,332,7352,338,7352,340,7352,342,7352,348,7352,354,7352,356,7352,360,7352,362,7352,366,7352,368,7352,370,7352,372,7352,376,7352,378,7352,380,7352,382,7352,386,7352,388,7352,390,7352,392,7352,396,7352,400,7352,402,7352,404,7352,406,7352,408,7352,416,7352,418,7352,420,7352,422,7352,424,7352,428,7352,430,7352,432,7352,436,7352,438,7352,440,7352,442,7352,444,7352,448,7352,450,7352,451,7352,452,7352,453,7352,455,7352,457,7352,459,7352,461,7352,463,7352,464,7352,466,7352,467,7352,469,7352,471,7352,477,7352,479,7352,481,7352,483,7352,485,7352,487,7352,489,7352,491,7352,493,7352,495,7352,497,7352,499,7352,501,7352,503,7352,505,7352,507,7352,511,7352,513,7352,515,7352,517,7352,519,7352,521,7353,25,7353,27,7353,29,7353,31,7353,33,7353,35,7353,37,7353,39,7353,41,7353,43,7353,45,7353,47,7353,48,7353,49,7353,50,7353,51,7353,53,7353,55,7353,57,7353,59,7353,61,7353,63,7353,65,7353,67,7353,69,7353,71,7353,73,7353,75,7353,77,7353,79,7353,81,7353,83,7353,85,7353,87,7353,89,7353,91,7353,93,7353,95,7353,97,7353,99,7353,101,7353,103,7353,105,7353,107,7353,109,7353,111,7353,113,7353,115,7353,117,7353,119,7353,121,7353,123,7353,125,7353,127,7353,129,7353,131,7353,133,7353,135,7353,137,7353,139,7353,141,7353,143,7353,145,7353,147,7353,149,7353,151,7353,153,7353,155,7353,157,7353,159,7353,160,7353,162,7353,164,7353,166,7353,168,7353,170,7353,172,7353,174,7353,176,7353,178,7353,180,7353,182,7353,184,7353,186,7353,188,7353,190,7353,192,7353,194,7353,196,7353,198,7353,200,7353,202,7353,204,7353,206,7353,208,7353,210,7353,212,7353,214,7353,216,7353,218,7353,220,7353,222,7353,224,7353,226,7353,228,7353,230,7353,232,7353,234,7353,236,7353,238,7353,240,7353,242,7353,244,7353,246,7353,248,7353,250,7353,252,7353,254,7353,256,7353,258,7353,260,7353,262,7353,264,7353,266,7353,268,7353,270,7353,272,7353,274,7353,276,7353,278,7353,280,7353,282,7353,284,7353,286,7353,288,7353,290,7353,292,7353,294,7353,296,7353,298,7353,300,7353,302,7353,304,7353,306,7353,308,7353,310,7353,312,7353,314,7353,316,7353,318,7353,320,7353,322,7353,324,7353,326,7353,328,7353,330,7353,332,7353,334,7353,336,7353,338,7353,340,7353,342,7353,344,7353,346,7353,348,7353,350,7353,352,7353,354,7353,356,7353,358,7353,360,7353,362,7353,364,7353,366,7353,368,7353,370,7353,372,7353,374,7353,376,7353,378,7353,380,7353,382,7353,384,7353,386,7353,388,7353,390,7353,392,7353,394,7353,396,7353,398,7353,400,7353,402,7353,404,7353,406,7353,408,7353,410,7353,412,7353,414,7353,416,7353,418,7353,420,7353,422,7353,424,7353,426,7353,428,7353,430,7353,432,7353,434,7353,436,7353,438,7353,440,7353,442,7353,444,7353,446,7353,448,7353,450,7353,451,7353,452,7353,453,7353,454,7353,455,7353,457,7353,459,7353,461,7353,463,7353,464,7353,466,7353,467,7353,469,7353,471,7353,473,7353,475,7353,477,7353,479,7353,481,7353,483,7353,485,7353,487,7353,489,7353,491,7353,493,7353,495,7353,497,7353,499,7353,501,7353,503,7353,505,7353,507,7353,509,7353,511,7353,513,7353,515,7353,517,7353,519,7353,521,7632,25,7632,27,7632,29,7632,31,7632,33,7632,35,7632,37,7632,39,7632,41,7632,43,7632,45,7632,47,7632,48,7632,49,7632,50,7632,51,7632,53,7632,55,7632,57,7632,59,7632,61,7632,63,7632,65,7632,67,7632,69,7632,71,7632,73,7632,75,7632,77,7632,79,7632,81,7632,83,7632,85,7632,87,7632,89,7632,91,7632,93,7632,95,7632,97,7632,99,7632,101,7632,103,7632,105,7632,107,7632,109,7632,111,7632,113,7632,115,7632,117,7632,119,7632,121,7632,123,7632,125,7632,127,7632,129,7632,131,7632,133,7632,135,7632,137,7632,139,7632,141,7632,143,7632,145,7632,147,7632,149,7632,151,7632,153,7632,155,7632,157,7632,159,7632,160,7632,162,7632,164,7632,166,7632,168,7632,170,7632,172,7632,174,7632,176,7632,178,7632,180,7632,182,7632,184,7632,186,7632,188,7632,190,7632,192,7632,194,7632,196,7632,198,7632,200,7632,202,7632,204,7632,206,7632,208,7632,210,7632,212,7632,214,7632,216,7632,218,7632,220,7632,222,7632,224,7632,226,7632,228,7632,230,7632,232,7632,234,7632,236,7632,238,7632,240,7632,242,7632,244,7632,246,7632,248,7632,250,7632,252,7632,254,7632,256,7632,258,7632,260,7632,262,7632,264,7632,266,7632,268,7632,270,7632,272,7632,274,7632,276,7632,278,7632,280,7632,282,7632,284,7632,286,7632,288,7632,290,7632,292,7632,294,7632,296,7632,298,7632,300,7632,302,7632,304,7632,306,7632,308,7632,310,7632,312,7632,314,7632,316,7632,318,7632,320,7632,322,7632,324,7632,326,7632,328,7632,330,7632,332,7632,334,7632,336,7632,338,7632,340,7632,342,7632,344,7632,346,7632,348,7632,350,7632,352,7632,354,7632,356,7632,358,7632,360,7632,362,7632,364,7632,366,7632,368,7632,370,7632,372,7632,374,7632,376,7632,378,7632,380,7632,382,7632,384,7632,386,7632,388,7632,390,7632,392,7632,394,7632,396,7632,398,7632,400,7632,402,7632,404,7632,406,7632,408,7632,410,7632,412,7632,414,7632,416,7632,418,7632,420,7632,422,7632,424,7632,426,7632,428,7632,430,7632,432,7632,434,7632,436,7632,438,7632,440,7632,442,7632,444,7632,446,7632,448,7632,450,7632,451,7632,452,7632,453,7632,454,7632,455,7632,457,7632,459,7632,461,7632,463,7632,464,7632,466,7632,467,7632,469,7632,471,7632,473,7632,475,7632,477,7632,479,7632,481,7632,483,7632,485,7632,487,7632,489,7632,491,7632,493,7632,495,7632,497,7632,499,7632,501,7632,503,7632,505,7632,507,7632,509,7632,511,7632,513,7632,515,7632,517,7632,519,7632,521,7740,25,7740,55,7740,59,7740,77,7740,79,7740,103,7740,105,7740,141,7740,145,7740,155,7740,160,7740,202,7740,204,7740,238,7740,256,7740,260,7740,288,7740,294,7740,306,7740,308,7740,326,7740,330,7740,334,7740,336,7740,344,7740,346,7740,350,7740,352,7740,358,7740,364,7740,374,7740,384,7740,394,7740,398,7740,410,7740,412,7740,414,7740,426,7740,434,7740,446,7740,473,7740,475,7740,509,7740,529,7741,25,7741,55,7741,59,7741,77,7741,79,7741,103,7741,105,7741,141,7741,145,7741,155,7741,160,7741,202,7741,204,7741,238,7741,256,7741,260,7741,288,7741,294,7741,306,7741,308,7741,326,7741,330,7741,334,7741,336,7741,344,7741,346,7741,350,7741,352,7741,358,7741,364,7741,374,7741,384,7741,394,7741,398,7741,410,7741,412,7741,414,7741,426,7741,434,7741,446,7741,473,7741,475,7741,509,7741,529,7746,25,7746,55,7746,59,7746,77,7746,79,7746,103,7746,105,7746,141,7746,145,7746,155,7746,160,7746,202,7746,204,7746,238,7746,256,7746,260,7746,288,7746,294,7746,306,7746,308,7746,326,7746,330,7746,334,7746,336,7746,344,7746,346,7746,350,7746,352,7746,358,7746,364,7746,374,7746,384,7746,394,7746,398,7746,410,7746,412,7746,414,7746,426,7746,434,7746,446,7746,473,7746,475,7746,509,7746,529,7747,25,7747,55,7747,59,7747,77,7747,79,7747,103,7747,105,7747,141,7747,145,7747,155,7747,160,7747,202,7747,204,7747,238,7747,256,7747,260,7747,288,7747,294,7747,306,7747,308,7747,326,7747,330,7747,334,7747,336,7747,344,7747,346,7747,350,7747,352,7747,358,7747,364,7747,374,7747,384,7747,394,7747,398,7747,410,7747,412,7747,414,7747,426,7747,434,7747,446,7747,473,7747,475,7747,509,7747,529,7748,25,7748,55,7748,59,7748,77,7748,79,7748,103,7748,105,7748,141,7748,145,7748,155,7748,160,7748,202,7748,204,7748,238,7748,256,7748,260,7748,288,7748,294,7748,306,7748,308,7748,326,7748,330,7748,334,7748,336,7748,344,7748,346,7748,350,7748,352,7748,358,7748,364,7748,374,7748,384,7748,394,7748,398,7748,410,7748,412,7748,414,7748,426,7748,434,7748,446,7748,473,7748,475,7748,509,7748,529,7749,25,7749,55,7749,59,7749,77,7749,79,7749,103,7749,105,7749,141,7749,145,7749,155,7749,160,7749,202,7749,204,7749,238,7749,256,7749,260,7749,288,7749,294,7749,306,7749,308,7749,326,7749,330,7749,334,7749,336,7749,344,7749,346,7749,350,7749,352,7749,358,7749,364,7749,374,7749,384,7749,394,7749,398,7749,410,7749,412,7749,414,7749,426,7749,434,7749,446,7749,473,7749,475,7749,509,7749,529,7750,25,7750,55,7750,59,7750,77,7750,79,7750,103,7750,105,7750,141,7750,145,7750,155,7750,160,7750,202,7750,204,7750,238,7750,256,7750,260,7750,288,7750,294,7750,306,7750,308,7750,326,7750,330,7750,334,7750,336,7750,344,7750,346,7750,350,7750,352,7750,358,7750,364,7750,374,7750,384,7750,394,7750,398,7750,410,7750,412,7750,414,7750,426,7750,434,7750,446,7750,473,7750,475,7750,509,7750,529,7751,25,7751,55,7751,59,7751,77,7751,79,7751,103,7751,105,7751,141,7751,145,7751,155,7751,160,7751,202,7751,204,7751,238,7751,256,7751,260,7751,288,7751,294,7751,306,7751,308,7751,326,7751,330,7751,334,7751,336,7751,344,7751,346,7751,350,7751,352,7751,358,7751,364,7751,374,7751,384,7751,394,7751,398,7751,410,7751,412,7751,414,7751,426,7751,434,7751,446,7751,473,7751,475,7751,509,7751,529,7752,529,7753,25,7753,55,7753,59,7753,77,7753,79,7753,103,7753,105,7753,141,7753,145,7753,155,7753,160,7753,202,7753,204,7753,238,7753,256,7753,260,7753,288,7753,294,7753,306,7753,308,7753,326,7753,330,7753,334,7753,336,7753,344,7753,346,7753,350,7753,352,7753,358,7753,364,7753,374,7753,384,7753,394,7753,398,7753,410,7753,412,7753,414,7753,426,7753,434,7753,446,7753,473,7753,475,7753,509,7753,529,7754,25,7754,55,7754,59,7754,77,7754,79,7754,103,7754,105,7754,141,7754,145,7754,155,7754,160,7754,202,7754,204,7754,238,7754,256,7754,260,7754,288,7754,294,7754,306,7754,308,7754,326,7754,330,7754,334,7754,336,7754,344,7754,346,7754,350,7754,352,7754,358,7754,364,7754,374,7754,384,7754,394,7754,398,7754,410,7754,412,7754,414,7754,426,7754,434,7754,446,7754,473,7754,475,7754,509,7754,529,7755,25,7755,55,7755,59,7755,77,7755,79,7755,103,7755,105,7755,141,7755,145,7755,155,7755,160,7755,202,7755,204,7755,238,7755,256,7755,260,7755,288,7755,294,7755,306,7755,308,7755,326,7755,330,7755,334,7755,336,7755,344,7755,346,7755,350,7755,352,7755,358,7755,364,7755,374,7755,384,7755,394,7755,398,7755,410,7755,412,7755,414,7755,426,7755,434,7755,446,7755,473,7755,475,7755,509,7755,529,7756,25,7756,55,7756,59,7756,77,7756,79,7756,103,7756,105,7756,141,7756,145,7756,155,7756,160,7756,202,7756,204,7756,238,7756,256,7756,260,7756,288,7756,294,7756,306,7756,308,7756,326,7756,330,7756,334,7756,336,7756,344,7756,346,7756,350,7756,352,7756,358,7756,364,7756,374,7756,384,7756,394,7756,398,7756,410,7756,412,7756,414,7756,426,7756,434,7756,446,7756,473,7756,475,7756,509,7756,529,7757,25,7757,55,7757,59,7757,77,7757,79,7757,103,7757,105,7757,141,7757,145,7757,155,7757,160,7757,202,7757,204,7757,238,7757,256,7757,260,7757,288,7757,294,7757,306,7757,308,7757,326,7757,330,7757,334,7757,336,7757,344,7757,346,7757,350,7757,352,7757,358,7757,364,7757,374,7757,384,7757,394,7757,398,7757,410,7757,412,7757,414,7757,426,7757,434,7757,446,7757,473,7757,475,7757,509,7757,529,7758,25,7758,55,7758,59,7758,77,7758,79,7758,103,7758,105,7758,141,7758,145,7758,155,7758,160,7758,202,7758,204,7758,238,7758,256,7758,260,7758,288,7758,294,7758,306,7758,308,7758,326,7758,330,7758,334,7758,336,7758,344,7758,346,7758,350,7758,352,7758,358,7758,364,7758,374,7758,384,7758,394,7758,398,7758,410,7758,412,7758,414,7758,426,7758,434,7758,446,7758,473,7758,475,7758,509,7758,529,7761,523,7761,527,7761,532,7761,538,7762,523,7762,527,7762,532,7762,538,7763,523,7763,527,7763,532,7763,538,7764,523,7764,527,7764,532,7764,538,7765,523,7765,527,7765,532,7765,538,7766,523,7766,527,7766,532,7766,538,7767,523,7767,527,7767,532,7767,538,7768,523,7768,527,7768,532,7768,538,7771,18,7771,19,7771,22,7771,23,7771,24,7771,25,7771,27,7771,29,7771,31,7771,33,7771,35,7771,37,7771,39,7771,41,7771,43,7771,45,7771,47,7771,48,7771,49,7771,50,7771,51,7771,53,7771,55,7771,57,7771,59,7771,61,7771,63,7771,65,7771,67,7771,69,7771,71,7771,73,7771,75,7771,77,7771,79,7771,81,7771,83,7771,85,7771,87,7771,89,7771,91,7771,93,7771,95,7771,97,7771,99,7771,101,7771,103,7771,105,7771,107,7771,109,7771,111,7771,113,7771,115,7771,117,7771,119,7771,121,7771,123,7771,125,7771,127,7771,129,7771,131,7771,133,7771,135,7771,137,7771,139,7771,141,7771,143,7771,145,7771,147,7771,149,7771,151,7771,153,7771,155,7771,157,7771,159,7771,160,7771,162,7771,164,7771,166,7771,168,7771,170,7771,172,7771,174,7771,176,7771,178,7771,180,7771,182,7771,184,7771,186,7771,188,7771,190,7771,192,7771,194,7771,196,7771,198,7771,200,7771,202,7771,204,7771,206,7771,208,7771,210,7771,212,7771,214,7771,216,7771,218,7771,220,7771,222,7771,224,7771,226,7771,228,7771,230,7771,232,7771,234,7771,236,7771,238,7771,240,7771,242,7771,244,7771,246,7771,248,7771,250,7771,252,7771,254,7771,256,7771,258,7771,260,7771,262,7771,264,7771,266,7771,268,7771,270,7771,272,7771,274,7771,276,7771,278,7771,280,7771,282,7771,284,7771,286,7771,288,7771,290,7771,292,7771,294,7771,296,7771,298,7771,300,7771,302,7771,304,7771,306,7771,308,7771,310,7771,312,7771,314,7771,316,7771,318,7771,320,7771,322,7771,324,7771,326,7771,328,7771,330,7771,332,7771,334,7771,336,7771,338,7771,340,7771,342,7771,344,7771,346,7771,348,7771,350,7771,352,7771,354,7771,356,7771,358,7771,360,7771,362,7771,364,7771,366,7771,368,7771,370,7771,372,7771,374,7771,376,7771,378,7771,380,7771,382,7771,384,7771,386,7771,388,7771,390,7771,392,7771,394,7771,396,7771,398,7771,400,7771,402,7771,404,7771,406,7771,408,7771,410,7771,412,7771,414,7771,416,7771,418,7771,420,7771,422,7771,424,7771,426,7771,428,7771,430,7771,432,7771,434,7771,436,7771,438,7771,440,7771,442,7771,444,7771,446,7771,448,7771,450,7771,451,7771,452,7771,453,7771,454,7771,455,7771,457,7771,459,7771,461,7771,463,7771,464,7771,466,7771,467,7771,469,7771,471,7771,473,7771,475,7771,477,7771,479,7771,481,7771,483,7771,485,7771,487,7771,489,7771,491,7771,493,7771,495,7771,497,7771,499,7771,501,7771,503,7771,505,7771,507,7771,509,7771,511,7771,513,7771,515,7771,517,7771,519,7771,521,7771,522,7771,523,7771,526,7771,527,7771,530,7771,531,7771,532,7771,535,7771,536,7771,538,7771,542,7774,25,7774,55,7774,59,7774,77,7774,79,7774,103,7774,105,7774,141,7774,145,7774,155,7774,160,7774,202,7774,204,7774,238,7774,256,7774,260,7774,288,7774,294,7774,306,7774,308,7774,326,7774,330,7774,334,7774,336,7774,344,7774,346,7774,350,7774,352,7774,358,7774,364,7774,374,7774,384,7774,394,7774,398,7774,410,7774,412,7774,414,7774,426,7774,434,7774,446,7774,473,7774,475,7774,509,7774,524,7774,529,7774,533,7774,539,7774,542,7775,25,7775,55,7775,59,7775,77,7775,79,7775,103,7775,105,7775,141,7775,145,7775,155,7775,160,7775,202,7775,204,7775,238,7775,256,7775,260,7775,288,7775,294,7775,306,7775,308,7775,326,7775,330,7775,334,7775,336,7775,344,7775,346,7775,350,7775,352,7775,358,7775,364,7775,374,7775,384,7775,394,7775,398,7775,410,7775,412,7775,414,7775,426,7775,434,7775,446,7775,473,7775,475,7775,509,7775,524,7775,529,7775,533,7775,539,7775,542,7776,25,7776,55,7776,59,7776,77,7776,79,7776,103,7776,105,7776,141,7776,145,7776,155,7776,160,7776,202,7776,204,7776,238,7776,256,7776,260,7776,288,7776,294,7776,306,7776,308,7776,326,7776,330,7776,334,7776,336,7776,344,7776,346,7776,350,7776,352,7776,358,7776,364,7776,374,7776,384,7776,394,7776,398,7776,410,7776,412,7776,414,7776,426,7776,434,7776,446,7776,473,7776,475,7776,509,7776,524,7776,529,7776,533,7776,539,7776,542,7781,25,7781,55,7781,59,7781,77,7781,79,7781,103,7781,105,7781,141,7781,145,7781,155,7781,160,7781,202,7781,204,7781,238,7781,256,7781,260,7781,288,7781,294,7781,306,7781,308,7781,326,7781,330,7781,334,7781,336,7781,344,7781,346,7781,350,7781,352,7781,358,7781,364,7781,374,7781,384,7781,394,7781,398,7781,410,7781,412,7781,414,7781,426,7781,434,7781,446,7781,473,7781,475,7781,509,7781,524,7781,529,7781,533,7781,539,7781,542,7782,25,7782,55,7782,59,7782,77,7782,79,7782,103,7782,105,7782,141,7782,145,7782,155,7782,160,7782,202,7782,204,7782,238,7782,256,7782,260,7782,288,7782,294,7782,306,7782,308,7782,326,7782,330,7782,334,7782,336,7782,344,7782,346,7782,350,7782,352,7782,358,7782,364,7782,374,7782,384,7782,394,7782,398,7782,410,7782,412,7782,414,7782,426,7782,434,7782,446,7782,473,7782,475,7782,509,7782,524,7782,529,7782,533,7782,539,7782,542,7783,25,7783,55,7783,59,7783,77,7783,79,7783,103,7783,105,7783,141,7783,145,7783,155,7783,160,7783,202,7783,204,7783,238,7783,256,7783,260,7783,288,7783,294,7783,306,7783,308,7783,326,7783,330,7783,334,7783,336,7783,344,7783,346,7783,350,7783,352,7783,358,7783,364,7783,374,7783,384,7783,394,7783,398,7783,410,7783,412,7783,414,7783,426,7783,434,7783,446,7783,473,7783,475,7783,509,7783,524,7783,529,7783,533,7783,539,7783,542,7784,25,7784,55,7784,59,7784,77,7784,79,7784,103,7784,105,7784,141,7784,145,7784,155,7784,160,7784,202,7784,204,7784,238,7784,256,7784,260,7784,288,7784,294,7784,306,7784,308,7784,326,7784,330,7784,334,7784,336,7784,344,7784,346,7784,350,7784,352,7784,358,7784,364,7784,374,7784,384,7784,394,7784,398,7784,410,7784,412,7784,414,7784,426,7784,434,7784,446,7784,473,7784,475,7784,509,7784,524,7784,529,7784,533,7784,539,7784,542,7785,25,7785,55,7785,59,7785,77,7785,79,7785,103,7785,105,7785,141,7785,145,7785,155,7785,160,7785,202,7785,204,7785,238,7785,256,7785,260,7785,288,7785,294,7785,306,7785,308,7785,326,7785,330,7785,334,7785,336,7785,344,7785,346,7785,350,7785,352,7785,358,7785,364,7785,374,7785,384,7785,394,7785,398,7785,410,7785,412,7785,414,7785,426,7785,434,7785,446,7785,473,7785,475,7785,509,7785,524,7785,529,7785,533,7785,539,7785,542,7786,25,7786,55,7786,59,7786,77,7786,79,7786,103,7786,105,7786,141,7786,145,7786,155,7786,160,7786,202,7786,204,7786,238,7786,256,7786,260,7786,288,7786,294,7786,306,7786,308,7786,326,7786,330,7786,334,7786,336,7786,344,7786,346,7786,350,7786,352,7786,358,7786,364,7786,374,7786,384,7786,394,7786,398,7786,410,7786,412,7786,414,7786,426,7786,434,7786,446,7786,473,7786,475,7786,509,7786,524,7786,529,7786,533,7786,539,7786,542,7787,25,7787,55,7787,59,7787,77,7787,79,7787,103,7787,105,7787,141,7787,145,7787,155,7787,160,7787,202,7787,204,7787,238,7787,256,7787,260,7787,288,7787,294,7787,306,7787,308,7787,326,7787,330,7787,334,7787,336,7787,344,7787,346,7787,350,7787,352,7787,358,7787,364,7787,374,7787,384,7787,394,7787,398,7787,410,7787,412,7787,414,7787,426,7787,434,7787,446,7787,473,7787,475,7787,509,7787,524,7787,529,7787,533,7787,539,7787,542,7788,25,7788,55,7788,59,7788,77,7788,79,7788,103,7788,105,7788,141,7788,145,7788,155,7788,160,7788,202,7788,204,7788,238,7788,256,7788,260,7788,288,7788,294,7788,306,7788,308,7788,326,7788,330,7788,334,7788,336,7788,344,7788,346,7788,350,7788,352,7788,358,7788,364,7788,374,7788,384,7788,394,7788,398,7788,410,7788,412,7788,414,7788,426,7788,434,7788,446,7788,473,7788,475,7788,509,7788,524,7788,529,7788,533,7788,539,7788,542,7789,25,7789,55,7789,59,7789,77,7789,79,7789,103,7789,105,7789,141,7789,145,7789,155,7789,160,7789,202,7789,204,7789,238,7789,256,7789,260,7789,288,7789,294,7789,306,7789,308,7789,326,7789,330,7789,334,7789,336,7789,344,7789,346,7789,350,7789,352,7789,358,7789,364,7789,374,7789,384,7789,394,7789,398,7789,410,7789,412,7789,414,7789,426,7789,434,7789,446,7789,473,7789,475,7789,509,7789,524,7789,529,7789,533,7789,539,7789,542,7790,25,7790,55,7790,59,7790,77,7790,79,7790,103,7790,105,7790,141,7790,145,7790,155,7790,160,7790,202,7790,204,7790,238,7790,256,7790,260,7790,288,7790,294,7790,306,7790,308,7790,326,7790,330,7790,334,7790,336,7790,344,7790,346,7790,350,7790,352,7790,358,7790,364,7790,374,7790,384,7790,394,7790,398,7790,410,7790,412,7790,414,7790,426,7790,434,7790,446,7790,473,7790,475,7790,509,7790,524,7790,529,7790,533,7790,539,7790,542,7791,524,7791,533,7791,539,7792,25,7792,55,7792,59,7792,77,7792,79,7792,103,7792,105,7792,141,7792,145,7792,155,7792,160,7792,202,7792,204,7792,238,7792,256,7792,260,7792,288,7792,294,7792,306,7792,308,7792,326,7792,330,7792,334,7792,336,7792,344,7792,346,7792,350,7792,352,7792,358,7792,364,7792,374,7792,384,7792,394,7792,398,7792,410,7792,412,7792,414,7792,426,7792,434,7792,446,7792,473,7792,475,7792,509,7792,524,7792,529,7792,533,7792,539,7792,542,7793,25,7793,55,7793,59,7793,77,7793,79,7793,103,7793,105,7793,141,7793,145,7793,155,7793,160,7793,202,7793,204,7793,238,7793,256,7793,260,7793,288,7793,294,7793,306,7793,308,7793,326,7793,330,7793,334,7793,336,7793,344,7793,346,7793,350,7793,352,7793,358,7793,364,7793,374,7793,384,7793,394,7793,398,7793,410,7793,412,7793,414,7793,426,7793,434,7793,446,7793,473,7793,475,7793,509,7793,524,7793,529,7793,533,7793,539,7793,542,7794,524,7794,533,7794,539,7795,25,7795,55,7795,59,7795,77,7795,79,7795,103,7795,105,7795,141,7795,145,7795,155,7795,160,7795,202,7795,204,7795,238,7795,256,7795,260,7795,288,7795,294,7795,306,7795,308,7795,326,7795,330,7795,334,7795,336,7795,344,7795,346,7795,350,7795,352,7795,358,7795,364,7795,374,7795,384,7795,394,7795,398,7795,410,7795,412,7795,414,7795,426,7795,434,7795,446,7795,473,7795,475,7795,509,7795,524,7795,529,7795,533,7795,539,7795,542,7796,524,7796,533,7796,539,7797,524,7797,533,7797,539,7798,25,7798,55,7798,59,7798,77,7798,79,7798,103,7798,105,7798,141,7798,145,7798,155,7798,160,7798,202,7798,204,7798,238,7798,256,7798,260,7798,288,7798,294,7798,306,7798,308,7798,326,7798,330,7798,334,7798,336,7798,344,7798,346,7798,350,7798,352,7798,358,7798,364,7798,374,7798,384,7798,394,7798,398,7798,410,7798,412,7798,414,7798,426,7798,434,7798,446,7798,473,7798,475,7798,509,7798,524,7798,529,7798,533,7798,539,7798,542,7799,25,7799,55,7799,59,7799,77,7799,79,7799,103,7799,105,7799,141,7799,145,7799,155,7799,160,7799,202,7799,204,7799,238,7799,256,7799,260,7799,288,7799,294,7799,306,7799,308,7799,326,7799,330,7799,334,7799,336,7799,344,7799,346,7799,350,7799,352,7799,358,7799,364,7799,374,7799,384,7799,394,7799,398,7799,410,7799,412,7799,414,7799,426,7799,434,7799,446,7799,473,7799,475,7799,509,7799,524,7799,529,7799,533,7799,539,7799,542,7800,25,7800,55,7800,59,7800,77,7800,79,7800,103,7800,105,7800,141,7800,145,7800,155,7800,160,7800,202,7800,204,7800,238,7800,256,7800,260,7800,288,7800,294,7800,306,7800,308,7800,326,7800,330,7800,334,7800,336,7800,344,7800,346,7800,350,7800,352,7800,358,7800,364,7800,374,7800,384,7800,394,7800,398,7800,410,7800,412,7800,414,7800,426,7800,434,7800,446,7800,473,7800,475,7800,509,7800,524,7800,529,7800,533,7800,539,7800,542,7801,25,7801,55,7801,59,7801,77,7801,79,7801,103,7801,105,7801,141,7801,145,7801,155,7801,160,7801,202,7801,204,7801,238,7801,256,7801,260,7801,288,7801,294,7801,306,7801,308,7801,326,7801,330,7801,334,7801,336,7801,344,7801,346,7801,350,7801,352,7801,358,7801,364,7801,374,7801,384,7801,394,7801,398,7801,410,7801,412,7801,414,7801,426,7801,434,7801,446,7801,473,7801,475,7801,509,7801,524,7801,529,7801,533,7801,539,7801,542,7802,524,7802,533,7802,539,7803,25,7803,55,7803,59,7803,77,7803,79,7803,103,7803,105,7803,141,7803,145,7803,155,7803,160,7803,202,7803,204,7803,238,7803,256,7803,260,7803,288,7803,294,7803,306,7803,308,7803,326,7803,330,7803,334,7803,336,7803,344,7803,346,7803,350,7803,352,7803,358,7803,364,7803,374,7803,384,7803,394,7803,398,7803,410,7803,412,7803,414,7803,426,7803,434,7803,446,7803,473,7803,475,7803,509,7803,524,7803,529,7803,533,7803,539,7803,542,7804,25,7804,55,7804,59,7804,77,7804,79,7804,103,7804,105,7804,141,7804,145,7804,155,7804,160,7804,202,7804,204,7804,238,7804,256,7804,260,7804,288,7804,294,7804,306,7804,308,7804,326,7804,330,7804,334,7804,336,7804,344,7804,346,7804,350,7804,352,7804,358,7804,364,7804,374,7804,384,7804,394,7804,398,7804,410,7804,412,7804,414,7804,426,7804,434,7804,446,7804,473,7804,475,7804,509,7804,524,7804,529,7804,533,7804,539,7804,542,7805,25,7805,55,7805,59,7805,77,7805,79,7805,103,7805,105,7805,141,7805,145,7805,155,7805,160,7805,202,7805,204,7805,238,7805,256,7805,260,7805,288,7805,294,7805,306,7805,308,7805,326,7805,330,7805,334,7805,336,7805,344,7805,346,7805,350,7805,352,7805,358,7805,364,7805,374,7805,384,7805,394,7805,398,7805,410,7805,412,7805,414,7805,426,7805,434,7805,446,7805,473,7805,475,7805,509,7805,524,7805,529,7805,533,7805,539,7805,542,7806,25,7806,55,7806,59,7806,77,7806,79,7806,103,7806,105,7806,141,7806,145,7806,155,7806,160,7806,202,7806,204,7806,238,7806,256,7806,260,7806,288,7806,294,7806,306,7806,308,7806,326,7806,330,7806,334,7806,336,7806,344,7806,346,7806,350,7806,352,7806,358,7806,364,7806,374,7806,384,7806,394,7806,398,7806,410,7806,412,7806,414,7806,426,7806,434,7806,446,7806,473,7806,475,7806,509,7806,524,7806,529,7806,533,7806,539,7806,542,7807,524,7807,533,7807,539,7808,524,7808,542,7809,25,7809,55,7809,59,7809,77,7809,79,7809,103,7809,105,7809,141,7809,145,7809,155,7809,160,7809,202,7809,204,7809,238,7809,256,7809,260,7809,288,7809,294,7809,306,7809,308,7809,326,7809,330,7809,334,7809,336,7809,344,7809,346,7809,350,7809,352,7809,358,7809,364,7809,374,7809,384,7809,394,7809,398,7809,410,7809,412,7809,414,7809,426,7809,434,7809,446,7809,473,7809,475,7809,509,7809,524,7809,529,7809,533,7809,539,7809,542,7810,25,7810,55,7810,59,7810,77,7810,79,7810,103,7810,105,7810,141,7810,145,7810,155,7810,160,7810,202,7810,204,7810,238,7810,256,7810,260,7810,288,7810,294,7810,306,7810,308,7810,326,7810,330,7810,334,7810,336,7810,344,7810,346,7810,350,7810,352,7810,358,7810,364,7810,374,7810,384,7810,394,7810,398,7810,410,7810,412,7810,414,7810,426,7810,434,7810,446,7810,473,7810,475,7810,509,7810,524,7810,529,7810,533,7810,539,7810,542,7811,524,7811,533,7811,539,7812,25,7812,55,7812,59,7812,77,7812,79,7812,103,7812,105,7812,141,7812,145,7812,155,7812,160,7812,202,7812,204,7812,238,7812,256,7812,260,7812,288,7812,294,7812,306,7812,308,7812,326,7812,330,7812,334,7812,336,7812,344,7812,346,7812,350,7812,352,7812,358,7812,364,7812,374,7812,384,7812,394,7812,398,7812,410,7812,412,7812,414,7812,426,7812,434,7812,446,7812,473,7812,475,7812,509,7812,524,7812,529,7812,533,7812,539,7812,542,7813,524,7813,533,7813,539,7814,25,7814,55,7814,59,7814,77,7814,79,7814,103,7814,105,7814,141,7814,145,7814,155,7814,160,7814,202,7814,204,7814,238,7814,256,7814,260,7814,288,7814,294,7814,306,7814,308,7814,326,7814,330,7814,334,7814,336,7814,344,7814,346,7814,350,7814,352,7814,358,7814,364,7814,374,7814,384,7814,394,7814,398,7814,410,7814,412,7814,414,7814,426,7814,434,7814,446,7814,473,7814,475,7814,509,7814,524,7814,529,7814,533,7814,539,7814,542,7815,25,7815,55,7815,59,7815,77,7815,79,7815,103,7815,105,7815,141,7815,145,7815,155,7815,160,7815,202,7815,204,7815,238,7815,256,7815,260,7815,288,7815,294,7815,306,7815,308,7815,326,7815,330,7815,334,7815,336,7815,344,7815,346,7815,350,7815,352,7815,358,7815,364,7815,374,7815,384,7815,394,7815,398,7815,410,7815,412,7815,414,7815,426,7815,434,7815,446,7815,473,7815,475,7815,509,7815,524,7815,529,7815,533,7815,539,7815,542,7818,23,7819,23,7826,25,7826,55,7826,59,7826,77,7826,79,7826,103,7826,105,7826,141,7826,145,7826,155,7826,160,7826,202,7826,204,7826,238,7826,256,7826,260,7826,288,7826,294,7826,306,7826,308,7826,326,7826,330,7826,334,7826,336,7826,344,7826,346,7826,350,7826,352,7826,358,7826,364,7826,374,7826,384,7826,394,7826,398,7826,410,7826,412,7826,414,7826,426,7826,434,7826,446,7826,473,7826,475,7826,509,7826,529,7826,542,7827,25,7827,55,7827,59,7827,77,7827,79,7827,103,7827,105,7827,141,7827,145,7827,155,7827,160,7827,202,7827,204,7827,238,7827,256,7827,260,7827,288,7827,294,7827,306,7827,308,7827,326,7827,330,7827,334,7827,336,7827,344,7827,346,7827,350,7827,352,7827,358,7827,364,7827,374,7827,384,7827,394,7827,398,7827,410,7827,412,7827,414,7827,426,7827,434,7827,446,7827,473,7827,475,7827,509,7827,529,7827,542,7828,25,7828,55,7828,59,7828,77,7828,79,7828,103,7828,105,7828,141,7828,145,7828,155,7828,160,7828,202,7828,204,7828,238,7828,256,7828,260,7828,288,7828,294,7828,306,7828,308,7828,326,7828,330,7828,334,7828,336,7828,344,7828,346,7828,350,7828,352,7828,358,7828,364,7828,374,7828,384,7828,394,7828,398,7828,410,7828,412,7828,414,7828,426,7828,434,7828,446,7828,473,7828,475,7828,509,7828,529,7828,542,7829,25,7829,55,7829,59,7829,77,7829,79,7829,103,7829,105,7829,141,7829,145,7829,155,7829,160,7829,202,7829,204,7829,238,7829,256,7829,260,7829,288,7829,294,7829,306,7829,308,7829,326,7829,330,7829,334,7829,336,7829,344,7829,346,7829,350,7829,352,7829,358,7829,364,7829,374,7829,384,7829,394,7829,398,7829,410,7829,412,7829,414,7829,426,7829,434,7829,446,7829,473,7829,475,7829,509,7829,529,7829,542,7830,25,7830,55,7830,59,7830,77,7830,79,7830,103,7830,105,7830,141,7830,145,7830,155,7830,160,7830,202,7830,204,7830,238,7830,256,7830,260,7830,288,7830,294,7830,306,7830,308,7830,326,7830,330,7830,334,7830,336,7830,344,7830,346,7830,350,7830,352,7830,358,7830,364,7830,374,7830,384,7830,394,7830,398,7830,410,7830,412,7830,414,7830,426,7830,434,7830,446,7830,473,7830,475,7830,509,7830,529,7830,542,7831,25,7831,55,7831,59,7831,77,7831,79,7831,103,7831,105,7831,141,7831,145,7831,155,7831,160,7831,202,7831,204,7831,238,7831,256,7831,260,7831,288,7831,294,7831,306,7831,308,7831,326,7831,330,7831,334,7831,336,7831,344,7831,346,7831,350,7831,352,7831,358,7831,364,7831,374,7831,384,7831,394,7831,398,7831,410,7831,412,7831,414,7831,426,7831,434,7831,446,7831,473,7831,475,7831,509,7831,529,7831,542,7832,25,7832,55,7832,59,7832,77,7832,79,7832,103,7832,105,7832,141,7832,145,7832,155,7832,160,7832,202,7832,204,7832,238,7832,256,7832,260,7832,288,7832,294,7832,306,7832,308,7832,326,7832,330,7832,334,7832,336,7832,344,7832,346,7832,350,7832,352,7832,358,7832,364,7832,374,7832,384,7832,394,7832,398,7832,410,7832,412,7832,414,7832,426,7832,434,7832,446,7832,473,7832,475,7832,509,7832,529,7832,542,7833,25,7833,55,7833,59,7833,77,7833,79,7833,103,7833,105,7833,141,7833,145,7833,155,7833,160,7833,202,7833,204,7833,238,7833,256,7833,260,7833,288,7833,294,7833,306,7833,308,7833,326,7833,330,7833,334,7833,336,7833,344,7833,346,7833,350,7833,352,7833,358,7833,364,7833,374,7833,384,7833,394,7833,398,7833,410,7833,412,7833,414,7833,426,7833,434,7833,446,7833,473,7833,475,7833,509,7833,529,7833,542,7834,25,7834,55,7834,59,7834,77,7834,79,7834,103,7834,105,7834,141,7834,145,7834,155,7834,160,7834,202,7834,204,7834,238,7834,256,7834,260,7834,288,7834,294,7834,306,7834,308,7834,326,7834,330,7834,334,7834,336,7834,344,7834,346,7834,350,7834,352,7834,358,7834,364,7834,374,7834,384,7834,394,7834,398,7834,410,7834,412,7834,414,7834,426,7834,434,7834,446,7834,473,7834,475,7834,509,7834,529,7834,542,7835,25,7835,55,7835,59,7835,77,7835,79,7835,103,7835,105,7835,141,7835,145,7835,155,7835,160,7835,202,7835,204,7835,238,7835,256,7835,260,7835,288,7835,294,7835,306,7835,308,7835,326,7835,330,7835,334,7835,336,7835,344,7835,346,7835,350,7835,352,7835,358,7835,364,7835,374,7835,384,7835,394,7835,398,7835,410,7835,412,7835,414,7835,426,7835,434,7835,446,7835,473,7835,475,7835,509,7835,529,7835,542,7836,25,7836,55,7836,59,7836,77,7836,79,7836,103,7836,105,7836,141,7836,145,7836,155,7836,160,7836,202,7836,204,7836,238,7836,256,7836,260,7836,288,7836,294,7836,306,7836,308,7836,326,7836,330,7836,334,7836,336,7836,344,7836,346,7836,350,7836,352,7836,358,7836,364,7836,374,7836,384,7836,394,7836,398,7836,410,7836,412,7836,414,7836,426,7836,434,7836,446,7836,473,7836,475,7836,509,7836,529,7836,542,7837,25,7837,55,7837,59,7837,77,7837,79,7837,103,7837,105,7837,141,7837,145,7837,155,7837,160,7837,202,7837,204,7837,238,7837,256,7837,260,7837,288,7837,294,7837,306,7837,308,7837,326,7837,330,7837,334,7837,336,7837,344,7837,346,7837,350,7837,352,7837,358,7837,364,7837,374,7837,384,7837,394,7837,398,7837,410,7837,412,7837,414,7837,426,7837,434,7837,446,7837,473,7837,475,7837,509,7837,529,7837,542,7838,25,7838,55,7838,59,7838,77,7838,79,7838,103,7838,105,7838,141,7838,145,7838,155,7838,160,7838,202,7838,204,7838,238,7838,256,7838,260,7838,288,7838,294,7838,306,7838,308,7838,326,7838,330,7838,334,7838,336,7838,344,7838,346,7838,350,7838,352,7838,358,7838,364,7838,374,7838,384,7838,394,7838,398,7838,410,7838,412,7838,414,7838,426,7838,434,7838,446,7838,473,7838,475,7838,509,7838,529,7838,542,7843,25,7843,55,7843,59,7843,77,7843,79,7843,103,7843,105,7843,141,7843,145,7843,155,7843,160,7843,202,7843,204,7843,238,7843,256,7843,260,7843,288,7843,294,7843,306,7843,308,7843,326,7843,330,7843,334,7843,336,7843,344,7843,346,7843,350,7843,352,7843,358,7843,364,7843,374,7843,384,7843,394,7843,398,7843,410,7843,412,7843,414,7843,426,7843,434,7843,446,7843,473,7843,475,7843,509,7843,529,7843,542,7844,25,7844,55,7844,59,7844,77,7844,79,7844,103,7844,105,7844,141,7844,145,7844,155,7844,160,7844,202,7844,204,7844,238,7844,256,7844,260,7844,288,7844,294,7844,306,7844,308,7844,326,7844,330,7844,334,7844,336,7844,344,7844,346,7844,350,7844,352,7844,358,7844,364,7844,374,7844,384,7844,394,7844,398,7844,410,7844,412,7844,414,7844,426,7844,434,7844,446,7844,473,7844,475,7844,509,7844,529,7844,542,7845,25,7845,55,7845,59,7845,77,7845,79,7845,103,7845,105,7845,141,7845,145,7845,155,7845,160,7845,202,7845,204,7845,238,7845,256,7845,260,7845,288,7845,294,7845,306,7845,308,7845,326,7845,330,7845,334,7845,336,7845,344,7845,346,7845,350,7845,352,7845,358,7845,364,7845,374,7845,384,7845,394,7845,398,7845,410,7845,412,7845,414,7845,426,7845,434,7845,446,7845,473,7845,475,7845,509,7845,529,7845,542,7846,25,7846,55,7846,59,7846,77,7846,79,7846,103,7846,105,7846,141,7846,145,7846,155,7846,160,7846,202,7846,204,7846,238,7846,256,7846,260,7846,288,7846,294,7846,306,7846,308,7846,326,7846,330,7846,334,7846,336,7846,344,7846,346,7846,350,7846,352,7846,358,7846,364,7846,374,7846,384,7846,394,7846,398,7846,410,7846,412,7846,414,7846,426,7846,434,7846,446,7846,473,7846,475,7846,509,7846,529,7846,542,7847,25,7847,55,7847,59,7847,77,7847,79,7847,103,7847,105,7847,141,7847,145,7847,155,7847,160,7847,202,7847,204,7847,238,7847,256,7847,260,7847,288,7847,294,7847,306,7847,308,7847,326,7847,330,7847,334,7847,336,7847,344,7847,346,7847,350,7847,352,7847,358,7847,364,7847,374,7847,384,7847,394,7847,398,7847,410,7847,412,7847,414,7847,426,7847,434,7847,446,7847,473,7847,475,7847,509,7847,529,7847,542,7848,25,7848,55,7848,59,7848,77,7848,79,7848,103,7848,105,7848,141,7848,145,7848,155,7848,160,7848,202,7848,204,7848,238,7848,256,7848,260,7848,288,7848,294,7848,306,7848,308,7848,326,7848,330,7848,334,7848,336,7848,344,7848,346,7848,350,7848,352,7848,358,7848,364,7848,374,7848,384,7848,394,7848,398,7848,410,7848,412,7848,414,7848,426,7848,434,7848,446,7848,473,7848,475,7848,509,7848,529,7848,542,7849,25,7849,55,7849,59,7849,77,7849,79,7849,103,7849,105,7849,141,7849,145,7849,155,7849,160,7849,202,7849,204,7849,238,7849,256,7849,260,7849,288,7849,294,7849,306,7849,308,7849,326,7849,330,7849,334,7849,336,7849,344,7849,346,7849,350,7849,352,7849,358,7849,364,7849,374,7849,384,7849,394,7849,398,7849,410,7849,412,7849,414,7849,426,7849,434,7849,446,7849,473,7849,475,7849,509,7849,529,7849,542,7850,25,7850,55,7850,59,7850,77,7850,79,7850,103,7850,105,7850,141,7850,145,7850,155,7850,160,7850,202,7850,204,7850,238,7850,256,7850,260,7850,288,7850,294,7850,306,7850,308,7850,326,7850,330,7850,334,7850,336,7850,344,7850,346,7850,350,7850,352,7850,358,7850,364,7850,374,7850,384,7850,394,7850,398,7850,410,7850,412,7850,414,7850,426,7850,434,7850,446,7850,473,7850,475,7850,509,7850,529,7850,542,7851,542,7852,542,7853,25,7853,55,7853,59,7853,77,7853,79,7853,103,7853,105,7853,141,7853,145,7853,155,7853,160,7853,202,7853,204,7853,238,7853,256,7853,260,7853,288,7853,294,7853,306,7853,308,7853,326,7853,330,7853,334,7853,336,7853,344,7853,346,7853,350,7853,352,7853,358,7853,364,7853,374,7853,384,7853,394,7853,398,7853,410,7853,412,7853,414,7853,426,7853,434,7853,446,7853,473,7853,475,7853,509,7853,529,7853,542,7854,25,7854,55,7854,59,7854,77,7854,79,7854,103,7854,105,7854,141,7854,145,7854,155,7854,160,7854,202,7854,204,7854,238,7854,256,7854,260,7854,288,7854,294,7854,306,7854,308,7854,326,7854,330,7854,334,7854,336,7854,344,7854,346,7854,350,7854,352,7854,358,7854,364,7854,374,7854,384,7854,394,7854,398,7854,410,7854,412,7854,414,7854,426,7854,434,7854,446,7854,473,7854,475,7854,509,7854,529,7854,542,7855,25,7855,55,7855,59,7855,77,7855,79,7855,103,7855,105,7855,141,7855,145,7855,155,7855,160,7855,202,7855,204,7855,238,7855,256,7855,260,7855,288,7855,294,7855,306,7855,308,7855,326,7855,330,7855,334,7855,336,7855,344,7855,346,7855,350,7855,352,7855,358,7855,364,7855,374,7855,384,7855,394,7855,398,7855,410,7855,412,7855,414,7855,426,7855,434,7855,446,7855,473,7855,475,7855,509,7855,529,7855,542,7856,25,7856,55,7856,59,7856,77,7856,79,7856,103,7856,105,7856,141,7856,145,7856,155,7856,160,7856,202,7856,204,7856,238,7856,256,7856,260,7856,288,7856,294,7856,306,7856,308,7856,326,7856,330,7856,334,7856,336,7856,344,7856,346,7856,350,7856,352,7856,358,7856,364,7856,374,7856,384,7856,394,7856,398,7856,410,7856,412,7856,414,7856,426,7856,434,7856,446,7856,473,7856,475,7856,509,7856,529,7856,542,7857,25,7857,55,7857,59,7857,77,7857,79,7857,103,7857,105,7857,141,7857,145,7857,155,7857,160,7857,202,7857,204,7857,238,7857,256,7857,260,7857,288,7857,294,7857,306,7857,308,7857,326,7857,330,7857,334,7857,336,7857,344,7857,346,7857,350,7857,352,7857,358,7857,364,7857,374,7857,384,7857,394,7857,398,7857,410,7857,412,7857,414,7857,426,7857,434,7857,446,7857,473,7857,475,7857,509,7857,529,7857,542,7858,25,7858,55,7858,59,7858,77,7858,79,7858,103,7858,105,7858,141,7858,145,7858,155,7858,160,7858,202,7858,204,7858,238,7858,256,7858,260,7858,288,7858,294,7858,306,7858,308,7858,326,7858,330,7858,334,7858,336,7858,344,7858,346,7858,350,7858,352,7858,358,7858,364,7858,374,7858,384,7858,394,7858,398,7858,410,7858,412,7858,414,7858,426,7858,434,7858,446,7858,473,7858,475,7858,509,7858,529,7858,542,7859,542,7860,25,7860,55,7860,59,7860,77,7860,79,7860,103,7860,105,7860,141,7860,145,7860,155,7860,160,7860,202,7860,204,7860,238,7860,256,7860,260,7860,288,7860,294,7860,306,7860,308,7860,326,7860,330,7860,334,7860,336,7860,344,7860,346,7860,350,7860,352,7860,358,7860,364,7860,374,7860,384,7860,394,7860,398,7860,410,7860,412,7860,414,7860,426,7860,434,7860,446,7860,473,7860,475,7860,509,7860,529,7860,542,7861,542,7862,542,7863,25,7863,55,7863,59,7863,77,7863,79,7863,103,7863,105,7863,141,7863,145,7863,155,7863,160,7863,202,7863,204,7863,238,7863,256,7863,260,7863,288,7863,294,7863,306,7863,308,7863,326,7863,330,7863,334,7863,336,7863,344,7863,346,7863,350,7863,352,7863,358,7863,364,7863,374,7863,384,7863,394,7863,398,7863,410,7863,412,7863,414,7863,426,7863,434,7863,446,7863,473,7863,475,7863,509,7863,529,7863,542,7864,25,7864,55,7864,59,7864,77,7864,79,7864,103,7864,105,7864,141,7864,145,7864,155,7864,160,7864,202,7864,204,7864,238,7864,256,7864,260,7864,288,7864,294,7864,306,7864,308,7864,326,7864,330,7864,334,7864,336,7864,344,7864,346,7864,350,7864,352,7864,358,7864,364,7864,374,7864,384,7864,394,7864,398,7864,410,7864,412,7864,414,7864,426,7864,434,7864,446,7864,473,7864,475,7864,509,7864,529,7864,542,7865,25,7865,55,7865,59,7865,77,7865,79,7865,103,7865,105,7865,141,7865,145,7865,155,7865,160,7865,202,7865,204,7865,238,7865,256,7865,260,7865,288,7865,294,7865,306,7865,308,7865,326,7865,330,7865,334,7865,336,7865,344,7865,346,7865,350,7865,352,7865,358,7865,364,7865,374,7865,384,7865,394,7865,398,7865,410,7865,412,7865,414,7865,426,7865,434,7865,446,7865,473,7865,475,7865,509,7865,529,7865,542,7866,25,7866,55,7866,59,7866,77,7866,79,7866,103,7866,105,7866,141,7866,145,7866,155,7866,160,7866,202,7866,204,7866,238,7866,256,7866,260,7866,288,7866,294,7866,306,7866,308,7866,326,7866,330,7866,334,7866,336,7866,344,7866,346,7866,350,7866,352,7866,358,7866,364,7866,374,7866,384,7866,394,7866,398,7866,410,7866,412,7866,414,7866,426,7866,434,7866,446,7866,473,7866,475,7866,509,7866,529,7866,542,7867,25,7867,55,7867,59,7867,77,7867,79,7867,103,7867,105,7867,141,7867,145,7867,155,7867,160,7867,202,7867,204,7867,238,7867,256,7867,260,7867,288,7867,294,7867,306,7867,308,7867,326,7867,330,7867,334,7867,336,7867,344,7867,346,7867,350,7867,352,7867,358,7867,364,7867,374,7867,384,7867,394,7867,398,7867,410,7867,412,7867,414,7867,426,7867,434,7867,446,7867,473,7867,475,7867,509,7867,529,7867,542,7868,25,7868,55,7868,59,7868,77,7868,79,7868,103,7868,105,7868,141,7868,145,7868,155,7868,160,7868,202,7868,204,7868,238,7868,256,7868,260,7868,288,7868,294,7868,306,7868,308,7868,326,7868,330,7868,334,7868,336,7868,344,7868,346,7868,350,7868,352,7868,358,7868,364,7868,374,7868,384,7868,394,7868,398,7868,410,7868,412,7868,414,7868,426,7868,434,7868,446,7868,473,7868,475,7868,509,7868,529,7868,542,7869,25,7869,55,7869,59,7869,77,7869,79,7869,103,7869,105,7869,141,7869,145,7869,155,7869,160,7869,202,7869,204,7869,238,7869,256,7869,260,7869,288,7869,294,7869,306,7869,308,7869,326,7869,330,7869,334,7869,336,7869,344,7869,346,7869,350,7869,352,7869,358,7869,364,7869,374,7869,384,7869,394,7869,398,7869,410,7869,412,7869,414,7869,426,7869,434,7869,446,7869,473,7869,475,7869,509,7869,529,7869,542,7870,25,7870,55,7870,59,7870,77,7870,79,7870,103,7870,105,7870,141,7870,145,7870,155,7870,160,7870,202,7870,204,7870,238,7870,256,7870,260,7870,288,7870,294,7870,306,7870,308,7870,326,7870,330,7870,334,7870,336,7870,344,7870,346,7870,350,7870,352,7870,358,7870,364,7870,374,7870,384,7870,394,7870,398,7870,410,7870,412,7870,414,7870,426,7870,434,7870,446,7870,473,7870,475,7870,509,7870,529,7870,542,7871,25,7871,55,7871,59,7871,77,7871,79,7871,103,7871,105,7871,141,7871,145,7871,155,7871,160,7871,202,7871,204,7871,238,7871,256,7871,260,7871,288,7871,294,7871,306,7871,308,7871,326,7871,330,7871,334,7871,336,7871,344,7871,346,7871,350,7871,352,7871,358,7871,364,7871,374,7871,384,7871,394,7871,398,7871,410,7871,412,7871,414,7871,426,7871,434,7871,446,7871,473,7871,475,7871,509,7871,529,7871,542,7872,25,7872,55,7872,59,7872,77,7872,79,7872,103,7872,105,7872,141,7872,145,7872,155,7872,160,7872,202,7872,204,7872,238,7872,256,7872,260,7872,288,7872,294,7872,306,7872,308,7872,326,7872,330,7872,334,7872,336,7872,344,7872,346,7872,350,7872,352,7872,358,7872,364,7872,374,7872,384,7872,394,7872,398,7872,410,7872,412,7872,414,7872,426,7872,434,7872,446,7872,473,7872,475,7872,509,7872,529,7872,542,7873,529,7873,542,7874,25,7874,55,7874,59,7874,77,7874,79,7874,103,7874,105,7874,141,7874,145,7874,155,7874,160,7874,202,7874,204,7874,238,7874,256,7874,260,7874,288,7874,294,7874,306,7874,308,7874,326,7874,330,7874,334,7874,336,7874,344,7874,346,7874,350,7874,352,7874,358,7874,364,7874,374,7874,384,7874,394,7874,398,7874,410,7874,412,7874,414,7874,426,7874,434,7874,446,7874,473,7874,475,7874,509,7874,529,7874,542,7886,17,7886,25,7886,27,7886,29,7886,31,7886,33,7886,35,7886,37,7886,39,7886,41,7886,43,7886,45,7886,47,7886,48,7886,49,7886,50,7886,51,7886,53,7886,55,7886,57,7886,59,7886,61,7886,63,7886,65,7886,67,7886,69,7886,71,7886,73,7886,75,7886,77,7886,79,7886,81,7886,83,7886,85,7886,87,7886,89,7886,91,7886,93,7886,95,7886,97,7886,99,7886,101,7886,103,7886,105,7886,107,7886,109,7886,111,7886,113,7886,115,7886,117,7886,119,7886,121,7886,123,7886,125,7886,127,7886,129,7886,131,7886,133,7886,135,7886,137,7886,139,7886,141,7886,143,7886,145,7886,147,7886,149,7886,151,7886,153,7886,155,7886,157,7886,159,7886,160,7886,162,7886,164,7886,166,7886,168,7886,170,7886,172,7886,174,7886,176,7886,178,7886,180,7886,182,7886,184,7886,186,7886,188,7886,190,7886,192,7886,194,7886,196,7886,198,7886,200,7886,202,7886,204,7886,206,7886,208,7886,210,7886,212,7886,214,7886,216,7886,218,7886,220,7886,222,7886,224,7886,226,7886,228,7886,230,7886,232,7886,234,7886,236,7886,238,7886,240,7886,242,7886,244,7886,246,7886,248,7886,250,7886,252,7886,254,7886,256,7886,258,7886,260,7886,262,7886,264,7886,266,7886,268,7886,270,7886,272,7886,274,7886,276,7886,278,7886,280,7886,282,7886,284,7886,286,7886,288,7886,290,7886,292,7886,294,7886,296,7886,298,7886,300,7886,302,7886,304,7886,306,7886,308,7886,310,7886,312,7886,314,7886,316,7886,318,7886,320,7886,322,7886,324,7886,326,7886,328,7886,330,7886,332,7886,334,7886,336,7886,338,7886,340,7886,342,7886,344,7886,346,7886,348,7886,350,7886,352,7886,354,7886,356,7886,358,7886,360,7886,362,7886,364,7886,366,7886,368,7886,370,7886,372,7886,374,7886,376,7886,378,7886,380,7886,382,7886,384,7886,386,7886,388,7886,390,7886,392,7886,394,7886,396,7886,398,7886,400,7886,402,7886,404,7886,406,7886,408,7886,410,7886,412,7886,414,7886,416,7886,418,7886,420,7886,422,7886,424,7886,426,7886,428,7886,430,7886,432,7886,434,7886,436,7886,438,7886,440,7886,442,7886,444,7886,446,7886,448,7886,450,7886,451,7886,452,7886,453,7886,454,7886,455,7886,457,7886,459,7886,461,7886,463,7886,464,7886,466,7886,467,7886,469,7886,471,7886,473,7886,475,7886,477,7886,479,7886,481,7886,483,7886,485,7886,487,7886,489,7886,491,7886,493,7886,495,7886,497,7886,499,7886,501,7886,503,7886,505,7886,507,7886,509,7886,511,7886,513,7886,515,7886,517,7886,519,7886,521,7886,528,7895,17],"member":[26,25,56,55,60,59,78,77,80,79,104,103,106,105,142,141,146,145,156,155,161,160,203,202,205,204,239,238,257,256,261,260,289,288,295,294,307,306,309,308,327,326,331,330,335,334,337,336,345,344,347,346,351,350,353,352,359,358,365,364,375,374,385,384,395,394,399,398,411,410,413,412,415,414,427,426,435,434,447,446,474,473,476,475,510,509,525,524,534,533,540,539,550,17,551,18,552,18,553,18,554,18,555,18,556,18,557,18,558,18,559,18,560,18,561,18,562,18,563,18,564,18,565,18,566,18,567,18,568,18,569,19,570,19,571,20,572,20,573,20,574,20,575,20,576,20,577,20,578,20,579,20,580,20,581,20,582,20,583,20,584,20,585,20,586,20,587,20,588,20,589,20,590,20,591,20,592,20,593,20,594,20,595,20,596,20,597,20,598,20,599,20,600,20,601,20,602,20,603,20,604,20,605,20,606,20,607,20,608,20,609,20,610,20,611,20,612,20,613,20,614,20,615,20,616,20,617,20,618,20,619,20,620,20,621,20,622,20,623,20,624,20,625,20,626,20,627,20,628,20,629,20,630,20,631,20,632,20,633,20,634,20,635,20,636,20,637,20,638,20,639,20,640,20,641,20,642,20,643,20,644,20,645,20,646,20,647,20,648,20,649,20,650,20,651,20,652,20,653,20,654,20,655,20,656,20,657,20,658,20,659,20,660,20,661,20,662,20,663,20,664,20,665,20,666,20,667,20,668,20,669,20,670,20,671,20,672,20,673,20,674,20,675,20,676,20,677,20,678,20,679,20,680,20,681,20,682,20,683,20,684,20,685,20,686,20,687,20,688,20,689,20,690,20,691,20,692,20,693,20,694,20,695,20,696,20,697,20,698,20,699,20,700,20,701,20,702,20,703,20,704,20,705,20,706,20,707,20,708,20,709,20,710,20,711,20,712,20,713,20,714,20,715,20,716,20,717,20,718,20,719,20,720,20,721,20,722,20,723,20,724,20,725,20,726,20,727,20,728,20,729,20,730,20,731,20,732,20,733,20,734,20,735,20,736,20,737,20,738,20,739,20,740,20,741,20,742,20,743,20,744,20,745,20,746,20,747,20,748,20,749,20,750,20,751,20,752,20,753,20,754,20,755,20,756,20,757,20,758,20,759,20,760,20,761,20,762,20,763,20,764,20,765,20,766,20,767,20,768,20,769,20,770,20,771,20,772,20,773,20,774,20,775,20,776,20,777,20,778,20,779,20,780,20,781,20,782,20,783,20,784,20,785,20,786,20,787,20,788,20,789,20,790,20,791,20,792,20,793,20,794,20,795,20,796,20,797,20,798,20,799,20,800,20,801,20,802,20,803,20,804,20,805,20,806,20,807,20,808,20,809,20,810,20,811,20,812,20,813,20,814,20,815,20,816,20,817,20,818,20,819,20,820,20,821,20,822,20,823,20,824,20,825,22,826,22,827,22,828,22,829,22,830,22,831,22,832,22,833,22,834,22,835,22,836,22,837,23,838,23,839,24,840,24,841,24,842,24,843,24,844,24,845,24,846,24,847,24,848,24,849,24,850,24,851,24,852,24,853,24,854,24,855,24,856,24,857,24,858,24,859,24,860,24,861,24,862,24,863,24,864,24,865,24,866,24,867,24,868,24,869,24,870,24,871,24,872,24,873,24,874,24,875,24,876,24,877,24,878,24,879,24,880,24,881,24,882,24,883,24,884,24,885,24,886,24,887,24,888,24,889,24,890,24,891,24,892,24,893,24,894,24,895,24,896,24,897,24,898,24,899,24,900,24,901,24,902,24,903,24,904,24,905,24,906,24,907,24,908,24,909,24,910,24,911,24,912,24,913,24,914,24,915,24,916,24,917,24,918,24,919,24,920,24,921,24,922,24,923,24,924,24,925,24,926,24,927,24,928,24,929,24,930,24,931,24,932,24,933,24,934,24,935,24,936,24,937,24,938,24,939,24,940,24,941,24,942,24,943,24,944,24,945,24,946,24,947,24,948,24,949,24,950,24,951,24,952,24,953,24,954,24,955,24,956,24,957,24,958,24,959,25,960,27,961,27,962,29,963,29,964,31,965,31,966,33,967,33,968,35,969,35,970,37,971,37,972,39,973,39,974,41,975,41,976,43,977,43,978,45,979,45,980,47,981,48,982,49,983,50,984,51,985,51,986,53,987,53,988,55,989,57,990,57,991,59,992,61,993,61,994,63,995,63,996,65,997,65,998,67,999,67,1000,69,1001,69,1002,71,1003,71,1004,73,1005,73,1006,75,1007,75,1008,77,1009,79,1010,81,1011,81,1012,83,1013,83,1014,85,1015,85,1016,87,1017,87,1018,89,1019,89,1020,91,1021,91,1022,93,1023,93,1024,95,1025,95,1026,97,1027,97,1028,99,1029,99,1030,101,1031,101,1032,103,1033,105,1034,107,1035,107,1036,109,1037,109,1038,111,1039,111,1040,113,1041,113,1042,115,1043,115,1044,117,1045,117,1046,119,1047,119,1048,121,1049,121,1050,123,1051,123,1052,125,1053,125,1054,127,1055,127,1056,129,1057,129,1058,131,1059,131,1060,133,1061,133,1062,135,1063,135,1064,137,1065,137,1066,139,1067,139,1068,141,1069,143,1070,143,1071,145,1072,147,1073,147,1074,149,1075,149,1076,151,1077,151,1078,153,1079,153,1080,155,1081,157,1082,157,1083,159,1084,160,1085,162,1086,162,1087,164,1088,164,1089,166,1090,166,1091,168,1092,168,1093,170,1094,170,1095,172,1096,172,1097,174,1098,174,1099,176,1100,176,1101,178,1102,178,1103,180,1104,180,1105,182,1106,182,1107,184,1108,184,1109,186,1110,186,1111,188,1112,188,1113,190,1114,190,1115,192,1116,192,1117,194,1118,194,1119,196,1120,196,1121,198,1122,198,1123,200,1124,200,1125,202,1126,204,1127,206,1128,206,1129,208,1130,208,1131,210,1132,210,1133,212,1134,212,1135,214,1136,214,1137,216,1138,216,1139,218,1140,218,1141,220,1142,220,1143,222,1144,222,1145,224,1146,224,1147,226,1148,226,1149,228,1150,228,1151,230,1152,230,1153,232,1154,232,1155,234,1156,234,1157,236,1158,236,1159,238,1160,240,1161,240,1162,242,1163,242,1164,244,1165,244,1166,246,1167,246,1168,248,1169,248,1170,250,1171,250,1172,252,1173,252,1174,254,1175,254,1176,256,1177,258,1178,258,1179,260,1180,262,1181,262,1182,264,1183,264,1184,266,1185,266,1186,268,1187,268,1188,270,1189,270,1190,272,1191,272,1192,274,1193,274,1194,276,1195,276,1196,278,1197,278,1198,280,1199,280,1200,282,1201,282,1202,284,1203,284,1204,286,1205,286,1206,288,1207,290,1208,290,1209,292,1210,292,1211,294,1212,296,1213,296,1214,298,1215,298,1216,300,1217,300,1218,302,1219,302,1220,304,1221,304,1222,306,1223,308,1224,310,1225,310,1226,312,1227,312,1228,314,1229,314,1230,316,1231,316,1232,318,1233,318,1234,320,1235,320,1236,322,1237,322,1238,324,1239,324,1240,326,1241,328,1242,328,1243,330,1244,332,1245,332,1246,334,1247,336,1248,338,1249,338,1250,340,1251,340,1252,342,1253,342,1254,344,1255,346,1256,348,1257,348,1258,350,1259,352,1260,354,1261,354,1262,356,1263,356,1264,358,1265,360,1266,360,1267,362,1268,362,1269,364,1270,366,1271,366,1272,368,1273,368,1274,370,1275,370,1276,372,1277,372,1278,374,1279,376,1280,376,1281,378,1282,378,1283,380,1284,380,1285,382,1286,382,1287,384,1288,386,1289,386,1290,388,1291,388,1292,390,1293,390,1294,392,1295,392,1296,394,1297,396,1298,396,1299,398,1300,400,1301,400,1302,402,1303,402,1304,404,1305,404,1306,406,1307,406,1308,408,1309,408,1310,410,1311,412,1312,414,1313,416,1314,416,1315,418,1316,418,1317,420,1318,420,1319,422,1320,422,1321,424,1322,424,1323,426,1324,428,1325,428,1326,430,1327,430,1328,432,1329,432,1330,434,1331,436,1332,436,1333,438,1334,438,1335,440,1336,440,1337,442,1338,442,1339,444,1340,444,1341,446,1342,448,1343,448,1344,450,1345,450,1346,450,1347,451,1348,451,1349,451,1350,452,1351,452,1352,452,1353,453,1354,453,1355,453,1356,454,1357,455,1358,455,1359,457,1360,457,1361,459,1362,459,1363,461,1364,461,1365,463,1366,463,1367,463,1368,464,1369,464,1370,466,1371,467,1372,467,1373,469,1374,469,1375,471,1376,471,1377,473,1378,475,1379,477,1380,477,1381,479,1382,479,1383,481,1384,481,1385,483,1386,483,1387,485,1388,485,1389,487,1390,487,1391,489,1392,489,1393,491,1394,491,1395,493,1396,493,1397,495,1398,495,1399,497,1400,497,1401,499,1402,499,1403,501,1404,501,1405,503,1406,503,1407,505,1408,505,1409,507,1410,507,1411,509,1412,511,1413,511,1414,513,1415,513,1416,515,1417,515,1418,517,1419,517,1420,519,1421,519,1422,521,1423,521,1424,521,1425,521,1426,523,1427,524,1428,544,1430,545,1431,530,1432,530,1433,531,1434,531,1435,532,1436,532,1437,533,1438,535,1439,535,1440,535,1441,23,1442,536,1443,537,1444,537,1445,537,1446,538,1447,539,1448,541,1449,547,1450,547,1451,548,1452,548,1453,549,1454,542,1455,542,1456,25,1457,55,1458,59,1459,77,1460,79,1461,103,1462,105,1463,141,1464,145,1465,155,1466,160,1467,202,1468,204,1469,238,1470,256,1471,260,1472,288,1473,294,1474,306,1475,308,1476,326,1477,330,1478,334,1479,336,1480,344,1481,346,1482,350,1483,352,1484,358,1485,364,1486,374,1487,384,1488,394,1489,398,1490,410,1491,412,1492,414,1493,426,1494,434,1495,446,1496,473,1497,475,1498,509,1499,529,1500,542,1501,532,1502,542,1503,25,1504,25,1505,25,1506,25,1507,25,1508,25,1509,25,1510,27,1511,27,1512,27,1513,27,1514,27,1515,27,1516,27,1517,29,1518,29,1519,29,1520,29,1521,31,1522,31,1523,31,1524,31,1525,33,1526,33,1527,33,1528,33,1529,33,1530,33,1531,33,1532,33,1533,33,1534,33,1535,35,1536,35,1537,35,1538,35,1539,35,1540,37,1541,37,1542,37,1543,37,1544,37,1545,37,1546,37,1547,37,1548,37,1549,39,1550,39,1551,39,1552,39,1553,39,1554,41,1555,41,1556,41,1557,41,1558,41,1559,41,1560,43,1561,43,1562,43,1563,43,1564,43,1565,45,1566,45,1567,45,1568,45,1569,45,1570,45,1571,45,1572,47,1573,47,1574,48,1575,48,1576,49,1577,49,1578,50,1579,50,1580,51,1581,51,1582,51,1583,51,1584,53,1585,53,1586,53,1587,53,1588,53,1589,53,1590,53,1591,53,1592,53,1593,55,1594,55,1595,55,1596,55,1597,55,1598,55,1599,55,1600,57,1601,57,1602,57,1603,57,1604,59,1605,59,1606,59,1607,59,1608,59,1609,59,1610,59,1611,61,1612,61,1613,61,1614,61,1615,63,1616,63,1617,63,1618,63,1619,65,1620,65,1621,65,1622,65,1623,65,1624,65,1625,67,1626,67,1627,67,1628,67,1629,67,1630,67,1631,69,1632,69,1633,69,1634,69,1635,69,1636,69,1637,69,1638,69,1639,69,1640,69,1641,71,1642,71,1643,71,1644,71,1645,71,1646,71,1647,71,1648,71,1649,71,1650,73,1651,73,1652,73,1653,73,1654,75,1655,75,1656,75,1657,75,1658,75,1659,77,1660,77,1661,77,1662,77,1663,77,1664,77,1665,77,1666,79,1667,79,1668,79,1669,79,1670,79,1671,79,1672,79,1673,81,1674,81,1675,81,1676,81,1677,81,1678,81,1679,81,1680,83,1681,83,1682,83,1683,83,1684,85,1685,85,1686,85,1687,85,1688,85,1689,85,1690,85,1691,85,1692,85,1693,85,1694,87,1695,87,1696,87,1697,87,1698,89,1699,89,1700,89,1701,91,1702,91,1703,91,1704,93,1705,93,1706,93,1707,93,1708,93,1709,95,1710,95,1711,95,1712,95,1713,95,1714,95,1715,97,1716,97,1717,97,1718,97,1719,97,1720,99,1721,99,1722,99,1723,99,1724,99,1725,101,1726,101,1727,101,1728,101,1729,101,1730,103,1731,103,1732,103,1733,103,1734,103,1735,103,1736,103,1737,105,1738,105,1739,105,1740,105,1741,105,1742,105,1743,105,1744,107,1745,107,1746,107,1747,107,1748,107,1749,109,1750,109,1751,109,1752,109,1753,109,1754,109,1755,109,1756,109,1757,109,1758,111,1759,111,1760,111,1761,111,1762,113,1763,113,1764,113,1765,113,1766,115,1767,115,1768,115,1769,115,1772,117,1773,117,1774,117,1775,119,1776,119,1777,119,1778,121,1779,121,1780,121,1781,123,1782,123,1783,123,1784,123,1785,123,1786,123,1787,123,1788,123,1789,123,1790,123,1791,125,1792,125,1793,125,1794,125,1795,125,1796,125,1797,125,1798,125,1799,127,1800,127,1801,127,1802,127,1803,127,1804,127,1805,127,1806,127,1807,127,1809,129,1810,129,1811,129,1812,131,1813,131,1814,131,1815,131,1816,131,1817,133,1818,133,1819,133,1820,133,1821,133,1822,135,1823,135,1824,135,1825,135,1826,135,1827,135,1828,135,1829,137,1830,137,1831,137,1833,139,1834,139,1835,139,1836,139,1837,141,1838,141,1839,141,1840,141,1841,141,1842,141,1843,141,1844,143,1845,143,1846,143,1847,143,1848,143,1849,145,1850,145,1851,145,1852,145,1853,145,1854,145,1855,145,1856,147,1857,147,1858,147,1859,149,1860,149,1861,149,1862,149,1863,149,1864,149,1865,149,1866,151,1867,151,1868,151,1869,151,1870,151,1871,151,1872,153,1873,153,1874,153,1875,153,1876,155,1877,155,1878,155,1879,155,1880,155,1881,155,1882,155,1883,157,1884,157,1885,157,1886,157,1887,159,1888,159,1890,160,1891,160,1892,160,1893,160,1894,160,1895,160,1896,160,1897,162,1898,162,1899,162,1900,164,1901,164,1902,164,1903,164,1904,164,1905,164,1906,164,1907,166,1908,166,1909,166,1910,168,1911,168,1912,168,1913,168,1914,168,1915,168,1916,170,1917,170,1918,170,1919,170,1920,170,1921,170,1922,172,1923,172,1924,172,1925,174,1926,174,1927,174,1928,174,1929,176,1930,176,1931,176,1932,176,1933,178,1934,178,1935,178,1936,178,1937,178,1938,178,1939,178,1940,178,1941,178,1942,178,1943,178,1944,180,1945,180,1946,180,1947,182,1948,182,1949,182,1950,182,1951,182,1952,184,1953,184,1954,184,1955,184,1956,184,1957,184,1958,186,1959,186,1960,186,1961,186,1962,188,1963,188,1964,188,1965,188,1966,188,1967,190,1968,190,1969,190,1970,190,1971,190,1972,190,1973,190,1974,190,1975,192,1976,192,1977,192,1978,194,1979,194,1980,194,1981,196,1982,196,1983,196,1984,196,1985,196,1986,196,1987,196,1988,196,1989,198,1990,198,1991,198,1992,198,1993,198,1994,200,1995,200,1996,200,1997,200,1998,202,1999,202,2000,202,2001,202,2002,202,2003,202,2004,202,2005,204,2006,204,2007,204,2008,204,2009,204,2010,204,2011,204,2012,206,2013,206,2014,206,2015,206,2016,206,2017,206,2018,206,2019,206,2020,206,2021,208,2022,208,2023,208,2024,208,2025,210,2026,210,2027,210,2028,210,2029,212,2030,212,2031,212,2032,214,2033,214,2034,214,2035,214,2036,214,2037,214,2038,214,2039,214,2040,216,2041,216,2042,216,2043,216,2044,218,2045,218,2046,218,2047,218,2048,218,2049,218,2050,218,2051,220,2052,220,2053,220,2054,220,2055,220,2056,220,2057,222,2058,222,2059,222,2060,222,2061,222,2062,222,2063,222,2064,222,2065,224,2066,224,2067,224,2068,224,2069,226,2070,226,2071,226,2072,226,2073,226,2074,226,2075,228,2076,228,2077,228,2078,230,2079,230,2080,230,2081,230,2082,230,2083,230,2084,232,2085,232,2086,232,2087,232,2088,232,2089,232,2090,232,2091,232,2092,232,2093,232,2094,234,2095,234,2096,234,2097,234,2098,234,2099,236,2100,236,2101,236,2102,236,2103,236,2104,236,2105,238,2106,238,2107,238,2108,238,2109,238,2110,238,2111,238,2112,240,2113,240,2114,240,2115,240,2116,240,2117,242,2118,242,2119,242,2120,242,2121,242,2122,242,2123,244,2124,244,2125,244,2126,244,2127,244,2128,244,2129,246,2130,246,2131,246,2132,248,2133,248,2134,248,2135,248,2136,248,2137,248,2138,248,2139,250,2140,250,2141,250,2142,250,2143,250,2144,250,2145,250,2146,250,2147,250,2148,250,2149,252,2150,252,2151,252,2152,252,2153,252,2154,252,2155,254,2156,254,2157,254,2158,256,2159,256,2160,256,2161,256,2162,256,2163,256,2164,256,2165,258,2166,258,2167,258,2168,258,2169,260,2170,260,2171,260,2172,260,2173,260,2174,260,2175,260,2176,262,2177,262,2178,262,2179,262,2180,264,2181,264,2182,264,2183,264,2184,264,2185,264,2186,266,2187,266,2188,266,2189,268,2190,268,2191,268,2192,270,2193,270,2194,270,2195,270,2196,270,2197,270,2198,272,2199,272,2200,272,2201,272,2202,272,2203,272,2204,272,2206,274,2207,274,2208,274,2209,274,2210,274,2211,274,2212,274,2213,274,2214,274,2215,276,2216,276,2217,276,2218,278,2219,278,2220,278,2221,280,2222,280,2223,280,2224,280,2225,280,2226,280,2227,280,2228,282,2229,282,2230,282,2231,284,2232,284,2233,284,2234,284,2235,286,2236,286,2237,286,2238,286,2239,288,2240,288,2241,288,2242,288,2243,288,2244,288,2245,288,2246,290,2247,290,2248,290,2249,292,2250,292,2251,292,2252,292,2253,294,2254,294,2255,294,2256,294,2257,294,2258,294,2259,294,2260,296,2261,296,2262,296,2263,298,2264,298,2265,298,2266,298,2267,300,2268,300,2269,300,2270,300,2271,302,2272,302,2273,302,2274,302,2275,302,2276,302,2277,304,2278,304,2279,304,2280,304,2281,306,2282,306,2283,306,2284,306,2285,306,2286,306,2287,306,2288,308,2289,308,2290,308,2291,308,2292,308,2293,308,2294,308,2295,310,2296,310,2297,310,2298,310,2299,312,2300,312,2301,312,2302,312,2303,312,2304,312,2305,314,2306,314,2307,314,2308,314,2309,314,2310,314,2311,314,2312,314,2313,314,2314,316,2315,316,2316,316,2317,316,2318,316,2319,318,2320,318,2321,318,2322,318,2323,318,2324,318,2325,320,2326,320,2327,320,2328,320,2329,320,2330,320,2331,322,2332,322,2333,322,2334,322,2335,324,2336,324,2337,324,2338,324,2339,326,2340,326,2341,326,2342,326,2343,326,2344,326,2345,326,2346,328,2347,328,2348,328,2349,330,2350,330,2351,330,2352,330,2353,330,2354,330,2355,330,2356,332,2357,332,2358,332,2359,332,2360,334,2361,334,2362,334,2363,334,2364,334,2365,334,2366,334,2367,336,2368,336,2369,336,2370,336,2371,336,2372,336,2373,336,2374,338,2375,338,2376,338,2377,338,2378,338,2379,338,2380,340,2381,340,2382,340,2383,340,2384,342,2385,342,2386,342,2387,342,2388,344,2389,344,2390,344,2391,344,2392,344,2393,344,2394,344,2395,346,2396,346,2397,346,2398,346,2399,346,2400,346,2401,346,2402,348,2403,348,2404,348,2405,348,2406,348,2407,348,2408,350,2409,350,2410,350,2411,350,2412,350,2413,350,2414,350,2415,352,2416,352,2417,352,2418,352,2419,352,2420,352,2421,352,2422,354,2423,354,2424,354,2425,356,2426,356,2427,356,2428,358,2429,358,2430,358,2431,358,2432,358,2433,358,2434,358,2435,360,2436,360,2437,360,2438,360,2439,360,2440,362,2441,362,2442,362,2443,362,2444,362,2445,362,2446,362,2447,362,2448,364,2449,364,2450,364,2451,364,2452,364,2453,364,2454,364,2455,366,2456,366,2457,366,2458,366,2459,368,2460,368,2461,368,2462,368,2463,370,2464,370,2465,370,2466,370,2467,372,2468,372,2469,372,2470,374,2471,374,2472,374,2473,374,2474,374,2475,374,2476,374,2477,376,2478,376,2479,376,2480,376,2481,378,2482,378,2483,378,2484,378,2485,378,2486,380,2487,380,2488,380,2489,380,2490,382,2491,382,2492,382,2493,382,2494,382,2495,384,2496,384,2497,384,2498,384,2499,384,2500,384,2501,384,2502,386,2503,386,2504,386,2505,386,2506,386,2507,386,2508,388,2509,388,2510,388,2511,388,2512,388,2513,390,2514,390,2515,390,2516,390,2517,390,2518,392,2519,392,2520,392,2521,392,2522,392,2523,392,2524,392,2525,392,2526,392,2527,394,2528,394,2529,394,2530,394,2531,394,2532,394,2533,394,2534,396,2535,396,2536,396,2537,396,2538,396,2539,398,2540,398,2541,398,2542,398,2543,398,2544,398,2545,398,2546,400,2547,400,2548,400,2549,400,2550,400,2551,400,2552,402,2553,402,2554,402,2555,402,2556,402,2557,402,2558,404,2559,404,2560,404,2561,404,2562,404,2563,404,2564,406,2565,406,2566,406,2567,406,2568,408,2569,408,2570,408,2571,408,2572,408,2573,410,2574,410,2575,410,2576,410,2577,410,2578,410,2579,410,2580,412,2581,412,2582,412,2583,412,2584,412,2585,412,2586,412,2587,414,2588,414,2589,414,2590,414,2591,414,2592,414,2593,414,2594,416,2595,416,2596,416,2597,416,2598,418,2599,418,2600,418,2601,418,2602,420,2603,420,2604,420,2605,420,2606,420,2607,422,2608,422,2609,422,2610,422,2611,422,2612,424,2613,424,2614,424,2615,424,2616,424,2617,426,2618,426,2619,426,2620,426,2621,426,2622,426,2623,426,2624,428,2625,428,2626,428,2627,428,2628,428,2629,428,2630,430,2631,430,2632,430,2633,430,2634,430,2635,432,2636,432,2637,432,2638,432,2639,432,2640,434,2641,434,2642,434,2643,434,2644,434,2645,434,2646,434,2647,436,2648,436,2649,436,2650,436,2651,436,2652,438,2653,438,2654,438,2655,438,2656,440,2657,440,2658,440,2659,440,2660,440,2661,442,2662,442,2663,442,2664,442,2665,444,2666,444,2667,444,2668,444,2669,444,2670,444,2671,444,2672,446,2673,446,2674,446,2675,446,2676,446,2677,446,2678,446,2679,448,2680,448,2681,448,2682,448,2683,448,2684,448,2685,448,2686,448,2687,448,2688,450,2689,450,2690,451,2691,451,2692,452,2693,452,2694,453,2695,453,2696,454,2697,454,2698,454,2699,454,2700,454,2701,454,2702,454,2703,454,2704,454,2705,454,2706,454,2707,454,2708,455,2709,455,2710,455,2711,455,2712,455,2715,457,2716,457,2717,457,2718,457,2719,457,2720,457,2721,457,2722,459,2723,459,2724,459,2725,459,2726,459,2727,459,2728,459,2729,459,2730,459,2731,461,2732,461,2733,461,2734,461,2737,463,2738,463,2739,464,2740,464,2741,464,2742,464,2743,464,2744,466,2745,466,2746,467,2747,467,2748,467,2749,467,2750,467,2751,469,2752,469,2753,469,2754,469,2755,471,2756,471,2757,471,2758,471,2759,471,2760,471,2761,471,2762,471,2763,471,2764,471,2765,473,2766,473,2767,473,2768,473,2769,473,2770,473,2771,473,2772,475,2773,475,2774,475,2775,475,2776,475,2777,475,2778,475,2779,477,2780,477,2781,477,2782,479,2783,479,2784,479,2785,479,2786,479,2787,481,2788,481,2789,481,2790,481,2791,481,2792,483,2793,483,2794,483,2795,483,2796,483,2797,485,2798,485,2799,485,2800,485,2801,485,2802,485,2803,485,2804,485,2805,487,2806,487,2807,487,2808,487,2809,489,2810,489,2811,489,2812,489,2813,491,2814,491,2815,491,2816,491,2817,491,2818,493,2819,493,2820,493,2821,493,2822,493,2823,493,2824,493,2825,493,2826,493,2827,493,2828,495,2829,495,2830,495,2831,495,2832,495,2836,497,2837,497,2838,497,2839,497,2840,499,2841,499,2842,499,2843,499,2844,501,2845,501,2846,501,2847,501,2848,501,2849,501,2850,501,2851,501,2852,501,2853,501,2854,501,2855,501,2856,501,2857,501,2858,503,2859,503,2860,503,2861,503,2862,503,2863,503,2864,505,2865,505,2866,505,2867,505,2868,507,2869,507,2870,507,2871,507,2872,509,2873,509,2874,509,2875,509,2876,509,2877,509,2878,509,2879,511,2880,511,2881,511,2882,511,2883,511,2884,513,2885,513,2886,513,2887,513,2888,513,2889,515,2890,515,2891,515,2892,515,2893,515,2894,515,2895,515,2896,517,2897,517,2898,517,2899,517,2900,517,2901,517,2902,519,2903,519,2904,519,2905,519,2906,521,2907,521,2909,17,2910,526,2911,526,2912,526,2913,526,2914,526,2915,528,2916,528,2917,528,2918,528,2919,528,2920,528,2921,528,2922,528,2923,528,2924,528,2925,528,2926,528,2927,528,2928,528,2929,528,2930,528,2931,528,2932,528,2933,528,2934,528,2935,528,2936,528,2937,528,2938,528,2939,528,2940,528,2941,528,2942,528,2943,528,2944,528,2945,528,2946,528,2947,528,2948,528,2949,528,2950,528,2951,528,2952,528,2953,528,2954,528,2955,528,2956,528,2957,528,2958,528,2959,528,2960,528,2961,528,2962,528,2963,528,2964,528,2965,528,2966,528,2967,528,2968,528,2969,528,2970,528,2971,528,2972,528,2973,528,2974,528,2975,528,2976,528,2977,528,2978,528,2979,528,2980,528,2981,528,2982,528,2983,528,2984,528,2985,528,2986,528,2987,528,2988,528,2989,528,2990,528,2991,528,2992,528,2993,528,2994,528,2995,528,2996,528,2997,528,2998,528,2999,528,3000,528,3001,528,3002,528,3003,528,3004,528,3005,528,3006,528,3007,528,3008,528,3009,528,3010,528,3011,528,3012,528,3013,528,3014,528,3015,528,3016,528,3017,528,3018,528,3019,528,3020,528,3021,528,3022,528,3023,528,3024,528,3025,528,3026,528,3027,528,3028,528,3029,528,3030,528,3031,528,3032,528,3033,528,3034,528,3035,528,3036,528,3037,528,3038,528,3039,528,3040,528,3041,528,3042,528,3043,528,3044,528,3045,528,3046,528,3047,528,3048,528,3049,528,3050,528,3051,528,3052,528,3053,528,3054,528,3055,528,3056,528,3057,528,3058,528,3059,528,3060,528,3061,528,3062,528,3063,528,3064,528,3065,528,3066,528,3067,528,3068,528,3069,528,3070,528,3071,528,3072,528,3073,528,3074,528,3075,528,3076,528,3077,528,3078,528,3079,528,3080,528,3081,528,3082,528,3083,528,3084,528,3085,528,3086,528,3087,528,3088,528,3089,528,3090,528,3091,528,3092,528,3093,528,3094,528,3095,528,3096,528,3097,528,3098,528,3099,528,3100,528,3101,528,3102,528,3103,528,3104,528,3105,528,3106,528,3107,528,3108,528,3109,528,3110,528,3111,528,3112,528,3113,528,3114,528,3115,528,3116,528,3117,528,3118,528,3119,528,3120,528,3121,528,3122,528,3123,528,3124,528,3125,528,3126,528,3127,528,3128,528,3129,528,3130,528,3131,528,3132,528,3133,528,3134,528,3135,528,3136,528,3137,528,3138,528,3139,528,3140,528,3141,528,3142,528,3143,528,3144,528,3145,528,3146,528,3147,528,3148,528,3149,528,3150,528,3151,528,3152,528,3153,528,3154,528,3155,528,3156,528,3157,528,3158,528,3159,528,3160,528,3161,528,3162,528,3163,528,3164,528,3165,528,3166,528,3167,528,3168,528,3169,528,3170,528,3171,528,3172,528,3173,528,3174,528,3175,528,3176,528,3177,528,3178,528,3179,528,3180,528,3181,528,3182,528,3183,528,3184,528,3185,528,3186,528,3187,528,3188,528,3189,528,3190,528,3191,528,3192,528,3193,528,3194,528,3195,528,3196,528,3197,528,3198,528,3199,528,3200,528,3201,528,3202,528,3203,528,3204,528,3205,528,3206,528,3207,528,3208,528,3209,528,3210,528,3211,528,3212,528,3213,528,3214,528,3215,528,3216,528,3217,528,3218,528,3219,528,3220,528,3221,528,3222,528,3223,528,3224,528,3225,528,3226,528,3227,528,3228,528,3229,528,3230,528,3231,528,3232,528,3233,528,3234,528,3235,528,3236,528,3237,528,3238,528,3239,528,3240,528,3241,528,3242,528,3243,528,3244,528,3245,528,3246,528,3247,528,3248,528,3249,528,3250,528,3251,528,3252,528,3253,528,3254,528,3255,528,3256,528,3257,528,3258,528,3259,528,3260,528,3261,528,3262,528,3263,528,3264,528,3265,528,3266,528,3267,528,3268,528,3269,528,3270,528,3271,528,3272,528,3273,528,3274,528,3275,528,3276,528,3277,528,3278,528,3279,528,3280,528,3281,528,3282,528,3283,528,3284,528,3285,528,3286,528,3287,528,3288,528,3289,528,3290,528,3291,528,3292,528,3293,528,3294,528,3295,528,3296,528,3297,528,3298,528,3299,528,3300,528,3301,528,3302,528,3303,528,3304,528,3305,528,3306,528,3307,528,3308,528,3309,528,3310,528,3311,528,3312,528,3313,528,3314,528,3315,528,3316,528,3317,528,3318,528,3319,528,3320,528,3321,528,3322,528,3323,528,3324,528,3325,528,3326,528,3327,528,3328,528,3329,528,3330,528,3331,528,3332,528,3333,528,3334,528,3335,528,3336,528,3337,528,3338,528,3339,528,3340,528,3341,528,3342,528,3343,528,3344,528,3345,528,3346,528,3347,528,3348,528,3349,528,3350,528,3351,528,3352,528,3353,528,3354,528,3355,528,3356,528,3357,528,3358,528,3359,528,3360,528,3361,528,3362,528,3363,528,3364,528,3365,528,3366,528,3367,528,3368,528,3369,528,3370,528,3371,528,3372,528,3373,528,3374,528,3375,528,3376,528,3377,528,3378,528,3379,528,3380,528,3381,528,3382,528,3383,528,3384,528,3385,528,3386,528,3387,528,3388,528,3389,528,3390,528,3391,528,3392,528,3393,528,3394,528,3395,528,3396,528,3397,528,3398,528,3399,528,3400,528,3401,528,3402,528,3403,528,3404,528,3405,528,3406,528,3407,528,3408,528,3409,528,3410,528,3411,528,3412,528,3413,528,3414,528,3415,528,3416,528,3417,528,3418,528,3419,528,3420,529,3421,529,3423,15,3424,15,3425,15,3426,15,3427,15,3428,15,3429,15,3430,15,3431,15,3432,15,3433,15,3434,15,3435,15,3436,15,3437,15,3438,15,3439,15,3440,15,3441,15,3442,15,3443,15,3444,15,3445,15,3446,15,3447,15,3448,15,3449,15,3450,15,3451,15,3452,15,3453,15,3454,15,3455,15,3456,15,3457,530,3458,530,3459,530,3460,530,3461,530,3462,530,3463,531,3464,531,3465,531,3466,22,3467,22,3468,532,3469,533,3470,535,3471,535,3472,535,3473,535,3474,535,3475,536,3476,536,3477,536,3478,536,3479,537,3480,538,3481,539,3482,549,3483,542,3484,542,3485,542,3486,542,3487,24,3488,21,3489,21,3490,21,3491,21,3492,21,3493,21,3494,21,3495,21,3496,21,3497,21,3498,21,3499,21,3500,21,3501,21,3502,21,3503,21,3504,21,3505,21,3506,21,3507,21,3508,21,3509,21,3510,21,3511,21,3512,21,3513,21,3514,21,3515,21,3516,21,3517,21,3518,21,3519,21,3520,21,3521,21,3522,21,3523,21,3524,21,3525,21,3526,21,3527,21,3528,21,3529,21,3530,21,3531,21,3532,21,3533,21,3534,21,3535,21,3536,21,3537,21,3538,21,3539,21,3540,21,3541,21,3542,21,3543,21,3544,21,3545,21,3546,21,3547,21,3548,21,3549,21,3550,21,3551,21,3552,21,3553,21,3554,21,3555,21,3556,21,3557,21,3558,21,3559,21,3560,21,3561,21,3562,21,3563,21,3564,21,3565,21,3566,21,3567,21,3568,21,3569,21,3570,21,3571,21,3572,21,3573,21,3574,21,3575,21,3576,21,3577,21,3578,21,3579,21,3580,21,3581,21,3582,21,3583,21,3584,21,3585,21,3586,21,3587,21,3588,21,3589,21,3590,21,3591,21,3592,21,3593,21,3594,21,3595,21,3596,21,3597,21,3598,21,3599,21,3600,21,3601,21,3602,21,3603,21,3604,21,3605,21,3606,21,3607,21,3608,21,3609,21,3610,21,3611,21,3612,21,3613,21,3614,21,3615,21,3616,21,3617,21,3618,21,3619,21,3620,21,3621,21,3622,21,3623,21,3624,21,3625,21,3626,21,3627,21,3628,21,3629,21,3630,21,3631,21,3632,21,3633,21,3634,21,3635,21,3636,21,3637,21,3638,21,3639,21,3640,21,3641,21,3642,21,3643,21,3644,21,3645,21,3646,21,3647,21,3648,21,3649,21,3650,21,3651,21,3652,21,3653,21,3654,21,3655,21,3656,21,3657,21,3658,21,3659,21,3660,21,3661,21,3662,21,3663,21,3664,21,3665,21,3666,21,3667,21,3668,21,3669,21,3670,21,3671,21,3672,21,3673,21,3674,21,3675,21,3676,21,3677,21,3678,21,3679,21,3680,21,3681,21,3682,21,3683,21,3684,21,3685,21,3686,21,3687,21,3688,21,3689,21,3690,21,3691,21,3692,21,3693,21,3694,21,3695,21,3696,21,3697,21,3698,21,3699,21,3700,21,3701,21,3702,21,3703,21,3704,21,3705,21,3706,21,3707,21,3708,21,3709,21,3710,21,3711,21,3712,21,3713,21,3714,21,3715,21,3716,21,3717,21,3718,21,3719,21,3720,21,3721,21,3722,21,3723,21,3724,21,3725,21,3726,21,3727,21,3728,21,3729,21,3730,21,3731,21,3732,21,3733,21,3734,21,3735,21,3736,21,3737,21,3738,21,3739,21,3740,21,3741,21,3742,21,3743,21,3744,21,3745,21,3746,21,3747,21,3748,21,3749,21,3750,21,3751,21,3752,21,3753,21,3754,21,3755,21,3756,21,3757,21,3758,21,3759,21,3760,21,3761,21,3762,21,3763,21,3764,21,3765,21,3766,21,3767,21,3768,21,3769,21,3770,21,3771,21,3772,21,3773,21,3774,21,3775,21,3776,21,3777,21,3778,21,3779,21,3780,21,3781,21,3782,21,3783,21,3784,21,3785,21,3786,21,3787,21,3788,21,3789,21,3790,21,3791,21,3792,21,3793,21,3794,21,3795,21,3796,21,3797,21,3798,21,3799,21,3800,21,3801,21,3802,21,3803,21,3804,21,3805,21,3806,21,3807,21,3808,21,3809,21,3810,21,3811,21,3812,21,3813,21,3814,21,3815,21,3816,21,3817,21,3818,21,3819,21,3820,21,3821,21,3822,21,3823,21,3824,21,3825,21,3826,21,3827,21,3828,21,3829,21,3830,21,3831,21,3832,21,3833,21,3834,21,3835,21,3836,21,3837,21,3838,21,3839,21,3840,21,3841,21,3842,21,3843,21,3844,21,3845,21,3846,21,3847,21,3848,21,3849,21,3850,21,3851,21,3852,21,3853,21,3854,21,3855,21,3856,21,3857,21,3858,21,3859,21,3860,21,3861,21,3862,21,3863,21,3864,21,3865,21,3866,21,3867,21,3868,21,3869,21,3870,21,3871,21,3872,21,3873,21,3874,21,3875,21,3876,21,3877,21,3878,21,3879,21,3880,21,3881,21,3882,21,3883,21,3884,21,3885,21,3886,21,3887,21,3888,21,3889,21,3890,21,3891,21,3892,21,3893,21,3894,21,3895,21,3896,21,3897,21,3898,21,3899,21,3900,21,3901,21,3902,21,3903,21,3904,21,3905,21,3906,21,3907,21,3908,21,3909,21,3910,21,3911,21,3912,21,3913,21,3914,21,3915,21,3916,21,3917,21,3918,21,3919,21,3920,21,3921,21,3922,21,3923,21,3924,21,3925,21,3926,21,3927,21,3928,21,3929,21,3930,21,3931,21,3932,21,3933,21,3934,21,3935,21,3936,21,3937,21,3938,21,3939,21,3940,21,3941,21,3942,21,3943,21,3944,21,3945,21,3946,21,3947,21,3948,21,3949,21,3950,21,3951,21,3952,21,3953,21,3954,21,3955,21,3956,21,3957,21,3958,21,3959,21,3960,21,3961,21,3962,21,3963,21,3964,21,3965,21,3966,21,3967,21,3968,21,3969,21,3970,21,3971,21,3972,21,3973,21,3974,21,3975,21,3976,21,3977,21,3978,21,3979,21,3980,21,3981,21,3982,21,3983,21,3984,21,3985,21,3986,21,3987,21,3988,21,3989,21,3990,21,3991,21,3992,21,3993,21,3994,21,3995,21,3996,21,3997,21,3998,21,3999,21,4000,21,4001,21,4002,21,4003,21,4004,21,4005,21,4006,21,4007,21,4008,21,4009,21,4010,21,4011,21,4012,21,4013,21,4014,21,4015,21,4016,21,4017,21,4018,21,4019,21,4020,21,4021,21,4022,21,4023,21,4024,21,4025,21,4026,21,4027,21,4028,21,4029,21,4030,21,4031,21,4032,21,4033,21,4034,21,4035,21,4036,21,4037,21,4038,21,4039,21,4040,21,4041,21,4042,21,4043,21,4044,21,4045,21,4046,21,4047,21,4048,21,4049,21,4050,21,4051,21,4052,21,4053,21,4054,21,4055,21,4056,21,4057,21,4058,21,4059,21,4060,21,4061,21,4062,21,4063,21,4064,21,4065,21,4066,21,4067,21,4068,21,4069,21,4070,21,4071,21,4072,21,4073,21,4074,21,4075,21,4076,21,4077,21,4078,21,4079,21,4080,21,4081,21,4082,21,4083,21,4084,21,4085,21,4086,21,4087,21,4088,21,4089,21,4090,21,4091,21,4092,21,4093,21,4094,21,4095,21,4096,21,4097,21,4098,21,4099,21,4100,21,4101,21,4102,21,4103,21,4104,21,4105,21,4106,21,4107,21,4108,21,4109,21,4110,21,4111,21,4112,21,4113,21,4114,21,4115,546,4116,542,4117,542,4118,542,4119,542,4120,542,4121,542,4122,542,4123,542,4124,542,4125,542,4126,542,4127,542,4128,25,4129,25,4130,25,4131,25,4132,25,4133,25,4134,25,4135,25,4136,25,4137,25,4138,25,4139,26,4140,25,4141,25,4142,25,4143,25,4144,25,4145,27,4146,27,4147,27,4148,27,4149,27,4150,27,4151,27,4152,27,4153,28,4154,28,4155,28,4156,28,4157,28,4158,29,4159,29,4160,30,4161,30,4162,31,4163,31,4164,31,4165,32,4166,32,4167,33,4168,33,4169,33,4170,33,4171,33,4172,33,4173,33,4174,33,4175,33,4176,33,4177,34,4178,34,4179,34,4180,34,4181,34,4182,34,4183,34,4184,34,4185,35,4186,35,4187,35,4188,35,4189,36,4190,36,4191,36,4192,37,4193,37,4194,37,4195,37,4196,37,4197,37,4198,37,4199,37,4200,38,4201,38,4202,38,4203,38,4204,38,4205,38,4206,38,4207,39,4208,39,4209,39,4210,39,4211,40,4212,40,4213,40,4214,41,4215,41,4216,41,4217,41,4218,41,4219,42,4220,42,4221,42,4222,42,4223,43,4224,43,4225,43,4226,44,4227,44,4228,44,4229,45,4230,45,4231,45,4232,45,4233,45,4234,46,4235,46,4236,46,4237,46,4238,46,4239,51,4240,51,4241,52,4242,52,4243,53,4244,53,4245,53,4246,53,4247,53,4248,53,4249,53,4250,53,4251,54,4252,54,4253,54,4254,54,4255,54,4256,54,4257,54,4258,55,4259,55,4260,55,4261,55,4262,55,4263,55,4264,55,4265,55,4266,55,4267,55,4268,55,4269,56,4270,55,4271,55,4272,55,4273,55,4274,55,4275,57,4276,57,4277,58,4278,58,4279,59,4280,59,4281,59,4282,59,4283,59,4284,59,4285,59,4286,59,4287,59,4288,59,4289,59,4290,60,4291,59,4292,59,4293,59,4294,59,4295,59,4296,61,4297,61,4298,62,4299,62,4300,63,4301,63,4302,64,4303,64,4304,65,4305,65,4306,65,4307,65,4308,66,4309,66,4310,66,4311,66,4312,67,4313,67,4314,67,4315,67,4316,67,4317,67,4318,67,4319,68,4320,68,4321,68,4322,68,4323,69,4324,69,4325,69,4326,69,4327,69,4328,69,4329,69,4330,69,4331,69,4332,69,4333,70,4334,70,4335,70,4336,70,4337,70,4338,70,4339,70,4340,70,4341,71,4342,71,4343,71,4344,71,4345,71,4346,71,4347,71,4348,71,4349,72,4350,72,4351,72,4352,72,4353,72,4354,72,4355,72,4356,73,4357,73,4358,73,4359,74,4360,74,4361,75,4362,75,4363,75,4364,76,4365,76,4366,76,4367,77,4368,77,4369,77,4370,77,4371,77,4372,77,4373,77,4374,77,4375,77,4376,77,4377,77,4378,78,4379,77,4380,77,4381,77,4382,77,4383,77,4384,79,4385,79,4386,79,4387,79,4388,79,4389,79,4390,79,4391,79,4392,79,4393,79,4394,79,4395,80,4396,79,4397,79,4398,79,4399,79,4400,79,4401,81,4402,81,4403,81,4404,81,4405,81,4406,81,4407,81,4408,82,4409,82,4410,82,4411,82,4412,82,4413,83,4414,83,4415,84,4416,84,4417,85,4418,85,4419,85,4420,85,4421,85,4422,85,4423,85,4424,85,4425,85,4426,85,4427,86,4428,86,4429,86,4430,86,4431,86,4432,86,4433,86,4434,86,4435,87,4436,87,4437,88,4438,88,4439,89,4440,89,4441,90,4442,91,4443,92,4444,93,4445,93,4446,93,4447,93,4448,94,4449,94,4450,94,4451,95,4452,95,4453,95,4454,95,4455,95,4456,95,4457,95,4458,96,4459,96,4460,96,4461,96,4462,97,4463,97,4464,97,4465,98,4466,98,4467,98,4468,99,4469,99,4470,99,4471,99,4472,100,4473,100,4474,100,4475,101,4476,101,4477,101,4478,102,4479,102,4480,102,4481,103,4482,103,4483,103,4484,103,4485,103,4486,103,4487,103,4488,103,4489,103,4490,103,4491,103,4492,104,4493,103,4494,103,4495,103,4496,103,4497,103,4498,105,4499,105,4500,105,4501,105,4502,105,4503,105,4504,105,4505,105,4506,105,4507,105,4508,105,4509,106,4510,105,4511,105,4512,105,4513,105,4514,105,4515,107,4516,107,4517,107,4518,108,4519,108,4520,108,4521,109,4522,109,4523,109,4524,109,4525,109,4526,109,4527,109,4528,109,4529,109,4530,110,4531,110,4532,110,4533,110,4534,110,4535,110,4536,110,4537,111,4538,111,4539,112,4540,112,4541,113,4542,113,4543,114,4544,114,4545,115,4546,115,4547,116,4548,116,4551,117,4552,118,4553,119,4554,120,4555,121,4556,122,4557,123,4558,123,4559,123,4560,123,4561,123,4562,123,4563,123,4564,123,4565,123,4566,123,4567,124,4568,124,4569,124,4570,124,4571,124,4572,124,4573,124,4574,124,4575,125,4576,125,4577,125,4578,125,4579,125,4580,125,4581,125,4582,125,4583,126,4584,126,4585,126,4586,126,4587,126,4588,126,4589,127,4590,127,4591,127,4592,127,4593,127,4594,127,4595,127,4596,127,4597,127,4598,128,4599,128,4600,128,4601,128,4602,128,4603,128,4604,128,4606,129,4607,130,4608,131,4609,131,4610,131,4611,131,4612,132,4613,132,4614,132,4615,133,4616,133,4617,133,4618,134,4619,134,4620,134,4621,135,4622,135,4623,135,4624,135,4625,135,4626,136,4627,136,4628,136,4629,136,4630,136,4631,137,4632,138,4634,139,4635,139,4636,140,4637,140,4638,141,4639,141,4640,141,4641,141,4642,141,4643,141,4644,141,4645,141,4646,141,4647,141,4648,141,4649,142,4650,141,4651,141,4652,141,4653,141,4654,141,4655,143,4656,143,4657,143,4658,144,4659,144,4660,144,4661,145,4662,145,4663,145,4664,145,4665,145,4666,145,4667,145,4668,145,4669,145,4670,145,4671,145,4672,146,4673,145,4674,145,4675,145,4676,145,4677,145,4678,147,4679,148,4680,149,4681,149,4682,149,4683,149,4684,149,4685,150,4686,150,4687,150,4688,150,4689,150,4690,151,4691,151,4692,151,4693,151,4694,152,4695,152,4696,152,4697,152,4698,153,4699,153,4700,154,4701,154,4702,155,4703,155,4704,155,4705,155,4706,155,4707,155,4708,155,4709,155,4710,155,4711,155,4712,155,4713,156,4714,155,4715,155,4716,155,4717,155,4718,155,4719,157,4720,157,4721,158,4722,158,4724,160,4725,160,4726,160,4727,160,4728,160,4729,160,4730,160,4731,160,4732,160,4733,160,4734,160,4735,161,4736,160,4737,160,4738,160,4739,160,4740,160,4741,162,4742,162,4743,163,4744,164,4745,164,4746,164,4747,164,4748,164,4749,164,4750,165,4751,165,4752,165,4753,165,4754,165,4755,166,4756,167,4757,168,4758,168,4759,168,4760,168,4761,169,4762,169,4763,169,4764,169,4765,170,4766,170,4767,170,4768,170,4769,171,4770,171,4771,171,4772,171,4773,172,4774,173,4775,174,4776,174,4777,175,4778,175,4779,176,4780,176,4781,177,4782,177,4783,178,4784,178,4785,178,4786,178,4787,178,4788,178,4789,178,4790,178,4791,178,4792,178,4793,178,4794,179,4795,179,4796,179,4797,179,4798,179,4799,179,4800,179,4801,179,4802,179,4803,180,4804,181,4805,182,4806,182,4807,182,4808,182,4809,183,4810,183,4811,183,4812,184,4813,184,4814,184,4815,184,4816,184,4817,185,4818,185,4819,185,4820,185,4821,186,4822,186,4823,187,4824,187,4825,188,4826,188,4827,188,4828,188,4829,189,4830,189,4831,189,4832,190,4833,190,4834,190,4835,190,4836,190,4837,190,4838,191,4839,191,4840,191,4841,191,4842,191,4843,191,4844,192,4845,193,4846,194,4847,195,4848,196,4849,196,4850,196,4851,196,4852,196,4853,196,4854,197,4855,197,4856,197,4857,197,4858,197,4859,197,4860,198,4861,198,4862,198,4863,198,4864,199,4865,199,4866,199,4867,200,4868,200,4869,201,4870,201,4871,202,4872,202,4873,202,4874,202,4875,202,4876,202,4877,202,4878,202,4879,202,4880,202,4881,202,4882,203,4883,202,4884,202,4885,202,4886,202,4887,202,4888,204,4889,204,4890,204,4891,204,4892,204,4893,204,4894,204,4895,204,4896,204,4897,204,4898,204,4899,205,4900,204,4901,204,4902,204,4903,204,4904,204,4905,206,4906,206,4907,206,4908,206,4909,206,4910,206,4911,206,4912,206,4913,207,4914,207,4915,207,4916,207,4917,207,4918,207,4919,207,4920,208,4921,208,4922,209,4923,209,4924,210,4925,210,4926,211,4927,211,4928,212,4929,213,4930,214,4931,214,4932,214,4933,214,4934,214,4935,214,4936,214,4937,214,4938,215,4939,215,4940,215,4941,215,4942,215,4943,215,4944,216,4945,216,4946,217,4947,217,4948,218,4949,218,4950,218,4951,218,4952,218,4953,218,4954,219,4955,219,4956,219,4957,219,4958,219,4959,220,4960,220,4961,220,4962,220,4963,221,4964,221,4965,221,4966,221,4967,222,4968,222,4969,222,4970,222,4971,222,4972,222,4973,223,4974,223,4975,223,4976,223,4977,223,4978,223,4979,224,4980,224,4981,225,4982,225,4983,226,4984,226,4985,226,4986,226,4987,227,4988,227,4989,227,4990,227,4991,228,4992,229,4993,230,4994,230,4995,230,4996,230,4997,231,4998,231,4999,231,5000,231,5001,232,5002,232,5003,232,5004,232,5005,232,5006,232,5007,232,5008,232,5009,233,5010,233,5011,233,5012,233,5013,233,5014,233,5015,233,5016,233,5017,234,5018,234,5019,234,5020,235,5021,235,5022,235,5023,236,5024,236,5025,236,5026,236,5027,236,5028,237,5029,237,5030,237,5031,237,5032,238,5033,238,5034,238,5035,238,5036,238,5037,238,5038,238,5039,238,5040,238,5041,238,5042,238,5043,239,5044,238,5045,238,5046,238,5047,238,5048,238,5049,240,5050,240,5051,240,5052,240,5053,241,5054,241,5055,241,5056,242,5057,242,5058,242,5059,242,5060,242,5061,242,5062,243,5063,243,5064,243,5065,243,5066,244,5067,244,5068,244,5069,244,5070,245,5071,245,5072,245,5073,245,5074,246,5075,247,5076,248,5077,248,5078,248,5079,248,5080,248,5081,248,5082,249,5083,249,5084,249,5085,249,5086,249,5087,250,5088,250,5089,250,5090,250,5091,250,5092,250,5093,250,5094,250,5095,250,5096,251,5097,251,5098,251,5099,251,5100,251,5101,251,5102,251,5103,251,5104,252,5105,252,5106,252,5107,252,5108,253,5109,253,5110,253,5111,253,5112,254,5113,255,5114,256,5115,256,5116,256,5117,256,5118,256,5119,256,5120,256,5121,256,5122,256,5123,256,5124,256,5125,257,5126,256,5127,256,5128,256,5129,256,5130,256,5131,258,5132,258,5133,259,5134,259,5135,260,5136,260,5137,260,5138,260,5139,260,5140,260,5141,260,5142,260,5143,260,5144,260,5145,260,5146,261,5147,260,5148,260,5149,260,5150,260,5151,260,5152,262,5153,262,5154,263,5155,263,5156,264,5157,264,5158,264,5159,264,5160,264,5161,265,5162,265,5163,265,5164,265,5165,266,5166,267,5167,268,5168,269,5169,270,5170,270,5171,270,5172,270,5173,271,5174,271,5175,271,5176,271,5177,272,5178,272,5179,272,5180,272,5181,272,5182,272,5183,273,5184,273,5185,273,5186,273,5187,273,5189,274,5190,274,5191,274,5192,274,5193,274,5194,274,5195,274,5196,274,5197,274,5198,275,5199,275,5200,275,5201,275,5202,275,5203,275,5204,275,5205,276,5206,277,5207,278,5208,279,5209,280,5210,280,5211,280,5212,280,5213,280,5214,280,5215,281,5216,281,5217,281,5218,281,5219,281,5220,282,5221,283,5222,284,5223,284,5224,285,5225,285,5226,286,5227,286,5228,286,5229,287,5230,287,5231,288,5232,288,5233,288,5234,288,5235,288,5236,288,5237,288,5238,288,5239,288,5240,288,5241,288,5242,289,5243,288,5244,288,5245,288,5246,288,5247,288,5248,290,5249,291,5250,292,5251,292,5252,293,5253,293,5254,294,5255,294,5256,294,5257,294,5258,294,5259,294,5260,294,5261,294,5262,294,5263,294,5264,294,5265,295,5266,294,5267,294,5268,294,5269,294,5270,294,5271,296,5272,297,5273,298,5274,298,5275,299,5276,299,5277,300,5278,300,5279,301,5280,301,5281,302,5282,302,5283,302,5284,302,5285,303,5286,303,5287,303,5288,303,5289,304,5290,304,5291,305,5292,305,5293,306,5294,306,5295,306,5296,306,5297,306,5298,306,5299,306,5300,306,5301,306,5302,306,5303,306,5304,307,5305,306,5306,306,5307,306,5308,306,5309,306,5310,308,5311,308,5312,308,5313,308,5314,308,5315,308,5316,308,5317,308,5318,308,5319,308,5320,308,5321,309,5322,308,5323,308,5324,308,5325,308,5326,308,5327,310,5328,310,5329,311,5330,311,5331,312,5332,312,5333,312,5334,312,5335,313,5336,313,5337,313,5338,313,5339,314,5340,314,5341,314,5342,314,5343,314,5344,314,5345,314,5346,314,5347,314,5348,314,5349,315,5350,315,5351,315,5352,315,5353,315,5354,315,5355,315,5356,316,5357,316,5358,316,5359,317,5360,317,5361,317,5362,318,5363,318,5364,318,5365,318,5366,319,5367,319,5368,319,5369,319,5370,320,5371,320,5372,320,5373,320,5374,321,5375,321,5376,321,5377,321,5378,322,5379,322,5380,323,5381,323,5382,324,5383,324,5384,325,5385,325,5386,326,5387,326,5388,326,5389,326,5390,326,5391,326,5392,326,5393,326,5394,326,5395,326,5396,326,5397,327,5398,326,5399,326,5400,326,5401,326,5402,326,5403,328,5404,329,5405,330,5406,330,5407,330,5408,330,5409,330,5410,330,5411,330,5412,330,5413,330,5414,330,5415,330,5416,331,5417,330,5418,330,5419,330,5420,330,5421,330,5422,332,5423,332,5424,333,5425,333,5426,334,5427,334,5428,334,5429,334,5430,334,5431,334,5432,334,5433,334,5434,334,5435,334,5436,334,5437,335,5438,334,5439,334,5440,334,5441,334,5442,334,5443,336,5444,336,5445,336,5446,336,5447,336,5448,336,5449,336,5450,336,5451,336,5452,336,5453,336,5454,337,5455,336,5456,336,5457,336,5458,336,5459,336,5460,338,5461,338,5462,338,5463,338,5464,339,5465,339,5466,339,5467,339,5468,340,5469,340,5470,341,5471,341,5472,342,5473,342,5474,343,5475,343,5476,344,5477,344,5478,344,5479,344,5480,344,5481,344,5482,344,5483,344,5484,344,5485,344,5486,344,5487,345,5488,344,5489,344,5490,344,5491,344,5492,344,5493,346,5494,346,5495,346,5496,346,5497,346,5498,346,5499,346,5500,346,5501,346,5502,346,5503,346,5504,347,5505,346,5506,346,5507,346,5508,346,5509,346,5510,348,5511,348,5512,348,5513,348,5514,348,5515,349,5516,349,5517,349,5518,349,5519,350,5520,350,5521,350,5522,350,5523,350,5524,350,5525,350,5526,350,5527,350,5528,350,5529,350,5530,351,5531,350,5532,350,5533,350,5534,350,5535,350,5536,352,5537,352,5538,352,5539,352,5540,352,5541,352,5542,352,5543,352,5544,352,5545,352,5546,352,5547,353,5548,352,5549,352,5550,352,5551,352,5552,352,5553,354,5554,355,5555,356,5556,357,5557,358,5558,358,5559,358,5560,358,5561,358,5562,358,5563,358,5564,358,5565,358,5566,358,5567,358,5568,359,5569,358,5570,358,5571,358,5572,358,5573,358,5574,360,5575,360,5576,360,5577,360,5578,361,5579,361,5580,361,5581,362,5582,362,5583,362,5584,362,5585,362,5586,362,5587,362,5588,363,5589,363,5590,363,5591,363,5592,363,5593,363,5594,364,5595,364,5596,364,5597,364,5598,364,5599,364,5600,364,5601,364,5602,364,5603,364,5604,364,5605,365,5606,364,5607,364,5608,364,5609,364,5610,364,5611,366,5612,366,5613,367,5614,367,5615,368,5616,368,5617,368,5618,369,5619,369,5620,370,5621,370,5622,371,5623,371,5624,372,5625,373,5626,374,5627,374,5628,374,5629,374,5630,374,5631,374,5632,374,5633,374,5634,374,5635,374,5636,374,5637,375,5638,374,5639,374,5640,374,5641,374,5642,374,5643,376,5644,376,5645,377,5646,377,5647,378,5648,378,5649,378,5650,379,5651,379,5652,379,5653,380,5654,380,5655,381,5656,381,5657,382,5658,382,5659,382,5660,382,5661,383,5662,383,5663,383,5664,384,5665,384,5666,384,5667,384,5668,384,5669,384,5670,384,5671,384,5672,384,5673,384,5674,384,5675,385,5676,384,5677,384,5678,384,5679,384,5680,384,5681,386,5682,386,5683,386,5684,386,5685,387,5686,387,5687,387,5688,387,5689,388,5690,388,5691,388,5692,388,5693,389,5694,389,5695,389,5696,390,5697,390,5698,390,5699,390,5700,391,5701,391,5702,391,5703,392,5704,392,5705,392,5706,392,5707,392,5708,392,5709,392,5710,393,5711,393,5712,393,5713,393,5714,393,5715,393,5716,393,5717,394,5718,394,5719,394,5720,394,5721,394,5722,394,5723,394,5724,394,5725,394,5726,394,5727,394,5728,395,5729,394,5730,394,5731,394,5732,394,5733,394,5734,396,5735,396,5736,396,5737,396,5738,397,5739,397,5740,397,5741,398,5742,398,5743,398,5744,398,5745,398,5746,398,5747,398,5748,398,5749,398,5750,398,5751,398,5752,399,5753,398,5754,398,5755,398,5756,398,5757,398,5758,400,5759,400,5760,400,5761,400,5762,400,5763,401,5764,401,5765,401,5766,401,5767,402,5768,402,5769,402,5770,402,5771,403,5772,403,5773,403,5774,403,5775,404,5776,404,5777,404,5778,404,5779,405,5780,405,5781,405,5782,405,5783,406,5784,406,5785,407,5786,407,5787,408,5788,408,5789,408,5790,409,5791,409,5792,409,5793,410,5794,410,5795,410,5796,410,5797,410,5798,410,5799,410,5800,410,5801,410,5802,410,5803,410,5804,411,5805,410,5806,410,5807,410,5808,410,5809,410,5810,412,5811,412,5812,412,5813,412,5814,412,5815,412,5816,412,5817,412,5818,412,5819,412,5820,412,5821,413,5822,412,5823,412,5824,412,5825,412,5826,412,5827,414,5828,414,5829,414,5830,414,5831,414,5832,414,5833,414,5834,414,5835,414,5836,414,5837,414,5838,415,5839,414,5840,414,5841,414,5842,414,5843,414,5844,416,5845,416,5846,416,5847,417,5848,417,5849,418,5850,418,5851,419,5852,419,5853,420,5854,420,5855,420,5856,421,5857,421,5858,421,5859,422,5860,422,5861,422,5862,422,5863,423,5864,423,5865,423,5866,424,5867,424,5868,424,5869,424,5870,425,5871,425,5872,425,5873,426,5874,426,5875,426,5876,426,5877,426,5878,426,5879,426,5880,426,5881,426,5882,426,5883,426,5884,427,5885,426,5886,426,5887,426,5888,426,5889,426,5890,428,5891,428,5892,428,5893,428,5894,429,5895,429,5896,429,5897,429,5898,430,5899,430,5900,430,5901,431,5902,431,5903,431,5904,432,5905,432,5906,432,5907,433,5908,433,5909,433,5910,434,5911,434,5912,434,5913,434,5914,434,5915,434,5916,434,5917,434,5918,434,5919,434,5920,434,5921,435,5922,434,5923,434,5924,434,5925,434,5926,434,5927,436,5928,436,5929,436,5930,437,5931,437,5932,437,5933,438,5934,438,5935,439,5936,439,5937,440,5938,440,5939,440,5940,441,5941,441,5942,441,5943,442,5944,442,5945,443,5946,443,5947,444,5948,444,5949,444,5950,444,5951,444,5952,445,5953,445,5954,445,5955,445,5956,445,5957,446,5958,446,5959,446,5960,446,5961,446,5962,446,5963,446,5964,446,5965,446,5966,446,5967,446,5968,447,5969,446,5970,446,5971,446,5972,446,5973,446,5974,448,5975,448,5976,448,5977,448,5978,448,5979,448,5980,448,5981,449,5982,449,5983,449,5984,449,5985,449,5986,449,5987,449,5988,450,5989,450,5990,450,5991,450,5992,451,5993,451,5994,451,5995,451,5996,452,5997,452,5998,452,5999,452,6000,453,6001,453,6002,453,6003,453,6004,454,6005,454,6006,454,6007,454,6008,454,6009,454,6010,455,6011,455,6012,455,6013,456,6014,456,6015,456,6018,457,6019,457,6020,457,6021,457,6022,457,6023,457,6024,458,6025,458,6026,458,6027,458,6028,458,6029,459,6030,459,6031,459,6032,459,6033,459,6034,459,6035,459,6036,459,6037,460,6038,460,6039,460,6040,460,6041,460,6042,460,6043,460,6044,461,6045,461,6046,462,6047,462,6050,463,6051,463,6052,463,6053,463,6054,464,6055,464,6056,464,6057,465,6058,465,6059,465,6060,467,6061,467,6062,467,6063,468,6064,468,6065,468,6066,469,6067,469,6068,470,6069,470,6070,471,6071,471,6072,471,6073,471,6074,471,6075,471,6076,471,6077,471,6078,471,6079,471,6080,472,6081,472,6082,472,6083,472,6084,472,6085,472,6086,472,6087,472,6088,473,6089,473,6090,473,6091,473,6092,473,6093,473,6094,473,6095,473,6096,473,6097,473,6098,473,6099,474,6100,473,6101,473,6102,473,6103,473,6104,473,6105,475,6106,475,6107,475,6108,475,6109,475,6110,475,6111,475,6112,475,6113,475,6114,475,6115,475,6116,476,6117,475,6118,475,6119,475,6120,475,6121,475,6122,477,6123,478,6124,479,6125,479,6126,479,6127,479,6128,480,6129,480,6130,480,6131,481,6132,481,6133,481,6134,482,6135,482,6136,482,6137,483,6138,483,6139,483,6140,484,6141,484,6142,484,6143,485,6144,485,6145,485,6146,485,6147,485,6148,485,6149,485,6150,486,6151,486,6152,486,6153,486,6154,486,6155,486,6156,487,6157,487,6158,488,6159,488,6160,489,6161,489,6162,490,6163,490,6164,491,6165,491,6166,491,6167,492,6168,492,6169,492,6170,493,6171,493,6172,493,6173,493,6174,493,6175,493,6176,493,6177,493,6178,493,6179,493,6180,494,6181,494,6182,494,6183,494,6184,494,6185,494,6186,494,6187,494,6188,495,6189,495,6190,495,6191,495,6192,496,6193,496,6194,496,6198,497,6199,497,6200,498,6201,498,6202,499,6203,499,6204,500,6205,500,6206,501,6207,501,6208,501,6209,501,6210,501,6211,501,6212,501,6213,501,6214,501,6215,501,6216,501,6217,501,6218,502,6219,502,6220,502,6221,502,6222,502,6223,502,6224,502,6225,502,6226,502,6227,502,6228,502,6229,502,6230,503,6231,503,6232,503,6233,503,6234,503,6235,504,6236,504,6237,504,6238,504,6239,505,6240,505,6241,506,6242,506,6243,507,6244,507,6245,508,6246,508,6247,509,6248,509,6249,509,6250,509,6251,509,6252,509,6253,509,6254,509,6255,509,6256,509,6257,509,6258,510,6259,509,6260,509,6261,509,6262,509,6263,509,6264,511,6265,511,6266,511,6267,511,6268,512,6269,512,6270,512,6271,513,6272,513,6273,513,6274,513,6275,514,6276,514,6277,514,6278,515,6279,515,6280,515,6281,515,6282,515,6283,515,6284,516,6285,516,6286,516,6287,516,6288,516,6289,517,6290,517,6291,517,6292,517,6293,517,6294,518,6295,518,6296,518,6297,518,6298,519,6299,519,6300,520,6301,520,6302,521,6303,521,6304,521,6305,521,6306,521,6307,521,6308,521,6309,521,6310,521,6311,521,6312,521,6313,521,6314,521,6315,521,6316,521,6317,521,6318,521,6319,521,6320,521,6321,543,6322,543,6323,543,6324,543,6325,543,6326,543,6327,543,6328,543,6329,543,6330,543,6331,543,6332,543,6333,543,6334,543,6335,543,6336,543,6337,543,6338,543,6339,543,6340,543,6341,543,6342,543,6343,543,6344,543,6345,543,6346,543,6347,543,6348,543,6349,543,6350,543,6351,543,6352,543,6353,543,6354,543,6355,543,6356,543,6357,543,6358,543,6359,543,6360,543,6361,543,6362,543,6363,543,6364,543,6365,543,6366,543,6367,543,6368,543,6369,543,6370,543,6371,543,6372,543,6373,543,6374,543,6375,543,6376,543,6377,543,6378,543,6379,543,6380,543,6381,543,6382,543,6383,543,6384,543,6385,543,6386,543,6387,543,6388,543,6389,543,6390,543,6391,543,6392,543,6393,543,6394,543,6395,543,6396,543,6397,543,6398,543,6399,543,6400,543,6401,543,6402,543,6403,543,6404,543,6405,543,6406,543,6407,543,6408,543,6409,543,6410,543,6411,543,6412,543,6413,543,6414,543,6415,543,6416,543,6417,543,6418,543,6419,543,6420,543,6421,543,6422,543,6423,543,6424,543,6425,543,6426,543,6427,543,6428,543,6429,543,6430,543,6431,543,6432,543,6433,543,6434,543,6435,543,6436,543,6437,543,6438,543,6439,543,6440,543,6441,543,6442,543,6443,543,6444,543,6445,543,6446,543,6447,543,6448,543,6449,543,6450,543,6451,543,6452,543,6453,543,6454,543,6455,543,6456,543,6457,543,6458,543,6459,543,6460,543,6461,543,6462,543,6463,543,6464,543,6465,543,6466,543,6467,543,6468,543,6469,543,6470,543,6471,543,6472,543,6473,543,6474,543,6475,543,6476,543,6477,543,6478,543,6479,543,6480,543,6481,543,6482,543,6483,543,6484,543,6485,543,6486,543,6487,543,6488,543,6489,543,6490,543,6491,543,6492,543,6493,543,6494,543,6495,543,6496,543,6497,543,6498,543,6499,543,6500,543,6501,543,6502,543,6503,543,6504,543,6505,543,6506,543,6507,543,6508,543,6509,543,6510,543,6511,543,6512,543,6513,543,6514,543,6515,543,6516,543,6517,543,6518,543,6519,543,6520,543,6521,543,6522,543,6523,543,6524,543,6525,543,6526,543,6527,543,6528,543,6529,543,6530,543,6531,543,6532,543,6533,543,6534,543,6535,543,6536,543,6537,543,6538,543,6539,543,6540,543,6541,543,6542,543,6543,543,6544,543,6545,543,6546,543,6547,543,6548,543,6549,543,6550,543,6551,543,6552,543,6553,543,6554,543,6555,543,6556,543,6557,543,6558,543,6559,543,6560,543,6561,543,6562,543,6563,543,6564,543,6565,543,6566,543,6567,543,6568,543,6569,543,6570,543,6571,543,6572,543,6573,543,6574,543,6575,543,6576,543,6577,543,6578,543,6579,543,6580,543,6581,543,6582,543,6583,543,6584,543,6585,543,6586,543,6587,543,6588,543,6589,543,6590,543,6591,543,6592,543,6593,543,6594,543,6595,543,6596,543,6597,543,6598,543,6599,543,6600,543,6601,543,6602,543,6603,543,6604,543,6605,543,6606,543,6607,543,6608,543,6609,543,6610,543,6611,543,6612,543,6613,543,6614,543,6615,543,6616,543,6617,543,6618,543,6619,543,6620,543,6621,543,6622,543,6623,543,6624,543,6625,543,6626,543,6627,543,6628,543,6629,543,6630,543,6631,543,6632,543,6633,543,6634,543,6635,543,6636,543,6637,543,6638,543,6639,543,6640,543,6641,543,6642,543,6643,543,6644,543,6645,543,6646,543,6647,543,6648,543,6649,543,6650,543,6651,543,6652,543,6653,543,6654,543,6655,543,6656,543,6657,543,6658,543,6659,543,6660,543,6661,543,6662,543,6663,543,6664,543,6665,543,6666,543,6667,543,6668,543,6669,543,6670,543,6671,543,6672,543,6673,543,6674,543,6675,543,6676,543,6677,543,6678,543,6679,543,6680,543,6681,543,6682,543,6683,543,6684,543,6685,543,6686,543,6687,543,6688,543,6689,543,6690,543,6691,543,6692,543,6693,543,6694,543,6695,543,6696,543,6697,543,6698,543,6699,543,6700,543,6701,543,6702,543,6703,543,6704,543,6705,543,6706,543,6707,543,6708,543,6709,543,6710,543,6711,543,6712,543,6713,543,6714,543,6715,543,6716,543,6717,543,6718,543,6719,543,6720,543,6721,543,6722,543,6723,543,6724,543,6725,543,6726,543,6727,543,6728,543,6729,543,6730,543,6731,543,6732,543,6733,543,6734,543,6735,543,6736,543,6737,543,6738,543,6739,543,6740,543,6741,543,6742,543,6743,543,6744,543,6745,543,6746,543,6747,543,6748,543,6749,543,6750,543,6751,543,6752,543,6753,543,6754,543,6755,543,6756,543,6757,543,6758,543,6759,543,6760,543,6761,543,6762,543,6763,543,6764,543,6765,543,6766,543,6767,543,6768,543,6769,543,6770,543,6771,543,6772,543,6773,543,6774,543,6775,543,6776,543,6777,543,6778,543,6779,543,6780,543,6781,543,6782,543,6783,543,6784,543,6785,543,6786,543,6787,543,6788,543,6789,543,6790,543,6791,543,6792,543,6793,543,6794,543,6795,543,6796,543,6797,543,6798,543,6799,543,6800,543,6801,543,6802,543,6803,543,6804,543,6805,543,6806,543,6807,543,6808,543,6809,543,6810,543,6811,543,6812,543,6813,543,6814,543,6815,543,6816,543,6817,543,6818,543,6819,543,6820,543,6821,524,6822,525,6823,528,6824,544,6825,544,6826,544,6827,544,6828,544,6829,544,6830,544,6831,544,6832,544,6833,544,6834,544,6835,544,6836,544,6837,544,6838,544,6839,544,6840,544,6841,544,6842,544,6843,544,6844,544,6845,544,6846,544,6847,544,6848,544,6849,544,6850,544,6851,544,6852,544,6853,544,6854,544,6855,544,6856,544,6857,544,6858,544,6859,544,6860,544,6861,544,6862,544,6863,544,6864,544,6865,544,6866,544,6867,544,6868,544,6869,544,6870,544,6871,544,6872,544,6873,544,6874,544,6875,544,6876,544,6877,544,6878,544,6879,544,6880,544,6881,544,6882,544,6883,544,6884,544,6885,544,6886,544,6887,544,6888,544,6889,544,6890,544,6891,544,6892,544,6893,544,6894,544,6895,544,6896,544,6897,544,6898,544,6899,544,6900,544,6901,544,6902,544,6903,544,6904,544,6905,544,6906,544,6907,544,6908,544,6909,544,6910,544,6911,544,6912,544,6913,544,6914,544,6915,544,6916,544,6917,544,6918,544,6919,544,6920,544,6921,544,6922,544,6923,544,6924,544,6925,544,6926,544,6927,544,6928,544,6929,544,6930,544,6931,544,6932,544,6933,544,6934,544,6935,544,6936,544,6937,544,6938,544,6939,544,6940,544,6941,544,6942,544,6943,544,6944,544,6945,544,6946,544,6947,544,6948,544,6949,544,6950,544,6951,544,6952,544,6953,544,6954,544,6955,544,6956,544,6957,544,6958,544,6959,544,6960,544,6961,544,6962,544,6963,544,6964,544,6965,544,6966,544,6967,544,6968,544,6969,544,6970,544,6971,544,6972,544,6973,544,6974,544,6975,544,6976,544,6977,544,6978,544,6979,544,6980,544,6981,544,6982,544,6983,544,6984,544,6985,544,6986,544,6987,544,6988,544,6989,544,6990,544,6991,544,6992,544,6993,544,6994,544,6995,544,6996,544,6997,544,6998,544,6999,544,7000,544,7001,544,7002,544,7003,544,7004,544,7005,544,7006,544,7007,544,7008,544,7009,544,7010,544,7011,544,7012,544,7013,544,7014,544,7015,544,7016,544,7017,544,7018,544,7019,544,7020,544,7021,544,7022,544,7023,544,7024,544,7025,544,7026,544,7027,544,7028,544,7029,544,7030,544,7031,544,7032,544,7033,544,7034,544,7035,544,7036,544,7037,544,7038,544,7039,544,7040,544,7041,544,7042,544,7043,544,7044,544,7045,544,7046,544,7047,544,7048,544,7049,544,7050,544,7051,544,7052,544,7053,544,7054,544,7055,544,7056,544,7057,544,7058,544,7059,544,7060,544,7061,544,7062,544,7063,544,7064,544,7065,544,7066,544,7067,544,7068,544,7069,544,7070,544,7071,544,7072,544,7073,544,7074,544,7075,544,7076,544,7077,544,7078,544,7079,544,7080,544,7081,544,7082,544,7083,544,7084,544,7085,544,7086,544,7087,544,7088,544,7089,544,7090,544,7091,544,7092,544,7093,544,7094,544,7095,544,7096,544,7097,544,7098,544,7099,544,7100,544,7101,544,7102,544,7103,544,7104,544,7105,544,7106,544,7107,544,7108,544,7109,544,7110,544,7111,544,7112,544,7113,544,7114,544,7115,544,7116,544,7117,544,7118,544,7119,544,7120,544,7121,544,7122,544,7123,544,7124,544,7125,544,7126,544,7127,544,7128,544,7129,544,7130,544,7131,544,7132,544,7133,544,7134,544,7135,544,7136,544,7137,544,7138,544,7139,544,7140,544,7141,544,7142,544,7143,544,7144,544,7145,544,7146,544,7147,544,7148,544,7149,544,7150,544,7151,544,7152,544,7153,544,7154,544,7155,544,7156,544,7157,544,7158,544,7159,544,7160,544,7161,544,7162,544,7163,544,7164,544,7165,544,7166,544,7167,544,7168,544,7169,544,7170,544,7171,544,7172,544,7173,544,7174,544,7175,544,7176,544,7177,544,7178,544,7179,544,7180,544,7181,544,7182,544,7183,544,7184,544,7185,544,7186,544,7187,544,7188,544,7189,544,7190,544,7191,544,7192,544,7193,544,7194,544,7195,544,7196,544,7197,544,7198,544,7199,544,7200,544,7201,544,7202,544,7203,544,7204,544,7205,544,7206,544,7207,544,7208,544,7209,544,7210,544,7211,544,7212,544,7213,544,7214,544,7215,544,7216,544,7217,544,7218,544,7219,544,7220,544,7221,544,7222,544,7223,544,7224,544,7225,544,7226,544,7227,544,7228,544,7229,544,7230,544,7231,544,7232,544,7233,544,7234,544,7235,544,7236,544,7237,544,7238,544,7239,544,7240,544,7241,544,7242,544,7243,544,7244,544,7245,544,7246,544,7247,544,7248,544,7249,544,7250,544,7251,544,7252,544,7253,544,7254,544,7255,544,7256,544,7257,544,7258,544,7259,544,7260,544,7261,544,7262,544,7263,544,7264,544,7265,544,7266,544,7267,544,7268,544,7269,544,7270,544,7271,544,7272,544,7273,544,7274,544,7275,544,7276,544,7277,544,7278,544,7279,544,7280,544,7281,544,7282,544,7283,544,7284,544,7285,544,7286,544,7287,544,7288,544,7289,544,7290,544,7291,544,7292,544,7293,544,7294,544,7295,544,7296,544,7297,544,7298,544,7299,544,7300,544,7301,544,7302,544,7303,544,7304,544,7305,544,7306,544,7307,544,7308,544,7309,544,7310,544,7311,544,7312,544,7313,544,7314,544,7315,544,7316,544,7317,544,7318,544,7319,544,7320,544,7321,544,7322,544,7323,529,7324,529,7325,14,7326,15,7327,15,7328,15,7329,15,7330,15,7331,15,7332,15,7333,15,7334,15,7335,15,7336,15,7337,15,7338,15,7339,15,7340,15,7341,15,7342,15,7343,15,7344,15,7345,15,7346,15,7347,15,7348,15,7349,15,7350,15,7351,15,7352,15,7353,15,7354,545,7355,545,7356,545,7357,545,7358,545,7359,545,7360,545,7361,545,7362,545,7363,545,7364,545,7365,545,7366,545,7367,545,7368,545,7369,545,7370,545,7371,545,7372,545,7373,545,7374,545,7375,545,7376,545,7377,545,7378,545,7379,545,7380,545,7381,545,7382,545,7383,545,7384,545,7385,545,7386,545,7387,545,7388,545,7389,545,7390,545,7391,545,7392,545,7393,545,7394,545,7395,545,7396,545,7397,545,7398,545,7399,545,7400,545,7401,545,7402,545,7403,545,7404,545,7405,545,7406,545,7407,545,7408,545,7409,545,7410,545,7411,545,7412,545,7413,545,7414,545,7415,545,7416,545,7417,545,7418,545,7419,545,7420,545,7421,545,7422,545,7423,545,7424,545,7425,545,7426,545,7427,545,7428,545,7429,545,7430,545,7431,545,7432,545,7433,545,7434,545,7435,545,7436,545,7437,545,7438,545,7439,545,7440,545,7441,545,7442,545,7443,545,7444,545,7445,545,7446,545,7447,545,7448,545,7449,545,7450,545,7451,545,7452,545,7453,545,7454,545,7455,545,7456,545,7457,545,7458,545,7459,545,7460,545,7461,545,7462,545,7463,545,7464,545,7465,545,7466,545,7467,545,7468,545,7469,545,7470,545,7471,545,7472,545,7473,545,7474,545,7475,545,7476,545,7477,545,7478,545,7479,545,7480,545,7481,545,7482,545,7483,545,7484,545,7485,545,7486,545,7487,545,7488,545,7489,545,7490,545,7491,545,7492,545,7493,545,7494,545,7495,545,7496,545,7497,545,7498,545,7499,545,7500,545,7501,545,7502,545,7503,545,7504,545,7505,545,7506,545,7507,545,7508,545,7509,545,7510,545,7511,545,7512,545,7513,545,7514,545,7515,545,7516,545,7517,545,7518,545,7519,545,7520,545,7521,545,7522,545,7523,545,7524,545,7525,545,7526,545,7527,545,7528,545,7529,545,7530,545,7531,545,7532,545,7533,545,7534,545,7535,545,7536,545,7537,545,7538,545,7539,545,7540,545,7541,545,7542,545,7543,545,7544,545,7545,545,7546,545,7547,545,7548,545,7549,545,7550,545,7551,545,7552,545,7553,545,7554,545,7555,545,7556,545,7557,545,7558,545,7559,545,7560,545,7561,545,7562,545,7563,545,7564,545,7565,545,7566,545,7567,545,7568,545,7569,545,7570,545,7571,545,7572,545,7573,545,7574,545,7575,545,7576,545,7577,545,7578,545,7579,545,7580,545,7581,545,7582,545,7583,545,7584,545,7585,545,7586,545,7587,545,7588,545,7589,545,7590,545,7591,545,7592,545,7593,545,7594,545,7595,545,7596,545,7597,545,7598,545,7599,545,7600,545,7601,545,7602,545,7603,545,7604,545,7605,545,7606,545,7607,546,7608,530,7609,530,7610,22,7611,533,7612,534,7613,533,7614,536,7615,536,7616,536,7617,539,7618,540,7619,539,7620,541,7621,547,7622,547,7623,547,7624,547,7626,549,7627,542,7628,542,7629,521,7630,523,7631,527,7632,14,7633,532,7634,532,7635,532,7636,532,7637,532,7638,538,7639,538,7640,538,7641,538,7642,538,7643,24,7646,25,7647,25,7648,55,7649,55,7650,59,7651,59,7652,77,7653,77,7654,79,7655,79,7656,103,7657,103,7658,105,7659,105,7660,141,7661,141,7662,145,7663,145,7664,155,7665,155,7666,160,7667,160,7668,202,7669,202,7670,204,7671,204,7672,238,7673,238,7674,256,7675,256,7676,260,7677,260,7678,288,7679,288,7680,294,7681,294,7682,306,7683,306,7684,308,7685,308,7686,326,7687,326,7688,330,7689,330,7690,334,7691,334,7692,336,7693,336,7694,344,7695,344,7696,346,7697,346,7698,350,7699,350,7700,352,7701,352,7702,358,7703,358,7704,364,7705,364,7706,374,7707,374,7708,384,7709,384,7710,394,7711,394,7712,398,7713,398,7714,410,7715,410,7716,412,7717,412,7718,414,7719,414,7720,426,7721,426,7722,434,7723,434,7724,446,7725,446,7726,473,7727,473,7728,475,7729,475,7730,509,7731,509,7732,529,7733,529],"subclass":[543,544,546,543],"override":[6323,6825,6324,6826,6325,6827,6326,6828,6327,6829,6328,6830,6329,6831,6330,6832,6331,6833,6332,6834,6333,6835,6334,6836,6335,6837,6336,6838,6337,6839,6338,6840,6339,6841,6340,6842,6341,6843,6342,6844,6343,6845,6344,6846,6345,6847,6346,6848,6347,6849,6348,6850,6349,6851,6350,6852,6351,6853,6352,6854,6353,6855,6354,6856,6355,6857,6356,6858,6357,6859,6358,6860,6359,6861,6360,6862,6361,6863,6362,6864,6363,6865,6364,6866,6365,6867,6366,6868,6367,6869,6368,6870,6369,6871,6370,6872,6371,6873,6372,6874,6373,6875,6374,6876,6375,6877,6376,6878,6377,6879,6378,6880,6379,6881,6380,6882,6381,6883,6382,6884,6383,6885,6384,6886,6385,6887,6386,6888,6387,6889,6388,6890,6389,6891,6390,6892,6391,6893,6392,6894,6393,6895,6394,6896,6395,6897,6396,6898,6397,6899,6398,6900,6399,6901,6400,6902,6401,6903,6402,6904,6403,6905,6404,6906,6405,6907,6406,6908,6407,6909,6408,6910,6409,6911,6410,6912,6411,6913,6412,6914,6413,6915,6414,6916,6415,6917,6416,6918,6417,6919,6418,6920,6419,6921,6420,6922,6421,6923,6422,6924,6423,6925,6424,6926,6425,6927,6426,6928,6427,6929,6428,6930,6429,6931,6430,6932,6431,6933,6432,6934,6433,6935,6434,6936,6435,6937,6436,6938,6437,6939,6438,6940,6439,6941,6440,6942,6441,6943,6442,6944,6443,6945,6444,6946,6445,6947,6446,6948,6447,6949,6448,6950,6449,6951,6450,6952,6451,6953,6452,6954,6453,6955,6454,6956,6455,6957,6456,6958,6457,6959,6458,6960,6459,6961,6460,6962,6461,6963,6462,6964,6463,6965,6464,6966,6465,6967,6466,6968,6467,6969,6468,6970,6469,6971,6470,6972,6471,6973,6472,6974,6473,6975,6474,6976,6475,6977,6476,6978,6477,6979,6478,6980,6479,6981,6480,6982,6481,6983,6482,6984,6483,6985,6484,6986,6485,6987,6486,6988,6487,6989,6488,6990,6489,6991,6490,6992,6491,6993,6492,6994,6493,6995,6494,6996,6495,6997,6496,6998,6497,6999,6498,7000,6499,7001,6500,7002,6501,7003,6502,7004,6503,7005,6504,7006,6505,7007,6506,7008,6507,7009,6508,7010,6509,7011,6510,7012,6511,7013,6512,7014,6513,7015,6514,7016,6515,7017,6516,7018,6517,7019,6518,7020,6519,7021,6520,7022,6521,7023,6522,7024,6523,7025,6524,7026,6525,7027,6526,7028,6527,7029,6528,7030,6529,7031,6530,7032,6531,7033,6532,7034,6533,7035,6534,7036,6535,7037,6536,7038,6537,7039,6538,7040,6539,7041,6540,7042,6541,7043,6542,7044,6543,7045,6544,7046,6545,7047,6546,7048,6547,7049,6548,7050,6549,7051,6550,7052,6551,7053,6552,7054,6553,7055,6554,7056,6555,7057,6556,7058,6557,7059,6558,7060,6559,7061,6560,7062,6561,7063,6562,7064,6563,7065,6564,7066,6565,7067,6566,7068,6567,7069,6568,7070,6569,7071,6570,7072,6571,7073,6572,7074,6573,7075,6574,7076,6575,7077,6576,7078,6577,7079,6578,7080,6579,7081,6580,7082,6581,7083,6582,7084,6583,7085,6584,7086,6585,7087,6586,7088,6587,7089,6588,7090,6589,7091,6590,7092,6591,7093,6592,7094,6593,7095,6594,7096,6595,7097,6596,7098,6597,7099,6598,7100,6599,7101,6600,7102,6601,7103,6602,7104,6603,7105,6604,7106,6605,7107,6606,7108,6607,7109,6608,7110,6609,7111,6610,7112,6611,7113,6612,7114,6613,7115,6614,7116,6615,7117,6616,7118,6617,7119,6618,7120,6619,7121,6620,7122,6621,7123,6622,7124,6623,7125,6624,7126,6625,7127,6626,7128,6627,7129,6628,7130,6629,7131,6630,7132,6631,7133,6632,7134,6633,7135,6634,7136,6635,7137,6636,7138,6637,7139,6638,7140,6639,7141,6640,7142,6641,7143,6642,7144,6643,7145,6644,7146,6645,7147,6646,7148,6647,7149,6648,7150,6649,7151,6650,7152,6651,7153,6652,7154,6653,7155,6654,7156,6655,7157,6656,7158,6657,7159,6658,7160,6659,7161,6660,7162,6661,7163,6662,7164,6663,7165,6664,7166,6665,7167,6666,7168,6667,7169,6668,7170,6669,7171,6670,7172,6671,7173,6672,7174,6673,7175,6674,7176,6675,7177,6676,7178,6677,7179,6678,7180,6679,7181,6680,7182,6681,7183,6682,7184,6683,7185,6684,7186,6685,7187,6686,7188,6687,7189,6688,7190,6689,7191,6690,7192,6691,7193,6692,7194,6693,7195,6694,7196,6695,7197,6696,7198,6697,7199,6698,7200,6699,7201,6700,7202,6701,7203,6702,7204,6703,7205,6704,7206,6705,7207,6706,7208,6707,7209,6708,7210,6709,7211,6710,7212,6711,7213,6712,7214,6713,7215,6714,7216,6715,7217,6716,7218,6717,7219,6718,7220,6719,7221,6720,7222,6721,7223,6722,7224,6723,7225,6724,7226,6725,7227,6726,7228,6727,7229,6728,7230,6729,7231,6730,7232,6731,7233,6732,7234,6733,7235,6734,7236,6735,7237,6736,7238,6737,7239,6738,7240,6739,7241,6740,7242,6741,7243,6742,7244,6743,7245,6744,7246,6745,7247,6746,7248,6747,7249,6748,7250,6749,7251,6750,7252,6751,7253,6752,7254,6753,7255,6754,7256,6755,7257,6756,7258,6757,7259,6758,7260,6759,7261,6760,7262,6761,7263,6762,7264,6763,7265,6764,7266,6765,7267,6766,7268,6767,7269,6768,7270,6769,7271,6770,7272,6771,7273,6772,7274,6773,7275,6774,7276,6775,7277,6776,7278,6777,7279,6778,7280,6779,7281,6780,7282,6781,7283,6782,7284,6783,7285,6784,7286,6785,7287,6786,7288,6787,7289,6788,7290,6789,7291,6790,7292,6791,7293,6792,7294,6793,7295,6794,7296,6795,7297,6796,7298,6797,7299,6798,7300,6799,7301,6800,7302,6801,7303,6802,7304,6803,7305,6804,7306,6805,7307,6806,7308,6807,7309,6808,7310,6809,7311,6810,7312,6811,7313,6812,7314,6813,7315,6814,7316,6815,7317,6816,7318,6817,7319,6818,7320,6819,7321,6820,7322,7607,6321],"requirement":[1429,15,1770,0,1771,0,1808,1,1832,2,1889,3,2205,4,2713,9,2714,9,2735,10,2736,10,2833,12,2834,12,2835,12,2908,13,3422,15,4549,0,4550,0,4605,1,4633,2,4723,3,5188,4,6016,9,6017,9,6048,10,6049,10,6195,12,6196,12,6197,12,7625,16],"defaultImplementation":[3425,7885,3435,7892,7325,7738,7353,7883]},"hints":[26,7780,56,7780,60,7780,78,7780,80,7780,104,7780,106,7780,142,7780,146,7780,156,7780,161,7780,203,7780,205,7780,239,7780,257,7780,261,7780,289,7780,295,7780,307,7780,309,7780,327,7780,331,7780,335,7780,337,7780,345,7780,347,7780,351,7780,353,7780,359,7780,365,7780,375,7780,385,7780,395,7780,399,7780,411,7780,413,7780,415,7780,427,7780,435,7780,447,7780,474,7780,476,7780,510,7780,525,7780,534,7780,540,7780,959,1429,960,1429,962,1429,964,1429,966,1429,968,1429,970,1429,972,1429,974,1429,976,1429,978,1429,980,1429,981,1429,982,1429,983,1429,984,1429,986,1429,988,1429,989,1429,991,1429,992,1429,994,1429,996,1429,998,1429,1000,1429,1002,1429,1004,1429,1006,1429,1008,1429,1009,1429,1010,1429,1012,1429,1014,1429,1016,1429,1018,1429,1020,1429,1022,1429,1024,1429,1026,1429,1028,1429,1030,1429,1032,1429,1033,1429,1034,1429,1036,1429,1038,1429,1040,1429,1042,1429,1044,1429,1046,1429,1048,1429,1050,1429,1052,1429,1054,1429,1056,1429,1058,1429,1060,1429,1062,1429,1064,1429,1066,1429,1068,1429,1069,1429,1071,1429,1072,1429,1074,1429,1076,1429,1078,1429,1080,1429,1081,1429,1083,1429,1084,1429,1085,1429,1087,1429,1089,1429,1091,1429,1093,1429,1095,1429,1097,1429,1099,1429,1101,1429,1103,1429,1105,1429,1107,1429,1109,1429,1111,1429,1113,1429,1115,1429,1117,1429,1119,1429,1121,1429,1123,1429,1125,1429,1126,1429,1127,1429,1129,1429,1131,1429,1133,1429,1135,1429,1137,1429,1139,1429,1141,1429,1143,1429,1145,1429,1147,1429,1149,1429,1151,1429,1153,1429,1155,1429,1157,1429,1159,1429,1160,1429,1162,1429,1164,1429,1166,1429,1168,1429,1170,1429,1172,1429,1174,1429,1176,1429,1177,1429,1179,1429,1180,1429,1182,1429,1184,1429,1186,1429,1188,1429,1190,1429,1192,1429,1194,1429,1196,1429,1198,1429,1200,1429,1202,1429,1204,1429,1206,1429,1207,1429,1209,1429,1211,1429,1212,1429,1214,1429,1216,1429,1218,1429,1220,1429,1222,1429,1223,1429,1224,1429,1226,1429,1228,1429,1230,1429,1232,1429,1234,1429,1236,1429,1238,1429,1240,1429,1241,1429,1243,1429,1244,1429,1246,1429,1247,1429,1248,1429,1250,1429,1252,1429,1254,1429,1255,1429,1256,1429,1258,1429,1259,1429,1260,1429,1262,1429,1264,1429,1265,1429,1267,1429,1269,1429,1270,1429,1272,1429,1274,1429,1276,1429,1278,1429,1279,1429,1281,1429,1283,1429,1285,1429,1287,1429,1288,1429,1290,1429,1292,1429,1294,1429,1296,1429,1297,1429,1299,1429,1300,1429,1302,1429,1304,1429,1306,1429,1308,1429,1310,1429,1311,1429,1312,1429,1313,1429,1315,1429,1317,1429,1319,1429,1321,1429,1323,1429,1324,1429,1326,1429,1328,1429,1330,1429,1331,1429,1333,1429,1335,1429,1337,1429,1339,1429,1341,1429,1342,1429,1344,1429,1347,1429,1350,1429,1353,1429,1356,1429,1357,1429,1359,1429,1361,1429,1363,1429,1365,1429,1368,1429,1370,1429,1371,1429,1373,1429,1375,1429,1377,1429,1378,1429,1379,1429,1381,1429,1383,1429,1385,1429,1387,1429,1389,1429,1391,1429,1393,1429,1395,1429,1397,1429,1399,1429,1401,1429,1403,1429,1405,1429,1407,1429,1409,1429,1411,1429,1412,1429,1414,1429,1416,1429,1418,1429,1420,1429,1425,1429,1426,7888,1433,7822,1438,7822,1441,7817,1454,7890,1456,7875,1457,7875,1458,7875,1459,7875,1460,7875,1461,7875,1462,7875,1463,7875,1464,7875,1465,7875,1466,7875,1467,7875,1468,7875,1469,7875,1470,7875,1471,7875,1472,7875,1473,7875,1474,7875,1475,7875,1476,7875,1477,7875,1478,7875,1479,7875,1480,7875,1481,7875,1482,7875,1483,7875,1484,7875,1485,7875,1486,7875,1487,7875,1488,7875,1489,7875,1490,7875,1491,7875,1492,7875,1493,7875,1494,7875,1495,7875,1496,7875,1497,7875,1498,7875,1499,7875,1500,7875,1503,7825,1504,7881,1506,3422,1508,7840,1509,7842,1512,7881,1513,3422,1518,7881,1520,3422,1521,1889,1522,7881,1523,3422,1525,2833,1526,1832,1527,7881,1529,3422,1533,2834,1534,2835,1535,1889,1537,7881,1538,3422,1541,2735,1542,2713,1543,7881,1545,3422,1547,2736,1548,2714,1551,7881,1552,3422,1553,1808,1554,2713,1555,1889,1556,7881,1557,3422,1558,2714,1562,7881,1563,3422,1566,7881,1569,3422,1572,7881,1573,3422,1574,7881,1575,3422,1576,7881,1577,3422,1578,3422,1579,7881,1581,7881,1583,3422,1587,7881,1589,3422,1593,7825,1594,7881,1596,3422,1598,7840,1599,7842,1601,7881,1602,2205,1603,3422,1604,7825,1605,7881,1607,3422,1609,7840,1610,7842,1611,7881,1612,2205,1613,3422,1615,7881,1616,3422,1619,7881,1620,3422,1627,7881,1628,3422,1632,1832,1634,7881,1635,3422,1641,3422,1643,1770,1645,7881,1649,1771,1651,7881,1652,3422,1654,3422,1656,7881,1659,7825,1660,7881,1662,3422,1664,7840,1665,7842,1666,7825,1667,7881,1669,3422,1671,7840,1672,7842,1674,1832,1675,7881,1676,3422,1680,3422,1682,7881,1684,2833,1685,1832,1686,7881,1687,3422,1692,2834,1693,2835,1695,7881,1696,3422,1698,7881,1699,3422,1701,7881,1703,3422,1704,1770,1705,7881,1706,3422,1708,1771,1710,7881,1711,3422,1718,7881,1719,3422,1720,2713,1721,7881,1722,3422,1724,2714,1725,3422,1726,7881,1730,7825,1731,7881,1733,3422,1735,7840,1736,7842,1737,7825,1738,7881,1740,3422,1742,7840,1743,7842,1745,7881,1746,3422,1749,2833,1750,7881,1752,3422,1756,2834,1757,2835,1758,3422,1759,7881,1760,2205,1762,3422,1763,7881,1766,7881,1767,3422,1773,7881,1774,3422,1776,7881,1777,3422,1778,7881,1779,3422,1782,7881,1783,3422,1793,7881,1795,3422,1800,1832,1802,7881,1803,3422,1810,7881,1811,3422,1812,3422,1815,7881,1819,7881,1820,3422,1822,3422,1825,7881,1830,7881,1831,3422,1834,7881,1835,3422,1837,7825,1838,7881,1840,3422,1842,7840,1843,7842,1844,7881,1846,3422,1849,7825,1850,7881,1852,3422,1854,7840,1855,7842,1857,7881,1858,3422,1860,7881,1861,2205,1862,3422,1867,1770,1868,7881,1869,3422,1871,1771,1873,7881,1874,3422,1876,7825,1877,7881,1879,3422,1881,7840,1882,7842,1883,3422,1884,7881,1887,7881,1888,3422,1890,7825,1891,7881,1893,3422,1895,7840,1896,7842,1897,3422,1898,7881,1903,7881,1905,3422,1908,7881,1909,3422,1911,7881,1912,2205,1913,3422,1916,7881,1917,3422,1922,7881,1923,3422,1926,7881,1927,3422,1930,7881,1931,2205,1932,3422,1936,7881,1938,3422,1944,7881,1945,3422,1947,2713,1948,7881,1949,3422,1951,2714,1953,1770,1954,7881,1955,3422,1957,1771,1959,7881,1961,3422,1962,1770,1963,7881,1965,3422,1966,1771,1969,7881,1970,3422,1976,7881,1977,3422,1979,7881,1980,3422,1981,2735,1982,7881,1985,3422,1986,1808,1988,2736,1990,7881,1991,3422,1994,7881,1995,3422,1998,7825,1999,7881,2001,3422,2003,7840,2004,7842,2005,7825,2006,7881,2008,3422,2010,7840,2011,7842,2014,7881,2015,3422,2021,7881,2022,2205,2023,3422,2025,7881,2026,3422,2029,7881,2031,3422,2034,7881,2035,3422,2040,7881,2041,3422,2045,7881,2047,2205,2048,3422,2051,7881,2052,3422,2058,1770,2059,7881,2060,3422,2064,1771,2066,7881,2068,3422,2070,1770,2071,7881,2072,3422,2074,1771,2075,7881,2076,3422,2079,7881,2080,2205,2081,3422,2084,3422,2087,7881,2088,2205,2094,1770,2095,7881,2096,3422,2098,1771,2099,7881,2100,3422,2105,7825,2106,7881,2108,3422,2110,7840,2111,7842,2112,1770,2113,7881,2114,3422,2116,1771,2118,7881,2120,3422,2123,7881,2125,2205,2126,3422,2130,7881,2131,3422,2132,1770,2134,7881,2135,3422,2138,1771,2141,7881,2142,2205,2143,3422,2149,7881,2150,3422,2156,7881,2157,3422,2158,3422,2159,7825,2160,7881,2163,7840,2164,7842,2165,7881,2166,3422,2169,7825,2170,7881,2172,3422,2174,7840,2175,7842,2176,7881,2177,3422,2181,1770,2182,7881,2183,3422,2185,1771,2187,7881,2188,3422,2190,7881,2191,3422,2192,7881,2193,3422,2199,7881,2202,3422,2207,1832,2209,7881,2210,3422,2215,7881,2217,3422,2219,7881,2220,3422,2223,7881,2224,2205,2225,3422,2229,7881,2230,3422,2231,7881,2232,2205,2233,3422,2235,7881,2237,3422,2239,7825,2240,7881,2242,3422,2244,7840,2245,7842,2246,7881,2247,3422,2249,7881,2250,3422,2253,7825,2254,7881,2256,3422,2258,7840,2259,7842,2261,7881,2262,3422,2263,7881,2265,3422,2267,7881,2269,3422,2272,7881,2273,3422,2278,7881,2279,3422,2281,7825,2282,7881,2284,3422,2286,7840,2287,7842,2288,7825,2289,7881,2291,3422,2293,7840,2294,7842,2295,7881,2296,3422,2300,1770,2301,7881,2302,3422,2304,1771,2306,1832,2308,7881,2309,3422,2314,3422,2317,7881,2319,7881,2320,2205,2321,3422,2325,2735,2326,7881,2327,2205,2328,3422,2330,2736,2332,7881,2333,3422,2335,7881,2337,3422,2339,7825,2340,7881,2342,3422,2344,7840,2345,7842,2346,3422,2348,7881,2349,7825,2350,7881,2352,3422,2354,7840,2355,7842,2356,3422,2358,7881,2360,7825,2361,7881,2363,3422,2365,7840,2366,7842,2367,7825,2368,7881,2370,3422,2372,7840,2373,7842,2374,3422,2376,7881,2381,7881,2383,3422,2384,3422,2385,7881,2388,7825,2389,7881,2391,3422,2393,7840,2394,7842,2395,3422,2396,7825,2397,7881,2400,7840,2401,7842,2403,7881,2404,3422,2408,7825,2409,7881,2411,3422,2413,7840,2414,7842,2415,7825,2416,7881,2418,3422,2420,7840,2421,7842,2422,7881,2423,3422,2426,7881,2427,3422,2428,7825,2429,7881,2431,3422,2433,7840,2434,7842,2435,7881,2436,3422,2440,3422,2444,7881,2445,2205,2448,7825,2449,7881,2451,3422,2453,7840,2454,7842,2456,7881,2457,3422,2459,3422,2461,7881,2463,3422,2464,7881,2467,7881,2468,3422,2470,7825,2471,7881,2473,3422,2475,7840,2476,7842,2477,3422,2478,7881,2481,7881,2482,3422,2486,7881,2487,2205,2488,3422,2491,7881,2492,3422,2495,7825,2496,7881,2498,3422,2500,7840,2501,7842,2502,7881,2503,2205,2504,3422,2510,7881,2511,3422,2515,7881,2516,3422,2519,7881,2524,3422,2527,7825,2528,7881,2530,3422,2532,7840,2533,7842,2536,7881,2537,3422,2539,7825,2540,7881,2542,3422,2544,7840,2545,7842,2547,7881,2548,3422,2554,7881,2555,3422,2559,7881,2560,3422,2565,7881,2567,3422,2568,7881,2569,3422,2573,3422,2574,7825,2575,7881,2578,7840,2579,7842,2580,3422,2581,7825,2582,7881,2585,7840,2586,7842,2587,7825,2588,7881,2590,3422,2592,7840,2593,7842,2595,7881,2596,3422,2598,7881,2600,3422,2602,7881,2603,3422,2609,7881,2610,3422,2612,3422,2614,7881,2617,7825,2618,7881,2620,3422,2622,7840,2623,7842,2625,7881,2627,3422,2630,7881,2631,3422,2635,7881,2636,3422,2640,7825,2641,7881,2643,3422,2645,7840,2646,7842,2648,7881,2649,3422,2652,7881,2653,3422,2656,7881,2657,3422,2661,3422,2663,7881,2667,7881,2669,3422,2672,7825,2673,7881,2675,3422,2677,7840,2678,7842,2681,7881,2682,3422,2688,7881,2689,3422,2690,7881,2691,3422,2692,7881,2693,3422,2694,3422,2695,7881,2697,7881,2700,3422,2708,7881,2709,3422,2715,2735,2717,7881,2718,3422,2719,1808,2721,2736,2723,2735,2725,7881,2726,3422,2727,1808,2730,2736,2731,7881,2732,3422,2737,7881,2738,3422,2741,7881,2742,3422,2744,7881,2745,3422,2747,7881,2748,2205,2749,3422,2753,7881,2754,3422,2756,1832,2758,7881,2759,3422,2765,7825,2766,7881,2768,3422,2770,7840,2771,7842,2772,7825,2773,7881,2775,3422,2777,7840,2778,7842,2779,3422,2780,7881,2784,7881,2785,3422,2787,3422,2789,7881,2795,7881,2796,3422,2799,7881,2801,3422,2807,7881,2808,3422,2810,7881,2811,3422,2814,7881,2815,2205,2816,3422,2818,2833,2819,1832,2820,7881,2821,3422,2826,2834,2827,2835,2828,2713,2829,1889,2830,7881,2831,3422,2832,2714,2836,7881,2838,3422,2839,1808,2841,7881,2842,3422,2843,1808,2845,2735,2850,7881,2852,3422,2854,1808,2857,2736,2860,7881,2862,3422,2863,1808,2865,7881,2866,3422,2869,7881,2871,3422,2872,7825,2873,7881,2875,3422,2877,7840,2878,7842,2879,1770,2881,7881,2882,3422,2883,1771,2884,3422,2885,1770,2886,7881,2888,1771,2890,2735,2891,7881,2893,3422,2894,1808,2895,2736,2898,7881,2900,3422,2902,7881,2904,3422,2906,7881,2907,3422,2909,7885,2949,7885,3420,7825,3421,7842,3423,3423,3424,3424,3425,3425,3426,3426,3427,3427,3428,3428,3429,3429,3430,3430,3431,3431,3432,3432,3433,3433,3434,3434,3435,3435,3436,3436,3437,3437,3438,3438,3439,3439,3440,3440,3441,3441,3442,3442,3443,3443,3444,3444,3445,3445,3446,3446,3447,3447,3448,3448,3449,3449,3450,3450,3451,3451,3452,3452,3453,3453,3454,3454,3455,3455,3456,3456,3463,7892,3467,7892,3469,7881,3470,7892,3481,7881,3483,7825,3486,7842,4129,7777,4137,7742,4138,7743,4139,7877,4140,7744,4164,4723,4169,6195,4171,6196,4172,6197,4173,4633,4186,4723,4193,6048,4194,6016,4196,6049,4197,6017,4210,4605,4215,6016,4217,6017,4218,4723,4259,7777,4267,7742,4268,7743,4269,7877,4270,7744,4276,5188,4280,7777,4288,7742,4289,7743,4290,7877,4291,7744,4296,5188,4328,4633,4344,4549,4345,4550,4368,7777,4376,7742,4377,7743,4378,7877,4379,7744,4385,7777,4393,7742,4394,7743,4395,7877,4396,7744,4407,4633,4419,6195,4421,6196,4422,6197,4423,4633,4446,4549,4447,4550,4470,6016,4471,6017,4482,7777,4490,7742,4491,7743,4492,7877,4493,7744,4499,7777,4507,7742,4508,7743,4509,7877,4510,7744,4523,6195,4525,6196,4526,6197,4538,5188,4594,4633,4639,7777,4647,7742,4648,7743,4649,7877,4650,7744,4662,7777,4670,7742,4671,7743,4672,7877,4673,7744,4683,5188,4692,4549,4693,4550,4703,7777,4711,7742,4712,7743,4713,7877,4714,7744,4725,7777,4733,7742,4734,7743,4735,7877,4736,7744,4759,5188,4780,5188,4807,6016,4808,6017,4814,4549,4815,4550,4827,4549,4828,4550,4851,6048,4852,6049,4853,4605,4872,7777,4880,7742,4881,7743,4882,7877,4883,7744,4889,7777,4897,7742,4898,7743,4899,7877,4900,7744,4921,5188,4951,5188,4968,4549,4969,4550,4985,4549,4986,4550,4994,5188,5005,5188,5017,4549,5018,4550,5033,7777,5041,7742,5042,7743,5043,7877,5044,7744,5051,4549,5052,4550,5067,5188,5079,4549,5080,4550,5092,5188,5115,7777,5123,7742,5124,7743,5125,7877,5126,7744,5136,7777,5144,7742,5145,7743,5146,7877,5147,7744,5158,4549,5160,4550,5194,4633,5213,5188,5222,5188,5232,7777,5240,7742,5241,7743,5242,7877,5243,7744,5255,7777,5263,7742,5264,7743,5265,7877,5266,7744,5294,7777,5302,7742,5303,7743,5304,7877,5305,7744,5311,7777,5319,7742,5320,7743,5321,7877,5322,7744,5332,4549,5333,4550,5346,4633,5363,5188,5371,6048,5372,6049,5373,5188,5387,7777,5395,7742,5396,7743,5397,7877,5398,7744,5406,7777,5414,7742,5415,7743,5416,7877,5417,7744,5427,7777,5435,7742,5436,7743,5437,7877,5438,7744,5444,7777,5452,7742,5453,7743,5454,7877,5455,7744,5477,7777,5485,7742,5486,7743,5487,7877,5488,7744,5494,7777,5502,7742,5503,7743,5504,7877,5505,7744,5520,7777,5528,7742,5529,7743,5530,7877,5531,7744,5537,7777,5545,7742,5546,7743,5547,7877,5548,7744,5558,7777,5566,7742,5567,7743,5568,7877,5569,7744,5585,5188,5595,7777,5603,7742,5604,7743,5605,7877,5606,7744,5627,7777,5635,7742,5636,7743,5637,7877,5638,7744,5654,5188,5665,7777,5673,7742,5674,7743,5675,7877,5676,7744,5681,5188,5718,7777,5726,7742,5727,7743,5728,7877,5729,7744,5742,7777,5750,7742,5751,7743,5752,7877,5753,7744,5794,7777,5802,7742,5803,7743,5804,7877,5805,7744,5811,7777,5819,7742,5820,7743,5821,7877,5822,7744,5828,7777,5836,7742,5837,7743,5838,7877,5839,7744,5874,7777,5882,7742,5883,7743,5884,7877,5885,7744,5911,7777,5919,7742,5920,7743,5921,7877,5922,7744,5960,7777,5966,7742,5967,7743,5968,7877,5969,7744,6019,6048,6021,6049,6023,4605,6032,6048,6034,6049,6036,4605,6062,5188,6076,4633,6089,7777,6097,7742,6098,7743,6099,7877,6100,7744,6106,7777,6114,7742,6115,7743,6116,7877,6117,7744,6166,5188,6172,6195,6174,6196,6175,6197,6176,4633,6189,6016,6190,6017,6191,4723,6199,4605,6203,4605,6209,6048,6210,6049,6217,4605,6234,4605,6248,7777,6256,7742,6257,7743,6258,7877,6259,7744,6265,4549,6266,4550,6273,4549,6274,4550,6280,6048,6282,6049,6283,4605,6320,7738,6323,6825,6324,6826,6325,6827,6326,6828,6327,6829,6328,6830,6329,6831,6330,6832,6331,6833,6332,6834,6333,6835,6334,6836,6335,6837,6336,6838,6337,6839,6338,6840,6339,6841,6340,6842,6341,6843,6342,6844,6343,6845,6344,6846,6345,6847,6346,6848,6347,6849,6348,6850,6349,6851,6350,6852,6351,6853,6352,6854,6353,6855,6354,6856,6355,6857,6356,6858,6357,6859,6358,6860,6359,6861,6360,6862,6361,6863,6362,6864,6363,6865,6364,6866,6365,6867,6366,6868,6367,6869,6368,6870,6369,6871,6370,6872,6371,6873,6372,6874,6373,6875,6374,6876,6375,6877,6376,6878,6377,6879,6378,6880,6379,6881,6380,6882,6381,6883,6382,6884,6383,6885,6384,6886,6385,6887,6386,6888,6387,6889,6388,6890,6389,6891,6390,6892,6391,6893,6392,6894,6393,6895,6394,6896,6395,6897,6396,6898,6397,6899,6398,6900,6399,6901,6400,6902,6401,6903,6402,6904,6403,6905,6404,6906,6405,6907,6406,6908,6407,6909,6408,6910,6409,6911,6410,6912,6411,6913,6412,6914,6413,6915,6414,6916,6415,6917,6416,6918,6417,6919,6418,6920,6419,6921,6420,6922,6421,6923,6422,6924,6423,6925,6424,6926,6425,6927,6426,6928,6427,6929,6428,6930,6429,6931,6430,6932,6431,6933,6432,6934,6433,6935,6434,6936,6435,6937,6436,6938,6437,6939,6438,6940,6439,6941,6440,6942,6441,6943,6442,6944,6443,6945,6444,6946,6445,6947,6446,6948,6447,6949,6448,6950,6449,6951,6450,6952,6451,6953,6452,6954,6453,6955,6454,6956,6455,6957,6456,6958,6457,6959,6458,6960,6459,6961,6460,6962,6461,6963,6462,6964,6463,6965,6464,6966,6465,6967,6466,6968,6467,6969,6468,6970,6469,6971,6470,6972,6471,6973,6472,6974,6473,6975,6474,6976,6475,6977,6476,6978,6477,6979,6478,6980,6479,6981,6480,6982,6481,6983,6482,6984,6483,6985,6484,6986,6485,6987,6486,6988,6487,6989,6488,6990,6489,6991,6490,6992,6491,6993,6492,6994,6493,6995,6494,6996,6495,6997,6496,6998,6497,6999,6498,7000,6499,7001,6500,7002,6501,7003,6502,7004,6503,7005,6504,7006,6505,7007,6506,7008,6507,7009,6508,7010,6509,7011,6510,7012,6511,7013,6512,7014,6513,7015,6514,7016,6515,7017,6516,7018,6517,7019,6518,7020,6519,7021,6520,7022,6521,7023,6522,7024,6523,7025,6524,7026,6525,7027,6526,7028,6527,7029,6528,7030,6529,7031,6530,7032,6531,7033,6532,7034,6533,7035,6534,7036,6535,7037,6536,7038,6537,7039,6538,7040,6539,7041,6540,7042,6541,7043,6542,7044,6543,7045,6544,7046,6545,7047,6546,7048,6547,7049,6548,7050,6549,7051,6550,7052,6551,7053,6552,7054,6553,7055,6554,7056,6555,7057,6556,7058,6557,7059,6558,7060,6559,7061,6560,7062,6561,7063,6562,7064,6563,7065,6564,7066,6565,7067,6566,7068,6567,7069,6568,7070,6569,7071,6570,7072,6571,7073,6572,7074,6573,7075,6574,7076,6575,7077,6576,7078,6577,7079,6578,7080,6579,7081,6580,7082,6581,7083,6582,7084,6583,7085,6584,7086,6585,7087,6586,7088,6587,7089,6588,7090,6589,7091,6590,7092,6591,7093,6592,7094,6593,7095,6594,7096,6595,7097,6596,7098,6597,7099,6598,7100,6599,7101,6600,7102,6601,7103,6602,7104,6603,7105,6604,7106,6605,7107,6606,7108,6607,7109,6608,7110,6609,7111,6610,7112,6611,7113,6612,7114,6613,7115,6614,7116,6615,7117,6616,7118,6617,7119,6618,7120,6619,7121,6620,7122,6621,7123,6622,7124,6623,7125,6624,7126,6625,7127,6626,7128,6627,7129,6628,7130,6629,7131,6630,7132,6631,7133,6632,7134,6633,7135,6634,7136,6635,7137,6636,7138,6637,7139,6638,7140,6639,7141,6640,7142,6641,7143,6642,7144,6643,7145,6644,7146,6645,7147,6646,7148,6647,7149,6648,7150,6649,7151,6650,7152,6651,7153,6652,7154,6653,7155,6654,7156,6655,7157,6656,7158,6657,7159,6658,7160,6659,7161,6660,7162,6661,7163,6662,7164,6663,7165,6664,7166,6665,7167,6666,7168,6667,7169,6668,7170,6669,7171,6670,7172,6671,7173,6672,7174,6673,7175,6674,7176,6675,7177,6676,7178,6677,7179,6678,7180,6679,7181,6680,7182,6681,7183,6682,7184,6683,7185,6684,7186,6685,7187,6686,7188,6687,7189,6688,7190,6689,7191,6690,7192,6691,7193,6692,7194,6693,7195,6694,7196,6695,7197,6696,7198,6697,7199,6698,7200,6699,7201,6700,7202,6701,7203,6702,7204,6703,7205,6704,7206,6705,7207,6706,7208,6707,7209,6708,7210,6709,7211,6710,7212,6711,7213,6712,7214,6713,7215,6714,7216,6715,7217,6716,7218,6717,7219,6718,7220,6719,7221,6720,7222,6721,7223,6722,7224,6723,7225,6724,7226,6725,7227,6726,7228,6727,7229,6728,7230,6729,7231,6730,7232,6731,7233,6732,7234,6733,7235,6734,7236,6735,7237,6736,7238,6737,7239,6738,7240,6739,7241,6740,7242,6741,7243,6742,7244,6743,7245,6744,7246,6745,7247,6746,7248,6747,7249,6748,7250,6749,7251,6750,7252,6751,7253,6752,7254,6753,7255,6754,7256,6755,7257,6756,7258,6757,7259,6758,7260,6759,7261,6760,7262,6761,7263,6762,7264,6763,7265,6764,7266,6765,7267,6766,7268,6767,7269,6768,7270,6769,7271,6770,7272,6771,7273,6772,7274,6773,7275,6774,7276,6775,7277,6776,7278,6777,7279,6778,7280,6779,7281,6780,7282,6781,7283,6782,7284,6783,7285,6784,7286,6785,7287,6786,7288,6787,7289,6788,7290,6789,7291,6790,7292,6791,7293,6792,7294,6793,7295,6794,7296,6795,7297,6796,7298,6797,7299,6798,7300,6799,7301,6800,7302,6801,7303,6802,7304,6803,7305,6804,7306,6805,7307,6806,7308,6807,7309,6808,7310,6809,7311,6810,7312,6811,7313,6812,7314,6813,7315,6814,7316,6815,7317,6816,7318,6817,7319,6818,7320,6819,7321,6820,7322,6821,7777,6822,7877,6823,7883,7323,7742,7324,7743,7325,7738,7326,7326,7327,7327,7328,7328,7329,7329,7330,7330,7331,7331,7332,7332,7333,7333,7334,7334,7335,7335,7336,7336,7337,7337,7338,7338,7339,7339,7340,7340,7341,7341,7342,7342,7343,7343,7344,7344,7345,7345,7346,7346,7347,7347,7348,7348,7349,7349,7350,7350,7351,7351,7352,7352,7353,7353,7607,6321,7610,7883,7611,7777,7612,7877,7617,7777,7618,7877,7626,7625,7627,7841,7629,7770,7630,7760,7631,7760,7632,7770,7633,7760,7638,7760,7643,7770,7646,7839,7647,7779,7648,7839,7649,7779,7650,7839,7651,7779,7652,7839,7653,7779,7654,7839,7655,7779,7656,7839,7657,7779,7658,7839,7659,7779,7660,7839,7661,7779,7662,7839,7663,7779,7664,7839,7665,7779,7666,7839,7667,7779,7668,7779,7669,7839,7670,7839,7671,7779,7672,7839,7673,7779,7674,7839,7675,7779,7676,7839,7677,7779,7678,7839,7679,7779,7680,7839,7681,7779,7682,7779,7683,7839,7684,7839,7685,7779,7686,7839,7687,7779,7688,7779,7689,7839,7690,7839,7691,7779,7692,7839,7693,7779,7694,7779,7695,7839,7696,7779,7697,7839,7698,7839,7699,7779,7700,7779,7701,7839,7702,7839,7703,7779,7704,7839,7705,7779,7706,7839,7707,7779,7708,7839,7709,7779,7710,7839,7711,7779,7712,7779,7713,7839,7714,7839,7715,7779,7716,7779,7717,7839,7718,7839,7719,7779,7720,7839,7721,7779,7722,7839,7723,7779,7724,7779,7725,7839,7726,7839,7727,7779,7728,7839,7729,7779,7730,7839,7731,7779,7732,7839,7733,7779,7740,7740,7741,7741,7746,7746,7747,7747,7748,7748,7749,7749,7750,7750,7751,7751,7752,7752,7753,7753,7754,7754,7755,7745,7756,7756,7757,7757,7758,7758,7761,7761,7762,7762,7763,7763,7764,7764,7765,7765,7766,7766,7767,7767,7768,7768,7771,7771,7774,7774,7775,7775,7776,7776,7781,7781,7782,7782,7783,7783,7784,7784,7785,7785,7786,7786,7787,7778,7788,7788,7789,7789,7790,7790,7791,7791,7792,7792,7793,7793,7794,7794,7795,7795,7796,7796,7797,7797,7798,7798,7799,7799,7800,7800,7801,7801,7802,7802,7803,7803,7804,7804,7805,7805,7806,7806,7807,7807,7808,7808,7809,7809,7810,7810,7811,7811,7812,7812,7813,7813,7814,7814,7815,7815,7818,7818,7819,7819,7826,7826,7827,7827,7828,7828,7829,7829,7830,7830,7831,7831,7832,7832,7833,7833,7834,7834,7835,7835,7836,7836,7837,7837,7838,7838,7843,7843,7844,7844,7845,7845,7846,7846,7847,7847,7848,7848,7849,7849,7850,7850,7851,7851,7852,7852,7853,7853,7854,7854,7855,7855,7856,7856,7857,7857,7858,7858,7859,7859,7860,7860,7861,7861,7862,7862,7863,7863,7864,7864,7865,7865,7866,7866,7867,7867,7868,7868,7869,7869,7870,7870,7871,7871,7872,7872,7873,7873,7874,7874,7886,7886,7895,7895],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/AbsolutePosition.swift","symbols":[14,14,538,15,13,3480,19,9,1446,23,21,7638]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/CNodes.swift","symbols":[16,17,7735,17,17,7734,32,12,7645]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/IncrementalParseTransition.swift","symbols":[20,16,16,27,7,7625,32,19,549,34,13,3482,36,9,1453,38,14,7626,45,19,548,60,21,1452,76,9,1451,102,14,537,116,13,3479,120,9,1443,136,9,1444,147,9,1445,222,14,541,226,9,1448,251,23,7620]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourceLength.swift","symbols":[14,14,532,15,13,3468,18,9,1436,22,9,1435,27,20,1501,30,21,7633,35,21,7634,40,21,7636,44,21,7635,49,21,7637,57,21,7639,63,21,7641,67,21,7640,74,21,7642]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourceLocation.swift","symbols":[45,14,535,51,13,3474,54,13,3472,60,13,3473,65,13,3471,69,13,3470,76,9,1439,84,9,1440,93,14,531,96,13,3465,99,13,3464,101,13,3463,105,9,1434,114,19,547,124,9,1449,133,9,1450,143,14,7623,187,14,7624,205,14,7622,211,14,7621,236,7,6316,252,7,6314,273,7,6315,293,7,7344,307,7,7342,323,7,7343]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourcePresence.swift","symbols":[16,12,23,18,7,838,21,7,837]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/Syntax.swift","symbols":[15,14,521,32,9,1425,37,9,1424,42,9,1423,46,9,1422,51,14,6320,55,21,7629,62,14,6319,66,14,6318,70,13,2907,78,13,2906,84,16,14,89,7,7325,93,14,7632,101,16,15,110,2,1429,118,6,3422,134,6,3448,139,6,3443,144,6,3453,149,6,3452,154,6,3446,159,6,3428,167,6,3454,172,6,3444,177,6,3430,182,6,3451,188,6,3432,204,6,3456,220,6,3423,235,6,3455,252,6,3449,258,6,3441,263,6,3440,268,6,3426,273,6,3447,278,6,3450,284,6,3429,291,6,3431,303,6,3433,313,6,3436,318,6,3437,324,7,7349,330,7,7350,335,7,7351,340,7,7352,345,7,7345,350,6,3427,356,6,3424,361,6,3438,366,6,3442,375,6,3445,385,6,3434,404,7,7348,413,7,7347,424,7,7346,430,6,3439,435,6,3425,440,6,3435,446,7,7353,453,14,533,454,16,534,463,25,7612,476,9,1437,480,14,7611,484,14,7613,490,13,3469,496,14,539,497,16,540,506,25,7618,519,9,1447,523,14,7617,527,14,7619,533,13,3481,548,14,528,575,13,2915,580,13,3404,586,13,3414,591,13,2950,596,13,3409,601,13,3417,606,13,2972,611,13,3381,618,13,2949,624,14,6823]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxChildren.swift","symbols":[16,14,527,27,21,7631,47,14,523,48,9,1426,76,21,7630,374,14,529,375,19,7732,376,19,7733,385,13,3420,386,13,3421,388,14,7323,392,14,7324,396,9,1499]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxClassifier.swift","symbols":[28,13,2703,348,14,526,349,13,2910,350,13,2911,352,13,2913,353,13,2912,354,13,2914,358,14,524,359,16,525,388,25,6822,454,9,1427,459,14,6821]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxData.swift","symbols":[104,14,522]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxOtherNodes.swift","symbols":[17,14,466,22,9,1370,27,13,2745,46,13,2744,54,14,454,59,9,1356,72,13,2700,80,13,2706,85,13,2705,91,14,6009,104,14,6005,113,14,6006,121,14,6007,126,14,6008,131,14,6004,136,13,2699,146,13,2701,156,13,2707,167,13,2698,172,13,2702,177,13,2704,182,13,2696,188,13,2697]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxVerifier.swift","symbols":[16,12,17,17,7,550,19,13,2909,28,13,546,32,23,7607,46,21,4115]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/Utils.swift","symbols":[12,14,536,13,13,3476,14,13,3475,16,9,1442,21,13,3478,25,13,3477,29,14,7616,34,14,7614,40,14,7615,51,14,530,53,13,3459,55,13,3458,57,13,3461,59,13,3460,61,13,3462,64,13,3457,68,9,1431,73,9,1432,78,14,7609,82,14,7608]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/Misc.swift","symbols":[15,13,3419,16,13,3416,21,13,3000,22,13,2991,27,13,3001,28,13,2992,33,13,3002,34,13,2993,39,13,3003,40,13,2994,45,13,3112,46,13,3096,51,13,3070,52,13,3055,57,13,3209,58,13,3189,63,13,2959,64,13,2936,69,13,2964,70,13,2941,75,13,3150,76,13,3129,81,13,3299,82,13,3287,87,13,3171,88,13,3155,93,13,3316,94,13,3303,99,13,3322,100,13,3309,105,13,3418,106,13,3415,111,13,2955,112,13,2932,117,13,3175,118,13,3159,123,13,3294,124,13,3282,129,13,3210,130,13,3190,135,13,3102,136,13,3086,141,13,3047,142,13,3024,147,13,3106,148,13,3090,153,13,3317,154,13,3304,159,13,3097,160,13,3081,165,13,3046,166,13,3023,171,13,2925,172,13,2919,177,13,3076,178,13,3061,183,13,3075,184,13,3060,189,13,3151,190,13,3130,195,13,3223,196,13,3203,201,13,3224,202,13,3204,207,13,3252,208,13,3238,213,13,3323,214,13,3310,219,13,3253,220,13,3239,225,13,3242,226,13,3228,231,13,2953,232,13,2930,237,13,3176,238,13,3160,243,13,2967,244,13,2944,249,13,2951,250,13,2928,255,13,3099,256,13,3083,261,13,3185,262,13,3169,267,13,3030,268,13,3007,273,13,3212,274,13,3192,279,13,3249,280,13,3235,285,13,3243,286,13,3229,291,13,2999,292,13,2990,297,13,3180,298,13,3164,303,13,3413,304,13,3408,309,13,3410,310,13,3405,315,13,2927,316,13,2921,321,13,3244,322,13,3230,327,13,3334,328,13,3327,333,13,3348,334,13,3341,339,13,3032,340,13,3009,345,13,3172,346,13,3156,351,13,3173,352,13,3157,357,13,2997,358,13,2988,363,13,3326,364,13,3313,369,13,3395,370,13,3393,375,13,3401,376,13,3400,381,13,3177,382,13,3161,387,13,3079,388,13,3064,393,13,3297,394,13,3285,399,13,3141,400,13,3120,405,13,3182,406,13,3166,411,13,3109,412,13,3093,417,13,3077,418,13,3062,423,13,3214,424,13,3194,429,13,3226,430,13,3206,435,13,3184,436,13,3168,441,13,2998,442,13,2989,447,13,3144,448,13,3123,453,13,3074,454,13,3059,459,13,2926,460,13,2920,465,13,3146,466,13,3125,471,13,3181,472,13,3165,477,13,3270,478,13,3259,483,13,3318,484,13,3305,489,13,3222,490,13,3202,495,13,3325,496,13,3312,501,13,3080,502,13,3065,507,13,3241,508,13,3227,513,13,3319,514,13,3306,519,13,3148,520,13,3127,525,13,3045,526,13,3022,531,13,3216,532,13,3196,537,13,3104,538,13,3088,543,13,3248,544,13,3234,549,13,3038,550,13,3015,555,13,3108,556,13,3092,561,13,3183,562,13,3167,567,13,3271,568,13,3260,573,13,3350,574,13,3343,579,13,3034,580,13,3011,585,13,3072,586,13,3057,591,13,3218,592,13,3198,597,13,3324,598,13,3311,603,13,2958,604,13,2935,609,13,2984,610,13,2977,615,13,3044,616,13,3021,621,13,3071,622,13,3056,627,13,3145,628,13,3124,633,13,3105,634,13,3089,639,13,3250,640,13,3236,645,13,2983,646,13,2976,651,13,3219,652,13,3199,657,13,3215,658,13,3195,663,13,3040,664,13,3017,669,13,3036,670,13,3013,675,13,3143,676,13,3122,681,13,3211,682,13,3191,687,13,3078,688,13,3063,693,13,3266,694,13,3255,699,13,3267,700,13,3256,705,13,2980,706,13,2973,711,13,2981,712,13,2974,717,13,3207,718,13,3187,723,13,3028,724,13,3005,729,13,3029,730,13,3006,735,13,3066,736,13,3051,741,13,3107,742,13,3091,747,13,3251,748,13,3237,753,13,3049,754,13,3026,759,13,3138,760,13,3117,765,13,3268,766,13,3257,771,13,3035,772,13,3012,777,13,2924,778,13,2918,783,13,3042,784,13,3019,789,13,3103,790,13,3087,795,13,3371,796,13,3367,801,13,3272,802,13,3261,807,13,3389,808,13,3385,813,13,3352,814,13,3345,819,13,3351,820,13,3344,825,13,3372,826,13,3368,831,13,3363,832,13,3360,837,13,3388,838,13,3384,843,13,2966,844,13,2943,849,13,3220,850,13,3200,855,13,3136,856,13,3115,861,13,2954,862,13,2931,867,13,3068,868,13,3053,873,13,3380,874,13,3376,879,13,3208,880,13,3188,885,13,3340,886,13,3333,891,13,3274,892,13,3263,897,13,3387,898,13,3383,903,13,2923,904,13,2917,909,13,3386,910,13,3382,915,13,3221,916,13,3201,921,13,3041,922,13,3018,927,13,3399,928,13,3398,933,13,3391,934,13,3390,939,13,3349,940,13,3342,945,13,3370,946,13,3366,951,13,3337,952,13,3330,957,13,3403,958,13,3402,963,13,3225,964,13,3205,969,13,3178,970,13,3162,975,13,3378,976,13,3374,981,13,3315,982,13,3302,987,13,3362,988,13,3359,993,13,3033,994,13,3010,999,13,2969,1000,13,2946,1005,13,2960,1006,13,2937,1011,13,3101,1012,13,3085,1017,13,3110,1018,13,3094,1023,13,3152,1024,13,3131,1029,13,2963,1030,13,2940,1035,13,3004,1036,13,2995,1041,13,2962,1042,13,2939,1047,13,2986,1048,13,2979,1053,13,3134,1054,13,3113,1059,13,3411,1060,13,3406,1065,13,2982,1066,13,2975,1071,13,2971,1072,13,2948,1077,13,2970,1078,13,2947,1083,13,3140,1084,13,3119,1089,13,2956,1090,13,2933,1095,13,3031,1096,13,3008,1101,13,3069,1102,13,3054,1107,13,3174,1108,13,3158,1113,13,3314,1114,13,3301,1119,13,3357,1120,13,3355,1125,13,3358,1126,13,3356,1131,13,3354,1132,13,3347,1137,13,3292,1138,13,3280,1143,13,3137,1144,13,3116,1149,13,2965,1150,13,2942,1155,13,3412,1156,13,3407,1161,13,3245,1162,13,3231,1167,13,2961,1168,13,2938,1173,13,2985,1174,13,2978,1179,13,3254,1180,13,3240,1185,13,2922,1186,13,2916,1191,13,2957,1192,13,2934,1197,13,3153,1198,13,3132,1203,13,2996,1204,13,2987,1209,13,3149,1210,13,3128,1215,13,3247,1216,13,3233,1221,13,3339,1222,13,3332,1227,13,3246,1228,13,3232,1233,13,3273,1234,13,3262,1239,13,3295,1240,13,3283,1245,13,3179,1246,13,3163,1251,13,3364,1252,13,3361,1257,13,3321,1258,13,3308,1263,13,3338,1264,13,3331,1269,13,3336,1270,13,3329,1275,13,3379,1276,13,3375,1281,13,3298,1282,13,3286,1287,13,3296,1288,13,3284,1293,13,3291,1294,13,3279,1299,13,2952,1300,13,2929,1305,13,3100,1306,13,3084,1311,13,3039,1312,13,3016,1317,13,3043,1318,13,3020,1323,13,3293,1324,13,3281,1329,13,3397,1330,13,3396,1335,13,3335,1336,13,3328,1341,13,3369,1342,13,3365,1347,13,3135,1348,13,3114,1353,13,3186,1354,13,3170,1359,13,3300,1360,13,3288,1365,13,2968,1366,13,2945,1371,13,3037,1372,13,3014,1377,13,3098,1378,13,3082,1383,13,3269,1384,13,3258,1389,13,3142,1390,13,3121,1395,13,3320,1396,13,3307,1401,13,3111,1402,13,3095,1407,13,3139,1408,13,3118,1413,13,3073,1414,13,3058,1419,13,3147,1420,13,3126,1425,13,3217,1426,13,3197,1431,13,3067,1432,13,3052,1437,13,3048,1438,13,3025,1443,13,3154,1444,13,3133,1449,13,3275,1450,13,3264,1455,13,3213,1456,13,3193,1461,13,3353,1462,13,3346,1467,13,3276,1468,13,3265,1473,13,3290,1474,13,3278,1479,13,3289,1480,13,3277,1485,13,3377,1486,13,3373,1491,13,3394,1492,13,3392,1497,13,3050,1498,13,3027,1509,14,6313,1515,14,6307]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxAnyVisitor.swift","symbols":[36,11,543,40,12,6321,46,12,6322,50,21,6537,54,21,6787,58,21,6543,62,21,6793,66,21,6334,70,21,6583,73,21,6335,77,21,6584,80,21,6336,84,21,6585,87,21,6337,91,21,6586,94,21,6391,98,21,6641,101,21,6365,105,21,6615,108,21,6431,112,21,6681,115,21,6558,119,21,6808,122,21,6563,126,21,6813,129,21,6408,133,21,6658,136,21,6484,140,21,6734,143,21,6413,147,21,6663,150,21,6488,154,21,6738,157,21,6494,161,21,6744,164,21,6542,168,21,6792,171,21,6554,175,21,6804,178,21,6417,182,21,6667,185,21,6479,189,21,6729,192,21,6432,196,21,6682,199,21,6381,203,21,6631,206,21,6357,210,21,6607,213,21,6385,217,21,6635,220,21,6489,224,21,6739,227,21,6376,231,21,6626,234,21,6356,238,21,6606,241,21,6547,245,21,6797,248,21,6371,252,21,6621,255,21,6370,259,21,6620,262,21,6409,266,21,6659,269,21,6445,273,21,6695,276,21,6446,280,21,6696,283,21,6460,287,21,6710,290,21,6495,294,21,6745,297,21,6461,301,21,6711,304,21,6450,308,21,6700,311,21,6552,315,21,6802,318,21,6418,322,21,6668,325,21,6566,329,21,6816,332,21,6550,336,21,6800,339,21,6378,343,21,6628,346,21,6427,350,21,6677,353,21,6341,357,21,6590,360,21,6434,364,21,6684,367,21,6457,371,21,6707,374,21,6451,378,21,6701,381,21,6333,385,21,6582,388,21,6422,392,21,6672,395,21,6541,399,21,6791,402,21,6538,406,21,6788,409,21,6549,413,21,6799,416,21,6452,420,21,6702,423,21,6499,427,21,6749,430,21,6506,434,21,6756,437,21,6343,441,21,6592,444,21,6414,448,21,6664,451,21,6415,455,21,6665,458,21,6331,462,21,6580,465,21,6498,469,21,6748,472,21,6532,476,21,6782,479,21,6535,483,21,6785,486,21,6419,490,21,6669,493,21,6374,497,21,6624,500,21,6482,504,21,6732,507,21,6399,511,21,6649,514,21,6424,518,21,6674,521,21,6388,525,21,6638,528,21,6372,532,21,6622,535,21,6436,539,21,6686,542,21,6448,546,21,6698,549,21,6426,553,21,6676,556,21,6332,560,21,6581,563,21,6402,567,21,6652,570,21,6369,574,21,6619,577,21,6548,581,21,6798,584,21,6404,588,21,6654,591,21,6423,595,21,6673,598,21,6467,602,21,6717,605,21,6490,609,21,6740,612,21,6444,616,21,6694,619,21,6497,623,21,6747,626,21,6375,630,21,6625,633,21,6449,637,21,6699,640,21,6491,644,21,6741,647,21,6406,651,21,6656,654,21,6355,658,21,6605,661,21,6438,665,21,6688,668,21,6383,672,21,6633,675,21,6456,679,21,6706,682,21,6348,686,21,6598,689,21,6387,693,21,6637,696,21,6425,700,21,6675,703,21,6468,707,21,6718,710,21,6508,714,21,6758,717,21,6344,721,21,6594,724,21,6367,728,21,6617,731,21,6440,735,21,6690,738,21,6496,742,21,6746,745,21,6557,749,21,6807,752,21,6327,756,21,6576,759,21,6354,763,21,6604,766,21,6366,770,21,6616,773,21,6403,777,21,6653,780,21,6384,784,21,6634,787,21,6458,791,21,6708,794,21,6326,798,21,6575,801,21,6441,805,21,6691,808,21,6437,812,21,6687,815,21,6350,819,21,6600,822,21,6346,826,21,6596,829,21,6401,833,21,6651,836,21,6433,840,21,6683,843,21,6373,847,21,6623,850,21,6463,854,21,6713,857,21,6464,861,21,6714,864,21,6323,868,21,6572,871,21,6324,875,21,6573,878,21,6429,882,21,6679,885,21,6339,889,21,6588,892,21,6340,896,21,6589,899,21,6361,903,21,6611,906,21,6386,910,21,6636,913,21,6459,917,21,6709,920,21,6359,924,21,6609,927,21,6396,931,21,6646,934,21,6465,938,21,6715,941,21,6345,945,21,6595,948,21,6546,952,21,6796,955,21,6352,959,21,6602,962,21,6382,966,21,6632,969,21,6520,973,21,6770,976,21,6469,980,21,6719,983,21,6529,987,21,6779,990,21,6510,994,21,6760,997,21,6509,1001,21,6759,1004,21,6521,1008,21,6771,1011,21,6516,1015,21,6766,1018,21,6528,1022,21,6778,1025,21,6565,1029,21,6815,1032,21,6442,1036,21,6692,1039,21,6394,1043,21,6644,1046,21,6553,1050,21,6803,1053,21,6363,1057,21,6613,1060,21,6525,1064,21,6775,1067,21,6430,1071,21,6680,1074,21,6505,1078,21,6755,1081,21,6471,1085,21,6721,1088,21,6527,1092,21,6777,1095,21,6545,1099,21,6795,1102,21,6526,1106,21,6776,1109,21,6443,1113,21,6693,1116,21,6351,1120,21,6601,1123,21,6534,1127,21,6784,1130,21,6530,1134,21,6780,1137,21,6507,1141,21,6757,1144,21,6519,1148,21,6769,1151,21,6502,1155,21,6752,1158,21,6536,1162,21,6786,1165,21,6447,1169,21,6697,1172,21,6420,1176,21,6670,1179,21,6523,1183,21,6773,1186,21,6487,1190,21,6737,1193,21,6515,1197,21,6765,1200,21,6571,1204,21,6593,1207,21,6568,1211,21,6818,1214,21,6559,1218,21,6809,1221,21,6380,1225,21,6630,1228,21,6389,1232,21,6639,1235,21,6410,1239,21,6660,1242,21,6562,1246,21,6812,1249,21,6338,1253,21,6587,1256,21,6561,1260,21,6811,1263,21,6329,1267,21,6578,1270,21,6392,1274,21,6642,1277,21,6539,1281,21,6789,1284,21,6325,1288,21,6574,1291,21,6570,1295,21,6820,1298,21,6569,1302,21,6819,1305,21,6398,1309,21,6648,1312,21,6555,1316,21,6805,1319,21,6342,1323,21,6591,1326,21,6364,1330,21,6614,1333,21,6416,1337,21,6666,1340,21,6486,1344,21,6736,1347,21,6513,1351,21,6763,1354,21,6514,1358,21,6764,1361,21,6512,1365,21,6762,1368,21,6477,1372,21,6727,1375,21,6395,1379,21,6645,1382,21,6564,1386,21,6814,1389,21,6540,1393,21,6790,1396,21,6453,1400,21,6703,1403,21,6560,1407,21,6810,1410,21,6328,1414,21,6577,1417,21,6462,1421,21,6712,1424,21,6544,1428,21,6794,1431,21,6556,1435,21,6806,1438,21,6411,1442,21,6661,1445,21,6330,1449,21,6579,1452,21,6407,1456,21,6657,1459,21,6455,1463,21,6705,1466,21,6504,1470,21,6754,1473,21,6454,1477,21,6704,1480,21,6470,1484,21,6720,1487,21,6480,1491,21,6730,1494,21,6421,1498,21,6671,1501,21,6517,1505,21,6767,1508,21,6493,1512,21,6743,1515,21,6503,1519,21,6753,1522,21,6501,1526,21,6751,1529,21,6524,1533,21,6774,1536,21,6483,1540,21,6733,1543,21,6481,1547,21,6731,1550,21,6476,1554,21,6726,1557,21,6551,1561,21,6801,1564,21,6379,1568,21,6629,1571,21,6349,1575,21,6599,1578,21,6353,1582,21,6603,1585,21,6478,1589,21,6728,1592,21,6533,1596,21,6783,1599,21,6500,1603,21,6750,1606,21,6518,1610,21,6768,1613,21,6393,1617,21,6643,1620,21,6428,1624,21,6678,1627,21,6485,1631,21,6735,1634,21,6567,1638,21,6817,1641,21,6347,1645,21,6597,1648,21,6377,1652,21,6627,1655,21,6466,1659,21,6716,1662,21,6400,1666,21,6650,1669,21,6492,1673,21,6742,1676,21,6390,1680,21,6640,1683,21,6397,1687,21,6647,1690,21,6368,1694,21,6618,1697,21,6405,1701,21,6655,1704,21,6439,1708,21,6689,1711,21,6362,1715,21,6612,1718,21,6358,1722,21,6608,1725,21,6412,1729,21,6662,1732,21,6472,1736,21,6722,1739,21,6435,1743,21,6685,1746,21,6511,1750,21,6761,1753,21,6473,1757,21,6723,1760,21,6475,1764,21,6725,1767,21,6474,1771,21,6724,1774,21,6522,1778,21,6772,1781,21,6531,1785,21,6781,1788,21,6360,1792,21,6610]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxBaseNodes.swift","symbols":[19,16,5,25,7,6308,32,7,6302,37,14,450,41,9,1346,49,9,1345,56,9,1344,82,13,2689,91,14,5991,95,14,5990,103,14,5989,109,14,5988,117,13,2688,127,16,6,133,7,6309,140,7,6303,145,14,451,149,9,1349,157,9,1348,164,9,1347,190,13,2691,199,14,5995,203,14,5994,211,14,5993,217,14,5992,225,13,2690,235,16,7,241,7,6310,248,7,6304,253,14,452,257,9,1352,265,9,1351,272,9,1350,298,13,2693,307,14,5999,311,14,5998,319,14,5997,325,14,5996,333,13,2692,343,16,8,349,7,6311,356,7,6305,361,14,453,365,9,1355,373,9,1354,380,9,1353,406,13,2694,415,14,6003,419,14,6002,427,14,6001,433,14,6000,441,13,2695,451,16,11,457,7,6312,464,7,6306,469,14,463,473,9,1367,481,9,1366,488,9,1365,514,13,2738,523,14,6053,527,14,6052,535,14,6051,541,14,6050,549,13,2737]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxBuilders.swift","symbols":[15,14,108,21,23,4518,26,23,4519,31,23,4520,55,9,1035,63,14,496,69,23,6193,74,23,6192,85,23,6194,115,9,1398,123,14,506,129,23,6241,134,23,6242,161,9,1408,169,14,193,175,23,4845,199,9,1116,207,14,465,213,23,6057,218,23,6059,223,23,6058,250,9,1369,258,14,488,264,23,6158,269,23,6159,296,9,1390,304,14,211,310,23,4926,315,23,4927,342,9,1132,350,14,241,356,23,5054,361,23,5053,372,23,5055,402,9,1161,410,14,140,416,23,4636,421,23,4637,445,9,1067,453,14,92,459,23,4443,483,9,1021,491,14,148,497,23,4679,521,9,1073,529,14,355,535,23,5554,559,9,1261,567,14,130,573,23,4607,597,9,1057,605,14,90,611,23,4441,641,9,1019,649,14,120,655,23,4554,679,9,1047,687,14,118,693,23,4552,717,9,1045,725,14,195,731,23,4847,755,9,1118,763,14,267,769,23,5166,793,9,1185,801,14,269,807,23,5168,831,9,1187,839,14,297,845,23,5272,869,9,1213,877,14,367,883,23,5613,888,23,5614,912,9,1271,920,14,299,926,23,5275,931,23,5276,955,9,1215,963,14,277,969,23,5206,993,9,1195,1001,14,484,1007,23,6142,1012,23,6141,1017,23,6140,1041,9,1386,1049,14,213,1055,23,4929,1079,9,1134,1087,14,512,1093,23,6269,1098,23,6268,1109,23,6270,1139,9,1413,1147,14,480,1153,23,6129,1158,23,6128,1169,23,6130,1199,9,1382,1207,14,134,1213,23,4619,1218,23,4618,1223,23,4620,1253,9,1061,1261,14,231,1267,23,5000,1272,23,4999,1277,23,4997,1282,23,4998,1306,9,1152,1314,14,58,1320,23,4277,1325,23,4278,1349,9,990,1357,14,245,1363,23,5070,1368,23,5073,1373,23,5072,1378,23,5071,1408,9,1165,1416,14,291,1422,23,5249,1446,9,1208,1454,14,279,1460,23,5208,1484,9,1197,1492,14,46,1498,23,4238,1503,23,4236,1508,23,4235,1513,23,4234,1518,23,4237,1554,9,979,1562,14,221,1568,23,4965,1573,23,4964,1578,23,4966,1583,23,4963,1610,9,1142,1618,14,462,1624,23,6046,1629,23,6047,1656,9,1364,1664,14,456,1670,23,6013,1675,23,6015,1680,23,6014,1707,9,1358,1715,14,478,1721,23,6123,1745,9,1380,1753,14,281,1759,23,5218,1770,23,5219,1775,23,5216,1780,23,5215,1785,23,5217,1809,9,1199,1817,14,389,1823,23,5693,1828,23,5695,1839,23,5694,1866,9,1291,1874,14,62,1880,23,4299,1885,23,4298,1909,9,993,1917,14,207,1923,23,4914,1934,23,4913,1939,23,4918,1944,23,4916,1949,23,4915,1954,23,4919,1959,23,4917,1983,9,1128,1991,14,42,1997,23,4220,2002,23,4221,2007,23,4219,2018,23,4222,2048,9,975,2056,14,373,2062,23,5625,2086,9,1277,2094,14,441,2100,23,5942,2105,23,5941,2110,23,5940,2140,9,1336,2148,14,215,2154,23,4942,2159,23,4939,2164,23,4938,2175,23,4940,2180,23,4941,2185,23,4943,2218,9,1136,2226,14,126,2232,23,4587,2237,23,4584,2242,23,4583,2253,23,4585,2258,23,4586,2263,23,4588,2302,9,1053,2310,14,341,2316,23,5470,2321,23,5471,2348,9,1251,2356,14,175,2362,23,4777,2367,23,4778,2394,9,1098,2402,14,225,2408,23,4981,2413,23,4982,2440,9,1146,2448,14,154,2454,23,4700,2459,23,4701,2486,9,1079,2494,14,122,2500,23,4556,2524,9,1049,2532,14,249,2538,23,5083,2543,23,5084,2548,23,5085,2553,23,5082,2564,23,5086,2597,9,1169,2605,14,273,2611,23,5186,2616,23,5184,2621,23,5183,2632,23,5185,2637,23,5187,2667,9,1191,2675,14,229,2681,23,4992,2705,9,1150,2713,14,44,2719,23,4227,2724,23,4226,2729,23,4228,2756,9,977,2764,14,181,2770,23,4804,2794,9,1104,2802,14,116,2808,23,4547,2813,23,4548,2837,9,1043,2845,14,185,2851,23,4817,2856,23,4819,2861,23,4818,2872,23,4820,2905,9,1108,2913,14,223,2919,23,4973,2924,23,4974,2929,23,4976,2934,23,4978,2939,23,4977,2944,23,4975,2977,9,1144,2985,14,311,2991,23,5330,2996,23,5329,3020,9,1225,3028,14,357,3034,23,5556,3058,9,1263,3066,14,265,3072,23,5163,3077,23,5162,3082,23,5161,3093,23,5164,3126,9,1183,3134,14,371,3140,23,5622,3145,23,5623,3172,9,1275,3180,14,128,3186,23,4600,3197,23,4599,3208,23,4598,3213,23,4601,3218,23,4604,3223,23,4602,3228,23,4603,3255,9,1055,3263,14,275,3269,23,5200,3280,23,5199,3291,23,5198,3296,23,5201,3301,23,5203,3306,23,5202,3311,23,5204,3338,9,1193,3346,14,189,3352,23,4830,3357,23,4829,3368,23,4831,3398,9,1112,3406,14,88,3412,23,4438,3417,23,4437,3444,9,1017,3452,14,253,3458,23,5110,3463,23,5108,3468,23,5109,3473,23,5111,3497,9,1173,3505,14,144,3511,23,4660,3516,23,4659,3521,23,4658,3548,9,1070,3556,14,74,3562,23,4360,3573,23,4359,3600,9,1005,3608,14,152,3614,23,4694,3619,23,4696,3624,23,4695,3629,23,4697,3662,9,1077,3670,14,227,3676,23,4987,3681,23,4989,3686,23,4988,3691,23,4990,3724,9,1148,3732,14,313,3738,23,5335,3743,23,5336,3748,23,5338,3753,23,5337,3783,9,1227,3791,14,393,3797,23,5713,3802,23,5712,3807,23,5710,3812,23,5716,3817,23,5715,3822,23,5714,3827,23,5711,3869,9,1295,3877,14,66,3883,23,4310,3888,23,4308,3893,23,4311,3898,23,4309,3922,9,997,3930,14,112,3936,23,4539,3941,23,4540,3965,9,1039,3973,14,369,3979,23,5619,3984,23,5618,4017,9,1273,4025,14,494,4031,23,6183,4042,23,6182,4053,23,6180,4058,23,6184,4063,23,6187,4068,23,6185,4073,23,6186,4078,23,6181,4108,9,1396,4116,14,34,4122,23,4180,4133,23,4179,4144,23,4177,4149,23,4181,4154,23,4184,4159,23,4182,4164,23,4183,4169,23,4178,4199,9,967,4207,14,86,4213,23,4430,4224,23,4429,4235,23,4427,4240,23,4431,4245,23,4434,4250,23,4432,4255,23,4433,4260,23,4428,4290,9,1015,4298,14,110,4304,23,4533,4315,23,4532,4326,23,4530,4331,23,4534,4336,23,4535,4341,23,4536,4346,23,4531,4376,9,1037,4384,14,183,4390,23,4810,4395,23,4809,4406,23,4811,4436,9,1106,4444,14,293,4450,23,5252,4455,23,5253,4479,9,1210,4487,14,32,4493,23,4166,4504,23,4165,4531,9,965,4539,14,259,4545,23,5133,4550,23,5134,4577,9,1178,4585,14,251,4591,23,5097,4602,23,5098,4607,23,5099,4612,23,5103,4617,23,5102,4622,23,5096,4627,23,5101,4632,23,5100,4653,9,1171,4661,14,70,4667,23,4334,4678,23,4333,4689,23,4337,4694,23,4336,4699,23,4339,4704,23,4335,4709,23,4338,4714,23,4340,4744,9,1001,4752,14,179,4758,23,4795,4769,23,4794,4780,23,4797,4785,23,4798,4790,23,4800,4795,23,4796,4800,23,4801,4805,23,4799,4810,23,4802,4837,9,1102,4845,14,243,4851,23,5063,4862,23,5062,4873,23,5064,4878,23,5065,4905,9,1163,4913,14,124,4919,23,4571,4930,23,4569,4941,23,4567,4946,23,4573,4951,23,4568,4956,23,4574,4961,23,4572,4966,23,4570,4996,9,1051,5004,14,303,5010,23,5288,5015,23,5286,5020,23,5285,5025,23,5287,5049,9,1219,5057,14,305,5063,23,5292,5068,23,5291,5092,9,1221,5100,14,28,5106,23,4156,5117,23,4155,5128,23,4153,5133,23,4154,5138,23,4157,5171,9,961,5179,14,235,5185,23,5020,5190,23,5022,5195,23,5021,5225,9,1156,5233,14,54,5239,23,4253,5250,23,4252,5255,23,4251,5260,23,4254,5265,23,4255,5270,23,4256,5275,23,4257,5299,9,987,5307,14,100,5313,23,4473,5318,23,4472,5329,23,4474,5359,9,1029,5367,14,150,5373,23,4685,5378,23,4689,5383,23,4687,5388,23,4686,5393,23,4688,5417,9,1075,5425,14,96,5431,23,4460,5442,23,4459,5453,23,4461,5458,23,4458,5491,9,1025,5499,14,169,5505,23,4762,5510,23,4764,5515,23,4761,5520,23,4763,5544,9,1092,5552,14,68,5558,23,4322,5569,23,4321,5580,23,4319,5585,23,4320,5618,9,999,5626,14,472,5632,23,6083,5643,23,6082,5654,23,6080,5659,23,6084,5664,23,6085,5669,23,6086,5674,23,6087,5679,23,6081,5709,9,1376,5717,14,82,5723,23,4411,5734,23,4410,5745,23,4409,5750,23,4412,5755,23,4408,5782,9,1011,5790,14,417,5796,23,5848,5801,23,5847,5834,9,1314,5842,14,315,5848,23,5351,5859,23,5350,5870,23,5355,5875,23,5353,5880,23,5352,5885,23,5349,5896,23,5354,5932,9,1229,5940,14,397,5946,23,5738,5951,23,5740,5956,23,5739,5992,9,1298,6000,14,419,6006,23,5851,6011,23,5852,6035,9,1316,6043,14,409,6049,23,5790,6054,23,5792,6059,23,5791,6089,9,1309,6097,14,433,6103,23,5907,6108,23,5908,6113,23,5909,6143,9,1329,6151,14,165,6157,23,4754,6162,23,4750,6167,23,4752,6172,23,4751,6183,23,4753,6210,9,1088,6218,14,486,6224,23,6154,6229,23,6150,6234,23,6152,6239,23,6151,6244,23,6153,6249,23,6155,6282,9,1388,6290,14,237,6296,23,5031,6301,23,5030,6306,23,5028,6317,23,5029,6350,9,1158,6358,14,387,6364,23,5687,6369,23,5686,6374,23,5688,6379,23,5685,6409,9,1289,6417,14,319,6423,23,5369,6428,23,5368,6433,23,5366,6438,23,5367,6468,9,1233,6476,14,431,6482,23,5902,6487,23,5903,6492,23,5901,6522,9,1327,6530,14,470,6536,23,6068,6541,23,6069,6565,9,1374,6573,14,429,6579,23,5896,6584,23,5897,6589,23,5895,6594,23,5894,6624,9,1325,6632,14,263,6638,23,5154,6643,23,5155,6664,9,1181,6672,14,445,6678,23,5952,6683,23,5955,6688,23,5953,6693,23,5956,6698,23,5954,6719,9,1340,6727,14,437,6733,23,5930,6738,23,5932,6743,23,5931,6773,9,1332,6781,14,391,6787,23,5701,6792,23,5700,6803,23,5702,6833,9,1293,6841,14,381,6847,23,5655,6852,23,5656,6876,9,1284,6884,14,449,6890,23,5981,6895,23,5985,6900,23,5984,6905,23,5987,6910,23,5983,6915,23,5986,6920,23,5982,6950,9,1343,6958,14,271,6964,23,5174,6969,23,5176,6974,23,5173,6979,23,5175,7003,9,1189,7011,14,217,7017,23,4946,7022,23,4947,7046,9,1138,7054,14,423,7060,23,5863,7065,23,5865,7070,23,5864,7106,9,1320,7114,14,407,7120,23,5785,7125,23,5786,7149,9,1307,7157,14,64,7163,23,4302,7168,23,4303,7192,9,995,7200,14,516,7206,23,6286,7211,23,6287,7216,23,6284,7221,23,6285,7232,23,6288,7262,9,1417,7270,14,498,7276,23,6200,7281,23,6201,7308,9,1400,7316,14,138,7322,23,4632,7346,9,1065,7354,14,197,7360,23,4857,7365,23,4858,7370,23,4854,7375,23,4859,7380,23,4855,7385,23,4856,7418,9,1120,7426,14,504,7432,23,6235,7437,23,6236,7448,23,6237,7453,23,6238,7486,9,1406,7494,14,52,7500,23,4241,7505,23,4242,7532,9,985,7540,14,502,7546,23,6221,7551,23,6222,7556,23,6218,7561,23,6223,7566,23,6226,7571,23,6224,7576,23,6220,7581,23,6228,7586,23,6219,7591,23,6227,7596,23,6225,7601,23,6229,7637,9,1404,7645,14,38,7651,23,4201,7656,23,4204,7661,23,4200,7666,23,4203,7671,23,4202,7676,23,4206,7687,23,4205,7723,9,971,7731,14,458,7737,23,6025,7742,23,6026,7747,23,6024,7752,23,6028,7757,23,6027,7790,9,1360,7798,14,30,7804,23,4160,7809,23,4161,7833,9,963,7841,14,520,7847,23,6300,7852,23,6301,7879,9,1421,7887,14,518,7893,23,6295,7898,23,6294,7909,23,6297,7914,23,6296,7944,9,1419,7952,14,173,7958,23,4774,7982,9,1096,7990,14,490,7996,23,6162,8001,23,6163,8025,9,1392,8033,14,209,8039,23,4922,8044,23,4923,8068,9,1130,8076,14,349,8082,23,5518,8087,23,5516,8092,23,5515,8103,23,5517,8136,9,1257,8144,14,403,8150,23,5772,8155,23,5771,8160,23,5774,8165,23,5773,8195,9,1303,8203,14,405,8209,23,5782,8214,23,5779,8219,23,5781,8224,23,5780,8254,9,1305,8262,14,401,8268,23,5766,8273,23,5763,8278,23,5765,8289,23,5764,8322,9,1301,8330,14,167,8336,23,4756,8360,9,1090,8368,14,508,8374,23,6245,8379,23,6246,8406,9,1410,8414,14,460,8420,23,6040,8425,23,6041,8430,23,6037,8435,23,6039,8446,23,6043,8451,23,6042,8456,23,6038,8486,9,1362,8494,14,283,8500,23,5221,8524,9,1201,8532,14,500,8538,23,6204,8543,23,6205,8570,9,1402,8578,14,36,8584,23,4190,8589,23,4191,8594,23,4189,8627,9,969,8635,14,301,8641,23,5279,8646,23,5280,8673,9,1217,8681,14,468,8687,23,6063,8692,23,6064,8697,23,6065,8721,9,1372,8729,14,492,8735,23,6167,8740,23,6168,8745,23,6169,8766,9,1394,8774,14,199,8780,23,4865,8785,23,4864,8796,23,4866,8826,9,1122,8834,14,40,8840,23,4212,8845,23,4211,8856,23,4213,8883,9,973,8891,14,191,8897,23,4838,8902,23,4841,8907,23,4840,8912,23,4843,8917,23,4839,8922,23,4842,8955,9,1114,8963,14,287,8969,23,5229,8974,23,5230,9007,9,1205,9015,14,285,9021,23,5225,9026,23,5224,9050,9,1203,9058,14,317,9064,23,5359,9069,23,5361,9074,23,5360,9104,9,1231,9112,14,219,9118,23,4954,9129,23,4957,9134,23,4958,9139,23,4955,9144,23,4956,9168,9,1140,9176,14,363,9182,23,5589,9193,23,5592,9198,23,5593,9203,23,5588,9208,23,5590,9213,23,5591,9237,9,1268,9245,14,383,9251,23,5662,9256,23,5661,9267,23,5663,9297,9,1286,9305,14,379,9311,23,5650,9316,23,5652,9321,23,5651,9351,9,1282,9359,14,425,9365,23,5871,9370,23,5870,9381,23,5872,9411,9,1322,9419,14,343,9425,23,5475,9430,23,5474,9454,9,1253,9462,14,339,9468,23,5464,9473,23,5467,9478,23,5466,9483,23,5465,9513,9,1249,9521,14,329,9527,23,5404,9551,9,1242,9559,14,482,9565,23,6135,9570,23,6134,9575,23,6136,9605,9,1384,9613,14,136,9619,23,4628,9624,23,4626,9629,23,4630,9634,23,4627,9639,23,4629,9675,9,1063,9683,14,76,9689,23,4365,9694,23,4366,9699,23,4364,9729,9,1007,9737,14,84,9743,23,4415,9748,23,4416,9775,9,1013,9783,14,333,9789,23,5425,9794,23,5424,9821,9,1245,9829,14,443,9835,23,5945,9840,23,5946,9867,9,1338,9875,14,377,9881,23,5645,9886,23,5646,9910,9,1280,9918,14,163,9924,23,4743,9954,9,1086,9962,14,233,9968,23,5016,9973,23,5014,9978,23,5011,9983,23,5015,9988,23,5009,9993,23,5010,9998,23,5012,10003,23,5013,10027,9,1154,10035,14,514,10041,23,6276,10046,23,6275,10057,23,6277,10087,9,1415,10095,14,72,10101,23,4351,10106,23,4350,10117,23,4352,10122,23,4353,10127,23,4354,10132,23,4355,10137,23,4349,10173,9,1003,10181,14,132,10187,23,4614,10192,23,4613,10203,23,4612,10227,9,1059,10235,14,177,10241,23,4781,10246,23,4782,10270,9,1100,10278,14,361,10284,23,5579,10289,23,5578,10300,23,5580,10330,9,1266,10338,14,158,10344,23,4722,10349,23,4721,10376,9,1082,10384,14,171,10390,23,4771,10395,23,4772,10400,23,4769,10405,23,4770,10432,9,1094,10440,14,114,10446,23,4543,10451,23,4544,10478,9,1041,10486,14,187,10492,23,4823,10497,23,4824,10524,9,1110,10532,14,255,10538,23,5113,10562,9,1175,10570,14,102,10576,23,4480,10581,23,4478,10586,23,4479,10616,9,1031,10624,14,94,10630,23,4449,10635,23,4448,10646,23,4450,10676,9,1023,10684,14,201,10690,23,4869,10695,23,4870,10719,9,1124,10727,14,321,10733,23,5375,10738,23,5376,10743,23,5374,10748,23,5377,10772,9,1235,10780,14,247,10786,23,5075,10810,9,1167,10818,14,323,10824,23,5381,10829,23,5380,10856,9,1237,10864,14,325,10870,23,5385,10875,23,5384,10899,9,1239,10907,14,421,10913,23,5857,10918,23,5856,10923,23,5858,10953,9,1318,10961,14,439,10967,23,5936,10972,23,5935,10996,9,1334,11004,14,98,11010,23,4466,11015,23,4467,11020,23,4465,11044,9,1027]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxClassification.swift","symbols":[14,12,18,16,7,566,18,7,567,20,7,551,22,7,559,24,7,562,26,7,558,28,7,561,30,7,556,32,7,565,34,7,564,36,7,554,38,7,568,40,7,555,42,7,563,44,7,552,46,7,557,48,7,553,50,7,560]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxCollections.swift","symbols":[14,16,13,16,6,2908,24,14,238,29,9,1159,42,13,2108,47,13,2110,67,14,5046,80,14,5032,93,14,5047,111,14,5048,127,14,5045,136,14,5035,145,14,5034,153,14,5037,159,14,5038,164,14,5039,169,14,5040,174,14,5036,179,13,2107,189,13,2109,208,19,7673,209,19,7672,211,16,239,220,25,5043,230,14,5033,241,13,2105,244,13,2111,248,14,5041,252,14,5042,256,14,5044,261,9,1469,273,14,344,278,9,1254,291,13,2391,296,13,2393,316,14,5490,329,14,5476,342,14,5491,360,14,5492,376,14,5489,385,14,5479,394,14,5478,402,14,5481,408,14,5482,413,14,5483,418,14,5484,423,14,5480,428,13,2390,438,13,2392,457,19,7694,458,19,7695,460,16,345,469,25,5487,479,14,5477,490,13,2388,493,13,2394,497,14,5485,501,14,5486,505,14,5488,510,9,1480,522,14,202,527,9,1125,540,13,2001,545,13,2003,565,14,4885,578,14,4871,591,14,4886,609,14,4887,625,14,4884,634,14,4874,643,14,4873,651,14,4876,657,14,4877,662,14,4878,667,14,4879,672,14,4875,677,13,2000,687,13,2002,706,19,7668,707,19,7669,709,16,203,718,25,4882,728,14,4872,739,13,1998,742,13,2004,746,14,4880,750,14,4881,754,14,4883,759,9,1467,771,14,352,776,9,1259,789,13,2418,794,13,2420,814,14,5550,827,14,5536,840,14,5551,858,14,5552,874,14,5549,883,14,5539,892,14,5538,900,14,5541,906,14,5542,911,14,5543,916,14,5544,921,14,5540,926,13,2417,936,13,2419,955,19,7700,956,19,7701,958,16,353,967,25,5547,977,14,5537,988,13,2415,991,13,2421,995,14,5545,999,14,5546,1003,14,5548,1008,9,1483,1020,14,364,1025,9,1269,1038,13,2451,1043,13,2453,1063,14,5608,1076,14,5594,1089,14,5609,1107,14,5610,1123,14,5607,1132,14,5597,1141,14,5596,1149,14,5599,1155,14,5600,1160,14,5601,1165,14,5602,1170,14,5598,1175,13,2450,1185,13,2452,1204,19,7705,1205,19,7704,1207,16,365,1216,25,5605,1226,14,5595,1237,13,2448,1240,13,2454,1244,14,5603,1248,14,5604,1252,14,5606,1257,9,1485,1269,14,334,1274,9,1246,1287,13,2363,1292,13,2365,1312,14,5440,1325,14,5426,1338,14,5441,1356,14,5442,1372,14,5439,1381,14,5429,1390,14,5428,1398,14,5431,1404,14,5432,1409,14,5433,1414,14,5434,1419,14,5430,1424,13,2362,1434,13,2364,1453,19,7691,1454,19,7690,1456,16,335,1465,25,5437,1475,14,5427,1486,13,2360,1489,13,2366,1493,14,5435,1497,14,5436,1501,14,5438,1506,9,1478,1518,14,473,1523,9,1377,1536,13,2768,1541,13,2770,1561,14,6102,1574,14,6088,1587,14,6103,1605,14,6104,1621,14,6101,1630,14,6091,1639,14,6090,1647,14,6093,1653,14,6094,1658,14,6095,1663,14,6096,1668,14,6092,1673,13,2767,1683,13,2769,1702,19,7727,1703,19,7726,1705,16,474,1714,25,6099,1724,14,6089,1735,13,2765,1738,13,2771,1742,14,6097,1746,14,6098,1750,14,6100,1755,9,1496,1767,14,374,1772,9,1278,1785,13,2473,1790,13,2475,1810,14,5640,1823,14,5626,1836,14,5641,1854,14,5642,1870,14,5639,1879,14,5629,1888,14,5628,1896,14,5631,1902,14,5632,1907,14,5633,1912,14,5634,1917,14,5630,1922,13,2472,1932,13,2474,1951,19,7707,1952,19,7706,1954,16,375,1963,25,5637,1973,14,5627,1984,13,2470,1987,13,2476,1991,14,5635,1995,14,5636,1999,14,5638,2004,9,1486,2016,14,204,2021,9,1126,2034,13,2008,2039,13,2010,2059,14,4902,2072,14,4888,2085,14,4903,2103,14,4904,2119,14,4901,2128,14,4891,2137,14,4890,2145,14,4893,2151,14,4894,2156,14,4895,2161,14,4896,2166,14,4892,2171,13,2007,2181,13,2009,2200,19,7671,2201,19,7670,2203,16,205,2212,25,4899,2222,14,4889,2233,13,2005,2236,13,2011,2240,14,4897,2244,14,4898,2248,14,4900,2253,9,1468,2265,14,446,2270,9,1341,2283,13,2675,2288,13,2677,2308,14,5971,2321,14,5959,2334,14,5972,2352,14,5973,2368,14,5970,2377,14,5962,2386,14,5961,2394,14,5964,2400,14,5957,2405,14,5965,2410,14,5958,2415,14,5963,2420,13,2674,2430,13,2676,2449,19,7724,2450,19,7725,2452,16,447,2461,25,5968,2471,14,5960,2482,13,2672,2485,13,2678,2489,14,5966,2493,14,5967,2497,14,5969,2502,9,1495,2514,14,475,2519,9,1378,2532,13,2775,2537,13,2777,2557,14,6119,2570,14,6105,2583,14,6120,2601,14,6121,2617,14,6118,2626,14,6108,2635,14,6107,2643,14,6110,2649,14,6111,2654,14,6112,2659,14,6113,2664,14,6109,2669,13,2774,2679,13,2776,2698,19,7729,2699,19,7728,2701,16,476,2710,25,6116,2720,14,6106,2731,13,2772,2734,13,2778,2738,14,6114,2742,14,6115,2746,14,6117,2751,9,1497,2763,14,358,2768,9,1264,2781,13,2431,2786,13,2433,2806,14,5571,2819,14,5557,2832,14,5572,2850,14,5573,2866,14,5570,2875,14,5560,2884,14,5559,2892,14,5562,2898,14,5563,2903,14,5564,2908,14,5565,2913,14,5561,2918,13,2430,2928,13,2432,2947,19,7703,2948,19,7702,2950,16,359,2959,25,5568,2969,14,5558,2980,13,2428,2983,13,2434,2987,14,5566,2991,14,5567,2995,14,5569,3000,9,1484,3012,14,288,3017,9,1206,3030,13,2242,3035,13,2244,3055,14,5245,3068,14,5231,3081,14,5246,3099,14,5247,3115,14,5244,3124,14,5234,3133,14,5233,3141,14,5236,3147,14,5237,3152,14,5238,3157,14,5239,3162,14,5235,3167,13,2241,3177,13,2243,3196,19,7679,3197,19,7678,3199,16,289,3208,25,5242,3218,14,5232,3229,13,2239,3232,13,2245,3236,14,5240,3240,14,5241,3244,14,5243,3249,9,1472,3261,14,256,3266,9,1176,3279,13,2158,3284,13,2163,3304,14,5128,3317,14,5114,3330,14,5129,3348,14,5130,3364,14,5127,3373,14,5117,3382,14,5116,3390,14,5119,3396,14,5120,3401,14,5121,3406,14,5122,3411,14,5118,3416,13,2161,3426,13,2162,3445,19,7675,3446,19,7674,3448,16,257,3457,25,5125,3467,14,5115,3478,13,2159,3481,13,2164,3485,14,5123,3489,14,5124,3493,14,5126,3498,9,1470,3510,14,145,3515,9,1071,3528,13,1852,3533,13,1854,3553,14,4675,3566,14,4661,3579,14,4676,3597,14,4677,3613,14,4674,3622,14,4664,3631,14,4663,3639,14,4666,3645,14,4667,3650,14,4668,3655,14,4669,3660,14,4665,3665,13,1851,3675,13,1853,3694,19,7663,3695,19,7662,3697,16,146,3706,25,4672,3716,14,4662,3727,13,1849,3730,13,1855,3734,14,4670,3738,14,4671,3742,14,4673,3747,9,1464,3759,14,77,3764,9,1008,3777,13,1662,3782,13,1664,3802,14,4381,3815,14,4367,3828,14,4382,3846,14,4383,3862,14,4380,3871,14,4370,3880,14,4369,3888,14,4372,3894,14,4373,3899,14,4374,3904,14,4375,3909,14,4371,3914,13,1661,3924,13,1663,3943,19,7653,3944,19,7652,3946,16,78,3955,25,4378,3965,14,4368,3976,13,1659,3979,13,1665,3983,14,4376,3987,14,4377,3991,14,4379,3996,9,1459,4008,14,25,4013,9,959,4026,13,1506,4031,13,1508,4051,14,4142,4064,14,4128,4077,14,4143,4095,14,4144,4111,14,4141,4120,14,4131,4129,14,4130,4137,14,4133,4143,14,4134,4148,14,4135,4153,14,4136,4158,14,4132,4163,13,1505,4173,13,1507,4192,19,7647,4193,19,7646,4195,16,26,4204,25,4139,4214,14,4129,4225,13,1503,4228,13,1509,4232,14,4137,4236,14,4138,4240,14,4140,4245,9,1456,4257,14,55,4262,9,988,4275,13,1596,4280,13,1598,4300,14,4272,4313,14,4258,4326,14,4273,4344,14,4274,4360,14,4271,4369,14,4261,4378,14,4260,4386,14,4263,4392,14,4264,4397,14,4265,4402,14,4266,4407,14,4262,4412,13,1595,4422,13,1597,4441,19,7649,4442,19,7648,4444,16,56,4453,25,4269,4463,14,4259,4474,13,1593,4477,13,1599,4481,14,4267,4485,14,4268,4489,14,4270,4494,9,1457,4506,14,294,4511,9,1211,4524,13,2256,4529,13,2258,4549,14,5268,4562,14,5254,4575,14,5269,4593,14,5270,4609,14,5267,4618,14,5257,4627,14,5256,4635,14,5259,4641,14,5260,4646,14,5261,4651,14,5262,4656,14,5258,4661,13,2255,4671,13,2257,4690,19,7681,4691,19,7680,4693,16,295,4702,25,5265,4712,14,5255,4723,13,2253,4726,13,2259,4730,14,5263,4734,14,5264,4738,14,5266,4743,9,1473,4752,14,306,4757,9,1222,4770,13,2284,4775,13,2286,4795,14,5307,4808,14,5293,4821,14,5308,4839,14,5309,4855,14,5306,4864,14,5296,4873,14,5295,4881,14,5298,4887,14,5299,4892,14,5300,4897,14,5301,4902,14,5297,4907,13,2283,4917,13,2285,4936,19,7682,4937,19,7683,4939,16,307,4948,25,5304,4958,14,5294,4969,13,2281,4972,13,2287,4976,14,5302,4980,14,5303,4984,14,5305,4989,9,1474,5001,14,141,5006,9,1068,5019,13,1840,5024,13,1842,5044,14,4652,5057,14,4638,5070,14,4653,5088,14,4654,5104,14,4651,5113,14,4641,5122,14,4640,5130,14,4643,5136,14,4644,5141,14,4645,5146,14,4646,5151,14,4642,5156,13,1839,5166,13,1841,5185,19,7661,5186,19,7660,5188,16,142,5197,25,4649,5207,14,4639,5218,13,1837,5221,13,1843,5225,14,4647,5229,14,4648,5233,14,4650,5238,9,1463,5250,14,434,5255,9,1330,5268,13,2643,5273,13,2645,5293,14,5924,5306,14,5910,5319,14,5925,5337,14,5926,5353,14,5923,5362,14,5913,5371,14,5912,5379,14,5915,5385,14,5916,5390,14,5917,5395,14,5918,5400,14,5914,5405,13,2642,5415,13,2644,5434,19,7723,5435,19,7722,5437,16,435,5446,25,5921,5456,14,5911,5467,13,2640,5470,13,2646,5474,14,5919,5478,14,5920,5482,14,5922,5487,9,1494,5499,14,394,5504,9,1296,5517,13,2530,5522,13,2532,5542,14,5731,5555,14,5717,5568,14,5732,5586,14,5733,5602,14,5730,5611,14,5720,5620,14,5719,5628,14,5722,5634,14,5723,5639,14,5724,5644,14,5725,5649,14,5721,5654,13,2529,5664,13,2531,5683,19,7711,5684,19,7710,5686,16,395,5695,25,5728,5705,14,5718,5716,13,2527,5719,13,2533,5723,14,5726,5727,14,5727,5731,14,5729,5736,9,1488,5748,14,509,5753,9,1411,5766,13,2875,5771,13,2877,5791,14,6261,5804,14,6247,5817,14,6262,5835,14,6263,5851,14,6260,5860,14,6250,5869,14,6249,5877,14,6252,5883,14,6253,5888,14,6254,5893,14,6255,5898,14,6251,5903,13,2874,5913,13,2876,5932,19,7731,5933,19,7730,5935,16,510,5944,25,6258,5954,14,6248,5965,13,2872,5968,13,2878,5972,14,6256,5976,14,6257,5980,14,6259,5985,9,1498,5997,14,260,6002,9,1179,6015,13,2172,6020,13,2174,6040,14,5149,6053,14,5135,6066,14,5150,6084,14,5151,6100,14,5148,6109,14,5138,6118,14,5137,6126,14,5140,6132,14,5141,6137,14,5142,6142,14,5143,6147,14,5139,6152,13,2171,6162,13,2173,6181,19,7677,6182,19,7676,6184,16,261,6193,25,5146,6203,14,5136,6214,13,2169,6217,13,2175,6221,14,5144,6225,14,5145,6229,14,5147,6234,9,1471,6246,14,103,6251,9,1032,6264,13,1733,6269,13,1735,6289,14,4495,6302,14,4481,6315,14,4496,6333,14,4497,6349,14,4494,6358,14,4484,6367,14,4483,6375,14,4486,6381,14,4487,6386,14,4488,6391,14,4489,6396,14,4485,6401,13,1732,6411,13,1734,6430,19,7657,6431,19,7656,6433,16,104,6442,25,4492,6452,14,4482,6463,13,1730,6466,13,1736,6470,14,4490,6474,14,4491,6478,14,4493,6483,9,1461,6494,14,426,6499,9,1323,6512,13,2620,6517,13,2622,6537,14,5887,6550,14,5873,6563,14,5888,6581,14,5889,6597,14,5886,6606,14,5876,6615,14,5875,6623,14,5878,6629,14,5879,6634,14,5880,6639,14,5881,6644,14,5877,6649,13,2619,6659,13,2621,6678,19,7721,6679,19,7720,6681,16,427,6690,25,5884,6700,14,5874,6711,13,2617,6714,13,2623,6718,14,5882,6722,14,5883,6726,14,5885,6731,9,1493,6743,14,79,6748,9,1009,6761,13,1669,6766,13,1671,6786,14,4398,6799,14,4384,6812,14,4399,6830,14,4400,6846,14,4397,6855,14,4387,6864,14,4386,6872,14,4389,6878,14,4390,6883,14,4391,6888,14,4392,6893,14,4388,6898,13,1668,6908,13,1670,6927,19,7655,6928,19,7654,6930,16,80,6939,25,4395,6949,14,4385,6960,13,1666,6963,13,1672,6967,14,4393,6971,14,4394,6975,14,4396,6980,9,1460,6992,14,414,6997,9,1312,7010,13,2590,7015,13,2592,7035,14,5841,7048,14,5827,7061,14,5842,7079,14,5843,7095,14,5840,7104,14,5830,7113,14,5829,7121,14,5832,7127,14,5833,7132,14,5834,7137,14,5835,7142,14,5831,7147,13,2589,7157,13,2591,7176,19,7719,7177,19,7718,7179,16,415,7188,25,5838,7198,14,5828,7209,13,2587,7212,13,2593,7216,14,5836,7220,14,5837,7224,14,5839,7229,9,1492,7241,14,350,7246,9,1258,7259,13,2411,7264,13,2413,7284,14,5533,7297,14,5519,7310,14,5534,7328,14,5535,7344,14,5532,7353,14,5522,7362,14,5521,7370,14,5524,7376,14,5525,7381,14,5526,7386,14,5527,7391,14,5523,7396,13,2410,7406,13,2412,7425,19,7699,7426,19,7698,7428,16,351,7437,25,5530,7447,14,5520,7458,13,2408,7461,13,2414,7465,14,5528,7469,14,5529,7473,14,5531,7478,9,1482,7490,14,155,7495,9,1080,7508,13,1879,7513,13,1881,7533,14,4716,7546,14,4702,7559,14,4717,7577,14,4718,7593,14,4715,7602,14,4705,7611,14,4704,7619,14,4707,7625,14,4708,7630,14,4709,7635,14,4710,7640,14,4706,7645,13,1878,7655,13,1880,7674,19,7665,7675,19,7664,7677,16,156,7686,25,4713,7696,14,4703,7707,13,1876,7710,13,1882,7714,14,4711,7718,14,4712,7722,14,4714,7727,9,1465,7739,14,160,7744,9,1084,7757,13,1893,7762,13,1895,7782,14,4738,7795,14,4724,7808,14,4739,7826,14,4740,7842,14,4737,7851,14,4727,7860,14,4726,7868,14,4729,7874,14,4730,7879,14,4731,7884,14,4732,7889,14,4728,7894,13,1892,7904,13,1894,7923,19,7667,7924,19,7666,7926,16,161,7935,25,4735,7945,14,4725,7956,13,1890,7959,13,1896,7963,14,4733,7967,14,4734,7971,14,4736,7976,9,1466,7988,14,59,7993,9,991,8006,13,1607,8011,13,1609,8031,14,4293,8044,14,4279,8057,14,4294,8075,14,4295,8091,14,4292,8100,14,4282,8109,14,4281,8117,14,4284,8123,14,4285,8128,14,4286,8133,14,4287,8138,14,4283,8143,13,1606,8153,13,1608,8172,19,7651,8173,19,7650,8175,16,60,8184,25,4290,8194,14,4280,8205,13,1604,8208,13,1610,8212,14,4288,8216,14,4289,8220,14,4291,8225,9,1458,8237,14,105,8242,9,1033,8255,13,1740,8260,13,1742,8280,14,4512,8293,14,4498,8306,14,4513,8324,14,4514,8340,14,4511,8349,14,4501,8358,14,4500,8366,14,4503,8372,14,4504,8377,14,4505,8382,14,4506,8387,14,4502,8392,13,1739,8402,13,1741,8421,19,7659,8422,19,7658,8424,16,106,8433,25,4509,8443,14,4499,8454,13,1737,8457,13,1743,8461,14,4507,8465,14,4508,8469,14,4510,8474,9,1462,8486,14,330,8491,9,1243,8504,13,2352,8509,13,2354,8529,14,5419,8542,14,5405,8555,14,5420,8573,14,5421,8589,14,5418,8598,14,5408,8607,14,5407,8615,14,5410,8621,14,5411,8626,14,5412,8631,14,5413,8636,14,5409,8641,13,2351,8651,13,2353,8670,19,7688,8671,19,7689,8673,16,331,8682,25,5416,8692,14,5406,8703,13,2349,8706,13,2355,8710,14,5414,8714,14,5415,8718,14,5417,8723,9,1477,8735,14,384,8740,9,1287,8753,13,2498,8758,13,2500,8778,14,5678,8791,14,5664,8804,14,5679,8822,14,5680,8838,14,5677,8847,14,5667,8856,14,5666,8864,14,5669,8870,14,5670,8875,14,5671,8880,14,5672,8885,14,5668,8890,13,2497,8900,13,2499,8919,19,7709,8920,19,7708,8922,16,385,8931,25,5675,8941,14,5665,8952,13,2495,8955,13,2501,8959,14,5673,8963,14,5674,8967,14,5676,8972,9,1487,8984,14,336,8989,9,1247,9002,13,2370,9007,13,2372,9027,14,5457,9040,14,5443,9053,14,5458,9071,14,5459,9087,14,5456,9096,14,5446,9105,14,5445,9113,14,5448,9119,14,5449,9124,14,5450,9129,14,5451,9134,14,5447,9139,13,2369,9149,13,2371,9168,19,7693,9169,19,7692,9171,16,337,9180,25,5454,9190,14,5444,9201,13,2367,9204,13,2373,9208,14,5452,9212,14,5453,9216,14,5455,9221,9,1479,9233,14,410,9238,9,1310,9251,13,2573,9256,13,2578,9276,14,5807,9289,14,5793,9302,14,5808,9320,14,5809,9336,14,5806,9345,14,5796,9354,14,5795,9362,14,5798,9368,14,5799,9373,14,5800,9378,14,5801,9383,14,5797,9388,13,2576,9398,13,2577,9417,19,7715,9418,19,7714,9420,16,411,9429,25,5804,9439,14,5794,9450,13,2574,9453,13,2579,9457,14,5802,9461,14,5803,9465,14,5805,9470,9,1490,9482,14,412,9487,9,1311,9500,13,2580,9505,13,2585,9525,14,5824,9538,14,5810,9551,14,5825,9569,14,5826,9585,14,5823,9594,14,5813,9603,14,5812,9611,14,5815,9617,14,5816,9622,14,5817,9627,14,5818,9632,14,5814,9637,13,2583,9647,13,2584,9666,19,7716,9667,19,7717,9669,16,413,9678,25,5821,9688,14,5811,9699,13,2581,9702,13,2586,9706,14,5819,9710,14,5820,9714,14,5822,9719,9,1491,9731,14,346,9736,9,1255,9749,13,2395,9754,13,2400,9774,14,5507,9787,14,5493,9800,14,5508,9818,14,5509,9834,14,5506,9843,14,5496,9852,14,5495,9860,14,5498,9866,14,5499,9871,14,5500,9876,14,5501,9881,14,5497,9886,13,2398,9896,13,2399,9915,19,7696,9916,19,7697,9918,16,347,9927,25,5504,9937,14,5494,9948,13,2396,9951,13,2401,9955,14,5502,9959,14,5503,9963,14,5505,9968,9,1481,9980,14,308,9985,9,1223,9998,13,2291,10003,13,2293,10023,14,5324,10036,14,5310,10049,14,5325,10067,14,5326,10083,14,5323,10092,14,5313,10101,14,5312,10109,14,5315,10115,14,5316,10120,14,5317,10125,14,5318,10130,14,5314,10135,13,2290,10145,13,2292,10164,19,7685,10165,19,7684,10167,16,309,10176,25,5321,10186,14,5311,10197,13,2288,10200,13,2294,10204,14,5319,10208,14,5320,10212,14,5322,10217,9,1475,10229,14,398,10234,9,1299,10247,13,2542,10252,13,2544,10272,14,5755,10285,14,5741,10298,14,5756,10316,14,5757,10332,14,5754,10341,14,5744,10350,14,5743,10358,14,5746,10364,14,5747,10369,14,5748,10374,14,5749,10379,14,5745,10384,13,2541,10394,13,2543,10413,19,7712,10414,19,7713,10416,16,399,10425,25,5752,10435,14,5742,10446,13,2539,10449,13,2545,10453,14,5750,10457,14,5751,10461,14,5753,10466,9,1489,10478,14,326,10483,9,1240,10496,13,2342,10501,13,2344,10521,14,5400,10534,14,5386,10547,14,5401,10565,14,5402,10581,14,5399,10590,14,5389,10599,14,5388,10607,14,5391,10613,14,5392,10618,14,5393,10623,14,5394,10628,14,5390,10633,13,2341,10643,13,2343,10662,19,7687,10663,19,7686,10665,16,327,10674,25,5397,10684,14,5387,10695,13,2339,10698,13,2345,10702,14,5395,10706,14,5396,10710,14,5398,10715,9,1476,10724,13,2106,10729,13,2389,10734,13,1999,10739,13,2416,10744,13,2449,10749,13,2361,10754,13,2766,10759,13,2471,10764,13,2006,10769,13,2673,10774,13,2773,10779,13,2429,10784,13,2240,10789,13,2160,10794,13,1850,10799,13,1660,10804,13,1504,10809,13,1594,10814,13,2254,10819,13,2282,10824,13,1838,10829,13,2641,10834,13,2528,10839,13,2873,10844,13,2170,10849,13,1731,10854,13,2618,10859,13,1667,10864,13,2588,10869,13,2409,10874,13,1877,10879,13,1891,10884,13,1605,10889,13,1738,10894,13,2350,10899,13,2496,10904,13,2368,10909,13,2575,10914,13,2582,10919,13,2397,10924,13,2289,10929,13,2540,10934,13,2340]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxEnum.swift","symbols":[15,12,20,16,7,797,17,7,790,18,7,786,19,7,787,20,7,788,21,7,789,22,7,795,23,7,582,24,7,583,25,7,584,26,7,585,27,7,640,28,7,614,29,7,680,30,7,812,31,7,817,32,7,657,33,7,733,34,7,662,35,7,737,36,7,743,37,7,796,38,7,808,39,7,666,40,7,728,41,7,681,42,7,630,43,7,606,44,7,634,45,7,738,46,7,625,47,7,605,48,7,801,49,7,620,50,7,619,51,7,658,52,7,694,53,7,695,54,7,709,55,7,744,56,7,710,57,7,699,58,7,806,59,7,667,60,7,820,61,7,804,62,7,627,63,7,676,64,7,589,65,7,683,66,7,706,67,7,700,68,7,581,69,7,671,70,7,794,71,7,791,72,7,803,73,7,701,74,7,748,75,7,755,76,7,591,77,7,663,78,7,664,79,7,579,80,7,747,81,7,781,82,7,784,83,7,668,84,7,623,85,7,731,86,7,648,87,7,673,88,7,637,89,7,621,90,7,685,91,7,697,92,7,675,93,7,580,94,7,651,95,7,618,96,7,802,97,7,653,98,7,672,99,7,716,100,7,739,101,7,693,102,7,746,103,7,624,104,7,698,105,7,740,106,7,655,107,7,604,108,7,687,109,7,632,110,7,705,111,7,597,112,7,636,113,7,674,114,7,717,115,7,757,116,7,593,117,7,616,118,7,689,119,7,745,120,7,811,121,7,575,122,7,603,123,7,615,124,7,652,125,7,633,126,7,707,127,7,574,128,7,690,129,7,686,130,7,599,131,7,595,132,7,650,133,7,682,134,7,622,135,7,712,136,7,713,137,7,571,138,7,572,139,7,678,140,7,587,141,7,588,142,7,610,143,7,635,144,7,708,145,7,608,146,7,645,147,7,714,148,7,594,149,7,800,150,7,601,151,7,631,152,7,769,153,7,718,154,7,778,155,7,759,156,7,758,157,7,770,158,7,765,159,7,777,160,7,819,161,7,691,162,7,643,163,7,807,164,7,612,165,7,774,166,7,679,167,7,754,168,7,720,169,7,776,170,7,799,171,7,775,172,7,692,173,7,600,174,7,783,175,7,779,176,7,756,177,7,768,178,7,751,179,7,785,180,7,696,181,7,669,182,7,772,183,7,736,184,7,764,185,7,592,186,7,822,187,7,813,188,7,629,189,7,638,190,7,659,191,7,816,192,7,586,193,7,815,194,7,577,195,7,641,196,7,792,197,7,573,198,7,824,199,7,823,200,7,647,201,7,809,202,7,590,203,7,613,204,7,665,205,7,735,206,7,762,207,7,763,208,7,761,209,7,726,210,7,644,211,7,818,212,7,793,213,7,702,214,7,814,215,7,576,216,7,711,217,7,798,218,7,810,219,7,660,220,7,578,221,7,656,222,7,704,223,7,753,224,7,703,225,7,719,226,7,729,227,7,670,228,7,766,229,7,742,230,7,752,231,7,750,232,7,773,233,7,732,234,7,730,235,7,725,236,7,805,237,7,628,238,7,598,239,7,602,240,7,727,241,7,782,242,7,749,243,7,767,244,7,642,245,7,677,246,7,734,247,7,821,248,7,596,249,7,626,250,7,715,251,7,649,252,7,741,253,7,639,254,7,646,255,7,617,256,7,654,257,7,688,258,7,611,259,7,607,260,7,661,261,7,721,262,7,684,263,7,760,264,7,722,265,7,724,266,7,723,267,7,771,268,7,780,269,7,609,274,7,6317]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxFactory.swift","symbols":[24,12,21,25,21,4114,34,21,3488,49,21,3733,56,21,3734,63,21,3735,70,21,3736,77,21,3870,83,21,3614,95,21,3821,104,21,3791,112,21,3957,118,21,3510,130,21,3651,139,21,3518,150,21,3656,158,21,3715,168,21,3901,175,21,3920,183,21,4037,189,21,3728,197,21,3925,203,21,3941,211,21,4044,217,21,3949,225,21,4050,231,21,3493,243,21,3569,252,21,3506,263,21,3647,271,21,3741,282,21,3929,290,21,3909,298,21,4032,304,21,3793,316,21,3958,325,21,3668,336,21,3860,344,21,3595,354,21,3787,361,21,3676,371,21,3864,378,21,3942,388,21,4045,395,21,3639,405,21,3855,412,21,3593,422,21,3786,429,21,3498,437,21,3610,443,21,3623,453,21,3827,460,21,3622,470,21,3826,477,21,3716,487,21,3902,494,21,3808,504,21,3971,511,21,3809,521,21,3972,528,21,3846,538,21,3997,545,21,3950,556,21,4051,564,21,3849,575,21,3998,583,21,3816,593,21,3987,600,21,3503,612,21,3645,621,21,3744,631,21,3930,638,21,3522,650,21,3659,659,21,3501,671,21,3643,680,21,3665,692,21,3857,701,21,3760,714,21,3939,724,21,3568,735,21,3770,743,21,3795,756,21,3960,766,21,3841,776,21,3994,783,21,3832,793,21,3988,800,21,3563,814,21,3732,825,21,3749,838,21,3934,848,21,3492,859,21,3552,867,21,3489,879,21,3549,888,21,3500,898,21,3612,905,21,3834,919,21,3989,930,21,3975,938,21,4062,944,21,4000,956,21,4071,965,21,3574,976,21,3772,984,21,3738,992,21,3926,998,21,3739,1014,21,3927,1027,21,3555,1040,21,3730,1050,21,3953,1060,21,4054,1067,21,4089,1079,21,4108,1088,21,4106,1096,21,4111,1102,21,3745,1117,21,3931,1129,21,3634,1144,21,3830,1156,21,3913,1167,21,4035,1175,21,3703,1186,21,3892,1194,21,3751,1205,21,3936,1213,21,3683,1224,21,3867,1232,21,3630,1242,21,3828,1249,21,3797,1263,21,3962,1274,21,3812,1288,21,3974,1299,21,3756,1309,21,3938,1316,21,3560,1328,21,3731,1337,21,3707,1347,21,3895,1354,21,3621,1365,21,3825,1373,21,3499,1381,21,3611,1387,21,3709,1400,21,3897,1410,21,3750,1425,21,3935,1437,21,3873,1448,21,4014,1456,21,3943,1466,21,4046,1473,21,3805,1486,21,3970,1496,21,3952,1507,21,4053,1515,21,3637,1531,21,3831,1544,21,3815,1560,21,3986,1573,21,3944,1581,21,4047,1587,21,3712,1599,21,3899,1608,21,3592,1619,21,3785,1627,21,3799,1640,21,3964,1650,21,3670,1662,21,3862,1671,21,3840,1679,21,3993,1685,21,3583,1696,21,3778,1704,21,3678,1717,21,3866,1727,21,3755,1740,21,3937,1750,21,3875,1763,21,4015,1773,21,4003,1789,21,4073,1802,21,3576,1815,21,3774,1825,21,3619,1836,21,3823,1844,21,3801,1852,21,3966,1858,21,3951,1869,21,4052,1877,21,3509,1894,21,3650,1908,21,3542,1925,21,3691,1939,21,3590,1956,21,3784,1970,21,3617,1986,21,3822,1999,21,3708,2011,21,3896,2020,21,3675,2028,21,3863,2034,21,3842,2045,21,3995,2053,21,3541,2064,21,3690,2072,21,3802,2083,21,3967,2091,21,3798,2108,21,3963,2122,21,3586,2130,21,3780,2136,21,3580,2153,21,3776,2167,21,3705,2185,21,3894,2200,21,3794,2213,21,3959,2223,21,3633,2240,21,3829,2254,21,3853,2267,21,4010,2277,21,3854,2288,21,4011,2296,21,3528,2304,21,3687,2310,21,3536,2324,21,3688,2335,21,3765,2347,21,3955,2356,21,3566,2372,21,3768,2385,21,3567,2393,21,3769,2399,21,3603,2411,21,3817,2420,21,3677,2434,21,3865,2445,21,3843,2453,21,3996,2459,21,3598,2472,21,3789,2482,21,3699,2495,21,3889,2505,21,3871,2513,21,4012,2519,21,3578,2532,21,3775,2542,21,3497,2559,21,3609,2573,21,3588,2587,21,3782,2598,21,3669,2606,21,3861,2612,21,4057,2623,21,4093,2631,21,3877,2647,21,4016,2660,21,4081,2668,21,4104,2674,21,4006,2686,21,4075,2695,21,4005,2703,21,4074,2709,21,4059,2720,21,4094,2728,21,4040,2740,21,4087,2749,21,4080,2761,21,4103,2770,21,3521,2778,21,3658,2784,21,3803,2792,21,3968,2798,21,3697,2812,21,3887,2823,21,3505,2838,21,3646,2850,21,3605,2858,21,3819,2864,21,4070,2872,21,4099,2878,21,3767,2891,21,3956,2901,21,3982,2914,21,4068,2924,21,3879,2937,21,4018,2947,21,4079,2959,21,4102,2968,21,3496,2979,21,3608,2987,21,4078,3000,21,4101,3010,21,3804,3021,21,3969,3029,21,3587,3037,21,3781,3043,21,4100,3057,21,4110,3068,21,4084,3080,21,4105,3089,21,4001,3101,21,4072,3110,21,4056,3118,21,4092,3124,21,3978,3135,21,4065,3143,21,4112,3159,21,4113,3172,21,3811,3185,21,3973,3195,21,3746,3206,21,3932,3214,21,4061,3226,21,4097,3235,21,3924,3243,21,4043,3249,21,4026,3260,21,4086,3268,21,3575,3279,21,3773,3287,21,3525,3301,21,3661,3312,21,3511,3323,21,3652,3331,21,3667,3341,21,3859,3348,21,3684,3356,21,3868,3362,21,3718,3377,21,3903,3389,21,3515,3402,21,3655,3412,21,3565,3423,21,3737,3431,21,3514,3452,21,3654,3470,21,3544,3486,21,3693,3499,21,3694,3507,21,3885,3513,21,3490,3527,21,3550,3538,21,3540,3549,21,3689,3557,21,3527,3568,21,3663,3576,21,3526,3589,21,3662,3599,21,3701,3609,21,3891,3616,21,3507,3627,21,3648,3635,21,3571,3643,21,3771,3649,21,3613,3657,21,3820,3663,21,3740,3674,21,3928,3682,21,3923,3695,21,4042,3705,21,4021,3718,21,4082,3728,21,4022,3741,21,4083,3751,21,4009,3764,21,4077,3774,21,3907,3782,21,4030,3788,21,3698,3798,21,3888,3805,21,3520,3816,21,3657,3824,21,3491,3840,21,3551,3853,21,3835,3863,21,3990,3870,21,3513,3881,21,3653,3889,21,3543,3901,21,3692,3910,21,3852,3921,21,3999,3929,21,3495,3941,21,3607,3950,21,3508,3962,21,3649,3971,21,3723,3983,21,3904,3992,21,3554,4004,21,3729,4013,21,3714,4028,21,3900,4040,21,3839,4051,21,3992,4059,21,3980,4067,21,4067,4073,21,3838,4084,21,3991,4092,21,3878,4104,21,4017,4113,21,3911,4121,21,4033,4127,21,3747,4141,21,3933,4152,21,4041,4160,21,4088,4166,21,3948,4181,21,4049,4193,21,3979,4205,21,4066,4214,21,3977,4226,21,4064,4235,21,4069,4247,21,4098,4256,21,3918,4267,21,4036,4275,21,3912,4288,21,4034,4298,21,3906,4308,21,4029,4315,21,3502,4327,21,3644,4336,21,3666,4350,21,3858,4361,21,3585,4373,21,3779,4382,21,3589,4393,21,3783,4401,21,3908,4412,21,4031,4420,21,4095,4431,21,4109,4439,21,3976,4450,21,4063,4458,21,4055,4466,21,4091,4472,21,3695,4482,21,3886,4489,21,3763,4506,21,3940,4520,21,3921,4528,21,4038,4534,21,3523,4546,21,3660,4555,21,3581,4571,21,3777,4584,21,3640,4596,21,3856,4605,21,3872,4613,21,4013,4619,21,3704,4630,21,3893,4638,21,3945,4650,21,4048,4659,21,3685,4670,21,3869,4678,21,3700,4691,21,3890,4701,21,3620,4712,21,3824,4720,21,3711,4731,21,3898,4739,21,3800,4749,21,3965,4756,21,3604,4768,21,3818,4777,21,3597,4789,21,3788,4798,21,3725,4809,21,3905,4817,21,3880,4830,21,4019,4840,21,3796,4850,21,3961,4857,21,4008,4865,21,4076,4871,21,3881,4882,21,4020,4890,21,3884,4898,21,4028,4904,21,3883,4915,21,4027,4923,21,4060,4935,21,4096,4944,21,4085,4955,21,4107,4963,21,3600,4975,21,3790,4987,21,3922,4993,21,3573,4999,21,3615,5005,21,3557,5011,21,3743,5017,21,3558,5023,21,3618,5029,21,3559,5035,21,3584,5041,21,3537,5047,21,3710,5053,21,3984,5059,21,3717,5065,21,3632,5071,21,3759,5077,21,3764,5083,21,3546,5089,21,3837,5095,21,3706,5101,21,3681,5107,21,3625,5113,21,3628,5119,21,3577,5125,21,3516,5131,21,3582,5137,21,3512,5143,21,3626,5149,21,3556,5155,21,3534,5161,21,3517,5167,21,3602,5173,21,3627,5179,21,3570,5185,21,3696,5191,21,3836,5197,21,3635,5203,21,3553,5209,21,3664,5215,21,3601,5221,21,3572,5227,21,3596,5233,21,3504,5239,21,3529,5245,21,3579,5251,21,3519,5257,21,3538,5263,21,3719,5269,21,3594,5275,21,3562,5281,21,3833,5287,21,3564,5293,21,3545,5299,21,3636,5305,21,3726,5311,21,3727,5317,21,3814,5323,21,3882,5329,21,3954,5335,21,3724,5341,21,3674,5347,21,3722,5353,21,3673,5359,21,3721,5365,21,3983,5371,21,4007,5377,21,3672,5383,21,3720,5389,21,3561,5395,21,3810,5401,21,3532,5407,21,3616,5413,21,3531,5419,21,3682,5425,21,3533,5431,21,3548,5437,21,3539,5443,21,3917,5449,21,3530,5455,21,3606,5461,21,3641,5467,21,3910,5473,21,4023,5479,21,3981,5485,21,3758,5491,21,3757,5497,21,4039,5503,21,3874,5509,21,3754,5515,21,3916,5521,21,3753,5527,21,3848,5533,21,3914,5539,21,3845,5545,21,3915,5551,21,3947,5557,21,3844,5563,21,4058,5569,21,3876,5575,21,3807,5581,21,3679,5587,21,3752,5593,21,3847,5599,21,3806,5605,21,3946,5611,21,4004,5617,21,4002,5623,21,4025,5629,21,4024,5635,21,3671,5641,21,3702,5647,21,3629,5653,21,3591,5659,21,3494,5665,21,3535,5671,21,3985,5677,21,3919,5683,21,3713,5689,21,3680,5695,21,3742,5701,21,3792,5707,21,3850,5713,21,3631,5719,21,4090,5725,21,3547,5734,21,3638,5740,21,3761,5748,21,3762,5754,21,3748,5761,21,3686,5771,21,3766,5777,21,3851,5783,21,3524,5789,21,3624,5795,21,3642,5804,21,3813,5819,21,3599]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxRewriter.swift","symbols":[22,11,545,23,9,1430,28,12,7365,35,12,7419,42,12,7441,49,12,7453,56,12,7463,63,12,7484,70,12,7512,77,12,7599,84,12,7414,91,12,7384,98,12,7543,105,12,7501,112,12,7547,119,12,7551,126,12,7409,133,12,7413,140,12,7505,147,12,7541,154,12,7513,161,12,7378,168,12,7421,175,12,7379,182,12,7403,189,12,7376,196,12,7420,203,12,7595,210,12,7423,217,12,7422,224,12,7401,231,12,7392,238,12,7393,245,12,7398,252,12,7405,259,12,7399,266,12,7395,273,12,7412,280,12,7385,287,12,7415,294,12,7411,301,12,7377,308,12,7508,315,12,7473,322,12,7514,329,12,7397,336,12,7396,343,12,7418,350,12,7387,357,12,7408,364,12,7407,371,12,7410,378,12,7523,385,12,7554,392,12,7561,399,12,7475,406,12,7502,413,12,7503,420,12,7416,427,12,7406,434,12,7587,441,12,7589,448,12,7386,455,12,7424,462,12,7402,469,12,7381,476,12,7389,483,12,7380,490,12,7487,497,12,7515,504,12,7394,511,12,7390,518,12,7417,525,12,7382,532,12,7486,539,12,7596,546,12,7383,553,12,7388,560,12,7400,567,12,7404,574,12,7391,581,12,7553,588,12,7375,595,12,7358,602,12,7548,609,12,7499,616,12,7479,623,12,7517,630,12,7489,637,12,7527,644,12,7369,651,12,7354,658,12,7356,665,12,7360,672,12,7563,679,12,7476,686,12,7485,693,12,7518,700,12,7552,707,12,7362,714,12,7364,721,12,7371,728,12,7373,735,12,7498,742,12,7490,749,12,7528,756,12,7468,763,12,7519,770,12,7516,777,12,7477,784,12,7368,791,12,7355,798,12,7357,805,12,7374,812,12,7531,819,12,7532,826,12,7467,833,12,7363,840,12,7510,847,12,7366,854,12,7472,861,12,7481,868,12,7491,875,12,7529,882,12,7372,889,12,7496,896,12,7533,903,12,7367,910,12,7361,917,12,7370,924,12,7488,931,12,7575,938,12,7359,945,12,7584,952,12,7565,959,12,7564,966,12,7576,973,12,7571,980,12,7583,987,12,7601,994,12,7520,1001,12,7495,1008,12,7597,1015,12,7482,1022,12,7580,1029,12,7511,1036,12,7560,1043,12,7536,1050,12,7582,1057,12,7594,1064,12,7581,1071,12,7521,1078,12,7478,1085,12,7588,1092,12,7585,1099,12,7562,1106,12,7574,1113,12,7557,1120,12,7590,1127,12,7522,1134,12,7506,1141,12,7578,1148,12,7546,1155,12,7570,1162,12,7442,1169,12,7437,1176,12,7433,1183,12,7425,1190,12,7492,1197,12,7429,1204,12,7435,1211,12,7471,1218,12,7434,1225,12,7440,1232,12,7494,1239,12,7430,1246,12,7439,1253,12,7438,1260,12,7602,1267,12,7427,1274,12,7432,1281,12,7474,1288,12,7483,1295,12,7504,1302,12,7545,1309,12,7568,1316,12,7569,1323,12,7567,1330,12,7540,1337,12,7426,1344,12,7436,1351,12,7431,1358,12,7524,1365,12,7600,1372,12,7469,1379,12,7530,1386,12,7593,1393,12,7598,1400,12,7500,1407,12,7470,1414,12,7428,1421,12,7526,1428,12,7559,1435,12,7525,1442,12,7535,1449,12,7542,1456,12,7507,1463,12,7572,1470,12,7550,1477,12,7558,1484,12,7556,1491,12,7579,1498,12,7452,1505,12,7451,1512,12,7446,1519,12,7449,1526,12,7444,1533,12,7455,1540,12,7456,1547,12,7447,1554,12,7448,1561,12,7555,1568,12,7573,1575,12,7445,1582,12,7509,1589,12,7544,1596,12,7450,1603,12,7454,1610,12,7443,1617,12,7534,1624,12,7497,1631,12,7549,1638,12,7493,1645,12,7464,1652,12,7462,1659,12,7465,1666,12,7458,1673,12,7461,1680,12,7460,1687,12,7466,1694,12,7537,1701,12,7457,1708,12,7566,1715,12,7459,1722,12,7539,1729,12,7538,1736,12,7577,1743,12,7586,1750,12,7480,1758,12,7591,1765,12,7592,1771,12,7605,1780,12,7604,1786,12,7606,1791,14,7603]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxTraits.swift","symbols":[16,16,12,17,6,2833,18,7,6197,19,6,2835,20,7,6196,21,6,2834,22,7,6195,29,7,7341,36,7,7333,43,16,9,44,6,2714,45,7,6016,46,6,2713,47,7,6017,54,7,7339,61,7,7331,68,16,2,69,6,1832,70,7,4633,77,7,7336,84,7,7328,91,16,1,92,6,1808,93,7,4605,100,7,7335,107,7,7327,114,16,0,115,6,1771,116,7,4549,117,6,1770,118,7,4550,125,7,7334,132,7,7326,139,16,4,140,6,2205,141,7,5188,148,7,7338,155,7,7330,162,16,10,163,6,2736,164,7,6048,165,6,2735,166,7,6049,173,7,7340,180,7,7332,187,16,3,188,6,1889,189,7,4723,196,7,7337,203,7,7329]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxVisitor.swift","symbols":[16,12,19,19,7,570,22,7,569,25,11,544,26,9,1428,30,14,6824,37,12,6836,43,12,7085,47,12,6837,53,12,7086,57,12,6838,63,12,7087,67,12,6839,73,12,7088,77,12,6893,83,12,7143,87,12,6867,93,12,7117,97,12,6933,103,12,7183,107,12,7060,113,12,7310,117,12,7065,123,12,7315,127,12,6910,133,12,7160,137,12,6986,143,12,7236,147,12,6915,153,12,7165,157,12,6990,163,12,7240,167,12,6996,173,12,7246,177,12,7044,183,12,7294,187,12,7056,193,12,7306,197,12,6919,203,12,7169,207,12,6981,213,12,7231,217,12,6934,223,12,7184,227,12,6883,233,12,7133,237,12,6859,243,12,7109,247,12,6887,253,12,7137,257,12,6991,263,12,7241,267,12,6878,273,12,7128,277,12,6858,283,12,7108,287,12,7049,293,12,7299,297,12,6873,303,12,7123,307,12,6872,313,12,7122,317,12,6911,323,12,7161,327,12,6947,333,12,7197,337,12,6948,343,12,7198,347,12,6962,353,12,7212,357,12,6997,363,12,7247,367,12,6963,373,12,7213,377,12,6952,383,12,7202,387,12,7054,393,12,7304,397,12,6920,403,12,7170,407,12,7068,413,12,7318,417,12,7052,423,12,7302,427,12,6880,433,12,7130,437,12,6929,443,12,7179,447,12,6843,453,12,7092,457,12,6936,463,12,7186,467,12,6959,473,12,7209,477,12,6953,483,12,7203,487,12,6835,493,12,7084,497,12,6924,503,12,7174,507,12,7043,513,12,7293,517,12,7040,523,12,7290,527,12,7051,533,12,7301,537,12,6954,543,12,7204,547,12,7001,553,12,7251,557,12,7008,563,12,7258,567,12,6845,573,12,7094,577,12,6916,583,12,7166,587,12,6917,593,12,7167,597,12,6833,603,12,7082,607,12,7000,613,12,7250,617,12,7034,623,12,7284,627,12,7037,633,12,7287,637,12,6921,643,12,7171,647,12,6876,653,12,7126,657,12,6984,663,12,7234,667,12,6901,673,12,7151,677,12,6926,683,12,7176,687,12,6890,693,12,7140,697,12,6874,703,12,7124,707,12,6938,713,12,7188,717,12,6950,723,12,7200,727,12,6928,733,12,7178,737,12,6834,743,12,7083,747,12,6904,753,12,7154,757,12,6871,763,12,7121,767,12,7050,773,12,7300,777,12,6906,783,12,7156,787,12,6925,793,12,7175,797,12,6969,803,12,7219,807,12,6992,813,12,7242,817,12,6946,823,12,7196,827,12,6999,833,12,7249,837,12,6877,843,12,7127,847,12,6951,853,12,7201,857,12,6993,863,12,7243,867,12,6908,873,12,7158,877,12,6857,883,12,7107,887,12,6940,893,12,7190,897,12,6885,903,12,7135,907,12,6958,913,12,7208,917,12,6850,923,12,7100,927,12,6889,933,12,7139,937,12,6927,943,12,7177,947,12,6970,953,12,7220,957,12,7010,963,12,7260,967,12,6846,973,12,7096,977,12,6869,983,12,7119,987,12,6942,993,12,7192,997,12,6998,1003,12,7248,1007,12,7059,1013,12,7309,1017,12,6829,1023,12,7078,1027,12,6856,1033,12,7106,1037,12,6868,1043,12,7118,1047,12,6905,1053,12,7155,1057,12,6886,1063,12,7136,1067,12,6960,1073,12,7210,1077,12,6828,1083,12,7077,1087,12,6943,1093,12,7193,1097,12,6939,1103,12,7189,1107,12,6852,1113,12,7102,1117,12,6848,1123,12,7098,1127,12,6903,1133,12,7153,1137,12,6935,1143,12,7185,1147,12,6875,1153,12,7125,1157,12,6965,1163,12,7215,1167,12,6966,1173,12,7216,1177,12,6825,1183,12,7074,1187,12,6826,1193,12,7075,1197,12,6931,1203,12,7181,1207,12,6841,1213,12,7090,1217,12,6842,1223,12,7091,1227,12,6863,1233,12,7113,1237,12,6888,1243,12,7138,1247,12,6961,1253,12,7211,1257,12,6861,1263,12,7111,1267,12,6898,1273,12,7148,1277,12,6967,1283,12,7217,1287,12,6847,1293,12,7097,1297,12,7048,1303,12,7298,1307,12,6854,1313,12,7104,1317,12,6884,1323,12,7134,1327,12,7022,1333,12,7272,1337,12,6971,1343,12,7221,1347,12,7031,1353,12,7281,1357,12,7012,1363,12,7262,1367,12,7011,1373,12,7261,1377,12,7023,1383,12,7273,1387,12,7018,1393,12,7268,1397,12,7030,1403,12,7280,1407,12,7067,1413,12,7317,1417,12,6944,1423,12,7194,1427,12,6896,1433,12,7146,1437,12,7055,1443,12,7305,1447,12,6865,1453,12,7115,1457,12,7027,1463,12,7277,1467,12,6932,1473,12,7182,1477,12,7007,1483,12,7257,1487,12,6973,1493,12,7223,1497,12,7029,1503,12,7279,1507,12,7047,1513,12,7297,1517,12,7028,1523,12,7278,1527,12,6945,1533,12,7195,1537,12,6853,1543,12,7103,1547,12,7036,1553,12,7286,1557,12,7032,1563,12,7282,1567,12,7009,1573,12,7259,1577,12,7021,1583,12,7271,1587,12,7004,1593,12,7254,1597,12,7038,1603,12,7288,1607,12,6949,1613,12,7199,1617,12,6922,1623,12,7172,1627,12,7025,1633,12,7275,1637,12,6989,1643,12,7239,1647,12,7017,1653,12,7267,1657,12,7073,1663,12,7095,1667,12,7070,1673,12,7320,1677,12,7061,1683,12,7311,1687,12,6882,1693,12,7132,1697,12,6891,1703,12,7141,1707,12,6912,1713,12,7162,1717,12,7064,1723,12,7314,1727,12,6840,1733,12,7089,1737,12,7063,1743,12,7313,1747,12,6831,1753,12,7080,1757,12,6894,1763,12,7144,1767,12,7041,1773,12,7291,1777,12,6827,1783,12,7076,1787,12,7072,1793,12,7322,1797,12,7071,1803,12,7321,1807,12,6900,1813,12,7150,1817,12,7057,1823,12,7307,1827,12,6844,1833,12,7093,1837,12,6866,1843,12,7116,1847,12,6918,1853,12,7168,1857,12,6988,1863,12,7238,1867,12,7015,1873,12,7265,1877,12,7016,1883,12,7266,1887,12,7014,1893,12,7264,1897,12,6979,1903,12,7229,1907,12,6897,1913,12,7147,1917,12,7066,1923,12,7316,1927,12,7042,1933,12,7292,1937,12,6955,1943,12,7205,1947,12,7062,1953,12,7312,1957,12,6830,1963,12,7079,1967,12,6964,1973,12,7214,1977,12,7046,1983,12,7296,1987,12,7058,1993,12,7308,1997,12,6913,2003,12,7163,2007,12,6832,2013,12,7081,2017,12,6909,2023,12,7159,2027,12,6957,2033,12,7207,2037,12,7006,2043,12,7256,2047,12,6956,2053,12,7206,2057,12,6972,2063,12,7222,2067,12,6982,2073,12,7232,2077,12,6923,2083,12,7173,2087,12,7019,2093,12,7269,2097,12,6995,2103,12,7245,2107,12,7005,2113,12,7255,2117,12,7003,2123,12,7253,2127,12,7026,2133,12,7276,2137,12,6985,2143,12,7235,2147,12,6983,2153,12,7233,2157,12,6978,2163,12,7228,2167,12,7053,2173,12,7303,2177,12,6881,2183,12,7131,2187,12,6851,2193,12,7101,2197,12,6855,2203,12,7105,2207,12,6980,2213,12,7230,2217,12,7035,2223,12,7285,2227,12,7002,2233,12,7252,2237,12,7020,2243,12,7270,2247,12,6895,2253,12,7145,2257,12,6930,2263,12,7180,2267,12,6987,2273,12,7237,2277,12,7069,2283,12,7319,2287,12,6849,2293,12,7099,2297,12,6879,2303,12,7129,2307,12,6968,2313,12,7218,2317,12,6902,2323,12,7152,2327,12,6994,2333,12,7244,2337,12,6892,2343,12,7142,2347,12,6899,2353,12,7149,2357,12,6870,2363,12,7120,2367,12,6907,2373,12,7157,2377,12,6941,2383,12,7191,2387,12,6864,2393,12,7114,2397,12,6860,2403,12,7110,2407,12,6914,2413,12,7164,2417,12,6974,2423,12,7224,2427,12,6937,2433,12,7187,2437,12,7013,2443,12,7263,2447,12,6975,2453,12,7225,2457,12,6977,2463,12,7227,2467,12,6976,2473,12,7226,2477,12,7024,2483,12,7274,2487,12,7033,2493,12,7283,2497,12,6862,2503,12,7112,2508,12,7039,2514,12,7289,2519,12,7045,2525,12,7295]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/TokenKind.swift","symbols":[15,12,24,16,7,937,17,7,926,18,7,860,19,7,871,20,7,851,21,7,898,22,7,852,23,7,872,24,7,853,25,7,864,26,7,842,27,7,891,28,7,929,29,7,894,30,7,879,31,7,902,32,7,903,33,7,848,34,7,911,35,7,890,36,7,886,37,7,873,38,7,876,39,7,861,40,7,952,41,7,863,42,7,951,43,7,874,44,7,850,45,7,840,46,7,953,47,7,870,48,7,875,49,7,858,50,7,887,51,7,910,52,7,880,53,7,849,54,7,882,55,7,869,56,7,859,57,7,868,58,7,949,59,7,839,60,7,862,61,7,954,62,7,843,63,7,895,64,7,867,65,7,854,66,7,909,67,7,857,68,7,847,69,7,881,75,7,896,76,7,957,77,7,846,78,7,956,79,7,845,80,7,906,81,7,917,82,7,955,83,7,844,84,7,945,85,7,865,86,7,940,87,7,948,88,7,939,89,7,958,90,7,941,91,7,944,92,7,942,93,7,893,94,7,938,95,7,947,96,7,950,97,7,888,98,7,918,99,7,905,100,7,856,101,7,855,102,7,921,103,7,919,104,7,901,105,7,924,106,7,900,107,7,915,108,7,922,109,7,913,110,7,923,111,7,928,112,7,912,113,7,936,114,7,920,115,7,908,116,7,884,117,7,899,118,7,914,119,7,907,120,7,927,121,7,932,122,7,931,123,7,934,124,7,933,125,7,883,126,7,889,127,7,877,128,7,866,129,7,946,130,7,841,131,7,930,132,7,925,133,7,892,134,7,885,135,7,897,136,7,904,137,7,916,138,7,878,139,7,935,140,7,943,273,13,3487,665,21,7643]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/Trivia.swift","symbols":[24,12,22,26,9,834,28,9,833,30,9,828,32,9,836,34,9,835,36,9,830,38,9,832,40,9,826,42,9,827,44,9,829,46,9,831,48,9,825,55,14,7610,91,13,3467,98,14,542,102,9,1455,107,20,1502,112,14,7628,118,13,3484,123,13,3485,128,23,4125,132,23,4124,136,23,4119,140,23,4127,144,23,4126,148,23,4121,152,23,4123,156,23,4117,160,23,4118,164,23,4120,168,23,4122,172,23,4116,181,13,3483,185,13,3486,189,14,7627,193,9,1500,201,9,1454,207,12,7644,214,13,3466]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxDeclNodes.swift","symbols":[17,14,47,23,9,980,36,13,1573,48,13,1572,56,14,127,71,9,1054,84,13,1803,88,13,1799,106,14,4591,122,14,4593,129,13,1807,147,14,4590,163,14,4592,170,13,1804,184,14,4589,191,13,1800,205,14,4594,212,13,1806,227,14,4597,234,13,1801,249,14,4595,256,13,1805,271,14,4596,344,13,1802,359,14,274,374,9,1192,387,13,2210,391,13,2206,409,14,5191,425,14,5193,432,13,2214,450,14,5190,466,14,5192,473,13,2213,487,14,5189,494,13,2207,508,14,5194,515,13,2211,530,14,5196,537,13,2208,552,14,5195,559,13,2212,574,14,5197,647,13,2209,662,14,73,672,9,1004,685,13,1652,689,13,1653,706,14,4358,722,14,4356,729,13,1650,743,14,4357,776,13,1651,786,14,151,798,9,1076,811,13,1869,815,13,1866,829,14,4690,836,13,1871,850,14,4692,857,13,1870,871,14,4691,878,13,1867,892,14,4693,943,13,1868,955,14,226,967,9,1147,980,13,2072,984,13,2069,998,14,4983,1005,13,2074,1019,14,4985,1026,13,2073,1040,14,4984,1047,13,2070,1061,14,4986,1112,13,2071,1124,14,312,1136,9,1226,1149,13,2302,1153,13,2299,1167,14,5331,1174,13,2304,1188,14,5332,1195,13,2303,1210,14,5334,1217,13,2300,1231,14,5333,1281,13,2301,1293,14,493,1309,9,1395,1322,13,2821,1326,13,2818,1344,14,6173,1360,14,6175,1367,13,2827,1385,14,6171,1401,14,6174,1408,13,2824,1422,14,6170,1429,13,2819,1443,14,6176,1450,13,2825,1465,14,6179,1472,13,2822,1487,14,6177,1494,13,2823,1509,14,6178,1516,13,2826,1530,14,6172,1612,13,2820,1628,14,33,1644,9,966,1657,13,1529,1661,13,1525,1679,14,4170,1695,14,4172,1702,13,1534,1720,14,4168,1736,14,4171,1743,13,1528,1757,14,4167,1764,13,1526,1778,14,4173,1785,13,1532,1800,14,4176,1807,13,1530,1822,14,4174,1829,13,1531,1844,14,4175,1851,13,1533,1865,14,4169,1947,13,1527,1963,14,85,1979,9,1014,1992,13,1687,1996,13,1684,2014,14,4420,2030,14,4422,2037,13,1693,2055,14,4418,2071,14,4421,2078,13,1688,2092,14,4417,2099,13,1685,2113,14,4423,2120,13,1691,2135,14,4426,2142,13,1689,2157,14,4424,2164,13,1690,2179,14,4425,2186,13,1692,2200,14,4419,2282,13,1686,2298,14,109,2313,9,1036,2326,13,1752,2330,13,1749,2348,14,4524,2364,14,4526,2371,13,1757,2389,14,4522,2405,14,4525,2412,13,1753,2426,14,4521,2433,13,1751,2447,14,4527,2454,13,1754,2469,14,4528,2476,13,1755,2491,14,4529,2498,13,1756,2512,14,4523,2586,13,1750,2601,14,69,2617,9,1000,2630,13,1635,2634,13,1631,2652,14,4324,2668,14,4327,2675,13,1639,2693,14,4323,2709,14,4325,2716,13,1633,2730,14,4329,2737,13,1632,2751,14,4328,2758,13,1637,2773,14,4331,2780,13,1640,2794,14,4326,2801,13,1636,2816,14,4330,2823,13,1638,2838,14,4332,2920,13,1634,2936,14,178,2953,9,1101,2966,13,1938,2970,13,1933,2988,14,4784,3004,14,4786,3011,13,1943,3029,14,4783,3045,14,4785,3052,13,1935,3066,14,4788,3073,13,1937,3088,14,4789,3095,13,1940,3110,14,4791,3117,13,1934,3131,14,4787,3138,13,1941,3153,14,4792,3160,13,1939,3175,14,4790,3182,13,1942,3197,14,4793,3286,13,1936,3303,14,242,3315,9,1162,3328,13,2120,3332,13,2117,3350,14,5057,3366,14,5059,3373,13,2122,3391,14,5056,3407,14,5058,3414,13,2119,3428,14,5060,3435,13,2121,3449,14,5061,3498,13,2118,3510,14,123,3526,9,1050,3539,13,1783,3543,13,1781,3561,14,4561,3577,14,4564,3584,13,1790,3602,14,4559,3618,14,4563,3625,13,1784,3639,14,4557,3646,13,1786,3661,14,4566,3668,13,1788,3682,14,4560,3689,13,1787,3703,14,4558,3710,13,1785,3725,14,4565,3732,13,1789,3747,14,4562,3829,13,1782,3845,14,27,3858,9,960,3871,13,1513,3875,13,1510,3893,14,4148,3909,14,4150,3916,13,1516,3934,14,4147,3950,14,4149,3957,13,1515,3971,14,4145,3978,13,1511,3993,14,4146,4000,13,1514,4017,14,4151,4033,14,4152,4090,13,1512,4103,14,53,4118,9,986,4131,13,1589,4135,13,1584,4153,14,4244,4169,14,4247,4176,13,1591,4191,14,4245,4198,13,1585,4212,14,4243,4219,13,1592,4234,14,4246,4241,13,1586,4256,14,4248,4263,13,1588,4278,14,4249,4285,13,1590,4300,14,4250,4372,13,1587,4387,14,95,4399,9,1024,4412,13,1711,4416,13,1709,4434,14,4453,4450,14,4456,4457,13,1714,4475,14,4452,4491,14,4455,4498,13,1712,4512,14,4457,4519,13,1713,4536,14,4451,4552,14,4454,4601,13,1710,4618,14,67,4630,9,998,4643,13,1628,4650,13,1625,4668,14,4315,4684,14,4318,4694,13,1630,4712,14,4314,4728,14,4317,4736,13,1626,4750,14,4312,4758,13,1629,4775,14,4313,4791,14,4316,4840,13,1627,4853,14,471,4869,9,1375,4882,13,2759,4889,13,2755,4907,14,6073,4923,14,6075,4933,13,2764,4951,14,6071,4967,14,6074,4977,13,2757,4991,14,6070,5001,13,2756,5015,14,6076,5025,13,2760,5040,14,6077,5051,13,2761,5066,14,6078,5077,13,2762,5092,14,6079,5102,13,2763,5116,14,6072,5198,13,2758,5215,14,81,5228,9,1010,5241,13,1676,5248,13,1673,5266,14,4404,5282,14,4406,5293,13,1679,5311,14,4403,5327,14,4405,5334,13,1677,5348,14,4402,5355,13,1674,5369,14,4407,5379,13,1678,5394,14,4401,5451,13,1675,5465,14,314,5480,9,1228,5493,13,2309,5500,13,2305,5518,14,5342,5534,14,5345,5545,13,2313,5563,14,5341,5579,14,5344,5586,13,2311,5600,14,5348,5610,13,2306,5624,14,5346,5631,13,2312,5645,14,5343,5655,13,2310,5672,14,5339,5688,14,5340,5695,13,2307,5709,14,5347,5785,13,2308]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxExprNodes.swift","symbols":[17,14,48,23,9,981,36,13,1575,48,13,1574,56,14,505,66,9,1407,79,13,2866,83,13,2867,97,14,6239,104,13,2864,118,14,6240,151,13,2865,161,14,192,170,9,1115,183,13,1977,187,13,1975,201,14,4844,225,13,1976,234,14,464,245,9,1368,258,13,2742,262,13,2740,276,14,6054,283,13,2743,298,14,6056,305,13,2739,319,14,6055,360,13,2741,371,14,487,381,9,1389,394,13,2808,398,13,2806,412,14,6156,419,13,2805,433,14,6157,466,13,2807,476,14,139,486,9,1066,499,13,1835,503,13,1833,517,14,4634,524,13,1836,539,14,4635,571,13,1834,581,14,91,590,9,1020,603,13,1703,607,13,1702,621,14,4442,645,13,1701,654,14,147,663,9,1072,676,13,1858,680,13,1856,694,14,4678,718,13,1857,727,14,354,736,9,1260,749,13,2423,753,13,2424,767,14,5553,791,13,2422,800,14,129,809,9,1056,822,13,1811,826,13,1809,840,14,4606,864,13,1810,873,14,89,882,9,1018,895,13,1699,899,13,1700,916,14,4439,932,14,4440,956,13,1698,965,14,119,974,9,1046,987,13,1777,991,13,1775,1005,14,4553,1029,13,1776,1038,14,117,1047,9,1044,1060,13,1774,1064,13,1772,1078,14,4551,1102,13,1773,1111,14,194,1120,9,1117,1133,13,1980,1137,13,1978,1151,14,4846,1175,13,1979,1184,14,266,1193,9,1184,1206,13,2188,1210,13,2186,1224,14,5165,1248,13,2187,1257,14,268,1266,9,1186,1279,13,2191,1283,13,2189,1297,14,5167,1321,13,2190,1330,14,296,1339,9,1212,1352,13,2262,1356,13,2260,1370,14,5271,1394,13,2261,1403,14,366,1413,9,1270,1426,13,2457,1430,13,2455,1444,14,5611,1451,13,2458,1466,14,5612,1498,13,2456,1508,14,298,1518,9,1214,1531,13,2265,1535,13,2264,1550,14,5273,1557,13,2266,1571,14,5274,1603,13,2263,1613,14,276,1622,9,1194,1635,13,2217,1639,13,2216,1653,14,5205,1677,13,2215,1686,14,483,1697,9,1385,1710,13,2796,1714,13,2794,1729,14,6139,1736,13,2793,1751,14,6138,1758,13,2792,1772,14,6137,1812,13,2795,1823,14,212,1832,9,1133,1845,13,2031,1849,13,2030,1863,14,4928,1887,13,2029,1896,14,511,1907,9,1412,1920,13,2882,1924,13,2883,1938,14,6265,1945,13,2880,1962,14,6264,1978,14,6267,1985,13,2879,1999,14,6266,2041,13,2881,2052,14,479,2063,9,1381,2076,13,2785,2080,13,2782,2094,14,6126,2101,13,2786,2118,14,6124,2134,14,6125,2141,13,2783,2155,14,6127,2197,13,2784,2208,14,133,2219,9,1060,2232,13,1820,2236,13,1817,2250,14,4616,2257,13,1821,2271,14,4615,2278,13,1818,2292,14,4617,2334,13,1819,2345,14,290,2354,9,1207,2367,13,2247,2371,13,2248,2385,14,5248,2409,13,2246,2418,14,278,2427,9,1196,2440,13,2220,2444,13,2218,2458,14,5207,2482,13,2219,2491,14,45,2504,9,978,2517,13,1569,2521,13,1570,2535,14,4233,2542,13,1567,2556,14,4231,2563,13,1565,2577,14,4230,2584,13,1571,2598,14,4229,2605,13,1568,2619,14,4232,2679,13,1566,2692,14,220,2704,9,1141,2717,13,2052,2721,13,2055,2736,14,4961,2743,13,2054,2757,14,4960,2764,13,2056,2778,14,4962,2785,13,2053,2800,14,4959,2849,13,2051,2861,14,461,2871,9,1363,2884,13,2732,2888,13,2733,2902,14,6044,2909,13,2734,2923,14,6045,2956,13,2731,2966,14,455,2977,9,1357,2990,13,2709,2994,13,2711,3008,14,6010,3015,13,2710,3030,14,6012,3037,13,2712,3051,14,6011,3092,13,2708,3103,14,477,3112,9,1379,3125,13,2779,3129,13,2781,3143,14,6122,3167,13,2780,3176,14,41,3188,9,974,3201,13,1557,3205,13,1558,3219,14,4215,3226,13,1559,3241,14,4216,3248,13,1555,3265,14,4214,3281,14,4218,3288,13,1554,3302,14,4217,3352,13,1556,3364,14,372,3373,9,1276,3386,13,2468,3390,13,2469,3404,14,5624,3428,13,2467,3437,14,214,3451,9,1135,3464,13,2035,3468,13,2037,3482,14,4935,3489,13,2039,3504,14,4931,3511,13,2033,3528,14,4930,3544,14,4933,3551,13,2032,3566,14,4932,3573,13,2036,3588,14,4934,3595,13,2038,3613,14,4936,3629,14,4937,3694,13,2034,3708,14,125,3722,9,1052,3735,13,1795,3739,13,1797,3753,14,4580,3760,13,1791,3774,14,4576,3781,13,1792,3798,14,4575,3814,14,4577,3821,13,1794,3835,14,4578,3842,13,1796,3857,14,4579,3864,13,1798,3882,14,4581,3898,14,4582,3965,13,1793,3979,14,340,3989,9,1250,4002,13,2383,4006,13,2380,4020,14,5468,4027,13,2382,4041,14,5469,4074,13,2381,4084,14,174,4094,9,1097,4107,13,1927,4111,13,1925,4125,14,4775,4132,13,1928,4146,14,4776,4179,13,1926,4189,14,224,4199,9,1145,4212,13,2068,4216,13,2065,4230,14,4979,4237,13,2067,4251,14,4980,4284,13,2066,4294,14,153,4304,9,1078,4317,13,1874,4321,13,1872,4335,14,4698,4342,13,1875,4356,14,4699,4389,13,1873,4399,14,272,4412,9,1190,4425,13,2202,4429,13,2200,4444,14,5181,4451,13,2204,4465,14,5179,4472,13,2203,4489,14,5177,4505,14,5178,4512,13,2198,4526,14,5180,4533,13,2201,4548,14,5182,4606,13,2199,4619,14,228,4628,9,1149,4641,13,2076,4645,13,2077,4659,14,4991,4683,13,2075,4692,14,43,4703,9,976,4716,13,1563,4720,13,1564,4734,14,4224,4741,13,1560,4756,14,4223,4763,13,1561,4777,14,4225,4818,13,1562,4829,14,180,4838,9,1103,4851,13,1945,4855,13,1946,4869,14,4803,4893,13,1944,4902,14,184,4914,9,1107,4927,13,1955,4931,13,1952,4945,14,4812,4952,13,1957,4966,14,4814,4973,13,1956,4990,14,4813,5006,14,4816,5013,13,1953,5027,14,4815,5078,13,1954,5090,14,222,5104,9,1143,5117,13,2060,5121,13,2057,5135,14,4967,5142,13,2064,5156,14,4968,5163,13,2061,5178,14,4970,5185,13,2063,5200,14,4972,5207,13,2062,5221,14,4971,5228,13,2058,5242,14,4969,5309,13,2059,5323,14,310,5333,9,1224,5346,13,2296,5350,13,2297,5365,14,5328,5372,13,2298,5386,14,5327,5418,13,2295,5428,14,356,5437,9,1262,5450,13,2427,5454,13,2425,5468,14,5555,5492,13,2426,5501,14,264,5513,9,1182,5526,13,2183,5530,13,2180,5544,14,5159,5551,13,2185,5565,14,5158,5572,13,2184,5589,14,5156,5605,14,5157,5612,13,2181,5626,14,5160,5677,13,2182]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxNodes.swift","symbols":[21,14,107,32,9,1034,45,13,1746,50,13,1747,64,14,4515,74,13,1748,89,14,4516,96,13,1744,111,14,4517,151,13,1745,162,14,495,173,9,1397,186,13,2831,190,13,2832,204,14,6189,211,13,2829,228,14,6188,244,14,6191,251,13,2828,265,14,6190,307,13,2830,318,14,210,328,9,1131,341,13,2026,345,13,2027,359,14,4924,366,13,2028,380,14,4925,413,13,2025,423,14,240,434,9,1160,447,13,2114,451,13,2116,465,14,5051,472,13,2115,489,14,5050,505,14,5049,512,13,2112,526,14,5052,568,13,2113,579,14,230,591,9,1151,604,13,2081,608,13,2083,623,14,4996,630,13,2082,645,14,4995,652,13,2078,666,14,4993,673,13,2080,688,14,4994,736,13,2079,748,14,57,758,9,989,771,13,1603,775,13,1600,789,14,4275,796,13,1602,811,14,4276,843,13,1601,853,14,244,865,9,1164,878,13,2126,882,13,2124,896,14,5066,903,13,2128,917,14,5069,924,13,2127,938,14,5068,945,13,2125,960,14,5067,1010,13,2123,1022,14,280,1035,9,1198,1048,13,2225,1052,13,2227,1070,14,5212,1086,14,5209,1093,13,2226,1108,14,5214,1115,13,2222,1130,14,5211,1137,13,2221,1151,14,5210,1158,13,2224,1173,14,5213,1229,13,2223,1242,14,388,1253,9,1290,1266,13,2511,1270,13,2508,1284,14,5689,1291,13,2512,1309,14,5691,1325,14,5692,1332,13,2509,1346,14,5690,1387,13,2510,1398,14,61,1408,9,992,1421,13,1613,1425,13,1614,1439,14,4297,1446,13,1612,1461,14,4296,1493,13,1611,1503,14,206,1518,9,1127,1531,13,2015,1535,13,2012,1553,14,4907,1569,14,4909,1576,13,2019,1591,14,4906,1598,13,2017,1613,14,4912,1620,13,2013,1635,14,4910,1642,13,2020,1657,14,4908,1664,13,2018,1679,14,4905,1686,13,2016,1700,14,4911,1772,13,2014,1787,14,440,1798,9,1335,1811,13,2657,1815,13,2659,1829,14,5939,1836,13,2658,1850,14,5938,1857,13,2660,1871,14,5937,1913,13,2656,1924,14,121,1933,9,1048,1946,13,1779,1950,13,1780,1964,14,4555,1988,13,1778,1997,14,248,2010,9,1168,2023,13,2135,2027,13,2136,2041,14,5077,2048,13,2137,2063,14,5078,2070,13,2138,2084,14,5079,2091,13,2133,2108,14,5076,2124,14,5081,2131,13,2132,2145,14,5080,2204,13,2134,2217,14,115,2227,9,1042,2240,13,1767,2244,13,1769,2258,14,4545,2265,13,1768,2280,14,4546,2312,13,1766,2322,14,370,2332,9,1274,2345,13,2463,2349,13,2465,2363,14,5620,2370,13,2466,2384,14,5621,2417,13,2464,2427,14,188,2438,9,1111,2451,13,1965,2455,13,1966,2469,14,4827,2476,13,1964,2493,14,4825,2509,14,4826,2516,13,1962,2530,14,4828,2572,13,1963,2583,14,87,2593,9,1016,2606,13,1696,2610,13,1697,2624,14,4436,2631,13,1694,2645,14,4435,2678,13,1695,2688,14,252,2700,9,1172,2713,13,2150,2717,13,2153,2731,14,5107,2738,13,2151,2753,14,5105,2760,13,2152,2775,14,5106,2782,13,2154,2797,14,5104,2845,13,2149,2857,14,143,2868,9,1069,2881,13,1846,2885,13,1845,2899,14,4657,2906,13,1848,2921,14,4656,2928,13,1847,2942,14,4655,2983,13,1844,2994,14,392,3009,9,1294,3022,13,2524,3026,13,2521,3040,14,5706,3047,13,2520,3061,14,5705,3068,13,2526,3082,14,5703,3089,13,2525,3103,14,5709,3110,13,2523,3124,14,5708,3131,13,2522,3145,14,5707,3152,13,2518,3166,14,5704,3244,13,2519,3259,14,65,3271,9,996,3284,13,1620,3288,13,1623,3302,14,4307,3309,13,1621,3324,14,4305,3331,13,1624,3346,14,4304,3353,13,1622,3368,14,4306,3416,13,1619,3428,14,111,3438,9,1038,3451,13,1758,3455,13,1761,3469,14,4537,3476,13,1760,3491,14,4538,3523,13,1759,3533,14,368,3543,9,1272,3556,13,2459,3560,13,2462,3574,14,5617,3581,13,2460,3598,14,5615,3614,14,5616,3647,13,2461,3657,14,182,3668,9,1105,3681,13,1949,3685,13,1951,3699,14,4807,3706,13,1950,3723,14,4805,3739,14,4806,3746,13,1947,3760,14,4808,3802,13,1948,3817,14,292,3827,9,1209,3840,13,2250,3845,13,2251,3859,14,5250,3867,13,2252,3882,14,5251,3914,13,2249,3924,14,31,3934,9,964,3947,13,1523,3951,13,1521,3968,14,4162,3984,14,4164,3991,13,1524,4005,14,4163,4038,13,1522,4048,14,258,4058,9,1177,4071,13,2166,4075,13,2167,4089,14,5131,4096,13,2168,4110,14,5132,4143,13,2165,4153,14,250,4169,9,1170,4182,13,2143,4186,13,2139,4204,14,5087,4220,14,5090,4227,13,2148,4242,14,5089,4249,13,2140,4264,14,5091,4271,13,2146,4286,14,5095,4293,13,2145,4308,14,5094,4315,13,2147,4330,14,5088,4337,13,2144,4352,14,5093,4359,13,2142,4374,14,5092,4453,13,2141,4469,14,302,4481,9,1218,4494,13,2273,4498,13,2274,4512,14,5284,4519,13,2276,4534,14,5282,4541,13,2275,4556,14,5281,4563,13,2271,4578,14,5283,4626,13,2272,4638,14,304,4648,9,1220,4661,13,2279,4665,13,2280,4679,14,5290,4686,13,2277,4701,14,5289,4733,13,2278,4743,14,234,4754,9,1155,4767,13,2096,4771,13,2098,4785,14,5017,4792,13,2097,4806,14,5019,4813,13,2094,4827,14,5018,4869,13,2095,4880,14,99,4891,9,1028,4904,13,1722,4908,13,1724,4922,14,4470,4929,13,1723,4946,14,4468,4962,14,4469,4969,13,1720,4983,14,4471,5025,13,1721,5036,14,149,5049,9,1074,5062,13,1862,5066,13,1864,5080,14,4680,5087,13,1863,5102,14,4684,5109,13,1859,5124,14,4682,5131,13,1865,5146,14,4681,5153,13,1861,5168,14,4683,5224,13,1860,5241,14,168,5253,9,1091,5266,13,1913,5271,13,1910,5285,14,4758,5293,13,1914,5308,14,4760,5318,13,1915,5333,14,4757,5344,13,1912,5359,14,4759,5407,13,1911,5422,14,416,5432,9,1313,5445,13,2596,5449,13,2597,5463,14,5846,5473,13,2594,5490,14,5844,5506,14,5845,5539,13,2595,5553,14,396,5564,9,1297,5577,13,2537,5584,13,2534,5598,14,5734,5605,13,2538,5619,14,5737,5630,13,2535,5647,14,5735,5663,14,5736,5705,13,2536,5716,14,418,5726,9,1315,5739,13,2600,5743,13,2601,5757,14,5849,5764,13,2599,5779,14,5850,5811,13,2598,5825,14,408,5836,9,1308,5849,13,2569,5853,13,2570,5867,14,5787,5874,13,2572,5888,14,5789,5902,13,2571,5916,14,5788,5958,13,2568,5973,14,432,5984,9,1328,5997,13,2636,6001,13,2637,6015,14,5904,6022,13,2638,6036,14,5905,6049,13,2639,6063,14,5906,6105,13,2635,6119,14,164,6132,9,1087,6145,13,1905,6150,13,1901,6164,14,4748,6172,13,1904,6186,14,4744,6193,13,1906,6208,14,4746,6215,13,1902,6233,14,4745,6249,14,4749,6256,13,1900,6271,14,4747,6328,13,1903,6344,14,485,6358,9,1387,6371,13,2801,6376,13,2798,6390,14,6148,6398,13,2800,6412,14,6143,6422,13,2803,6437,14,6145,6449,13,2802,6464,14,6144,6474,13,2797,6489,14,6147,6496,13,2804,6514,14,6149,6530,14,6146,6595,13,2799,6612,14,236,6624,9,1157,6637,13,2100,6642,13,2103,6656,14,5027,6664,13,2102,6678,14,5026,6685,13,2101,6702,14,5023,6718,14,5024,6725,13,2104,6739,14,5025,6790,13,2099,6806,14,386,6818,9,1288,6831,13,2504,6836,13,2506,6850,14,5683,6858,13,2505,6872,14,5682,6880,13,2507,6894,14,5684,6904,13,2503,6919,14,5681,6969,13,2502,6986,14,318,6998,9,1232,7011,13,2321,7016,13,2323,7030,14,5365,7038,13,2322,7052,14,5364,7060,13,2324,7074,14,5362,7084,13,2320,7099,14,5363,7149,13,2319,7166,14,430,7177,9,1326,7190,13,2631,7195,13,2634,7209,14,5899,7217,13,2633,7231,14,5900,7238,13,2632,7252,14,5898,7294,13,2630,7305,14,469,7315,9,1373,7328,13,2754,7335,13,2752,7349,14,6066,7360,13,2751,7375,14,6067,7407,13,2753,7421,14,428,7433,9,1324,7446,13,2627,7454,13,2628,7468,14,5892,7478,13,2629,7492,14,5893,7502,13,2626,7516,14,5891,7527,13,2624,7542,14,5890,7592,13,2625,7609,14,262,7619,9,1180,7632,13,2177,7636,13,2178,7651,14,5152,7658,13,2179,7673,14,5153,7704,13,2176,7719,14,444,7732,9,1339,7745,13,2669,7749,13,2671,7764,14,5947,7774,13,2668,7789,14,5950,7796,13,2665,7811,14,5948,7822,13,2670,7837,14,5951,7844,13,2666,7859,14,5949,7914,13,2667,7928,14,436,7939,9,1331,7952,13,2649,7957,13,2651,7971,14,5927,7981,13,2650,7995,14,5929,8002,13,2647,8016,14,5928,8058,13,2648,8070,14,390,8081,9,1292,8094,13,2516,8098,13,2517,8112,14,5698,8120,13,2513,8137,14,5696,8153,14,5697,8160,13,2514,8174,14,5699,8216,13,2515,8231,14,380,8241,9,1283,8254,13,2488,8258,13,2489,8272,14,5653,8279,13,2487,8294,14,5654,8326,13,2486,8341,14,448,8356,9,1342,8369,13,2682,8374,13,2687,8388,14,5975,8399,13,2684,8413,14,5979,8421,13,2683,8435,14,5978,8446,13,2686,8461,14,5974,8469,13,2680,8484,14,5977,8491,13,2685,8506,14,5980,8513,13,2679,8528,14,5976,8602,13,2681,8621,14,270,8633,9,1188,8646,13,2193,8653,13,2196,8668,14,5170,8675,13,2194,8690,14,5172,8700,13,2195,8714,14,5169,8725,13,2197,8740,14,5171,8788,13,2192,8801,14,216,8811,9,1137,8824,13,2041,8831,13,2042,8845,14,4944,8856,13,2043,8871,14,4945,8903,13,2040,8916,14,422,8927,9,1319,8940,13,2610,8945,13,2608,8959,14,5861,8969,13,2611,8983,14,5862,8994,13,2607,9011,14,5860,9027,14,5859,9069,13,2609,9084,14,406,9094,9,1306,9107,13,2567,9111,13,2564,9125,14,5783,9136,13,2566,9151,14,5784,9183,13,2565,9193,14,51,9203,9,984,9216,13,1583,9220,13,1582,9234,14,4239,9241,13,1580,9255,14,4240,9288,13,1581,9298,14,517,9310,9,1418,9323,13,2900,9327,13,2901,9341,14,6291,9348,13,2896,9365,14,6290,9381,14,6289,9388,13,2899,9403,14,6293,9410,13,2897,9424,14,6292,9474,13,2898,9486,14,208,9496,9,1129,9509,13,2023,9513,13,2024,9527,14,4920,9534,13,2022,9549,14,4921,9581,13,2021,9591,14,348,9603,9,1256,9616,13,2404,9620,13,2406,9634,14,5514,9641,13,2407,9655,14,5512,9662,13,2405,9679,14,5510,9695,14,5511,9702,13,2402,9716,14,5513,9767,13,2403,9779,14,402,9791,9,1302,9804,13,2555,9808,13,2552,9822,14,5768,9829,13,2557,9843,14,5767,9850,13,2556,9865,14,5770,9872,13,2553,9886,14,5769,9936,13,2554,9948,14,404,9960,9,1304,9973,13,2560,9977,13,2562,9991,14,5778,9998,13,2563,10012,14,5775,10019,13,2561,10034,14,5777,10041,13,2558,10055,14,5776,10105,13,2559,10117,14,400,10129,9,1300,10142,13,2548,10146,13,2550,10160,14,5762,10167,13,2551,10181,14,5758,10188,13,2549,10205,14,5761,10221,14,5760,10228,13,2546,10242,14,5759,10293,13,2547,10305,14,282,10314,9,1200,10327,13,2230,10331,13,2228,10345,14,5220,10369,13,2229,10378,14,499,10388,9,1401,10401,13,2842,10405,13,2840,10419,14,6202,10426,13,2843,10440,14,6203,10473,13,2841,10483,14,35,10494,9,968,10507,13,1538,10511,13,1536,10526,14,4187,10533,13,1539,10547,14,4188,10554,13,1535,10571,14,4185,10587,14,4186,10628,13,1537,10639,14,300,10649,9,1216,10662,13,2269,10666,13,2268,10680,14,5277,10687,13,2270,10701,14,5278,10734,13,2267,10744,14,467,10755,9,1371,10768,13,2749,10772,13,2750,10786,14,6060,10793,13,2746,10808,14,6061,10815,13,2748,10830,14,6062,10870,13,2747,10881,14,491,10892,9,1393,10905,13,2816,10909,13,2817,10924,14,6164,10931,13,2813,10946,14,6165,10953,13,2815,10968,14,6166,11007,13,2814,11018,14,198,11029,9,1121,11042,13,1991,11046,13,1989,11060,14,4862,11067,13,1993,11084,14,4860,11100,14,4861,11107,13,1992,11121,14,4863,11163,13,1990,11174,14,39,11185,9,972,11198,13,1552,11202,13,1550,11216,14,4209,11223,13,1549,11241,14,4207,11257,14,4208,11264,13,1553,11278,14,4210,11319,13,1551,11330,14,286,11340,9,1204,11353,13,2237,11357,13,2236,11371,14,5226,11378,13,2238,11395,14,5227,11411,14,5228,11444,13,2235,11454,14,284,11464,9,1202,11477,13,2233,11481,13,2234,11495,14,5223,11502,13,2232,11517,14,5222,11549,13,2231,11559,14,316,11570,9,1230,11583,13,2314,11587,13,2315,11601,14,5356,11608,13,2318,11622,14,5358,11629,13,2316,11643,14,5357,11685,13,2317,11696,14,218,11709,9,1139,11722,13,2048,11726,13,2044,11744,14,4948,11760,14,4949,11767,13,2049,11781,14,4952,11788,13,2050,11803,14,4953,11810,13,2046,11825,14,4950,11832,13,2047,11847,14,4951,11903,13,2045,11916,14,362,11930,9,1267,11943,13,2440,11947,13,2442,11965,14,5582,11981,14,5583,11988,13,2446,12002,14,5586,12009,13,2447,12024,14,5587,12031,13,2441,12046,14,5581,12053,13,2443,12068,14,5584,12075,13,2445,12090,14,5585,12154,13,2444,12168,14,382,12179,9,1285,12192,13,2492,12196,13,2493,12210,14,5659,12217,13,2490,12234,14,5657,12250,14,5658,12257,13,2494,12271,14,5660,12313,13,2491,12324,14,378,12335,9,1281,12348,13,2482,12352,13,2483,12366,14,5647,12373,13,2485,12387,14,5649,12394,13,2484,12408,14,5648,12450,13,2481,12461,14,424,12472,9,1321,12485,13,2612,12489,13,2615,12503,14,5868,12510,13,2613,12527,14,5866,12543,14,5867,12550,13,2616,12564,14,5869,12606,13,2614,12617,14,376,12627,9,1279,12640,13,2477,12644,13,2479,12658,14,5643,12665,13,2480,12680,14,5644,12712,13,2478,12722,14,232,12738,9,1153,12751,13,2084,12755,13,2092,12770,14,5008,12777,13,2089,12792,14,5006,12799,13,2085,12814,14,5003,12821,13,2091,12836,14,5007,12843,13,2090,12857,14,5001,12864,13,2093,12879,14,5002,12886,13,2086,12901,14,5004,12908,13,2088,12923,14,5005,13003,13,2087,13019,14,176,13029,9,1099,13042,13,1932,13046,13,1929,13060,14,4779,13067,13,1931,13082,14,4780,13114,13,1930,13124,14,360,13135,9,1265,13148,13,2436,13152,13,2437,13166,14,5576,13173,13,2439,13190,14,5574,13206,14,5575,13213,13,2438,13227,14,5577,13269,13,2435,13280,14,157,13290,9,1081,13303,13,1883,13307,13,1886,13321,14,4720,13328,13,1885,13342,14,4719,13375,13,1884,13385,14,320,13397,9,1234,13410,13,2328,13414,13,2330,13429,14,5371,13436,13,2325,13451,14,5372,13458,13,2329,13472,14,5370,13479,13,2327,13494,14,5373,13542,13,2326,13558,14,324,13568,9,1238,13581,13,2337,13586,13,2338,13600,14,5383,13611,13,2336,13626,14,5382,13658,13,2335,13672,14,420,13683,9,1317,13696,13,2603,13701,13,2605,13715,14,5854,13723,13,2604,13737,14,5853,13745,13,2606,13759,14,5855,13801,13,2602,13816,14,438,13826,9,1333,13839,13,2653,13848,13,2655,13862,14,5934,13869,13,2654,13884,14,5933,13916,13,2652,13930,14,97,13941,9,1026,13954,13,1719,13965,13,1716,13979,14,4463,13990,13,1717,14005,14,4464,14015,13,1715,14030,14,4462,14070,13,1718]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxPatternNodes.swift","symbols":[17,14,159,23,9,1083,36,13,1888,48,13,1887,56,14,170,68,9,1093,81,13,1917,85,13,1919,100,14,4768,107,13,1920,121,14,4766,128,13,1921,142,14,4765,149,13,1918,164,14,4767,213,13,1916,225,14,113,235,9,1040,248,13,1762,252,13,1765,266,14,4541,273,13,1764,287,14,4542,320,13,1763,330,14,186,340,9,1109,353,13,1961,357,13,1958,371,14,4821,378,13,1960,392,14,4822,425,13,1959,435,14,254,444,9,1174,457,13,2157,461,13,2155,475,14,5112,499,13,2156,508,14,101,519,9,1030,532,13,1725,536,13,1728,550,14,4477,557,13,1729,571,14,4475,578,13,1727,592,14,4476,634,13,1726,645,14,93,656,9,1022,669,13,1706,673,13,1708,687,14,4446,694,13,1707,711,14,4444,727,14,4445,734,13,1704,748,14,4447,790,13,1705,801,14,200,811,9,1123,824,13,1995,828,13,1997,842,14,4867,849,13,1996,864,14,4868,896,13,1994,906,14,246,915,9,1166,928,13,2131,932,13,2129,946,14,5074,970,13,2130,979,14,322,989,9,1236,1002,13,2333,1006,13,2334,1020,14,5379,1027,13,2331,1041,14,5378,1074,13,2332]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxStmtNodes.swift","symbols":[17,14,49,23,9,982,36,13,1577,48,13,1576,56,14,63,66,9,994,79,13,1616,83,13,1617,97,14,4300,104,13,1618,119,14,4301,151,13,1615,161,14,515,174,9,1416,187,13,2893,191,13,2895,206,14,6280,213,13,2890,228,14,6282,235,13,2892,249,14,6278,256,13,2889,273,14,6279,289,14,6281,296,13,2894,310,14,6283,368,13,2891,381,14,497,391,9,1399,404,13,2838,408,13,2837,422,14,6198,429,13,2839,443,14,6199,476,13,2836,486,14,137,495,9,1064,508,13,1831,512,13,1829,526,14,4631,550,13,1830,559,14,196,573,9,1119,586,13,1985,590,13,1988,605,14,4851,612,13,1981,627,14,4852,634,13,1984,648,14,4848,655,13,1986,669,14,4853,676,13,1983,690,14,4849,697,13,1987,711,14,4850,778,13,1982,792,14,503,804,9,1405,817,13,2862,821,13,2861,835,14,6230,842,13,2858,859,14,6231,875,14,6232,882,13,2859,896,14,6233,903,13,2863,917,14,6234,968,13,2860,980,14,501,1000,9,1403,1013,13,2852,1017,13,2857,1032,14,6209,1039,13,2845,1054,14,6210,1061,13,2844,1075,14,6206,1082,13,2846,1097,14,6211,1104,13,2849,1119,14,6214,1126,13,2847,1141,14,6212,1148,13,2855,1162,14,6208,1169,13,2853,1184,14,6216,1191,13,2856,1205,14,6207,1212,13,2851,1226,14,6215,1233,13,2848,1248,14,6213,1255,13,2854,1269,14,6217,1385,13,2850,1405,14,37,1420,9,970,1433,13,1545,1437,13,1547,1452,14,4193,1459,13,1541,1474,14,4196,1481,13,1544,1495,14,4192,1502,13,1540,1516,14,4195,1523,13,1548,1537,14,4194,1544,13,1546,1561,14,4198,1577,14,4199,1584,13,1542,1598,14,4197,1674,13,1543,1689,14,457,1702,9,1359,1715,13,2718,1719,13,2721,1734,14,6019,1741,13,2715,1756,14,6021,1763,13,2720,1777,14,6018,1784,13,2719,1798,14,6023,1805,13,2716,1823,14,6020,1839,14,6022,1896,13,2717,1909,14,29,1919,9,962,1932,13,1520,1936,13,1519,1950,14,4158,1957,13,1517,1972,14,4159,2004,13,1518,2014,14,519,2024,9,1420,2037,13,2904,2041,13,2903,2055,14,6298,2062,13,2905,2076,14,6299,2109,13,2902,2119,14,172,2128,9,1095,2141,13,1923,2145,13,1924,2159,14,4773,2183,13,1922,2192,14,489,2202,9,1391,2215,13,2811,2219,13,2809,2233,14,6160,2240,13,2812,2255,14,6161,2287,13,2810,2297,14,166,2306,9,1089,2319,13,1909,2323,13,1907,2337,14,4755,2361,13,1908,2370,14,507,2380,9,1409,2393,13,2871,2397,13,2870,2411,14,6243,2418,13,2868,2432,14,6244,2465,13,2869,2475,14,459,2490,9,1361,2503,13,2726,2507,13,2730,2522,14,6032,2529,13,2723,2544,14,6034,2551,13,2729,2565,14,6029,2572,13,2722,2589,14,6030,2605,14,6033,2612,13,2727,2626,14,6036,2633,13,2724,2648,14,6035,2655,13,2728,2670,14,6031,2744,13,2725,2759,14,190,2773,9,1113,2786,13,1970,2790,13,1967,2804,14,4832,2811,13,1974,2825,14,4835,2833,13,1973,2847,14,4834,2855,13,1971,2870,14,4837,2878,13,1972,2893,14,4833,2900,13,1968,2914,14,4836,2981,13,1969]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxTypeNodes.swift","symbols":[17,14,50,23,9,983,36,13,1578,48,13,1579,56,14,342,66,9,1252,79,13,2384,83,13,2387,97,14,5473,104,13,2386,119,14,5472,151,13,2385,161,14,338,173,9,1248,186,13,2374,190,13,2375,204,14,5460,211,13,2379,225,14,5461,232,13,2378,246,14,5463,253,13,2377,268,14,5462,318,13,2376,330,14,328,339,9,1241,352,13,2346,356,13,2347,370,14,5403,394,13,2348,403,14,481,414,9,1383,427,13,2787,431,13,2790,445,14,6132,452,13,2788,466,14,6131,473,13,2791,487,14,6133,529,13,2789,540,14,135,553,9,1062,566,13,1822,570,13,1826,584,14,4623,591,13,1823,605,14,4621,612,13,1828,626,14,4625,633,13,1824,647,14,4622,654,13,1827,668,14,4624,728,13,1825,741,14,75,752,9,1006,765,13,1654,769,13,1655,783,14,4362,790,13,1658,804,14,4363,811,13,1657,825,14,4361,867,13,1656,878,14,83,888,9,1012,901,13,1680,905,13,1681,919,14,4413,926,13,1683,940,14,4414,973,13,1682,983,14,332,993,9,1244,1006,13,2356,1010,13,2359,1024,14,5423,1031,13,2357,1045,14,5422,1078,13,2358,1088,14,442,1098,9,1337,1111,13,2661,1115,13,2662,1129,14,5943,1136,13,2664,1150,14,5944,1183,13,2663,1193,14,162,1202,9,1085,1215,13,1897,1219,13,1899,1236,14,4741,1252,14,4742,1276,13,1898,1285,14,513,1296,9,1414,1309,13,2884,1313,13,2888,1327,14,6273,1334,13,2887,1351,14,6271,1367,14,6272,1374,13,2885,1388,14,6274,1430,13,2886,1441,14,71,1456,9,1002,1469,13,1641,1473,13,1649,1487,14,4344,1494,13,1648,1511,14,4342,1527,14,4343,1534,13,1643,1548,14,4345,1555,13,1644,1570,14,4346,1577,13,1646,1592,14,4347,1599,13,1647,1613,14,4348,1620,13,1642,1634,14,4341,1710,13,1645,1725,14,131,1736,9,1058,1749,13,1812,1753,13,1816,1768,14,4610,1775,13,1814,1793,14,4609,1809,14,4611,1816,13,1813,1830,14,4608,1870,13,1815]}]}