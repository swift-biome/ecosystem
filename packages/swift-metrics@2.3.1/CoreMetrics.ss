{"culture":"CoreMetrics","dependencies":[],"extensions":[],"partitions":[{"namespace":"CoreMetrics","communities":[{"community":"protocol","startIndex":0,"endIndex":5},{"community":"enum","startIndex":5,"endIndex":6},{"community":"struct","startIndex":6,"endIndex":7},{"community":"class","startIndex":7,"endIndex":14},{"community":"init","startIndex":14,"endIndex":25},{"community":"type.property","startIndex":25,"endIndex":34},{"community":"property","startIndex":34,"endIndex":48},{"community":"type.method","startIndex":48,"endIndex":50},{"community":"method","startIndex":50,"endIndex":111}]}],"identifiers":["s11CoreMetrics0B7FactoryP","s11CoreMetrics12TimerHandlerP","s11CoreMetrics14CounterHandlerP","s11CoreMetrics15RecorderHandlerP","s11CoreMetrics27FloatingPointCounterHandlerP","s11CoreMetrics0B6SystemO","s11CoreMetrics8TimeUnitV","s11CoreMetrics09MultiplexB7HandlerC","s11CoreMetrics18NOOPMetricsHandlerC","s11CoreMetrics20FloatingPointCounterC","s11CoreMetrics5GaugeC","s11CoreMetrics5TimerC","s11CoreMetrics7CounterC","s11CoreMetrics8RecorderC","s11CoreMetrics09MultiplexB7HandlerC9factoriesACSayAA0B7Factory_pG_tcfc","s11CoreMetrics20FloatingPointCounterC5label10dimensions7handlerACSS_SaySS_SStGAA0cdE7Handler_ptcfc","s11CoreMetrics20FloatingPointCounterC5label10dimensionsACSS_SaySS_SStGtcfc","s11CoreMetrics5GaugeC5label10dimensionsACSS_SaySS_SStGtcfc","s11CoreMetrics5TimerC5label10dimensions20preferredDisplayUnitACSS_SaySS_SStGAA04TimeH0Vtcfc","s11CoreMetrics5TimerC5label10dimensions7handlerACSS_SaySS_SStGAA0C7Handler_ptcfc","s11CoreMetrics5TimerC5label10dimensionsACSS_SaySS_SStGtcfc","s11CoreMetrics7CounterC5label10dimensions7handlerACSS_SaySS_SStGAA0C7Handler_ptcfc","s11CoreMetrics7CounterC5label10dimensionsACSS_SaySS_SStGtcfc","s11CoreMetrics8RecorderC5label10dimensions9aggregate7handlerACSS_SaySS_SStGSbAA0C7Handler_ptcfc","s11CoreMetrics8RecorderC5label10dimensions9aggregateACSS_SaySS_SStGSbtcfc","s11CoreMetrics0B6SystemO7factoryAA0B7Factory_pvpZ","s11CoreMetrics18NOOPMetricsHandlerC8instanceACvpZ","s11CoreMetrics8TimeUnitV11nanosecondsACvpZ","s11CoreMetrics8TimeUnitV12microsecondsACvpZ","s11CoreMetrics8TimeUnitV12millisecondsACvpZ","s11CoreMetrics8TimeUnitV4daysACvpZ","s11CoreMetrics8TimeUnitV5hoursACvpZ","s11CoreMetrics8TimeUnitV7minutesACvpZ","s11CoreMetrics8TimeUnitV7secondsACvpZ","s11CoreMetrics20FloatingPointCounterC10dimensionsSaySS_SStGvp","s11CoreMetrics20FloatingPointCounterC11descriptionSSvp","s11CoreMetrics20FloatingPointCounterC5labelSSvp","s11CoreMetrics5TimerC10dimensionsSaySS_SStGvp","s11CoreMetrics5TimerC11descriptionSSvp","s11CoreMetrics5TimerC5labelSSvp","s11CoreMetrics7CounterC10dimensionsSaySS_SStGvp","s11CoreMetrics7CounterC11descriptionSSvp","s11CoreMetrics7CounterC5labelSSvp","s11CoreMetrics8RecorderC10dimensionsSaySS_SStGvp","s11CoreMetrics8RecorderC11descriptionSSvp","s11CoreMetrics8RecorderC5labelSSvp","s11CoreMetrics8RecorderC9aggregateSbvp","s11CoreMetrics8TimeUnitV20scaleFromNanosecondss6UInt64Vvp","s11CoreMetrics0B6SystemO14withWriterLockyxxyKXEKlFZ","s11CoreMetrics0B6SystemO9bootstrapyyAA0B7Factory_pFZ","s11CoreMetrics09MultiplexB7HandlerC11makeCounter5label10dimensionsAA0fD0_pSS_SaySS_SStGtF","s11CoreMetrics09MultiplexB7HandlerC12destroyTimeryyAA0fD0_pF","s11CoreMetrics09MultiplexB7HandlerC12makeRecorder5label10dimensions9aggregateAA0fD0_pSS_SaySS_SStGSbtF","s11CoreMetrics09MultiplexB7HandlerC14destroyCounteryyAA0fD0_pF","s11CoreMetrics09MultiplexB7HandlerC15destroyRecorderyyAA0fD0_pF","s11CoreMetrics09MultiplexB7HandlerC24makeFloatingPointCounter5label10dimensionsAA0fghD0_pSS_SaySS_SStGtF","s11CoreMetrics09MultiplexB7HandlerC27destroyFloatingPointCounteryyAA0fghD0_pF","s11CoreMetrics09MultiplexB7HandlerC9makeTimer5label10dimensionsAA0fD0_pSS_SaySS_SStGtF","s11CoreMetrics0B7FactoryP11makeCounter5label10dimensionsAA0E7Handler_pSS_SaySS_SStGtF","s11CoreMetrics0B7FactoryP12destroyTimeryyAA0E7Handler_pF","s11CoreMetrics0B7FactoryP12makeRecorder5label10dimensions9aggregateAA0E7Handler_pSS_SaySS_SStGSbtF","s11CoreMetrics0B7FactoryP14destroyCounteryyAA0E7Handler_pF","s11CoreMetrics0B7FactoryP15destroyRecorderyyAA0E7Handler_pF","s11CoreMetrics0B7FactoryP24makeFloatingPointCounter5label10dimensionsAA0efG7Handler_pSS_SaySS_SStGtF","s11CoreMetrics0B7FactoryP27destroyFloatingPointCounteryyAA0efG7Handler_pF","s11CoreMetrics0B7FactoryP9makeTimer5label10dimensionsAA0E7Handler_pSS_SaySS_SStGtF","s11CoreMetrics0B7FactoryPAAE24makeFloatingPointCounter5label10dimensionsAA0efG7Handler_pSS_SaySS_SStGtF","s11CoreMetrics0B7FactoryPAAE27destroyFloatingPointCounteryyAA0efG7Handler_pF","s11CoreMetrics12TimerHandlerP17preferDisplayUnityyAA04TimeG0VF","s11CoreMetrics12TimerHandlerP17recordNanosecondsyys5Int64VF","s11CoreMetrics12TimerHandlerPAAE17preferDisplayUnityyAA04TimeG0VF","s11CoreMetrics14CounterHandlerP5resetyyF","s11CoreMetrics14CounterHandlerP9increment2byys5Int64V_tF","s11CoreMetrics15RecorderHandlerP6recordyySdF","s11CoreMetrics15RecorderHandlerP6recordyys5Int64VF","s11CoreMetrics18NOOPMetricsHandlerC11makeCounter5label10dimensionsAA0fD0_pSS_SaySS_SStGtF","s11CoreMetrics18NOOPMetricsHandlerC12destroyTimeryyAA0fD0_pF","s11CoreMetrics18NOOPMetricsHandlerC12makeRecorder5label10dimensions9aggregateAA0fD0_pSS_SaySS_SStGSbtF","s11CoreMetrics18NOOPMetricsHandlerC14destroyCounteryyAA0fD0_pF","s11CoreMetrics18NOOPMetricsHandlerC15destroyRecorderyyAA0fD0_pF","s11CoreMetrics18NOOPMetricsHandlerC17recordNanosecondsyys5Int64VF","s11CoreMetrics18NOOPMetricsHandlerC24makeFloatingPointCounter5label10dimensionsAA0fghD0_pSS_SaySS_SStGtF","s11CoreMetrics18NOOPMetricsHandlerC27destroyFloatingPointCounteryyAA0fghD0_pF","s11CoreMetrics18NOOPMetricsHandlerC5resetyyF","s11CoreMetrics18NOOPMetricsHandlerC6recordyySdF","s11CoreMetrics18NOOPMetricsHandlerC6recordyys5Int64VF","s11CoreMetrics18NOOPMetricsHandlerC9increment2byySd_tF","s11CoreMetrics18NOOPMetricsHandlerC9increment2byys5Int64V_tF","s11CoreMetrics18NOOPMetricsHandlerC9makeTimer5label10dimensionsAA0fD0_pSS_SaySS_SStGtF","s11CoreMetrics20FloatingPointCounterC5resetyyF","s11CoreMetrics20FloatingPointCounterC7destroyyyF","s11CoreMetrics20FloatingPointCounterC9increment2byyx_tSBRzlF","s11CoreMetrics20FloatingPointCounterC9incrementyyF","s11CoreMetrics27FloatingPointCounterHandlerP5resetyyF","s11CoreMetrics27FloatingPointCounterHandlerP9increment2byySd_tF","s11CoreMetrics5TimerC13recordSecondsyyxSBRzlF","s11CoreMetrics5TimerC13recordSecondsyyxSzRzlF","s11CoreMetrics5TimerC17recordNanosecondsyys5Int64VF","s11CoreMetrics5TimerC17recordNanosecondsyyxSzRzlF","s11CoreMetrics5TimerC18recordMicrosecondsyyxSBRzlF","s11CoreMetrics5TimerC18recordMicrosecondsyyxSzRzlF","s11CoreMetrics5TimerC18recordMillisecondsyyxSBRzlF","s11CoreMetrics5TimerC18recordMillisecondsyyxSzRzlF","s11CoreMetrics5TimerC7destroyyyF","s11CoreMetrics7CounterC5resetyyF","s11CoreMetrics7CounterC7destroyyyF","s11CoreMetrics7CounterC9increment2byyx_tSzRzlF","s11CoreMetrics7CounterC9incrementyyF","s11CoreMetrics8RecorderC6recordyyxSBRzlF","s11CoreMetrics8RecorderC6recordyyxSzRzlF","s11CoreMetrics8RecorderC7destroyyyF","sSB","sSQ","sSQsE2neoiySbx_xtFZ","sSS","sSb","sSd","sSz","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss5Int64V","ss6UInt64V"],"vertices":[{"p":["MetricsFactory"],"f":[["protocol",12],[" ",17],["MetricsFactory",7]],"s":[["protocol",12],[" ",17],["MetricsFactory",7]],"d":"The `MetricsFactory` is the bridge between the `MetricsSystem` and the metrics backend implementation.\n`MetricsFactory`'s role is to initialize concrete implementations of the various metric types:\n* `Counter` -> `CounterHandler`\n* `FloatingPointCounter` -> `FloatingPointCounterHandler`\n* `Recorder` -> `RecorderHandler`\n* `Timer` -> `TimerHandler`\n\n- warning: This type is an implementation detail and should not be used directly, unless implementing your own metrics backend.\n           To use the SwiftMetrics API, please refer to the documentation of `MetricsSystem`.\n\n# Destroying metrics\n\nSince _some_ metrics implementations may need to allocate (potentially \"heavy\") resources for metrics, destroying\nmetrics offers a signal to libraries when a metric is \"known to never be updated again.\"\n\nWhile many metrics are bound to the entire lifetime of an application and thus never need to be destroyed eagerly,\nsome metrics have well defined unique life-cycles, and it may be beneficial to release any resources held by them\nmore eagerly than awaiting the application's termination. In such cases, a library or application should invoke\na metric's appropriate `destroy()` method, which in turn results in the corresponding handler that it is backed by\nto be passed to `destroyCounter(handler:)`, `destroyRecorder(handler:)` or `destroyTimer(handler:)` where the factory\ncan decide to free any corresponding resources.\n\nWhile some libraries may not need to implement this destroying as they may be stateless or similar,\nlibraries using the metrics API should always assume a library WILL make use of this signal, and shall not\nneglect calling these methods when appropriate."},{"p":["TimerHandler"],"f":[["protocol",12],[" ",17],["TimerHandler",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["TimerHandler",7]],"d":"A `TimerHandler` represents a backend implementation of a `Timer`.\n\nThis type is an implementation detail and should not be used directly, unless implementing your own metrics backend.\nTo use the SwiftMetrics API, please refer to the documentation of `Timer`.\n\n# Implementation requirements\n\nTo implement your own `TimerHandler` you should respect a few requirements that are necessary so applications work\nas expected regardless of the selected `TimerHandler` implementation.\n\n- The `TimerHandler` must be a `class`."},{"p":["CounterHandler"],"f":[["protocol",12],[" ",17],["CounterHandler",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["CounterHandler",7]],"d":"A `CounterHandler` represents a backend implementation of a `Counter`.\n\nThis type is an implementation detail and should not be used directly, unless implementing your own metrics backend.\nTo use the SwiftMetrics API, please refer to the documentation of `Counter`.\n\n# Implementation requirements\n\nTo implement your own `CounterHandler` you should respect a few requirements that are necessary so applications work\nas expected regardless of the selected `CounterHandler` implementation.\n\n- The `CounterHandler` must be a `class`."},{"p":["RecorderHandler"],"f":[["protocol",12],[" ",17],["RecorderHandler",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["RecorderHandler",7]],"d":"A `RecorderHandler` represents a backend implementation of a `Recorder`.\n\nThis type is an implementation detail and should not be used directly, unless implementing your own metrics backend.\nTo use the SwiftMetrics API, please refer to the documentation of `Recorder`.\n\n# Implementation requirements\n\nTo implement your own `RecorderHandler` you should respect a few requirements that are necessary so applications work\nas expected regardless of the selected `RecorderHandler` implementation.\n\n- The `RecorderHandler` must be a `class`."},{"p":["FloatingPointCounterHandler"],"f":[["protocol",12],[" ",17],["FloatingPointCounterHandler",7],[" : AnyObject",17]],"s":[["protocol",12],[" ",17],["FloatingPointCounterHandler",7]],"d":"A `FloatingPointCounterHandler` represents a backend implementation of a `FloatingPointCounter`.\n\nThis type is an implementation detail and should not be used directly, unless implementing your own metrics backend.\nTo use the SwiftMetrics API, please refer to the documentation of `FloatingPointCounter`.\n\n# Implementation requirements\n\nTo implement your own `FloatingPointCounterHandler` you should respect a few requirements that are necessary so applications work\nas expected regardless of the selected `FloatingPointCounterHandler` implementation.\n\n- The `FloatingPointCounterHandler` must be a `class`."},{"p":["MetricsSystem"],"f":[["enum",12],[" ",17],["MetricsSystem",7]],"s":[["enum",12],[" ",17],["MetricsSystem",7]],"d":"The `MetricsSystem` is a global facility where the default metrics backend implementation (`MetricsFactory`) can be\nconfigured. `MetricsSystem` is set up just once in a given program to set up the desired metrics backend\nimplementation."},{"p":["TimeUnit"],"f":[["struct",12],[" ",17],["TimeUnit",7]],"s":[["struct",12],[" ",17],["TimeUnit",7]]},{"p":["MultiplexMetricsHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["MultiplexMetricsHandler",7]],"s":[["class",12],[" ",17],["MultiplexMetricsHandler",7]],"d":"A pseudo-metrics handler that can be used to send messages to multiple other metrics handlers."},{"p":["NOOPMetricsHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NOOPMetricsHandler",7]],"s":[["class",12],[" ",17],["NOOPMetricsHandler",7]],"d":"Ships with the metrics module, used for initial bootstrapping."},{"p":["FloatingPointCounter"],"f":[["class",12],[" ",17],["FloatingPointCounter",7]],"s":[["class",12],[" ",17],["FloatingPointCounter",7]],"d":"A FloatingPointCounter is a cumulative metric that represents a single monotonically increasing FloatingPointCounter whose value can only increase or be reset to zero.\nFor example, you can use a FloatingPointCounter to represent the number of requests served, tasks completed, or errors.\nFloatingPointCounter is not supported by all metrics backends, however a default implementation is provided which accumulates floating point values and records increments to a standard Counter after crossing integer boundaries.\n\nThis is the user-facing FloatingPointCounter API.\n\nIts behavior depends on the `FloatingCounterHandler` implementation."},{"p":["Gauge"],"f":[["class",12],[" ",17],["Gauge",7]],"s":[["class",12],[" ",17],["Gauge",7]],"d":"A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.\nGauges are typically used for measured values like temperatures or current memory usage, but also \"counts\" that can go up and down, like the number of active threads.\nGauges are modeled as `Recorder` with a sample size of 1 and that does not perform any aggregation."},{"p":["Timer"],"f":[["class",12],[" ",17],["Timer",7]],"s":[["class",12],[" ",17],["Timer",7]],"d":"A timer collects observations within a time window (usually things like request durations) and provides aggregated information about the data sample,\nfor example, min, max and various quantiles. It is similar to a `Recorder` but specialized for values that represent durations.\n\nThis is the user-facing Timer API.\n\nIts behavior depends on the `TimerHandler` implementation."},{"p":["Counter"],"f":[["class",12],[" ",17],["Counter",7]],"s":[["class",12],[" ",17],["Counter",7]],"d":"A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero.\nFor example, you can use a counter to represent the number of requests served, tasks completed, or errors.\n\nThis is the user-facing Counter API.\n\nIts behavior depends on the `CounterHandler` implementation."},{"p":["Recorder"],"f":[["class",12],[" ",17],["Recorder",7]],"s":[["class",12],[" ",17],["Recorder",7]],"d":"A recorder collects observations within a time window (usually things like response sizes) and *can* provide aggregated information about the data sample, for example, count, sum, min, max and various quantiles.\n\nThis is the user-facing Recorder API.\n\nIts behavior depends on the `RecorderHandler` implementation."},{"p":["MultiplexMetricsHandler","init(factories:)"],"f":[["init",10],["(",17],["factories",1],[": [",17],["MetricsFactory",18,0],["])",17]],"s":[["init",10],["(",17],["factories",1],[": [",17],["MetricsFactory",18],["])",17]]},{"p":["FloatingPointCounter","init(label:dimensions:handler:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["handler",1],[": ",17],["FloatingPointCounterHandler",18,4],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["handler",1],[": ",17],["FloatingPointCounterHandler",18],[")",17]],"d":"Alternative way to create a new `FloatingPointCounter`, while providing an explicit `FloatingPointCounterHandler`.\n\n- warning: This initializer provides an escape hatch for situations where one must use a custom factory instead of the global one.\n           We do not expect this API to be used in normal circumstances, so if you find yourself using it make sure it's for a good reason.\n\n- SeeAlso: Use `init(label:dimensions:)` to create `FloatingPointCounter` instances using the configured metrics backend.\n\n- parameters:\n    - label: The label for the `FloatingPointCounter`.\n    - dimensions: The dimensions for the `FloatingPointCounter`.\n    - handler: The custom backend."},{"p":["FloatingPointCounter","init(label:dimensions:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [])",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")])",17]],"d":"Create a new `FloatingPointCounter`.\n\n- parameters:\n    - label: The label for the `FloatingPointCounter`.\n    - dimensions: The dimensions for the `FloatingPointCounter`."},{"p":["Gauge","init(label:dimensions:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [])",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")])",17]],"d":"Create a new `Gauge`.\n\n- parameters:\n    - label: The label for the `Gauge`.\n    - dimensions: The dimensions for the `Gauge`."},{"p":["Timer","init(label:dimensions:preferredDisplayUnit:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [], ",17],["preferredDisplayUnit",1],[" ",17],["displayUnit",2],[": ",17],["TimeUnit",18,6],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["preferredDisplayUnit",1],[": ",17],["TimeUnit",18],[")",17]],"d":"Create a new `Timer`.\n\n- parameters:\n    - label: The label for the `Timer`.\n    - dimensions: The dimensions for the `Timer`.\n    - displayUnit: A hint to the backend responsible for presenting the data of the preferred display unit. This is not guaranteed to be supported by all backends."},{"p":["Timer","init(label:dimensions:handler:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["handler",1],[": ",17],["TimerHandler",18,1],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["handler",1],[": ",17],["TimerHandler",18],[")",17]],"d":"Alternative way to create a new `Timer`, while providing an explicit `TimerHandler`.\n\n- warning: This initializer provides an escape hatch for situations where one must use a custom factory instead of the global one.\n           We do not expect this API to be used in normal circumstances, so if you find yourself using it make sure it's for a good reason.\n\n- SeeAlso: Use `init(label:dimensions:)` to create `Recorder` instances using the configured metrics backend.\n\n- parameters:\n    - label: The label for the `Timer`.\n    - dimensions: The dimensions for the `Timer`.\n    - handler: The custom backend."},{"p":["Timer","init(label:dimensions:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [])",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")])",17]],"d":"Create a new `Timer`.\n\n- parameters:\n    - label: The label for the `Timer`.\n    - dimensions: The dimensions for the `Timer`."},{"p":["Counter","init(label:dimensions:handler:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["handler",1],[": ",17],["CounterHandler",18,2],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["handler",1],[": ",17],["CounterHandler",18],[")",17]],"d":"Alternative way to create a new `Counter`, while providing an explicit `CounterHandler`.\n\n- warning: This initializer provides an escape hatch for situations where one must use a custom factory instead of the global one.\n           We do not expect this API to be used in normal circumstances, so if you find yourself using it make sure it's for a good reason.\n\n- SeeAlso: Use `init(label:dimensions:)` to create `Counter` instances using the configured metrics backend.\n\n- parameters:\n    - label: The label for the `Counter`.\n    - dimensions: The dimensions for the `Counter`.\n    - handler: The custom backend."},{"p":["Counter","init(label:dimensions:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [])",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")])",17]],"d":"Create a new `Counter`.\n\n- parameters:\n    - label: The label for the `Counter`.\n    - dimensions: The dimensions for the `Counter`."},{"p":["Recorder","init(label:dimensions:aggregate:handler:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["aggregate",1],[": ",17],["Bool",18,115],[", ",17],["handler",1],[": ",17],["RecorderHandler",18,3],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["aggregate",1],[": ",17],["Bool",18],[", ",17],["handler",1],[": ",17],["RecorderHandler",18],[")",17]],"d":"Alternative way to create a new `Recorder`, while providing an explicit `RecorderHandler`.\n\n- warning: This initializer provides an escape hatch for situations where one must use a custom factory instead of the global one.\n           We do not expect this API to be used in normal circumstances, so if you find yourself using it make sure it's for a good reason.\n\n- SeeAlso: Use `init(label:dimensions:)` to create `Recorder` instances using the configured metrics backend.\n\n- parameters:\n    - label: The label for the `Recorder`.\n    - dimensions: The dimensions for the `Recorder`.\n    - handler: The custom backend."},{"p":["Recorder","init(label:dimensions:aggregate:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")] = [], ",17],["aggregate",1],[": ",17],["Bool",18,115],[" = true)",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["aggregate",1],[": ",17],["Bool",18],[")",17]],"d":"Create a new `Recorder`.\n\n- parameters:\n    - label: The label for the `Recorder`.\n    - dimensions: The dimensions for the `Recorder`."},{"p":["MetricsSystem","factory"],"f":[["static",12],[" ",17],["var",12],[" ",17],["factory",7],[": ",17],["MetricsFactory",18,0],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["factory",7],[": ",17],["MetricsFactory",18]],"d":"Returns a reference to the configured factory."},{"p":["NOOPMetricsHandler","instance"],"f":[["static",12],[" ",17],["let",12],[" ",17],["instance",7],[": ",17],["NOOPMetricsHandler",18,8]],"s":[["static",12],[" ",17],["let",12],[" ",17],["instance",7],[": ",17],["NOOPMetricsHandler",18]]},{"p":["TimeUnit","nanoseconds"],"f":[["static",12],[" ",17],["let",12],[" ",17],["nanoseconds",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["nanoseconds",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","microseconds"],"f":[["static",12],[" ",17],["let",12],[" ",17],["microseconds",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["microseconds",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","milliseconds"],"f":[["static",12],[" ",17],["let",12],[" ",17],["milliseconds",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["milliseconds",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","days"],"f":[["static",12],[" ",17],["let",12],[" ",17],["days",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["days",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","hours"],"f":[["static",12],[" ",17],["let",12],[" ",17],["hours",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["hours",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","minutes"],"f":[["static",12],[" ",17],["let",12],[" ",17],["minutes",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["minutes",7],[": ",17],["TimeUnit",18]]},{"p":["TimeUnit","seconds"],"f":[["static",12],[" ",17],["let",12],[" ",17],["seconds",7],[": ",17],["TimeUnit",18,6]],"s":[["static",12],[" ",17],["let",12],[" ",17],["seconds",7],[": ",17],["TimeUnit",18]]},{"p":["FloatingPointCounter","dimensions"],"f":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]",17]],"s":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18],[", ",17],["String",18],[")]",17]]},{"p":["FloatingPointCounter","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,114],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["FloatingPointCounter","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,114]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18]]},{"p":["Timer","dimensions"],"f":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]",17]],"s":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18],[", ",17],["String",18],[")]",17]]},{"p":["Timer","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,114],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["Timer","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,114]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18]]},{"p":["Counter","dimensions"],"f":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]",17]],"s":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18],[", ",17],["String",18],[")]",17]]},{"p":["Counter","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,114],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["Counter","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,114]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18]]},{"p":["Recorder","dimensions"],"f":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]",17]],"s":[["let",12],[" ",17],["dimensions",7],[": [(",17],["String",18],[", ",17],["String",18],[")]",17]]},{"p":["Recorder","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,114],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["Recorder","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,114]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18]]},{"p":["Recorder","aggregate"],"f":[["let",12],[" ",17],["aggregate",7],[": ",17],["Bool",18,115]],"s":[["let",12],[" ",17],["aggregate",7],[": ",17],["Bool",18]]},{"p":["TimeUnit","scaleFromNanoseconds"],"f":[["let",12],[" ",17],["scaleFromNanoseconds",7],[": ",17],["UInt64",18,122]],"s":[["let",12],[" ",17],["scaleFromNanoseconds",7],[": ",17],["UInt64",18]]},{"p":["MetricsSystem","withWriterLock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["withWriterLock",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": () ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["withWriterLock",7],["<",17],["T",0],[">(() ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Acquire a writer lock for the duration of the given block.\n\n- Parameter body: The block to execute while holding the lock.\n- Returns: The value returned by the block."},{"p":["MetricsSystem","bootstrap(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["bootstrap",7],["(",17],["_",1],[" ",17],["factory",2],[": ",17],["MetricsFactory",18,0],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["bootstrap",7],["(",17],["MetricsFactory",18],[")",17]],"d":"`bootstrap` is an one-time configuration function which globally selects the desired metrics backend\nimplementation. `bootstrap` can be called at maximum once in any given program, calling it more than once will\nlead to undefined behaviour, most likely a crash.\n\n- parameters:\n    - factory: A factory that given an identifier produces instances of metrics handlers such as `CounterHandler`, `RecorderHandler` and `TimerHandler`."},{"p":["MultiplexMetricsHandler","makeCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["CounterHandler",18,2]],"s":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["CounterHandler",18]]},{"p":["MultiplexMetricsHandler","destroyTimer(_:)"],"f":[["func",12],[" ",17],["destroyTimer",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["TimerHandler",18,1],[")",17]],"s":[["func",12],[" ",17],["destroyTimer",7],["(",17],["TimerHandler",18],[")",17]]},{"p":["MultiplexMetricsHandler","makeRecorder(label:dimensions:aggregate:)"],"f":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["aggregate",1],[": ",17],["Bool",18,115],[") -> ",17],["RecorderHandler",18,3]],"s":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["aggregate",1],[": ",17],["Bool",18],[") -> ",17],["RecorderHandler",18]]},{"p":["MultiplexMetricsHandler","destroyCounter(_:)"],"f":[["func",12],[" ",17],["destroyCounter",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["CounterHandler",18,2],[")",17]],"s":[["func",12],[" ",17],["destroyCounter",7],["(",17],["CounterHandler",18],[")",17]]},{"p":["MultiplexMetricsHandler","destroyRecorder(_:)"],"f":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["RecorderHandler",18,3],[")",17]],"s":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["RecorderHandler",18],[")",17]]},{"p":["MultiplexMetricsHandler","makeFloatingPointCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["FloatingPointCounterHandler",18,4]],"s":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["FloatingPointCounterHandler",18]]},{"p":["MultiplexMetricsHandler","destroyFloatingPointCounter(_:)"],"f":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["FloatingPointCounterHandler",18,4],[")",17]],"s":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["FloatingPointCounterHandler",18],[")",17]]},{"p":["MultiplexMetricsHandler","makeTimer(label:dimensions:)"],"f":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["TimerHandler",18,1]],"s":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["TimerHandler",18]]},{"p":["MetricsFactory","makeCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["CounterHandler",18,2]],"s":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["CounterHandler",18]],"d":"Create a backing `CounterHandler`.\n\n- parameters:\n    - label: The label for the `CounterHandler`.\n    - dimensions: The dimensions for the `CounterHandler`."},{"p":["MetricsFactory","destroyTimer(_:)"],"f":[["func",12],[" ",17],["destroyTimer",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["TimerHandler",18,1],[")",17]],"s":[["func",12],[" ",17],["destroyTimer",7],["(",17],["TimerHandler",18],[")",17]],"d":"Invoked when the corresponding `Timer`'s `destroy()` function is invoked.\nUpon receiving this signal the factory may eagerly release any resources related to this timer.\n\n- parameters:\n    - handler: The handler to be destroyed."},{"p":["MetricsFactory","makeRecorder(label:dimensions:aggregate:)"],"f":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["aggregate",1],[": ",17],["Bool",18,115],[") -> ",17],["RecorderHandler",18,3]],"s":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["aggregate",1],[": ",17],["Bool",18],[") -> ",17],["RecorderHandler",18]],"d":"Create a backing `RecorderHandler`.\n\n- parameters:\n    - label: The label for the `RecorderHandler`.\n    - dimensions: The dimensions for the `RecorderHandler`.\n    - aggregate: Is data aggregation expected."},{"p":["MetricsFactory","destroyCounter(_:)"],"f":[["func",12],[" ",17],["destroyCounter",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["CounterHandler",18,2],[")",17]],"s":[["func",12],[" ",17],["destroyCounter",7],["(",17],["CounterHandler",18],[")",17]],"d":"Invoked when the corresponding `Counter`'s `destroy()` function is invoked.\nUpon receiving this signal the factory may eagerly release any resources related to this counter.\n\n- parameters:\n    - handler: The handler to be destroyed."},{"p":["MetricsFactory","destroyRecorder(_:)"],"f":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["RecorderHandler",18,3],[")",17]],"s":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["RecorderHandler",18],[")",17]],"d":"Invoked when the corresponding `Recorder`'s `destroy()` function is invoked.\nUpon receiving this signal the factory may eagerly release any resources related to this recorder.\n\n- parameters:\n    - handler: The handler to be destroyed."},{"p":["MetricsFactory","makeFloatingPointCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["FloatingPointCounterHandler",18,4]],"s":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["FloatingPointCounterHandler",18]],"d":"Create a backing `FloatingPointCounterHandler`.\n\n- parameters:\n    - label: The label for the `FloatingPointCounterHandler`.\n    - dimensions: The dimensions for the `FloatingPointCounterHandler`."},{"p":["MetricsFactory","destroyFloatingPointCounter(_:)"],"f":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["FloatingPointCounterHandler",18,4],[")",17]],"s":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["FloatingPointCounterHandler",18],[")",17]],"d":"Invoked when the corresponding `FloatingPointCounter`'s `destroy()` function is invoked.\nUpon receiving this signal the factory may eagerly release any resources related to this counter.\n\n- parameters:\n    - handler: The handler to be destroyed."},{"p":["MetricsFactory","makeTimer(label:dimensions:)"],"f":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["TimerHandler",18,1]],"s":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["TimerHandler",18]],"d":"Create a backing `TimerHandler`.\n\n- parameters:\n    - label: The label for the `TimerHandler`.\n    - dimensions: The dimensions for the `TimerHandler`."},{"p":["MetricsFactory","makeFloatingPointCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["FloatingPointCounterHandler",18,4]],"s":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["FloatingPointCounterHandler",18]],"d":"Create a default backing `FloatingPointCounterHandler` for backends which do not naively support floating point counters.\n\nThe created FloatingPointCounterHandler is a wrapper around a backend's CounterHandler which accumulates floating point values and records increments to an underlying CounterHandler after crossing integer boundaries.\n\n- parameters:\n    - label: The label for the `FloatingPointCounterHandler`.\n    - dimensions: The dimensions for the `FloatingPointCounterHandler`."},{"p":["MetricsFactory","destroyFloatingPointCounter(_:)"],"f":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["_",1],[" ",17],["handler",2],[": ",17],["FloatingPointCounterHandler",18,4],[")",17]],"s":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["FloatingPointCounterHandler",18],[")",17]],"d":"Invoked when the corresponding `FloatingPointCounter`'s `destroy()` function is invoked.\nUpon receiving this signal the factory may eagerly release any resources related to this counter.\n\n`destroyFloatingPointCounter` must be implemented if `makeFloatingPointCounter` is implemented.\n\n- parameters:\n    - handler: The handler to be destroyed."},{"p":["TimerHandler","preferDisplayUnit(_:)"],"f":[["func",12],[" ",17],["preferDisplayUnit",7],["(",17],["_",1],[" ",17],["unit",2],[": ",17],["TimeUnit",18,6],[")",17]],"s":[["func",12],[" ",17],["preferDisplayUnit",7],["(",17],["TimeUnit",18],[")",17]],"d":"Set the preferred display unit for this TimerHandler.\n\n- parameters:\n    - unit: A hint to the backend responsible for presenting the data of the preferred display unit. This is not guaranteed to be supported by all backends."},{"p":["TimerHandler","recordNanoseconds(_:)"],"f":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["_",1],[" ",17],["duration",2],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["Int64",18],[")",17]],"d":"Record a duration in nanoseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["TimerHandler","preferDisplayUnit(_:)"],"f":[["func",12],[" ",17],["preferDisplayUnit",7],["(",17],["_",1],[": ",17],["TimeUnit",18,6],[")",17]],"s":[["func",12],[" ",17],["preferDisplayUnit",7],["(",17],["TimeUnit",18],[")",17]]},{"p":["CounterHandler","reset()"],"f":[["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"d":"Reset the counter back to zero."},{"p":["CounterHandler","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Int64",18],[")",17]],"d":"Increment the counter.\n\n- parameters:\n    - by: Amount to increment by."},{"p":["RecorderHandler","record(_:)"],"f":[["func",12],[" ",17],["record",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Double",18,116],[")",17]],"s":[["func",12],[" ",17],["record",7],["(",17],["Double",18],[")",17]],"d":"Record a value.\n\n- parameters:\n    - value: Value to record."},{"p":["RecorderHandler","record(_:)"],"f":[["func",12],[" ",17],["record",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["record",7],["(",17],["Int64",18],[")",17]],"d":"Record a value.\n\n- parameters:\n    - value: Value to record."},{"p":["NOOPMetricsHandler","makeCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["CounterHandler",18,2]],"s":[["func",12],[" ",17],["makeCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["CounterHandler",18]]},{"p":["NOOPMetricsHandler","destroyTimer(_:)"],"f":[["func",12],[" ",17],["destroyTimer",7],["(",17],["_",1],[": ",17],["TimerHandler",18,1],[")",17]],"s":[["func",12],[" ",17],["destroyTimer",7],["(",17],["TimerHandler",18],[")",17]]},{"p":["NOOPMetricsHandler","makeRecorder(label:dimensions:aggregate:)"],"f":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")], ",17],["aggregate",1],[": ",17],["Bool",18,115],[") -> ",17],["RecorderHandler",18,3]],"s":[["func",12],[" ",17],["makeRecorder",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")], ",17],["aggregate",1],[": ",17],["Bool",18],[") -> ",17],["RecorderHandler",18]]},{"p":["NOOPMetricsHandler","destroyCounter(_:)"],"f":[["func",12],[" ",17],["destroyCounter",7],["(",17],["_",1],[": ",17],["CounterHandler",18,2],[")",17]],"s":[["func",12],[" ",17],["destroyCounter",7],["(",17],["CounterHandler",18],[")",17]]},{"p":["NOOPMetricsHandler","destroyRecorder(_:)"],"f":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["_",1],[": ",17],["RecorderHandler",18,3],[")",17]],"s":[["func",12],[" ",17],["destroyRecorder",7],["(",17],["RecorderHandler",18],[")",17]]},{"p":["NOOPMetricsHandler","recordNanoseconds(_:)"],"f":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["_",1],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["Int64",18],[")",17]]},{"p":["NOOPMetricsHandler","makeFloatingPointCounter(label:dimensions:)"],"f":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["FloatingPointCounterHandler",18,4]],"s":[["func",12],[" ",17],["makeFloatingPointCounter",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["FloatingPointCounterHandler",18]]},{"p":["NOOPMetricsHandler","destroyFloatingPointCounter(_:)"],"f":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["_",1],[": ",17],["FloatingPointCounterHandler",18,4],[")",17]],"s":[["func",12],[" ",17],["destroyFloatingPointCounter",7],["(",17],["FloatingPointCounterHandler",18],[")",17]]},{"p":["NOOPMetricsHandler","reset()"],"f":[["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]]},{"p":["NOOPMetricsHandler","record(_:)"],"f":[["func",12],[" ",17],["record",7],["(",17],["_",1],[": ",17],["Double",18,116],[")",17]],"s":[["func",12],[" ",17],["record",7],["(",17],["Double",18],[")",17]]},{"p":["NOOPMetricsHandler","record(_:)"],"f":[["func",12],[" ",17],["record",7],["(",17],["_",1],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["record",7],["(",17],["Int64",18],[")",17]]},{"p":["NOOPMetricsHandler","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Double",18,116],[")",17]],"s":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Double",18],[")",17]]},{"p":["NOOPMetricsHandler","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Int64",18],[")",17]]},{"p":["NOOPMetricsHandler","makeTimer(label:dimensions:)"],"f":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18,114],[", ",17],["dimensions",1],[": [(",17],["String",18,114],[", ",17],["String",18,114],[")]) -> ",17],["TimerHandler",18,1]],"s":[["func",12],[" ",17],["makeTimer",7],["(",17],["label",1],[": ",17],["String",18],[", ",17],["dimensions",1],[": [(",17],["String",18],[", ",17],["String",18],[")]) -> ",17],["TimerHandler",18]]},{"p":["FloatingPointCounter","reset()"],"f":[["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"d":"Reset the FloatingPointCounter back to zero."},{"p":["FloatingPointCounter","destroy()"],"f":[["func",12],[" ",17],["destroy",7],["()",17]],"s":[["func",12],[" ",17],["destroy",7],["()",17]],"d":"Signal the underlying metrics library that this FloatingPointCounter will never be updated again.\nIn response the library MAY decide to eagerly release any resources held by this `FloatingPointCounter`."},{"p":["FloatingPointCounter","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["<",17],["DataType",0],[">(",17],["by",1],[" ",17],["amount",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryFloatingPoint",18,111]],"s":[["func",12],[" ",17],["increment",7],["<",17],["DataType",0],[">(",17],["by",1],[": ",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryFloatingPoint",111]],"g":[["DataType",0,0]],"d":"Increment the FloatingPointCounter.\n\n- parameters:\n    - by: Amount to increment by."},{"p":["FloatingPointCounter","increment()"],"f":[["func",12],[" ",17],["increment",7],["()",17]],"s":[["func",12],[" ",17],["increment",7],["()",17]],"d":"Increment the FloatingPointCounter by one."},{"p":["FloatingPointCounterHandler","reset()"],"f":[["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"d":"Reset the counter back to zero."},{"p":["FloatingPointCounterHandler","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Double",18,116],[")",17]],"s":[["func",12],[" ",17],["increment",7],["(",17],["by",1],[": ",17],["Double",18],[")",17]],"d":"Increment the counter.\n\n- parameters:\n    - by: Amount to increment by."},{"p":["Timer","recordSeconds(_:)"],"f":[["func",12],[" ",17],["recordSeconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryFloatingPoint",18,111]],"s":[["func",12],[" ",17],["recordSeconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryFloatingPoint",111]],"g":[["DataType",0,0]],"d":"Record a duration in seconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordSeconds(_:)"],"f":[["func",12],[" ",17],["recordSeconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["recordSeconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Record a duration in seconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordNanoseconds(_:)"],"f":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["_",1],[" ",17],["duration",2],[": ",17],["Int64",18,121],[")",17]],"s":[["func",12],[" ",17],["recordNanoseconds",7],["(",17],["Int64",18],[")",17]],"d":"Record a duration in nanoseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordNanoseconds(_:)"],"f":[["func",12],[" ",17],["recordNanoseconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["recordNanoseconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Record a duration in nanoseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordMicroseconds(_:)"],"f":[["func",12],[" ",17],["recordMicroseconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryFloatingPoint",18,111]],"s":[["func",12],[" ",17],["recordMicroseconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryFloatingPoint",111]],"g":[["DataType",0,0]],"d":"Record a duration in microseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordMicroseconds(_:)"],"f":[["func",12],[" ",17],["recordMicroseconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["recordMicroseconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Record a duration in microseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordMilliseconds(_:)"],"f":[["func",12],[" ",17],["recordMilliseconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryFloatingPoint",18,111]],"s":[["func",12],[" ",17],["recordMilliseconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryFloatingPoint",111]],"g":[["DataType",0,0]],"d":"Record a duration in milliseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","recordMilliseconds(_:)"],"f":[["func",12],[" ",17],["recordMilliseconds",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["duration",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["recordMilliseconds",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Record a duration in milliseconds.\n\n- parameters:\n    - value: Duration to record."},{"p":["Timer","destroy()"],"f":[["func",12],[" ",17],["destroy",7],["()",17]],"s":[["func",12],[" ",17],["destroy",7],["()",17]],"d":"Signal the underlying metrics library that this timer will never be updated again.\nIn response the library MAY decide to eagerly release any resources held by this `Timer`."},{"p":["Counter","reset()"],"f":[["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"d":"Reset the counter back to zero."},{"p":["Counter","destroy()"],"f":[["func",12],[" ",17],["destroy",7],["()",17]],"s":[["func",12],[" ",17],["destroy",7],["()",17]],"d":"Signal the underlying metrics library that this counter will never be updated again.\nIn response the library MAY decide to eagerly release any resources held by this `Counter`."},{"p":["Counter","increment(by:)"],"f":[["func",12],[" ",17],["increment",7],["<",17],["DataType",0],[">(",17],["by",1],[" ",17],["amount",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["increment",7],["<",17],["DataType",0],[">(",17],["by",1],[": ",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Increment the counter.\n\n- parameters:\n    - by: Amount to increment by."},{"p":["Counter","increment()"],"f":[["func",12],[" ",17],["increment",7],["()",17]],"s":[["func",12],[" ",17],["increment",7],["()",17]],"d":"Increment the counter by one."},{"p":["Recorder","record(_:)"],"f":[["func",12],[" ",17],["record",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryFloatingPoint",18,111]],"s":[["func",12],[" ",17],["record",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryFloatingPoint",111]],"g":[["DataType",0,0]],"d":"Record a value.\n\nRecording a value is meant to have \"set\" semantics, rather than \"add\" semantics.\nThis means that the value of this `Recorder` will match the passed in value, rather than accumulate and sum the values up.\n\n- parameters:\n    - value: Value to record."},{"p":["Recorder","record(_:)"],"f":[["func",12],[" ",17],["record",7],["<",17],["DataType",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["DataType",18],[") ",17],["where",12],[" ",17],["DataType",18],[" : ",17],["BinaryInteger",18,117]],"s":[["func",12],[" ",17],["record",7],["<",17],["DataType",0],[">(",17],["DataType",18],[")",17]],"c":[["DataType",1,"BinaryInteger",117]],"g":[["DataType",0,0]],"d":"Record a value.\n\nRecording a value is meant to have \"set\" semantics, rather than \"add\" semantics.\nThis means that the value of this `Recorder` will match the passed in value, rather than accumulate and sum the values up.\n\n- parameters:\n    - value: Value to record."},{"p":["Recorder","destroy()"],"f":[["func",12],[" ",17],["destroy",7],["()",17]],"s":[["func",12],[" ",17],["destroy",7],["()",17]],"d":"Signal the underlying metrics library that this recorder will never be updated again.\nIn response the library MAY decide to eagerly release any resources held by this `Recorder`."}],"edges":{"conformer":[6,112,[],7,0,[],8,0,[],8,1,[],8,2,[],8,3,[],8,4,[],9,118,[],10,118,[],11,118,[],12,118,[],13,118,[]],"feature":[70,8,113,6,120,9,120,11,120,12,120,13],"member":[14,7,15,9,16,9,17,10,18,11,19,11,20,11,21,12,22,12,23,13,24,13,25,5,26,8,27,6,28,6,29,6,30,6,31,6,32,6,33,6,34,9,35,9,36,9,37,11,38,11,39,11,40,12,41,12,42,12,43,13,44,13,45,13,46,13,47,6,48,5,49,5,50,7,51,7,52,7,53,7,54,7,55,7,56,7,57,7,75,8,76,8,77,8,78,8,79,8,80,8,81,8,82,8,83,8,84,8,85,8,86,8,87,8,88,8,89,9,90,9,91,9,92,9,95,11,96,11,97,11,98,11,99,11,100,11,101,11,102,11,103,11,104,12,105,12,106,12,107,12,108,13,109,13,110,13],"subclass":[10,13],"requirement":[58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,68,1,69,1,71,2,72,2,73,3,74,3,93,4,94,4],"defaultImplementation":[66,63,67,64,70,68]},"hints":[35,119,38,119,41,119,44,119,50,58,51,59,52,60,53,61,54,62,55,63,56,64,57,65,70,68,75,58,76,59,77,60,78,61,79,62,80,69,81,63,82,64,83,71,84,73,85,74,86,94,87,72,88,65,113,113,120,120],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-metrics@2.3.1/.build/checkouts/swift-metrics/Sources/CoreMetrics/Metrics.swift","symbols":[22,23,22,30,16,105,41,13,12,44,15,42,45,15,40,58,11,21,69,16,106,75,16,107,81,16,104,87,15,41,98,23,16,106,16,90,118,13,9,121,15,36,122,15,34,135,11,15,146,16,91,152,16,92,158,16,89,164,15,35,175,16,24,183,9,110,193,13,13,196,15,45,197,15,43,198,15,46,211,11,23,226,16,109,238,16,108,244,15,44,252,13,10,258,23,17,263,14,6,275,15,47,284,22,27,285,22,28,286,22,29,287,22,33,288,22,32,289,22,31,290,22,30,299,16,20,310,16,18,319,9,103,330,13,11,333,15,39,334,15,37,347,11,19,358,16,97,367,16,98,376,16,100,392,16,99,401,16,102,417,16,101,426,16,96,442,16,95,448,15,38,456,12,5,465,23,48,475,23,49,491,22,25,523,16,0,529,9,58,536,9,63,544,9,60,551,9,65,558,9,61,565,9,64,572,9,62,579,9,59,655,16,66,666,16,67,682,16,2,687,9,72,690,9,71,704,16,4,709,9,94,712,9,93,726,16,3,731,9,74,736,9,73,750,16,1,755,9,69,761,9,68,765,16,70,773,19,7,775,11,14,779,16,50,783,16,55,787,16,52,791,16,57,795,16,53,801,16,56,807,16,54,813,16,51,877,19,8,878,22,26,882,16,75,886,16,81,890,16,77,894,16,88,898,16,78,899,16,82,900,16,79,901,16,76,903,16,87,904,16,86,905,16,83,906,16,85,907,16,84,908,16,80]}]}