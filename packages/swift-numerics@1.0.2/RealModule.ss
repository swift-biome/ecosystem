{"culture":"RealModule","dependencies":[],"extensions":[],"partitions":[{"namespace":"RealModule","communities":[{"community":"protocol","startIndex":0,"endIndex":4},{"community":"enum","startIndex":4,"endIndex":5},{"community":"property","startIndex":5,"endIndex":8},{"community":"type.method","startIndex":8,"endIndex":47},{"community":"type.op","startIndex":47,"endIndex":50}]},{"namespace":"Swift","communities":[{"community":"type.method","startIndex":50,"endIndex":163},{"community":"method","startIndex":163,"endIndex":166}]}],"identifiers":["s10RealModule0A0P","s10RealModule0A9FunctionsP","s10RealModule14AlgebraicFieldP","s10RealModule19ElementaryFunctionsP","s10RealModule9AugmentedO","s10RealModule0A0PAAE10reciprocalxSgvp","s10RealModule14AlgebraicFieldP10reciprocalxSgvp","s10RealModule14AlgebraicFieldPAAE10reciprocalxSgvp","s10RealModule0A0PAAE11cosMinusOneyxxFZ","s10RealModule0A0PAAE4sqrtyxxFZ","s10RealModule0A0PAAE5exp10yxxFZ","s10RealModule0A0PAAE9signGammays17FloatingPointSignOxFZ","s10RealModule0A9FunctionsP3erfyxxFZ","s10RealModule0A9FunctionsP4erfcyxxFZ","s10RealModule0A9FunctionsP4exp2yxxFZ","s10RealModule0A9FunctionsP4log2yxxFZ","s10RealModule0A9FunctionsP5atan21y1xxx_xtFZ","s10RealModule0A9FunctionsP5exp10yxxFZ","s10RealModule0A9FunctionsP5gammayxxFZ","s10RealModule0A9FunctionsP5hypotyxx_xtFZ","s10RealModule0A9FunctionsP5log10yxxFZ","s10RealModule0A9FunctionsP8logGammayxxFZ","s10RealModule0A9FunctionsP9signGammays17FloatingPointSignOxFZ","s10RealModule19ElementaryFunctionsP11expMinusOneyxxFZ","s10RealModule19ElementaryFunctionsP3cosyxxFZ","s10RealModule19ElementaryFunctionsP3expyxxFZ","s10RealModule19ElementaryFunctionsP3log7onePlusxx_tFZ","s10RealModule19ElementaryFunctionsP3logyxxFZ","s10RealModule19ElementaryFunctionsP3powyxx_SitFZ","s10RealModule19ElementaryFunctionsP3powyxx_xtFZ","s10RealModule19ElementaryFunctionsP3sinyxxFZ","s10RealModule19ElementaryFunctionsP3tanyxxFZ","s10RealModule19ElementaryFunctionsP4acosyxxFZ","s10RealModule19ElementaryFunctionsP4asinyxxFZ","s10RealModule19ElementaryFunctionsP4atanyxxFZ","s10RealModule19ElementaryFunctionsP4coshyxxFZ","s10RealModule19ElementaryFunctionsP4rootyxx_SitFZ","s10RealModule19ElementaryFunctionsP4sinhyxxFZ","s10RealModule19ElementaryFunctionsP4sqrtyxxFZ","s10RealModule19ElementaryFunctionsP4tanhyxxFZ","s10RealModule19ElementaryFunctionsP5acoshyxxFZ","s10RealModule19ElementaryFunctionsP5asinhyxxFZ","s10RealModule19ElementaryFunctionsP5atanhyxxFZ","s10RealModule9AugmentedO10fastTwoSumyx4head_x4tailtx_xtAA0A0RzlFZ","s10RealModule9AugmentedO10twoProdFMAyx4head_x4tailtx_xtAA0A0RzlFZ","s10RealModule9AugmentedO3sum5large5smallx4head_x4tailtx_xtAA0A0RzlFZ","s10RealModule9AugmentedO7productyx4head_x4tailtx_xtAA0A0RzlFZ","s10RealModule14AlgebraicFieldP1doiyxx_xtFZ","s10RealModule14AlgebraicFieldP2deoiyyxz_xtFZ","s10RealModule14AlgebraicFieldPAAE1doiyxx_xtFZ","sSd10RealModuleE11expMinusOneyS2dFZ","sSd10RealModuleE3cosyS2dFZ","sSd10RealModuleE3erfyS2dFZ","sSd10RealModuleE3expyS2dFZ","sSd10RealModuleE3log7onePlusS2d_tFZ","sSd10RealModuleE3logyS2dFZ","sSd10RealModuleE3powyS2d_SdtFZ","sSd10RealModuleE3powyS2d_SitFZ","sSd10RealModuleE3sinyS2dFZ","sSd10RealModuleE3tanyS2dFZ","sSd10RealModuleE4acosyS2dFZ","sSd10RealModuleE4asinyS2dFZ","sSd10RealModuleE4atanyS2dFZ","sSd10RealModuleE4coshyS2dFZ","sSd10RealModuleE4erfcyS2dFZ","sSd10RealModuleE4exp2yS2dFZ","sSd10RealModuleE4log2yS2dFZ","sSd10RealModuleE4rootyS2d_SitFZ","sSd10RealModuleE4sinhyS2dFZ","sSd10RealModuleE4tanhyS2dFZ","sSd10RealModuleE5acoshyS2dFZ","sSd10RealModuleE5asinhyS2dFZ","sSd10RealModuleE5atan21y1xS2d_SdtFZ","sSd10RealModuleE5atanhyS2dFZ","sSd10RealModuleE5gammayS2dFZ","sSd10RealModuleE5hypotyS2d_SdtFZ","sSd10RealModuleE5log10yS2dFZ","sSd10RealModuleE8logGammayS2dFZ","sSf10RealModuleE11expMinusOneyS2fFZ","sSf10RealModuleE3cosyS2fFZ","sSf10RealModuleE3erfyS2fFZ","sSf10RealModuleE3expyS2fFZ","sSf10RealModuleE3log7onePlusS2f_tFZ","sSf10RealModuleE3logyS2fFZ","sSf10RealModuleE3powyS2f_SftFZ","sSf10RealModuleE3powyS2f_SitFZ","sSf10RealModuleE3sinyS2fFZ","sSf10RealModuleE3tanyS2fFZ","sSf10RealModuleE4acosyS2fFZ","sSf10RealModuleE4asinyS2fFZ","sSf10RealModuleE4atanyS2fFZ","sSf10RealModuleE4coshyS2fFZ","sSf10RealModuleE4erfcyS2fFZ","sSf10RealModuleE4exp2yS2fFZ","sSf10RealModuleE4log2yS2fFZ","sSf10RealModuleE4rootyS2f_SitFZ","sSf10RealModuleE4sinhyS2fFZ","sSf10RealModuleE4tanhyS2fFZ","sSf10RealModuleE5acoshyS2fFZ","sSf10RealModuleE5asinhyS2fFZ","sSf10RealModuleE5atan21y1xS2f_SftFZ","sSf10RealModuleE5atanhyS2fFZ","sSf10RealModuleE5gammayS2fFZ","sSf10RealModuleE5hypotyS2f_SftFZ","sSf10RealModuleE5log10yS2fFZ","sSf10RealModuleE8logGammayS2fFZ","ss7Float16V10RealModuleE11expMinusOneyA2BFZ","ss7Float16V10RealModuleE3cosyA2BFZ","ss7Float16V10RealModuleE3erfyA2BFZ","ss7Float16V10RealModuleE3expyA2BFZ","ss7Float16V10RealModuleE3log7onePlusA2B_tFZ","ss7Float16V10RealModuleE3logyA2BFZ","ss7Float16V10RealModuleE3powyA2B_ABtFZ","ss7Float16V10RealModuleE3powyA2B_SitFZ","ss7Float16V10RealModuleE3sinyA2BFZ","ss7Float16V10RealModuleE3tanyA2BFZ","ss7Float16V10RealModuleE4acosyA2BFZ","ss7Float16V10RealModuleE4asinyA2BFZ","ss7Float16V10RealModuleE4atanyA2BFZ","ss7Float16V10RealModuleE4coshyA2BFZ","ss7Float16V10RealModuleE4erfcyA2BFZ","ss7Float16V10RealModuleE4exp2yA2BFZ","ss7Float16V10RealModuleE4log2yA2BFZ","ss7Float16V10RealModuleE4rootyA2B_SitFZ","ss7Float16V10RealModuleE4sinhyA2BFZ","ss7Float16V10RealModuleE4tanhyA2BFZ","ss7Float16V10RealModuleE5acoshyA2BFZ","ss7Float16V10RealModuleE5asinhyA2BFZ","ss7Float16V10RealModuleE5atan21y1xA2B_ABtFZ","ss7Float16V10RealModuleE5atanhyA2BFZ","ss7Float16V10RealModuleE5exp10yA2BFZ","ss7Float16V10RealModuleE5gammayA2BFZ","ss7Float16V10RealModuleE5hypotyA2B_ABtFZ","ss7Float16V10RealModuleE5log10yA2BFZ","ss7Float16V10RealModuleE8logGammayA2BFZ","ss7Float80V10RealModuleE11expMinusOneyA2BFZ","ss7Float80V10RealModuleE3cosyA2BFZ","ss7Float80V10RealModuleE3erfyA2BFZ","ss7Float80V10RealModuleE3expyA2BFZ","ss7Float80V10RealModuleE3log7onePlusA2B_tFZ","ss7Float80V10RealModuleE3logyA2BFZ","ss7Float80V10RealModuleE3powyA2B_ABtFZ","ss7Float80V10RealModuleE3powyA2B_SitFZ","ss7Float80V10RealModuleE3sinyA2BFZ","ss7Float80V10RealModuleE3tanyA2BFZ","ss7Float80V10RealModuleE4acosyA2BFZ","ss7Float80V10RealModuleE4asinyA2BFZ","ss7Float80V10RealModuleE4atanyA2BFZ","ss7Float80V10RealModuleE4coshyA2BFZ","ss7Float80V10RealModuleE4erfcyA2BFZ","ss7Float80V10RealModuleE4exp2yA2BFZ","ss7Float80V10RealModuleE4log2yA2BFZ","ss7Float80V10RealModuleE4rootyA2B_SitFZ","ss7Float80V10RealModuleE4sinhyA2BFZ","ss7Float80V10RealModuleE4tanhyA2BFZ","ss7Float80V10RealModuleE5acoshyA2BFZ","ss7Float80V10RealModuleE5asinhyA2BFZ","ss7Float80V10RealModuleE5atan21y1xA2B_ABtFZ","ss7Float80V10RealModuleE5atanhyA2BFZ","ss7Float80V10RealModuleE5gammayA2BFZ","ss7Float80V10RealModuleE5hypotyA2B_ABtFZ","ss7Float80V10RealModuleE5log10yA2BFZ","ss7Float80V10RealModuleE8logGammayA2BFZ","sSj10RealModuleSF9MagnitudeRpzrlE20isApproximatelyEqual2to17absoluteTolerance08relativeI0Sbx_A2CtF","sSj10RealModuleSF9MagnitudeRpzrlE20isApproximatelyEqual2to17relativeTolerance4normSbx_A2CxXEtF","ss18AdditiveArithmeticP10RealModuleE20isApproximatelyEqual2to17absoluteTolerance08relativeJ04normSbx_qd__qd__qd__xXEtSFRd__lF","sSF","sSH","sSL","sSQ","sSb","sSd","sSf","sSi","sSj","sSx","ss13SignedNumericP","ss17FloatingPointSignO","ss18AdditiveArithmeticP","ss27ExpressibleByIntegerLiteralP","ss7Float16V","ss7Float80V"],"vertices":[{"p":["Real"],"f":[["protocol",12],[" ",17],["Real",7],[" : ",17],["AlgebraicField",18,2],[", ",17],["RealFunctions",18,1],[", ",17],["FloatingPoint",18,166]],"s":[["protocol",12],[" ",17],["Real",7]],"d":"A type that models the real numbers.\n\nTypes conforming to this protocol provide the arithmetic and utility\noperations defined by the `FloatingPoint` protocol, and provide all of the\nmath functions defined by the `ElementaryFunctions` and `RealFunctions`\nprotocols. This protocol does not add any additional conformances itself,\nbut is very useful as a protocol against which to write generic code. For\nexample, we can naturally write a generic implementation of a sigmoid\nfunction:\n```\nfunc sigmoid<T: Real>(_ x: T) -> T {\n  return 1/(1 + .exp(-x))\n}\n```\nSee Also:\n-\n- `ElementaryFunctions`\n- `RealFunctions`\n- `AlgebraicField`"},{"p":["RealFunctions"],"f":[["protocol",12],[" ",17],["RealFunctions",7],[" : ",17],["ElementaryFunctions",18,3]],"s":[["protocol",12],[" ",17],["RealFunctions",7]]},{"p":["AlgebraicField"],"f":[["protocol",12],[" ",17],["AlgebraicField",7],[" : ",17],["SignedNumeric",18,176]],"s":[["protocol",12],[" ",17],["AlgebraicField",7]],"d":"A type modeling an algebraic [field]. Refines the `SignedNumeric` protocol,\nadding division.\n\nA field is a set on which addition, subtraction, multiplication, and\ndivision are defined, and behave basically like those operations on\nthe real numbers. More precisely, a field is a commutative group under\nits addition, the non-zero elements of the field form a commutative\ngroup under its multiplication, and the distributitve law holds.\n\nSome common examples of fields include:\n\n- the rational numbers\n- the real numbers\n- the complex numbers\n- the integers modulo a prime\n\nThe most familiar example of a thing that is *not* a field is the integers.\nThis may be surprising, since integers seem to have addition, subtraction,\nmultiplication and division. Why don't they form a field?\n\nBecause integer multiplication does not form a group; it's commutative and\nassociative, but integers do not have multiplicative inverses.\nI.e. if a is any integer other than 1 or -1, there is no integer b such\nthat a*b = 1. The existence of inverses is requried to form a field.\n\nIf a type `T` conforms to the `Real` protocol, then `T` and `Complex<T>`\nboth conform to `AlgebraicField`.\n\nSee Also:\n-\n- Real\n- SignedNumeric\n- Numeric\n- AdditiveArithmetic\n\n[field]: https://en.wikipedia.org/wiki/Field_(mathematics)"},{"p":["ElementaryFunctions"],"f":[["protocol",12],[" ",17],["ElementaryFunctions",7],[" : ",17],["AdditiveArithmetic",18,178]],"s":[["protocol",12],[" ",17],["ElementaryFunctions",7]],"d":"A type that has elementary functions available.\n\nAn [\"elementary function\"][elfn] is a function built up from powers, roots,\nexponentials, logarithms, trigonometric functions (sin, cos, tan) and\ntheir inverses, and the hyperbolic functions (sinh, cosh, tanh) and their\ninverses.\n\nConformance to this protocol means that all of these building blocks are\navailable as static functions on the type.\n\n```swift\nlet x: Float = 1\nlet y = Float.sin(x) // 0.84147096\n```\n\nThere are three broad families of functions defined by\n`ElementaryFunctions`:\n- Exponential, trigonometric, and hyperbolic functions:\n  `exp`, `expMinusOne`, `cos`, `sin`, `tan`, `cosh`, `sinh`, and `tanh`.\n- Logarithmic, inverse trigonometric, and inverse hyperbolic functions:\n  `log`, `log(onePlus:)`, `acos`, `asin`, `atan`, `acosh`, `asinh`, and\n  `atanh`.\n- Power and root functions:\n  `pow`, `sqrt`, and `root`.\n\n`ElementaryFunctions` conformance implies `AdditiveArithmetic`, so addition\nand subtraction and the `.zero` property are also available.\n\nThere are two other protocols that you are more likely to want to use\ndirectly:\n\n`RealFunctions` refines `ElementaryFunctions` and includes\nadditional functions specific to real number types.\n\n`Real` conforms to `RealFunctions` and `FloatingPoint`, and is the\nprotocol that you will want to use most often for generic code.\n\nSee Also:\n-\n- `RealFunctions`\n- `Real`\n\n[elfn]: http://en.wikipedia.org/wiki/Elementary_function"},{"p":["Augmented"],"f":[["enum",12],[" ",17],["Augmented",7]],"s":[["enum",12],[" ",17],["Augmented",7]],"d":"A namespace for \"augmented arithmetic\" operations for types conforming to\n`Real`.\n\nAugmented arithmetic refers to a family of algorithms that represent\nthe results of floating-point computations using multiple values such that\neither the error is minimized or the result is exact."},{"p":["Real","reciprocal"],"f":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["?",17]],"d":"The (approximate) reciprocal (multiplicative inverse) of this number,\nif it is representable.\n\nIf `x` if finite and nonzero, and `1/x` overflows or underflows,\nthen `x.reciprocal` is `nil`. Otherwise, `a.reciprocal` is `1/x`.\n\nIf `x.reciprocal` is non-nil, you may be able to replace division by `x`\nwith multiplication by this value. It is not advantageous to do this\nfor an isolated division unless it is a compile-time constant visible\nto the compiler, but if you are dividing many values by a single\ndenominator, this will often be a significant performance win.\n\nA typical use case looks something like this:\n```\nfunc divide<T: Real>(data: [T], by divisor: T) -> [T] {\n  // If divisor is well-scaled, multiply by reciprocal.\n  if let recip = divisor.reciprocal {\n    return data.map { $0 * recip }\n  }\n  // Fallback on using division.\n  return data.map { $0 / divisor }\n}\n```\n\nError Bounds:\n\nMultiplying by the reciprocal instead of dividing will slightly\nperturb results. For example `5.0 / 3` is 1.6666666666666667, but\n`5.0 * 3.reciprocal!` is 1.6666666666666665.\n\nThe error of a normal division is bounded by half an ulp of the\nresult; we can derive a quick error bound for multiplication by\nthe real reciprocal (when it exists) as follows (I will use circle\noperators to denote real-number arithmetic, and normal operators\nfor floating-point arithmetic):\n\n```\n  a * b.reciprocal! = a * (1/b)\n                    = a * (1 ⊘ b)(1 + δ₁)\n                    = (a ⊘ b)(1 + δ₁)(1 + δ₂)\n                    = (a ⊘ b)(1 + δ₁ + δ₂ + δ₁δ₂)\n```\n\nwhere `0 < δᵢ <= ulpOfOne/2`. This gives a roughly 1-ulp error,\nabout twice the error bound we get using division. For most\npurposes this is an acceptable error, but if you need to match\nresults obtained using division, you should not use this."},{"p":["AlgebraicField","reciprocal"],"f":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["?",17]],"d":"The (approximate) reciprocal (multiplicative inverse) of this number,\nif it is representable.\n\nIf self is zero and the type has no representation for infinity (as\nin a typical finite field implementation), or if a reciprocal would\noverflow or underflow such that it cannot be accurately represented,\nthe result is nil.\n\nNote that `.zero.reciprocal`, somewhat surprisingly, is *not* nil\nfor `Real` or `Complex` types, because these types have an\n`.infinity` value that acts as the reciprocal of `.zero`.\n\nIf `x.reciprocal` is non-nil, you may be able to replace division by `x`\nwith multiplication by this value. It is not advantageous to do this\nfor an isolated division unless it is a compile-time constant visible\nto the compiler, but if you are dividing many values by a single\ndenominator, this will often be a significant performance win.\n\nNote that this will slightly perturb results for some fields with\napproximate arithmetic, such as real types--using a normal division\nis generally more accurate--but no catastrophic loss of accuracy will\nresult. For fields with exact arithmetic, or for the Complex types,\nthe results are identical.\n\nA typical use case looks something like this:\n```\nfunc divide<T: AlgebraicField>(data: [T], by divisor: T) -> [T] {\n  // If divisor is well-scaled, multiply by reciprocal.\n  if let recip = divisor.reciprocal {\n    return data.map { $0 * recip }\n  }\n  // Fallback on using division.\n  return data.map { $0 / divisor }\n}\n```"},{"p":["AlgebraicField","reciprocal"],"f":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["reciprocal",7],[": ",17],["Self",18],["?",17]],"d":"Implementations should be *conservative* with the reciprocal property;\nit is OK to return `nil` even in cases where a reciprocal could be\nrepresented. For this reason, a default implementation that simply\nalways returns `nil` is correct, but conforming types should provide\na better implementation if possible."},{"p":["Real","cosMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosMinusOne",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"cos(x) - 1, computed in such a way as to maintain accuracy for small x.\n\nSee also:\n-\n- `ElementaryFunctions.expMinusOne()`"},{"p":["Real","sqrt(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sqrt",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sqrt",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"o":38},{"p":["Real","exp10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"o":17},{"p":["Real","signGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["signGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["FloatingPointSign",18,177]],"s":[["static",12],[" ",17],["func",12],[" ",17],["signGamma",7],["(",17],["Self",18],[") -> ",17],["FloatingPointSign",18]],"o":22},{"p":["RealFunctions","erf(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The error function evaluated at `x`.\n\nSee also:\n-\n- `erfc()`"},{"p":["RealFunctions","erfc(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The complimentary error function evaluated at `x`.\n\nSee also:\n-\n- `erf()`"},{"p":["RealFunctions","exp2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"2^x\n\nSee also:\n-\n- `exp()`\n- `expMinusOne()`\n- `exp10()`\n- `log2()`\n- `pow()`"},{"p":["RealFunctions","log2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The base-2 logarithm of `x`.\n\nSee also:\n-\n- `exp2()`\n- `log()`\n- `log(onePlus:)`\n- `log10()`"},{"p":["RealFunctions","atan2(y:x:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Self",18],[", ",17],["x",1],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Self",18],[", ",17],["x",1],[": ",17],["Self",18],[") -> ",17],["Self",18]],"d":"`atan(y/x)`, with sign selected according to the quadrant of `(x, y)`.\n\nSee also:\n-\n- `atan()`"},{"p":["RealFunctions","exp10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"10^x\n\nSee also:\n-\n- `exp()`\n- `expMinusOne()`\n- `exp2()`\n- `log10()`\n- `pow()`"},{"p":["RealFunctions","gamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The gamma function Γ(x).\n\nSee also:\n-\n- `logGamma()`\n- `signGamma()`"},{"p":["RealFunctions","hypot(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Self",18]],"d":"`sqrt(x*x + y*y)`, computed in a manner that avoids spurious overflow or\nunderflow."},{"p":["RealFunctions","log10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The base-10 logarithm of `x`.\n\nSee also:\n-\n- `exp10()`\n- `log()`\n- `log(onePlus:)`\n- `log2()`"},{"p":["RealFunctions","logGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The logarithm of the absolute value of the gamma function, log(|Γ(x)|).\n\nNot available on Windows targets.\n\nSee also:\n-\n- `gamma()`\n- `signGamma()`"},{"p":["RealFunctions","signGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["signGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["FloatingPointSign",18,177]],"s":[["static",12],[" ",17],["func",12],[" ",17],["signGamma",7],["(",17],["Self",18],[") -> ",17],["FloatingPointSign",18]],"d":"The sign of the gamma function, Γ(x).\n\nFor `x >= 0`, `signGamma(x)` is `.plus`. For negative `x`, `signGamma(x)`\nis `.plus` when `x` is an integer, and otherwise it is `.minus` whenever\n`trunc(x)` is even, and `.plus` when `trunc(x)` is odd.\n\nThis function is used together with `logGamma`, which computes the\nlogarithm of the absolute value of Γ(x), to recover the sign information.\n\nNot available on Windows targets.\n\nSee also:\n-\n- `gamma()`\n- `logGamma()`"},{"p":["ElementaryFunctions","expMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"exp(x) - 1, computed in such a way as to maintain accuracy for small x.\n\nWhen `x` is close to zero, the expression `.exp(x) - 1` suffers from\ncatastrophic cancellation and the result will not have full accuracy.\nThe `.expMinusOne(x)` function gives you a means to address this problem.\n\nAs an example, consider the expression `(x + 1)*exp(x) - 1`.  When `x`\nis smaller than `.ulpOfOne`, this expression evaluates to `0.0`, when it\nshould actually round to `2*x`. We can get a full-accuracy result by\nusing the following instead:\n```\nlet t = .expMinusOne(x)\nreturn x*(t+1) + t       // x*exp(x) + (exp(x)-1) = (x+1)*exp(x) - 1\n```\nThis re-written expression delivers an accurate result for all values\nof `x`, not just for small values.\n\nSee also:\n-\n- `exp()`\n- `exp2()` (for types conforming to `RealFunctions`)\n- `exp10()` (for types conforming to `RealFunctions`)"},{"p":["ElementaryFunctions","cos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [cosine][wiki] of `x`.\n\nFor real types, `x` may be interpreted as an angle measured in radians.\n\nSee also:\n-\n- `sin()`\n- `tan()`\n- `acos()`\n\n[wiki]: https://en.wikipedia.org/wiki/Cosine"},{"p":["ElementaryFunctions","exp(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [exponential function][wiki] e^x whose base `e` is the base of the\nnatural logarithm.\n\nSee also:\n-\n- `expMinusOne()`\n- `exp2()` (for types conforming to `RealFunctions`)\n- `exp10()` (for types conforming to `RealFunctions`)\n\n[wiki]: https://en.wikipedia.org/wiki/Exponential_function"},{"p":["ElementaryFunctions","log(onePlus:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[": ",17],["Self",18],[") -> ",17],["Self",18]],"d":"log(1 + x), computed in such a way as to maintain accuracy for small x.\n\nSee also:\n-\n- `log()`\n- `log2()` (for types conforming to `RealFunctions`)\n- `log10()` (for types conforming to `RealFunctions`)"},{"p":["ElementaryFunctions","log(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [natural logarithm][wiki] of `x`.\n\nSee also:\n-\n- `log(onePlus:)`\n- `log2()` (for types conforming to `RealFunctions`)\n- `log10()` (for types conforming to `RealFunctions`)\n\n[wiki]: https://en.wikipedia.org/wiki/Logarithm"},{"p":["ElementaryFunctions","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Self",18],[", ",17],["Int",18],[") -> ",17],["Self",18]],"d":"`x` raised to the nth power.\n\nSee also:\n-\n- `sqrt()`\n- `root()`\n"},{"p":["ElementaryFunctions","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Self",18]],"d":"exp(y * log(x)) computed with additional internal precision.\n\nSee also:\n-\n- `sqrt()`\n- `root()`\n"},{"p":["ElementaryFunctions","sin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [sine][wiki] of `x`.\n\nFor real types, `x` may be interpreted as an angle measured in radians.\n\nSee also:\n-\n- `cos()`\n- `tan()`\n- `asin()`\n\n[wiki]: https://en.wikipedia.org/wiki/Sine"},{"p":["ElementaryFunctions","tan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [tangent][wiki] of `x`.\n\nFor real types, `x` may be interpreted as an angle measured in radians.\n\nSee also:\n-\n- `cos()`\n- `sin()`\n- `atan()`\n- `atan2(y:x:)` (for types conforming to `RealFunctions`)\n```\n          sin(x)\ntan(x) = --------\n          cos(x)\n```\n[wiki]: https://en.wikipedia.org/wiki/Tangent"},{"p":["ElementaryFunctions","acos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [arccosine][wiki] (inverse cosine) of `x`.\n\nFor real types, the result may be interpreted as an angle measured in\nradians.\n```\ncos(acos(x)) ≅ x\n```\nSee also:\n-\n- `asin()`\n- `atan()`\n- `cos()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions"},{"p":["ElementaryFunctions","asin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [arcsine][wiki]  (inverse sine) of `x`.\n\nFor real types, the result may be interpreted as an angle measured in\nradians.\n```\nsin(asin(x)) ≅ x\n```\nSee also:\n-\n- `acos()`\n- `atan()`\n- `sin()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions"},{"p":["ElementaryFunctions","atan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [arctangent][wiki]  (inverse tangent) of `x`.\n\nFor real types, the result may be interpreted as an angle measured in\nradians.\n```\ntan(atan(x)) ≅ x\n```\nSee also:\n-\n- `acos()`\n- `asin()`\n- `atan2()` (for types conforming to `RealFunctions`)\n- `tan()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions"},{"p":["ElementaryFunctions","cosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [hyperbolic cosine][wiki] of `x`.\n```\n           e^x + e^-x\ncosh(x) = ------------\n               2\n```\n\nSee also:\n-\n- `sinh()`\n- `tanh()`\n- `acosh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Hyperbolic_function"},{"p":["ElementaryFunctions","root(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["Self",18],[", ",17],["Int",18],[") -> ",17],["Self",18]],"d":"The nth root of `x`.\n\nSee also:\n-\n- `pow()`\n- `sqrt()`\n"},{"p":["ElementaryFunctions","sinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [hyperbolic sine][wiki] of `x`.\n```\n           e^x - e^-x\nsinh(x) = ------------\n               2\n```\n\nSee also:\n-\n- `cosh()`\n- `tanh()`\n- `asinh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Hyperbolic_function"},{"p":["ElementaryFunctions","sqrt(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sqrt",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sqrt",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [square root][wiki] of `x`.\n\nSee also:\n-\n- `pow()`\n- `root()`\n\n[wiki]: https://en.wikipedia.org/wiki/Square_root"},{"p":["ElementaryFunctions","tanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [hyperbolic tangent][wiki] of `x`.\n```\n           sinh(x)\ntanh(x) = ---------\n           cosh(x)\n```\n\nSee also:\n-\n- `cosh()`\n- `sinhh()`\n- `atanh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Hyperbolic_function"},{"p":["ElementaryFunctions","acosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [inverse hyperbolic cosine][wiki] of `x`.\n```\ncosh(acosh(x)) ≅ x\n```\nSee also:\n-\n- `asinh()`\n- `atanh()`\n- `cosh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_hyperbolic_function"},{"p":["ElementaryFunctions","asinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [inverse hyperbolic sine][wiki] of `x`.\n```\nsinh(asinh(x)) ≅ x\n```\nSee also:\n-\n- `acosh()`\n- `atanh()`\n- `sinh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_hyperbolic_function"},{"p":["ElementaryFunctions","atanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["Self",18],[") -> ",17],["Self",18]],"d":"The [inverse hyperbolic tangent][wiki] of `x`.\n```\ntanh(atanh(x)) ≅ x\n```\nSee also:\n-\n- `acosh()`\n- `asinh()`\n- `tanh()`\n\n[wiki]: https://en.wikipedia.org/wiki/Inverse_hyperbolic_function"},{"p":["Augmented","fastTwoSum(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["fastTwoSum",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["a",2],[": ",17],["T",18],[", ",17],["_",1],[" ",17],["b",2],[": ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["Real",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["fastTwoSum",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[")",17]],"a":{"a":{"d":true,"r":"sum(large:small:)"}},"c":[["T",1,"Real",0]],"g":[["T",0,0]]},{"p":["Augmented","twoProdFMA(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["twoProdFMA",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["a",2],[": ",17],["T",18],[", ",17],["_",1],[" ",17],["b",2],[": ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["Real",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["twoProdFMA",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[")",17]],"a":{"a":{"d":true,"r":"product"}},"c":[["T",1,"Real",0]],"g":[["T",0,0]]},{"p":["Augmented","sum(large:small:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sum",7],["<",17],["T",0],[">(",17],["large",1],[" ",17],["a",2],[": ",17],["T",18],[", ",17],["small",1],[" ",17],["b",2],[": ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["Real",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sum",7],["<",17],["T",0],[">(",17],["large",1],[": ",17],["T",18],[", ",17],["small",1],[": ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[")",17]],"c":[["T",1,"Real",0]],"g":[["T",0,0]],"d":"The sum `a + b` represented as an implicit sum `head + tail`.\n\n`head` is the correctly rounded value of `a + b`. `tail` is the\nerror from that computation rounded to the closest representable\nvalue.\n\nUnlike `Augmented.product(a, b)`, the rounding error of a sum can\nnever underflow. However, it may not be exactly representable when\n`a` and `b` differ widely in magnitude.\n\nThis operation is sometimes called \"fastTwoSum\".\n\n- Parameters:\n  - a: The summand with larger magnitude.\n  - b: The summand with smaller magnitude.\n\nPreconditions:\n-\n- `large.magnitude` must not be smaller than `small.magnitude`.\n  They may be equal, or one or both may be `NaN`.\n  This precondition is only enforced in debug builds.\n\nEdge Cases:\n-\n- `head` is always the IEEE 754 sum `a + b`.\n- If `head` is not finite, `tail` is unspecified and should not be\n  interpreted as having any meaning (it may be `NaN` or `infinity`).\n\nPostconditions:\n-\n- If `head` is normal, then `abs(tail) < head.ulp`.\n  Assuming IEEE 754 default rounding, `abs(tail) <= head.ulp/2`."},{"p":["Augmented","product(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["product",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["a",2],[": ",17],["T",18],[", ",17],["_",1],[" ",17],["b",2],[": ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["Real",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["product",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["T",18],[") -> (head",17],[": ",17],["T",18],[", tail",17],[": ",17],["T",18],[")",17]],"c":[["T",1,"Real",0]],"g":[["T",0,0]],"d":"The product `a * b` represented as an implicit sum `head + tail`.\n\n`head` is the correctly rounded value of `a*b`. If no overflow or\nunderflow occurs, `tail` represents the rounding error incurred in\ncomputing `head`, such that the exact product is the sum of `head`\nand `tail` computed without rounding.\n\nThis operation is sometimes called \"twoProd\" or \"twoProduct\".\n\nEdge Cases:\n-\n- `head` is always the IEEE 754 product `a * b`.\n- If `head` is not finite, `tail` is unspecified and should not be\n  interpreted as having any meaning (it may be `NaN` or `infinity`).\n- When `head` is close to the underflow boundary, the rounding error\n  may not be representable due to underflow, and `tail` will be rounded.\n  If `head` is very small, `tail` may even be zero, even though the\n  product is not exact.\n- If `head` is zero, `tail` is also a zero with unspecified sign.\n\nPostconditions:\n-\n- If `head` is normal, then `abs(tail) < head.ulp`.\n  Assuming IEEE 754 default rounding, `abs(tail) <= head.ulp/2`.\n- If both `head` and `tail` are normal, then `a * b` is exactly\n  equal to `head + tail` when computed as real numbers."},{"p":["AlgebraicField","/(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["/",7],[" ",17],["(",17],["a",2],[": ",17],["Self",18],[", ",17],["b",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["/",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Self",18]],"d":"The (approximate) quotient `a/b`."},{"p":["AlgebraicField","/=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["/=",7],[" ",17],["(",17],["a",2],[": ",17],["inout",12],[" ",17],["Self",18],[", ",17],["b",2],[": ",17],["Self",18],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["/=",7],[" ",17],["(",17],["inout",12],[" ",17],["Self",18],[", ",17],["Self",18],[")",17]],"d":"Replaces a with the (approximate) quotient `a/b`."},{"p":["AlgebraicField","/(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["/",7],[" ",17],["(",17],["a",2],[": ",17],["Self",18],[", ",17],["b",2],[": ",17],["Self",18],[") -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["/",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Self",18]],"o":47},{"p":["Double","expMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":23},{"p":["Double","cos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":24},{"p":["Double","erf(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":12},{"p":["Double","exp(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":25},{"p":["Double","log(onePlus:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[": ",17],["Double",18],[") -> ",17],["Double",18]],"o":26},{"p":["Double","log(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":27},{"p":["Double","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Double",18],[", ",17],["Double",18],[") -> ",17],["Double",18]],"o":29},{"p":["Double","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Double",18],[", ",17],["Int",18],[") -> ",17],["Double",18]],"o":28},{"p":["Double","sin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":30},{"p":["Double","tan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":31},{"p":["Double","acos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":32},{"p":["Double","asin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":33},{"p":["Double","atan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":34},{"p":["Double","cosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":35},{"p":["Double","erfc(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":13},{"p":["Double","exp2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":14},{"p":["Double","log2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":15},{"p":["Double","root(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["Double",18],[", ",17],["Int",18],[") -> ",17],["Double",18]],"o":36},{"p":["Double","sinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":37},{"p":["Double","tanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":39},{"p":["Double","acosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":40},{"p":["Double","asinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":41},{"p":["Double","atan2(y:x:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Double",18,171],[", ",17],["x",1],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Double",18],[", ",17],["x",1],[": ",17],["Double",18],[") -> ",17],["Double",18]],"o":16},{"p":["Double","atanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":42},{"p":["Double","gamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":18},{"p":["Double","hypot(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["Double",18],[", ",17],["Double",18],[") -> ",17],["Double",18]],"o":19},{"p":["Double","log10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":20},{"p":["Double","logGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Double",18,171],[") -> ",17],["Double",18,171]],"s":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["Double",18],[") -> ",17],["Double",18]],"o":21},{"p":["Float","expMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":23},{"p":["Float","cos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":24},{"p":["Float","erf(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":12},{"p":["Float","exp(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":25},{"p":["Float","log(onePlus:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[": ",17],["Float",18],[") -> ",17],["Float",18]],"o":26},{"p":["Float","log(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":27},{"p":["Float","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float",18],[", ",17],["Float",18],[") -> ",17],["Float",18]],"o":29},{"p":["Float","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float",18],[", ",17],["Int",18],[") -> ",17],["Float",18]],"o":28},{"p":["Float","sin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":30},{"p":["Float","tan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":31},{"p":["Float","acos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":32},{"p":["Float","asin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":33},{"p":["Float","atan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":34},{"p":["Float","cosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":35},{"p":["Float","erfc(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":13},{"p":["Float","exp2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":14},{"p":["Float","log2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":15},{"p":["Float","root(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["Float",18],[", ",17],["Int",18],[") -> ",17],["Float",18]],"o":36},{"p":["Float","sinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":37},{"p":["Float","tanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":39},{"p":["Float","acosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":40},{"p":["Float","asinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":41},{"p":["Float","atan2(y:x:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float",18,172],[", ",17],["x",1],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float",18],[", ",17],["x",1],[": ",17],["Float",18],[") -> ",17],["Float",18]],"o":16},{"p":["Float","atanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":42},{"p":["Float","gamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":18},{"p":["Float","hypot(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["Float",18],[", ",17],["Float",18],[") -> ",17],["Float",18]],"o":19},{"p":["Float","log10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":20},{"p":["Float","logGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float",18,172],[") -> ",17],["Float",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["Float",18],[") -> ",17],["Float",18]],"o":21},{"p":["Float16","expMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":23},{"p":["Float16","cos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":24},{"p":["Float16","erf(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":12},{"p":["Float16","exp(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":25},{"p":["Float16","log(onePlus:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[": ",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":26},{"p":["Float16","log(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":27},{"p":["Float16","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float16",18],[", ",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":29},{"p":["Float16","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float16",18],[", ",17],["Int",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":28},{"p":["Float16","sin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":30},{"p":["Float16","tan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":31},{"p":["Float16","acos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":32},{"p":["Float16","asin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":33},{"p":["Float16","atan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":34},{"p":["Float16","cosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":35},{"p":["Float16","erfc(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":13},{"p":["Float16","exp2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":14},{"p":["Float16","log2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":15},{"p":["Float16","root(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["Float16",18],[", ",17],["Int",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":36},{"p":["Float16","sinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":37},{"p":["Float16","tanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":39},{"p":["Float16","acosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":40},{"p":["Float16","asinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":41},{"p":["Float16","atan2(y:x:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float16",18,180],[", ",17],["x",1],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float16",18],[", ",17],["x",1],[": ",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":16},{"p":["Float16","atanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":42},{"p":["Float16","exp10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp10",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":17},{"p":["Float16","gamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":18},{"p":["Float16","hypot(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["Float16",18],[", ",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":19},{"p":["Float16","log10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":20},{"p":["Float16","logGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float16",18,180],[") -> ",17],["Float16",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["Float16",18],[") -> ",17],["Float16",18]],"a":{"iOS":{"i":"14.0"},"macOS":{"i":"11.0"},"tvOS":{"i":"14.0"},"watchOS":{"i":"7.0"}},"o":21},{"p":["Float80","expMinusOne(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["expMinusOne",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":23},{"p":["Float80","cos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cos",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":24},{"p":["Float80","erf(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erf",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":12},{"p":["Float80","exp(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":25},{"p":["Float80","log(onePlus:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["onePlus",1],[": ",17],["Float80",18],[") -> ",17],["Float80",18]],"o":26},{"p":["Float80","log(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":27},{"p":["Float80","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float80",18],[", ",17],["Float80",18],[") -> ",17],["Float80",18]],"o":29},{"p":["Float80","pow(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["pow",7],["(",17],["Float80",18],[", ",17],["Int",18],[") -> ",17],["Float80",18]],"o":28},{"p":["Float80","sin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sin",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":30},{"p":["Float80","tan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tan",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":31},{"p":["Float80","acos(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acos",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":32},{"p":["Float80","asin(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asin",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":33},{"p":["Float80","atan(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":34},{"p":["Float80","cosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["cosh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":35},{"p":["Float80","erfc(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["erfc",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":13},{"p":["Float80","exp2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["exp2",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":14},{"p":["Float80","log2(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log2",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":15},{"p":["Float80","root(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[", ",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,173],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["root",7],["(",17],["Float80",18],[", ",17],["Int",18],[") -> ",17],["Float80",18]],"o":36},{"p":["Float80","sinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sinh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":37},{"p":["Float80","tanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tanh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":39},{"p":["Float80","acosh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["acosh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":40},{"p":["Float80","asinh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["asinh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":41},{"p":["Float80","atan2(y:x:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float80",18,181],[", ",17],["x",1],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atan2",7],["(",17],["y",1],[": ",17],["Float80",18],[", ",17],["x",1],[": ",17],["Float80",18],[") -> ",17],["Float80",18]],"o":16},{"p":["Float80","atanh(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["atanh",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":42},{"p":["Float80","gamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["gamma",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":18},{"p":["Float80","hypot(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[", ",17],["_",1],[" ",17],["y",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["hypot",7],["(",17],["Float80",18],[", ",17],["Float80",18],[") -> ",17],["Float80",18]],"o":19},{"p":["Float80","log10(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["log10",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":20},{"p":["Float80","logGamma(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["_",1],[" ",17],["x",2],[": ",17],["Float80",18,181],[") -> ",17],["Float80",18,181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["logGamma",7],["(",17],["Float80",18],[") -> ",17],["Float80",18]],"o":21},{"p":["Numeric","isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)"],"f":[["func",12],[" ",17],["isApproximatelyEqual",7],["(",17],["to",1],[" ",17],["other",2],[": ",17],["Self",18],[", ",17],["absoluteTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[", ",17],["relativeTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[" = 0) -> ",17],["Bool",18,170]],"s":[["func",12],[" ",17],["isApproximatelyEqual",7],["(",17],["to",1],[": ",17],["Self",18],[", ",17],["absoluteTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[", ",17],["relativeTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[") -> ",17],["Bool",18]],"e":[["Self.Magnitude",1,"FloatingPoint",166]],"c":[["Self.Magnitude",1,"FloatingPoint",166]],"d":"Test if `self` and `other` are approximately equal with specified tolerances.\n\n`true` if `self` and `other` are equal, or if they are finite and either\n```\n(self - other).magnitude <= absoluteTolerance\n```\nor\n```\n(self - other).magnitude <= relativeTolerance * scale\n```\nwhere `scale` is `max(self.magnitude, other.magnitude)`.\n\nMathematical Properties:\n------------------------\n\n- `isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)`\n  is _reflexive_ for non-exceptional values (such as NaN).\n\n- `isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)`\n  is _symmetric_.\n\n- `isApproximatelyEqual(to:relativeTolerance:norm:)` is __not__\n  _transitive_. Because of this, approximately equality is __not an\n  equivalence relation__, even when restricted to non-exceptional values.\n\n  This means that you must not use approximate equality to implement\n  a conformance to Equatable, as it will violate the invariants of\n  code written against that protocol.\n\n- For any point `a`, the set of values that compare approximately equal\n  to `a` is _convex_. (Under the assumption that `norm` implements a\n  valid norm, which cannot be checked by this function.)\n\nSee Also:\n-------\n- `isApproximatelyEqual(to:[relativeTolerance:])`\n\n- Parameters:\n\n  - other: The value to which `self` is compared.\n\n  - absoluteTolerance: The absolute tolerance to use in the comparison.\n\n    This value should be non-negative and finite.\n    This constraint on is only checked in debug builds, because a\n    mathematically well-defined result exists for any tolerance,\n    even one out of range.\n\n  - relativeTolerance: The relative tolerance to use in the comparison.\n    Defaults to zero.\n\n    This value should be non-negative and less than or equal to 1.\n    This constraint on is only checked in debug builds, because a\n    mathematically well-defined result exists for any tolerance,\n    even one out of range."},{"p":["Numeric","isApproximatelyEqual(to:relativeTolerance:norm:)"],"f":[["func",12],[" ",17],["isApproximatelyEqual",7],["(",17],["to",1],[" ",17],["other",2],[": ",17],["Self",18],[", ",17],["relativeTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[" = Magnitude.ulpOfOne.squareRoot(), ",17],["norm",1],[": (",17],["Self",18],[") -> ",17],["Self",18],[".",17],["Magnitude",18],[" = \\.magnitude) -> ",17],["Bool",18,170]],"s":[["func",12],[" ",17],["isApproximatelyEqual",7],["(",17],["to",1],[": ",17],["Self",18],[", ",17],["relativeTolerance",1],[": ",17],["Self",18],[".",17],["Magnitude",18],[", ",17],["norm",1],[": (",17],["Self",18],[") -> ",17],["Self",18],[".",17],["Magnitude",18],[") -> ",17],["Bool",18]],"e":[["Self.Magnitude",1,"FloatingPoint",166]],"c":[["Self.Magnitude",1,"FloatingPoint",166]],"d":"Test if `self` and `other` are approximately equal.\n\n`true` if `self` and `other` are equal, or if they are finite and\n```\nnorm(self - other) <= relativeTolerance * scale\n```\nwhere `scale` is\n```\nmax(norm(self), norm(other), .leastNormalMagnitude)\n```\n\nThe default value of `relativeTolerance` is `.ulpOfOne.squareRoot()`,\nwhich corresponds to expecting \"about half the digits\" in the computed\nresults to be good. This is the usual guidance in numerical analysis,\nif you don't know anything about the computation being performed, but\nis not suitable for all use cases.\n\nMathematical Properties:\n------------------------\n\n- `isApproximatelyEqual(to:relativeTolerance:norm:)` is _reflexive_ for\n  non-exceptional values (such as NaN).\n\n- `isApproximatelyEqual(to:relativeTolerance:norm:)` is _symmetric_.\n\n- `isApproximatelyEqual(to:relativeTolerance:norm:)` is __not__\n  _transitive_. Because of this, approximately equality is __not an\n  equivalence relation__, even when restricted to non-exceptional values.\n\n  This means that you must not use approximate equality to implement\n  a conformance to Equatable, as it will violate the invariants of\n  code written against that protocol.\n\n- For any point `a`, the set of values that compare approximately equal\n  to `a` is _convex_. (Under the assumption that the `.magnitude`\n  property implements a valid norm.)\n\n- `isApproximatelyEqual(to:relativeTolerance:norm:)` is _scale invariant_,\n  so long as no underflow or overflow has occured, and no exceptional\n  value is produced by the scaling.\n\nSee Also:\n-------\n- `isApproximatelyEqual(to:absoluteTolerance:[relativeTolerance:norm:])`\n\n- Parameters:\n\n  - other: The value to which `self` is compared.\n\n  - relativeTolerance: The tolerance to use for the comparison.\n    Defaults to `.ulpOfOne.squareRoot()`.\n\n    This value should be non-negative and less than or equal to 1.\n    This constraint on is only checked in debug builds, because a\n    mathematically well-defined result exists for any tolerance,\n    even one out of range.\n\n  - norm: The [norm] to use for the comparison.\n    Defaults to `\\.magnitude`.\n\n[norm]: https://en.wikipedia.org/wiki/Norm_(mathematics)"},{"p":["AdditiveArithmetic","isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)"],"f":[["func",12],[" ",17],["isApproximatelyEqual",7],["<",17],["Magnitude",0],[">(",17],["to",1],[" ",17],["other",2],[": ",17],["Self",18],[", ",17],["absoluteTolerance",1],[": ",17],["Magnitude",18],[", ",17],["relativeTolerance",1],[": ",17],["Magnitude",18],[" = 0, ",17],["norm",1],[": (",17],["Self",18],[") -> ",17],["Magnitude",18],[") -> ",17],["Bool",18,170],[" ",17],["where",12],[" ",17],["Magnitude",18],[" : ",17],["FloatingPoint",18,166]],"s":[["func",12],[" ",17],["isApproximatelyEqual",7],["<",17],["Magnitude",0],[">(",17],["to",1],[": ",17],["Self",18],[", ",17],["absoluteTolerance",1],[": ",17],["Magnitude",18],[", ",17],["relativeTolerance",1],[": ",17],["Magnitude",18],[", ",17],["norm",1],[": (",17],["Self",18],[") -> ",17],["Magnitude",18],[") -> ",17],["Bool",18]],"c":[["Magnitude",1,"FloatingPoint",166]],"g":[["Magnitude",0,1]],"d":"Test if `self` and `other` are approximately equal with specified\ntolerances and norm.\n\n`true` if `self` and `other` are equal, or if they are finite and either\n```\nnorm(self - other) <= absoluteTolerance\n```\nor\n```\nnorm(self - other) <= relativeTolerance * scale\n```\nwhere `scale` is `max(norm(self), norm(other))`.\n\nMathematical Properties:\n------------------------\n\n- `isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)`\n  is _reflexive_ for non-exceptional values (such as NaN).\n\n- `isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)`\n  is _symmetric_.\n\n- `isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)`\n  is __not__ _transitive_. Because of this, approximately equality is\n  __not an equivalence relation__, even when restricted to\n  non-exceptional values.\n\n  This means that you must not use approximate equality to implement\n  a conformance to Equatable, as it will violate the invariants of\n  code written against that protocol.\n\n- For any point `a`, the set of values that compare approximately equal\n  to `a` is _convex_ (under the assumption that `norm` implements a\n  valid norm, which cannot be checked by this function or a protocol).\n\nSee Also:\n-------\n- `isApproximatelyEqual(to:[relativeTolerance:norm:])`\n- `isApproximatelyEqual(to:absoluteTolerance:[relativeTolerance:])`\n\n- Parameters:\n\n  - other: The value to which `self` is compared.\n\n  - absoluteTolerance: The absolute tolerance to use in the comparison.\n\n    This value should be non-negative and finite.\n    This constraint on is only checked in debug builds, because a\n    mathematically well-defined result exists for any tolerance, even\n    one out of range.\n\n  - relativeTolerance: The relative tolerance to use in the comparison.\n    Defaults to zero.\n\n    This value should be non-negative and less than or equal to 1.\n    This constraint on is only checked in debug builds, because a\n    mathematically well-defined result exists for any tolerance,\n    even one out of range.\n\n  - norm: The norm to use for the comparison.\n    Defaults to `\\.magnitude`.\n\n    For example, if we wanted to test if a complex value was inside a\n    circle of radius 0.001 centered at (1 + 0i), we could use:\n    ```\n    z.isApproximatelyEqual(\n      to: 1,\n      absoluteTolerance: 0.001,\n      norm: \\.length\n    )\n    ```\n    (if we used the default norm, `.magnitude`, we would be testing if\n    `z` were inside a square region instead.)"}],"edges":{"conformer":[0,1,[],0,2,[],0,3,[],0,166,[],0,167,[],0,168,[],0,169,[],0,174,[],0,175,[],0,176,[],0,178,[],0,179,[],1,3,[],1,169,[],1,178,[],2,169,[],2,174,[],2,176,[],2,178,[],2,179,[],3,169,[],3,178,[],171,0,[],172,0,[],180,0,[],181,0,[]],"feature":[5,171,5,172,5,180,5,181,7,171,7,172,7,180,7,181,8,171,8,172,8,180,8,181,9,171,9,172,9,180,9,181,10,171,10,172,10,180,10,181,11,171,11,172,11,180,11,181,49,171,49,172,49,180,49,181],"member":[8,0,9,0,43,4,44,4,45,4,46,4,50,171,51,171,52,171,53,171,54,171,55,171,56,171,57,171,58,171,59,171,60,171,61,171,62,171,63,171,64,171,65,171,66,171,67,171,68,171,69,171,70,171,71,171,72,171,73,171,74,171,75,171,76,171,77,171,78,172,79,172,80,172,81,172,82,172,83,172,84,172,85,172,86,172,87,172,88,172,89,172,90,172,91,172,92,172,93,172,94,172,95,172,96,172,97,172,98,172,99,172,100,172,101,172,102,172,103,172,104,172,105,172,106,180,107,180,108,180,109,180,110,180,111,180,112,180,113,180,114,180,115,180,116,180,117,180,118,180,119,180,120,180,121,180,122,180,123,180,124,180,125,180,126,180,127,180,128,180,129,180,130,180,131,180,132,180,133,180,134,180,135,181,136,181,137,181,138,181,139,181,140,181,141,181,142,181,143,181,144,181,145,181,146,181,147,181,148,181,149,181,150,181,151,181,152,181,153,181,154,181,155,181,156,181,157,181,158,181,159,181,160,181,161,181,162,181,163,174,164,174,165,178],"requirement":[6,2,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,3,24,3,25,3,26,3,27,3,28,3,29,3,30,3,31,3,32,3,33,3,34,3,35,3,36,3,37,3,38,3,39,3,40,3,41,3,42,3,47,2,48,2],"defaultImplementation":[5,6,7,6,10,17,11,22,49,47]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/AlgebraicField.swift","symbols":[47,16,2,50,14,48,53,14,47,90,6,6,95,21,49,106,13,7]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/ApproximateEquality.swift","symbols":[74,14,164,143,14,163,232,14,165]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/AugmentedArithmetic.swift","symbols":[17,12,4,47,21,46,89,21,45,97,21,44,102,21,43]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/Double+Real.swift","symbols":[15,21,51,20,21,58,25,21,59,30,21,60,35,21,61,40,21,62,45,21,63,50,21,68,55,21,69,60,21,70,65,21,71,70,21,73,75,21,53,80,21,50,85,21,55,90,21,54,95,21,52,100,21,64,105,21,65,129,21,75,135,21,74,140,21,66,145,21,76,150,21,56,156,21,57,198,21,67,209,21,72,215,21,77]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/ElementaryFunctions.swift","symbols":[54,16,3,65,14,25,89,14,23,105,14,35,121,14,37,137,14,39,150,14,24,164,14,30,182,14,31,193,14,27,202,14,26,215,14,40,228,14,41,241,14,42,257,14,32,273,14,33,290,14,34,299,14,29,308,14,28,318,14,38,327,14,36]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/Float+Real.swift","symbols":[15,21,79,20,21,86,25,21,87,30,21,88,35,21,89,40,21,90,45,21,91,50,21,96,55,21,97,60,21,98,65,21,99,70,21,101,75,21,81,80,21,78,85,21,83,90,21,82,95,21,80,100,21,92,105,21,93,117,21,103,122,21,102,127,21,94,132,21,104,137,21,84,143,21,85,171,21,95,182,21,100,188,21,105]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/Float16+Real.swift","symbols":[20,21,107,25,21,114,30,21,115,35,21,116,40,21,117,45,21,118,50,21,119,55,21,124,60,21,125,65,21,126,70,21,127,75,21,129,80,21,109,85,21,106,90,21,111,95,21,110,100,21,108,105,21,120,110,21,121,115,21,130,120,21,132,128,21,131,133,21,122,138,21,133,143,21,112,148,21,113,160,21,123,165,21,128,171,21,134]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/Float80+Real.swift","symbols":[17,21,136,22,21,143,27,21,144,32,21,145,37,21,146,42,21,147,47,21,148,52,21,153,57,21,154,62,21,155,67,21,156,72,21,158,77,21,138,82,21,135,87,21,140,92,21,139,97,21,137,102,21,149,107,21,150,112,21,160,117,21,159,122,21,151,127,21,161,132,21,141,138,21,142,146,21,152,157,21,157,162,21,162]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/Real.swift","symbols":[30,16,0,40,21,10,50,21,8,56,21,11,97,21,9,149,13,5]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-numerics@1.0.2/.build/checkouts/swift-numerics/Sources/RealModule/RealFunctions.swift","symbols":[11,16,1,17,14,16,24,14,12,31,14,13,42,14,14,53,14,17,57,14,19,65,14,18,75,14,15,85,14,20,96,14,21,113,14,22]}]}