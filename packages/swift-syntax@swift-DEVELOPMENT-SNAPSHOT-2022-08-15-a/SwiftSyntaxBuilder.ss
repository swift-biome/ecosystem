{"culture":"SwiftSyntaxBuilder","dependencies":[{"package":"swift-syntax","modules":["SwiftSyntax"]}],"extensions":[],"partitions":[{"namespace":"Swift","communities":[{"community":"method","startIndex":0,"endIndex":51}]},{"namespace":"SwiftSyntax","communities":[{"community":"type.property","startIndex":51,"endIndex":158},{"community":"method","startIndex":158,"endIndex":165}]},{"namespace":"SwiftSyntaxBuilder","communities":[{"community":"protocol","startIndex":165,"endIndex":432},{"community":"struct","startIndex":432,"endIndex":726},{"community":"init","startIndex":726,"endIndex":1224},{"community":"property","startIndex":1224,"endIndex":1225},{"community":"type.method","startIndex":1225,"endIndex":1621},{"community":"method","startIndex":1621,"endIndex":3093},{"community":"typealias","startIndex":3093,"endIndex":3225}]}],"identifiers":["sSS18SwiftSyntaxBuilderE06createB9BuildableAA0bE0_pyF","sSS18SwiftSyntaxBuilderE18createReturnClauseAA0eF0VyF","sSS18SwiftSyntaxBuilderE19createExprBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE19createTypeBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE20createIdentifierExprAA0eF0VyF","sSS18SwiftSyntaxBuilderE22createPatternBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE23createIdentifierPatternAA0eF0VyF","sSS18SwiftSyntaxBuilderE23createStringLiteralExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE24createBinaryOperatorExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE25createAccessPathComponentAA0efG0VyF","sSS18SwiftSyntaxBuilderE26createSimpleTypeIdentifierAA0efG0VyF","sSS18SwiftSyntaxBuilderE27createTypeInitializerClauseAA0efG0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE014createNonEmptyD4ListAA0fgdH0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE06createD4ListAA0dF0VyF","sSa18SwiftSyntaxBuilder0aB005TokenB0VRszlE20createIdentifierListAA0fG0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE18createGarbageNodesAA0hI0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE19createAttributeListAA0hI0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE20createSwitchCaseListAA0hiJ0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE27createStringLiteralSegmentsAA0hiJ0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE33createSpecializeAttributeSpecListAA0hijK0VyF","sSa18SwiftSyntaxBuilderAA013ExpressibleAsB9Buildable_pRszlE34createPrecedenceGroupAttributeListAA0hijK0VyF","sSa18SwiftSyntaxBuilderAA21ExpressibleAsCaseItem_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA22ExpressibleAsCatchItem_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA24ExpressibleAsCatchClause_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA25ExpressibleAsClosureParam_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA25ExpressibleAsDeclModifier_pRszlE06createG4ListAA0gI0VyF","sSa18SwiftSyntaxBuilderAA26ExpressibleAsInheritedType_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA26ExpressibleAsObjcNamePiece_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA27ExpressibleAsIfConfigClause_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA27ExpressibleAsPatternBinding_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA28ExpressibleAsEnumCaseElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA28ExpressibleAsGenericArgument_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsConditionElement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsDeclNameArgument_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsGenericParameter_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsTupleExprElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA29ExpressibleAsTupleTypeElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsDictionaryElement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsFunctionParameter_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA30ExpressibleAsObjCSelectorPiece_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA31ExpressibleAsClosureCaptureItem_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA31ExpressibleAsGenericRequirement_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA32ExpressibleAsAccessPathComponent_pRszlE06createfG0AA0fG0VyF","sSa18SwiftSyntaxBuilderAA32ExpressibleAsTuplePatternElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA33ExpressibleAsAvailabilityArgument_pRszlE06createF8SpecListAA0fiJ0VyF","sSa18SwiftSyntaxBuilderAA34ExpressibleAsPrimaryAssociatedType_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA35ExpressibleAsCompositionTypeElement_pRszlE06createfgH4ListAA0fghJ0VyF","sSa18SwiftSyntaxBuilderAA35ExpressibleAsDifferentiabilityParam_pRszlE06createfG4ListAA0fgI0VyF","sSa18SwiftSyntaxBuilderAA38ExpressibleAsBackDeployVersionArgument_pRszlE06createfgH4ListAA0fghK0VyF","sSa18SwiftSyntaxBuilderAA39ExpressibleAsPrecedenceGroupNameElement_pRszlE06createfgH4ListAA0fghK0VyF","sSa18SwiftSyntaxBuilderAA43ExpressibleAsMultipleTrailingClosureElement_pRszlE06createfghI4ListAA0fghiK0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundEndifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundErrorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11capitalSelfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fallthroughACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fileprivateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundAssertACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundColumnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundElseifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundFileIDACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11singleQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11stringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundKeyPathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundWarningACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12prefixPeriodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFilePathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFunctionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundSelectorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14associatedtypeACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundAvailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundDsohandleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15exclamationMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15precedencegroupACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15prefixAmpersandACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundFileLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundUnavailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17infixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17leftSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundColorLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundImageLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE18rightSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19postfixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19poundSourceLocationACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE20multilineStringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE25stringInterpolationAnchorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2asACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2doACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2ifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2inACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2isACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3anyACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3eofACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3forACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3letACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3nilACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3tryACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3varACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4caseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4elseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4enumACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4funcACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4initACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4openACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4selfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4trueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5arrowACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5breakACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5catchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5classACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5colonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5commaACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5deferACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5equalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5falseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5guardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5inoutACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5poundACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5superACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5throwACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whereACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5yieldACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6atSignACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6deinitACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6importACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6periodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6publicACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6repeatACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6returnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6staticACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6structACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6switchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6throwsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7defaultACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7poundIfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7privateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8backtickACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8continueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8ellipsisACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8internalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8operatorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8protocolACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8rethrowsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8wildcardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9backslashACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9extensionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundElseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundFileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundLineACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9semicolonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9subscriptACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9typealiasACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE014createNonEmptyC4ListAD0fgcH0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createB9BuildableAD0bF0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createC4ListAD0cF0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE18createDeclModifierAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE19createExprBuildableAD0fG0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE20createIdentifierExprAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE24createBinaryOperatorExprAD0fgH0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP","s18SwiftSyntaxBuilder0B13ListBuildableP","s18SwiftSyntaxBuilder0B9BuildableP","s18SwiftSyntaxBuilder13DeclBuildableP","s18SwiftSyntaxBuilder13ExprBuildableP","s18SwiftSyntaxBuilder13StmtBuildableP","s18SwiftSyntaxBuilder13TypeBuildableP","s18SwiftSyntaxBuilder16PatternBuildableP","s18SwiftSyntaxBuilder17DeclListBuildableP","s18SwiftSyntaxBuilder17ExprListBuildableP","s18SwiftSyntaxBuilder17StmtListBuildableP","s18SwiftSyntaxBuilder17TypeListBuildableP","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP","s18SwiftSyntaxBuilder20PatternListBuildableP","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP","s18SwiftSyntaxBuilder21ExpressibleAsExprListP","s18SwiftSyntaxBuilder21ExpressibleAsMoveExprP","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP","s18SwiftSyntaxBuilder22ExpressibleAsActorDeclP","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP","s18SwiftSyntaxBuilder24ExpressibleAsLabeledStmtP","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP","s18SwiftSyntaxBuilder25ExpressibleAsGarbageNodesP","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP","s18SwiftSyntaxBuilder30ExpressibleAsInfixOperatorExprP","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP","s18SwiftSyntaxBuilder30ExpressibleAsLayoutRequirementP","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP","s18SwiftSyntaxBuilder31ExpressibleAsDeclModifierDetailP","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypeP","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP","s18SwiftSyntaxBuilder34ExpressibleAsBackDeployVersionListP","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentP","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListP","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClauseP","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP","s18SwiftSyntaxBuilder010AccessPathC0V","s18SwiftSyntaxBuilder012AccessorListC0V","s18SwiftSyntaxBuilder012CaseItemListC0V","s18SwiftSyntaxBuilder012GarbageNodesC0V","s18SwiftSyntaxBuilder012ModifierListC0V","s18SwiftSyntaxBuilder012ObjCSelectorC0V","s18SwiftSyntaxBuilder013AttributeListC0V","s18SwiftSyntaxBuilder013CatchItemListC0V","s18SwiftSyntaxBuilder014IdentifierListC0V","s18SwiftSyntaxBuilder014MemberDeclListC0V","s18SwiftSyntaxBuilder014SwitchCaseListC0V","s18SwiftSyntaxBuilder015CatchClauseListC0V","s18SwiftSyntaxBuilder016ArrayElementListC0V","s18SwiftSyntaxBuilder016ClosureParamListC0V","s18SwiftSyntaxBuilder017CodeBlockItemListC0V","s18SwiftSyntaxBuilder017InheritedTypeListC0V","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V","s18SwiftSyntaxBuilder018IfConfigClauseListC0V","s18SwiftSyntaxBuilder018PatternBindingListC0V","s18SwiftSyntaxBuilder019EnumCaseElementListC0V","s18SwiftSyntaxBuilder019GenericArgumentListC0V","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V","s18SwiftSyntaxBuilder020ConditionElementListC0V","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V","s18SwiftSyntaxBuilder020GenericParameterListC0V","s18SwiftSyntaxBuilder020TupleExprElementListC0V","s18SwiftSyntaxBuilder020TupleTypeElementListC0V","s18SwiftSyntaxBuilder021BackDeployVersionListC0V","s18SwiftSyntaxBuilder021DictionaryElementListC0V","s18SwiftSyntaxBuilder021FunctionParameterListC0V","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V","s18SwiftSyntaxBuilder022GenericRequirementListC0V","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V","s18SwiftSyntaxBuilder023TuplePatternElementListC0V","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V","s18SwiftSyntaxBuilder08ExprListC0V","s18SwiftSyntaxBuilder08ObjcNameC0V","s18SwiftSyntaxBuilder09TokenListC0V","s18SwiftSyntaxBuilder10AccessPathV","s18SwiftSyntaxBuilder10ImportDeclV","s18SwiftSyntaxBuilder10ReturnStmtV","s18SwiftSyntaxBuilder10SourceFileV","s18SwiftSyntaxBuilder10StructDeclV","s18SwiftSyntaxBuilder10SwitchCaseV","s18SwiftSyntaxBuilder10SwitchStmtV","s18SwiftSyntaxBuilder11CatchClauseV","s18SwiftSyntaxBuilder11ClosureExprV","s18SwiftSyntaxBuilder11KeyPathExprV","s18SwiftSyntaxBuilder11LabeledStmtV","s18SwiftSyntaxBuilder11TernaryExprV","s18SwiftSyntaxBuilder11WhereClauseV","s18SwiftSyntaxBuilder12AccessorDeclV","s18SwiftSyntaxBuilder12AccessorListV","s18SwiftSyntaxBuilder12ArrayElementV","s18SwiftSyntaxBuilder12CaseItemListV","s18SwiftSyntaxBuilder12ClosureParamV","s18SwiftSyntaxBuilder12ContinueStmtV","s18SwiftSyntaxBuilder12DeclModifierV","s18SwiftSyntaxBuilder12EnumCaseDeclV","s18SwiftSyntaxBuilder12FunctionDeclV","s18SwiftSyntaxBuilder12FunctionTypeV","s18SwiftSyntaxBuilder12GarbageNodesV","s18SwiftSyntaxBuilder12IfConfigDeclV","s18SwiftSyntaxBuilder12MetatypeTypeV","s18SwiftSyntaxBuilder12ModifierListV","s18SwiftSyntaxBuilder12ObjCSelectorV","s18SwiftSyntaxBuilder12OperatorDeclV","s18SwiftSyntaxBuilder12OptionalTypeV","s18SwiftSyntaxBuilder12ProtocolDeclV","s18SwiftSyntaxBuilder12ReturnClauseV","s18SwiftSyntaxBuilder12SequenceExprV","s18SwiftSyntaxBuilder12SuperRefExprV","s18SwiftSyntaxBuilder12TuplePatternV","s18SwiftSyntaxBuilder12VariableDeclV","s18SwiftSyntaxBuilder12VersionTupleV","s18SwiftSyntaxBuilder13AccessorBlockV","s18SwiftSyntaxBuilder13AsTypePatternV","s18SwiftSyntaxBuilder13AttributeListV","s18SwiftSyntaxBuilder13CatchItemListV","s18SwiftSyntaxBuilder13CodeBlockItemV","s18SwiftSyntaxBuilder13ExtensionDeclV","s18SwiftSyntaxBuilder13InheritedTypeV","s18SwiftSyntaxBuilder13IsTypePatternV","s18SwiftSyntaxBuilder13ObjcNamePieceV","s18SwiftSyntaxBuilder13PoundFileExprV","s18SwiftSyntaxBuilder13PoundLineExprV","s18SwiftSyntaxBuilder13StringSegmentV","s18SwiftSyntaxBuilder13SubscriptDeclV","s18SwiftSyntaxBuilder13SubscriptExprV","s18SwiftSyntaxBuilder13TypealiasDeclV","s18SwiftSyntaxBuilder14AssignmentExprV","s18SwiftSyntaxBuilder14AttributedTypeV","s18SwiftSyntaxBuilder14DictionaryExprV","s18SwiftSyntaxBuilder14DictionaryTypeV","s18SwiftSyntaxBuilder14ExpressionStmtV","s18SwiftSyntaxBuilder14IdentifierExprV","s18SwiftSyntaxBuilder14IdentifierListV","s18SwiftSyntaxBuilder14IfConfigClauseV","s18SwiftSyntaxBuilder14MemberDeclListV","s18SwiftSyntaxBuilder14NilLiteralExprV","s18SwiftSyntaxBuilder14PatternBindingV","s18SwiftSyntaxBuilder14PoundErrorDeclV","s18SwiftSyntaxBuilder14SpecializeExprV","s18SwiftSyntaxBuilder14SwitchCaseListV","s18SwiftSyntaxBuilder14TypeAnnotationV","s18SwiftSyntaxBuilder15CatchClauseListV","s18SwiftSyntaxBuilder15CompositionTypeV","s18SwiftSyntaxBuilder15CustomAttributeV","s18SwiftSyntaxBuilder15DeclarationStmtV","s18SwiftSyntaxBuilder15EnumCaseElementV","s18SwiftSyntaxBuilder15EnumCasePatternV","s18SwiftSyntaxBuilder15FallthroughStmtV","s18SwiftSyntaxBuilder15ForcedValueExprV","s18SwiftSyntaxBuilder15GenericArgumentV","s18SwiftSyntaxBuilder15InitializerDeclV","s18SwiftSyntaxBuilder15KeyPathBaseExprV","s18SwiftSyntaxBuilder15MemberDeclBlockV","s18SwiftSyntaxBuilder15ObjcKeyPathExprV","s18SwiftSyntaxBuilder15OptionalPatternV","s18SwiftSyntaxBuilder15ParameterClauseV","s18SwiftSyntaxBuilder15PoundAssertStmtV","s18SwiftSyntaxBuilder15PoundColumnExprV","s18SwiftSyntaxBuilder15PoundFileIDExprV","s18SwiftSyntaxBuilder15RepeatWhileStmtV","s18SwiftSyntaxBuilder15SwitchCaseLabelV","s18SwiftSyntaxBuilder15WildcardPatternV","s18SwiftSyntaxBuilder16ArrayElementListV","s18SwiftSyntaxBuilder16ClosureParamListV","s18SwiftSyntaxBuilder16ClosureSignatureV","s18SwiftSyntaxBuilder16ConditionElementV","s18SwiftSyntaxBuilder16DeclNameArgumentV","s18SwiftSyntaxBuilder16FloatLiteralExprV","s18SwiftSyntaxBuilder16FunctionCallExprV","s18SwiftSyntaxBuilder16FunctionDeclNameV","s18SwiftSyntaxBuilder16GenericParameterV","s18SwiftSyntaxBuilder16MemberAccessExprV","s18SwiftSyntaxBuilder16ObjcSelectorExprV","s18SwiftSyntaxBuilder16PostfixUnaryExprV","s18SwiftSyntaxBuilder16PoundWarningDeclV","s18SwiftSyntaxBuilder16RegexLiteralExprV","s18SwiftSyntaxBuilder16TupleExprElementV","s18SwiftSyntaxBuilder16TupleTypeElementV","s18SwiftSyntaxBuilder17AccessorParameterV","s18SwiftSyntaxBuilder17AvailabilityEntryV","s18SwiftSyntaxBuilder17CodeBlockItemListV","s18SwiftSyntaxBuilder17DeclNameArgumentsV","s18SwiftSyntaxBuilder17DeinitializerDeclV","s18SwiftSyntaxBuilder17DictionaryElementV","s18SwiftSyntaxBuilder17ExpressionPatternV","s18SwiftSyntaxBuilder17ExpressionSegmentV","s18SwiftSyntaxBuilder17FunctionParameterV","s18SwiftSyntaxBuilder17FunctionSignatureV","s18SwiftSyntaxBuilder17IdentifierPatternV","s18SwiftSyntaxBuilder17InfixOperatorExprV","s18SwiftSyntaxBuilder17InheritedTypeListV","s18SwiftSyntaxBuilder17InitializerClauseV","s18SwiftSyntaxBuilder17LayoutRequirementV","s18SwiftSyntaxBuilder17NonEmptyTokenListV","s18SwiftSyntaxBuilder17ObjCSelectorPieceV","s18SwiftSyntaxBuilder17ObjectLiteralExprV","s18SwiftSyntaxBuilder17PoundFilePathExprV","s18SwiftSyntaxBuilder17PoundFunctionExprV","s18SwiftSyntaxBuilder17QualifiedDeclNameV","s18SwiftSyntaxBuilder17StringLiteralExprV","s18SwiftSyntaxBuilder18AssociatedtypeDeclV","s18SwiftSyntaxBuilder18BinaryOperatorExprV","s18SwiftSyntaxBuilder18BooleanLiteralExprV","s18SwiftSyntaxBuilder18ClosureCaptureItemV","s18SwiftSyntaxBuilder18DeclModifierDetailV","s18SwiftSyntaxBuilder18ElseIfContinuationV","s18SwiftSyntaxBuilder18GenericRequirementV","s18SwiftSyntaxBuilder18GenericWhereClauseV","s18SwiftSyntaxBuilder18IfConfigClauseListV","s18SwiftSyntaxBuilder18IntegerLiteralExprV","s18SwiftSyntaxBuilder18MemberDeclListItemV","s18SwiftSyntaxBuilder18PatternBindingListV","s18SwiftSyntaxBuilder18PoundDsohandleExprV","s18SwiftSyntaxBuilder18PrefixOperatorExprV","s18SwiftSyntaxBuilder18SwitchDefaultLabelV","s18SwiftSyntaxBuilder19AccessLevelModifierV","s18SwiftSyntaxBuilder19AccessPathComponentV","s18SwiftSyntaxBuilder19EnumCaseElementListV","s18SwiftSyntaxBuilder19GenericArgumentListV","s18SwiftSyntaxBuilder19PostfixIfConfigExprV","s18SwiftSyntaxBuilder19PoundSourceLocationV","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV","s18SwiftSyntaxBuilder19SameTypeRequirementV","s18SwiftSyntaxBuilder19TargetFunctionEntryV","s18SwiftSyntaxBuilder19TuplePatternElementV","s18SwiftSyntaxBuilder19ValueBindingPatternV","s18SwiftSyntaxBuilder20AvailabilityArgumentV","s18SwiftSyntaxBuilder20AvailabilitySpecListV","s18SwiftSyntaxBuilder20ClassRestrictionTypeV","s18SwiftSyntaxBuilder20ConditionElementListV","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV","s18SwiftSyntaxBuilder20DeclNameArgumentListV","s18SwiftSyntaxBuilder20GenericParameterListV","s18SwiftSyntaxBuilder20MemberTypeIdentifierV","s18SwiftSyntaxBuilder20OptionalChainingExprV","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV","s18SwiftSyntaxBuilder20TupleExprElementListV","s18SwiftSyntaxBuilder20TupleTypeElementListV","s18SwiftSyntaxBuilder21AvailabilityConditionV","s18SwiftSyntaxBuilder21BackDeployVersionListV","s18SwiftSyntaxBuilder21DictionaryElementListV","s18SwiftSyntaxBuilder21DiscardAssignmentExprV","s18SwiftSyntaxBuilder21EditorPlaceholderExprV","s18SwiftSyntaxBuilder21FunctionParameterListV","s18SwiftSyntaxBuilder21GenericArgumentClauseV","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV","s18SwiftSyntaxBuilder21StringLiteralSegmentsV","s18SwiftSyntaxBuilder21SymbolicReferenceExprV","s18SwiftSyntaxBuilder21TypeInheritanceClauseV","s18SwiftSyntaxBuilder21TypeInitializerClauseV","s18SwiftSyntaxBuilder21UnresolvedPatternExprV","s18SwiftSyntaxBuilder22ClosureCaptureItemListV","s18SwiftSyntaxBuilder22CompositionTypeElementV","s18SwiftSyntaxBuilder22ConformanceRequirementV","s18SwiftSyntaxBuilder22DifferentiabilityParamV","s18SwiftSyntaxBuilder22GenericParameterClauseV","s18SwiftSyntaxBuilder22GenericRequirementListV","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV","s18SwiftSyntaxBuilder23DifferentiabilityParamsV","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV","s18SwiftSyntaxBuilder23TuplePatternElementListV","s18SwiftSyntaxBuilder23UnavailabilityConditionV","s18SwiftSyntaxBuilder24MatchingPatternConditionV","s18SwiftSyntaxBuilder24OptionalBindingConditionV","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV","s18SwiftSyntaxBuilder26CompositionTypeElementListV","s18SwiftSyntaxBuilder26DifferentiabilityParamListV","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV","s18SwiftSyntaxBuilder6AsExprV","s18SwiftSyntaxBuilder6DoStmtV","s18SwiftSyntaxBuilder6FormatV","s18SwiftSyntaxBuilder6IfStmtV","s18SwiftSyntaxBuilder6IsExprV","s18SwiftSyntaxBuilder7TryExprV","s18SwiftSyntaxBuilder8CaseItemV","s18SwiftSyntaxBuilder8DeclNameV","s18SwiftSyntaxBuilder8EnumDeclV","s18SwiftSyntaxBuilder8ExprListV","s18SwiftSyntaxBuilder8MoveExprV","s18SwiftSyntaxBuilder8ObjcNameV","s18SwiftSyntaxBuilder8TypeExprV","s18SwiftSyntaxBuilder9ActorDeclV","s18SwiftSyntaxBuilder9ArrayExprV","s18SwiftSyntaxBuilder9ArrayTypeV","s18SwiftSyntaxBuilder9ArrowExprV","s18SwiftSyntaxBuilder9AttributeV","s18SwiftSyntaxBuilder9AwaitExprV","s18SwiftSyntaxBuilder9BreakStmtV","s18SwiftSyntaxBuilder9CatchItemV","s18SwiftSyntaxBuilder9ClassDeclV","s18SwiftSyntaxBuilder9CodeBlockV","s18SwiftSyntaxBuilder9DeferStmtV","s18SwiftSyntaxBuilder9ElseBlockV","s18SwiftSyntaxBuilder9ForInStmtV","s18SwiftSyntaxBuilder9GuardStmtV","s18SwiftSyntaxBuilder9InOutExprV","s18SwiftSyntaxBuilder9ThrowStmtV","s18SwiftSyntaxBuilder9TokenListV","s18SwiftSyntaxBuilder9TupleExprV","s18SwiftSyntaxBuilder9TupleTypeV","s18SwiftSyntaxBuilder9WhileStmtV","s18SwiftSyntaxBuilder9YieldListV","s18SwiftSyntaxBuilder9YieldStmtV","s18SwiftSyntaxBuilder10AccessPathV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder10AccessPathV12arrayLiteralAcA013ExpressibleAsdE9Component_pd_tcfc","s18SwiftSyntaxBuilder10AccessPathV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder10AccessPathVyACSayAA013ExpressibleAsdE9Component_pGcfc","s18SwiftSyntaxBuilder10ImportDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD3Tok06importP00hldpmD4Kind0qR00hldrM4Path4pathAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0uV13AttributeList_pSgAsA0uv8ModifierZ0_pSgAsO05TokenB0VAsYSgAsA0uv6AccessS0_ptcfc","s18SwiftSyntaxBuilder10ReturnStmtV13leadingTrivia013garbageBeforeD7Keyword06returnJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pQ13ExprBuildable_pSgtcfc","s18SwiftSyntaxBuilder10SourceFileV13leadingTrivia23garbageBeforeStatements0h7BetweenJ11AndEOFToken8eofToken010statementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAmI0oB0VAA0qR17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10SourceFileV13leadingTrivia23garbageBeforeStatements10statements0h7BetweenJ11AndEOFToken8eofTokenAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qR17CodeBlockItemList_pAmI0pB0Vtcfc","s18SwiftSyntaxBuilder10StructDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword06structP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYSSAyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder10StructDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword06structP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder10SwitchCaseV13leadingTrivia24garbageBeforeUnknownAttr07unknownK00h7BetweenjK8AndLabel5label0hmoN10Statements010statementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0sT9Attribute_pSgAoA0stB9Buildable_pAoA0sT17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchCaseV13leadingTrivia24garbageBeforeUnknownAttr07unknownK00h7BetweenjK8AndLabel5label0hmoN10Statements10statementsAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0sT9Attribute_pSgAoA0stB9Buildable_pAoA0sT17CodeBlockItemList_ptcfc","s18SwiftSyntaxBuilder10SwitchStmtV13leadingTrivia013garbageBeforeD7Keyword06switchJ00h7BetweendJ13AndExpression10expression0hlnM9LeftBrace04leftQ00hlpqM5Cases0hlsm5RightQ005rightQ005casesC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsA0wX13ExprBuildable_pAsu2suA0wxD8CaseList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchStmtV13leadingTrivia013garbageBeforeD7Keyword06switchJ00h7BetweendJ13AndExpression10expression0hlnM9LeftBrace04leftQ00hlpqM5Cases5cases0hlsm5RightQ005rightQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsA0wX13ExprBuildable_pAsusA0wxD8CaseList_pAsUtcfc","s18SwiftSyntaxBuilder11CatchClauseV13leadingTrivia013garbageBeforeD7Keyword05catchJ00h7Betweendj3AndD5Items0kN00hldnM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0qrD8ItemList_pSgAoA0qr9CodeBlockvW0_pyXEtcfc","s18SwiftSyntaxBuilder11CatchClauseV13leadingTrivia013garbageBeforeD7Keyword05catchJ00h7Betweendj3AndD5Items0kN00hldnM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0qrD8ItemList_pSgAoA0qR9CodeBlock_ptcfc","s18SwiftSyntaxBuilder11CatchClauseV13leadingTrivia_04bodyC0AC0aB00G0V_AA0D8ItemListVAA022ExpressibleAsCodeBlockiJ0_pyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV13leadingTrivia22garbageBeforeLeftBrace04leftK00h7BetweenjK12AndSignature9signature0hmoN10Statements0hmqn5RightK005rightK0010statementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0uvdO0_pSgA2qsA0uV17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV13leadingTrivia22garbageBeforeLeftBrace04leftK00h7BetweenjK12AndSignature9signature0hmoN10Statements10statements0hmqn5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0uvdO0_pSgAqA0uV17CodeBlockItemList_pAqStcfc","s18SwiftSyntaxBuilder11KeyPathExprV13leadingTrivia22garbageBeforeBackslash9backslash0i7Betweenk7AndRootF004rootF00imofN10Expression10expressionAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stF9Buildable_pSgAoaR_ptcfc","s18SwiftSyntaxBuilder11LabeledStmtV13leadingTrivia22garbageBeforeLabelName05labelK00h7Betweenjk3AndJ5Colon0lO00hmjoN9Statement9statementAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0rsE9Buildable_ptcfc","s18SwiftSyntaxBuilder11LabeledStmtV13leadingTrivia22garbageBeforeLabelName05labelK00h7Betweenjk3AndJ5Colon0lO00hmjoN9Statement9statementAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoA0rsE9Buildable_ptcfc","s18SwiftSyntaxBuilder11TernaryExprV13leadingTrivia32garbageBeforeConditionExpression09conditionK00h7BetweenjK15AndQuestionMark08questionP00hmopN11FirstChoice05firstS00hmrsn5ColonP005colonP00hmupn6SecondS006secondS0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0yzE9Buildable_pAsO05TokenB0VAsaT_pAsvsaT_ptcfc","s18SwiftSyntaxBuilder11WhereClauseV13leadingTrivia013garbageBeforeD7Keyword05whereJ00h7BetweendJ14AndGuardResult05guardO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0qR13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder12AccessorDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ11AndModifier8modifier0hlnmD4Kind08accessorP00hldpM9Parameter9parameter0hlrM12AsyncKeyword05asyncU00hltum6ThrowsU006throwsU00hlwuM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA013ExpressibleAseN0_pSgAwS05TokenB0VAwA013ExpressibleAsdR0_pSgAWSSSgAWA1_SgAwA30ExpressibleAsCodeBlockItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder12AccessorDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ11AndModifier8modifier0hlnmD4Kind08accessorP00hldpM9Parameter9parameter0hlrM12AsyncKeyword05asyncU00hltum6ThrowsU006throwsU00hlwuM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA013ExpressibleAseN0_pSgAwS05TokenB0VAwA013ExpressibleAsdR0_pSgAWA1_SgAWA4_AwA22ExpressibleAsCodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12AccessorListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder12AccessorListV12arrayLiteralAcA013ExpressibleAsD4Decl_pd_tcfc","s18SwiftSyntaxBuilder12AccessorListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder12AccessorListVyACSayAA013ExpressibleAsD4Decl_pGcfc","s18SwiftSyntaxBuilder12ArrayElementV13leadingTrivia23garbageBeforeExpression10expression0h7BetweenJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qR13ExprBuildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder12CaseItemListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder12CaseItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder12CaseItemListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder12CaseItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder12ClosureParamV13leadingTrivia17garbageBeforeName4name0h7BetweenJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV13leadingTrivia013garbageBeforeD7Keyword08continueJ00h7BetweendJ8AndLabel5labelAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAMSSSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV13leadingTrivia013garbageBeforeD7Keyword08continueJ00h7BetweendJ8AndLabel5labelAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder12DeclModifierV13leadingTrivia17garbageBeforeName4name0h7BetweenJ9AndDetail6detailAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqdeN0_pSgtcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV13leadingTrivia23garbageBeforeAttributes10attributes0i7BetweenK12AndModifiers9modifiers0imonE7Keyword04caseQ00imeqN8Elements08elementsC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0uV13AttributeList_pSgAqA0uv8ModifierZ0_pSgAqM05TokenB0VAqA0uvde7ElementZ0_pyXEtcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV13leadingTrivia23garbageBeforeAttributes10attributes0i7BetweenK12AndModifiers9modifiers0imonE7Keyword04caseQ00imeqN8Elements8elementsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0uV13AttributeList_pSgAqA0uv8ModifierZ0_pSgAqM05TokenB0VAqA0uvde7ElementZ0_ptcfc","s18SwiftSyntaxBuilder12FunctionDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM11FuncKeyword04funcQ00hlpqM10Identifier10identifier0hlsM22GenericParameterClause07genericvW00hluvwM9Signature9signature0hlymu5WhereW00x5WhereW00hlu5WherewM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAsuvW0_pSgAyA013ExpressibleAsdY0_pAyA013ExpressibleAsu5WhereW0_pSgAyA30ExpressibleAsCodeBlockItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder12FunctionDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM11FuncKeyword04funcQ00hlpqM10Identifier10identifier0hlsM22GenericParameterClause07genericvW00hluvwM9Signature9signature0hlymu5WhereW00x5WhereW00hlu5WherewM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAsuvW0_pSgAyA013ExpressibleAsdY0_pAyA013ExpressibleAsu5WhereW0_pSgAyA22ExpressibleAsCodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12FunctionTypeV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK12AndArguments9arguments0hmon5RightK005rightK00hmqkN12AsyncKeyword05asyncT00hmstn16ThrowsOrRethrowsT006throwswxT00hmvwxtN5Arrow5arrow0hmzn6ReturnE006returnE0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAS05TokenB0VAwA018ExpressibleAsTupleE11ElementList_pAwywYSgAWA_AwywA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder12GarbageNodesV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder12GarbageNodesV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder12GarbageNodesV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder12GarbageNodesVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder12IfConfigDeclV13leadingTrivia20garbageBeforeClauses7clauses0i7BetweenK13AndPoundEndif05poundP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsdE10ClauseList_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder12MetatypeTypeV13leadingTrivia017garbageBeforeBaseE004baseE00h7BetweenjE9AndPeriod6period0hlnmE10OrProtocol04typepQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0stE9Buildable_pAoK05TokenB0VAOSStcfc","s18SwiftSyntaxBuilder12MetatypeTypeV13leadingTrivia017garbageBeforeBaseE004baseE00h7BetweenjE9AndPeriod6period0hlnmE10OrProtocol04typepQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0stE9Buildable_pAoK05TokenB0VAoRtcfc","s18SwiftSyntaxBuilder12ModifierListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder12ModifierListV12arrayLiteralAcA017ExpressibleAsDeclD0_pd_tcfc","s18SwiftSyntaxBuilder12ModifierListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder12ModifierListVyACSayAA017ExpressibleAsDeclD0_pGcfc","s18SwiftSyntaxBuilder12ObjCSelectorV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder12ObjCSelectorV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder12ObjCSelectorV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder12ObjCSelectorVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder12OperatorDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword08operatorP00hldpM10Identifier10identifier0hlrmd10PrecedenceM5Types0qtmU0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0vW13AttributeList_pSgAsA0vW12ModifierList_pSgAsO05TokenB0VAsysA0vwdtmU0_pSgtcfc","s18SwiftSyntaxBuilder12OptionalTypeV13leadingTrivia020garbageBeforeWrappedE007wrappedE00h7BetweenjE15AndQuestionMark08questionO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrE9Buildable_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword08protocolP00hldpM10Identifier10identifier0hlrM27PrimaryAssociatedTypeClause07primaryuvW00hltuvwm11InheritanceW0011inheritanceW00hlywm12GenericWhereW0012genericWhereW00hl12GenericWherewM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYSSAyA013ExpressibleAstuvW0_pSgAyA013ExpressibleAsvyW0_pSgAyA025ExpressibleAsGenericWhereW0_pSgAyA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword08protocolP00hldpM10Identifier10identifier0hlrM27PrimaryAssociatedTypeClause07primaryuvW00hltuvwm11InheritanceW0011inheritanceW00hlywm12GenericWhereW0012genericWhereW00hl12GenericWherewM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAstuvW0_pSgAyA013ExpressibleAsvyW0_pSgAyA025ExpressibleAsGenericWhereW0_pSgAyA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder12ReturnClauseV13leadingTrivia18garbageBeforeArrow5arrow0h7Betweenj3AndD4Type06returnN0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqN9Buildable_ptcfc","s18SwiftSyntaxBuilder12SequenceExprV13leadingTrivia21garbageBeforeElements08elementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0lmE4List_pyXEtcfc","s18SwiftSyntaxBuilder12SequenceExprV13leadingTrivia21garbageBeforeElements8elementsAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0lmE4List_ptcfc","s18SwiftSyntaxBuilder12SuperRefExprV13leadingTrivia013garbageBeforeD7Keyword05superK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder12TuplePatternV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK11AndElements0hmon5RightK005rightK008elementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0stdE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder12TuplePatternV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK11AndElements8elements0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stdE11ElementList_pAoQtcfc","s18SwiftSyntaxBuilder12VariableDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM15LetOrVarKeyword03letqrS00hlpqrsM8Bindings08bindingsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0wX13AttributeList_pSgAqA0wX12ModifierList_pSgAqM05TokenB0VAqA0wX18PatternBindingList_pyXEtcfc","s18SwiftSyntaxBuilder12VariableDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM15LetOrVarKeyword03letqrS00hlpqrsM8Bindings8bindingsAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0wX13AttributeList_pSgAqA0wX12ModifierList_pSgAqM05TokenB0VAqA0wX18PatternBindingList_ptcfc","s18SwiftSyntaxBuilder12VariableDeclV13leadingTrivia_4name4type11initializerAC0aB00G0V_AH05TokenB0VAA30ExpressibleAsIdentifierPattern_pAA0lM14TypeAnnotation_pSgAA0lM17InitializerClause_pSgtcfc","s18SwiftSyntaxBuilder12VersionTupleV13leadingTrivia23garbageBeforeMajorMinor05majorK00h7BetweenjK14AndPatchPeriod05patchP00hmopnoD00qD0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsB9Buildable_pAoK05TokenB0VSgAOSSSgtcfc","s18SwiftSyntaxBuilder12VersionTupleV13leadingTrivia23garbageBeforeMajorMinor05majorK00h7BetweenjK14AndPatchPeriod05patchP00hmopnoD00qD0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsB9Buildable_pAoK05TokenB0VSgAoStcfc","s18SwiftSyntaxBuilder13AccessorBlockV13leadingTrivia22garbageBeforeLeftBrace04leftK00h7BetweenjK12AndAccessors9accessors0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stD4List_pAoQtcfc","s18SwiftSyntaxBuilder13AsTypePatternV13leadingTrivia013garbageBeforeF07pattern0i7Betweenf3AndD7Keyword02asN00ildnmE04typeAC0aB00H0V_AA011ExpressibleD12GarbageNodes_pSgAA0qdF9Buildable_pAoK05TokenB0VAoA0qdeT0_ptcfc","s18SwiftSyntaxBuilder13AttributeListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder13AttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder13AttributeListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder13AttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder13CatchItemListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder13CatchItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder13CatchItemListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder13CatchItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder13CodeBlockItemV13leadingTrivia013garbageBeforeF04item0i7BetweenF12AndSemicolon9semicolon0ilnM11ErrorTokens05errorQ0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0stB9Buildable_pAoK05TokenB0VSgAoaP_pSgtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword09extensionP00hldpM12ExtendedType08extendedS00hlrsM17InheritanceClause011inheritanceV00hluvm12GenericWhereV007genericyV00hlxyvM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAwA013ExpressibleAsS9Buildable_pAwA013ExpressibleAssuV0_pSgAwA013ExpressibleAsxyV0_pSgAwA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword09extensionP00hldpM12ExtendedType08extendedS00hlrsM17InheritanceClause011inheritanceV00hluvm12GenericWhereV007genericyV00hlxyvM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAwA013ExpressibleAsS9Buildable_pAwA013ExpressibleAssuV0_pSgAwA013ExpressibleAsxyV0_pSgAwA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder13InheritedTypeV13leadingTrivia013garbageBeforeE4Name04typeJ00h7BetweeneJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrE9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder13IsTypePatternV13leadingTrivia013garbageBeforeD7Keyword02isK00i7Betweendk3AndE04typeAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqE9Buildable_ptcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV13leadingTrivia013garbageBeforeE04name0i7BetweenE6AndDot3dotAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV13leadingTrivia013garbageBeforeE04name0i7BetweenE6AndDot3dotAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder13PoundFileExprV13leadingTrivia013garbageBeforedE005poundE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder13PoundLineExprV13leadingTrivia013garbageBeforedE005poundE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder13StringSegmentV13leadingTrivia20garbageBeforeContent7contentAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder13StringSegmentV13leadingTrivia20garbageBeforeContent7contentAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSStcfc","s18SwiftSyntaxBuilder13SubscriptDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword09subscriptP00hldpM22GenericParameterClause07genericsT00hlrstM7Indices7indices0hlvM6Result6result0hlxmr5WhereT00uzT00hlrztM8Accessor8accessorAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAyA013ExpressibleAsrsT0_pSgAyA013ExpressibleAssT0_pAyA019ExpressibleAsReturnT0_pAyA013ExpressibleAsrzT0_pSgAyA013ExpressibleAsB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder13SubscriptExprV13leadingTrivia29garbageBeforeCalledExpression06calledK00h7BetweenjK14AndLeftBracket04leftP00hmopN12ArgumentList08argumentS00hmrsn5RightP005rightP00hmupN15TrailingClosure08trailingX00hmwxn10AdditionalW8Closures010additionalW8ClosuresAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsE9Buildable_pAuQ05TokenB0VAuA018ExpressibleAsTuplee7ElementS0_pAuxuA013ExpressibleAsxE0_pSgAuA021ExpressibleAsMultiplewx7ElementS0_pSgtcfc","s18SwiftSyntaxBuilder13SubscriptExprV13leadingTrivia29garbageBeforeCalledExpression06calledK00h7BetweenjK14AndLeftBracket04leftP00hmopN12ArgumentList0hmrsn5RightP005rightP00hmtpN15TrailingClosure08trailingW00hmvwn10AdditionalV8Closures010additionalvZ008argumentsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsE9Buildable_pAuQ05TokenB0VA2uxuA013ExpressibleAswE0_pSgAuA021ExpressibleAsMultiplevw7ElementS0_pSgAA018ExpressibleAsTuplee7ElementS0_pyXEtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword09typealiasP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvM11Initializer11initializer0hlxmt5WhereV00wzV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWA1_AwA013ExpressibleAstuV0_pSgAwA017ExpressibleAsTypexV0_pAwA013ExpressibleAstzV0_pSgtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword09typealiasP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvM11Initializer11initializer0hlxmt5WhereV00wzV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWSSAwA013ExpressibleAstuV0_pSgAwA017ExpressibleAsTypexV0_pAwA013ExpressibleAstzV0_pSgtcfc","s18SwiftSyntaxBuilder14AssignmentExprV13leadingTrivia24garbageBeforeAssignToken06assignK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAG0kB0Vtcfc","s18SwiftSyntaxBuilder14AttributedTypeV13leadingTrivia22garbageBeforeSpecifier9specifier0h7BetweenJ13AndAttributes10attributes0hlnm4BaseE004baseE0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VSgAoA0rS13AttributeList_pSgAoA0rsE9Buildable_ptcfc","s18SwiftSyntaxBuilder14DictionaryExprV10leftSquare05rightG007contentC0AC0aB005TokenB0V_AiA013ExpressibleAsD11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder14DictionaryExprV13leadingTrivia23garbageBeforeLeftSquare04leftK00h7BetweenjK10AndContent7content0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stB9Buildable_pAoQtcfc","s18SwiftSyntaxBuilder14DictionaryTypeV13leadingTrivia30garbageBeforeLeftSquareBracket04leftkL00h7Betweenjkl6AndKeyE003keyE00hnpeO5Colon5colon0hnro5ValueE005valueE00hnteo5RightkL005rightkL0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsA0xyE9Buildable_pAsusaV_pAsUtcfc","s18SwiftSyntaxBuilder14ExpressionStmtV13leadingTrivia013garbageBeforeD010expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0kL13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder14IdentifierExprV13leadingTrivia013garbageBeforeD010identifier0h7BetweenD20AndDeclNameArguments04declnO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0qrmnO0_pSgtcfc","s18SwiftSyntaxBuilder14IdentifierExprVyACSScfc","s18SwiftSyntaxBuilder14IdentifierListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder14IdentifierListV12arrayLiteralAC0aB005TokenB0Vd_tcfc","s18SwiftSyntaxBuilder14IdentifierListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder14IdentifierListVyACSay0aB005TokenB0VGcfc","s18SwiftSyntaxBuilder14IfConfigClauseV13leadingTrivia25garbageBeforePoundKeyword05poundL00i7BetweenkL12AndCondition9condition0inpO8Elements8elementsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0tU13ExprBuildable_pSgAoA0tubZ0_ptcfc","s18SwiftSyntaxBuilder14MemberDeclListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder14MemberDeclListV12arrayLiteralAcA013ExpressibleAsdeF4Item_pd_tcfc","s18SwiftSyntaxBuilder14MemberDeclListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder14MemberDeclListVyACSayAA013ExpressibleAsdeF4Item_pGcfc","s18SwiftSyntaxBuilder14NilLiteralExprV13leadingTrivia013garbageBeforeD7Keyword03nilK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder14PatternBindingV13leadingTrivia013garbageBeforeD07pattern0h7BetweenD17AndTypeAnnotation04typeN00hkmnL11Initializer11initializer0hkpL8Accessor8accessor0hkrL13TrailingComma08trailingU0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0wxD9Buildable_pAsA0wxmN0_pSgAsA0wxP6Clause_pSgAsA0wxB9Buildable_pSgAsO05TokenB0VSgtcfc","s18SwiftSyntaxBuilder14PoundErrorDeclV13leadingTrivia013garbageBeforedE005poundE00i7BetweendE12AndLeftParen04leftO00ilnoM7Message7message0ilqm5RightO005rightO0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0uV17StringLiteralExpr_pAqStcfc","s18SwiftSyntaxBuilder14SpecializeExprV13leadingTrivia23garbageBeforeExpression10expression0h7BetweenJ24AndGenericArgumentClause07genericoP0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsE9Buildable_pAmA0rsnoP0_ptcfc","s18SwiftSyntaxBuilder14SwitchCaseListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder14SwitchCaseListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder14SwitchCaseListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder14SwitchCaseListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder14TypeAnnotationV13leadingTrivia18garbageBeforeColon5colon0h7Betweenj3AndD04typeAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0opD9Buildable_ptcfc","s18SwiftSyntaxBuilder14TypeAnnotationVyACSScfc","s18SwiftSyntaxBuilder15CatchClauseListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder15CatchClauseListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder15CatchClauseListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder15CatchClauseListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder15CompositionTypeV13leadingTrivia21garbageBeforeElements8elementsAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0lmdE11ElementList_ptcfc","s18SwiftSyntaxBuilder15CustomAttributeV13leadingTrivia24garbageBeforeAtSignToken02atkL00h7Betweenjkl3AndE4Name09attributeP00hnepO9LeftParen04leftS00hnrsO12ArgumentList08argumentV00hnuvo5RightS005rightS0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO0lB0VAsA0Z15AsTypeBuildable_pAsUSgAsA0z18AsTupleExprElementV0_pSgAsWtcfc","s18SwiftSyntaxBuilder15CustomAttributeV13leadingTrivia24garbageBeforeAtSignToken02atkL00h7Betweenjkl3AndE4Name09attributeP00hnepO9LeftParen04leftS00hnrsO12ArgumentList0hnuvo5RightS005rightS008argumentvC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO0lB0VAsA0Z15AsTypeBuildable_pAsUSgA2swA0z18AsTupleExprElementV0_pSgyXEtcfc","s18SwiftSyntaxBuilder15DeclarationStmtV13leadingTrivia013garbageBeforeD011declarationAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0kL13DeclBuildable_ptcfc","s18SwiftSyntaxBuilder15EnumCaseElementV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK18AndAssociatedValue010associatedP00imopn3RawP003rawP00imrpN13TrailingComma08trailingU0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0wX15ParameterClause_pSgAqA0wX17InitializerClause_pSgAqSSgtcfc","s18SwiftSyntaxBuilder15EnumCaseElementV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK18AndAssociatedValue010associatedP00imopn3RawP003rawP00imrpN13TrailingComma08trailingU0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAqA0wX15ParameterClause_pSgAqA0wX17InitializerClause_pSgAqM05TokenB0VSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV13leadingTrivia17garbageBeforeType4type0i7BetweenK9AndPeriod6period0imonE4Name04caseQ00imeqN15AssociatedTuple010associatedT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0vwK9Buildable_pSgAqM05TokenB0VAQSSAqA0vwtF0_pSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV13leadingTrivia17garbageBeforeType4type0i7BetweenK9AndPeriod6period0imonE4Name04caseQ00imeqN15AssociatedTuple010associatedT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0vwK9Buildable_pSgAqM05TokenB0VAquqA0vwtF0_pSgtcfc","s18SwiftSyntaxBuilder15FallthroughStmtV13leadingTrivia013garbageBeforeD7Keyword011fallthroughJ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder15ForcedValueExprV13leadingTrivia23garbageBeforeExpression10expression0i7BetweenK18AndExclamationMark011exclamationP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsF9Buildable_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder15GenericArgumentV13leadingTrivia013garbageBeforeE4Type08argumentJ00h7BetweeneJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrJ9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder15InitializerDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM11InitKeyword04initQ00hlpqM12OptionalMark08optionalT00hlstM22GenericParameterClause07genericwX00hlvwxM9Signature9signature0hlzmv5WhereX00y5WhereX00hlv5WherexM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_SgAyA013ExpressibleAsvwX0_pSgAyA021ExpressibleAsFunctionZ0_pAyA013ExpressibleAsv5WhereX0_pSgAyA30ExpressibleAsCodeBlockItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder15InitializerDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM11InitKeyword04initQ00hlpqM12OptionalMark08optionalT00hlstM22GenericParameterClause07genericwX00hlvwxM9Signature9signature0hlzmv5WhereX00y5WhereX00hlv5WherexM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_SgAyA013ExpressibleAsvwX0_pSgAyA021ExpressibleAsFunctionZ0_pAyA013ExpressibleAsv5WhereX0_pSgAyA22ExpressibleAsCodeBlock_pSgtcfc","s18SwiftSyntaxBuilder15KeyPathBaseExprV13leadingTrivia19garbageBeforePeriod6periodAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV13leadingTrivia22garbageBeforeLeftBrace04leftL00i7BetweenkL10AndMembers0inpo5RightL005rightL007membersC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0tudE4List_pyXEtcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV13leadingTrivia22garbageBeforeLeftBrace04leftL00i7BetweenkL10AndMembers7members0inpo5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0tudE4List_pAoQtcfc","s18SwiftSyntaxBuilder15ObjcKeyPathExprV13leadingTrivia013garbageBeforeeF003keyF00j7BetweeneF12AndLeftParen04leftP00jmopN4Name4name0jmrn5RightP005rightP0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0vwdR0_pAqStcfc","s18SwiftSyntaxBuilder15OptionalPatternV13leadingTrivia016garbageBeforeSubE003subE00h7BetweenjE15AndQuestionMark08questionO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrE9Buildable_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder15ParameterClauseV13leadingTrivia22garbageBeforeLeftParen04leftK00h7Betweenjk3AndD4List09parameterO00hmdon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0st8FunctiondO0_pAoQtcfc","s18SwiftSyntaxBuilder15ParameterClauseV13leadingTrivia22garbageBeforeLeftParen04leftK00h7Betweenjk3AndD4List0hmdon5RightK005rightK009parameteroC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0st8FunctiondO0_pyXEtcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV13leadingTrivia013garbageBeforedE005poundE00i7BetweendE12AndLeftParen04leftO00ilnoM9Condition9condition0ilqM5Comma5comma0ilsM7Message7message0ilum5RightO005rightO0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAQ05TokenB0VAuwuA0yZ13ExprBuildable_pAuWSgAUSSSgAuWtcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV13leadingTrivia013garbageBeforedE005poundE00i7BetweendE12AndLeftParen04leftO00ilnoM9Condition9condition0ilqM5Comma5comma0ilsM7Message7message0ilum5RightO005rightO0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAQ05TokenB0VAuwuA0yZ13ExprBuildable_pAuWSgAuyuWtcfc","s18SwiftSyntaxBuilder15PoundColumnExprV13leadingTrivia013garbageBeforedE005poundE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder15PoundFileIDExprV13leadingTrivia013garbageBeforedE2ID05poundeK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV13leadingTrivia013garbageBeforeD7Keyword06repeatK00i7BetweendK7AndBody0imoneK005whileK00imekN9Condition9condition04bodyC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VA2qsqA0tU13ExprBuildable_pAA0tU17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV13leadingTrivia013garbageBeforeD7Keyword06repeatK00i7BetweendK7AndBody4body0imoneK005whileK00imekN9Condition9conditionAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0tU9CodeBlock_pAqsqA0tU13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV13leadingTrivia013garbageBeforeE7Keyword04caseK00i7Betweenek3AndE5Items0imeoN5Colon5colon0loC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0rsE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV13leadingTrivia013garbageBeforeE7Keyword04caseK00i7Betweenek3AndE5Items0lO00imeoN5Colon5colonAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0rsE8ItemList_pAoQtcfc","s18SwiftSyntaxBuilder15WildcardPatternV13leadingTrivia013garbageBeforeD08wildcard0h7BetweenD17AndTypeAnnotation04typeN0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqmN0_pSgtcfc","s18SwiftSyntaxBuilder16ArrayElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder16ArrayElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ArrayElementListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder16ArrayElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureParamListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder16ClosureParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ClosureParamListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder16ClosureParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureSignatureV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ10AndCapture7capture0hlnM5Input5input0hlpM12AsyncKeyword05asyncS00hlrsM9ThrowsTok06throwsV00hluvM6Output6output0hlxm2InV002inV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA013ExpressibleAsdnE0_pSgAwA013ExpressibleAsB9Buildable_pSgAWSSSgAwS05TokenB0VSgAwA25ExpressibleAsReturnClause_pSgAWA4_tcfc","s18SwiftSyntaxBuilder16ClosureSignatureV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ10AndCapture7capture0hlnM5Input5input0hlpM12AsyncKeyword05asyncS00hlrsM9ThrowsTok06throwsV00hluvM6Output6output0hlxm2InV002inV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA013ExpressibleAsdnE0_pSgAwA013ExpressibleAsB9Buildable_pSgAwS05TokenB0VSgAWA4_AwA25ExpressibleAsReturnClause_pSgAWA3_tcfc","s18SwiftSyntaxBuilder16ConditionElementV13leadingTrivia013garbageBeforeD09condition0h7BetweenD16AndTrailingComma08trailingN0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0pqB9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder16DeclNameArgumentV13leadingTrivia013garbageBeforeE04name0i7BetweenE8AndColon5colonAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOtcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV05floatE0ACSf_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV13leadingTrivia27garbageBeforeFloatingDigits08floatingL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV13leadingTrivia27garbageBeforeFloatingDigits08floatingL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSStcfc","s18SwiftSyntaxBuilder16FloatLiteralExprVyACSfcfc","s18SwiftSyntaxBuilder16FunctionCallExprV13leadingTrivia29garbageBeforeCalledExpression06calledL00i7BetweenkL12AndLeftParen04leftQ00inpqO12ArgumentList08argumentT00insto5RightQ005rightQ00invqO15TrailingClosure08trailingY00inxyo10AdditionalX8Closures010additionalX8ClosuresAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsF9Buildable_pAuQ05TokenB0VSgAuA018ExpressibleAsTuplef7ElementT0_pAuyuA013ExpressibleAsyF0_pSgAuA021ExpressibleAsMultiplexy7ElementT0_pSgtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV13leadingTrivia29garbageBeforeCalledExpression06calledL00i7BetweenkL12AndLeftParen04leftQ00inpqO12ArgumentList0insto5RightQ005rightQ00inuqO15TrailingClosure08trailingX00inwxo10AdditionalW8Closures010additionalW8Closures08argumenttC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsF9Buildable_pAuQ05TokenB0VSgA2uyuA013ExpressibleAsxF0_pSgAuA021ExpressibleAsMultiplewx7ElementT0_pSgAA018ExpressibleAsTuplef7ElementT0_pyXEtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV_15trailingClosure26additionalTrailingClosures12argumentListAcA013ExpressibleAsF9Buildable_p_AA0nohF0_pSgAA08Multiplejh7ElementM0VSgAA0no5TuplefrM0_pyXEtcfc","s18SwiftSyntaxBuilder16FunctionDeclNameV13leadingTrivia013garbageBeforeF04name0i7BetweenF12AndArguments9argumentsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0pqB9Buildable_pAmA0pqefN0_pSgtcfc","s18SwiftSyntaxBuilder16GenericParameterV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ7AndName4name0hlnM5Colon5colon0hlpM13InheritedType09inheritedS00hlrsM13TrailingComma08trailingV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0xY13AttributeList_pSgASSSAsO05TokenB0VSgAsA0xyS9Buildable_pSgAsXtcfc","s18SwiftSyntaxBuilder16GenericParameterV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ7AndName4name0hlnM5Colon5colon0hlpM13InheritedType09inheritedS00hlrsM13TrailingComma08trailingV0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0xY13AttributeList_pSgAsO05TokenB0VAsWSgAsA0xyS9Buildable_pSgAsXtcfc","s18SwiftSyntaxBuilder16MemberAccessExprV13leadingTrivia17garbageBeforeBase4base0i7BetweenK6AndDot3dot0imoN4Name4name0imqn4DeclQ9Arguments04declqT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0vwF9Buildable_pSgAqM05TokenB0VAquqA0vwsqT0_pSgtcfc","s18SwiftSyntaxBuilder16MemberAccessExprV4base3dot4name17declNameArgumentsAcA013ExpressibleAsF9Buildable_pSg_0aB005TokenB0VSSAA0mn4DeclkL0_pSgtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV13leadingTrivia018garbageBeforePoundE005poundE00i7BetweenkE12AndLeftParen04leftP00imopN4Kind4kind0imrN5Colon5colon0imtN4Name4name0imvn5RightP005rightP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAQ05TokenB0VAuwUSSSgAuWSgAuA0z2AsF9Buildable_pAuWtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV13leadingTrivia018garbageBeforePoundE005poundE00i7BetweenkE12AndLeftParen04leftP00imopN4Kind4kind0imrN5Colon5colon0imtN4Name4name0imvn5RightP005rightP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAQ05TokenB0VAuwuWSgAuxuA0z2AsF9Buildable_pAuWtcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV13leadingTrivia23garbageBeforeExpression10expression0i7BetweenK16AndOperatorToken08operatorP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsF9Buildable_pAMSStcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV13leadingTrivia23garbageBeforeExpression10expression0i7BetweenK16AndOperatorToken08operatorP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsF9Buildable_pAmI0pB0Vtcfc","s18SwiftSyntaxBuilder16PoundWarningDeclV13leadingTrivia013garbageBeforedE005poundE00i7BetweendE12AndLeftParen04leftO00ilnoM7Message7message0ilqm5RightO005rightO0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0uV17StringLiteralExpr_pAqStcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV13leadingTrivia013garbageBeforeD05regexAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV13leadingTrivia013garbageBeforeD05regexAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSStcfc","s18SwiftSyntaxBuilder16TupleExprElementV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN10Expression10expression0imqN13TrailingComma08trailingT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VSgAqtqA0vwE9Buildable_pAqTtcfc","s18SwiftSyntaxBuilder16TupleExprElementV5label10expressionACSSSg_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder16TupleTypeElementV13leadingTrivia18garbageBeforeInOut02inL00i7BetweenkL7AndName4name0inpo6SecondP006secondP00inrpO5Colon5colon0intoE04type0ineO8Ellipsis8ellipsis0inwO11Initializer11initializer0inyO13TrailingComma13trailingCommaAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAU05TokenB0VSgAYA0_AYA0_AYA0_AyA013ExpressibleAsE9Buildable_pAYA0_AyA013ExpressibleAsY6Clause_pSgAYA0_tcfc","s18SwiftSyntaxBuilder17AccessorParameterV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK7AndName4name0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAOSSAoQtcfc","s18SwiftSyntaxBuilder17AccessorParameterV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK7AndName4name0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoQtcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV13leadingTrivia18garbageBeforeLabel5label0h7BetweenJ8AndColon5colon0hlnmD4List012availabilityP00hldpM9Semicolon9semicolonAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0tud4SpecP0_pAqStcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV13leadingTrivia18garbageBeforeLabel5label0h7BetweenJ8AndColon5colon0hlnmD4List012availabilityP00hldpM9Semicolon9semicolonAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSSAqM05TokenB0VAqA0tud4SpecP0_pAqStcfc","s18SwiftSyntaxBuilder17CodeBlockItemListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder17CodeBlockItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder17CodeBlockItemListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder17CodeBlockItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder17DeclNameArgumentsV13leadingTrivia22garbageBeforeLeftParen04leftL00i7Betweenkl3AndF09arguments0info5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stdE12ArgumentList_pAoQtcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM13DeinitKeyword06deinitQ00hlpqM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0uV13AttributeList_pSgAqA0uv8ModifierZ0_pSgAqM05TokenB0VAqA0uv13CodeBlockItemZ0_pSgyXEtcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnM13DeinitKeyword06deinitQ00hlpqM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0uV13AttributeList_pSgAqA0uv8ModifierZ0_pSgAqM05TokenB0VAqA0uV9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder17DictionaryElementV13leadingTrivia26garbageBeforeKeyExpression03keyK00h7BetweenjK8AndColon5colon0hmon5ValueK005valueK00hmqkN13TrailingComma08trailingT0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0vW13ExprBuildable_pAqM05TokenB0VAqaR_pAqTSgtcfc","s18SwiftSyntaxBuilder17ExpressionPatternV13leadingTrivia013garbageBeforeD010expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0kL13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV13leadingTrivia22garbageBeforeBackslash9backslash0h7BetweenJ12AndDelimiter9delimiter0hlnM9LeftParen04leftQ00hlpqM11Expressions0hlsm5RightQ005rightQ0011expressionsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VASSSSgAsu2suA0wX20TupleExprElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV13leadingTrivia22garbageBeforeBackslash9backslash0h7BetweenJ12AndDelimiter9delimiter0hlnM9LeftParen04leftQ00hlpqM11Expressions11expressions0hlsm5RightQ005rightQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsUSgAsusA0wX20TupleExprElementList_pAsUtcfc","s18SwiftSyntaxBuilder17FunctionParameterV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndFirstName05firstO00hlnom6SecondO006secondO00hlqoM5Colon5colon0hlsM4Type4type0hluM8Ellipsis8ellipsis0hlwM15DefaultArgument07defaultZ00hlyzM13TrailingComma13trailingCommaAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyU05TokenB0VSgAYA2_AYA2_AyA013ExpressibleAsU9Buildable_pSgAYA2_AyA30ExpressibleAsInitializerClause_pSgAYA2_tcfc","s18SwiftSyntaxBuilder17FunctionSignatureV13leadingTrivia18garbageBeforeInput5input0h7BetweenJ24AndAsyncOrReasyncKeyword05asyncopQ00hlnopqm6Throwso8RethrowsQ006throwsotQ00hlsotqM6Output6outputAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0xY15ParameterClause_pAQSSSgAqM05TokenB0VSgAqA0xY12ReturnClause_pSgtcfc","s18SwiftSyntaxBuilder17FunctionSignatureV13leadingTrivia18garbageBeforeInput5input0h7BetweenJ24AndAsyncOrReasyncKeyword05asyncopQ00hlnopqm6Throwso8RethrowsQ006throwsotQ00hlsotqM6Output6outputAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0xY15ParameterClause_pAqM05TokenB0VSgAquqA0xY12ReturnClause_pSgtcfc","s18SwiftSyntaxBuilder17IdentifierPatternV13leadingTrivia013garbageBeforeD010identifierAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder17IdentifierPatternVyACSScfc","s18SwiftSyntaxBuilder17InfixOperatorExprV13leadingTrivia24garbageBeforeLeftOperand04leftL00i7Betweenkl3AndeL008operatorL00inelo5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0stF9Buildable_pAoaP_pAoaP_ptcfc","s18SwiftSyntaxBuilder17InheritedTypeListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder17InheritedTypeListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder17InheritedTypeListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder17InheritedTypeListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder17InitializerClauseV13leadingTrivia18garbageBeforeEqual5equal0h7BetweenJ8AndValue5valueAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder17LayoutRequirementV13leadingTrivia27garbageBeforeTypeIdentifier04typeK00h7BetweenjK8AndColon5colon0hmonD10Constraint06layoutQ00hmdqN9LeftParen04leftT00hmstN4Size4size0hmvN5Comma5comma0hmxN9Alignment9alignment0hmzn5RightT005rightT0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsJ9Buildable_pAyU05TokenB0VAYA0_AYA0_SgAYA1_AYA1_AYA1_AYA1_tcfc","s18SwiftSyntaxBuilder17LayoutRequirementV13leadingTrivia27garbageBeforeTypeIdentifier04typeK00h7BetweenjK8AndColon5colon0hmonD10Constraint06layoutQ00hmdqN9LeftParen04leftT00hmstN4Size4size0hmvN5Comma5comma0hmxN9Alignment9alignment0hmzn5RightT005rightT0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA013ExpressibleAsJ9Buildable_pAyU05TokenB0VAYSSAYA0_SgAYSSSgAYA1_AYA2_AYA1_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListV12arrayLiteralAC0aB00fB0Vd_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListVyACSay0aB00fB0VGcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV13leadingTrivia17garbageBeforeName4name0i7BetweenK8AndColon5colonAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VSgAmPtcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV13leadingTrivia17garbageBeforeName4name0i7BetweenK8AndColon5colonAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK12AndLeftParen04leftP00imopN9Arguments0imrn5RightP005rightP009argumentsC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqs2qsA0vw5TupleF11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK12AndLeftParen04leftP00imopN9Arguments9arguments0imrn5RightP005rightP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0vw5TupleF11ElementList_pAqStcfc","s18SwiftSyntaxBuilder17PoundFilePathExprV13leadingTrivia013garbageBeforedeF005poundeF0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder17PoundFunctionExprV13leadingTrivia013garbageBeforedE005poundE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder17QualifiedDeclNameV13leadingTrivia21garbageBeforeBaseType04baseL00i7BetweenkL6AndDot3dot0inpoF04name0infO9Arguments9argumentsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0uvL9Buildable_pSgAqM05TokenB0VSgAquqA0uvefS0_pSgtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13leadingTrivia26garbageBeforeOpenDelimiter04openL00i7Betweenkl3AndK5Quote0mP00inkpO8Segments8segments0inqo5CloseP005closeP00insposL00tL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VSgAsusA0uvdeQ0_pAsusVtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13leadingTrivia26garbageBeforeOpenDelimiter04openL00i7Betweenkl3AndK5Quote0mP00inkpO8Segments8segments0inqo5CloseP005closeP00insposL00tL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAsO05TokenB0VAsA0uvdeQ0_pAsvsTtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13openDelimiter0G5Quote_05closeI00jH0AC0aB005TokenB0VSg_AJSSAjKtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV3rawACSS_tcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword014associatedtypeP00hldpM10Identifier10identifier0hlrM17InheritanceClause011inheritanceU00hltuM11Initializer11initializer0hlwm12GenericWhereU007genericzU0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWA1_AwA017ExpressibleAsTypetU0_pSgAwA017ExpressibleAsTypewU0_pSgAwA013ExpressibleAsyzU0_pSgtcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword014associatedtypeP00hldpM10Identifier10identifier0hlrM17InheritanceClause011inheritanceU00hltuM11Initializer11initializer0hlwm12GenericWhereU007genericzU0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWSSAwA017ExpressibleAsTypetU0_pSgAwA017ExpressibleAsTypewU0_pSgAwA013ExpressibleAsyzU0_pSgtcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprV13leadingTrivia013garbageBeforeE5Token08operatorK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG0kB0Vtcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprVyACSScfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV07booleanE0ACSb_tcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV13leadingTrivia013garbageBeforedE007booleanE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprVyACSbcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV13leadingTrivia22garbageBeforeSpecifier9specifier0i7BetweenK7AndName4name0imoN11AssignToken06assignR00imqrN10Expression10expression0imtN13TrailingComma08trailingW0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0yzR4List_pSgASSSSgAsO0rB0VSgAsA0yZ13ExprBuildable_pAsYtcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV13leadingTrivia22garbageBeforeSpecifier9specifier0i7BetweenK7AndName4name0imoN11AssignToken06assignR00imqrN10Expression10expression0imtN13TrailingComma08trailingW0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0yzR4List_pSgAsO0rB0VSgAsxsA0yZ13ExprBuildable_pAsXtcfc","s18SwiftSyntaxBuilder18DeclModifierDetailV13leadingTrivia22garbageBeforeLeftParen04leftL00i7Betweenkl3AndF06detail0info5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAOSSAoQtcfc","s18SwiftSyntaxBuilder18DeclModifierDetailV13leadingTrivia22garbageBeforeLeftParen04leftL00i7Betweenkl3AndF06detail0info5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoQtcfc","s18SwiftSyntaxBuilder18ElseIfContinuationV13leadingTrivia013garbageBeforeE9Statement02ifK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0mnE4Stmt_ptcfc","s18SwiftSyntaxBuilder18GenericRequirementV13leadingTrivia17garbageBeforeBody4body0h7BetweenJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrB9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV13leadingTrivia013garbageBeforeE7Keyword05whereK00i7BetweeneK18AndRequirementList011requirementP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0rsdoP0_ptcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV13leadingTrivia013garbageBeforeE7Keyword05whereK00i7BetweeneK18AndRequirementList011requirementpC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0rsdoP0_pyXEtcfc","s18SwiftSyntaxBuilder18IfConfigClauseListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder18IfConfigClauseListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder18IfConfigClauseListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder18IfConfigClauseListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV07integerE0ACSi_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV13leadingTrivia19garbageBeforeDigits6digitsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV13leadingTrivia19garbageBeforeDigits6digitsAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSStcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprVyACSicfc","s18SwiftSyntaxBuilder18MemberDeclListItemV13leadingTrivia013garbageBeforeE04decl0j7BetweenE12AndSemicolon9semicolonAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrE9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder18PatternBindingListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder18PatternBindingListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder18PatternBindingListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder18PatternBindingListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder18PoundDsohandleExprV13leadingTrivia013garbageBeforedE005poundE0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13leadingTrivia013garbageBeforeE5Token08operatorK00i7BetweeneK20AndPostfixExpression07postfixP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI0kB0VSgAmA0rsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13leadingTrivia013garbageBeforeE5Token08operatorK00i7BetweeneK20AndPostfixExpression07postfixP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAmA0rsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18SwitchDefaultLabelV13leadingTrivia013garbageBeforeE7Keyword07defaultK00i7BetweeneK8AndColon5colonAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOtcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV13leadingTrivia17garbageBeforeName4name0i7Betweenk3AndF08modifierAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pq4DeclF6Detail_pSgtcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV13leadingTrivia17garbageBeforeName4name0i7Betweenk3AndF08modifierAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0pq4DeclF6Detail_pSgtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV13leadingTrivia17garbageBeforeName4name0i7BetweenK14AndTrailingDot08trailingP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV13leadingTrivia17garbageBeforeName4name0i7BetweenK14AndTrailingDot08trailingP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder19EnumCaseElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder19EnumCaseElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder19EnumCaseElementListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder19EnumCaseElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder19GenericArgumentListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder19GenericArgumentListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder19GenericArgumentListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder19GenericArgumentListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder19PostfixIfConfigExprV13leadingTrivia17garbageBeforeBase4base0j7Betweenl3AndF06configAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrG9Buildable_pSgAmA0qreF4Decl_ptcfc","s18SwiftSyntaxBuilder19PoundSourceLocationV13leadingTrivia013garbageBeforedeF005poundeF00i7BetweendeF12AndLeftParen04leftO00ilnoM4Args4args0ilqm5RightO005rightO0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0uvdefQ0_pSgAqStcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV13leadingTrivia23garbageBeforeAttributes10attributes0i7BetweenK12AndModifiers9modifiers0imoN22PrecedencegroupKeyword015precedencegroupR00imqrN10Identifier10identifier0imtN9LeftBrace04leftW00imvwneK005groupK00imekn5RightW005rightW0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWA1_AWA1_AwA013ExpressibleAsdE13AttributeList_pAWA1_tcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV13leadingTrivia23garbageBeforeAttributes10attributes0i7BetweenK12AndModifiers9modifiers0imoN22PrecedencegroupKeyword015precedencegroupR00imqrN10Identifier10identifier0imtN9LeftBrace04leftW00imvwneK005groupK00imekn5RightW005rightW0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAwA25ExpressibleAsModifierList_pSgAwS05TokenB0VAWSSAWA1_AwA013ExpressibleAsdE13AttributeList_pAWA1_tcfc","s18SwiftSyntaxBuilder19SameTypeRequirementV13leadingTrivia017garbageBeforeLeftE10Identifier04lefteL00i7BetweenkeL16AndEqualityToken08equalityQ00inpqo5RighteL005righteL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0uvE9Buildable_pAoK0qB0VAoaP_ptcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN8Declname8declname0imqN13TrailingComma08trailingT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0vW8DeclName_pAqSSgtcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN8Declname8declname0imqN13TrailingComma08trailingT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAqM05TokenB0VAqA0vW8DeclName_pAqSSgtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV13leadingTrivia22garbageBeforeLabelName05labelL00i7Betweenkl3AndK5Colon0mP00inkpoE07pattern0ineO13TrailingComma08trailingS0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VSgAqtqA0uvE9Buildable_pAqTtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV13leadingTrivia22garbageBeforeLabelName05labelL00i7Betweenkl3AndK5Colon0mP00inkpoE07pattern0ineO13TrailingComma08trailingS0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAqM05TokenB0VSgAqA0uvE9Buildable_pAqUtcfc","s18SwiftSyntaxBuilder19ValueBindingPatternV13leadingTrivia28garbageBeforeLetOrVarKeyword03letlmN00i7Betweenklmn3AnddF005valueF0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0stF9Buildable_ptcfc","s18SwiftSyntaxBuilder20AvailabilityArgumentV13leadingTrivia18garbageBeforeEntry5entry0h7BetweenJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrB9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListV12arrayLiteralAcA013ExpressibleAsD8Argument_pd_tcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListVyACSayAA013ExpressibleAsD8Argument_pGcfc","s18SwiftSyntaxBuilder20ClassRestrictionTypeV13leadingTrivia013garbageBeforeD7Keyword05classK0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder20ConditionElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20ConditionElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20ConditionElementListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder20ConditionElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV13leadingTrivia31garbageBeforeSomeOrAnySpecifier04somelmN00i7Betweenklmn7AndBaseF004baseF0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0tuF9Buildable_ptcfc","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV13leadingTrivia31garbageBeforeSomeOrAnySpecifier04somelmN00i7Betweenklmn7AndBaseF004baseF0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0tuF9Buildable_ptcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20GenericParameterListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20GenericParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20GenericParameterListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder20GenericParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20MemberTypeIdentifierV13leadingTrivia017garbageBeforeBaseE004baseE00i7BetweenkE9AndPeriod6period0imoN4Name4name0imqN21GenericArgumentClause07generictU0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0wxE9Buildable_pAqM05TokenB0VAqtqA0wxstU0_pSgtcfc","s18SwiftSyntaxBuilder20OptionalChainingExprV13leadingTrivia23garbageBeforeExpression10expression0i7BetweenK15AndQuestionMark08questionP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0rsF9Buildable_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV13leadingTrivia17garbageBeforeName4name0i7BetweenK24AndGenericArgumentClause07genericpQ0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0stopQ0_pSgtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierVyACSScfc","s18SwiftSyntaxBuilder20TupleExprElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20TupleExprElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleExprElementListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder20TupleExprElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20TupleTypeElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder20TupleTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleTypeElementListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder20TupleTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder21AvailabilityConditionV13leadingTrivia34garbageBeforePoundAvailableKeyword05poundkL00h7BetweenjkL12AndLeftParen04leftQ00hnpqoD4Spec012availabilityS00hndso5RightQ005rightQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0wxdS4List_pAqStcfc","s18SwiftSyntaxBuilder21BackDeployVersionListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder21BackDeployVersionListV12arrayLiteralAcA013ExpressibleAsdeF8Argument_pd_tcfc","s18SwiftSyntaxBuilder21BackDeployVersionListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder21BackDeployVersionListVyACSayAA013ExpressibleAsdeF8Argument_pGcfc","s18SwiftSyntaxBuilder21DictionaryElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder21DictionaryElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21DictionaryElementListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder21DictionaryElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21DiscardAssignmentExprV13leadingTrivia21garbageBeforeWildcard8wildcardAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV13leadingTrivia23garbageBeforeIdentifier10identifierAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAG05TokenB0Vtcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV13leadingTrivia23garbageBeforeIdentifier10identifierAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSStcfc","s18SwiftSyntaxBuilder21FunctionParameterListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV13leadingTrivia29garbageBeforeLeftAngleBracket04leftlM00i7BetweenklM12AndArguments0ioqp5RightlM005rightlM009argumentsC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0uvdE4List_pyXEtcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV13leadingTrivia29garbageBeforeLeftAngleBracket04leftlM00i7BetweenklM12AndArguments9arguments0ioqp5RightlM005rightlM0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0uvdE4List_pAoQtcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV13leadingTrivia17garbageBeforeName4name0i7BetweenK16AndTrailingComma08trailingP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV13leadingTrivia17garbageBeforeName4name0i7BetweenK16AndTrailingComma08trailingP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05arrayE0AcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK24AndGenericArgumentClause07genericpQ0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0stopQ0_pSgtcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV13leadingTrivia23garbageBeforeIdentifier10identifier0i7BetweenK24AndGenericArgumentClause07genericpQ0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0stopQ0_pSgtcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV13leadingTrivia18garbageBeforeColon5colon0i7Betweenk12AndInheritedD10Collection09inheriteddP0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0rsoD4List_ptcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV13leadingTrivia18garbageBeforeColon5colon0i7Betweenk12AndInheritedD10Collection09inheriteddpC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0rsoD4List_pyXEtcfc","s18SwiftSyntaxBuilder21TypeInitializerClauseV13leadingTrivia18garbageBeforeEqual5equal0i7BetweenK8AndValue5valueAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0qrD9Buildable_ptcfc","s18SwiftSyntaxBuilder21UnresolvedPatternExprV13leadingTrivia013garbageBeforeE07patternAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0lmE9Buildable_ptcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder22CompositionTypeElementV13leadingTrivia013garbageBeforeE04type0i7BetweenE12AndAmpersand9ampersandAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0pqE9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder22ConformanceRequirementV13leadingTrivia31garbageBeforeLeftTypeIdentifier04leftkL00h7BetweenjkL8AndColon5colon0hnpo5RightkL005rightkL0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0tuK9Buildable_pAoK05TokenB0VAoaP_ptcfc","s18SwiftSyntaxBuilder22DifferentiabilityParamV13leadingTrivia22garbageBeforeParameter9parameter0h7BetweenJ16AndTrailingComma08trailingO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0qrB9Buildable_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV13leadingTrivia29garbageBeforeLeftAngleBracket04leftlM00i7Betweenklm3AnddE4List07genericeQ00iodeqp5RightlM005rightlM0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0uvdeQ0_pAoQtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV13leadingTrivia29garbageBeforeLeftAngleBracket04leftlM00i7Betweenklm3AnddE4List0iodeqp5RightlM005rightlM007genericeqC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0uvdeQ0_pyXEtcfc","s18SwiftSyntaxBuilder22GenericRequirementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder22GenericRequirementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder22GenericRequirementListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder22GenericRequirementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN5Value5value0imqN13TrailingComma08trailingT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqsqSSgtcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN5Value5value0imqN13TrailingComma08trailingT0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAqM05TokenB0VAqsqSSgtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV13leadingTrivia23garbageBeforeLeftSquare04leftL00i7BetweenkL8AndItems0inpo5RightL005rightL005itemsC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0tudE8ItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV13leadingTrivia23garbageBeforeLeftSquare04leftL00i7BetweenkL8AndItems5items0inpo5RightL005rightL0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0tudE8ItemList_pSgAoQtcfc","s18SwiftSyntaxBuilder23DifferentiabilityParamsV13leadingTrivia22garbageBeforeLeftParen04leftK00h7Betweenjk7AndDiffE004diffE00hmoen5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stD9ParamList_pAoQtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV13leadingTrivia25garbageBeforeFileArgLabel04filemN00j7Betweenlmn3AndlM5Colon0omR00jplmrqL4Name0oS00jplsQ5Comma5comma0jptq4LinemN004linemN00jpvmnqvmR00wmR00jpvmrqV6Number0wX0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAS05TokenB0VAwywywywywywYtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV13leadingTrivia25garbageBeforeFileArgLabel04filemN00j7Betweenlmn3AndlM5Colon0omR00jplmrqL4Name0oS00jplsQ5Comma5comma0jptq4LinemN004linemN00jpvmnqvmR00wmR00jpvmrqV6Number0wX0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgSSAwS05TokenB0VAWSSAwyWSSAwyWSStcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV12arrayLiteralAcA013ExpressibleAsdeF7Element_pd_tcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListVyACSayAA013ExpressibleAsdeF7Element_pGcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV13leadingTrivia030garbageBeforeHigherThanOrLowerL006higherlmnL00i7BetweenklmnL8AndColon5colon0iprQ10OtherNames05otherU0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0wxdE8NameList_ptcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV13leadingTrivia030garbageBeforeHigherThanOrLowerL006higherlmnL00i7BetweenklmnL8AndColon5colon0iprQ10OtherNames05otherU0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoA0wxdE8NameList_ptcfc","s18SwiftSyntaxBuilder23TuplePatternElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder23TuplePatternElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder23TuplePatternElementListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder23TuplePatternElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder23UnavailabilityConditionV13leadingTrivia36garbageBeforePoundUnavailableKeyword05poundkL00h7BetweenjkL12AndLeftParen04leftQ00hnpqO16AvailabilitySpec012availabilityT00hnsto5RightQ005rightQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqsqA0xysT4List_pAqStcfc","s18SwiftSyntaxBuilder24MatchingPatternConditionV13leadingTrivia24garbageBeforeCaseKeyword04caseL00i7Betweenkl3AndE07pattern0ineO14TypeAnnotation04typeR00inqrO11Initializer11initializerAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0vwE9Buildable_pAqA0vwqR0_pSgAqA0vwT6Clause_ptcfc","s18SwiftSyntaxBuilder24OptionalBindingConditionV13leadingTrivia28garbageBeforeLetOrVarKeyword03letlmN00i7BetweenklmN10AndPattern7pattern0iprQ14TypeAnnotation04typeU00iptuQ11Initializer11initializerAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0yzR9Buildable_pAqA0yztU0_pSgAqA0yzW6Clause_pSgtcfc","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV13leadingTrivia025garbageBeforeAvailabilityF11Restriction012availabilityfM00j7BetweenlfM16AndTrailingComma08trailingR0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAA0tulfM0_pAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV13leadingTrivia013garbageBeforeF7Keyword010assignmentK00i7BetweenfK8AndColon5colon0imoN4Flag4flagAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoQtcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV13leadingTrivia013garbageBeforeF7Keyword010assignmentK00i7BetweenfK8AndColon5colon0imoN4Flag4flagAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoQtcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListV9combiningACSayAA013ExpressibleAsdeF0_pG_tcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV13leadingTrivia18garbageBeforeColon5colon0j7Betweenlfe5Groupf10DesignatedG0010precedenceofpG0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0rS14IdentifierList_ptcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV13leadingTrivia013garbageBeforeF04name0j7BetweenF16AndTrailingComma08trailingP0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV13leadingTrivia013garbageBeforeF04name0j7BetweenF16AndTrailingComma08trailingP0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgSSAmI05TokenB0VSgtcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN5Value5valueAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0stB9Buildable_ptcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV13leadingTrivia18garbageBeforeLabel5label0i7BetweenK8AndColon5colon0imoN5Value5valueAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoA0stB9Buildable_ptcfc","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV13leadingTrivia013garbageBeforeL5Label06beforeM00k7BetweenlM8AndColon5colon0koqp7VersionH007versionH0AC0aB00J0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0uvdesH0_ptcfc","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV13leadingTrivia013garbageBeforeL5Label06beforeM00k7BetweenlM8AndColon5colon0koqp7VersionH007versionH0AC0aB00J0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoA0uvdesH0_ptcfc","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV13leadingTrivia29garbageBeforeLeftAngleBracket04leftmN00j7Betweenlmn3AnddeF4List07primaryefR00jpdefrq5RightmN005rightmN0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0vwdefR0_pAoQtcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV13leadingTrivia17garbageBeforeType4type0i7BetweenK8AndComma5comma0imoN12DeclBaseName04declrS00imqrsnqsF00tsF0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAA0uv6SimpleK10Identifier_pAqM05TokenB0VAqA0uvB9Buildable_pAqA0uvqsF0_pSgtcfc","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV13leadingTrivia20garbageBeforeNameTok04nameM00j7BetweenlM8AndColon5colon0joqpF10OrDeclname06stringsT0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0vwB9Buildable_ptcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV13leadingTrivia013garbageBeforeF7Keyword013associativityK00i7BetweenfK8AndColon5colon0imoN5Value5valueAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoQtcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV13leadingTrivia013garbageBeforeF7Keyword013associativityK00i7BetweenfK8AndColon5colon0imoN5Value5valueAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAOSStcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV9combiningACSayAA013ExpressibleAsdefG0_pG_tcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV13leadingTrivia21garbageBeforeWrtLabel03wrtL00i7BetweenkL8AndColon5colon0inpO10Parameters10parametersAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0tuB9Buildable_ptcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV13leadingTrivia21garbageBeforeWrtLabel03wrtL00i7BetweenkL8AndColon5colon0inpO10Parameters10parametersAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAoK05TokenB0VAoA0tuB9Buildable_ptcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV13leadingTrivia21garbageBeforePlatform8platform0i7Betweenk3AndE07versionAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV13leadingTrivia21garbageBeforePlatform8platform0i7Betweenk3AndE07versionAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0pqE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV13leadingTrivia18garbageBeforeLabel5label0j7BetweenL8AndColon5colon0jnpoF07closureAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoqoA0stF4Expr_ptcfc","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV13leadingTrivia020garbageBeforeWrappedG007wrappedG00j7BetweenlG18AndExclamationMark011exclamationQ0AC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAA0stG9Buildable_pAmI05TokenB0Vtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV13leadingTrivia21garbageBeforeDiffKind04diffL00i7Betweenkl3AndkL5Comma0mlP00inklpoK6Params0mQ00inkqokqP00mqP00inkqpO11WhereClause05whereS0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VSgAsvsA0uv17DifferentiabilityqS0_pSgAsvsA0uv7GenericrS0_pSgtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV13leadingTrivia21garbageBeforeDiffKind04diffL00i7Betweenkl3AndkL5Comma0mlP00inklpoK6Params0mQ00inkqokqP00mqP00inkqpO11WhereClause05whereS0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAsO05TokenB0VSgAsA0uv17DifferentiabilityqS0_pSgAswsA0uv7GenericrS0_pSgtcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV12arrayLiteralAcA013ExpressibleAsdefG0_pd_tcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV9combiningACSayAA013ExpressibleAsdefgH0_pG_tcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListVyACSayAA013ExpressibleAsdefG0_pGcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV13leadingTrivia20garbageBeforeOfLabel02ofM00j7BetweenlM8AndColon5colon0joqP16OriginalDeclName08originaltU00jostuP6Period6period0jowP12AccessorKind08accessorZ00joyzP5Comma5comma0jo5CommaP10DiffParams10diffParamsAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgAS05TokenB0VAwywA022ExpressibleAsQualifiedtU0_pAwYSgAWA_AWA_AwA42ExpressibleAsDifferentiabilityParamsClause_pSgtcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV13leadingTrivia20garbageBeforeOfLabel02ofM00j7BetweenlM8AndColon5colon0joqP16OriginalDeclName08originaltU00jostuP6Period6period0jowP12AccessorKind08accessorZ00joyzP5Comma5comma0jo5CommaP10DiffParams10diffParamsAC0aB00I0V_AA25ExpressibleAsGarbageNodes_pSgSSAwS05TokenB0VAwA022ExpressibleAsQualifiedtU0_pAwYSgAWSSSgAWA_AwA42ExpressibleAsDifferentiabilityParamsClause_pSgtcfc","s18SwiftSyntaxBuilder6AsExprV13leadingTrivia013garbageBeforeD3Tok02asJ00h7BetweendJ28AndQuestionOrExclamationMark08questionopQ00hlnopqM8TypeName04typeT0AC0aB00G0V_AA011ExpressibleD12GarbageNodes_pSgAK05TokenB0VAoQSgAoA0vdS9Buildable_ptcfc","s18SwiftSyntaxBuilder6DoStmtV13leadingTrivia013garbageBeforeD7Keyword02doJ00h7BetweendJ7AndBody0hlnM12CatchClauses05catchP004bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oA0stO10ClauseList_pSgAA0st13CodeBlockItemY0_pyXEtcfc","s18SwiftSyntaxBuilder6DoStmtV13leadingTrivia013garbageBeforeD7Keyword02doJ00h7BetweendJ7AndBody4body0hlnM12CatchClauses05catchQ0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0sT9CodeBlock_pAoA0stP10ClauseList_pSgtcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthACSi_tcfc","s18SwiftSyntaxBuilder6IfStmtV13leadingTrivia013garbageBeforeD7Keyword02ifJ00h7BetweendJ13AndConditions10conditions0hlnM4Body0hlpm4ElseJ004elseJ00hlqjmqP00rP004bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsA0tU20ConditionElementList_pA2sUSgAsA0tuB9Buildable_pSgAA0tU17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder6IfStmtV13leadingTrivia013garbageBeforeD7Keyword02ifJ00h7BetweendJ13AndConditions10conditions0hlnM4Body4body0hlpm4ElseJ004elseJ00hlrjmrP00sP0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAO05TokenB0VAsA0tU20ConditionElementList_pAsA0tU9CodeBlock_pAsUSgAsA0tuB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder6IfStmtV13leadingTrivia10conditions4body8elseBodyAC0aB00G0V_AA33ExpressibleAsConditionElementList_pAA0lm13CodeBlockItemP0_pyXEAaL_pSgyXEtcfc","s18SwiftSyntaxBuilder6IsExprV13leadingTrivia013garbageBeforeD3Tok02isJ00h7BetweendJ11AndTypeName04typeO0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0qrN9Buildable_ptcfc","s18SwiftSyntaxBuilder7TryExprV13leadingTrivia013garbageBeforeD7Keyword03tryJ00h7BetweendJ28AndQuestionOrExclamationMark08questionopQ00hlnopqM10Expression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoQSgAoA0uvE9Buildable_ptcfc","s18SwiftSyntaxBuilder8CaseItemV13leadingTrivia20garbageBeforePattern7pattern0h7BetweenJ14AndWhereClause05whereO00hlnoM13TrailingComma08trailingR0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0tuJ9Buildable_pAoA0tunO0_pSgAoK05TokenB0VSgtcfc","s18SwiftSyntaxBuilder8DeclNameV13leadingTrivia013garbageBefored4BaseE004decljE00h7Betweendje3AnddE9Arguments0keN0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0opB9Buildable_pAmA0opdeN0_pSgtcfc","s18SwiftSyntaxBuilder8EnumDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword04enumP00hldpM10Identifier10identifier0hlrM17GenericParameters07genericU00hltuM17InheritanceClause011inheritanceX00hlwxmt5WhereX00vzX00hltzxM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYSSAyA013ExpressibleAst9ParameterX0_pSgAyA017ExpressibleAsTypewX0_pSgAyA013ExpressibleAstzX0_pSgAyA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder8EnumDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword04enumP00hldpM10Identifier10identifier0hlrM17GenericParameters07genericU00hltuM17InheritanceClause011inheritanceX00hlwxmt5WhereX00vzX00hltzxM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAst9ParameterX0_pSgAyA017ExpressibleAsTypewX0_pSgAyA013ExpressibleAstzX0_pSgAyA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder8ExprListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder8ExprListV12arrayLiteralAcA013ExpressibleAsD9Buildable_pd_tcfc","s18SwiftSyntaxBuilder8ExprListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder8ExprListVyACSayAA013ExpressibleAsD9Buildable_pGcfc","s18SwiftSyntaxBuilder8MoveExprV13leadingTrivia013garbageBeforeD7Keyword04moveJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqE9Buildable_ptcfc","s18SwiftSyntaxBuilder8MoveExprV13leadingTrivia013garbageBeforeD7Keyword04moveJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0pqE9Buildable_ptcfc","s18SwiftSyntaxBuilder8ObjcNameV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder8ObjcNameV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder8ObjcNameV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder8ObjcNameVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder8TypeExprV13leadingTrivia013garbageBeforeD04typeAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0klD9Buildable_ptcfc","s18SwiftSyntaxBuilder9ActorDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword05actorP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAYSSAYSSAyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder9ActorDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword05actorP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder9ArrayExprV13leadingTrivia23garbageBeforeLeftSquare04leftK00h7BetweenjK11AndElements0hmon5RightK005rightK008elementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0stD11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder9ArrayExprV13leadingTrivia23garbageBeforeLeftSquare04leftK00h7BetweenjK11AndElements8elements0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stD11ElementList_pAoQtcfc","s18SwiftSyntaxBuilder9ArrayTypeV13leadingTrivia30garbageBeforeLeftSquareBracket04leftkL00h7Betweenjkl10AndElementE007elementE00hnpeo5RightkL005rightkL0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0tuE9Buildable_pAoQtcfc","s18SwiftSyntaxBuilder9ArrowExprV13leadingTrivia25garbageBeforeAsyncKeyword05asyncK00h7BetweenjK14AndThrowsToken06throwsP00hmopndP005arrowP0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK0pB0VSgAoroQtcfc","s18SwiftSyntaxBuilder9ArrowExprV13leadingTrivia25garbageBeforeAsyncKeyword05asyncK00h7BetweenjK14AndThrowsToken06throwsP00hmopndP005arrowP0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSSSgAoK0pB0VSgAoRtcfc","s18SwiftSyntaxBuilder9AttributeV13leadingTrivia24garbageBeforeAtSignToken02atjK00g7Betweenijk3AndD4Name09attributeO00gmdoN9LeftParen04leftR00gmqrN8Argument8argument0gmtn5RightR005rightR00gmvrnK4List05tokenX0AC0aB00F0V_AA25ExpressibleAsGarbageNodes_pSgAQ0kB0VAuwuWSgAuA0z2AsB9Buildable_pSgAuxuA0z2AskX0_pSgtcfc","s18SwiftSyntaxBuilder9AwaitExprV13leadingTrivia013garbageBeforeD7Keyword05awaitJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqE9Buildable_ptcfc","s18SwiftSyntaxBuilder9AwaitExprV13leadingTrivia013garbageBeforeD7Keyword05awaitJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgSSAmA0pqE9Buildable_ptcfc","s18SwiftSyntaxBuilder9BreakStmtV13leadingTrivia013garbageBeforeD7Keyword05breakJ00h7BetweendJ8AndLabel5labelAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAMSSSgtcfc","s18SwiftSyntaxBuilder9BreakStmtV13leadingTrivia013garbageBeforeD7Keyword05breakJ00h7BetweendJ8AndLabel5labelAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmOSgtcfc","s18SwiftSyntaxBuilder9CatchItemV13leadingTrivia20garbageBeforePattern7pattern0h7BetweenJ14AndWhereClause05whereO00hlnoM13TrailingComma08trailingR0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA0tuJ9Buildable_pSgAoA0tunO0_pSgAoK05TokenB0VSgtcfc","s18SwiftSyntaxBuilder9ClassDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword05classP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members07membersC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYSSAyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE4List_pyXEtcfc","s18SwiftSyntaxBuilder9ClassDeclV13leadingTrivia23garbageBeforeAttributes10attributes0h7BetweenJ12AndModifiers9modifiers0hlnmD7Keyword05classP00hldpM10Identifier10identifier0hlrM22GenericParameterClause07genericuV00hltuvm11InheritanceV0011inheritanceV00hlxvmt5WhereV00wzV00hltzvM7Members7membersAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAA26ExpressibleAsAttributeList_pSgAyA25ExpressibleAsModifierList_pSgAyU05TokenB0VAYA3_AyA013ExpressibleAstuV0_pSgAyA017ExpressibleAsTypexV0_pSgAyA013ExpressibleAstzV0_pSgAyA019ExpressibleAsMemberE5Block_ptcfc","s18SwiftSyntaxBuilder9CodeBlockV13leadingTrivia22garbageBeforeLeftBrace04leftK00h7BetweenjK13AndStatements0hmon5RightK005rightK0010statementsC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0stdE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder9CodeBlockV13leadingTrivia22garbageBeforeLeftBrace04leftK00h7BetweenjK13AndStatements10statements0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stdE8ItemList_pAoQtcfc","s18SwiftSyntaxBuilder9DeferStmtV13leadingTrivia013garbageBeforeD7Keyword05deferJ00h7BetweendJ7AndBody04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pQ17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder9DeferStmtV13leadingTrivia013garbageBeforeD7Keyword05deferJ00h7BetweendJ7AndBody4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pQ9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9ElseBlockV13leadingTrivia013garbageBeforeD7Keyword04elseJ00h7BetweendJ7AndBody04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pq4CodeE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder9ElseBlockV13leadingTrivia013garbageBeforeD7Keyword04elseJ00h7BetweendJ7AndBody4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pq4CodeE0_ptcfc","s18SwiftSyntaxBuilder9ForInStmtV13leadingTrivia013garbageBeforeD7Keyword03forK00i7Betweendk6AndTryK003tryK00imokn5AwaitK005awaitK00imqkn4CaseK004caseK00imskN7Pattern7pattern0imuN14TypeAnnotation04typeX00imwxneK002inK00imekN12SequenceExpr12sequenceExpr0im12SequenceExprN11WhereClause11whereClause0im11WhereClauseN4Body04bodyC0AC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAY05TokenB0VA1_A3_SgA1_SSSgA1_A4_A1_AA013ExpressibleAsU9Buildable_pA1_AA013ExpressibleAswX0_pSgA1_A3_A1_AA26ExpressibleAsExprBuildable_pA1_AA24ExpressibleAsWhereClause_pSgA1_AA30ExpressibleAsCodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder9ForInStmtV13leadingTrivia013garbageBeforeD7Keyword03forK00i7Betweendk6AndTryK003tryK00imokn5AwaitK005awaitK00imqkn4CaseK004caseK00imskN7Pattern7pattern0imuN14TypeAnnotation04typeX00imwxneK002inK00imekN12SequenceExpr12sequenceExpr0im12SequenceExprN11WhereClause11whereClause0im11WhereClauseN4Body4bodyAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAY05TokenB0VA1_A3_SgA1_A4_A1_A4_A1_AA013ExpressibleAsU9Buildable_pA1_AA013ExpressibleAswX0_pSgA1_A3_A1_AA26ExpressibleAsExprBuildable_pA1_AA24ExpressibleAsWhereClause_pSgA1_AA22ExpressibleAsCodeBlock_ptcfc","s18SwiftSyntaxBuilder9GuardStmtV13leadingTrivia013garbageBeforeD7Keyword05guardJ00h7BetweendJ13AndConditions10conditions0hlnm4ElseJ004elseJ00hlpjM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0tU20ConditionElementList_pAqsqA0tU17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder9GuardStmtV13leadingTrivia013garbageBeforeD7Keyword05guardJ00h7BetweendJ13AndConditions10conditions0hlnm4ElseJ004elseJ00hlpjM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0tU20ConditionElementList_pAqsqA0tU9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9InOutExprV13leadingTrivia22garbageBeforeAmpersand9ampersand0i7BetweenK13AndExpression10expressionAC0aB00H0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0qrF9Buildable_ptcfc","s18SwiftSyntaxBuilder9ThrowStmtV13leadingTrivia013garbageBeforeD7Keyword05throwJ00h7BetweendJ13AndExpression10expressionAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder9TokenListV05itemsC0A2CyXE_tcfc","s18SwiftSyntaxBuilder9TokenListV12arrayLiteralAC0aB00dB0Vd_tcfc","s18SwiftSyntaxBuilder9TokenListV9combiningACSayAA013ExpressibleAsdE0_pG_tcfc","s18SwiftSyntaxBuilder9TokenListVyACSay0aB00dB0VGcfc","s18SwiftSyntaxBuilder9TupleExprV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK14AndElementList07elementP00hmopn5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0tudeoP0_pAoQtcfc","s18SwiftSyntaxBuilder9TupleExprV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK14AndElementList0hmopn5RightK005rightK007elementpC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VA2oqA0tudeoP0_pyXEtcfc","s18SwiftSyntaxBuilder9TupleTypeV13leadingTrivia22garbageBeforeLeftParen04leftK00h7BetweenjK11AndElements8elements0hmon5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0stdE11ElementList_pAoQtcfc","s18SwiftSyntaxBuilder9WhileStmtV13leadingTrivia013garbageBeforeD7Keyword05whileJ00h7BetweendJ13AndConditions10conditions0hlnM4Body04bodyC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0rS20ConditionElementList_pAoA0rs13CodeBlockItemY0_pyXEtcfc","s18SwiftSyntaxBuilder9WhileStmtV13leadingTrivia013garbageBeforeD7Keyword05whileJ00h7BetweendJ13AndConditions10conditions0hlnM4Body4bodyAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAK05TokenB0VAoA0rS20ConditionElementList_pAoA0rS9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9YieldListV13leadingTrivia22garbageBeforeLeftParen04leftK00h7Betweenjk10AndElementE007elementE00hmoeN13TrailingComma08trailingR00hmqrn5RightK005rightK0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VAqA0vw4ExprE0_pAqSSgAqStcfc","s18SwiftSyntaxBuilder9YieldListV13leadingTrivia22garbageBeforeLeftParen04leftK00h7Betweenjk10AndElementE00hmoeN13TrailingComma08trailingQ00hmpqn5RightK005rightK007elementeC0AC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAM05TokenB0VA2qSSgAqsA0vw4ExprE0_pyXEtcfc","s18SwiftSyntaxBuilder9YieldStmtV13leadingTrivia013garbageBeforeD7Keyword05yieldJ00h7BetweendJ9AndYields6yieldsAC0aB00G0V_AA25ExpressibleAsGarbageNodes_pSgAI05TokenB0VAmA0pqB9Buildable_ptcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthSivp","s18SwiftSyntaxBuilder010AccessPathC0V10buildArrayySayAA013ExpressibleAsdE9Component_pGSayAFGFZ","s18SwiftSyntaxBuilder010AccessPathC0V10buildBlockySayAA013ExpressibleAsdE9Component_pGAFd_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither5firstSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither6secondSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V13buildOptionalySayAA013ExpressibleAsdE9Component_pGAFSgFZ","s18SwiftSyntaxBuilder010AccessPathC0V15buildExpressionySayAA013ExpressibleAsdE9Component_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder010AccessPathC0V15buildExpressionySayAA013ExpressibleAsdE9Component_pGAaE_pFZ","s18SwiftSyntaxBuilder010AccessPathC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE9Component_pGFZ","s18SwiftSyntaxBuilder010AccessPathC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE9Component_pGAFFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildArrayySayAA013ExpressibleAsD4Decl_pGSayAFGFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildBlockySayAA013ExpressibleAsD4Decl_pGAFd_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither5firstSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither6secondSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V13buildOptionalySayAA013ExpressibleAsD4Decl_pGAFSgFZ","s18SwiftSyntaxBuilder012AccessorListC0V15buildExpressionySayAA013ExpressibleAsD4Decl_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder012AccessorListC0V15buildExpressionySayAA013ExpressibleAsD4Decl_pGAaE_pFZ","s18SwiftSyntaxBuilder012AccessorListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD4Decl_pGFZ","s18SwiftSyntaxBuilder012AccessorListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD4Decl_pGAFFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder012CaseItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder012CaseItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder012CaseItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder012GarbageNodesC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildArrayySayAA017ExpressibleAsDeclD0_pGSayAFGFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildBlockySayAA017ExpressibleAsDeclD0_pGAFd_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither5firstSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither6secondSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V13buildOptionalySayAA017ExpressibleAsDeclD0_pGAFSgFZ","s18SwiftSyntaxBuilder012ModifierListC0V15buildExpressionySayAA017ExpressibleAsDeclD0_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder012ModifierListC0V15buildExpressionySayAA017ExpressibleAsDeclD0_pGAaE_pFZ","s18SwiftSyntaxBuilder012ModifierListC0V16buildFinalResultyAA0dE0VSayAA017ExpressibleAsDeclD0_pGFZ","s18SwiftSyntaxBuilder012ModifierListC0V24buildLimitedAvailabilityySayAA017ExpressibleAsDeclD0_pGAFFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder013AttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder013AttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder013AttributeListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder013AttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder013CatchItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder013CatchItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder013CatchItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildArrayySay0aB005TokenB0VGSayAHGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildBlockySay0aB005TokenB0VGAHd_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither5firstSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither6secondSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V13buildOptionalySay0aB005TokenB0VGAHSgFZ","s18SwiftSyntaxBuilder014IdentifierListC0V15buildExpressionySay0aB005TokenB0VGAA013ExpressibleAsdE0_pFZ","s18SwiftSyntaxBuilder014IdentifierListC0V15buildExpressionySay0aB005TokenB0VGAGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V16buildFinalResultyAA0dE0VSay0aB005TokenB0VGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V24buildLimitedAvailabilityySay0aB005TokenB0VGAHFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildArrayySayAA013ExpressibleAsdeF4Item_pGSayAFGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildBlockySayAA013ExpressibleAsdeF4Item_pGAFd_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither5firstSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither6secondSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V13buildOptionalySayAA013ExpressibleAsdeF4Item_pGAFSgFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V15buildExpressionySayAA013ExpressibleAsdeF4Item_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V15buildExpressionySayAA013ExpressibleAsdeF4Item_pGAaE_pFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdeF4Item_pGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF4Item_pGAFFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V05buildD0ySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V05buildE0ySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildArrayySay0aB00fB0VGSayAHGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildBlockySay0aB00fB0VGAHd_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither5firstSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither6secondSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V13buildOptionalySay0aB00fB0VGAHSgFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V15buildExpressionySay0aB00fB0VGAA013ExpressibleAsdefG0_pFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V15buildExpressionySay0aB00fB0VGAGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V16buildFinalResultyAA0defG0VSay0aB00fB0VGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V24buildLimitedAvailabilityySay0aB00fB0VGAHFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V012buildLimitedD0ySayAA013ExpressibleAsD8Argument_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildArrayySayAA013ExpressibleAsD8Argument_pGSayAFGFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildBlockySayAA013ExpressibleAsD8Argument_pGAFd_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither5firstSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither6secondSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V13buildOptionalySayAA013ExpressibleAsD8Argument_pGAFSgFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V15buildExpressionySayAA013ExpressibleAsD8Argument_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V15buildExpressionySayAA013ExpressibleAsD8Argument_pGAaE_pFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsD8Argument_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10buildArrayySayAA013ExpressibleAsdeF8Argument_pGSayAFGFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10buildBlockySayAA013ExpressibleAsdeF8Argument_pGAFd_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11buildEither5firstSayAA013ExpressibleAsdeF8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11buildEither6secondSayAA013ExpressibleAsdeF8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V13buildOptionalySayAA013ExpressibleAsdeF8Argument_pGAFSgFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V15buildExpressionySayAA013ExpressibleAsdeF8Argument_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V15buildExpressionySayAA013ExpressibleAsdeF8Argument_pGAaE_pFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF8Argument_pGFZ","s18SwiftSyntaxBuilder021BackDeployVersionListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF8Argument_pGAFFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildArrayySayAA013ExpressibleAsdeF7Element_pGSayAFGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildBlockySayAA013ExpressibleAsdeF7Element_pGAFd_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither5firstSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither6secondSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V13buildOptionalySayAA013ExpressibleAsdeF7Element_pGAFSgFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V15buildExpressionySayAA013ExpressibleAsdeF7Element_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V15buildExpressionySayAA013ExpressibleAsdeF7Element_pGAaE_pFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF7Element_pGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF7Element_pGAFFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAA0ijdeF0_pFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAA0jkdefG0_pFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildArrayySayAA013ExpressibleAsdefG0_pGSayAFGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildBlockySayAA013ExpressibleAsdefG0_pGAFd_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither5firstSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither6secondSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V13buildOptionalySayAA013ExpressibleAsdefG0_pGAFSgFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V15buildExpressionySayAA013ExpressibleAsdefG0_pGAA0kldefgH0_pFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V15buildExpressionySayAA013ExpressibleAsdefG0_pGAaE_pFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V16buildFinalResultyAA0defgH0VSayAA013ExpressibleAsdefG0_pGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdefG0_pGAFFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildArrayySayAA013ExpressibleAsD9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildBlockySayAA013ExpressibleAsD9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither5firstSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither6secondSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V13buildOptionalySayAA013ExpressibleAsD9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder08ExprListC0V15buildExpressionySayAA013ExpressibleAsD9Buildable_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder08ExprListC0V15buildExpressionySayAA013ExpressibleAsD9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder08ExprListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD9Buildable_pGFZ","s18SwiftSyntaxBuilder08ExprListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD9Buildable_pGAFFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder08ObjcNameC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAA0hidE0_pFZ","s18SwiftSyntaxBuilder08ObjcNameC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder08ObjcNameC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildArrayySay0aB00dB0VGSayAHGFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildBlockySay0aB00dB0VGAHd_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither5firstSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither6secondSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V13buildOptionalySay0aB00dB0VGAHSgFZ","s18SwiftSyntaxBuilder09TokenListC0V15buildExpressionySay0aB00dB0VGAA013ExpressibleAsdE0_pFZ","s18SwiftSyntaxBuilder09TokenListC0V15buildExpressionySay0aB00dB0VGAGFZ","s18SwiftSyntaxBuilder09TokenListC0V16buildFinalResultyAA0dE0VSay0aB00dB0VGFZ","s18SwiftSyntaxBuilder09TokenListC0V24buildLimitedAvailabilityySay0aB00dB0VGAHFZ","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP06createbF0AA0bF0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE18createGarbageNodesAA0hI0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE19createAttributeListAA0hI0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE20createSwitchCaseListAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE27createStringLiteralSegmentsAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE33createSpecializeAttributeSpecListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE34createPrecedenceGroupAttributeListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP06createefG0AA0efG0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP06createeF0AA0eF0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprPAAE06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder0B13ListBuildableP05buildbD06format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildableP05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE05buildB4List6format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE06createbD0AaB_pyF","s18SwiftSyntaxBuilder10AccessPathV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10AccessPathV06createdE0ACyF","s18SwiftSyntaxBuilder10ImportDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ImportDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10ReturnStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ReturnStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createdE0ACyF","s18SwiftSyntaxBuilder10SourceFileV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SourceFileV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SourceFileV06createdE0ACyF","s18SwiftSyntaxBuilder10StructDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10StructDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchCaseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchCaseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchCaseV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createdE0ACyF","s18SwiftSyntaxBuilder11CatchClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11CatchClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11CatchClauseV06createdE0ACyF","s18SwiftSyntaxBuilder11ClosureExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11ClosureExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createdE0ACyF","s18SwiftSyntaxBuilder11KeyPathExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder11KeyPathExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createdeF0ACyF","s18SwiftSyntaxBuilder11LabeledStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11LabeledStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11LabeledStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11LabeledStmtV06createdE0ACyF","s18SwiftSyntaxBuilder11TernaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11TernaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder11WhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11WhereClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11WhereClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorListV06createdE0ACyF","s18SwiftSyntaxBuilder12ArrayElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ArrayElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ArrayElementV06createdE0ACyF","s18SwiftSyntaxBuilder12ArrayElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder12CaseItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12CaseItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder12ClosureParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ClosureParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ClosureParamV06createdE0ACyF","s18SwiftSyntaxBuilder12ClosureParamV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder12ContinueStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ContinueStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createdE0ACyF","s18SwiftSyntaxBuilder12DeclModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12DeclModifierV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12DeclModifierV06createdE0ACyF","s18SwiftSyntaxBuilder12EnumCaseDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12FunctionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12FunctionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12GarbageNodesV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12GarbageNodesV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12GarbageNodesV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12GarbageNodesV06createdE0ACyF","s18SwiftSyntaxBuilder12IfConfigDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12IfConfigDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12MetatypeTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12MetatypeTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ModifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ModifierListV06createdE0ACyF","s18SwiftSyntaxBuilder12ObjCSelectorV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ObjCSelectorV06createdE0ACyF","s18SwiftSyntaxBuilder12OperatorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OperatorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12OptionalTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OptionalTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ProtocolDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ProtocolDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12ReturnClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ReturnClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ReturnClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12SequenceExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12SequenceExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createdE0ACyF","s18SwiftSyntaxBuilder12SuperRefExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12SuperRefExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createdeF0ACyF","s18SwiftSyntaxBuilder12TuplePatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12TuplePatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createdE0ACyF","s18SwiftSyntaxBuilder12VariableDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VariableDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12VersionTupleV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VersionTupleV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VersionTupleV06createdE0ACyF","s18SwiftSyntaxBuilder13AccessorBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AccessorBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AccessorBlockV06createdE0ACyF","s18SwiftSyntaxBuilder13AsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13AsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13AttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AttributeListV06createdE0ACyF","s18SwiftSyntaxBuilder13CatchItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CatchItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder13CodeBlockItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CodeBlockItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CodeBlockItemV06createdeF0ACyF","s18SwiftSyntaxBuilder13DeclBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExprBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExtensionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13InheritedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13InheritedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13InheritedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder13InheritedTypeV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder13IsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13IsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13ObjcNamePieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundFileExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundFileExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundLineExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundLineExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13StmtBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13StringSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StringSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13StringSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createdE0ACyF","s18SwiftSyntaxBuilder13TypeBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypealiasDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createdE0ACyF","s18SwiftSyntaxBuilder14AssignmentExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AssignmentExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createdE0ACyF","s18SwiftSyntaxBuilder14AttributedTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AttributedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14ExpressionStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14ExpressionStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierListV06createdE0ACyF","s18SwiftSyntaxBuilder14IfConfigClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14IfConfigClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14IfConfigClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder14MemberDeclListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14MemberDeclListV06createdeF0ACyF","s18SwiftSyntaxBuilder14NilLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14NilLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder14PatternBindingV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14PatternBindingV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14PatternBindingV06createdE0ACyF","s18SwiftSyntaxBuilder14PatternBindingV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder14PoundErrorDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder14SpecializeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14SpecializeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createdE0ACyF","s18SwiftSyntaxBuilder14SwitchCaseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14SwitchCaseListV06createdeF0ACyF","s18SwiftSyntaxBuilder14TypeAnnotationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14TypeAnnotationV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14TypeAnnotationV06createdE0ACyF","s18SwiftSyntaxBuilder15CatchClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15CatchClauseListV06createdeF0ACyF","s18SwiftSyntaxBuilder15CompositionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CompositionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder15CustomAttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CustomAttributeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CustomAttributeV06createdE0ACyF","s18SwiftSyntaxBuilder15DeclarationStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15DeclarationStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15EnumCaseElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCaseElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCaseElementV06createdeF0ACyF","s18SwiftSyntaxBuilder15EnumCaseElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder15EnumCasePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCasePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder15FallthroughStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15FallthroughStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15ForcedValueExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15ForcedValueExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15GenericArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15GenericArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15GenericArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder15GenericArgumentV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder15InitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15InitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15MemberDeclBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createdeF0ACyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15OptionalPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15OptionalPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createdE0ACyF","s18SwiftSyntaxBuilder15ParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15ParameterClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15ParameterClauseV06createdE0ACyF","s18SwiftSyntaxBuilder15PoundAssertStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundColumnExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundColumnExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV19createExprBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV9buildExpr6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder15WildcardPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15WildcardPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createdE0ACyF","s18SwiftSyntaxBuilder16ArrayElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ArrayElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ClosureParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ClosureSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ClosureSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder16ConditionElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ConditionElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ConditionElementV06createdE0ACyF","s18SwiftSyntaxBuilder16ConditionElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16DeclNameArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder16FloatLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionCallExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionCallExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder16GenericParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16GenericParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16GenericParameterV06createdE0ACyF","s18SwiftSyntaxBuilder16GenericParameterV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16MemberAccessExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16MemberAccessExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PatternBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PoundWarningDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder16RegexLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleExprElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleExprElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleExprElementV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleExprElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder16TupleTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleTypeElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17AccessorParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AccessorParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AccessorParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17AvailabilityEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createdE0ACyF","s18SwiftSyntaxBuilder17CodeBlockItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder17DeclListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder17DeinitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder17DictionaryElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DictionaryElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DictionaryElementV06createdE0ACyF","s18SwiftSyntaxBuilder17DictionaryElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17ExprListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17ExpressionSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionParameterV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder17FunctionSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder17IdentifierPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17IdentifierPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17InfixOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InfixOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17InfixOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17InfixOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17InheritedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17InheritedTypeListV06createdeF0ACyF","s18SwiftSyntaxBuilder17InitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17InitializerClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17InitializerClauseV06createdE0ACyF","s18SwiftSyntaxBuilder17LayoutRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17LayoutRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17LayoutRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createdefG0ACyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createdeF0ACyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17PoundFilePathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder17PoundFunctionExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder17StmtListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17TypeListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createdE0ACyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createdeF0ACyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder18DeclModifierDetailV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18DeclModifierDetailV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18DeclModifierDetailV06createdeF0ACyF","s18SwiftSyntaxBuilder18ElseIfContinuationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createdeF0ACyF","s18SwiftSyntaxBuilder18GenericRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18GenericRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18GenericRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder18GenericRequirementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder18GenericWhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder18IfConfigClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createdefG0ACyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18MemberDeclListItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createdefG0ACyF","s18SwiftSyntaxBuilder18PatternBindingListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PatternBindingListV06createdeF0ACyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessLevelModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessPathComponentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessPathComponentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessPathComponentV06createdeF0ACyF","s18SwiftSyntaxBuilder19EnumCaseElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV06createdeF0ACyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createdefG0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createdeF0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV19createDeclBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV9buildDecl6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder19SameTypeRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createdeF0ACyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder19TuplePatternElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TuplePatternElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TuplePatternElementV06createdeF0ACyF","s18SwiftSyntaxBuilder19TuplePatternElementV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder19ValueBindingPatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createdeF0ACyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createdeF0ACyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder20ConditionElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ConditionElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20ConstrainedSugarTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createdefG0ACyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20OptionalChainingExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createdeF0ACyF","s18SwiftSyntaxBuilder20PatternListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20TupleExprElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleExprElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder20TupleTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder21AvailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder21BackDeployVersionListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder21BackDeployVersionListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder21BackDeployVersionListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21BackDeployVersionListV06createdefG0ACyF","s18SwiftSyntaxBuilder21DictionaryElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DictionaryElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNamePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListPAAE22createConditionElementAA0iJ0VyF","s18SwiftSyntaxBuilder21ExpressibleAsMoveExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsMoveExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createdeF0ACyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createdeF0ACyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder22CompositionTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder22ConformanceRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createdE0ACyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder22ExpressibleAsActorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsActorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP06createF0AA0F0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributePAAE06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder22GenericRequirementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericRequirementListV06createdeF0ACyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createdeF0ACyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createdE0ACyF","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFilePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCasePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createdeF0ACyF","s18SwiftSyntaxBuilder23TuplePatternElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsLabeledStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsLabeledStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25BackDeployVersionArgumentV06createdefG0ACyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListPAAE06createF5BlockAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createG4ListAA0gI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsGarbageNodesP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE011createTupleG7ElementAA0igJ0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTuplePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createdeF0ACyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createdefG0ACyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE012createMemberF8ListItemAA0ifjK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildablePAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildablePAAE23createInitializerClauseAA0iJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildablePAAE06createF10AnnotationAA0fI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildablePAAE06createF17InitializerClauseAA0fiJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildablePAAE18createReturnClauseAA0iJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createdefG0ACyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createdefG0ACyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder27BackDeployAttributeSpecListV06createdefgH0ACyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListPAAE06createfG5BlockAA0fgJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27PrimaryAssociatedTypeClauseV06createdefG0ACyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createdefG0ACyF","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprPAAE19createExprBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createdefG0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createdeF0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createdefG0ACyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListPAAE06createF4ExprAA0fJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createdeF0ACyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsInfixOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInfixOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsLayoutRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsLayoutRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createdefG0ACyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder31ExpressibleAsDeclModifierDetailP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsDeclModifierDetailPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createdefG0ACyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationPAAE19createDeclBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createF8SpecListAA0fiJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypePAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsConstrainedSugarTypePAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG4ExprAA0gJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsBackDeployVersionListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05builddefgH06format13leadingTrivia0aB00defghB0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createdefgH0ACyF","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignaturePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionPAAE06createH7ElementAA0hJ0VyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionPAAE06createH7ElementAA0hJ0VyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsBackDeployVersionArgumentPAAE06createfgH4ListAA0fghK0VyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createfgH4ListAA0fghK0VyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createdefG0ACyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListP06createfghiJ0AA0fghiJ0VyF","s18SwiftSyntaxBuilder40ExpressibleAsBackDeployAttributeSpecListPAAE06createB9BuildableAA0bL0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClauseP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder40ExpressibleAsPrimaryAssociatedTypeClausePAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createfghI4ListAA0fghiK0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypePAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP06createfghiJ0AA0fghiJ0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder6AsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6AsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createdE0ACyF","s18SwiftSyntaxBuilder6DoStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6DoStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IfStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IfStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createdE0ACyF","s18SwiftSyntaxBuilder7TryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder7TryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createdE0ACyF","s18SwiftSyntaxBuilder8CaseItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8CaseItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8CaseItemV06createdE0ACyF","s18SwiftSyntaxBuilder8CaseItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder8DeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8DeclNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8DeclNameV06createdE0ACyF","s18SwiftSyntaxBuilder8EnumDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8EnumDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createdE0ACyF","s18SwiftSyntaxBuilder8ExprListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ExprListV06createdE0ACyF","s18SwiftSyntaxBuilder8MoveExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8MoveExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8MoveExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8MoveExprV06createdE0ACyF","s18SwiftSyntaxBuilder8ObjcNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ObjcNameV06createdE0ACyF","s18SwiftSyntaxBuilder8TypeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8TypeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ActorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ActorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ActorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ActorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrowExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrowExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createdE0ACyF","s18SwiftSyntaxBuilder9AttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder9AttributeV06createB9BuildableAA0bF0_pyF","s18SwiftSyntaxBuilder9AttributeV06createD0ACyF","s18SwiftSyntaxBuilder9AwaitExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9AwaitExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createdE0ACyF","s18SwiftSyntaxBuilder9BreakStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9BreakStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9CatchItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CatchItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CatchItemV06createdE0ACyF","s18SwiftSyntaxBuilder9CatchItemV17withTrailingCommayACSbF","s18SwiftSyntaxBuilder9ClassDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ClassDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createdE0ACyF","s18SwiftSyntaxBuilder9CodeBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CodeBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CodeBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9DeferStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9DeferStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9ElseBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ElseBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ElseBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9ForInStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9ForInStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder9GuardStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9GuardStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9InOutExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9InOutExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createdeF0ACyF","s18SwiftSyntaxBuilder9ThrowStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ThrowStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9TokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TokenListV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9WhileStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9WhileStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldListV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createdE0ACyF","s18SwiftSyntaxBuilder010AccessPathC0V10Expressiona","s18SwiftSyntaxBuilder010AccessPathC0V11FinalResulta","s18SwiftSyntaxBuilder010AccessPathC0V9Componenta","s18SwiftSyntaxBuilder012AccessorListC0V10Expressiona","s18SwiftSyntaxBuilder012AccessorListC0V11FinalResulta","s18SwiftSyntaxBuilder012AccessorListC0V9Componenta","s18SwiftSyntaxBuilder012CaseItemListC0V10Expressiona","s18SwiftSyntaxBuilder012CaseItemListC0V11FinalResulta","s18SwiftSyntaxBuilder012CaseItemListC0V9Componenta","s18SwiftSyntaxBuilder012GarbageNodesC0V10Expressiona","s18SwiftSyntaxBuilder012GarbageNodesC0V11FinalResulta","s18SwiftSyntaxBuilder012GarbageNodesC0V9Componenta","s18SwiftSyntaxBuilder012ModifierListC0V10Expressiona","s18SwiftSyntaxBuilder012ModifierListC0V11FinalResulta","s18SwiftSyntaxBuilder012ModifierListC0V9Componenta","s18SwiftSyntaxBuilder012ObjCSelectorC0V10Expressiona","s18SwiftSyntaxBuilder012ObjCSelectorC0V11FinalResulta","s18SwiftSyntaxBuilder012ObjCSelectorC0V9Componenta","s18SwiftSyntaxBuilder013AttributeListC0V10Expressiona","s18SwiftSyntaxBuilder013AttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder013AttributeListC0V9Componenta","s18SwiftSyntaxBuilder013CatchItemListC0V10Expressiona","s18SwiftSyntaxBuilder013CatchItemListC0V11FinalResulta","s18SwiftSyntaxBuilder013CatchItemListC0V9Componenta","s18SwiftSyntaxBuilder014IdentifierListC0V10Expressiona","s18SwiftSyntaxBuilder014IdentifierListC0V11FinalResulta","s18SwiftSyntaxBuilder014IdentifierListC0V9Componenta","s18SwiftSyntaxBuilder014MemberDeclListC0V10Expressiona","s18SwiftSyntaxBuilder014MemberDeclListC0V11FinalResulta","s18SwiftSyntaxBuilder014MemberDeclListC0V9Componenta","s18SwiftSyntaxBuilder014SwitchCaseListC0V10Expressiona","s18SwiftSyntaxBuilder014SwitchCaseListC0V11FinalResulta","s18SwiftSyntaxBuilder014SwitchCaseListC0V9Componenta","s18SwiftSyntaxBuilder015CatchClauseListC0V10Expressiona","s18SwiftSyntaxBuilder015CatchClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder015CatchClauseListC0V9Componenta","s18SwiftSyntaxBuilder016ArrayElementListC0V10Expressiona","s18SwiftSyntaxBuilder016ArrayElementListC0V11FinalResulta","s18SwiftSyntaxBuilder016ArrayElementListC0V9Componenta","s18SwiftSyntaxBuilder016ClosureParamListC0V10Expressiona","s18SwiftSyntaxBuilder016ClosureParamListC0V11FinalResulta","s18SwiftSyntaxBuilder016ClosureParamListC0V9Componenta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10Expressiona","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11FinalResulta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V9Componenta","s18SwiftSyntaxBuilder017InheritedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder017InheritedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder017InheritedTypeListC0V9Componenta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10Expressiona","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11FinalResulta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V9Componenta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10Expressiona","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V9Componenta","s18SwiftSyntaxBuilder018PatternBindingListC0V10Expressiona","s18SwiftSyntaxBuilder018PatternBindingListC0V11FinalResulta","s18SwiftSyntaxBuilder018PatternBindingListC0V9Componenta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10Expressiona","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11FinalResulta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V9Componenta","s18SwiftSyntaxBuilder019GenericArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder019GenericArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder019GenericArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10Expressiona","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11FinalResulta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V9Componenta","s18SwiftSyntaxBuilder020ConditionElementListC0V10Expressiona","s18SwiftSyntaxBuilder020ConditionElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020ConditionElementListC0V9Componenta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020GenericParameterListC0V10Expressiona","s18SwiftSyntaxBuilder020GenericParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder020GenericParameterListC0V9Componenta","s18SwiftSyntaxBuilder020TupleExprElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleExprElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleExprElementListC0V9Componenta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder021BackDeployVersionListC0V10Expressiona","s18SwiftSyntaxBuilder021BackDeployVersionListC0V11FinalResulta","s18SwiftSyntaxBuilder021BackDeployVersionListC0V9Componenta","s18SwiftSyntaxBuilder021DictionaryElementListC0V10Expressiona","s18SwiftSyntaxBuilder021DictionaryElementListC0V11FinalResulta","s18SwiftSyntaxBuilder021DictionaryElementListC0V9Componenta","s18SwiftSyntaxBuilder021FunctionParameterListC0V10Expressiona","s18SwiftSyntaxBuilder021FunctionParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder021FunctionParameterListC0V9Componenta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10Expressiona","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11FinalResulta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V9Componenta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10Expressiona","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11FinalResulta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V9Componenta","s18SwiftSyntaxBuilder022GenericRequirementListC0V10Expressiona","s18SwiftSyntaxBuilder022GenericRequirementListC0V11FinalResulta","s18SwiftSyntaxBuilder022GenericRequirementListC0V9Componenta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10Expressiona","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11FinalResulta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V9Componenta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10Expressiona","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11FinalResulta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V9Componenta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V9Componenta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10Expressiona","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11FinalResulta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V9Componenta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10Expressiona","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11FinalResulta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V9Componenta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10Expressiona","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V9Componenta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10Expressiona","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11FinalResulta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V9Componenta","s18SwiftSyntaxBuilder08ExprListC0V10Expressiona","s18SwiftSyntaxBuilder08ExprListC0V11FinalResulta","s18SwiftSyntaxBuilder08ExprListC0V9Componenta","s18SwiftSyntaxBuilder08ObjcNameC0V10Expressiona","s18SwiftSyntaxBuilder08ObjcNameC0V11FinalResulta","s18SwiftSyntaxBuilder08ObjcNameC0V9Componenta","s18SwiftSyntaxBuilder09TokenListC0V10Expressiona","s18SwiftSyntaxBuilder09TokenListC0V11FinalResulta","s18SwiftSyntaxBuilder09TokenListC0V9Componenta","s11SwiftSyntax010AccessPathB0V","s11SwiftSyntax012AccessorListB0V","s11SwiftSyntax012CaseItemListB0V","s11SwiftSyntax012GarbageNodesB0V","s11SwiftSyntax012ModifierListB0V","s11SwiftSyntax012ObjCSelectorB0V","s11SwiftSyntax013AttributeListB0V","s11SwiftSyntax013CatchItemListB0V","s11SwiftSyntax014IdentifierListB0V","s11SwiftSyntax014MemberDeclListB0V","s11SwiftSyntax014SwitchCaseListB0V","s11SwiftSyntax015CatchClauseListB0V","s11SwiftSyntax016ArrayElementListB0V","s11SwiftSyntax016ClosureParamListB0V","s11SwiftSyntax017CodeBlockItemListB0V","s11SwiftSyntax017InheritedTypeListB0V","s11SwiftSyntax017NonEmptyTokenListB0V","s11SwiftSyntax018IfConfigClauseListB0V","s11SwiftSyntax018PatternBindingListB0V","s11SwiftSyntax019EnumCaseElementListB0V","s11SwiftSyntax019GenericArgumentListB0V","s11SwiftSyntax020AvailabilitySpecListB0V","s11SwiftSyntax020ConditionElementListB0V","s11SwiftSyntax020DeclNameArgumentListB0V","s11SwiftSyntax020GenericParameterListB0V","s11SwiftSyntax020TupleExprElementListB0V","s11SwiftSyntax020TupleTypeElementListB0V","s11SwiftSyntax021BackDeployVersionListB0V","s11SwiftSyntax021DictionaryElementListB0V","s11SwiftSyntax021FunctionParameterListB0V","s11SwiftSyntax021StringLiteralSegmentsB0V","s11SwiftSyntax022ClosureCaptureItemListB0V","s11SwiftSyntax022GenericRequirementListB0V","s11SwiftSyntax023PrecedenceGroupNameListB0V","s11SwiftSyntax023TuplePatternElementListB0V","s11SwiftSyntax025PrimaryAssociatedTypeListB0V","s11SwiftSyntax026CompositionTypeElementListB0V","s11SwiftSyntax026DifferentiabilityParamListB0V","s11SwiftSyntax027SpecializeAttributeSpecListB0V","s11SwiftSyntax028PrecedenceGroupAttributeListB0V","s11SwiftSyntax034MultipleTrailingClosureElementListB0V","s11SwiftSyntax04DeclB0V","s11SwiftSyntax04ExprB0V","s11SwiftSyntax04StmtB0V","s11SwiftSyntax04TypeB0V","s11SwiftSyntax05TokenB0V","s11SwiftSyntax07PatternB0V","s11SwiftSyntax08ExprListB0V","s11SwiftSyntax08ObjcNameB0V","s11SwiftSyntax09TokenListB0V","s11SwiftSyntax0B0V","s11SwiftSyntax0B8HashablePAAE2eeoiySbx_xtFZ","s11SwiftSyntax0B8HashablePAAE4hash4intoys6HasherVz_tF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013ParenthesizedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014IdentifiedDeclB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014WithStatementsB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA017WithTrailingCommaB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA09DeclGroupB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013ParenthesizedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013WithCodeBlockB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014IdentifiedDeclB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014WithStatementsB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA017WithTrailingCommaB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA06BracedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA09DeclGroupB0_pmF","s11SwiftSyntax0B8ProtocolPAAE10firstToken8viewModeAA0eB0VSgAA0b8TreeViewG0O_tF","s11SwiftSyntax0B8ProtocolPAAE10firstTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp","s11SwiftSyntax0B8ProtocolPAAE11descriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE11endLocation9converter19afterTrailingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE11sourceRange9converter18afterLeadingTrivia0g8TrailingI0AA06SourceE0VAA0K17LocationConverterC_S2btF","s11SwiftSyntax0B8ProtocolPAAE11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE12isCollectionSbvp","s11SwiftSyntax0B8ProtocolPAAE13contentLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE13indexInParentSivp","s11SwiftSyntax0B8ProtocolPAAE13leadingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13previousToken8viewModeAA0eB0VSgAA0b8TreeViewG0O_tF","s11SwiftSyntax0B8ProtocolPAAE13previousTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13startLocation9converter18afterLeadingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgAA16AbsolutePositionV_tF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgSi_tF","s11SwiftSyntax0B8ProtocolPAAE14trailingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE15classifications2inAA0B15ClassificationsVAA15ByteSourceRangeV_tF","s11SwiftSyntax0B8ProtocolPAAE15classificationsAA0B15ClassificationsVvp","s11SwiftSyntax0B8ProtocolPAAE16debugDescription15includeChildren0F6Trivia9converter4mark11indentLevelSSSb_SbAA23SourceLocationConverterCSgAaB_pSgSitF","s11SwiftSyntax0B8ProtocolPAAE16debugDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE20recursiveDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE27byteSizeAfterTrimmingTriviaSivp","s11SwiftSyntax0B8ProtocolPAAE2idAA0B10IdentifierVvp","s11SwiftSyntax0B8ProtocolPAAE31endPositionBeforeTrailingTriviaAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE34positionAfterSkippingLeadingTriviaAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE4rootAA0B0Vvp","s11SwiftSyntax0B8ProtocolPAAE5indexAA0B13ChildrenIndexVvp","s11SwiftSyntax0B8ProtocolPAAE5write2toyqd__z_ts16TextOutputStreamRd__lF","s11SwiftSyntax0B8ProtocolPAAE6parentAA0B0VSgvp","s11SwiftSyntax0B8ProtocolPAAE6tokens8viewModeAA13TokenSequenceVAA0b8TreeViewF0O_tF","s11SwiftSyntax0B8ProtocolPAAE6tokensAA13TokenSequenceVvp","s11SwiftSyntax0B8ProtocolPAAE7isTokenSbvp","s11SwiftSyntax0B8ProtocolPAAE8byteSizeSivp","s11SwiftSyntax0B8ProtocolPAAE8children8viewModeAA0B8ChildrenVAA0b8TreeViewF0O_tF","s11SwiftSyntax0B8ProtocolPAAE8childrenAA0B8ChildrenVvp","s11SwiftSyntax0B8ProtocolPAAE8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE9hasParentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isMissingSbvp","s11SwiftSyntax0B8ProtocolPAAE9isPresentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isUnknownSbvp","s11SwiftSyntax0B8ProtocolPAAE9lastToken8viewModeAA0eB0VSgAA0b8TreeViewG0O_tF","s11SwiftSyntax0B8ProtocolPAAE9lastTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE9nextToken8viewModeAA0eB0VSgAA0b8TreeViewG0O_tF","s11SwiftSyntax0B8ProtocolPAAE9nextTokenAA0eB0VSgvp","s11SwiftSyntax6TriviaV","s18SwiftSyntaxBuilder16HasTrailingCommaP04witheF0yxSbF","sSH4hash4intoys6HasherVz_tF","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSa","sSb","sSf","sSi","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByFloatLiteralP","ss25ExpressibleByFloatLiteralP05floatD0x0cD4TypeQz_tcfc","ss27ExpressibleByBooleanLiteralP","ss27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc","ss27ExpressibleByIntegerLiteralP","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc"],"vertices":[{"p":["String","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"o":1621},{"p":["String","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,507]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"o":2512},{"p":["String","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"o":2551},{"p":["String","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"o":2577},{"p":["String","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,533]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"o":2605},{"p":["String","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"o":2715},{"p":["String","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,590]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]],"o":2753},{"p":["String","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,601]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]],"o":2774},{"p":["String","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,603]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"o":2781},{"p":["String","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,618]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]],"o":2819},{"p":["String","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,637]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]],"o":2854},{"p":["String","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,651]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]],"o":2878},{"p":["Array","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,595]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"e":[["Element",2,"TokenSyntax",3270]],"c":[["Element",2,"TokenSyntax",3270]],"g":[["Element",0,0]],"o":2762},{"p":["Array","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,720]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"e":[["Element",2,"TokenSyntax",3270]],"c":[["Element",2,"TokenSyntax",3270]],"g":[["Element",0,0]],"o":2396},{"p":["Array","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,534]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]],"e":[["Element",2,"TokenSyntax",3270]],"c":[["Element",2,"TokenSyntax",3270]],"g":[["Element",0,0]],"o":2607},{"p":["Array","createGarbageNodes()"],"f":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18,499]],"s":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2499},{"p":["Array","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,515]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2543},{"p":["Array","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,541]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2622},{"p":["Array","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,648]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2873},{"p":["Array","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,679]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2940},{"p":["Array","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"e":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"c":[["Element",2,"ExpressibleAsSyntaxBuildable",165]],"g":[["Element",0,0]],"o":2947},{"p":["Array","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,492]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"e":[["Element",2,"ExpressibleAsCaseItem",184]],"c":[["Element",2,"ExpressibleAsCaseItem",184]],"g":[["Element",0,0]],"o":2484},{"p":["Array","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,516]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"e":[["Element",2,"ExpressibleAsCatchItem",198]],"c":[["Element",2,"ExpressibleAsCatchItem",198]],"g":[["Element",0,0]],"o":2544},{"p":["Array","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,543]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"e":[["Element",2,"ExpressibleAsCatchClause",220]],"c":[["Element",2,"ExpressibleAsCatchClause",220]],"g":[["Element",0,0]],"o":2632},{"p":["Array","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,565]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"e":[["Element",2,"ExpressibleAsClosureParam",230]],"c":[["Element",2,"ExpressibleAsClosureParam",230]],"g":[["Element",0,0]],"o":2693},{"p":["Array","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,502]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"e":[["Element",2,"ExpressibleAsDeclModifier",232]],"c":[["Element",2,"ExpressibleAsDeclModifier",232]],"g":[["Element",0,0]],"o":2504},{"p":["Array","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,592]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"e":[["Element",2,"ExpressibleAsInheritedType",257]],"c":[["Element",2,"ExpressibleAsInheritedType",257]],"g":[["Element",0,0]],"o":2757},{"p":["Array","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"e":[["Element",2,"ExpressibleAsObjcNamePiece",259]],"c":[["Element",2,"ExpressibleAsObjcNamePiece",259]],"g":[["Element",0,0]],"o":2317},{"p":["Array","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,610]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"e":[["Element",2,"ExpressibleAsIfConfigClause",275]],"c":[["Element",2,"ExpressibleAsIfConfigClause",275]],"g":[["Element",0,0]],"o":2797},{"p":["Array","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,613]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"e":[["Element",2,"ExpressibleAsPatternBinding",278]],"c":[["Element",2,"ExpressibleAsPatternBinding",278]],"g":[["Element",0,0]],"o":2803},{"p":["Array","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,619]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"e":[["Element",2,"ExpressibleAsEnumCaseElement",287]],"c":[["Element",2,"ExpressibleAsEnumCaseElement",287]],"g":[["Element",0,0]],"o":2822},{"p":["Array","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,620]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"e":[["Element",2,"ExpressibleAsGenericArgument",291]],"c":[["Element",2,"ExpressibleAsGenericArgument",291]],"g":[["Element",0,0]],"o":2823},{"p":["Array","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,631]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"e":[["Element",2,"ExpressibleAsConditionElement",307]],"c":[["Element",2,"ExpressibleAsConditionElement",307]],"g":[["Element",0,0]],"o":2845},{"p":["Array","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,633]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"e":[["Element",2,"ExpressibleAsDeclNameArgument",308]],"c":[["Element",2,"ExpressibleAsDeclNameArgument",308]],"g":[["Element",0,0]],"o":2848},{"p":["Array","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,634]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"e":[["Element",2,"ExpressibleAsGenericParameter",312]],"c":[["Element",2,"ExpressibleAsGenericParameter",312]],"g":[["Element",0,0]],"o":2849},{"p":["Array","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,638]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"e":[["Element",2,"ExpressibleAsTupleExprElement",319]],"c":[["Element",2,"ExpressibleAsTupleExprElement",319]],"g":[["Element",0,0]],"o":2857},{"p":["Array","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,639]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"e":[["Element",2,"ExpressibleAsTupleTypeElement",320]],"c":[["Element",2,"ExpressibleAsTupleTypeElement",320]],"g":[["Element",0,0]],"o":2858},{"p":["Array","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,642]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"e":[["Element",2,"ExpressibleAsDictionaryElement",326]],"c":[["Element",2,"ExpressibleAsDictionaryElement",326]],"g":[["Element",0,0]],"o":2862},{"p":["Array","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,645]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"e":[["Element",2,"ExpressibleAsFunctionParameter",329]],"c":[["Element",2,"ExpressibleAsFunctionParameter",329]],"g":[["Element",0,0]],"o":2867},{"p":["Array","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,503]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"e":[["Element",2,"ExpressibleAsObjCSelectorPiece",337]],"c":[["Element",2,"ExpressibleAsObjCSelectorPiece",337]],"g":[["Element",0,0]],"o":2505},{"p":["Array","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,653]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"e":[["Element",2,"ExpressibleAsClosureCaptureItem",346]],"c":[["Element",2,"ExpressibleAsClosureCaptureItem",346]],"g":[["Element",0,0]],"o":2886},{"p":["Array","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,658]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"e":[["Element",2,"ExpressibleAsGenericRequirement",349]],"c":[["Element",2,"ExpressibleAsGenericRequirement",349]],"g":[["Element",0,0]],"o":2897},{"p":["Array","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,476]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"e":[["Element",2,"ExpressibleAsAccessPathComponent",359]],"c":[["Element",2,"ExpressibleAsAccessPathComponent",359]],"g":[["Element",0,0]],"o":2424},{"p":["Array","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,665]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"e":[["Element",2,"ExpressibleAsTuplePatternElement",367]],"c":[["Element",2,"ExpressibleAsTuplePatternElement",367]],"g":[["Element",0,0]],"o":2909},{"p":["Array","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,629]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"e":[["Element",2,"ExpressibleAsAvailabilityArgument",369]],"c":[["Element",2,"ExpressibleAsAvailabilityArgument",369]],"g":[["Element",0,0]],"o":2842},{"p":["Array","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,671]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"e":[["Element",2,"ExpressibleAsPrimaryAssociatedType",388]],"c":[["Element",2,"ExpressibleAsPrimaryAssociatedType",388]],"g":[["Element",0,0]],"o":2923},{"p":["Array","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,672]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"e":[["Element",2,"ExpressibleAsCompositionTypeElement",395]],"c":[["Element",2,"ExpressibleAsCompositionTypeElement",395]],"g":[["Element",0,0]],"o":2924},{"p":["Array","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,673]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"e":[["Element",2,"ExpressibleAsDifferentiabilityParam",397]],"c":[["Element",2,"ExpressibleAsDifferentiabilityParam",397]],"g":[["Element",0,0]],"o":2925},{"p":["Array","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,641]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"e":[["Element",2,"ExpressibleAsBackDeployVersionArgument",410]],"c":[["Element",2,"ExpressibleAsBackDeployVersionArgument",410]],"g":[["Element",0,0]],"o":2861},{"p":["Array","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,663]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"e":[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",416]],"c":[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",416]],"g":[["Element",0,0]],"o":2906},{"p":["Array","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,689]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"e":[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",427]],"c":[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",427]],"g":[["Element",0,0]],"o":2959},{"p":["TokenSyntax","poundEndif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18]],"d":"The `#endif` keyword"},{"p":["TokenSyntax","poundError"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18]],"d":"The `#error` keyword"},{"p":["TokenSyntax","rightAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `>` token"},{"p":["TokenSyntax","rightBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `}` token"},{"p":["TokenSyntax","rightParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","capitalSelf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18]],"d":"The `Self` keyword"},{"p":["TokenSyntax","fallthrough"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18]],"d":"The `fallthrough` keyword"},{"p":["TokenSyntax","fileprivate"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18]],"d":"The `fileprivate` keyword"},{"p":["TokenSyntax","poundAssert"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18]],"d":"The `#assert` keyword"},{"p":["TokenSyntax","poundColumn"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18]],"d":"The `#column` keyword"},{"p":["TokenSyntax","poundElseif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18]],"d":"The `#elseif` keyword"},{"p":["TokenSyntax","poundFileID"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileID` keyword"},{"p":["TokenSyntax","singleQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `'` token"},{"p":["TokenSyntax","stringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"` token"},{"p":["TokenSyntax","poundKeyPath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18]],"d":"The `#keyPath` keyword"},{"p":["TokenSyntax","poundWarning"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18]],"d":"The `#warning` keyword"},{"p":["TokenSyntax","prefixPeriod"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","poundFilePath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18]],"d":"The `#filePath` keyword"},{"p":["TokenSyntax","poundFunction"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18]],"d":"The `#function` keyword"},{"p":["TokenSyntax","poundSelector"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18]],"d":"The `#selector` keyword"},{"p":["TokenSyntax","associatedtype"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18]],"d":"The `associatedtype` keyword"},{"p":["TokenSyntax","poundAvailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#available` keyword"},{"p":["TokenSyntax","poundDsohandle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18]],"d":"The `#dsohandle` keyword"},{"p":["TokenSyntax","exclamationMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]],"d":"The `!` token"},{"p":["TokenSyntax","precedencegroup"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18]],"d":"The `precedencegroup` keyword"},{"p":["TokenSyntax","prefixAmpersand"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18]],"d":"The `&` token"},{"p":["TokenSyntax","poundFileLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileLiteral` keyword"},{"p":["TokenSyntax","poundUnavailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#unavailable` keyword"},{"p":["TokenSyntax","infixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","leftSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `[` token"},{"p":["TokenSyntax","poundColorLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#colorLiteral` keyword"},{"p":["TokenSyntax","poundImageLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#imageLiteral` keyword"},{"p":["TokenSyntax","rightSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `]` token"},{"p":["TokenSyntax","postfixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","poundSourceLocation"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18]],"d":"The `#sourceLocation` keyword"},{"p":["TokenSyntax","multilineStringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"\"\"` token"},{"p":["TokenSyntax","stringInterpolationAnchor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","as"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18]],"d":"The `as` keyword"},{"p":["TokenSyntax","do"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18]],"d":"The `do` keyword"},{"p":["TokenSyntax","if"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18]],"d":"The `if` keyword"},{"p":["TokenSyntax","in"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18]],"d":"The `in` keyword"},{"p":["TokenSyntax","is"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18]],"d":"The `is` keyword"},{"p":["TokenSyntax","any"],"f":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18]],"d":"The `Any` keyword"},{"p":["TokenSyntax","eof"],"f":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18]],"d":"The `eof` token"},{"p":["TokenSyntax","for"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18]],"d":"The `for` keyword"},{"p":["TokenSyntax","let"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18]],"d":"The `let` keyword"},{"p":["TokenSyntax","nil"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18]],"d":"The `nil` keyword"},{"p":["TokenSyntax","try"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18]],"d":"The `try` keyword"},{"p":["TokenSyntax","var"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18]],"d":"The `var` keyword"},{"p":["TokenSyntax","case"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18]],"d":"The `case` keyword"},{"p":["TokenSyntax","else"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18]],"d":"The `else` keyword"},{"p":["TokenSyntax","enum"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18]],"d":"The `enum` keyword"},{"p":["TokenSyntax","func"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18]],"d":"The `func` keyword"},{"p":["TokenSyntax","init"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18]],"d":"The `init` keyword"},{"p":["TokenSyntax","open"],"f":[["static",12],[" ",17],["var",12],[" ",17],["open",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["open",7],[": ",17],["TokenSyntax",18]],"d":"The `open` contextual token"},{"p":["TokenSyntax","self"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18]],"d":"The `self` keyword"},{"p":["TokenSyntax","true"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18]],"d":"The `true` keyword"},{"p":["TokenSyntax","arrow"],"f":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]],"d":"The `->` token"},{"p":["TokenSyntax","break"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18]],"d":"The `break` keyword"},{"p":["TokenSyntax","catch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18]],"d":"The `catch` keyword"},{"p":["TokenSyntax","class"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18]],"d":"The `class` keyword"},{"p":["TokenSyntax","colon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The `:` token"},{"p":["TokenSyntax","comma"],"f":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]],"d":"The `,` token"},{"p":["TokenSyntax","defer"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18]],"d":"The `defer` keyword"},{"p":["TokenSyntax","equal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]],"d":"The `=` token"},{"p":["TokenSyntax","false"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18]],"d":"The `false` keyword"},{"p":["TokenSyntax","guard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18]],"d":"The `guard` keyword"},{"p":["TokenSyntax","inout"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18]],"d":"The `inout` keyword"},{"p":["TokenSyntax","pound"],"f":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18]],"d":"The `#` token"},{"p":["TokenSyntax","super"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18]],"d":"The `super` keyword"},{"p":["TokenSyntax","throw"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18]],"d":"The `throw` keyword"},{"p":["TokenSyntax","where"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18]],"d":"The `where` keyword"},{"p":["TokenSyntax","while"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18]],"d":"The `while` keyword"},{"p":["TokenSyntax","yield"],"f":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18]],"d":"The `yield` token"},{"p":["TokenSyntax","atSign"],"f":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18]],"d":"The `@` token"},{"p":["TokenSyntax","deinit"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18]],"d":"The `deinit` keyword"},{"p":["TokenSyntax","import"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18]],"d":"The `import` keyword"},{"p":["TokenSyntax","period"],"f":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","public"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18]],"d":"The `public` keyword"},{"p":["TokenSyntax","repeat"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18]],"d":"The `repeat` keyword"},{"p":["TokenSyntax","return"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18]],"d":"The `return` keyword"},{"p":["TokenSyntax","static"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18]],"d":"The `static` keyword"},{"p":["TokenSyntax","struct"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18]],"d":"The `struct` keyword"},{"p":["TokenSyntax","switch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18]],"d":"The `switch` keyword"},{"p":["TokenSyntax","throws"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18]],"d":"The `throws` keyword"},{"p":["TokenSyntax","default"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18]],"d":"The `default` keyword"},{"p":["TokenSyntax","poundIf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18]],"d":"The `#if` keyword"},{"p":["TokenSyntax","private"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18]],"d":"The `private` keyword"},{"p":["TokenSyntax","backtick"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18]],"d":"The ``` token"},{"p":["TokenSyntax","continue"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18]],"d":"The `continue` keyword"},{"p":["TokenSyntax","ellipsis"],"f":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18]],"d":"The `...` token"},{"p":["TokenSyntax","internal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18]],"d":"The `internal` keyword"},{"p":["TokenSyntax","operator"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18]],"d":"The `operator` keyword"},{"p":["TokenSyntax","protocol"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18]],"d":"The `protocol` keyword"},{"p":["TokenSyntax","rethrows"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18]],"d":"The `rethrows` keyword"},{"p":["TokenSyntax","wildcard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]],"d":"The `_` keyword"},{"p":["TokenSyntax","backslash"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]],"d":"The `\\` token"},{"p":["TokenSyntax","extension"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18]],"d":"The `extension` keyword"},{"p":["TokenSyntax","leftAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `<` token"},{"p":["TokenSyntax","leftBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `{` token"},{"p":["TokenSyntax","leftParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"d":"The `(` token"},{"p":["TokenSyntax","poundElse"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18]],"d":"The `#else` keyword"},{"p":["TokenSyntax","poundFile"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18]],"d":"The `#file` keyword"},{"p":["TokenSyntax","poundLine"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18]],"d":"The `#line` keyword"},{"p":["TokenSyntax","semicolon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18]],"d":"The `;` token"},{"p":["TokenSyntax","subscript"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18]],"d":"The `subscript` keyword"},{"p":["TokenSyntax","typealias"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18,3270],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18]],"d":"The `typealias` keyword"},{"p":["TokenSyntax","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,595]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to ExpressibleAsNonEmptyTokenList","o":2762},{"p":["TokenSyntax","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"o":1621},{"p":["TokenSyntax","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,720]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to ExpressibleAsTokenList","o":2396},{"p":["TokenSyntax","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,495]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to ExpressibleAsDeclModifier","o":2490},{"p":["TokenSyntax","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"o":2551},{"p":["TokenSyntax","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,533]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to ExpressibleAsIdentifierExpr","o":2605},{"p":["TokenSyntax","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,603]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to ExpressibleAsBinaryOperatorExpr","o":2781},{"p":["ExpressibleAsSyntaxBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7],[" : ",17],["ExpressibleAsAttributeList",18,251],[", ",17],["ExpressibleAsGarbageNodes",18,236],[", ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,424],[", ",17],["ExpressibleAsSpecializeAttributeSpecList",18,420],[", ",17],["ExpressibleAsStringLiteralSegments",18,389],[", ",17],["ExpressibleAsSwitchCaseList",18,281]],"s":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7]]},{"p":["ExpressibleAsAsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7]]},{"p":["ExpressibleAsAsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7]]},{"p":["SyntaxListBuildable"],"f":[["protocol",12],[" ",17],["SyntaxListBuildable",7]],"s":[["protocol",12],[" ",17],["SyntaxListBuildable",7]]},{"p":["SyntaxBuildable"],"f":[["protocol",12],[" ",17],["SyntaxBuildable",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["SyntaxBuildable",7]]},{"p":["DeclBuildable"],"f":[["protocol",12],[" ",17],["DeclBuildable",7],[" : ",17],["DeclListBuildable",18,175],[", ",17],["ExpressibleAsDeclBuildable",18,254],[", ",17],["SyntaxBuildable",18,169]],"s":[["protocol",12],[" ",17],["DeclBuildable",7]]},{"p":["ExprBuildable"],"f":[["protocol",12],[" ",17],["ExprBuildable",7],[" : ",17],["ExprListBuildable",18,176],[", ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["SyntaxBuildable",18,169]],"s":[["protocol",12],[" ",17],["ExprBuildable",7]]},{"p":["StmtBuildable"],"f":[["protocol",12],[" ",17],["StmtBuildable",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262],[", ",17],["StmtListBuildable",18,177],[", ",17],["SyntaxBuildable",18,169]],"s":[["protocol",12],[" ",17],["StmtBuildable",7]]},{"p":["TypeBuildable"],"f":[["protocol",12],[" ",17],["TypeBuildable",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["SyntaxBuildable",18,169],[", ",17],["TypeListBuildable",18,178]],"s":[["protocol",12],[" ",17],["TypeBuildable",7]]},{"p":["PatternBuildable"],"f":[["protocol",12],[" ",17],["PatternBuildable",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["PatternListBuildable",18,183],[", ",17],["SyntaxBuildable",18,169]],"s":[["protocol",12],[" ",17],["PatternBuildable",7]]},{"p":["DeclListBuildable"],"f":[["protocol",12],[" ",17],["DeclListBuildable",7],[" : ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["DeclListBuildable",7]]},{"p":["ExprListBuildable"],"f":[["protocol",12],[" ",17],["ExprListBuildable",7],[" : ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["ExprListBuildable",7]]},{"p":["StmtListBuildable"],"f":[["protocol",12],[" ",17],["StmtListBuildable",7],[" : ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["StmtListBuildable",7]]},{"p":["TypeListBuildable"],"f":[["protocol",12],[" ",17],["TypeListBuildable",7],[" : ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["TypeListBuildable",7]]},{"p":["ExpressibleAsDoStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7]]},{"p":["ExpressibleAsIfStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7]]},{"p":["ExpressibleAsIsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7]]},{"p":["ExpressibleAsTryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7]]},{"p":["PatternListBuildable"],"f":[["protocol",12],[" ",17],["PatternListBuildable",7],[" : ",17],["SyntaxListBuildable",18,168]],"s":[["protocol",12],[" ",17],["PatternListBuildable",7]]},{"p":["ExpressibleAsCaseItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7],[" : ",17],["ExpressibleAsCaseItemList",18,229],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7]]},{"p":["ExpressibleAsDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7]]},{"p":["ExpressibleAsEnumDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7]]},{"p":["ExpressibleAsExprList"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprList",7],[" : ",17],["ExpressibleAsConditionElement",18,307]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprList",7]]},{"p":["ExpressibleAsMoveExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsMoveExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsMoveExpr",7]]},{"p":["ExpressibleAsObjcName"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]]},{"p":["ExpressibleAsTypeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7]]},{"p":["ExpressibleAsActorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsActorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsActorDecl",7]]},{"p":["ExpressibleAsArrayExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7]]},{"p":["ExpressibleAsArrayType"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7]]},{"p":["ExpressibleAsArrowExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7]]},{"p":["ExpressibleAsAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7]]},{"p":["ExpressibleAsAwaitExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7]]},{"p":["ExpressibleAsBreakStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7]]},{"p":["ExpressibleAsCatchItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7],[" : ",17],["ExpressibleAsCatchItemList",18,252],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7]]},{"p":["ExpressibleAsClassDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7]]},{"p":["ExpressibleAsCodeBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7]]},{"p":["ExpressibleAsDeferStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7]]},{"p":["ExpressibleAsElseBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7]]},{"p":["ExpressibleAsForInStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7]]},{"p":["ExpressibleAsGuardStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7]]},{"p":["ExpressibleAsInOutExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7]]},{"p":["ExpressibleAsThrowStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7]]},{"p":["ExpressibleAsTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]]},{"p":["ExpressibleAsTupleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7]]},{"p":["ExpressibleAsTupleType"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7]]},{"p":["ExpressibleAsWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7]]},{"p":["ExpressibleAsYieldList"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7]]},{"p":["ExpressibleAsYieldStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7]]},{"p":["ExpressibleAsAccessPath"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]]},{"p":["ExpressibleAsImportDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7]]},{"p":["ExpressibleAsReturnStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7]]},{"p":["ExpressibleAsSourceFile"],"f":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7]]},{"p":["ExpressibleAsStructDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7]]},{"p":["ExpressibleAsSwitchCase"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7]]},{"p":["ExpressibleAsSwitchStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7]]},{"p":["ExpressibleAsCatchClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7],[" : ",17],["ExpressibleAsCatchClauseList",18,283],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7]]},{"p":["ExpressibleAsClosureExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7]]},{"p":["ExpressibleAsKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7]]},{"p":["ExpressibleAsLabeledStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsLabeledStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsLabeledStmt",7]]},{"p":["ExpressibleAsTernaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7]]},{"p":["ExpressibleAsWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7]]},{"p":["ExpressibleAsAccessorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7],[" : ",17],["ExpressibleAsAccessorList",18,227],[", ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7]]},{"p":["ExpressibleAsAccessorList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7],[" : ",17],["ExpressibleAsAccessorBlock",18,250]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7]]},{"p":["ExpressibleAsArrayElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7],[" : ",17],["ExpressibleAsArrayElementList",18,304]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7]]},{"p":["ExpressibleAsCaseItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]]},{"p":["ExpressibleAsClosureParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7],[" : ",17],["ExpressibleAsClosureParamList",18,305],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7]]},{"p":["ExpressibleAsContinueStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7]]},{"p":["ExpressibleAsDeclModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7],[" : ",17],["ExpressibleAsModifierList",18,239],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7]]},{"p":["ExpressibleAsEnumCaseDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7]]},{"p":["ExpressibleAsFunctionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7]]},{"p":["ExpressibleAsFunctionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7]]},{"p":["ExpressibleAsGarbageNodes"],"f":[["protocol",12],[" ",17],["ExpressibleAsGarbageNodes",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGarbageNodes",7]]},{"p":["ExpressibleAsIfConfigDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7]]},{"p":["ExpressibleAsMetatypeType"],"f":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7]]},{"p":["ExpressibleAsModifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]]},{"p":["ExpressibleAsObjCSelector"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]]},{"p":["ExpressibleAsOperatorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7]]},{"p":["ExpressibleAsOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7]]},{"p":["ExpressibleAsProtocolDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7]]},{"p":["ExpressibleAsReturnClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7]]},{"p":["ExpressibleAsSequenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["ExpressibleAsTupleExprElement",18,319]],"s":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7]]},{"p":["ExpressibleAsSuperRefExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7]]},{"p":["ExpressibleAsTuplePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7]]},{"p":["ExpressibleAsVariableDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7]]},{"p":["ExpressibleAsVersionTuple"],"f":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7]]},{"p":["ExpressibleAsAccessorBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7]]},{"p":["ExpressibleAsAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]]},{"p":["ExpressibleAsCatchItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]]},{"p":["ExpressibleAsCodeBlockItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7],[" : ",17],["ExpressibleAsCodeBlockItemList",18,323]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7]]},{"p":["ExpressibleAsDeclBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,253],[", ",17],["ExpressibleAsMemberDeclListItem",18,353]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7]]},{"p":["ExpressibleAsExprBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,253],[", ",17],["ExpressibleAsExprList",18,187],[", ",17],["ExpressibleAsInitializerClause",18,334]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7]]},{"p":["ExpressibleAsExtensionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7]]},{"p":["ExpressibleAsInheritedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7],[" : ",17],["ExpressibleAsInheritedTypeList",18,333],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7]]},{"p":["ExpressibleAsIsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7]]},{"p":["ExpressibleAsObjcNamePiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7],[" : ",17],["ExpressibleAsObjcName",18,189],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7]]},{"p":["ExpressibleAsPoundFileExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7]]},{"p":["ExpressibleAsPoundLineExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7]]},{"p":["ExpressibleAsStmtBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,253]],"s":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7]]},{"p":["ExpressibleAsStringSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7]]},{"p":["ExpressibleAsSubscriptDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7]]},{"p":["ExpressibleAsSubscriptExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7]]},{"p":["ExpressibleAsTypeBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7],[" : ",17],["ExpressibleAsReturnClause",18,244],[", ",17],["ExpressibleAsTypeAnnotation",18,282],[", ",17],["ExpressibleAsTypeInitializerClause",18,392]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7]]},{"p":["ExpressibleAsTypealiasDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7]]},{"p":["ExpressibleAsAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7]]},{"p":["ExpressibleAsAttributedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7]]},{"p":["ExpressibleAsDictionaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7]]},{"p":["ExpressibleAsDictionaryType"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7]]},{"p":["ExpressibleAsExpressionStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7]]},{"p":["ExpressibleAsIdentifierExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7]]},{"p":["ExpressibleAsIdentifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]]},{"p":["ExpressibleAsIfConfigClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7],[" : ",17],["ExpressibleAsIfConfigClauseList",18,351],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7]]},{"p":["ExpressibleAsMemberDeclList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7],[" : ",17],["ExpressibleAsMemberDeclBlock",18,294]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7]]},{"p":["ExpressibleAsNilLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7]]},{"p":["ExpressibleAsPatternBinding"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7],[" : ",17],["ExpressibleAsPatternBindingList",18,354],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7]]},{"p":["ExpressibleAsPoundErrorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7]]},{"p":["ExpressibleAsSpecializeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7]]},{"p":["ExpressibleAsSwitchCaseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]]},{"p":["ExpressibleAsTypeAnnotation"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7]]},{"p":["ExpressibleAsCatchClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]]},{"p":["ExpressibleAsCompositionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7]]},{"p":["ExpressibleAsCustomAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7]]},{"p":["ExpressibleAsDeclarationStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7]]},{"p":["ExpressibleAsEnumCaseElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7],[" : ",17],["ExpressibleAsEnumCaseElementList",18,360],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7]]},{"p":["ExpressibleAsEnumCasePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7]]},{"p":["ExpressibleAsFallthroughStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7]]},{"p":["ExpressibleAsForcedValueExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7]]},{"p":["ExpressibleAsGenericArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7],[" : ",17],["ExpressibleAsGenericArgumentList",18,361],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7]]},{"p":["ExpressibleAsInitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7]]},{"p":["ExpressibleAsKeyPathBaseExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7]]},{"p":["ExpressibleAsMemberDeclBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7]]},{"p":["ExpressibleAsObjcKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7]]},{"p":["ExpressibleAsOptionalPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7]]},{"p":["ExpressibleAsParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7]]},{"p":["ExpressibleAsPoundAssertStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7]]},{"p":["ExpressibleAsPoundColumnExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7]]},{"p":["ExpressibleAsPoundFileIDExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7]]},{"p":["ExpressibleAsRepeatWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,262]],"s":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7]]},{"p":["ExpressibleAsSwitchCaseLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7]]},{"p":["ExpressibleAsWildcardPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7]]},{"p":["ExpressibleAsArrayElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7],[" : ",17],["ExpressibleAsArrayExpr",18,192]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7]]},{"p":["ExpressibleAsClosureParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]]},{"p":["ExpressibleAsClosureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7]]},{"p":["ExpressibleAsConditionElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7],[" : ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7]]},{"p":["ExpressibleAsDeclNameArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7],[" : ",17],["ExpressibleAsDeclNameArgumentList",18,374],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7]]},{"p":["ExpressibleAsFloatLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7]]},{"p":["ExpressibleAsFunctionCallExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7]]},{"p":["ExpressibleAsFunctionDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7]]},{"p":["ExpressibleAsGenericParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7],[" : ",17],["ExpressibleAsGenericParameterList",18,375],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7]]},{"p":["ExpressibleAsMemberAccessExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7]]},{"p":["ExpressibleAsObjcSelectorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7]]},{"p":["ExpressibleAsPatternBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]]},{"p":["ExpressibleAsPostfixUnaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7]]},{"p":["ExpressibleAsPoundWarningDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7]]},{"p":["ExpressibleAsRegexLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7]]},{"p":["ExpressibleAsTupleExprElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["ExpressibleAsTupleExprElementList",18,379]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7]]},{"p":["ExpressibleAsTupleTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["ExpressibleAsTupleTypeElementList",18,380]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7]]},{"p":["ExpressibleAsAccessorParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7]]},{"p":["ExpressibleAsAvailabilityEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7]]},{"p":["ExpressibleAsCodeBlockItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7],[" : ",17],["ExpressibleAsCodeBlock",18,200]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7]]},{"p":["ExpressibleAsDeclNameArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7]]},{"p":["ExpressibleAsDeinitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7]]},{"p":["ExpressibleAsDictionaryElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7],[" : ",17],["ExpressibleAsDictionaryElementList",18,383],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7]]},{"p":["ExpressibleAsExpressionPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7]]},{"p":["ExpressibleAsExpressionSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7]]},{"p":["ExpressibleAsFunctionParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7],[" : ",17],["ExpressibleAsFunctionParameterList",18,386],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7]]},{"p":["ExpressibleAsFunctionSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7]]},{"p":["ExpressibleAsIdentifierPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7]]},{"p":["ExpressibleAsInfixOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsInfixOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsInfixOperatorExpr",7]]},{"p":["ExpressibleAsInheritedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]]},{"p":["ExpressibleAsInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7]]},{"p":["ExpressibleAsLayoutRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsLayoutRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsLayoutRequirement",7]]},{"p":["ExpressibleAsNonEmptyTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]]},{"p":["ExpressibleAsObjCSelectorPiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7],[" : ",17],["ExpressibleAsObjCSelector",18,240],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7]]},{"p":["ExpressibleAsObjectLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7]]},{"p":["ExpressibleAsPoundFilePathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7]]},{"p":["ExpressibleAsPoundFunctionExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7]]},{"p":["ExpressibleAsQualifiedDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7]]},{"p":["ExpressibleAsStringLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7]]},{"p":["ExpressibleAsAssociatedtypeDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7]]},{"p":["ExpressibleAsBinaryOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7]]},{"p":["ExpressibleAsBooleanLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7]]},{"p":["ExpressibleAsClosureCaptureItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7],[" : ",17],["ExpressibleAsClosureCaptureItemList",18,394],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7]]},{"p":["ExpressibleAsDeclModifierDetail"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclModifierDetail",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclModifierDetail",7]]},{"p":["ExpressibleAsElseIfContinuation"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7]]},{"p":["ExpressibleAsGenericRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7],[" : ",17],["ExpressibleAsGenericRequirementList",18,399],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7]]},{"p":["ExpressibleAsGenericWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7]]},{"p":["ExpressibleAsIfConfigClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]]},{"p":["ExpressibleAsIntegerLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7]]},{"p":["ExpressibleAsMemberDeclListItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7],[" : ",17],["ExpressibleAsMemberDeclList",18,276]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7]]},{"p":["ExpressibleAsPatternBindingList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]]},{"p":["ExpressibleAsPoundDsohandleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7]]},{"p":["ExpressibleAsPrefixOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7]]},{"p":["ExpressibleAsSwitchDefaultLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7]]},{"p":["ExpressibleAsAccessLevelModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7]]},{"p":["ExpressibleAsAccessPathComponent"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7],[" : ",17],["ExpressibleAsAccessPath",18,213],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7]]},{"p":["ExpressibleAsEnumCaseElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]]},{"p":["ExpressibleAsGenericArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]]},{"p":["ExpressibleAsPostfixIfConfigExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7]]},{"p":["ExpressibleAsPoundSourceLocation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7]]},{"p":["ExpressibleAsPrecedenceGroupDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,254]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7]]},{"p":["ExpressibleAsSameTypeRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7]]},{"p":["ExpressibleAsTargetFunctionEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7]]},{"p":["ExpressibleAsTuplePatternElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["ExpressibleAsTuplePatternElementList",18,406]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7]]},{"p":["ExpressibleAsValueBindingPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,315]],"s":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7]]},{"p":["ExpressibleAsAvailabilityArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7],[" : ",17],["ExpressibleAsAvailabilitySpecList",18,370],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7]]},{"p":["ExpressibleAsAvailabilitySpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]]},{"p":["ExpressibleAsClassRestrictionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7]]},{"p":["ExpressibleAsConditionElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]]},{"p":["ExpressibleAsConstrainedSugarType"],"f":[["protocol",12],[" ",17],["ExpressibleAsConstrainedSugarType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsConstrainedSugarType",7]]},{"p":["ExpressibleAsDeclNameArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]]},{"p":["ExpressibleAsGenericParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]]},{"p":["ExpressibleAsMemberTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7]]},{"p":["ExpressibleAsOptionalChainingExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7]]},{"p":["ExpressibleAsSimpleTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["ExpressibleAsTypeExpr",18,190]],"s":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7]]},{"p":["ExpressibleAsTupleExprElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]]},{"p":["ExpressibleAsTupleTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]]},{"p":["ExpressibleAsAvailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7]]},{"p":["ExpressibleAsBackDeployVersionList"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionList",7]]},{"p":["ExpressibleAsDictionaryElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]]},{"p":["ExpressibleAsDiscardAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7]]},{"p":["ExpressibleAsEditorPlaceholderExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7]]},{"p":["ExpressibleAsFunctionParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]]},{"p":["ExpressibleAsGenericArgumentClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7]]},{"p":["ExpressibleAsPrimaryAssociatedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7],[" : ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,412],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7]]},{"p":["ExpressibleAsStringLiteralSegments"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]]},{"p":["ExpressibleAsSymbolicReferenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7]]},{"p":["ExpressibleAsTypeInheritanceClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7]]},{"p":["ExpressibleAsTypeInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7]]},{"p":["ExpressibleAsUnresolvedPatternExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7]]},{"p":["ExpressibleAsClosureCaptureItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]]},{"p":["ExpressibleAsCompositionTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7],[" : ",17],["ExpressibleAsCompositionTypeElementList",18,413],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7]]},{"p":["ExpressibleAsConformanceRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7]]},{"p":["ExpressibleAsDifferentiabilityParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7],[" : ",17],["ExpressibleAsDifferentiabilityParamList",18,414],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7]]},{"p":["ExpressibleAsGenericParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7]]},{"p":["ExpressibleAsGenericRequirementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]]},{"p":["ExpressibleAsLabeledSpecializeEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7]]},{"p":["ExpressibleAsClosureCaptureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7]]},{"p":["ExpressibleAsDifferentiabilityParams"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7]]},{"p":["ExpressibleAsPoundSourceLocationArgs"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7]]},{"p":["ExpressibleAsPrecedenceGroupNameList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]]},{"p":["ExpressibleAsPrecedenceGroupRelation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7]]},{"p":["ExpressibleAsTuplePatternElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]]},{"p":["ExpressibleAsUnavailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7]]},{"p":["ExpressibleAsMatchingPatternCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7],[" : ",17],["ExpressibleAsConditionElement",18,307]],"s":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7]]},{"p":["ExpressibleAsOptionalBindingCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7],[" : ",17],["ExpressibleAsConditionElement",18,307]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7]]},{"p":["ExpressibleAsBackDeployVersionArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionArgument",7],[" : ",17],["ExpressibleAsBackDeployVersionList",18,382],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployVersionArgument",7]]},{"p":["ExpressibleAsPrecedenceGroupAssignment"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]]},{"p":["ExpressibleAsCompositionTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]]},{"p":["ExpressibleAsDifferentiabilityParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7]]},{"p":["ExpressibleAsPrecedenceGroupNameElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7],[" : ",17],["ExpressibleAsPrecedenceGroupNameList",18,404],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7]]},{"p":["ExpressibleAsAvailabilityLabeledArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7]]},{"p":["ExpressibleAsBackDeployAttributeSpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsBackDeployAttributeSpecList",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsBackDeployAttributeSpecList",7]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeClause",7]]},{"p":["ExpressibleAsSpecializeAttributeSpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]]},{"p":["ExpressibleAsImplementsAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7]]},{"p":["ExpressibleAsNamedAttributeStringArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]]},{"p":["ExpressibleAsDifferentiabilityParamsClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7]]},{"p":["ExpressibleAsAvailabilityVersionRestriction"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7],[" : ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],[", ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,266]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7]]},{"p":["ExpressibleAsDifferentiableAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7]]},{"p":["AccessPathBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessPathBuilder",7]],"s":[["struct",12],[" ",17],["AccessPathBuilder",7]]},{"p":["AccessorListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessorListBuilder",7]],"s":[["struct",12],[" ",17],["AccessorListBuilder",7]]},{"p":["CaseItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CaseItemListBuilder",7]],"s":[["struct",12],[" ",17],["CaseItemListBuilder",7]]},{"p":["GarbageNodesBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GarbageNodesBuilder",7]],"s":[["struct",12],[" ",17],["GarbageNodesBuilder",7]]},{"p":["ModifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ModifierListBuilder",7]],"s":[["struct",12],[" ",17],["ModifierListBuilder",7]]},{"p":["ObjCSelectorBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjCSelectorBuilder",7]],"s":[["struct",12],[" ",17],["ObjCSelectorBuilder",7]]},{"p":["AttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AttributeListBuilder",7]],"s":[["struct",12],[" ",17],["AttributeListBuilder",7]]},{"p":["CatchItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchItemListBuilder",7]],"s":[["struct",12],[" ",17],["CatchItemListBuilder",7]]},{"p":["IdentifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IdentifierListBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierListBuilder",7]]},{"p":["MemberDeclListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MemberDeclListBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclListBuilder",7]]},{"p":["SwitchCaseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SwitchCaseListBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseListBuilder",7]]},{"p":["CatchClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchClauseListBuilder",7]],"s":[["struct",12],[" ",17],["CatchClauseListBuilder",7]]},{"p":["ArrayElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ArrayElementListBuilder",7]],"s":[["struct",12],[" ",17],["ArrayElementListBuilder",7]]},{"p":["ClosureParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureParamListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureParamListBuilder",7]]},{"p":["CodeBlockItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CodeBlockItemListBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockItemListBuilder",7]]},{"p":["InheritedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["InheritedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["InheritedTypeListBuilder",7]]},{"p":["NonEmptyTokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]]},{"p":["IfConfigClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IfConfigClauseListBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigClauseListBuilder",7]]},{"p":["PatternBindingListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PatternBindingListBuilder",7]],"s":[["struct",12],[" ",17],["PatternBindingListBuilder",7]]},{"p":["EnumCaseElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["EnumCaseElementListBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseElementListBuilder",7]]},{"p":["GenericArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentListBuilder",7]]},{"p":["AvailabilitySpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]]},{"p":["ConditionElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ConditionElementListBuilder",7]],"s":[["struct",12],[" ",17],["ConditionElementListBuilder",7]]},{"p":["DeclNameArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]]},{"p":["GenericParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericParameterListBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterListBuilder",7]]},{"p":["TupleExprElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleExprElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprElementListBuilder",7]]},{"p":["TupleTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeElementListBuilder",7]]},{"p":["BackDeployVersionListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["BackDeployVersionListBuilder",7]],"s":[["struct",12],[" ",17],["BackDeployVersionListBuilder",7]]},{"p":["DictionaryElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DictionaryElementListBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryElementListBuilder",7]]},{"p":["FunctionParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["FunctionParameterListBuilder",7]],"s":[["struct",12],[" ",17],["FunctionParameterListBuilder",7]]},{"p":["StringLiteralSegmentsBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]],"s":[["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]]},{"p":["ClosureCaptureItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]]},{"p":["GenericRequirementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericRequirementListBuilder",7]],"s":[["struct",12],[" ",17],["GenericRequirementListBuilder",7]]},{"p":["PrecedenceGroupNameListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]]},{"p":["TuplePatternElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TuplePatternElementListBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternElementListBuilder",7]]},{"p":["PrimaryAssociatedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]]},{"p":["CompositionTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]]},{"p":["DifferentiabilityParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]]},{"p":["SpecializeAttributeSpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]]},{"p":["PrecedenceGroupAttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]]},{"p":["MultipleTrailingClosureElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]]},{"p":["ExprListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ExprListBuilder",7]],"s":[["struct",12],[" ",17],["ExprListBuilder",7]]},{"p":["ObjcNameBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjcNameBuilder",7]],"s":[["struct",12],[" ",17],["ObjcNameBuilder",7]]},{"p":["TokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TokenListBuilder",7]],"s":[["struct",12],[" ",17],["TokenListBuilder",7]]},{"p":["AccessPath"],"f":[["struct",12],[" ",17],["AccessPath",7]],"s":[["struct",12],[" ",17],["AccessPath",7]],"d":"`AccessPath` represents a collection of `AccessPathComponent`"},{"p":["ImportDecl"],"f":[["struct",12],[" ",17],["ImportDecl",7]],"s":[["struct",12],[" ",17],["ImportDecl",7]]},{"p":["ReturnStmt"],"f":[["struct",12],[" ",17],["ReturnStmt",7]],"s":[["struct",12],[" ",17],["ReturnStmt",7]]},{"p":["SourceFile"],"f":[["struct",12],[" ",17],["SourceFile",7]],"s":[["struct",12],[" ",17],["SourceFile",7]]},{"p":["StructDecl"],"f":[["struct",12],[" ",17],["StructDecl",7]],"s":[["struct",12],[" ",17],["StructDecl",7]]},{"p":["SwitchCase"],"f":[["struct",12],[" ",17],["SwitchCase",7]],"s":[["struct",12],[" ",17],["SwitchCase",7]]},{"p":["SwitchStmt"],"f":[["struct",12],[" ",17],["SwitchStmt",7]],"s":[["struct",12],[" ",17],["SwitchStmt",7]]},{"p":["CatchClause"],"f":[["struct",12],[" ",17],["CatchClause",7]],"s":[["struct",12],[" ",17],["CatchClause",7]]},{"p":["ClosureExpr"],"f":[["struct",12],[" ",17],["ClosureExpr",7]],"s":[["struct",12],[" ",17],["ClosureExpr",7]]},{"p":["KeyPathExpr"],"f":[["struct",12],[" ",17],["KeyPathExpr",7]],"s":[["struct",12],[" ",17],["KeyPathExpr",7]]},{"p":["LabeledStmt"],"f":[["struct",12],[" ",17],["LabeledStmt",7]],"s":[["struct",12],[" ",17],["LabeledStmt",7]]},{"p":["TernaryExpr"],"f":[["struct",12],[" ",17],["TernaryExpr",7]],"s":[["struct",12],[" ",17],["TernaryExpr",7]]},{"p":["WhereClause"],"f":[["struct",12],[" ",17],["WhereClause",7]],"s":[["struct",12],[" ",17],["WhereClause",7]]},{"p":["AccessorDecl"],"f":[["struct",12],[" ",17],["AccessorDecl",7]],"s":[["struct",12],[" ",17],["AccessorDecl",7]]},{"p":["AccessorList"],"f":[["struct",12],[" ",17],["AccessorList",7]],"s":[["struct",12],[" ",17],["AccessorList",7]],"d":"`AccessorList` represents a collection of `AccessorDecl`"},{"p":["ArrayElement"],"f":[["struct",12],[" ",17],["ArrayElement",7]],"s":[["struct",12],[" ",17],["ArrayElement",7]]},{"p":["CaseItemList"],"f":[["struct",12],[" ",17],["CaseItemList",7]],"s":[["struct",12],[" ",17],["CaseItemList",7]],"d":"`CaseItemList` represents a collection of `CaseItem`"},{"p":["ClosureParam"],"f":[["struct",12],[" ",17],["ClosureParam",7]],"s":[["struct",12],[" ",17],["ClosureParam",7]]},{"p":["ContinueStmt"],"f":[["struct",12],[" ",17],["ContinueStmt",7]],"s":[["struct",12],[" ",17],["ContinueStmt",7]]},{"p":["DeclModifier"],"f":[["struct",12],[" ",17],["DeclModifier",7]],"s":[["struct",12],[" ",17],["DeclModifier",7]]},{"p":["EnumCaseDecl"],"f":[["struct",12],[" ",17],["EnumCaseDecl",7]],"s":[["struct",12],[" ",17],["EnumCaseDecl",7]],"d":"A `case` declaration of a Swift `enum`. It can have 1 or more`EnumCaseElement`s inside, each declaring a different case of theenum."},{"p":["FunctionDecl"],"f":[["struct",12],[" ",17],["FunctionDecl",7]],"s":[["struct",12],[" ",17],["FunctionDecl",7]]},{"p":["FunctionType"],"f":[["struct",12],[" ",17],["FunctionType",7]],"s":[["struct",12],[" ",17],["FunctionType",7]]},{"p":["GarbageNodes"],"f":[["struct",12],[" ",17],["GarbageNodes",7]],"s":[["struct",12],[" ",17],["GarbageNodes",7]],"d":"A collection of syntax nodes that occurred in the source code butcould not be used to form a valid syntax tree."},{"p":["IfConfigDecl"],"f":[["struct",12],[" ",17],["IfConfigDecl",7]],"s":[["struct",12],[" ",17],["IfConfigDecl",7]]},{"p":["MetatypeType"],"f":[["struct",12],[" ",17],["MetatypeType",7]],"s":[["struct",12],[" ",17],["MetatypeType",7]]},{"p":["ModifierList"],"f":[["struct",12],[" ",17],["ModifierList",7]],"s":[["struct",12],[" ",17],["ModifierList",7]],"d":"`ModifierList` represents a collection of `DeclModifier`"},{"p":["ObjCSelector"],"f":[["struct",12],[" ",17],["ObjCSelector",7]],"s":[["struct",12],[" ",17],["ObjCSelector",7]],"d":"`ObjCSelector` represents a collection of `ObjCSelectorPiece`"},{"p":["OperatorDecl"],"f":[["struct",12],[" ",17],["OperatorDecl",7]],"s":[["struct",12],[" ",17],["OperatorDecl",7]],"d":"A Swift `operator` declaration."},{"p":["OptionalType"],"f":[["struct",12],[" ",17],["OptionalType",7]],"s":[["struct",12],[" ",17],["OptionalType",7]]},{"p":["ProtocolDecl"],"f":[["struct",12],[" ",17],["ProtocolDecl",7]],"s":[["struct",12],[" ",17],["ProtocolDecl",7]]},{"p":["ReturnClause"],"f":[["struct",12],[" ",17],["ReturnClause",7]],"s":[["struct",12],[" ",17],["ReturnClause",7]]},{"p":["SequenceExpr"],"f":[["struct",12],[" ",17],["SequenceExpr",7]],"s":[["struct",12],[" ",17],["SequenceExpr",7]]},{"p":["SuperRefExpr"],"f":[["struct",12],[" ",17],["SuperRefExpr",7]],"s":[["struct",12],[" ",17],["SuperRefExpr",7]]},{"p":["TuplePattern"],"f":[["struct",12],[" ",17],["TuplePattern",7]],"s":[["struct",12],[" ",17],["TuplePattern",7]]},{"p":["VariableDecl"],"f":[["struct",12],[" ",17],["VariableDecl",7]],"s":[["struct",12],[" ",17],["VariableDecl",7]]},{"p":["VersionTuple"],"f":[["struct",12],[" ",17],["VersionTuple",7]],"s":[["struct",12],[" ",17],["VersionTuple",7]],"d":"A version number of the form major.minor.patch in which the minorand patch part may be omitted."},{"p":["AccessorBlock"],"f":[["struct",12],[" ",17],["AccessorBlock",7]],"s":[["struct",12],[" ",17],["AccessorBlock",7]]},{"p":["AsTypePattern"],"f":[["struct",12],[" ",17],["AsTypePattern",7]],"s":[["struct",12],[" ",17],["AsTypePattern",7]]},{"p":["AttributeList"],"f":[["struct",12],[" ",17],["AttributeList",7]],"s":[["struct",12],[" ",17],["AttributeList",7]],"d":"`AttributeList` represents a collection of `SyntaxBuildable`"},{"p":["CatchItemList"],"f":[["struct",12],[" ",17],["CatchItemList",7]],"s":[["struct",12],[" ",17],["CatchItemList",7]],"d":"`CatchItemList` represents a collection of `CatchItem`"},{"p":["CodeBlockItem"],"f":[["struct",12],[" ",17],["CodeBlockItem",7]],"s":[["struct",12],[" ",17],["CodeBlockItem",7]],"d":"A CodeBlockItem is any Syntax node that appears on its own line insidea CodeBlock."},{"p":["ExtensionDecl"],"f":[["struct",12],[" ",17],["ExtensionDecl",7]],"s":[["struct",12],[" ",17],["ExtensionDecl",7]]},{"p":["InheritedType"],"f":[["struct",12],[" ",17],["InheritedType",7]],"s":[["struct",12],[" ",17],["InheritedType",7]]},{"p":["IsTypePattern"],"f":[["struct",12],[" ",17],["IsTypePattern",7]],"s":[["struct",12],[" ",17],["IsTypePattern",7]]},{"p":["ObjcNamePiece"],"f":[["struct",12],[" ",17],["ObjcNamePiece",7]],"s":[["struct",12],[" ",17],["ObjcNamePiece",7]]},{"p":["PoundFileExpr"],"f":[["struct",12],[" ",17],["PoundFileExpr",7]],"s":[["struct",12],[" ",17],["PoundFileExpr",7]]},{"p":["PoundLineExpr"],"f":[["struct",12],[" ",17],["PoundLineExpr",7]],"s":[["struct",12],[" ",17],["PoundLineExpr",7]]},{"p":["StringSegment"],"f":[["struct",12],[" ",17],["StringSegment",7]],"s":[["struct",12],[" ",17],["StringSegment",7]]},{"p":["SubscriptDecl"],"f":[["struct",12],[" ",17],["SubscriptDecl",7]],"s":[["struct",12],[" ",17],["SubscriptDecl",7]]},{"p":["SubscriptExpr"],"f":[["struct",12],[" ",17],["SubscriptExpr",7]],"s":[["struct",12],[" ",17],["SubscriptExpr",7]]},{"p":["TypealiasDecl"],"f":[["struct",12],[" ",17],["TypealiasDecl",7]],"s":[["struct",12],[" ",17],["TypealiasDecl",7]]},{"p":["AssignmentExpr"],"f":[["struct",12],[" ",17],["AssignmentExpr",7]],"s":[["struct",12],[" ",17],["AssignmentExpr",7]]},{"p":["AttributedType"],"f":[["struct",12],[" ",17],["AttributedType",7]],"s":[["struct",12],[" ",17],["AttributedType",7]]},{"p":["DictionaryExpr"],"f":[["struct",12],[" ",17],["DictionaryExpr",7]],"s":[["struct",12],[" ",17],["DictionaryExpr",7]]},{"p":["DictionaryType"],"f":[["struct",12],[" ",17],["DictionaryType",7]],"s":[["struct",12],[" ",17],["DictionaryType",7]]},{"p":["ExpressionStmt"],"f":[["struct",12],[" ",17],["ExpressionStmt",7]],"s":[["struct",12],[" ",17],["ExpressionStmt",7]]},{"p":["IdentifierExpr"],"f":[["struct",12],[" ",17],["IdentifierExpr",7]],"s":[["struct",12],[" ",17],["IdentifierExpr",7]]},{"p":["IdentifierList"],"f":[["struct",12],[" ",17],["IdentifierList",7]],"s":[["struct",12],[" ",17],["IdentifierList",7]],"d":"`IdentifierList` represents a collection of `TokenSyntax`"},{"p":["IfConfigClause"],"f":[["struct",12],[" ",17],["IfConfigClause",7]],"s":[["struct",12],[" ",17],["IfConfigClause",7]]},{"p":["MemberDeclList"],"f":[["struct",12],[" ",17],["MemberDeclList",7]],"s":[["struct",12],[" ",17],["MemberDeclList",7]],"d":"`MemberDeclList` represents a collection of `MemberDeclListItem`"},{"p":["NilLiteralExpr"],"f":[["struct",12],[" ",17],["NilLiteralExpr",7]],"s":[["struct",12],[" ",17],["NilLiteralExpr",7]]},{"p":["PatternBinding"],"f":[["struct",12],[" ",17],["PatternBinding",7]],"s":[["struct",12],[" ",17],["PatternBinding",7]]},{"p":["PoundErrorDecl"],"f":[["struct",12],[" ",17],["PoundErrorDecl",7]],"s":[["struct",12],[" ",17],["PoundErrorDecl",7]]},{"p":["SpecializeExpr"],"f":[["struct",12],[" ",17],["SpecializeExpr",7]],"s":[["struct",12],[" ",17],["SpecializeExpr",7]]},{"p":["SwitchCaseList"],"f":[["struct",12],[" ",17],["SwitchCaseList",7]],"s":[["struct",12],[" ",17],["SwitchCaseList",7]],"d":"`SwitchCaseList` represents a collection of `SyntaxBuildable`"},{"p":["TypeAnnotation"],"f":[["struct",12],[" ",17],["TypeAnnotation",7]],"s":[["struct",12],[" ",17],["TypeAnnotation",7]]},{"p":["CatchClauseList"],"f":[["struct",12],[" ",17],["CatchClauseList",7]],"s":[["struct",12],[" ",17],["CatchClauseList",7]],"d":"`CatchClauseList` represents a collection of `CatchClause`"},{"p":["CompositionType"],"f":[["struct",12],[" ",17],["CompositionType",7]],"s":[["struct",12],[" ",17],["CompositionType",7]]},{"p":["CustomAttribute"],"f":[["struct",12],[" ",17],["CustomAttribute",7]],"s":[["struct",12],[" ",17],["CustomAttribute",7]],"d":"A custom `@` attribute."},{"p":["DeclarationStmt"],"f":[["struct",12],[" ",17],["DeclarationStmt",7]],"s":[["struct",12],[" ",17],["DeclarationStmt",7]]},{"p":["EnumCaseElement"],"f":[["struct",12],[" ",17],["EnumCaseElement",7]],"s":[["struct",12],[" ",17],["EnumCaseElement",7]],"d":"An element of an enum case, containing the name of the case and,optionally, either associated values or an assignment to a raw value."},{"p":["EnumCasePattern"],"f":[["struct",12],[" ",17],["EnumCasePattern",7]],"s":[["struct",12],[" ",17],["EnumCasePattern",7]]},{"p":["FallthroughStmt"],"f":[["struct",12],[" ",17],["FallthroughStmt",7]],"s":[["struct",12],[" ",17],["FallthroughStmt",7]]},{"p":["ForcedValueExpr"],"f":[["struct",12],[" ",17],["ForcedValueExpr",7]],"s":[["struct",12],[" ",17],["ForcedValueExpr",7]]},{"p":["GenericArgument"],"f":[["struct",12],[" ",17],["GenericArgument",7]],"s":[["struct",12],[" ",17],["GenericArgument",7]]},{"p":["InitializerDecl"],"f":[["struct",12],[" ",17],["InitializerDecl",7]],"s":[["struct",12],[" ",17],["InitializerDecl",7]]},{"p":["KeyPathBaseExpr"],"f":[["struct",12],[" ",17],["KeyPathBaseExpr",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExpr",7]]},{"p":["MemberDeclBlock"],"f":[["struct",12],[" ",17],["MemberDeclBlock",7]],"s":[["struct",12],[" ",17],["MemberDeclBlock",7]]},{"p":["ObjcKeyPathExpr"],"f":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]]},{"p":["OptionalPattern"],"f":[["struct",12],[" ",17],["OptionalPattern",7]],"s":[["struct",12],[" ",17],["OptionalPattern",7]]},{"p":["ParameterClause"],"f":[["struct",12],[" ",17],["ParameterClause",7]],"s":[["struct",12],[" ",17],["ParameterClause",7]]},{"p":["PoundAssertStmt"],"f":[["struct",12],[" ",17],["PoundAssertStmt",7]],"s":[["struct",12],[" ",17],["PoundAssertStmt",7]]},{"p":["PoundColumnExpr"],"f":[["struct",12],[" ",17],["PoundColumnExpr",7]],"s":[["struct",12],[" ",17],["PoundColumnExpr",7]]},{"p":["PoundFileIDExpr"],"f":[["struct",12],[" ",17],["PoundFileIDExpr",7]],"s":[["struct",12],[" ",17],["PoundFileIDExpr",7]]},{"p":["RepeatWhileStmt"],"f":[["struct",12],[" ",17],["RepeatWhileStmt",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmt",7]]},{"p":["SwitchCaseLabel"],"f":[["struct",12],[" ",17],["SwitchCaseLabel",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabel",7]]},{"p":["WildcardPattern"],"f":[["struct",12],[" ",17],["WildcardPattern",7]],"s":[["struct",12],[" ",17],["WildcardPattern",7]]},{"p":["ArrayElementList"],"f":[["struct",12],[" ",17],["ArrayElementList",7]],"s":[["struct",12],[" ",17],["ArrayElementList",7]],"d":"`ArrayElementList` represents a collection of `ArrayElement`"},{"p":["ClosureParamList"],"f":[["struct",12],[" ",17],["ClosureParamList",7]],"s":[["struct",12],[" ",17],["ClosureParamList",7]],"d":"`ClosureParamList` represents a collection of `ClosureParam`"},{"p":["ClosureSignature"],"f":[["struct",12],[" ",17],["ClosureSignature",7]],"s":[["struct",12],[" ",17],["ClosureSignature",7]]},{"p":["ConditionElement"],"f":[["struct",12],[" ",17],["ConditionElement",7]],"s":[["struct",12],[" ",17],["ConditionElement",7]]},{"p":["DeclNameArgument"],"f":[["struct",12],[" ",17],["DeclNameArgument",7]],"s":[["struct",12],[" ",17],["DeclNameArgument",7]]},{"p":["FloatLiteralExpr"],"f":[["struct",12],[" ",17],["FloatLiteralExpr",7]],"s":[["struct",12],[" ",17],["FloatLiteralExpr",7]]},{"p":["FunctionCallExpr"],"f":[["struct",12],[" ",17],["FunctionCallExpr",7]],"s":[["struct",12],[" ",17],["FunctionCallExpr",7]]},{"p":["FunctionDeclName"],"f":[["struct",12],[" ",17],["FunctionDeclName",7]],"s":[["struct",12],[" ",17],["FunctionDeclName",7]],"d":"A function declaration name (e.g. `foo(_:_:)`)."},{"p":["GenericParameter"],"f":[["struct",12],[" ",17],["GenericParameter",7]],"s":[["struct",12],[" ",17],["GenericParameter",7]]},{"p":["MemberAccessExpr"],"f":[["struct",12],[" ",17],["MemberAccessExpr",7]],"s":[["struct",12],[" ",17],["MemberAccessExpr",7]]},{"p":["ObjcSelectorExpr"],"f":[["struct",12],[" ",17],["ObjcSelectorExpr",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExpr",7]]},{"p":["PostfixUnaryExpr"],"f":[["struct",12],[" ",17],["PostfixUnaryExpr",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExpr",7]]},{"p":["PoundWarningDecl"],"f":[["struct",12],[" ",17],["PoundWarningDecl",7]],"s":[["struct",12],[" ",17],["PoundWarningDecl",7]]},{"p":["RegexLiteralExpr"],"f":[["struct",12],[" ",17],["RegexLiteralExpr",7]],"s":[["struct",12],[" ",17],["RegexLiteralExpr",7]]},{"p":["TupleExprElement"],"f":[["struct",12],[" ",17],["TupleExprElement",7]],"s":[["struct",12],[" ",17],["TupleExprElement",7]]},{"p":["TupleTypeElement"],"f":[["struct",12],[" ",17],["TupleTypeElement",7]],"s":[["struct",12],[" ",17],["TupleTypeElement",7]]},{"p":["AccessorParameter"],"f":[["struct",12],[" ",17],["AccessorParameter",7]],"s":[["struct",12],[" ",17],["AccessorParameter",7]]},{"p":["AvailabilityEntry"],"f":[["struct",12],[" ",17],["AvailabilityEntry",7]],"s":[["struct",12],[" ",17],["AvailabilityEntry",7]],"d":"The availability argument for the _specialize attribute"},{"p":["CodeBlockItemList"],"f":[["struct",12],[" ",17],["CodeBlockItemList",7]],"s":[["struct",12],[" ",17],["CodeBlockItemList",7]],"d":"`CodeBlockItemList` represents a collection of `CodeBlockItem`"},{"p":["DeclNameArguments"],"f":[["struct",12],[" ",17],["DeclNameArguments",7]],"s":[["struct",12],[" ",17],["DeclNameArguments",7]]},{"p":["DeinitializerDecl"],"f":[["struct",12],[" ",17],["DeinitializerDecl",7]],"s":[["struct",12],[" ",17],["DeinitializerDecl",7]]},{"p":["DictionaryElement"],"f":[["struct",12],[" ",17],["DictionaryElement",7]],"s":[["struct",12],[" ",17],["DictionaryElement",7]]},{"p":["ExpressionPattern"],"f":[["struct",12],[" ",17],["ExpressionPattern",7]],"s":[["struct",12],[" ",17],["ExpressionPattern",7]]},{"p":["ExpressionSegment"],"f":[["struct",12],[" ",17],["ExpressionSegment",7]],"s":[["struct",12],[" ",17],["ExpressionSegment",7]]},{"p":["FunctionParameter"],"f":[["struct",12],[" ",17],["FunctionParameter",7]],"s":[["struct",12],[" ",17],["FunctionParameter",7]]},{"p":["FunctionSignature"],"f":[["struct",12],[" ",17],["FunctionSignature",7]],"s":[["struct",12],[" ",17],["FunctionSignature",7]]},{"p":["IdentifierPattern"],"f":[["struct",12],[" ",17],["IdentifierPattern",7]],"s":[["struct",12],[" ",17],["IdentifierPattern",7]]},{"p":["InfixOperatorExpr"],"f":[["struct",12],[" ",17],["InfixOperatorExpr",7]],"s":[["struct",12],[" ",17],["InfixOperatorExpr",7]]},{"p":["InheritedTypeList"],"f":[["struct",12],[" ",17],["InheritedTypeList",7]],"s":[["struct",12],[" ",17],["InheritedTypeList",7]],"d":"`InheritedTypeList` represents a collection of `InheritedType`"},{"p":["InitializerClause"],"f":[["struct",12],[" ",17],["InitializerClause",7]],"s":[["struct",12],[" ",17],["InitializerClause",7]]},{"p":["LayoutRequirement"],"f":[["struct",12],[" ",17],["LayoutRequirement",7]],"s":[["struct",12],[" ",17],["LayoutRequirement",7]]},{"p":["NonEmptyTokenList"],"f":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"d":"`NonEmptyTokenList` represents a collection of `TokenSyntax`"},{"p":["ObjCSelectorPiece"],"f":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"d":"A piece of an Objective-C selector. Either consisting of just anidentifier for a nullary selector, an identifier and a colon for alabeled argument or just a colon for an unlabeled argument"},{"p":["ObjectLiteralExpr"],"f":[["struct",12],[" ",17],["ObjectLiteralExpr",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExpr",7]]},{"p":["PoundFilePathExpr"],"f":[["struct",12],[" ",17],["PoundFilePathExpr",7]],"s":[["struct",12],[" ",17],["PoundFilePathExpr",7]]},{"p":["PoundFunctionExpr"],"f":[["struct",12],[" ",17],["PoundFunctionExpr",7]],"s":[["struct",12],[" ",17],["PoundFunctionExpr",7]]},{"p":["QualifiedDeclName"],"f":[["struct",12],[" ",17],["QualifiedDeclName",7]],"s":[["struct",12],[" ",17],["QualifiedDeclName",7]],"d":"An optionally qualified function declaration name (e.g. `+(_:_:)`,`A.B.C.foo(_:_:)`)."},{"p":["StringLiteralExpr"],"f":[["struct",12],[" ",17],["StringLiteralExpr",7]],"s":[["struct",12],[" ",17],["StringLiteralExpr",7]]},{"p":["AssociatedtypeDecl"],"f":[["struct",12],[" ",17],["AssociatedtypeDecl",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDecl",7]]},{"p":["BinaryOperatorExpr"],"f":[["struct",12],[" ",17],["BinaryOperatorExpr",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExpr",7]]},{"p":["BooleanLiteralExpr"],"f":[["struct",12],[" ",17],["BooleanLiteralExpr",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExpr",7]]},{"p":["ClosureCaptureItem"],"f":[["struct",12],[" ",17],["ClosureCaptureItem",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItem",7]]},{"p":["DeclModifierDetail"],"f":[["struct",12],[" ",17],["DeclModifierDetail",7]],"s":[["struct",12],[" ",17],["DeclModifierDetail",7]]},{"p":["ElseIfContinuation"],"f":[["struct",12],[" ",17],["ElseIfContinuation",7]],"s":[["struct",12],[" ",17],["ElseIfContinuation",7]]},{"p":["GenericRequirement"],"f":[["struct",12],[" ",17],["GenericRequirement",7]],"s":[["struct",12],[" ",17],["GenericRequirement",7]]},{"p":["GenericWhereClause"],"f":[["struct",12],[" ",17],["GenericWhereClause",7]],"s":[["struct",12],[" ",17],["GenericWhereClause",7]]},{"p":["IfConfigClauseList"],"f":[["struct",12],[" ",17],["IfConfigClauseList",7]],"s":[["struct",12],[" ",17],["IfConfigClauseList",7]],"d":"`IfConfigClauseList` represents a collection of `IfConfigClause`"},{"p":["IntegerLiteralExpr"],"f":[["struct",12],[" ",17],["IntegerLiteralExpr",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExpr",7]]},{"p":["MemberDeclListItem"],"f":[["struct",12],[" ",17],["MemberDeclListItem",7]],"s":[["struct",12],[" ",17],["MemberDeclListItem",7]],"d":"A member declaration of a type consisting of a declaration and anoptional semicolon;"},{"p":["PatternBindingList"],"f":[["struct",12],[" ",17],["PatternBindingList",7]],"s":[["struct",12],[" ",17],["PatternBindingList",7]],"d":"`PatternBindingList` represents a collection of `PatternBinding`"},{"p":["PoundDsohandleExpr"],"f":[["struct",12],[" ",17],["PoundDsohandleExpr",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExpr",7]]},{"p":["PrefixOperatorExpr"],"f":[["struct",12],[" ",17],["PrefixOperatorExpr",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExpr",7]]},{"p":["SwitchDefaultLabel"],"f":[["struct",12],[" ",17],["SwitchDefaultLabel",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabel",7]]},{"p":["AccessLevelModifier"],"f":[["struct",12],[" ",17],["AccessLevelModifier",7]],"s":[["struct",12],[" ",17],["AccessLevelModifier",7]]},{"p":["AccessPathComponent"],"f":[["struct",12],[" ",17],["AccessPathComponent",7]],"s":[["struct",12],[" ",17],["AccessPathComponent",7]]},{"p":["EnumCaseElementList"],"f":[["struct",12],[" ",17],["EnumCaseElementList",7]],"s":[["struct",12],[" ",17],["EnumCaseElementList",7]],"d":"A collection of 0 or more `EnumCaseElement`s."},{"p":["GenericArgumentList"],"f":[["struct",12],[" ",17],["GenericArgumentList",7]],"s":[["struct",12],[" ",17],["GenericArgumentList",7]],"d":"`GenericArgumentList` represents a collection of `GenericArgument`"},{"p":["PostfixIfConfigExpr"],"f":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]]},{"p":["PoundSourceLocation"],"f":[["struct",12],[" ",17],["PoundSourceLocation",7]],"s":[["struct",12],[" ",17],["PoundSourceLocation",7]]},{"p":["PrecedenceGroupDecl"],"f":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"d":"A Swift `precedencegroup` declaration."},{"p":["SameTypeRequirement"],"f":[["struct",12],[" ",17],["SameTypeRequirement",7]],"s":[["struct",12],[" ",17],["SameTypeRequirement",7]]},{"p":["TargetFunctionEntry"],"f":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"d":"A labeled argument for the `@_specialize` attribute with a functiondecl value like`target: myFunc(_:)`"},{"p":["TuplePatternElement"],"f":[["struct",12],[" ",17],["TuplePatternElement",7]],"s":[["struct",12],[" ",17],["TuplePatternElement",7]]},{"p":["ValueBindingPattern"],"f":[["struct",12],[" ",17],["ValueBindingPattern",7]],"s":[["struct",12],[" ",17],["ValueBindingPattern",7]]},{"p":["AvailabilityArgument"],"f":[["struct",12],[" ",17],["AvailabilityArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityArgument",7]],"d":"A single argument to an `@available` argument like `*`, `iOS 10.1`,or `message: \"This has been deprecated\"`."},{"p":["AvailabilitySpecList"],"f":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"d":"`AvailabilitySpecList` represents a collection of `AvailabilityArgument`"},{"p":["ClassRestrictionType"],"f":[["struct",12],[" ",17],["ClassRestrictionType",7]],"s":[["struct",12],[" ",17],["ClassRestrictionType",7]]},{"p":["ConditionElementList"],"f":[["struct",12],[" ",17],["ConditionElementList",7]],"s":[["struct",12],[" ",17],["ConditionElementList",7]],"d":"`ConditionElementList` represents a collection of `ConditionElement`"},{"p":["ConstrainedSugarType"],"f":[["struct",12],[" ",17],["ConstrainedSugarType",7]],"s":[["struct",12],[" ",17],["ConstrainedSugarType",7]]},{"p":["DeclNameArgumentList"],"f":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"d":"`DeclNameArgumentList` represents a collection of `DeclNameArgument`"},{"p":["GenericParameterList"],"f":[["struct",12],[" ",17],["GenericParameterList",7]],"s":[["struct",12],[" ",17],["GenericParameterList",7]],"d":"`GenericParameterList` represents a collection of `GenericParameter`"},{"p":["MemberTypeIdentifier"],"f":[["struct",12],[" ",17],["MemberTypeIdentifier",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifier",7]]},{"p":["OptionalChainingExpr"],"f":[["struct",12],[" ",17],["OptionalChainingExpr",7]],"s":[["struct",12],[" ",17],["OptionalChainingExpr",7]]},{"p":["SimpleTypeIdentifier"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]]},{"p":["TupleExprElementList"],"f":[["struct",12],[" ",17],["TupleExprElementList",7]],"s":[["struct",12],[" ",17],["TupleExprElementList",7]],"d":"`TupleExprElementList` represents a collection of `TupleExprElement`"},{"p":["TupleTypeElementList"],"f":[["struct",12],[" ",17],["TupleTypeElementList",7]],"s":[["struct",12],[" ",17],["TupleTypeElementList",7]],"d":"`TupleTypeElementList` represents a collection of `TupleTypeElement`"},{"p":["AvailabilityCondition"],"f":[["struct",12],[" ",17],["AvailabilityCondition",7]],"s":[["struct",12],[" ",17],["AvailabilityCondition",7]]},{"p":["BackDeployVersionList"],"f":[["struct",12],[" ",17],["BackDeployVersionList",7]],"s":[["struct",12],[" ",17],["BackDeployVersionList",7]],"d":"`BackDeployVersionList` represents a collection of `BackDeployVersionArgument`"},{"p":["DictionaryElementList"],"f":[["struct",12],[" ",17],["DictionaryElementList",7]],"s":[["struct",12],[" ",17],["DictionaryElementList",7]],"d":"`DictionaryElementList` represents a collection of `DictionaryElement`"},{"p":["DiscardAssignmentExpr"],"f":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]]},{"p":["EditorPlaceholderExpr"],"f":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]]},{"p":["FunctionParameterList"],"f":[["struct",12],[" ",17],["FunctionParameterList",7]],"s":[["struct",12],[" ",17],["FunctionParameterList",7]],"d":"`FunctionParameterList` represents a collection of `FunctionParameter`"},{"p":["GenericArgumentClause"],"f":[["struct",12],[" ",17],["GenericArgumentClause",7]],"s":[["struct",12],[" ",17],["GenericArgumentClause",7]]},{"p":["PrimaryAssociatedType"],"f":[["struct",12],[" ",17],["PrimaryAssociatedType",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedType",7]]},{"p":["StringLiteralSegments"],"f":[["struct",12],[" ",17],["StringLiteralSegments",7]],"s":[["struct",12],[" ",17],["StringLiteralSegments",7]],"d":"`StringLiteralSegments` represents a collection of `SyntaxBuildable`"},{"p":["SymbolicReferenceExpr"],"f":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]]},{"p":["TypeInheritanceClause"],"f":[["struct",12],[" ",17],["TypeInheritanceClause",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClause",7]]},{"p":["TypeInitializerClause"],"f":[["struct",12],[" ",17],["TypeInitializerClause",7]],"s":[["struct",12],[" ",17],["TypeInitializerClause",7]]},{"p":["UnresolvedPatternExpr"],"f":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]]},{"p":["ClosureCaptureItemList"],"f":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"d":"`ClosureCaptureItemList` represents a collection of `ClosureCaptureItem`"},{"p":["CompositionTypeElement"],"f":[["struct",12],[" ",17],["CompositionTypeElement",7]],"s":[["struct",12],[" ",17],["CompositionTypeElement",7]]},{"p":["ConformanceRequirement"],"f":[["struct",12],[" ",17],["ConformanceRequirement",7]],"s":[["struct",12],[" ",17],["ConformanceRequirement",7]]},{"p":["DifferentiabilityParam"],"f":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"d":"A differentiability parameter: either the \"self\" identifier, a functionparameter name, or a function parameter index."},{"p":["GenericParameterClause"],"f":[["struct",12],[" ",17],["GenericParameterClause",7]],"s":[["struct",12],[" ",17],["GenericParameterClause",7]]},{"p":["GenericRequirementList"],"f":[["struct",12],[" ",17],["GenericRequirementList",7]],"s":[["struct",12],[" ",17],["GenericRequirementList",7]],"d":"`GenericRequirementList` represents a collection of `GenericRequirement`"},{"p":["LabeledSpecializeEntry"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"d":"A labeled argument for the `@_specialize` attribute like`exported: true`"},{"p":["ClosureCaptureSignature"],"f":[["struct",12],[" ",17],["ClosureCaptureSignature",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignature",7]]},{"p":["DifferentiabilityParams"],"f":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"d":"The differentiability parameters."},{"p":["PoundSourceLocationArgs"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]]},{"p":["PrecedenceGroupNameList"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"d":"`PrecedenceGroupNameList` represents a collection of `PrecedenceGroupNameElement`"},{"p":["PrecedenceGroupRelation"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"d":"Specify the new precedence group's relation to existing precedencegroups."},{"p":["TuplePatternElementList"],"f":[["struct",12],[" ",17],["TuplePatternElementList",7]],"s":[["struct",12],[" ",17],["TuplePatternElementList",7]],"d":"`TuplePatternElementList` represents a collection of `TuplePatternElement`"},{"p":["UnavailabilityCondition"],"f":[["struct",12],[" ",17],["UnavailabilityCondition",7]],"s":[["struct",12],[" ",17],["UnavailabilityCondition",7]]},{"p":["MatchingPatternCondition"],"f":[["struct",12],[" ",17],["MatchingPatternCondition",7]],"s":[["struct",12],[" ",17],["MatchingPatternCondition",7]]},{"p":["OptionalBindingCondition"],"f":[["struct",12],[" ",17],["OptionalBindingCondition",7]],"s":[["struct",12],[" ",17],["OptionalBindingCondition",7]]},{"p":["BackDeployVersionArgument"],"f":[["struct",12],[" ",17],["BackDeployVersionArgument",7]],"s":[["struct",12],[" ",17],["BackDeployVersionArgument",7]],"d":"A single platform/version pair in a `@_backDeploy` attribute,e.g. `iOS 10.1`."},{"p":["PrecedenceGroupAssignment"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"d":"Specifies the precedence of an operator when used in an operationthat includes optional chaining."},{"p":["PrimaryAssociatedTypeList"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"d":"`PrimaryAssociatedTypeList` represents a collection of `PrimaryAssociatedType`"},{"p":["CompositionTypeElementList"],"f":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"d":"`CompositionTypeElementList` represents a collection of `CompositionTypeElement`"},{"p":["DifferentiabilityParamList"],"f":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"d":"`DifferentiabilityParamList` represents a collection of `DifferentiabilityParam`"},{"p":["OperatorPrecedenceAndTypes"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"d":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration."},{"p":["PrecedenceGroupNameElement"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]]},{"p":["AvailabilityLabeledArgument"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"d":"A argument to an `@available` attribute that consists of a label anda value, e.g. `message: \"This has been deprecated\"`."},{"p":["BackDeployAttributeSpecList"],"f":[["struct",12],[" ",17],["BackDeployAttributeSpecList",7]],"s":[["struct",12],[" ",17],["BackDeployAttributeSpecList",7]],"d":"A collection of arguments for the `@_backDeploy` attribute"},{"p":["PrimaryAssociatedTypeClause"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeClause",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeClause",7]]},{"p":["SpecializeAttributeSpecList"],"f":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"d":"A collection of arguments for the `@_specialize` attribute"},{"p":["ImplementsAttributeArguments"],"f":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"d":"The arguments for the `@_implements` attribute of the form`Type, methodName(arg1Label:arg2Label:)`"},{"p":["NamedAttributeStringArgument"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"d":"The argument for the `@_dynamic_replacement` or `@_private`attribute of the form `for: \"function()\"` or `sourceFile:\"Src.swift\"`"},{"p":["PrecedenceGroupAssociativity"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"d":"Specifies how a sequence of operators with the same precedence levelare grouped together in the absence of grouping parentheses."},{"p":["PrecedenceGroupAttributeList"],"f":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"d":"`PrecedenceGroupAttributeList` represents a collection of `SyntaxBuildable`"},{"p":["DifferentiabilityParamsClause"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"d":"A clause containing differentiability parameters."},{"p":["AvailabilityVersionRestriction"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"d":"An argument to `@available` that restricts the availability on acertain platform to a version, e.g. `iOS 10` or `swift 3.4`."},{"p":["MultipleTrailingClosureElement"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]]},{"p":["ImplicitlyUnwrappedOptionalType"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]]},{"p":["DifferentiableAttributeArguments"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"d":"The arguments for the `@differentiable` attribute: an optionaldifferentiability kind, an optional differentiability parameter clause,and an optional 'where' clause."},{"p":["MultipleTrailingClosureElementList"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"d":"`MultipleTrailingClosureElementList` represents a collection of `MultipleTrailingClosureElement`"},{"p":["DerivativeRegistrationAttributeArguments"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"d":"The arguments for the '@derivative(of:)' and '@transpose(of:)'attributes: the 'of:' label, the original declaration name, and anoptional differentiability parameter list."},{"p":["AsExpr"],"f":[["struct",12],[" ",17],["AsExpr",7]],"s":[["struct",12],[" ",17],["AsExpr",7]]},{"p":["DoStmt"],"f":[["struct",12],[" ",17],["DoStmt",7]],"s":[["struct",12],[" ",17],["DoStmt",7]]},{"p":["Format"],"f":[["struct",12],[" ",17],["Format",7]],"s":[["struct",12],[" ",17],["Format",7]]},{"p":["IfStmt"],"f":[["struct",12],[" ",17],["IfStmt",7]],"s":[["struct",12],[" ",17],["IfStmt",7]]},{"p":["IsExpr"],"f":[["struct",12],[" ",17],["IsExpr",7]],"s":[["struct",12],[" ",17],["IsExpr",7]]},{"p":["TryExpr"],"f":[["struct",12],[" ",17],["TryExpr",7]],"s":[["struct",12],[" ",17],["TryExpr",7]]},{"p":["CaseItem"],"f":[["struct",12],[" ",17],["CaseItem",7]],"s":[["struct",12],[" ",17],["CaseItem",7]]},{"p":["DeclName"],"f":[["struct",12],[" ",17],["DeclName",7]],"s":[["struct",12],[" ",17],["DeclName",7]]},{"p":["EnumDecl"],"f":[["struct",12],[" ",17],["EnumDecl",7]],"s":[["struct",12],[" ",17],["EnumDecl",7]],"d":"A Swift `enum` declaration."},{"p":["ExprList"],"f":[["struct",12],[" ",17],["ExprList",7]],"s":[["struct",12],[" ",17],["ExprList",7]],"d":"A list of expressions connected by operators. This list is containedby a `SequenceExprSyntax`."},{"p":["MoveExpr"],"f":[["struct",12],[" ",17],["MoveExpr",7]],"s":[["struct",12],[" ",17],["MoveExpr",7]]},{"p":["ObjcName"],"f":[["struct",12],[" ",17],["ObjcName",7]],"s":[["struct",12],[" ",17],["ObjcName",7]],"d":"`ObjcName` represents a collection of `ObjcNamePiece`"},{"p":["TypeExpr"],"f":[["struct",12],[" ",17],["TypeExpr",7]],"s":[["struct",12],[" ",17],["TypeExpr",7]]},{"p":["ActorDecl"],"f":[["struct",12],[" ",17],["ActorDecl",7]],"s":[["struct",12],[" ",17],["ActorDecl",7]]},{"p":["ArrayExpr"],"f":[["struct",12],[" ",17],["ArrayExpr",7]],"s":[["struct",12],[" ",17],["ArrayExpr",7]]},{"p":["ArrayType"],"f":[["struct",12],[" ",17],["ArrayType",7]],"s":[["struct",12],[" ",17],["ArrayType",7]]},{"p":["ArrowExpr"],"f":[["struct",12],[" ",17],["ArrowExpr",7]],"s":[["struct",12],[" ",17],["ArrowExpr",7]]},{"p":["Attribute"],"f":[["struct",12],[" ",17],["Attribute",7]],"s":[["struct",12],[" ",17],["Attribute",7]],"d":"An `@` attribute."},{"p":["AwaitExpr"],"f":[["struct",12],[" ",17],["AwaitExpr",7]],"s":[["struct",12],[" ",17],["AwaitExpr",7]]},{"p":["BreakStmt"],"f":[["struct",12],[" ",17],["BreakStmt",7]],"s":[["struct",12],[" ",17],["BreakStmt",7]]},{"p":["CatchItem"],"f":[["struct",12],[" ",17],["CatchItem",7]],"s":[["struct",12],[" ",17],["CatchItem",7]]},{"p":["ClassDecl"],"f":[["struct",12],[" ",17],["ClassDecl",7]],"s":[["struct",12],[" ",17],["ClassDecl",7]]},{"p":["CodeBlock"],"f":[["struct",12],[" ",17],["CodeBlock",7]],"s":[["struct",12],[" ",17],["CodeBlock",7]]},{"p":["DeferStmt"],"f":[["struct",12],[" ",17],["DeferStmt",7]],"s":[["struct",12],[" ",17],["DeferStmt",7]]},{"p":["ElseBlock"],"f":[["struct",12],[" ",17],["ElseBlock",7]],"s":[["struct",12],[" ",17],["ElseBlock",7]]},{"p":["ForInStmt"],"f":[["struct",12],[" ",17],["ForInStmt",7]],"s":[["struct",12],[" ",17],["ForInStmt",7]]},{"p":["GuardStmt"],"f":[["struct",12],[" ",17],["GuardStmt",7]],"s":[["struct",12],[" ",17],["GuardStmt",7]]},{"p":["InOutExpr"],"f":[["struct",12],[" ",17],["InOutExpr",7]],"s":[["struct",12],[" ",17],["InOutExpr",7]]},{"p":["ThrowStmt"],"f":[["struct",12],[" ",17],["ThrowStmt",7]],"s":[["struct",12],[" ",17],["ThrowStmt",7]]},{"p":["TokenList"],"f":[["struct",12],[" ",17],["TokenList",7]],"s":[["struct",12],[" ",17],["TokenList",7]],"d":"`TokenList` represents a collection of `TokenSyntax`"},{"p":["TupleExpr"],"f":[["struct",12],[" ",17],["TupleExpr",7]],"s":[["struct",12],[" ",17],["TupleExpr",7]]},{"p":["TupleType"],"f":[["struct",12],[" ",17],["TupleType",7]],"s":[["struct",12],[" ",17],["TupleType",7]]},{"p":["WhileStmt"],"f":[["struct",12],[" ",17],["WhileStmt",7]],"s":[["struct",12],[" ",17],["WhileStmt",7]]},{"p":["YieldList"],"f":[["struct",12],[" ",17],["YieldList",7]],"s":[["struct",12],[" ",17],["YieldList",7]]},{"p":["YieldStmt"],"f":[["struct",12],[" ",17],["YieldStmt",7]],"s":[["struct",12],[" ",17],["YieldStmt",7]]},{"p":["AccessPath","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AccessPath",18,476],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AccessPath",18],[")",17]]},{"p":["AccessPath","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessPathComponent",18,359],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessPathComponent",18],["...)",17]],"o":3353},{"p":["AccessPath","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsAccessPath",18,213],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsAccessPath",18],["])",17]],"d":"Creates a new `AccessPath` by flattening the elements in `lists`"},{"p":["AccessPath","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessPathComponent",18,359],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessPathComponent",18],["])",17]],"d":"Creates a `AccessPath` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessPathComponent`"},{"p":["ImportDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndImportTok:importTok:garbageBetweenImportTokAndImportKind:importKind:garbageBetweenImportKindAndPath:path:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndImportTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["importTok",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`import`, ",17],["garbageBetweenImportTokAndImportKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["importKind",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenImportKindAndPath",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18,213],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndImportTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenImportTokAndImportKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenImportKindAndPath",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18],[")",17]],"d":"Creates a `ImportDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndImportTok: \n  - importTok: \n  - garbageBetweenImportTokAndImportKind: \n  - importKind: \n  - garbageBetweenImportKindAndPath: \n  - path: "},{"p":["ReturnStmt","init(leadingTrivia:garbageBeforeReturnKeyword:returnKeyword:garbageBetweenReturnKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeReturnKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["returnKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`return`, ",17],["garbageBetweenReturnKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeReturnKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["returnKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenReturnKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],["?)",17]],"d":"Creates a `ReturnStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeReturnKeyword: \n  - returnKeyword: \n  - garbageBetweenReturnKeywordAndExpression: \n  - expression: "},{"p":["SourceFile","init(leadingTrivia:garbageBeforeStatements:garbageBetweenStatementsAndEOFToken:eofToken:statementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenStatementsAndEOFToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["eofToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.eof, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenStatementsAndEOFToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SourceFile","init(leadingTrivia:garbageBeforeStatements:statements:garbageBetweenStatementsAndEOFToken:eofToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,323],[", ",17],["garbageBetweenStatementsAndEOFToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["eofToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.eof)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["garbageBetweenStatementsAndEOFToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SourceFile` using the provided parameters.\n- Parameters:\n  - garbageBeforeStatements: \n  - statements: \n  - garbageBetweenStatementsAndEOFToken: \n  - eofToken: "},{"p":["StructDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndStructKeyword:structKeyword:garbageBetweenStructKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndStructKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`struct`, ",17],["garbageBetweenStructKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndStructKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenStructKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StructDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndStructKeyword:structKeyword:garbageBetweenStructKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndStructKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`struct`, ",17],["garbageBetweenStructKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndStructKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenStructKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `StructDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndStructKeyword: \n  - structKeyword: \n  - garbageBetweenStructKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: "},{"p":["SwitchCase","init(leadingTrivia:garbageBeforeUnknownAttr:unknownAttr:garbageBetweenUnknownAttrAndLabel:label:garbageBetweenLabelAndStatements:statementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeUnknownAttr",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,195],["? = nil, ",17],["garbageBetweenUnknownAttrAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenLabelAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeUnknownAttr",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["garbageBetweenUnknownAttrAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenLabelAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCase","init(leadingTrivia:garbageBeforeUnknownAttr:unknownAttr:garbageBetweenUnknownAttrAndLabel:label:garbageBetweenLabelAndStatements:statements:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeUnknownAttr",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,195],["? = nil, ",17],["garbageBetweenUnknownAttrAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenLabelAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,323],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeUnknownAttr",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["garbageBetweenUnknownAttrAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenLabelAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"Creates a `SwitchCase` using the provided parameters.\n- Parameters:\n  - garbageBeforeUnknownAttr: \n  - unknownAttr: \n  - garbageBetweenUnknownAttrAndLabel: \n  - label: \n  - garbageBetweenLabelAndStatements: \n  - statements: "},{"p":["SwitchStmt","init(leadingTrivia:garbageBeforeSwitchKeyword:switchKeyword:garbageBetweenSwitchKeywordAndExpression:expression:garbageBetweenExpressionAndLeftBrace:leftBrace:garbageBetweenLeftBraceAndCases:garbageBetweenCasesAndRightBrace:rightBrace:casesBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSwitchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`switch`, ",17],["garbageBetweenSwitchKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndCases",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenCasesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`, ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18,281],[" = { SwitchCaseList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSwitchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenSwitchKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndCases",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenCasesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchStmt","init(leadingTrivia:garbageBeforeSwitchKeyword:switchKeyword:garbageBetweenSwitchKeywordAndExpression:expression:garbageBetweenExpressionAndLeftBrace:leftBrace:garbageBetweenLeftBraceAndCases:cases:garbageBetweenCasesAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSwitchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`switch`, ",17],["garbageBetweenSwitchKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndCases",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18,281],[", ",17],["garbageBetweenCasesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSwitchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenSwitchKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndCases",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18],[", ",17],["garbageBetweenCasesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeSwitchKeyword: \n  - switchKeyword: \n  - garbageBetweenSwitchKeywordAndExpression: \n  - expression: \n  - garbageBetweenExpressionAndLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndCases: \n  - cases: \n  - garbageBetweenCasesAndRightBrace: \n  - rightBrace: "},{"p":["CatchClause","init(leadingTrivia:garbageBeforeCatchKeyword:catchKeyword:garbageBetweenCatchKeywordAndCatchItems:catchItems:garbageBetweenCatchItemsAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCatchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`catch`, ",17],["garbageBetweenCatchKeywordAndCatchItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18,252],["? = nil, ",17],["garbageBetweenCatchItemsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCatchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCatchKeywordAndCatchItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18],["?, ",17],["garbageBetweenCatchItemsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CatchClause","init(leadingTrivia:garbageBeforeCatchKeyword:catchKeyword:garbageBetweenCatchKeywordAndCatchItems:catchItems:garbageBetweenCatchItemsAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCatchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`catch`, ",17],["garbageBetweenCatchKeywordAndCatchItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18,252],["? = nil, ",17],["garbageBetweenCatchItemsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCatchKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCatchKeywordAndCatchItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18],["?, ",17],["garbageBetweenCatchItemsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `CatchClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeCatchKeyword: \n  - catchKeyword: \n  - garbageBetweenCatchKeywordAndCatchItems: \n  - catchItems: \n  - garbageBetweenCatchItemsAndBody: \n  - body: "},{"p":["CatchClause","init(leadingTrivia:_:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["_",1],[" ",17],["catchItems",2],[": ",17],["CatchItemList",18,516],[", ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["CatchItemList",18],[", ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that calculates spacing around the `catch` keyword."},{"p":["ClosureExpr","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndSignature:signature:garbageBetweenSignatureAndStatements:garbageBetweenStatementsAndRightBrace:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,306],["? = nil, ",17],["garbageBetweenSignatureAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["garbageBetweenSignatureAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureExpr","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndSignature:signature:garbageBetweenSignatureAndStatements:statements:garbageBetweenStatementsAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,306],["? = nil, ",17],["garbageBetweenSignatureAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,323],[", ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["garbageBetweenSignatureAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndSignature: \n  - signature: \n  - garbageBetweenSignatureAndStatements: \n  - statements: \n  - garbageBetweenStatementsAndRightBrace: \n  - rightBrace: "},{"p":["KeyPathExpr","init(leadingTrivia:garbageBeforeBackslash:backslash:garbageBetweenBackslashAndRootExpr:rootExpr:garbageBetweenRootExprAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["backslash",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`backslash`, ",17],["garbageBetweenBackslashAndRootExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil, ",17],["garbageBetweenRootExprAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBackslashAndRootExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["garbageBetweenRootExprAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `KeyPathExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeBackslash: \n  - backslash: \n  - garbageBetweenBackslashAndRootExpr: \n  - rootExpr: \n  - garbageBetweenRootExprAndExpression: \n  - expression: "},{"p":["LabeledStmt","init(leadingTrivia:garbageBeforeLabelName:labelName:garbageBetweenLabelNameAndLabelColon:labelColon:garbageBetweenLabelColonAndStatement:statement:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelName",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenLabelColonAndStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statement",1],[": ",17],["ExpressibleAsStmtBuildable",18,262],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelName",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelColonAndStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statement",1],[": ",17],["ExpressibleAsStmtBuildable",18],[")",17]],"d":"Creates a `LabeledStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabelName: \n  - labelName: \n  - garbageBetweenLabelNameAndLabelColon: \n  - labelColon: \n  - garbageBetweenLabelColonAndStatement: \n  - statement: "},{"p":["LabeledStmt","init(leadingTrivia:garbageBeforeLabelName:labelName:garbageBetweenLabelNameAndLabelColon:labelColon:garbageBetweenLabelColonAndStatement:statement:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelName",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenLabelColonAndStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statement",1],[": ",17],["ExpressibleAsStmtBuildable",18,262],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelName",1],[": ",17],["String",18],[", ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelColonAndStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statement",1],[": ",17],["ExpressibleAsStmtBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TernaryExpr","init(leadingTrivia:garbageBeforeConditionExpression:conditionExpression:garbageBetweenConditionExpressionAndQuestionMark:questionMark:garbageBetweenQuestionMarkAndFirstChoice:firstChoice:garbageBetweenFirstChoiceAndColonMark:colonMark:garbageBetweenColonMarkAndSecondChoice:secondChoice:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeConditionExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenConditionExpressionAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`infixQuestionMark`, ",17],["garbageBetweenQuestionMarkAndFirstChoice",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenFirstChoiceAndColonMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colonMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonMarkAndSecondChoice",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeConditionExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenConditionExpressionAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenQuestionMarkAndFirstChoice",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenFirstChoiceAndColonMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colonMark",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonMarkAndSecondChoice",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TernaryExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeConditionExpression: \n  - conditionExpression: \n  - garbageBetweenConditionExpressionAndQuestionMark: \n  - questionMark: \n  - garbageBetweenQuestionMarkAndFirstChoice: \n  - firstChoice: \n  - garbageBetweenFirstChoiceAndColonMark: \n  - colonMark: \n  - garbageBetweenColonMarkAndSecondChoice: \n  - secondChoice: "},{"p":["WhereClause","init(leadingTrivia:garbageBeforeWhereKeyword:whereKeyword:garbageBetweenWhereKeywordAndGuardResult:guardResult:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`where`, ",17],["garbageBetweenWhereKeywordAndGuardResult",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhereKeywordAndGuardResult",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `WhereClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeWhereKeyword: \n  - whereKeyword: \n  - garbageBetweenWhereKeywordAndGuardResult: \n  - guardResult: "},{"p":["AccessorDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifier:modifier:garbageBetweenModifierAndAccessorKind:accessorKind:garbageBetweenAccessorKindAndParameter:parameter:garbageBetweenParameterAndAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsKeyword:throwsKeyword:garbageBetweenThrowsKeywordAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,232],["? = nil, ",17],["garbageBetweenModifierAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAccessorKindAndParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,321],["? = nil, ",17],["garbageBetweenParameterAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["garbageBetweenModifierAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAccessorKindAndParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["garbageBetweenParameterAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifier:modifier:garbageBetweenModifierAndAccessorKind:accessorKind:garbageBetweenAccessorKindAndParameter:parameter:garbageBetweenParameterAndAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsKeyword:throwsKeyword:garbageBetweenThrowsKeywordAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,232],["? = nil, ",17],["garbageBetweenModifierAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAccessorKindAndParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,321],["? = nil, ",17],["garbageBetweenParameterAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAsyncKeywordAndThrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["garbageBetweenModifierAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAccessorKindAndParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["garbageBetweenParameterAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `AccessorDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifier: \n  - modifier: \n  - garbageBetweenModifierAndAccessorKind: \n  - accessorKind: \n  - garbageBetweenAccessorKindAndParameter: \n  - parameter: \n  - garbageBetweenParameterAndAsyncKeyword: \n  - asyncKeyword: \n  - garbageBetweenAsyncKeywordAndThrowsKeyword: \n  - throwsKeyword: \n  - garbageBetweenThrowsKeywordAndBody: \n  - body: "},{"p":["AccessorList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AccessorList",18,490],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AccessorList",18],[")",17]]},{"p":["AccessorList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessorDecl",18,226],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessorDecl",18],["...)",17]],"o":3353},{"p":["AccessorList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsAccessorList",18,227],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsAccessorList",18],["])",17]],"d":"Creates a new `AccessorList` by flattening the elements in `lists`"},{"p":["AccessorList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessorDecl",18,226],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessorDecl",18],["])",17]],"d":"Creates a `AccessorList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessorDecl`"},{"p":["ArrayElement","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ArrayElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: \n  - garbageBetweenExpressionAndTrailingComma: \n  - trailingComma: "},{"p":["CaseItemList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CaseItemList",18,492],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CaseItemList",18],[")",17]]},{"p":["CaseItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCaseItem",18,184],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCaseItem",18],["...)",17]],"o":3353},{"p":["CaseItemList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsCaseItemList",18,229],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsCaseItemList",18],["])",17]],"d":"Creates a new `CaseItemList` by flattening the elements in `lists`"},{"p":["CaseItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCaseItem",18,184],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCaseItem",18],["])",17]],"d":"Creates a `CaseItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCaseItem`"},{"p":["ClosureParam","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureParam` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndTrailingComma: \n  - trailingComma: "},{"p":["ContinueStmt","init(leadingTrivia:garbageBeforeContinueKeyword:continueKeyword:garbageBetweenContinueKeywordAndLabel:label:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeContinueKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`continue`, ",17],["garbageBetweenContinueKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],["?)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeContinueKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenContinueKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ContinueStmt","init(leadingTrivia:garbageBeforeContinueKeyword:continueKeyword:garbageBetweenContinueKeywordAndLabel:label:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeContinueKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`continue`, ",17],["garbageBetweenContinueKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeContinueKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenContinueKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ContinueStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeContinueKeyword: \n  - continueKeyword: \n  - garbageBetweenContinueKeywordAndLabel: \n  - label: "},{"p":["DeclModifier","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndDetail:detail:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["detail",1],[": ",17],["ExpressibleAsDeclModifierDetail",18,347],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["detail",1],[": ",17],["ExpressibleAsDeclModifierDetail",18],["?)",17]],"d":"Creates a `DeclModifier` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndDetail: \n  - detail: "},{"p":["EnumCaseDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndElements:elementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`case`, ",17],["garbageBetweenCaseKeywordAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18,360],[" = { EnumCaseElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseKeywordAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndElements:elements:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`case`, ",17],["garbageBetweenCaseKeywordAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18,360],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseKeywordAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"Creates a `EnumCaseDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: The attributes applied to the case declaration.\n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: The declaration modifiers applied to the case declaration.\n  - garbageBetweenModifiersAndCaseKeyword: \n  - caseKeyword: The `case` keyword for this case.\n  - garbageBetweenCaseKeywordAndElements: \n  - elements: The elements this case declares."},{"p":["FunctionDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndFuncKeyword:funcKeyword:garbageBetweenFuncKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndSignature:signature:garbageBetweenSignatureAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndFuncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`func`, ",17],["garbageBetweenFuncKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,330],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndFuncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFuncKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndFuncKeyword:funcKeyword:garbageBetweenFuncKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndSignature:signature:garbageBetweenSignatureAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndFuncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`func`, ",17],["garbageBetweenFuncKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,330],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndFuncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFuncKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `FunctionDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndFuncKeyword: \n  - funcKeyword: \n  - garbageBetweenFuncKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndSignature: \n  - signature: \n  - garbageBetweenSignatureAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndBody: \n  - body: "},{"p":["FunctionType","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndArguments:arguments:garbageBetweenArgumentsAndRightParen:rightParen:garbageBetweenRightParenAndAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsOrRethrowsKeyword:throwsOrRethrowsKeyword:garbageBetweenThrowsOrRethrowsKeywordAndArrow:arrow:garbageBetweenArrowAndReturnType:returnType:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,380],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["garbageBetweenRightParenAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAsyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndArrow",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`arrow`, ",17],["garbageBetweenArrowAndReturnType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenRightParenAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndArrow",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenArrowAndReturnType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `FunctionType` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArguments: \n  - arguments: \n  - garbageBetweenArgumentsAndRightParen: \n  - rightParen: \n  - garbageBetweenRightParenAndAsyncKeyword: \n  - asyncKeyword: \n  - garbageBetweenAsyncKeywordAndThrowsOrRethrowsKeyword: \n  - throwsOrRethrowsKeyword: \n  - garbageBetweenThrowsOrRethrowsKeywordAndArrow: \n  - arrow: \n  - garbageBetweenArrowAndReturnType: \n  - returnType: "},{"p":["GarbageNodes","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GarbageNodes",18,499],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GarbageNodes",18],[")",17]]},{"p":["GarbageNodes","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["GarbageNodes","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsGarbageNodes",18,236],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsGarbageNodes",18],["])",17]],"d":"Creates a new `GarbageNodes` by flattening the elements in `lists`"},{"p":["GarbageNodes","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `GarbageNodes` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["IfConfigDecl","init(leadingTrivia:garbageBeforeClauses:clauses:garbageBetweenClausesAndPoundEndif:poundEndif:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18,351],[", ",17],["garbageBetweenClausesAndPoundEndif",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundEndif",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundEndif`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18],[", ",17],["garbageBetweenClausesAndPoundEndif",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IfConfigDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeClauses: \n  - clauses: \n  - garbageBetweenClausesAndPoundEndif: \n  - poundEndif: "},{"p":["MetatypeType","init(leadingTrivia:garbageBeforeBaseType:baseType:garbageBetweenBaseTypeAndPeriod:period:garbageBetweenPeriodAndTypeOrProtocol:typeOrProtocol:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`period`, ",17],["garbageBetweenPeriodAndTypeOrProtocol",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeOrProtocol",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPeriodAndTypeOrProtocol",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeOrProtocol",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MetatypeType","init(leadingTrivia:garbageBeforeBaseType:baseType:garbageBetweenBaseTypeAndPeriod:period:garbageBetweenPeriodAndTypeOrProtocol:typeOrProtocol:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`period`, ",17],["garbageBetweenPeriodAndTypeOrProtocol",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPeriodAndTypeOrProtocol",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MetatypeType` using the provided parameters.\n- Parameters:\n  - garbageBeforeBaseType: \n  - baseType: \n  - garbageBetweenBaseTypeAndPeriod: \n  - period: \n  - garbageBetweenPeriodAndTypeOrProtocol: \n  - typeOrProtocol: "},{"p":["ModifierList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ModifierList",18,502],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ModifierList",18],[")",17]]},{"p":["ModifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclModifier",18,232],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclModifier",18],["...)",17]],"o":3353},{"p":["ModifierList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsModifierList",18,239],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsModifierList",18],["])",17]],"d":"Creates a new `ModifierList` by flattening the elements in `lists`"},{"p":["ModifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclModifier",18,232],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclModifier",18],["])",17]],"d":"Creates a `ModifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclModifier`"},{"p":["ObjCSelector","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ObjCSelector",18,503],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ObjCSelector",18],[")",17]]},{"p":["ObjCSelector","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjCSelectorPiece",18,337],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjCSelectorPiece",18],["...)",17]],"o":3353},{"p":["ObjCSelector","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsObjCSelector",18,240],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsObjCSelector",18],["])",17]],"d":"Creates a new `ObjCSelector` by flattening the elements in `lists`"},{"p":["ObjCSelector","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjCSelectorPiece",18,337],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjCSelectorPiece",18],["])",17]],"d":"Creates a `ObjCSelector` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjCSelectorPiece`"},{"p":["OperatorDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndOperatorKeyword:operatorKeyword:garbageBetweenOperatorKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndOperatorPrecedenceAndTypes:operatorPrecedenceAndTypes:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndOperatorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`operator`, ",17],["garbageBetweenOperatorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndOperatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18,415],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndOperatorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenOperatorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndOperatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18],["?)",17]],"d":"Creates a `OperatorDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: The attributes applied to the 'operator' declaration.\n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: The declaration modifiers applied to the 'operator'declaration.\n  - garbageBetweenModifiersAndOperatorKeyword: \n  - operatorKeyword: \n  - garbageBetweenOperatorKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndOperatorPrecedenceAndTypes: \n  - operatorPrecedenceAndTypes: Optionally specify a precedence group and designated types."},{"p":["OptionalType","init(leadingTrivia:garbageBeforeWrappedType:wrappedType:garbageBetweenWrappedTypeAndQuestionMark:questionMark:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWrappedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenWrappedTypeAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWrappedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenWrappedTypeAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalType` using the provided parameters.\n- Parameters:\n  - garbageBeforeWrappedType: \n  - wrappedType: \n  - garbageBetweenWrappedTypeAndQuestionMark: \n  - questionMark: "},{"p":["ProtocolDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndProtocolKeyword:protocolKeyword:garbageBetweenProtocolKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndPrimaryAssociatedTypeClause:primaryAssociatedTypeClause:garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndProtocolKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`protocol`, ",17],["garbageBetweenProtocolKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndPrimaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18,419],["? = nil, ",17],["garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndProtocolKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenProtocolKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndPrimaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18],["?, ",17],["garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ProtocolDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndProtocolKeyword:protocolKeyword:garbageBetweenProtocolKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndPrimaryAssociatedTypeClause:primaryAssociatedTypeClause:garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndProtocolKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`protocol`, ",17],["garbageBetweenProtocolKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndPrimaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18,419],["? = nil, ",17],["garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndProtocolKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenProtocolKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndPrimaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["primaryAssociatedTypeClause",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeClause",18],["?, ",17],["garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ProtocolDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndProtocolKeyword: \n  - protocolKeyword: \n  - garbageBetweenProtocolKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndPrimaryAssociatedTypeClause: \n  - primaryAssociatedTypeClause: \n  - garbageBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: "},{"p":["ReturnClause","init(leadingTrivia:garbageBeforeArrow:arrow:garbageBetweenArrowAndReturnType:returnType:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeArrow",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`arrow`, ",17],["garbageBetweenArrowAndReturnType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeArrow",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenArrowAndReturnType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ReturnClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeArrow: \n  - arrow: \n  - garbageBetweenArrowAndReturnType: \n  - returnType: "},{"p":["SequenceExpr","init(leadingTrivia:garbageBeforeElements:elementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,187],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SequenceExpr","init(leadingTrivia:garbageBeforeElements:elements:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsExprList",18,187],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsExprList",18],[")",17]],"d":"Creates a `SequenceExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeElements: \n  - elements: "},{"p":["SuperRefExpr","init(leadingTrivia:garbageBeforeSuperKeyword:superKeyword:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSuperKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["superKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`super`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSuperKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["superKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SuperRefExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeSuperKeyword: \n  - superKeyword: "},{"p":["TuplePattern","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElements:garbageBetweenElementsAndRightParen:rightParen:elementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18,406],[" = { TuplePatternElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePattern","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElements:elements:garbageBetweenElementsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18,406],[", ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18],[", ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TuplePattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndElements: \n  - elements: \n  - garbageBetweenElementsAndRightParen: \n  - rightParen: "},{"p":["VariableDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndLetOrVarKeyword:letOrVarKeyword:garbageBetweenLetOrVarKeywordAndBindings:bindingsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLetOrVarKeywordAndBindings",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18,354],[" = { PatternBindingList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLetOrVarKeywordAndBindings",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["VariableDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndLetOrVarKeyword:letOrVarKeyword:garbageBetweenLetOrVarKeywordAndBindings:bindings:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLetOrVarKeywordAndBindings",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18,354],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLetOrVarKeywordAndBindings",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"Creates a `VariableDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndLetOrVarKeyword: \n  - letOrVarKeyword: \n  - garbageBetweenLetOrVarKeywordAndBindings: \n  - bindings: "},{"p":["VariableDecl","init(leadingTrivia:_:name:type:initializer:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["_",1],[" ",17],["letOrVarKeyword",2],[": ",17],["TokenSyntax",18,3270],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18,331],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?)",17]]},{"p":["VersionTuple","init(leadingTrivia:garbageBeforeMajorMinor:majorMinor:garbageBetweenMajorMinorAndPatchPeriod:patchPeriod:garbageBetweenPatchPeriodAndPatchVersion:patchVersion:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeMajorMinor",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenMajorMinorAndPatchPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenPatchPeriodAndPatchVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["patchVersion",1],[": ",17],["String",18,3346],["?)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeMajorMinor",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenMajorMinorAndPatchPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenPatchPeriodAndPatchVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["patchVersion",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["VersionTuple","init(leadingTrivia:garbageBeforeMajorMinor:majorMinor:garbageBetweenMajorMinorAndPatchPeriod:patchPeriod:garbageBetweenPatchPeriodAndPatchVersion:patchVersion:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeMajorMinor",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenMajorMinorAndPatchPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenPatchPeriodAndPatchVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeMajorMinor",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenMajorMinorAndPatchPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenPatchPeriodAndPatchVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `VersionTuple` using the provided parameters.\n- Parameters:\n  - garbageBeforeMajorMinor: \n  - majorMinor: In case the version consists only of the major version, aninteger literal that specifies the major version. In casethe version consists of major and minor version number, afloating literal in which the decimal part is interpretedas the minor version.\n  - garbageBetweenMajorMinorAndPatchPeriod: \n  - patchPeriod: If the version contains a patch number, the periodseparating the minor from the patch number.\n  - garbageBetweenPatchPeriodAndPatchVersion: \n  - patchVersion: The patch version if specified."},{"p":["AccessorBlock","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndAccessors:accessors:garbageBetweenAccessorsAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndAccessors",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18,227],[", ",17],["garbageBetweenAccessorsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndAccessors",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18],[", ",17],["garbageBetweenAccessorsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorBlock` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndAccessors: \n  - accessors: \n  - garbageBetweenAccessorsAndRightBrace: \n  - rightBrace: "},{"p":["AsTypePattern","init(leadingTrivia:garbageBeforePattern:pattern:garbageBetweenPatternAndAsKeyword:asKeyword:garbageBetweenAsKeywordAndType:type:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndAsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`as`, ",17],["garbageBetweenAsKeywordAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndAsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAsKeywordAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsTypePattern` using the provided parameters.\n- Parameters:\n  - garbageBeforePattern: \n  - pattern: \n  - garbageBetweenPatternAndAsKeyword: \n  - asKeyword: \n  - garbageBetweenAsKeywordAndType: \n  - type: "},{"p":["AttributeList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AttributeList",18,515],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AttributeList",18],[")",17]]},{"p":["AttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["AttributeList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsAttributeList",18,251],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsAttributeList",18],["])",17]],"d":"Creates a new `AttributeList` by flattening the elements in `lists`"},{"p":["AttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `AttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["CatchItemList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CatchItemList",18,516],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CatchItemList",18],[")",17]]},{"p":["CatchItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchItem",18,198],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchItem",18],["...)",17]],"o":3353},{"p":["CatchItemList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsCatchItemList",18,252],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsCatchItemList",18],["])",17]],"d":"Creates a new `CatchItemList` by flattening the elements in `lists`"},{"p":["CatchItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchItem",18,198],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchItem",18],["])",17]],"d":"Creates a `CatchItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchItem`"},{"p":["CodeBlockItem","init(leadingTrivia:garbageBeforeItem:item:garbageBetweenItemAndSemicolon:semicolon:garbageBetweenSemicolonAndErrorTokens:errorTokens:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeItem",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenItemAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenSemicolonAndErrorTokens",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeItem",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenItemAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenSemicolonAndErrorTokens",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `CodeBlockItem` using the provided parameters.\n- Parameters:\n  - garbageBeforeItem: \n  - item: The underlying node inside the code block.\n  - garbageBetweenItemAndSemicolon: \n  - semicolon: If present, the trailing semicolon at the end of the item.\n  - garbageBetweenSemicolonAndErrorTokens: \n  - errorTokens: "},{"p":["ExtensionDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndExtensionKeyword:extensionKeyword:garbageBetweenExtensionKeywordAndExtendedType:extendedType:garbageBetweenExtendedTypeAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndExtensionKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`extension`, ",17],["garbageBetweenExtensionKeywordAndExtendedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenExtendedTypeAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndExtensionKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenExtensionKeywordAndExtendedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenExtendedTypeAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExtensionDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndExtensionKeyword:extensionKeyword:garbageBetweenExtensionKeywordAndExtendedType:extendedType:garbageBetweenExtendedTypeAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndExtensionKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`extension`, ",17],["garbageBetweenExtensionKeywordAndExtendedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenExtendedTypeAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndExtensionKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenExtensionKeywordAndExtendedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenExtendedTypeAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ExtensionDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndExtensionKeyword: \n  - extensionKeyword: \n  - garbageBetweenExtensionKeywordAndExtendedType: \n  - extendedType: \n  - garbageBetweenExtendedTypeAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: "},{"p":["InheritedType","init(leadingTrivia:garbageBeforeTypeName:typeName:garbageBetweenTypeNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenTypeNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenTypeNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `InheritedType` using the provided parameters.\n- Parameters:\n  - garbageBeforeTypeName: \n  - typeName: \n  - garbageBetweenTypeNameAndTrailingComma: \n  - trailingComma: "},{"p":["IsTypePattern","init(leadingTrivia:garbageBeforeIsKeyword:isKeyword:garbageBetweenIsKeywordAndType:type:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["isKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`is`, ",17],["garbageBetweenIsKeywordAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["isKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIsKeywordAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsTypePattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeIsKeyword: \n  - isKeyword: \n  - garbageBetweenIsKeywordAndType: \n  - type: "},{"p":["ObjcNamePiece","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndDot:dot:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjcNamePiece` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndDot: \n  - dot: "},{"p":["ObjcNamePiece","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndDot:dot:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundFileExpr","init(leadingTrivia:garbageBeforePoundFile:poundFile:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundFile",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundFile",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundFile`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundFile",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundFile",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundFile: \n  - poundFile: "},{"p":["PoundLineExpr","init(leadingTrivia:garbageBeforePoundLine:poundLine:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundLine",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundLine",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundLine`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundLine",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundLine",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundLineExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundLine: \n  - poundLine: "},{"p":["StringSegment","init(leadingTrivia:garbageBeforeContent:content:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeContent",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["content",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeContent",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["content",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `StringSegment` using the provided parameters.\n- Parameters:\n  - garbageBeforeContent: \n  - content: "},{"p":["StringSegment","init(leadingTrivia:garbageBeforeContent:content:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeContent",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["content",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeContent",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["content",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndSubscriptKeyword:subscriptKeyword:garbageBetweenSubscriptKeywordAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndIndices:indices:garbageBetweenIndicesAndResult:result:garbageBetweenResultAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndAccessor:accessor:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndSubscriptKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`subscript`, ",17],["garbageBetweenSubscriptKeywordAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndIndices",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18,297],[", ",17],["garbageBetweenIndicesAndResult",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18,244],[", ",17],["garbageBetweenResultAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndAccessor",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndSubscriptKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenSubscriptKeywordAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndIndices",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["garbageBetweenIndicesAndResult",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18],[", ",17],["garbageBetweenResultAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndAccessor",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `SubscriptDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndSubscriptKeyword: \n  - subscriptKeyword: \n  - garbageBetweenSubscriptKeywordAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndIndices: \n  - indices: \n  - garbageBetweenIndicesAndResult: \n  - result: \n  - garbageBetweenResultAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndAccessor: \n  - accessor: "},{"p":["SubscriptExpr","init(leadingTrivia:garbageBeforeCalledExpression:calledExpression:garbageBetweenCalledExpressionAndLeftBracket:leftBracket:garbageBetweenLeftBracketAndArgumentList:argumentList:garbageBetweenArgumentListAndRightBracket:rightBracket:garbageBetweenRightBracketAndTrailingClosure:trailingClosure:garbageBetweenTrailingClosureAndAdditionalTrailingClosures:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenCalledExpressionAndLeftBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftBracketAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[", ",17],["garbageBetweenArgumentListAndRightBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`, ",17],["garbageBetweenRightBracketAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],["? = nil, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenCalledExpressionAndLeftBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBracketAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["garbageBetweenArgumentListAndRightBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenRightBracketAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `SubscriptExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeCalledExpression: \n  - calledExpression: \n  - garbageBetweenCalledExpressionAndLeftBracket: \n  - leftBracket: \n  - garbageBetweenLeftBracketAndArgumentList: \n  - argumentList: \n  - garbageBetweenArgumentListAndRightBracket: \n  - rightBracket: \n  - garbageBetweenRightBracketAndTrailingClosure: \n  - trailingClosure: \n  - garbageBetweenTrailingClosureAndAdditionalTrailingClosures: \n  - additionalTrailingClosures: "},{"p":["SubscriptExpr","init(leadingTrivia:garbageBeforeCalledExpression:calledExpression:garbageBetweenCalledExpressionAndLeftBracket:leftBracket:garbageBetweenLeftBracketAndArgumentList:garbageBetweenArgumentListAndRightBracket:rightBracket:garbageBetweenRightBracketAndTrailingClosure:trailingClosure:garbageBetweenTrailingClosureAndAdditionalTrailingClosures:additionalTrailingClosures:argumentListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenCalledExpressionAndLeftBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftBracketAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenArgumentListAndRightBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`, ",17],["garbageBetweenRightBracketAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],["? = nil, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenCalledExpressionAndLeftBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBracketAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenArgumentListAndRightBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenRightBracketAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypealiasDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndTypealiasKeyword:typealiasKeyword:garbageBetweenTypealiasKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInitializer:initializer:garbageBetweenInitializerAndGenericWhereClause:genericWhereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndTypealiasKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`typealias`, ",17],["garbageBetweenTypealiasKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,392],[", ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndTypealiasKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenTypealiasKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],[", ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `TypealiasDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndTypealiasKeyword: \n  - typealiasKeyword: \n  - garbageBetweenTypealiasKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndInitializer: \n  - initializer: \n  - garbageBetweenInitializerAndGenericWhereClause: \n  - genericWhereClause: "},{"p":["TypealiasDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndTypealiasKeyword:typealiasKeyword:garbageBetweenTypealiasKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInitializer:initializer:garbageBetweenInitializerAndGenericWhereClause:genericWhereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndTypealiasKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`typealias`, ",17],["garbageBetweenTypealiasKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,392],[", ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndTypealiasKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenTypealiasKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],[", ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AssignmentExpr","init(leadingTrivia:garbageBeforeAssignToken:assignToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`equal`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AssignmentExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeAssignToken: \n  - assignToken: "},{"p":["AttributedType","init(leadingTrivia:garbageBeforeSpecifier:specifier:garbageBetweenSpecifierAndAttributes:attributes:garbageBetweenAttributesAndBaseType:baseType:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["specifier",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenSpecifierAndAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenSpecifierAndAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AttributedType` using the provided parameters.\n- Parameters:\n  - garbageBeforeSpecifier: \n  - specifier: \n  - garbageBetweenSpecifierAndAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndBaseType: \n  - baseType: "},{"p":["DictionaryExpr","init(leftSquare:rightSquare:contentBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = .`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = .`rightSquareBracket`, ",17],["contentBuilder",1],[": () -> ",17],["ExpressibleAsDictionaryElementList",18,383],[" = { [] })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["contentBuilder",1],[": () -> ",17],["ExpressibleAsDictionaryElementList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder\ninstead of having to wrap them in a `DictionaryElementList`."},{"p":["DictionaryExpr","init(leadingTrivia:garbageBeforeLeftSquare:leftSquare:garbageBetweenLeftSquareAndContent:content:garbageBetweenContentAndRightSquare:rightSquare:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareAndContent",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenContentAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareAndContent",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenContentAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftSquare: \n  - leftSquare: \n  - garbageBetweenLeftSquareAndContent: \n  - content: \n  - garbageBetweenContentAndRightSquare: \n  - rightSquare: "},{"p":["DictionaryType","init(leadingTrivia:garbageBeforeLeftSquareBracket:leftSquareBracket:garbageBetweenLeftSquareBracketAndKeyType:keyType:garbageBetweenKeyTypeAndColon:colon:garbageBetweenColonAndValueType:valueType:garbageBetweenValueTypeAndRightSquareBracket:rightSquareBracket:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareBracketAndKeyType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenKeyTypeAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValueType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenValueTypeAndRightSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareBracketAndKeyType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenKeyTypeAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValueType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenValueTypeAndRightSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryType` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftSquareBracket: \n  - leftSquareBracket: \n  - garbageBetweenLeftSquareBracketAndKeyType: \n  - keyType: \n  - garbageBetweenKeyTypeAndColon: \n  - colon: \n  - garbageBetweenColonAndValueType: \n  - valueType: \n  - garbageBetweenValueTypeAndRightSquareBracket: \n  - rightSquareBracket: "},{"p":["ExpressionStmt","init(leadingTrivia:garbageBeforeExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: "},{"p":["IdentifierExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndDeclNameArguments:declNameArguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `IdentifierExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndDeclNameArguments: \n  - declNameArguments: "},{"p":["IdentifierExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["IdentifierList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["IdentifierList",18,534],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["IdentifierList",18],[")",17]]},{"p":["IdentifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3270],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]],"o":3353},{"p":["IdentifierList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsIdentifierList",18,274],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsIdentifierList",18],["])",17]],"d":"Creates a new `IdentifierList` by flattening the elements in `lists`"},{"p":["IdentifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3270],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `IdentifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["IfConfigClause","init(leadingTrivia:garbageBeforePoundKeyword:poundKeyword:garbageBetweenPoundKeywordAndCondition:condition:garbageBetweenConditionAndElements:elements:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenPoundKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil, ",17],["garbageBetweenConditionAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["garbageBetweenConditionAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `IfConfigClause` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundKeyword: \n  - poundKeyword: \n  - garbageBetweenPoundKeywordAndCondition: \n  - condition: \n  - garbageBetweenConditionAndElements: \n  - elements: "},{"p":["MemberDeclList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["MemberDeclList",18,536],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["MemberDeclList",18],[")",17]]},{"p":["MemberDeclList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMemberDeclListItem",18,353],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMemberDeclListItem",18],["...)",17]],"o":3353},{"p":["MemberDeclList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsMemberDeclList",18,276],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsMemberDeclList",18],["])",17]],"d":"Creates a new `MemberDeclList` by flattening the elements in `lists`"},{"p":["MemberDeclList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMemberDeclListItem",18,353],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMemberDeclListItem",18],["])",17]],"d":"Creates a `MemberDeclList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMemberDeclListItem`"},{"p":["NilLiteralExpr","init(leadingTrivia:garbageBeforeNilKeyword:nilKeyword:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeNilKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["nilKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`nil`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeNilKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["nilKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `NilLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeNilKeyword: \n  - nilKeyword: "},{"p":["PatternBinding","init(leadingTrivia:garbageBeforePattern:pattern:garbageBetweenPatternAndTypeAnnotation:typeAnnotation:garbageBetweenTypeAnnotationAndInitializer:initializer:garbageBetweenInitializerAndAccessor:accessor:garbageBetweenAccessorAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil, ",17],["garbageBetweenInitializerAndAccessor",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil, ",17],["garbageBetweenAccessorAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["garbageBetweenInitializerAndAccessor",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["garbageBetweenAccessorAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PatternBinding` using the provided parameters.\n- Parameters:\n  - garbageBeforePattern: \n  - pattern: \n  - garbageBetweenPatternAndTypeAnnotation: \n  - typeAnnotation: \n  - garbageBetweenTypeAnnotationAndInitializer: \n  - initializer: \n  - garbageBetweenInitializerAndAccessor: \n  - accessor: \n  - garbageBetweenAccessorAndTrailingComma: \n  - trailingComma: "},{"p":["PoundErrorDecl","init(leadingTrivia:garbageBeforePoundError:poundError:garbageBetweenPoundErrorAndLeftParen:leftParen:garbageBetweenLeftParenAndMessage:message:garbageBetweenMessageAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundError",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundError",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundError`, ",17],["garbageBetweenPoundErrorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,342],[", ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundError",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundError",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundErrorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundErrorDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundError: \n  - poundError: \n  - garbageBetweenPoundErrorAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndMessage: \n  - message: \n  - garbageBetweenMessageAndRightParen: \n  - rightParen: "},{"p":["SpecializeExpr","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndGenericArgumentClause:genericArgumentClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,387],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],[")",17]],"d":"Creates a `SpecializeExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: \n  - garbageBetweenExpressionAndGenericArgumentClause: \n  - genericArgumentClause: "},{"p":["SwitchCaseList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["SwitchCaseList",18,541],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["SwitchCaseList",18],[")",17]]},{"p":["SwitchCaseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["SwitchCaseList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsSwitchCaseList",18,281],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsSwitchCaseList",18],["])",17]],"d":"Creates a new `SwitchCaseList` by flattening the elements in `lists`"},{"p":["SwitchCaseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SwitchCaseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["TypeAnnotation","init(leadingTrivia:garbageBeforeColon:colon:garbageBetweenColonAndType:type:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeAnnotation` using the provided parameters.\n- Parameters:\n  - garbageBeforeColon: \n  - colon: \n  - garbageBetweenColonAndType: \n  - type: "},{"p":["TypeAnnotation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["CatchClauseList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CatchClauseList",18,543],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CatchClauseList",18],[")",17]]},{"p":["CatchClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchClause",18,220],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchClause",18],["...)",17]],"o":3353},{"p":["CatchClauseList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsCatchClauseList",18,283],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsCatchClauseList",18],["])",17]],"d":"Creates a new `CatchClauseList` by flattening the elements in `lists`"},{"p":["CatchClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchClause",18,220],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchClause",18],["])",17]],"d":"Creates a `CatchClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchClause`"},{"p":["CompositionType","init(leadingTrivia:garbageBeforeElements:elements:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18,413],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18],[")",17]],"d":"Creates a `CompositionType` using the provided parameters.\n- Parameters:\n  - garbageBeforeElements: \n  - elements: "},{"p":["CustomAttribute","init(leadingTrivia:garbageBeforeAtSignToken:atSignToken:garbageBetweenAtSignTokenAndAttributeName:attributeName:garbageBetweenAttributeNameAndLeftParen:leftParen:garbageBetweenLeftParenAndArgumentList:argumentList:garbageBetweenArgumentListAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`atSign`, ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],["? = nil, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],["?, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CustomAttribute` using the provided parameters.\n- Parameters:\n  - garbageBeforeAtSignToken: \n  - atSignToken: The `@` sign.\n  - garbageBetweenAtSignTokenAndAttributeName: \n  - attributeName: The name of the attribute.\n  - garbageBetweenAttributeNameAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArgumentList: \n  - argumentList: \n  - garbageBetweenArgumentListAndRightParen: \n  - rightParen: "},{"p":["CustomAttribute","init(leadingTrivia:garbageBeforeAtSignToken:atSignToken:garbageBetweenAtSignTokenAndAttributeName:attributeName:garbageBetweenAttributeNameAndLeftParen:leftParen:garbageBetweenLeftParenAndArgumentList:garbageBetweenArgumentListAndRightParen:rightParen:argumentListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`atSign`, ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclarationStmt","init(leadingTrivia:garbageBeforeDeclaration:declaration:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDeclaration",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18,254],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDeclaration",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18],[")",17]],"d":"Creates a `DeclarationStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeDeclaration: \n  - declaration: "},{"p":["EnumCaseElement","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndAssociatedValue:associatedValue:garbageBetweenAssociatedValueAndRawValue:rawValue:garbageBetweenRawValueAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndAssociatedValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,297],["? = nil, ",17],["garbageBetweenAssociatedValueAndRawValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil, ",17],["garbageBetweenRawValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndAssociatedValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["garbageBetweenAssociatedValueAndRawValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["garbageBetweenRawValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `EnumCaseElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: The name of this case.\n  - garbageBetweenIdentifierAndAssociatedValue: \n  - associatedValue: The set of associated values of the case.\n  - garbageBetweenAssociatedValueAndRawValue: \n  - rawValue: The raw value of this enum element, if present.\n  - garbageBetweenRawValueAndTrailingComma: \n  - trailingComma: The trailing comma of this element, if the case hasmultiple elements."},{"p":["EnumCaseElement","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndAssociatedValue:associatedValue:garbageBetweenAssociatedValueAndRawValue:rawValue:garbageBetweenRawValueAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndAssociatedValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,297],["? = nil, ",17],["garbageBetweenAssociatedValueAndRawValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil, ",17],["garbageBetweenRawValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndAssociatedValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["garbageBetweenAssociatedValueAndRawValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["garbageBetweenRawValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCasePattern","init(leadingTrivia:garbageBeforeType:type:garbageBetweenTypeAndPeriod:period:garbageBetweenPeriodAndCaseName:caseName:garbageBetweenCaseNameAndAssociatedTuple:associatedTuple:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`period`, ",17],["garbageBetweenPeriodAndCaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseName",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenCaseNameAndAssociatedTuple",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,247],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPeriodAndCaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseName",1],[": ",17],["String",18],[", ",17],["garbageBetweenCaseNameAndAssociatedTuple",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCasePattern","init(leadingTrivia:garbageBeforeType:type:garbageBetweenTypeAndPeriod:period:garbageBetweenPeriodAndCaseName:caseName:garbageBetweenCaseNameAndAssociatedTuple:associatedTuple:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`period`, ",17],["garbageBetweenPeriodAndCaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseName",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenCaseNameAndAssociatedTuple",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,247],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPeriodAndCaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseName",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseNameAndAssociatedTuple",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"Creates a `EnumCasePattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeType: \n  - type: \n  - garbageBetweenTypeAndPeriod: \n  - period: \n  - garbageBetweenPeriodAndCaseName: \n  - caseName: \n  - garbageBetweenCaseNameAndAssociatedTuple: \n  - associatedTuple: "},{"p":["FallthroughStmt","init(leadingTrivia:garbageBeforeFallthroughKeyword:fallthroughKeyword:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeFallthroughKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`fallthrough`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeFallthroughKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FallthroughStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeFallthroughKeyword: \n  - fallthroughKeyword: "},{"p":["ForcedValueExpr","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndExclamationMark:exclamationMark:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ForcedValueExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: \n  - garbageBetweenExpressionAndExclamationMark: \n  - exclamationMark: "},{"p":["GenericArgument","init(leadingTrivia:garbageBeforeArgumentType:argumentType:garbageBetweenArgumentTypeAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeArgumentType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenArgumentTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeArgumentType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenArgumentTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeArgumentType: \n  - argumentType: \n  - garbageBetweenArgumentTypeAndTrailingComma: \n  - trailingComma: "},{"p":["InitializerDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndInitKeyword:initKeyword:garbageBetweenInitKeywordAndOptionalMark:optionalMark:garbageBetweenOptionalMarkAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndSignature:signature:garbageBetweenSignatureAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndInitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`init`, ",17],["garbageBetweenInitKeywordAndOptionalMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenOptionalMarkAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,330],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndInitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenInitKeywordAndOptionalMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenOptionalMarkAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["InitializerDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndInitKeyword:initKeyword:garbageBetweenInitKeywordAndOptionalMark:optionalMark:garbageBetweenOptionalMarkAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndSignature:signature:garbageBetweenSignatureAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndInitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`init`, ",17],["garbageBetweenInitKeywordAndOptionalMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenOptionalMarkAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,330],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndInitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenInitKeywordAndOptionalMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenOptionalMarkAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndSignature",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["garbageBetweenSignatureAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `InitializerDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndInitKeyword: \n  - initKeyword: \n  - garbageBetweenInitKeywordAndOptionalMark: \n  - optionalMark: \n  - garbageBetweenOptionalMarkAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndSignature: \n  - signature: \n  - garbageBetweenSignatureAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndBody: \n  - body: "},{"p":["KeyPathBaseExpr","init(leadingTrivia:garbageBeforePeriod:period:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`period`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `KeyPathBaseExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePeriod: \n  - period: "},{"p":["MemberDeclBlock","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndMembers:garbageBetweenMembersAndRightBrace:rightBrace:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenMembersAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenMembersAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MemberDeclBlock","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndMembers:members:garbageBetweenMembersAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18,276],[", ",17],["garbageBetweenMembersAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18],[", ",17],["garbageBetweenMembersAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MemberDeclBlock` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndMembers: \n  - members: \n  - garbageBetweenMembersAndRightBrace: \n  - rightBrace: "},{"p":["ObjcKeyPathExpr","init(leadingTrivia:garbageBeforeKeyPath:keyPath:garbageBetweenKeyPathAndLeftParen:leftParen:garbageBetweenLeftParenAndName:name:garbageBetweenNameAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeKeyPath",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["keyPath",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundKeyPath`, ",17],["garbageBetweenKeyPathAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18,189],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeKeyPath",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenKeyPathAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcKeyPathExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeKeyPath: \n  - keyPath: \n  - garbageBetweenKeyPathAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndName: \n  - name: \n  - garbageBetweenNameAndRightParen: \n  - rightParen: "},{"p":["OptionalPattern","init(leadingTrivia:garbageBeforeSubPattern:subPattern:garbageBetweenSubPatternAndQuestionMark:questionMark:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSubPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenSubPatternAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSubPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenSubPatternAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalPattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeSubPattern: \n  - subPattern: \n  - garbageBetweenSubPatternAndQuestionMark: \n  - questionMark: "},{"p":["ParameterClause","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndParameterList:parameterList:garbageBetweenParameterListAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18,386],[", ",17],["garbageBetweenParameterListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18],[", ",17],["garbageBetweenParameterListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ParameterClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndParameterList: \n  - parameterList: \n  - garbageBetweenParameterListAndRightParen: \n  - rightParen: "},{"p":["ParameterClause","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndParameterList:garbageBetweenParameterListAndRightParen:rightParen:parameterListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenParameterListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18,386],[" = { FunctionParameterList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenParameterListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundAssertStmt","init(leadingTrivia:garbageBeforePoundAssert:poundAssert:garbageBetweenPoundAssertAndLeftParen:leftParen:garbageBetweenLeftParenAndCondition:condition:garbageBetweenConditionAndComma:comma:garbageBetweenCommaAndMessage:message:garbageBetweenMessageAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundAssert",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundAssert",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundAssert`, ",17],["garbageBetweenPoundAssertAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenConditionAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["message",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundAssert",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundAssertAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenConditionAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["message",1],[": ",17],["String",18],["?, ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundAssertStmt","init(leadingTrivia:garbageBeforePoundAssert:poundAssert:garbageBetweenPoundAssertAndLeftParen:leftParen:garbageBetweenLeftParenAndCondition:condition:garbageBetweenConditionAndComma:comma:garbageBetweenCommaAndMessage:message:garbageBetweenMessageAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundAssert",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundAssert",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundAssert`, ",17],["garbageBetweenPoundAssertAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenConditionAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["message",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundAssert",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundAssertAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenConditionAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["message",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundAssertStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundAssert: \n  - poundAssert: \n  - garbageBetweenPoundAssertAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndCondition: \n  - condition: The assertion condition.\n  - garbageBetweenConditionAndComma: \n  - comma: The comma after the assertion condition.\n  - garbageBetweenCommaAndMessage: \n  - message: The assertion message.\n  - garbageBetweenMessageAndRightParen: \n  - rightParen: "},{"p":["PoundColumnExpr","init(leadingTrivia:garbageBeforePoundColumn:poundColumn:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundColumn",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundColumn",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundColumn`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundColumn",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundColumn",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundColumnExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundColumn: \n  - poundColumn: "},{"p":["PoundFileIDExpr","init(leadingTrivia:garbageBeforePoundFileID:poundFileID:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundFileID",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundFileID",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundFileID`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundFileID",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundFileID",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileIDExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundFileID: \n  - poundFileID: "},{"p":["RepeatWhileStmt","init(leadingTrivia:garbageBeforeRepeatKeyword:repeatKeyword:garbageBetweenRepeatKeywordAndBody:garbageBetweenBodyAndWhileKeyword:whileKeyword:garbageBetweenWhileKeywordAndCondition:condition:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeRepeatKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`repeat`, ",17],["garbageBetweenRepeatKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenBodyAndWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`while`, ",17],["garbageBetweenWhileKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeRepeatKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenRepeatKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenBodyAndWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhileKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["RepeatWhileStmt","init(leadingTrivia:garbageBeforeRepeatKeyword:repeatKeyword:garbageBetweenRepeatKeywordAndBody:body:garbageBetweenBodyAndWhileKeyword:whileKeyword:garbageBetweenWhileKeywordAndCondition:condition:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeRepeatKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`repeat`, ",17],["garbageBetweenRepeatKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[", ",17],["garbageBetweenBodyAndWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`while`, ",17],["garbageBetweenWhileKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeRepeatKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenRepeatKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["garbageBetweenBodyAndWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhileKeywordAndCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `RepeatWhileStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeRepeatKeyword: \n  - repeatKeyword: \n  - garbageBetweenRepeatKeywordAndBody: \n  - body: \n  - garbageBetweenBodyAndWhileKeyword: \n  - whileKeyword: \n  - garbageBetweenWhileKeywordAndCondition: \n  - condition: "},{"p":["SwitchCaseLabel","init(leadingTrivia:garbageBeforeCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndCaseItems:garbageBetweenCaseItemsAndColon:colon:caseItemsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`case`, ",17],["garbageBetweenCaseKeywordAndCaseItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenCaseItemsAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18,229],[" = { CaseItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseKeywordAndCaseItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenCaseItemsAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCaseLabel","init(leadingTrivia:garbageBeforeCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndCaseItems:caseItems:garbageBetweenCaseItemsAndColon:colon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`case`, ",17],["garbageBetweenCaseKeywordAndCaseItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18,229],[", ",17],["garbageBetweenCaseItemsAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseKeywordAndCaseItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18],[", ",17],["garbageBetweenCaseItemsAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchCaseLabel` using the provided parameters.\n- Parameters:\n  - garbageBeforeCaseKeyword: \n  - caseKeyword: \n  - garbageBetweenCaseKeywordAndCaseItems: \n  - caseItems: \n  - garbageBetweenCaseItemsAndColon: \n  - colon: "},{"p":["WildcardPattern","init(leadingTrivia:garbageBeforeWildcard:wildcard:garbageBetweenWildcardAndTypeAnnotation:typeAnnotation:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWildcard",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wildcard",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`wildcard`, ",17],["garbageBetweenWildcardAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWildcard",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wildcard",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWildcardAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?)",17]],"d":"Creates a `WildcardPattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeWildcard: \n  - wildcard: \n  - garbageBetweenWildcardAndTypeAnnotation: \n  - typeAnnotation: "},{"p":["ArrayElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ArrayElementList",18,564],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ArrayElementList",18],[")",17]]},{"p":["ArrayElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsArrayElement",18,228],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsArrayElement",18],["...)",17]],"o":3353},{"p":["ArrayElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsArrayElementList",18,304],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsArrayElementList",18],["])",17]],"d":"Creates a new `ArrayElementList` by flattening the elements in `lists`"},{"p":["ArrayElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsArrayElement",18,228],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsArrayElement",18],["])",17]],"d":"Creates a `ArrayElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsArrayElement`"},{"p":["ClosureParamList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ClosureParamList",18,565],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ClosureParamList",18],[")",17]]},{"p":["ClosureParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureParam",18,230],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureParam",18],["...)",17]],"o":3353},{"p":["ClosureParamList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsClosureParamList",18,305],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsClosureParamList",18],["])",17]],"d":"Creates a new `ClosureParamList` by flattening the elements in `lists`"},{"p":["ClosureParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureParam",18,230],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureParam",18],["])",17]],"d":"Creates a `ClosureParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureParam`"},{"p":["ClosureSignature","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndCapture:capture:garbageBetweenCaptureAndInput:input:garbageBetweenInputAndAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsTok:throwsTok:garbageBetweenThrowsTokAndOutput:output:garbageBetweenOutputAndInTok:inTok:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndCapture",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,401],["? = nil, ",17],["garbageBetweenCaptureAndInput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil, ",17],["garbageBetweenInputAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsTokAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,244],["? = nil, ",17],["garbageBetweenOutputAndInTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`in`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndCapture",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["garbageBetweenCaptureAndInput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["garbageBetweenInputAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsTokAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["garbageBetweenOutputAndInTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureSignature","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndCapture:capture:garbageBetweenCaptureAndInput:input:garbageBetweenInputAndAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsTok:throwsTok:garbageBetweenThrowsTokAndOutput:output:garbageBetweenOutputAndInTok:inTok:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndCapture",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,401],["? = nil, ",17],["garbageBetweenCaptureAndInput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil, ",17],["garbageBetweenInputAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAsyncKeywordAndThrowsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsTokAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,244],["? = nil, ",17],["garbageBetweenOutputAndInTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`in`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndCapture",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["garbageBetweenCaptureAndInput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["garbageBetweenInputAndAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsTokAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["garbageBetweenOutputAndInTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureSignature` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndCapture: \n  - capture: \n  - garbageBetweenCaptureAndInput: \n  - input: \n  - garbageBetweenInputAndAsyncKeyword: \n  - asyncKeyword: \n  - garbageBetweenAsyncKeywordAndThrowsTok: \n  - throwsTok: \n  - garbageBetweenThrowsTokAndOutput: \n  - output: \n  - garbageBetweenOutputAndInTok: \n  - inTok: "},{"p":["ConditionElement","init(leadingTrivia:garbageBeforeCondition:condition:garbageBetweenConditionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenConditionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCondition",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenConditionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ConditionElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeCondition: \n  - condition: \n  - garbageBetweenConditionAndTrailingComma: \n  - trailingComma: "},{"p":["DeclNameArgument","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndColon:colon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndColon: \n  - colon: "},{"p":["FloatLiteralExpr","init(floatLiteral:)"],"f":[["init",10],["(",17],["floatLiteral",1],[" ",17],["value",2],[": ",17],["Float",18,3349],[")",17]],"s":[["init",10],["(",17],["floatLiteral",1],[": ",17],["Float",18],[")",17]],"o":3355},{"p":["FloatLiteralExpr","init(leadingTrivia:garbageBeforeFloatingDigits:floatingDigits:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeFloatingDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["floatingDigits",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeFloatingDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["floatingDigits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FloatLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeFloatingDigits: \n  - floatingDigits: "},{"p":["FloatLiteralExpr","init(leadingTrivia:garbageBeforeFloatingDigits:floatingDigits:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeFloatingDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["floatingDigits",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeFloatingDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["floatingDigits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FloatLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Float",18,3349],[")",17]],"s":[["init",10],["(",17],["Float",18],[")",17]]},{"p":["FunctionCallExpr","init(leadingTrivia:garbageBeforeCalledExpression:calledExpression:garbageBetweenCalledExpressionAndLeftParen:leftParen:garbageBetweenLeftParenAndArgumentList:argumentList:garbageBetweenArgumentListAndRightParen:rightParen:garbageBetweenRightParenAndTrailingClosure:trailingClosure:garbageBetweenTrailingClosureAndAdditionalTrailingClosures:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenCalledExpressionAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[", ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenRightParenAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],["? = nil, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenCalledExpressionAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenRightParenAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `FunctionCallExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeCalledExpression: \n  - calledExpression: \n  - garbageBetweenCalledExpressionAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArgumentList: \n  - argumentList: \n  - garbageBetweenArgumentListAndRightParen: \n  - rightParen: \n  - garbageBetweenRightParenAndTrailingClosure: \n  - trailingClosure: \n  - garbageBetweenTrailingClosureAndAdditionalTrailingClosures: \n  - additionalTrailingClosures: "},{"p":["FunctionCallExpr","init(leadingTrivia:garbageBeforeCalledExpression:calledExpression:garbageBetweenCalledExpressionAndLeftParen:leftParen:garbageBetweenLeftParenAndArgumentList:garbageBetweenArgumentListAndRightParen:rightParen:garbageBetweenRightParenAndTrailingClosure:trailingClosure:garbageBetweenTrailingClosureAndAdditionalTrailingClosures:additionalTrailingClosures:argumentListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenCalledExpressionAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenRightParenAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],["? = nil, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCalledExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenCalledExpressionAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndArgumentList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenArgumentListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenRightParenAndTrailingClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["garbageBetweenTrailingClosureAndAdditionalTrailingClosures",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionCallExpr","init(_:trailingClosure:additionalTrailingClosures:argumentList:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["calledExpression",2],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementList",18,689],["? = nil, ",17],["argumentList",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { [] })",17]],"s":[["init",10],["(",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementList",18],["?, ",17],["argumentList",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows passing in arguments using a result builder\ninstead of having to wrap them in a `TupleExprElementList`.\nThe presence of the parenthesis will be inferred based on the presence of arguments and the trailing closure."},{"p":["FunctionDeclName","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndArguments:arguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenNameAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenNameAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `FunctionDeclName` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: The base name of the referenced function.\n  - garbageBetweenNameAndArguments: \n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["GenericParameter","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndName:name:garbageBetweenNameAndColon:colon:garbageBetweenColonAndInheritedType:inheritedType:garbageBetweenInheritedTypeAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndInheritedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenInheritedTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndInheritedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenInheritedTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericParameter","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndName:name:garbageBetweenNameAndColon:colon:garbageBetweenColonAndInheritedType:inheritedType:garbageBetweenInheritedTypeAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndInheritedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenInheritedTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndInheritedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenInheritedTypeAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericParameter` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndName: \n  - name: \n  - garbageBetweenNameAndColon: \n  - colon: \n  - garbageBetweenColonAndInheritedType: \n  - inheritedType: \n  - garbageBetweenInheritedTypeAndTrailingComma: \n  - trailingComma: "},{"p":["MemberAccessExpr","init(leadingTrivia:garbageBeforeBase:base:garbageBetweenBaseAndDot:dot:garbageBetweenDotAndName:name:garbageBetweenNameAndDeclNameArguments:declNameArguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBase",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil, ",17],["garbageBetweenBaseAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenDotAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBase",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["garbageBetweenBaseAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDotAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `MemberAccessExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeBase: \n  - base: \n  - garbageBetweenBaseAndDot: \n  - dot: \n  - garbageBetweenDotAndName: \n  - name: \n  - garbageBetweenNameAndDeclNameArguments: \n  - declNameArguments: "},{"p":["MemberAccessExpr","init(base:dot:name:declNameArguments:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3270],[" = .period, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["String",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `MemberAccessExpr` using the provided parameters."},{"p":["ObjcSelectorExpr","init(leadingTrivia:garbageBeforePoundSelector:poundSelector:garbageBetweenPoundSelectorAndLeftParen:leftParen:garbageBetweenLeftParenAndKind:kind:garbageBetweenKindAndColon:colon:garbageBetweenColonAndName:name:garbageBetweenNameAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundSelector",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundSelector",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundSelector`, ",17],["garbageBetweenPoundSelectorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["kind",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenKindAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundSelector",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundSelectorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["kind",1],[": ",17],["String",18],["?, ",17],["garbageBetweenKindAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjcSelectorExpr","init(leadingTrivia:garbageBeforePoundSelector:poundSelector:garbageBetweenPoundSelectorAndLeftParen:leftParen:garbageBetweenLeftParenAndKind:kind:garbageBetweenKindAndColon:colon:garbageBetweenColonAndName:name:garbageBetweenNameAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundSelector",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundSelector",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundSelector`, ",17],["garbageBetweenPoundSelectorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["kind",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenKindAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundSelector",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundSelectorAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["kind",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenKindAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcSelectorExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundSelector: \n  - poundSelector: \n  - garbageBetweenPoundSelectorAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndKind: \n  - kind: \n  - garbageBetweenKindAndColon: \n  - colon: \n  - garbageBetweenColonAndName: \n  - name: \n  - garbageBetweenNameAndRightParen: \n  - rightParen: "},{"p":["PostfixUnaryExpr","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndOperatorToken:operatorToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorToken",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorToken",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PostfixUnaryExpr","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndOperatorToken:operatorToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PostfixUnaryExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: \n  - garbageBetweenExpressionAndOperatorToken: \n  - operatorToken: "},{"p":["PoundWarningDecl","init(leadingTrivia:garbageBeforePoundWarning:poundWarning:garbageBetweenPoundWarningAndLeftParen:leftParen:garbageBetweenLeftParenAndMessage:message:garbageBetweenMessageAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundWarning",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundWarning",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundWarning`, ",17],["garbageBetweenPoundWarningAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,342],[", ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundWarning",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundWarning",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundWarningAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndMessage",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["garbageBetweenMessageAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundWarningDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundWarning: \n  - poundWarning: \n  - garbageBetweenPoundWarningAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndMessage: \n  - message: \n  - garbageBetweenMessageAndRightParen: \n  - rightParen: "},{"p":["RegexLiteralExpr","init(leadingTrivia:garbageBeforeRegex:regex:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeRegex",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["regex",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeRegex",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["regex",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `RegexLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeRegex: \n  - regex: "},{"p":["RegexLiteralExpr","init(leadingTrivia:garbageBeforeRegex:regex:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeRegex",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["regex",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeRegex",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["regex",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleExprElement","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndExpression:expression:garbageBetweenExpressionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleExprElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: \n  - garbageBetweenLabelAndColon: \n  - colon: \n  - garbageBetweenColonAndExpression: \n  - expression: \n  - garbageBetweenExpressionAndTrailingComma: \n  - trailingComma: "},{"p":["TupleExprElement","init(label:expression:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3346],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows passing in label as an optional string.\nThe presence of the colon will be inferred based on the presence of the label."},{"p":["TupleTypeElement","init(leadingTrivia:garbageBeforeInOut:inOut:garbageBetweenInOutAndName:name:garbageBetweenNameAndSecondName:secondName:garbageBetweenSecondNameAndColon:colon:garbageBetweenColonAndType:type:garbageBetweenTypeAndEllipsis:ellipsis:garbageBetweenEllipsisAndInitializer:initializer:garbageBetweenInitializerAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeInOut",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inOut",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenInOutAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenNameAndSecondName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenSecondNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenTypeAndEllipsis",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenEllipsisAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil, ",17],["garbageBetweenInitializerAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeInOut",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inOut",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenInOutAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenNameAndSecondName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenSecondNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenTypeAndEllipsis",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenEllipsisAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["garbageBetweenInitializerAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleTypeElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeInOut: \n  - inOut: \n  - garbageBetweenInOutAndName: \n  - name: \n  - garbageBetweenNameAndSecondName: \n  - secondName: \n  - garbageBetweenSecondNameAndColon: \n  - colon: \n  - garbageBetweenColonAndType: \n  - type: \n  - garbageBetweenTypeAndEllipsis: \n  - ellipsis: \n  - garbageBetweenEllipsisAndInitializer: \n  - initializer: \n  - garbageBetweenInitializerAndTrailingComma: \n  - trailingComma: "},{"p":["AccessorParameter","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndName:name:garbageBetweenNameAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorParameter","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndName:name:garbageBetweenNameAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorParameter` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndName: \n  - name: \n  - garbageBetweenNameAndRightParen: \n  - rightParen: "},{"p":["AvailabilityEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndAvailabilityList:availabilityList:garbageBetweenAvailabilityListAndSemicolon:semicolon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndAvailabilityList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,370],[", ",17],["garbageBetweenAvailabilityListAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`semicolon`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndAvailabilityList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["garbageBetweenAvailabilityListAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityEntry` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: The label of the argument\n  - garbageBetweenLabelAndColon: \n  - colon: The colon separating the label and the value\n  - garbageBetweenColonAndAvailabilityList: \n  - availabilityList: \n  - garbageBetweenAvailabilityListAndSemicolon: \n  - semicolon: "},{"p":["AvailabilityEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndAvailabilityList:availabilityList:garbageBetweenAvailabilityListAndSemicolon:semicolon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndAvailabilityList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,370],[", ",17],["garbageBetweenAvailabilityListAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`semicolon`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndAvailabilityList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["garbageBetweenAvailabilityListAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlockItemList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CodeBlockItemList",18,582],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CodeBlockItemList",18],[")",17]]},{"p":["CodeBlockItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCodeBlockItem",18,253],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCodeBlockItem",18],["...)",17]],"o":3353},{"p":["CodeBlockItemList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsCodeBlockItemList",18,323],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsCodeBlockItemList",18],["])",17]],"d":"Creates a new `CodeBlockItemList` by flattening the elements in `lists`"},{"p":["CodeBlockItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCodeBlockItem",18,253],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCodeBlockItem",18],["])",17]],"d":"Creates a `CodeBlockItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCodeBlockItem`"},{"p":["DeclNameArguments","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndArguments:arguments:garbageBetweenArgumentsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18,374],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArguments` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArguments: \n  - arguments: \n  - garbageBetweenArgumentsAndRightParen: \n  - rightParen: "},{"p":["DeinitializerDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndDeinitKeyword:deinitKeyword:garbageBetweenDeinitKeywordAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndDeinitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`deinit`, ",17],["garbageBetweenDeinitKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndDeinitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDeinitKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeinitializerDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndDeinitKeyword:deinitKeyword:garbageBetweenDeinitKeywordAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndDeinitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`deinit`, ",17],["garbageBetweenDeinitKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndDeinitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDeinitKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `DeinitializerDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndDeinitKeyword: \n  - deinitKeyword: \n  - garbageBetweenDeinitKeywordAndBody: \n  - body: "},{"p":["DictionaryElement","init(leadingTrivia:garbageBeforeKeyExpression:keyExpression:garbageBetweenKeyExpressionAndColon:colon:garbageBetweenColonAndValueExpression:valueExpression:garbageBetweenValueExpressionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeKeyExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenKeyExpressionAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValueExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenValueExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeKeyExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenKeyExpressionAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValueExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenValueExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DictionaryElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeKeyExpression: \n  - keyExpression: \n  - garbageBetweenKeyExpressionAndColon: \n  - colon: \n  - garbageBetweenColonAndValueExpression: \n  - valueExpression: \n  - garbageBetweenValueExpressionAndTrailingComma: \n  - trailingComma: "},{"p":["ExpressionPattern","init(leadingTrivia:garbageBeforeExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionPattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: "},{"p":["ExpressionSegment","init(leadingTrivia:garbageBeforeBackslash:backslash:garbageBetweenBackslashAndDelimiter:delimiter:garbageBetweenDelimiterAndLeftParen:leftParen:garbageBetweenLeftParenAndExpressions:garbageBetweenExpressionsAndRightParen:rightParen:expressionsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["backslash",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`backslash`, ",17],["garbageBetweenBackslashAndDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["delimiter",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenDelimiterAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndExpressions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenExpressionsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`stringInterpolationAnchor`, ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBackslashAndDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["delimiter",1],[": ",17],["String",18],["?, ",17],["garbageBetweenDelimiterAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndExpressions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenExpressionsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExpressionSegment","init(leadingTrivia:garbageBeforeBackslash:backslash:garbageBetweenBackslashAndDelimiter:delimiter:garbageBetweenDelimiterAndLeftParen:leftParen:garbageBetweenLeftParenAndExpressions:expressions:garbageBetweenExpressionsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["backslash",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`backslash`, ",17],["garbageBetweenBackslashAndDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["delimiter",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDelimiterAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndExpressions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[", ",17],["garbageBetweenExpressionsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`stringInterpolationAnchor`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBackslash",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBackslashAndDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["delimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDelimiterAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndExpressions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["garbageBetweenExpressionsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ExpressionSegment` using the provided parameters.\n- Parameters:\n  - garbageBeforeBackslash: \n  - backslash: \n  - garbageBetweenBackslashAndDelimiter: \n  - delimiter: \n  - garbageBetweenDelimiterAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndExpressions: \n  - expressions: \n  - garbageBetweenExpressionsAndRightParen: \n  - rightParen: "},{"p":["FunctionParameter","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndFirstName:firstName:garbageBetweenFirstNameAndSecondName:secondName:garbageBetweenSecondNameAndColon:colon:garbageBetweenColonAndType:type:garbageBetweenTypeAndEllipsis:ellipsis:garbageBetweenEllipsisAndDefaultArgument:defaultArgument:garbageBetweenDefaultArgumentAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndFirstName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["firstName",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenFirstNameAndSecondName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenSecondNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenTypeAndEllipsis",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenEllipsisAndDefaultArgument",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil, ",17],["garbageBetweenDefaultArgumentAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndFirstName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenFirstNameAndSecondName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenSecondNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenColonAndType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenTypeAndEllipsis",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenEllipsisAndDefaultArgument",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["garbageBetweenDefaultArgumentAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `FunctionParameter` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndFirstName: \n  - firstName: \n  - garbageBetweenFirstNameAndSecondName: \n  - secondName: \n  - garbageBetweenSecondNameAndColon: \n  - colon: \n  - garbageBetweenColonAndType: \n  - type: \n  - garbageBetweenTypeAndEllipsis: \n  - ellipsis: \n  - garbageBetweenEllipsisAndDefaultArgument: \n  - defaultArgument: \n  - garbageBetweenDefaultArgumentAndTrailingComma: \n  - trailingComma: "},{"p":["FunctionSignature","init(leadingTrivia:garbageBeforeInput:input:garbageBetweenInputAndAsyncOrReasyncKeyword:asyncOrReasyncKeyword:garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword:throwsOrRethrowsKeyword:garbageBetweenThrowsOrRethrowsKeywordAndOutput:output:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeInput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,297],[", ",17],["garbageBetweenInputAndAsyncOrReasyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,244],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeInput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["garbageBetweenInputAndAsyncOrReasyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionSignature","init(leadingTrivia:garbageBeforeInput:input:garbageBetweenInputAndAsyncOrReasyncKeyword:asyncOrReasyncKeyword:garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword:throwsOrRethrowsKeyword:garbageBetweenThrowsOrRethrowsKeywordAndOutput:output:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeInput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,297],[", ",17],["garbageBetweenInputAndAsyncOrReasyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,244],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeInput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["garbageBetweenInputAndAsyncOrReasyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsOrRethrowsKeywordAndOutput",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"Creates a `FunctionSignature` using the provided parameters.\n- Parameters:\n  - garbageBeforeInput: \n  - input: \n  - garbageBetweenInputAndAsyncOrReasyncKeyword: \n  - asyncOrReasyncKeyword: \n  - garbageBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword: \n  - throwsOrRethrowsKeyword: \n  - garbageBetweenThrowsOrRethrowsKeywordAndOutput: \n  - output: "},{"p":["IdentifierPattern","init(leadingTrivia:garbageBeforeIdentifier:identifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IdentifierPattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: "},{"p":["IdentifierPattern","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["InfixOperatorExpr","init(leadingTrivia:garbageBeforeLeftOperand:leftOperand:garbageBetweenLeftOperandAndOperatorOperand:operatorOperand:garbageBetweenOperatorOperandAndRightOperand:rightOperand:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftOperand",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenLeftOperandAndOperatorOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorOperand",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenOperatorOperandAndRightOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightOperand",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftOperand",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenLeftOperandAndOperatorOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorOperand",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenOperatorOperandAndRightOperand",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightOperand",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InfixOperatorExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftOperand: \n  - leftOperand: \n  - garbageBetweenLeftOperandAndOperatorOperand: \n  - operatorOperand: \n  - garbageBetweenOperatorOperandAndRightOperand: \n  - rightOperand: "},{"p":["InheritedTypeList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["InheritedTypeList",18,592],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["InheritedTypeList",18],[")",17]]},{"p":["InheritedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsInheritedType",18,257],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsInheritedType",18],["...)",17]],"o":3353},{"p":["InheritedTypeList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsInheritedTypeList",18,333],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsInheritedTypeList",18],["])",17]],"d":"Creates a new `InheritedTypeList` by flattening the elements in `lists`"},{"p":["InheritedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsInheritedType",18,257],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsInheritedType",18],["])",17]],"d":"Creates a `InheritedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsInheritedType`"},{"p":["InitializerClause","init(leadingTrivia:garbageBeforeEqual:equal:garbageBetweenEqualAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeEqual",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["equal",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`equal`, ",17],["garbageBetweenEqualAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeEqual",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenEqualAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InitializerClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeEqual: \n  - equal: \n  - garbageBetweenEqualAndValue: \n  - value: "},{"p":["LayoutRequirement","init(leadingTrivia:garbageBeforeTypeIdentifier:typeIdentifier:garbageBetweenTypeIdentifierAndColon:colon:garbageBetweenColonAndLayoutConstraint:layoutConstraint:garbageBetweenLayoutConstraintAndLeftParen:leftParen:garbageBetweenLeftParenAndSize:size:garbageBetweenSizeAndComma:comma:garbageBetweenCommaAndAlignment:alignment:garbageBetweenAlignmentAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndLayoutConstraint",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["layoutConstraint",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLayoutConstraintAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndSize",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["size",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenSizeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndAlignment",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["alignment",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAlignmentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndLayoutConstraint",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["layoutConstraint",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLayoutConstraintAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndSize",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["size",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenSizeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndAlignment",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["alignment",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAlignmentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `LayoutRequirement` using the provided parameters.\n- Parameters:\n  - garbageBeforeTypeIdentifier: \n  - typeIdentifier: \n  - garbageBetweenTypeIdentifierAndColon: \n  - colon: \n  - garbageBetweenColonAndLayoutConstraint: \n  - layoutConstraint: \n  - garbageBetweenLayoutConstraintAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndSize: \n  - size: \n  - garbageBetweenSizeAndComma: \n  - comma: \n  - garbageBetweenCommaAndAlignment: \n  - alignment: \n  - garbageBetweenAlignmentAndRightParen: \n  - rightParen: "},{"p":["LayoutRequirement","init(leadingTrivia:garbageBeforeTypeIdentifier:typeIdentifier:garbageBetweenTypeIdentifierAndColon:colon:garbageBetweenColonAndLayoutConstraint:layoutConstraint:garbageBetweenLayoutConstraintAndLeftParen:leftParen:garbageBetweenLeftParenAndSize:size:garbageBetweenSizeAndComma:comma:garbageBetweenCommaAndAlignment:alignment:garbageBetweenAlignmentAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndLayoutConstraint",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["layoutConstraint",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLayoutConstraintAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndSize",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["size",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenSizeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndAlignment",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["alignment",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAlignmentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndLayoutConstraint",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["layoutConstraint",1],[": ",17],["String",18],[", ",17],["garbageBetweenLayoutConstraintAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndSize",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["size",1],[": ",17],["String",18],["?, ",17],["garbageBetweenSizeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndAlignment",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["alignment",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAlignmentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["NonEmptyTokenList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["NonEmptyTokenList",18,595],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["NonEmptyTokenList",18],[")",17]]},{"p":["NonEmptyTokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3270],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]],"o":3353},{"p":["NonEmptyTokenList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsNonEmptyTokenList",18,336],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsNonEmptyTokenList",18],["])",17]],"d":"Creates a new `NonEmptyTokenList` by flattening the elements in `lists`"},{"p":["NonEmptyTokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3270],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `NonEmptyTokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["ObjCSelectorPiece","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndColon:colon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjCSelectorPiece` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndColon: \n  - colon: "},{"p":["ObjCSelectorPiece","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndColon:colon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],["?, ",17],["garbageBetweenNameAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndLeftParen:leftParen:garbageBetweenLeftParenAndArguments:garbageBetweenArgumentsAndRightParen:rightParen:argumentsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndLeftParen:leftParen:garbageBetweenLeftParenAndArguments:arguments:garbageBetweenArgumentsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["garbageBetweenArgumentsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjectLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArguments: \n  - arguments: \n  - garbageBetweenArgumentsAndRightParen: \n  - rightParen: "},{"p":["PoundFilePathExpr","init(leadingTrivia:garbageBeforePoundFilePath:poundFilePath:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundFilePath",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundFilePath",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundFilePath`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundFilePath",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundFilePath",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFilePathExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundFilePath: \n  - poundFilePath: "},{"p":["PoundFunctionExpr","init(leadingTrivia:garbageBeforePoundFunction:poundFunction:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundFunction",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundFunction",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundFunction`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundFunction",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundFunction",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFunctionExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundFunction: \n  - poundFunction: "},{"p":["QualifiedDeclName","init(leadingTrivia:garbageBeforeBaseType:baseType:garbageBetweenBaseTypeAndDot:dot:garbageBetweenDotAndName:name:garbageBetweenNameAndArguments:arguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],["? = nil, ",17],["garbageBetweenBaseTypeAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDotAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["garbageBetweenBaseTypeAndDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDotAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `QualifiedDeclName` using the provided parameters.\n- Parameters:\n  - garbageBeforeBaseType: \n  - baseType: The base type of the qualified name, optionally specified.\n  - garbageBetweenBaseTypeAndDot: \n  - dot: \n  - garbageBetweenDotAndName: \n  - name: The base name of the referenced function.\n  - garbageBetweenNameAndArguments: \n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["StringLiteralExpr","init(leadingTrivia:garbageBeforeOpenDelimiter:openDelimiter:garbageBetweenOpenDelimiterAndOpenQuote:openQuote:garbageBetweenOpenQuoteAndSegments:segments:garbageBetweenSegmentsAndCloseQuote:closeQuote:garbageBetweenCloseQuoteAndCloseDelimiter:closeDelimiter:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOpenDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenOpenDelimiterAndOpenQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenOpenQuoteAndSegments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18,389],[", ",17],["garbageBetweenSegmentsAndCloseQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenCloseQuoteAndCloseDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOpenDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenOpenDelimiterAndOpenQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenOpenQuoteAndSegments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18],[", ",17],["garbageBetweenSegmentsAndCloseQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCloseQuoteAndCloseDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `StringLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeOpenDelimiter: \n  - openDelimiter: \n  - garbageBetweenOpenDelimiterAndOpenQuote: \n  - openQuote: \n  - garbageBetweenOpenQuoteAndSegments: \n  - segments: \n  - garbageBetweenSegmentsAndCloseQuote: \n  - closeQuote: \n  - garbageBetweenCloseQuoteAndCloseDelimiter: \n  - closeDelimiter: "},{"p":["StringLiteralExpr","init(leadingTrivia:garbageBeforeOpenDelimiter:openDelimiter:garbageBetweenOpenDelimiterAndOpenQuote:openQuote:garbageBetweenOpenQuoteAndSegments:segments:garbageBetweenSegmentsAndCloseQuote:closeQuote:garbageBetweenCloseQuoteAndCloseDelimiter:closeDelimiter:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOpenDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["openDelimiter",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenOpenDelimiterAndOpenQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenOpenQuoteAndSegments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18,389],[", ",17],["garbageBetweenSegmentsAndCloseQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenCloseQuoteAndCloseDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["closeDelimiter",1],[": ",17],["String",18,3346],["?)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOpenDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["openDelimiter",1],[": ",17],["String",18],["?, ",17],["garbageBetweenOpenDelimiterAndOpenQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenOpenQuoteAndSegments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18],[", ",17],["garbageBetweenSegmentsAndCloseQuote",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCloseQuoteAndCloseDelimiter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["closeDelimiter",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralExpr","init(openDelimiter:openQuote:_:closeQuote:closeDelimiter:)"],"f":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,3270],[" = .stringQuote, ",17],["_",1],[" ",17],["value",2],[": ",17],["String",18,3346],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,3270],[" = .stringQuote, ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["String",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a string literal, optionally specifying quotes and delimiters."},{"p":["StringLiteralExpr","init(raw:)"],"f":[["init",10],["(",17],["raw",1],[" ",17],["value",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["raw",1],[": ",17],["String",18],[")",17]],"d":"Creates a raw string literal. Automatically determines\nthe number of `#`s needed to express the string as-is without any escapes."},{"p":["AssociatedtypeDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndAssociatedtypeKeyword:associatedtypeKeyword:garbageBetweenAssociatedtypeKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndInitializer:initializer:garbageBetweenInitializerAndGenericWhereClause:genericWhereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndAssociatedtypeKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`associatedtype`, ",17],["garbageBetweenAssociatedtypeKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,392],["? = nil, ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndAssociatedtypeKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAssociatedtypeKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `AssociatedtypeDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndAssociatedtypeKeyword: \n  - associatedtypeKeyword: \n  - garbageBetweenAssociatedtypeKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndInitializer: \n  - initializer: \n  - garbageBetweenInitializerAndGenericWhereClause: \n  - genericWhereClause: "},{"p":["AssociatedtypeDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndAssociatedtypeKeyword:associatedtypeKeyword:garbageBetweenAssociatedtypeKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndInitializer:initializer:garbageBetweenInitializerAndGenericWhereClause:genericWhereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndAssociatedtypeKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`associatedtype`, ",17],["garbageBetweenAssociatedtypeKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,392],["? = nil, ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndAssociatedtypeKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAssociatedtypeKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["garbageBetweenInitializerAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BinaryOperatorExpr","init(leadingTrivia:garbageBeforeOperatorToken:operatorToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BinaryOperatorExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeOperatorToken: \n  - operatorToken: "},{"p":["BinaryOperatorExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["BooleanLiteralExpr","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[" ",17],["value",2],[": ",17],["Bool",18,3348],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["Bool",18],[")",17]],"o":3357},{"p":["BooleanLiteralExpr","init(leadingTrivia:garbageBeforeBooleanLiteral:booleanLiteral:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBooleanLiteral",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBooleanLiteral",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BooleanLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeBooleanLiteral: \n  - booleanLiteral: "},{"p":["BooleanLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Bool",18,3348],[")",17]],"s":[["init",10],["(",17],["Bool",18],[")",17]]},{"p":["ClosureCaptureItem","init(leadingTrivia:garbageBeforeSpecifier:specifier:garbageBetweenSpecifierAndName:name:garbageBetweenNameAndAssignToken:assignToken:garbageBetweenAssignTokenAndExpression:expression:garbageBetweenExpressionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18,207],["? = nil, ",17],["garbageBetweenSpecifierAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenNameAndAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAssignTokenAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18],["?, ",17],["garbageBetweenSpecifierAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],["?, ",17],["garbageBetweenNameAndAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAssignTokenAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureItem","init(leadingTrivia:garbageBeforeSpecifier:specifier:garbageBetweenSpecifierAndName:name:garbageBetweenNameAndAssignToken:assignToken:garbageBetweenAssignTokenAndExpression:expression:garbageBetweenExpressionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18,207],["? = nil, ",17],["garbageBetweenSpecifierAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenNameAndAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAssignTokenAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18],["?, ",17],["garbageBetweenSpecifierAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenNameAndAssignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAssignTokenAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureCaptureItem` using the provided parameters.\n- Parameters:\n  - garbageBeforeSpecifier: \n  - specifier: \n  - garbageBetweenSpecifierAndName: \n  - name: \n  - garbageBetweenNameAndAssignToken: \n  - assignToken: \n  - garbageBetweenAssignTokenAndExpression: \n  - expression: \n  - garbageBetweenExpressionAndTrailingComma: \n  - trailingComma: "},{"p":["DeclModifierDetail","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndDetail:detail:garbageBetweenDetailAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["detail",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenDetailAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["detail",1],[": ",17],["String",18],[", ",17],["garbageBetweenDetailAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclModifierDetail","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndDetail:detail:garbageBetweenDetailAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["detail",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenDetailAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndDetail",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDetailAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclModifierDetail` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndDetail: \n  - detail: \n  - garbageBetweenDetailAndRightParen: \n  - rightParen: "},{"p":["ElseIfContinuation","init(leadingTrivia:garbageBeforeIfStatement:ifStatement:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIfStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18,180],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIfStatement",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18],[")",17]],"d":"Creates a `ElseIfContinuation` using the provided parameters.\n- Parameters:\n  - garbageBeforeIfStatement: \n  - ifStatement: "},{"p":["GenericRequirement","init(leadingTrivia:garbageBeforeBody:body:garbageBetweenBodyAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenBodyAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenBodyAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericRequirement` using the provided parameters.\n- Parameters:\n  - garbageBeforeBody: \n  - body: \n  - garbageBetweenBodyAndTrailingComma: \n  - trailingComma: "},{"p":["GenericWhereClause","init(leadingTrivia:garbageBeforeWhereKeyword:whereKeyword:garbageBetweenWhereKeywordAndRequirementList:requirementList:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`where`, ",17],["garbageBetweenWhereKeywordAndRequirementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18,399],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhereKeywordAndRequirementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"Creates a `GenericWhereClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeWhereKeyword: \n  - whereKeyword: \n  - garbageBetweenWhereKeywordAndRequirementList: \n  - requirementList: "},{"p":["GenericWhereClause","init(leadingTrivia:garbageBeforeWhereKeyword:whereKeyword:garbageBetweenWhereKeywordAndRequirementList:requirementListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`where`, ",17],["garbageBetweenWhereKeywordAndRequirementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18,399],[" = { GenericRequirementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWhereKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhereKeywordAndRequirementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IfConfigClauseList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["IfConfigClauseList",18,610],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["IfConfigClauseList",18],[")",17]]},{"p":["IfConfigClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsIfConfigClause",18,275],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsIfConfigClause",18],["...)",17]],"o":3353},{"p":["IfConfigClauseList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsIfConfigClauseList",18,351],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsIfConfigClauseList",18],["])",17]],"d":"Creates a new `IfConfigClauseList` by flattening the elements in `lists`"},{"p":["IfConfigClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsIfConfigClause",18,275],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsIfConfigClause",18],["])",17]],"d":"Creates a `IfConfigClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsIfConfigClause`"},{"p":["IntegerLiteralExpr","init(integerLiteral:)"],"f":[["init",10],["(",17],["integerLiteral",1],[" ",17],["value",2],[": ",17],["Int",18,3350],[")",17]],"s":[["init",10],["(",17],["integerLiteral",1],[": ",17],["Int",18],[")",17]],"o":3359},{"p":["IntegerLiteralExpr","init(leadingTrivia:garbageBeforeDigits:digits:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["digits",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["digits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IntegerLiteralExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeDigits: \n  - digits: "},{"p":["IntegerLiteralExpr","init(leadingTrivia:garbageBeforeDigits:digits:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["digits",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDigits",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["digits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IntegerLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int",18,3350],[")",17]],"s":[["init",10],["(",17],["Int",18],[")",17]]},{"p":["MemberDeclListItem","init(leadingTrivia:garbageBeforeDecl:decl:garbageBetweenDeclAndSemicolon:semicolon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDecl",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18,254],[", ",17],["garbageBetweenDeclAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDecl",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18],[", ",17],["garbageBetweenDeclAndSemicolon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `MemberDeclListItem` using the provided parameters.\n- Parameters:\n  - garbageBeforeDecl: \n  - decl: The declaration of the type member.\n  - garbageBetweenDeclAndSemicolon: \n  - semicolon: An optional trailing semicolon."},{"p":["PatternBindingList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PatternBindingList",18,613],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PatternBindingList",18],[")",17]]},{"p":["PatternBindingList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPatternBinding",18,278],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPatternBinding",18],["...)",17]],"o":3353},{"p":["PatternBindingList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsPatternBindingList",18,354],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsPatternBindingList",18],["])",17]],"d":"Creates a new `PatternBindingList` by flattening the elements in `lists`"},{"p":["PatternBindingList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPatternBinding",18,278],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPatternBinding",18],["])",17]],"d":"Creates a `PatternBindingList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPatternBinding`"},{"p":["PoundDsohandleExpr","init(leadingTrivia:garbageBeforePoundDsohandle:poundDsohandle:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundDsohandle",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundDsohandle`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundDsohandle",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundDsohandleExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundDsohandle: \n  - poundDsohandle: "},{"p":["PrefixOperatorExpr","init(leadingTrivia:garbageBeforeOperatorToken:operatorToken:garbageBetweenOperatorTokenAndPostfixExpression:postfixExpression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenOperatorTokenAndPostfixExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenOperatorTokenAndPostfixExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `PrefixOperatorExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeOperatorToken: \n  - operatorToken: \n  - garbageBetweenOperatorTokenAndPostfixExpression: \n  - postfixExpression: "},{"p":["PrefixOperatorExpr","init(leadingTrivia:garbageBeforeOperatorToken:operatorToken:garbageBetweenOperatorTokenAndPostfixExpression:postfixExpression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["operatorToken",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenOperatorTokenAndPostfixExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOperatorToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["operatorToken",1],[": ",17],["String",18],["?, ",17],["garbageBetweenOperatorTokenAndPostfixExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchDefaultLabel","init(leadingTrivia:garbageBeforeDefaultKeyword:defaultKeyword:garbageBetweenDefaultKeywordAndColon:colon:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDefaultKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`default`, ",17],["garbageBetweenDefaultKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDefaultKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDefaultKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchDefaultLabel` using the provided parameters.\n- Parameters:\n  - garbageBeforeDefaultKeyword: \n  - defaultKeyword: \n  - garbageBetweenDefaultKeywordAndColon: \n  - colon: "},{"p":["AccessLevelModifier","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndModifier:modifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifierDetail",18,347],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifierDetail",18],["?)",17]],"d":"Creates a `AccessLevelModifier` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndModifier: \n  - modifier: "},{"p":["AccessLevelModifier","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndModifier:modifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifierDetail",18,347],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndModifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifierDetail",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessPathComponent","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingDot:trailingDot:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndTrailingDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndTrailingDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AccessPathComponent` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndTrailingDot: \n  - trailingDot: "},{"p":["AccessPathComponent","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingDot:trailingDot:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndTrailingDot",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndTrailingDot",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["EnumCaseElementList",18,619],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["EnumCaseElementList",18],[")",17]]},{"p":["EnumCaseElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsEnumCaseElement",18,287],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsEnumCaseElement",18],["...)",17]],"o":3353},{"p":["EnumCaseElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsEnumCaseElementList",18,360],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsEnumCaseElementList",18],["])",17]],"d":"Creates a new `EnumCaseElementList` by flattening the elements in `lists`"},{"p":["EnumCaseElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsEnumCaseElement",18,287],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsEnumCaseElement",18],["])",17]],"d":"Creates a `EnumCaseElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsEnumCaseElement`"},{"p":["GenericArgumentList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericArgumentList",18,620],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericArgumentList",18],[")",17]]},{"p":["GenericArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericArgument",18,291],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericArgument",18],["...)",17]],"o":3353},{"p":["GenericArgumentList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsGenericArgumentList",18,361],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsGenericArgumentList",18],["])",17]],"d":"Creates a new `GenericArgumentList` by flattening the elements in `lists`"},{"p":["GenericArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericArgument",18,291],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericArgument",18],["])",17]],"d":"Creates a `GenericArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericArgument`"},{"p":["PostfixIfConfigExpr","init(leadingTrivia:garbageBeforeBase:base:garbageBetweenBaseAndConfig:config:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBase",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,255],["? = nil, ",17],["garbageBetweenBaseAndConfig",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18,237],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBase",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["garbageBetweenBaseAndConfig",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18],[")",17]],"d":"Creates a `PostfixIfConfigExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeBase: \n  - base: \n  - garbageBetweenBaseAndConfig: \n  - config: "},{"p":["PoundSourceLocation","init(leadingTrivia:garbageBeforePoundSourceLocation:poundSourceLocation:garbageBetweenPoundSourceLocationAndLeftParen:leftParen:garbageBetweenLeftParenAndArgs:args:garbageBetweenArgsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundSourceLocation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundSourceLocation`, ",17],["garbageBetweenPoundSourceLocationAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndArgs",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18,403],["? = nil, ",17],["garbageBetweenArgsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundSourceLocation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundSourceLocationAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndArgs",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18],["?, ",17],["garbageBetweenArgsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocation` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundSourceLocation: \n  - poundSourceLocation: \n  - garbageBetweenPoundSourceLocationAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndArgs: \n  - args: \n  - garbageBetweenArgsAndRightParen: \n  - rightParen: "},{"p":["PrecedenceGroupDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndPrecedencegroupKeyword:precedencegroupKeyword:garbageBetweenPrecedencegroupKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndLeftBrace:leftBrace:garbageBetweenLeftBraceAndGroupAttributes:groupAttributes:garbageBetweenGroupAttributesAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndPrecedencegroupKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`precedencegroup`, ",17],["garbageBetweenPrecedencegroupKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndGroupAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,424],[", ",17],["garbageBetweenGroupAttributesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndPrecedencegroupKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPrecedencegroupKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndGroupAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[", ",17],["garbageBetweenGroupAttributesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: The attributes applied to the 'precedencegroup' declaration.\n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: The declaration modifiers applied to the 'precedencegroup'declaration.\n  - garbageBetweenModifiersAndPrecedencegroupKeyword: \n  - precedencegroupKeyword: \n  - garbageBetweenPrecedencegroupKeywordAndIdentifier: \n  - identifier: The name of this precedence group.\n  - garbageBetweenIdentifierAndLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndGroupAttributes: \n  - groupAttributes: The characteristics of this precedence group.\n  - garbageBetweenGroupAttributesAndRightBrace: \n  - rightBrace: "},{"p":["PrecedenceGroupDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndPrecedencegroupKeyword:precedencegroupKeyword:garbageBetweenPrecedencegroupKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndLeftBrace:leftBrace:garbageBetweenLeftBraceAndGroupAttributes:groupAttributes:garbageBetweenGroupAttributesAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndPrecedencegroupKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`precedencegroup`, ",17],["garbageBetweenPrecedencegroupKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndGroupAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,424],[", ",17],["garbageBetweenGroupAttributesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndPrecedencegroupKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPrecedencegroupKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndGroupAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[", ",17],["garbageBetweenGroupAttributesAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SameTypeRequirement","init(leadingTrivia:garbageBeforeLeftTypeIdentifier:leftTypeIdentifier:garbageBetweenLeftTypeIdentifierAndEqualityToken:equalityToken:garbageBetweenEqualityTokenAndRightTypeIdentifier:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenLeftTypeIdentifierAndEqualityToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["equalityToken",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenEqualityTokenAndRightTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenLeftTypeIdentifierAndEqualityToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["equalityToken",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenEqualityTokenAndRightTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `SameTypeRequirement` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftTypeIdentifier: \n  - leftTypeIdentifier: \n  - garbageBetweenLeftTypeIdentifierAndEqualityToken: \n  - equalityToken: \n  - garbageBetweenEqualityTokenAndRightTypeIdentifier: \n  - rightTypeIdentifier: "},{"p":["TargetFunctionEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndDeclname:declname:garbageBetweenDeclnameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18,185],[", ",17],["garbageBetweenDeclnameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["garbageBetweenDeclnameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TargetFunctionEntry` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: The label of the argument\n  - garbageBetweenLabelAndColon: \n  - colon: The colon separating the label and the value\n  - garbageBetweenColonAndDeclname: \n  - declname: The value for this argument\n  - garbageBetweenDeclnameAndTrailingComma: \n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["TargetFunctionEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndDeclname:declname:garbageBetweenDeclnameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18,185],[", ",17],["garbageBetweenDeclnameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["garbageBetweenDeclnameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePatternElement","init(leadingTrivia:garbageBeforeLabelName:labelName:garbageBetweenLabelNameAndLabelColon:labelColon:garbageBetweenLabelColonAndPattern:pattern:garbageBetweenPatternAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelName",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLabelColonAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLabelColonAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TuplePatternElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabelName: \n  - labelName: \n  - garbageBetweenLabelNameAndLabelColon: \n  - labelColon: \n  - garbageBetweenLabelColonAndPattern: \n  - pattern: \n  - garbageBetweenPatternAndTrailingComma: \n  - trailingComma: "},{"p":["TuplePatternElement","init(leadingTrivia:garbageBeforeLabelName:labelName:garbageBetweenLabelNameAndLabelColon:labelColon:garbageBetweenLabelColonAndPattern:pattern:garbageBetweenPatternAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelName",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLabelColonAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabelName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelName",1],[": ",17],["String",18],["?, ",17],["garbageBetweenLabelNameAndLabelColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLabelColonAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ValueBindingPattern","init(leadingTrivia:garbageBeforeLetOrVarKeyword:letOrVarKeyword:garbageBetweenLetOrVarKeywordAndValuePattern:valuePattern:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLetOrVarKeywordAndValuePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLetOrVarKeywordAndValuePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `ValueBindingPattern` using the provided parameters.\n- Parameters:\n  - garbageBeforeLetOrVarKeyword: \n  - letOrVarKeyword: \n  - garbageBetweenLetOrVarKeywordAndValuePattern: \n  - valuePattern: "},{"p":["AvailabilityArgument","init(leadingTrivia:garbageBeforeEntry:entry:garbageBetweenEntryAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeEntry",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenEntryAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeEntry",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenEntryAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AvailabilityArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeEntry: \n  - entry: The actual argument\n  - garbageBetweenEntryAndTrailingComma: \n  - trailingComma: A trailing comma if the argument is followed by anotherargument"},{"p":["AvailabilitySpecList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AvailabilitySpecList",18,629],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["AvailabilitySpecList",18],[")",17]]},{"p":["AvailabilitySpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAvailabilityArgument",18,369],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAvailabilityArgument",18],["...)",17]],"o":3353},{"p":["AvailabilitySpecList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsAvailabilitySpecList",18,370],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsAvailabilitySpecList",18],["])",17]],"d":"Creates a new `AvailabilitySpecList` by flattening the elements in `lists`"},{"p":["AvailabilitySpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAvailabilityArgument",18,369],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAvailabilityArgument",18],["])",17]],"d":"Creates a `AvailabilitySpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAvailabilityArgument`"},{"p":["ClassRestrictionType","init(leadingTrivia:garbageBeforeClassKeyword:classKeyword:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`class`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClassRestrictionType` using the provided parameters.\n- Parameters:\n  - garbageBeforeClassKeyword: \n  - classKeyword: "},{"p":["ConditionElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ConditionElementList",18,631],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ConditionElementList",18],[")",17]]},{"p":["ConditionElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsConditionElement",18,307],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsConditionElement",18],["...)",17]],"o":3353},{"p":["ConditionElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsConditionElementList",18,372],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsConditionElementList",18],["])",17]],"d":"Creates a new `ConditionElementList` by flattening the elements in `lists`"},{"p":["ConditionElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsConditionElement",18,307],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsConditionElement",18],["])",17]],"d":"Creates a `ConditionElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsConditionElement`"},{"p":["ConstrainedSugarType","init(leadingTrivia:garbageBeforeSomeOrAnySpecifier:someOrAnySpecifier:garbageBetweenSomeOrAnySpecifierAndBaseType:baseType:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSomeOrAnySpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenSomeOrAnySpecifierAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSomeOrAnySpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["someOrAnySpecifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenSomeOrAnySpecifierAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ConstrainedSugarType` using the provided parameters.\n- Parameters:\n  - garbageBeforeSomeOrAnySpecifier: \n  - someOrAnySpecifier: \n  - garbageBetweenSomeOrAnySpecifierAndBaseType: \n  - baseType: "},{"p":["ConstrainedSugarType","init(leadingTrivia:garbageBeforeSomeOrAnySpecifier:someOrAnySpecifier:garbageBetweenSomeOrAnySpecifierAndBaseType:baseType:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeSomeOrAnySpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["someOrAnySpecifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenSomeOrAnySpecifierAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeSomeOrAnySpecifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["someOrAnySpecifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenSomeOrAnySpecifierAndBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclNameArgumentList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DeclNameArgumentList",18,633],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DeclNameArgumentList",18],[")",17]]},{"p":["DeclNameArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclNameArgument",18,308],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclNameArgument",18],["...)",17]],"o":3353},{"p":["DeclNameArgumentList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsDeclNameArgumentList",18,374],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsDeclNameArgumentList",18],["])",17]],"d":"Creates a new `DeclNameArgumentList` by flattening the elements in `lists`"},{"p":["DeclNameArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclNameArgument",18,308],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclNameArgument",18],["])",17]],"d":"Creates a `DeclNameArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclNameArgument`"},{"p":["GenericParameterList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericParameterList",18,634],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericParameterList",18],[")",17]]},{"p":["GenericParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericParameter",18,312],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericParameter",18],["...)",17]],"o":3353},{"p":["GenericParameterList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsGenericParameterList",18,375],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsGenericParameterList",18],["])",17]],"d":"Creates a new `GenericParameterList` by flattening the elements in `lists`"},{"p":["GenericParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericParameter",18,312],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericParameter",18],["])",17]],"d":"Creates a `GenericParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericParameter`"},{"p":["MemberTypeIdentifier","init(leadingTrivia:garbageBeforeBaseType:baseType:garbageBetweenBaseTypeAndPeriod:period:garbageBetweenPeriodAndName:name:garbageBetweenNameAndGenericArgumentClause:genericArgumentClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenPeriodAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBaseType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenBaseTypeAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPeriodAndName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `MemberTypeIdentifier` using the provided parameters.\n- Parameters:\n  - garbageBeforeBaseType: \n  - baseType: \n  - garbageBetweenBaseTypeAndPeriod: \n  - period: \n  - garbageBetweenPeriodAndName: \n  - name: \n  - garbageBetweenNameAndGenericArgumentClause: \n  - genericArgumentClause: "},{"p":["OptionalChainingExpr","init(leadingTrivia:garbageBeforeExpression:expression:garbageBetweenExpressionAndQuestionMark:questionMark:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenExpressionAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenExpressionAndQuestionMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalChainingExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeExpression: \n  - expression: \n  - garbageBetweenExpressionAndQuestionMark: \n  - questionMark: "},{"p":["SimpleTypeIdentifier","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndGenericArgumentClause:genericArgumentClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SimpleTypeIdentifier` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndGenericArgumentClause: \n  - genericArgumentClause: "},{"p":["SimpleTypeIdentifier","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["TupleExprElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TupleExprElementList",18,638],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TupleExprElementList",18],[")",17]]},{"p":["TupleExprElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleExprElement",18,319],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleExprElement",18],["...)",17]],"o":3353},{"p":["TupleExprElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsTupleExprElementList",18,379],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsTupleExprElementList",18],["])",17]],"d":"Creates a new `TupleExprElementList` by flattening the elements in `lists`"},{"p":["TupleExprElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleExprElement",18,319],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleExprElement",18],["])",17]],"d":"Creates a `TupleExprElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleExprElement`"},{"p":["TupleTypeElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TupleTypeElementList",18,639],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TupleTypeElementList",18],[")",17]]},{"p":["TupleTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleTypeElement",18,320],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleTypeElement",18],["...)",17]],"o":3353},{"p":["TupleTypeElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsTupleTypeElementList",18,380],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsTupleTypeElementList",18],["])",17]],"d":"Creates a new `TupleTypeElementList` by flattening the elements in `lists`"},{"p":["TupleTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleTypeElement",18,320],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleTypeElement",18],["])",17]],"d":"Creates a `TupleTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleTypeElement`"},{"p":["AvailabilityCondition","init(leadingTrivia:garbageBeforePoundAvailableKeyword:poundAvailableKeyword:garbageBetweenPoundAvailableKeywordAndLeftParen:leftParen:garbageBetweenLeftParenAndAvailabilitySpec:availabilitySpec:garbageBetweenAvailabilitySpecAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundAvailableKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundAvailable`, ",17],["garbageBetweenPoundAvailableKeywordAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndAvailabilitySpec",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,370],[", ",17],["garbageBetweenAvailabilitySpecAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundAvailableKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundAvailableKeywordAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndAvailabilitySpec",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["garbageBetweenAvailabilitySpecAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityCondition` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundAvailableKeyword: \n  - poundAvailableKeyword: \n  - garbageBetweenPoundAvailableKeywordAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndAvailabilitySpec: \n  - availabilitySpec: \n  - garbageBetweenAvailabilitySpecAndRightParen: \n  - rightParen: "},{"p":["BackDeployVersionList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["BackDeployVersionList",18,641],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["BackDeployVersionList",18],[")",17]]},{"p":["BackDeployVersionList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsBackDeployVersionArgument",18,410],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsBackDeployVersionArgument",18],["...)",17]],"o":3353},{"p":["BackDeployVersionList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsBackDeployVersionList",18,382],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsBackDeployVersionList",18],["])",17]],"d":"Creates a new `BackDeployVersionList` by flattening the elements in `lists`"},{"p":["BackDeployVersionList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsBackDeployVersionArgument",18,410],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsBackDeployVersionArgument",18],["])",17]],"d":"Creates a `BackDeployVersionList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsBackDeployVersionArgument`"},{"p":["DictionaryElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DictionaryElementList",18,642],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DictionaryElementList",18],[")",17]]},{"p":["DictionaryElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDictionaryElement",18,326],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDictionaryElement",18],["...)",17]],"o":3353},{"p":["DictionaryElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsDictionaryElementList",18,383],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsDictionaryElementList",18],["])",17]],"d":"Creates a new `DictionaryElementList` by flattening the elements in `lists`"},{"p":["DictionaryElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDictionaryElement",18,326],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDictionaryElement",18],["])",17]],"d":"Creates a `DictionaryElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDictionaryElement`"},{"p":["DiscardAssignmentExpr","init(leadingTrivia:garbageBeforeWildcard:wildcard:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWildcard",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wildcard",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`wildcard`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWildcard",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wildcard",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DiscardAssignmentExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeWildcard: \n  - wildcard: "},{"p":["EditorPlaceholderExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `EditorPlaceholderExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: "},{"p":["EditorPlaceholderExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionParameterList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["FunctionParameterList",18,645],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["FunctionParameterList",18],[")",17]]},{"p":["FunctionParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsFunctionParameter",18,329],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsFunctionParameter",18],["...)",17]],"o":3353},{"p":["FunctionParameterList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsFunctionParameterList",18,386],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsFunctionParameterList",18],["])",17]],"d":"Creates a new `FunctionParameterList` by flattening the elements in `lists`"},{"p":["FunctionParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsFunctionParameter",18,329],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsFunctionParameter",18],["])",17]],"d":"Creates a `FunctionParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsFunctionParameter`"},{"p":["GenericArgumentClause","init(leadingTrivia:garbageBeforeLeftAngleBracket:leftAngleBracket:garbageBetweenLeftAngleBracketAndArguments:garbageBetweenArgumentsAndRightAngleBracket:rightAngleBracket:argumentsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftAngle`, ",17],["garbageBetweenLeftAngleBracketAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenArgumentsAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightAngle`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18,361],[" = { GenericArgumentList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftAngleBracketAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenArgumentsAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericArgumentClause","init(leadingTrivia:garbageBeforeLeftAngleBracket:leftAngleBracket:garbageBetweenLeftAngleBracketAndArguments:arguments:garbageBetweenArgumentsAndRightAngleBracket:rightAngleBracket:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftAngle`, ",17],["garbageBetweenLeftAngleBracketAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18,361],[", ",17],["garbageBetweenArgumentsAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftAngleBracketAndArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18],[", ",17],["garbageBetweenArgumentsAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericArgumentClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftAngleBracket: \n  - leftAngleBracket: \n  - garbageBetweenLeftAngleBracketAndArguments: \n  - arguments: \n  - garbageBetweenArgumentsAndRightAngleBracket: \n  - rightAngleBracket: "},{"p":["PrimaryAssociatedType","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrimaryAssociatedType` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndTrailingComma: \n  - trailingComma: "},{"p":["PrimaryAssociatedType","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralSegments","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["StringLiteralSegments","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["StringLiteralSegments",18,648],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["StringLiteralSegments",18],[")",17]]},{"p":["StringLiteralSegments","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsStringLiteralSegments",18,389],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsStringLiteralSegments",18],["])",17]],"d":"Creates a new `StringLiteralSegments` by flattening the elements in `lists`"},{"p":["StringLiteralSegments","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `StringLiteralSegments` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["SymbolicReferenceExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndGenericArgumentClause:genericArgumentClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SymbolicReferenceExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericArgumentClause: \n  - genericArgumentClause: "},{"p":["SymbolicReferenceExpr","init(leadingTrivia:garbageBeforeIdentifier:identifier:garbageBetweenIdentifierAndGenericArgumentClause:genericArgumentClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericArgumentClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInheritanceClause","init(leadingTrivia:garbageBeforeColon:colon:garbageBetweenColonAndInheritedTypeCollection:inheritedTypeCollection:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndInheritedTypeCollection",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18,333],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndInheritedTypeCollection",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"Creates a `TypeInheritanceClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeColon: \n  - colon: \n  - garbageBetweenColonAndInheritedTypeCollection: \n  - inheritedTypeCollection: "},{"p":["TypeInheritanceClause","init(leadingTrivia:garbageBeforeColon:colon:garbageBetweenColonAndInheritedTypeCollection:inheritedTypeCollectionBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndInheritedTypeCollection",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18,333],[" = { InheritedTypeList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndInheritedTypeCollection",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInitializerClause","init(leadingTrivia:garbageBeforeEqual:equal:garbageBetweenEqualAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeEqual",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["equal",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`equal`, ",17],["garbageBetweenEqualAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeEqual",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenEqualAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeInitializerClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeEqual: \n  - equal: \n  - garbageBetweenEqualAndValue: \n  - value: "},{"p":["UnresolvedPatternExpr","init(leadingTrivia:garbageBeforePattern:pattern:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `UnresolvedPatternExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforePattern: \n  - pattern: "},{"p":["ClosureCaptureItemList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ClosureCaptureItemList",18,653],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ClosureCaptureItemList",18],[")",17]]},{"p":["ClosureCaptureItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureCaptureItem",18,346],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureCaptureItem",18],["...)",17]],"o":3353},{"p":["ClosureCaptureItemList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsClosureCaptureItemList",18,394],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsClosureCaptureItemList",18],["])",17]],"d":"Creates a new `ClosureCaptureItemList` by flattening the elements in `lists`"},{"p":["ClosureCaptureItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureCaptureItem",18,346],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureCaptureItem",18],["])",17]],"d":"Creates a `ClosureCaptureItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureCaptureItem`"},{"p":["CompositionTypeElement","init(leadingTrivia:garbageBeforeType:type:garbageBetweenTypeAndAmpersand:ampersand:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenTypeAndAmpersand",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ampersand",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenTypeAndAmpersand",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ampersand",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CompositionTypeElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeType: \n  - type: \n  - garbageBetweenTypeAndAmpersand: \n  - ampersand: "},{"p":["ConformanceRequirement","init(leadingTrivia:garbageBeforeLeftTypeIdentifier:leftTypeIdentifier:garbageBetweenLeftTypeIdentifierAndColon:colon:garbageBetweenColonAndRightTypeIdentifier:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenLeftTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndRightTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenLeftTypeIdentifierAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndRightTypeIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ConformanceRequirement` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftTypeIdentifier: \n  - leftTypeIdentifier: \n  - garbageBetweenLeftTypeIdentifierAndColon: \n  - colon: \n  - garbageBetweenColonAndRightTypeIdentifier: \n  - rightTypeIdentifier: "},{"p":["DifferentiabilityParam","init(leadingTrivia:garbageBeforeParameter:parameter:garbageBetweenParameterAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenParameterAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeParameter",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenParameterAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DifferentiabilityParam` using the provided parameters.\n- Parameters:\n  - garbageBeforeParameter: \n  - parameter: \n  - garbageBetweenParameterAndTrailingComma: \n  - trailingComma: "},{"p":["GenericParameterClause","init(leadingTrivia:garbageBeforeLeftAngleBracket:leftAngleBracket:garbageBetweenLeftAngleBracketAndGenericParameterList:genericParameterList:garbageBetweenGenericParameterListAndRightAngleBracket:rightAngleBracket:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftAngle`, ",17],["garbageBetweenLeftAngleBracketAndGenericParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18,375],[", ",17],["garbageBetweenGenericParameterListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftAngleBracketAndGenericParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18],[", ",17],["garbageBetweenGenericParameterListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericParameterClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftAngleBracket: \n  - leftAngleBracket: \n  - garbageBetweenLeftAngleBracketAndGenericParameterList: \n  - genericParameterList: \n  - garbageBetweenGenericParameterListAndRightAngleBracket: \n  - rightAngleBracket: "},{"p":["GenericParameterClause","init(leadingTrivia:garbageBeforeLeftAngleBracket:leftAngleBracket:garbageBetweenLeftAngleBracketAndGenericParameterList:garbageBetweenGenericParameterListAndRightAngleBracket:rightAngleBracket:genericParameterListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftAngle`, ",17],["garbageBetweenLeftAngleBracketAndGenericParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenGenericParameterListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightAngle`, ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18,375],[" = { GenericParameterList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftAngleBracketAndGenericParameterList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenGenericParameterListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericRequirementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericRequirementList",18,658],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["GenericRequirementList",18],[")",17]]},{"p":["GenericRequirementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericRequirement",18,349],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericRequirement",18],["...)",17]],"o":3353},{"p":["GenericRequirementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsGenericRequirementList",18,399],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsGenericRequirementList",18],["])",17]],"d":"Creates a new `GenericRequirementList` by flattening the elements in `lists`"},{"p":["GenericRequirementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericRequirement",18,349],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericRequirement",18],["])",17]],"d":"Creates a `GenericRequirementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericRequirement`"},{"p":["LabeledSpecializeEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndValue:value:garbageBetweenValueAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `LabeledSpecializeEntry` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: The label of the argument\n  - garbageBetweenLabelAndColon: \n  - colon: The colon separating the label and the value\n  - garbageBetweenColonAndValue: \n  - value: The value for this argument\n  - garbageBetweenValueAndTrailingComma: \n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["LabeledSpecializeEntry","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndValue:value:garbageBetweenValueAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenValueAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leadingTrivia:garbageBeforeLeftSquare:leftSquare:garbageBetweenLeftSquareAndItems:garbageBetweenItemsAndRightSquare:rightSquare:itemsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareAndItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenItemsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`, ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18,394],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareAndItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenItemsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leadingTrivia:garbageBeforeLeftSquare:leftSquare:garbageBetweenLeftSquareAndItems:items:garbageBetweenItemsAndRightSquare:rightSquare:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareAndItems",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18,394],["? = nil, ",17],["garbageBetweenItemsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareAndItems",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18],["?, ",17],["garbageBetweenItemsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureCaptureSignature` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftSquare: \n  - leftSquare: \n  - garbageBetweenLeftSquareAndItems: \n  - items: \n  - garbageBetweenItemsAndRightSquare: \n  - rightSquare: "},{"p":["DifferentiabilityParams","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndDiffParams:diffParams:garbageBetweenDiffParamsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18,414],[", ",17],["garbageBetweenDiffParamsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18],[", ",17],["garbageBetweenDiffParamsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DifferentiabilityParams` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndDiffParams: \n  - diffParams: The parameters for differentiation.\n  - garbageBetweenDiffParamsAndRightParen: \n  - rightParen: "},{"p":["PoundSourceLocationArgs","init(leadingTrivia:garbageBeforeFileArgLabel:fileArgLabel:garbageBetweenFileArgLabelAndFileArgColon:fileArgColon:garbageBetweenFileArgColonAndFileName:fileName:garbageBetweenFileNameAndComma:comma:garbageBetweenCommaAndLineArgLabel:lineArgLabel:garbageBetweenLineArgLabelAndLineArgColon:lineArgColon:garbageBetweenLineArgColonAndLineNumber:lineNumber:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeFileArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenFileArgLabelAndFileArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenFileArgColonAndFileName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileName",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenFileNameAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`comma`, ",17],["garbageBetweenCommaAndLineArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLineArgLabelAndLineArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenLineArgColonAndLineNumber",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineNumber",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeFileArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFileArgLabelAndFileArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFileArgColonAndFileName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileName",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFileNameAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCommaAndLineArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLineArgLabelAndLineArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLineArgColonAndLineNumber",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineNumber",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocationArgs` using the provided parameters.\n- Parameters:\n  - garbageBeforeFileArgLabel: \n  - fileArgLabel: \n  - garbageBetweenFileArgLabelAndFileArgColon: \n  - fileArgColon: \n  - garbageBetweenFileArgColonAndFileName: \n  - fileName: \n  - garbageBetweenFileNameAndComma: \n  - comma: \n  - garbageBetweenCommaAndLineArgLabel: \n  - lineArgLabel: \n  - garbageBetweenLineArgLabelAndLineArgColon: \n  - lineArgColon: \n  - garbageBetweenLineArgColonAndLineNumber: \n  - lineNumber: "},{"p":["PoundSourceLocationArgs","init(leadingTrivia:garbageBeforeFileArgLabel:fileArgLabel:garbageBetweenFileArgLabelAndFileArgColon:fileArgColon:garbageBetweenFileArgColonAndFileName:fileName:garbageBetweenFileNameAndComma:comma:garbageBetweenCommaAndLineArgLabel:lineArgLabel:garbageBetweenLineArgLabelAndLineArgColon:lineArgColon:garbageBetweenLineArgColonAndLineNumber:lineNumber:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeFileArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileArgLabel",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenFileArgLabelAndFileArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenFileArgColonAndFileName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["fileName",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenFileNameAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`comma`, ",17],["garbageBetweenCommaAndLineArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineArgLabel",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLineArgLabelAndLineArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenLineArgColonAndLineNumber",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["lineNumber",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeFileArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileArgLabel",1],[": ",17],["String",18],[", ",17],["garbageBetweenFileArgLabelAndFileArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenFileArgColonAndFileName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["fileName",1],[": ",17],["String",18],[", ",17],["garbageBetweenFileNameAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCommaAndLineArgLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineArgLabel",1],[": ",17],["String",18],[", ",17],["garbageBetweenLineArgLabelAndLineArgColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLineArgColonAndLineNumber",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["lineNumber",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupNameList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrecedenceGroupNameList",18,663],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrecedenceGroupNameList",18],[")",17]]},{"p":["PrecedenceGroupNameList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18,416],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18],["...)",17]],"o":3353},{"p":["PrecedenceGroupNameList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsPrecedenceGroupNameList",18,404],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsPrecedenceGroupNameList",18],["])",17]],"d":"Creates a new `PrecedenceGroupNameList` by flattening the elements in `lists`"},{"p":["PrecedenceGroupNameList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrecedenceGroupNameElement",18,416],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrecedenceGroupNameElement",18],["])",17]],"d":"Creates a `PrecedenceGroupNameList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrecedenceGroupNameElement`"},{"p":["PrecedenceGroupRelation","init(leadingTrivia:garbageBeforeHigherThanOrLowerThan:higherThanOrLowerThan:garbageBetweenHigherThanOrLowerThanAndColon:colon:garbageBetweenColonAndOtherNames:otherNames:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeHigherThanOrLowerThan",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenHigherThanOrLowerThanAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndOtherNames",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18,404],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeHigherThanOrLowerThan",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenHigherThanOrLowerThanAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndOtherNames",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"Creates a `PrecedenceGroupRelation` using the provided parameters.\n- Parameters:\n  - garbageBeforeHigherThanOrLowerThan: \n  - higherThanOrLowerThan: The relation to specified other precedence groups.\n  - garbageBetweenHigherThanOrLowerThanAndColon: \n  - colon: \n  - garbageBetweenColonAndOtherNames: \n  - otherNames: The name of other precedence group to which this precedencegroup relates."},{"p":["PrecedenceGroupRelation","init(leadingTrivia:garbageBeforeHigherThanOrLowerThan:higherThanOrLowerThan:garbageBetweenHigherThanOrLowerThanAndColon:colon:garbageBetweenColonAndOtherNames:otherNames:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeHigherThanOrLowerThan",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["higherThanOrLowerThan",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenHigherThanOrLowerThanAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndOtherNames",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18,404],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeHigherThanOrLowerThan",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["higherThanOrLowerThan",1],[": ",17],["String",18],[", ",17],["garbageBetweenHigherThanOrLowerThanAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndOtherNames",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePatternElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TuplePatternElementList",18,665],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TuplePatternElementList",18],[")",17]]},{"p":["TuplePatternElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTuplePatternElement",18,367],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTuplePatternElement",18],["...)",17]],"o":3353},{"p":["TuplePatternElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsTuplePatternElementList",18,406],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsTuplePatternElementList",18],["])",17]],"d":"Creates a new `TuplePatternElementList` by flattening the elements in `lists`"},{"p":["TuplePatternElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTuplePatternElement",18,367],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTuplePatternElement",18],["])",17]],"d":"Creates a `TuplePatternElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTuplePatternElement`"},{"p":["UnavailabilityCondition","init(leadingTrivia:garbageBeforePoundUnavailableKeyword:poundUnavailableKeyword:garbageBetweenPoundUnavailableKeywordAndLeftParen:leftParen:garbageBetweenLeftParenAndAvailabilitySpec:availabilitySpec:garbageBetweenAvailabilitySpecAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePoundUnavailableKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`poundUnavailable`, ",17],["garbageBetweenPoundUnavailableKeywordAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndAvailabilitySpec",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,370],[", ",17],["garbageBetweenAvailabilitySpecAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePoundUnavailableKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPoundUnavailableKeywordAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndAvailabilitySpec",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["garbageBetweenAvailabilitySpecAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `UnavailabilityCondition` using the provided parameters.\n- Parameters:\n  - garbageBeforePoundUnavailableKeyword: \n  - poundUnavailableKeyword: \n  - garbageBetweenPoundUnavailableKeywordAndLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndAvailabilitySpec: \n  - availabilitySpec: \n  - garbageBetweenAvailabilitySpecAndRightParen: \n  - rightParen: "},{"p":["MatchingPatternCondition","init(leadingTrivia:garbageBeforeCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndPattern:pattern:garbageBetweenPatternAndTypeAnnotation:typeAnnotation:garbageBetweenTypeAnnotationAndInitializer:initializer:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`case`, ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,334],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],[")",17]],"d":"Creates a `MatchingPatternCondition` using the provided parameters.\n- Parameters:\n  - garbageBeforeCaseKeyword: \n  - caseKeyword: \n  - garbageBetweenCaseKeywordAndPattern: \n  - pattern: \n  - garbageBetweenPatternAndTypeAnnotation: \n  - typeAnnotation: \n  - garbageBetweenTypeAnnotationAndInitializer: \n  - initializer: "},{"p":["OptionalBindingCondition","init(leadingTrivia:garbageBeforeLetOrVarKeyword:letOrVarKeyword:garbageBetweenLetOrVarKeywordAndPattern:pattern:garbageBetweenPatternAndTypeAnnotation:typeAnnotation:garbageBetweenTypeAnnotationAndInitializer:initializer:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLetOrVarKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,334],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLetOrVarKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLetOrVarKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["garbageBetweenTypeAnnotationAndInitializer",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?)",17]],"d":"Creates a `OptionalBindingCondition` using the provided parameters.\n- Parameters:\n  - garbageBeforeLetOrVarKeyword: \n  - letOrVarKeyword: \n  - garbageBetweenLetOrVarKeywordAndPattern: \n  - pattern: \n  - garbageBetweenPatternAndTypeAnnotation: \n  - typeAnnotation: \n  - garbageBetweenTypeAnnotationAndInitializer: \n  - initializer: "},{"p":["BackDeployVersionArgument","init(leadingTrivia:garbageBeforeAvailabilityVersionRestriction:availabilityVersionRestriction:garbageBetweenAvailabilityVersionRestrictionAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAvailabilityVersionRestriction",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["availabilityVersionRestriction",1],[": ",17],["ExpressibleAsAvailabilityVersionRestriction",18,426],[", ",17],["garbageBetweenAvailabilityVersionRestrictionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAvailabilityVersionRestriction",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["availabilityVersionRestriction",1],[": ",17],["ExpressibleAsAvailabilityVersionRestriction",18],[", ",17],["garbageBetweenAvailabilityVersionRestrictionAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `BackDeployVersionArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeAvailabilityVersionRestriction: \n  - availabilityVersionRestriction: \n  - garbageBetweenAvailabilityVersionRestrictionAndTrailingComma: \n  - trailingComma: A trailing comma if the argument is followed by anotherargument"},{"p":["PrecedenceGroupAssignment","init(leadingTrivia:garbageBeforeAssignmentKeyword:assignmentKeyword:garbageBetweenAssignmentKeywordAndColon:colon:garbageBetweenColonAndFlag:flag:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAssignmentKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAssignmentKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndFlag",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["flag",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAssignmentKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAssignmentKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndFlag",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssignment` using the provided parameters.\n- Parameters:\n  - garbageBeforeAssignmentKeyword: \n  - assignmentKeyword: \n  - garbageBetweenAssignmentKeywordAndColon: \n  - colon: \n  - garbageBetweenColonAndFlag: \n  - flag: When true, an operator in the corresponding precedence groupuses the same grouping rules during optional chaining as theassignment operators from the standard library. Otherwise,operators in the precedence group follows the same optionalchaining rules as operators that don't perform assignment."},{"p":["PrecedenceGroupAssignment","init(leadingTrivia:garbageBeforeAssignmentKeyword:assignmentKeyword:garbageBetweenAssignmentKeywordAndColon:colon:garbageBetweenColonAndFlag:flag:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAssignmentKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["assignmentKeyword",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenAssignmentKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndFlag",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["flag",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAssignmentKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["assignmentKeyword",1],[": ",17],["String",18],[", ",17],["garbageBetweenAssignmentKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndFlag",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrimaryAssociatedTypeList",18,671],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrimaryAssociatedTypeList",18],[")",17]]},{"p":["PrimaryAssociatedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrimaryAssociatedType",18,388],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrimaryAssociatedType",18],["...)",17]],"o":3353},{"p":["PrimaryAssociatedTypeList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsPrimaryAssociatedTypeList",18,412],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsPrimaryAssociatedTypeList",18],["])",17]],"d":"Creates a new `PrimaryAssociatedTypeList` by flattening the elements in `lists`"},{"p":["PrimaryAssociatedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrimaryAssociatedType",18,388],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrimaryAssociatedType",18],["])",17]],"d":"Creates a `PrimaryAssociatedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrimaryAssociatedType`"},{"p":["CompositionTypeElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CompositionTypeElementList",18,672],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["CompositionTypeElementList",18],[")",17]]},{"p":["CompositionTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCompositionTypeElement",18,395],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCompositionTypeElement",18],["...)",17]],"o":3353},{"p":["CompositionTypeElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsCompositionTypeElementList",18,413],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsCompositionTypeElementList",18],["])",17]],"d":"Creates a new `CompositionTypeElementList` by flattening the elements in `lists`"},{"p":["CompositionTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCompositionTypeElement",18,395],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCompositionTypeElement",18],["])",17]],"d":"Creates a `CompositionTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCompositionTypeElement`"},{"p":["DifferentiabilityParamList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DifferentiabilityParamList",18,673],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["DifferentiabilityParamList",18],[")",17]]},{"p":["DifferentiabilityParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDifferentiabilityParam",18,397],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDifferentiabilityParam",18],["...)",17]],"o":3353},{"p":["DifferentiabilityParamList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsDifferentiabilityParamList",18,414],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsDifferentiabilityParamList",18],["])",17]],"d":"Creates a new `DifferentiabilityParamList` by flattening the elements in `lists`"},{"p":["DifferentiabilityParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDifferentiabilityParam",18,397],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDifferentiabilityParam",18],["])",17]],"d":"Creates a `DifferentiabilityParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDifferentiabilityParam`"},{"p":["OperatorPrecedenceAndTypes","init(leadingTrivia:garbageBeforeColon:colon:garbageBetweenColonAndPrecedenceGroupAndDesignatedTypes:precedenceGroupAndDesignatedTypes:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndPrecedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18,274],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndPrecedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18],[")",17]],"d":"Creates a `OperatorPrecedenceAndTypes` using the provided parameters.\n- Parameters:\n  - garbageBeforeColon: \n  - colon: \n  - garbageBetweenColonAndPrecedenceGroupAndDesignatedTypes: \n  - precedenceGroupAndDesignatedTypes: The precedence group and designated types for this operator"},{"p":["PrecedenceGroupNameElement","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrecedenceGroupNameElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeName: \n  - name: \n  - garbageBetweenNameAndTrailingComma: \n  - trailingComma: "},{"p":["PrecedenceGroupNameElement","init(leadingTrivia:garbageBeforeName:name:garbageBetweenNameAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["name",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["garbageBetweenNameAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityLabeledArgument","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `AvailabilityLabeledArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: The label of the argument\n  - garbageBetweenLabelAndColon: \n  - colon: The colon separating label and value\n  - garbageBetweenColonAndValue: \n  - value: The value of this labeled argument"},{"p":["AvailabilityLabeledArgument","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BackDeployAttributeSpecList","init(leadingTrivia:garbageBeforeBeforeLabel:beforeLabel:garbageBetweenBeforeLabelAndColon:colon:garbageBetweenColonAndVersionList:versionList:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["beforeLabel",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenBeforeLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndVersionList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18,382],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["beforeLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBeforeLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndVersionList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18],[")",17]],"d":"Creates a `BackDeployAttributeSpecList` using the provided parameters.\n- Parameters:\n  - garbageBeforeBeforeLabel: \n  - beforeLabel: The \"before\" label.\n  - garbageBetweenBeforeLabelAndColon: \n  - colon: The colon separating \"before\" and the parameter list.\n  - garbageBetweenColonAndVersionList: \n  - versionList: The list of OS versions in which the declaration became ABIstable."},{"p":["BackDeployAttributeSpecList","init(leadingTrivia:garbageBeforeBeforeLabel:beforeLabel:garbageBetweenBeforeLabelAndColon:colon:garbageBetweenColonAndVersionList:versionList:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["beforeLabel",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenBeforeLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndVersionList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18,382],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["beforeLabel",1],[": ",17],["String",18],[", ",17],["garbageBetweenBeforeLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndVersionList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["versionList",1],[": ",17],["ExpressibleAsBackDeployVersionList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeClause","init(leadingTrivia:garbageBeforeLeftAngleBracket:leftAngleBracket:garbageBetweenLeftAngleBracketAndPrimaryAssociatedTypeList:primaryAssociatedTypeList:garbageBetweenPrimaryAssociatedTypeListAndRightAngleBracket:rightAngleBracket:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftAngle`, ",17],["garbageBetweenLeftAngleBracketAndPrimaryAssociatedTypeList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["primaryAssociatedTypeList",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,412],[", ",17],["garbageBetweenPrimaryAssociatedTypeListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftAngleBracketAndPrimaryAssociatedTypeList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["primaryAssociatedTypeList",1],[": ",17],["ExpressibleAsPrimaryAssociatedTypeList",18],[", ",17],["garbageBetweenPrimaryAssociatedTypeListAndRightAngleBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrimaryAssociatedTypeClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftAngleBracket: \n  - leftAngleBracket: \n  - garbageBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: \n  - primaryAssociatedTypeList: \n  - garbageBetweenPrimaryAssociatedTypeListAndRightAngleBracket: \n  - rightAngleBracket: "},{"p":["SpecializeAttributeSpecList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["SpecializeAttributeSpecList",18,679],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["SpecializeAttributeSpecList",18],[")",17]]},{"p":["SpecializeAttributeSpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["SpecializeAttributeSpecList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsSpecializeAttributeSpecList",18,420],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsSpecializeAttributeSpecList",18],["])",17]],"d":"Creates a new `SpecializeAttributeSpecList` by flattening the elements in `lists`"},{"p":["SpecializeAttributeSpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SpecializeAttributeSpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["ImplementsAttributeArguments","init(leadingTrivia:garbageBeforeType:type:garbageBetweenTypeAndComma:comma:garbageBetweenCommaAndDeclBaseName:declBaseName:garbageBetweenDeclBaseNameAndDeclNameArguments:declNameArguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18,378],[", ",17],["garbageBetweenTypeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`comma`, ",17],["garbageBetweenCommaAndDeclBaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenDeclBaseNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18],[", ",17],["garbageBetweenTypeAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenCommaAndDeclBaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenDeclBaseNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `ImplementsAttributeArguments` using the provided parameters.\n- Parameters:\n  - garbageBeforeType: \n  - type: The type for which the method with this attributeimplements a requirement.\n  - garbageBetweenTypeAndComma: \n  - comma: The comma separating the type and method name\n  - garbageBetweenCommaAndDeclBaseName: \n  - declBaseName: The base name of the protocol's requirement.\n  - garbageBetweenDeclBaseNameAndDeclNameArguments: \n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["NamedAttributeStringArgument","init(leadingTrivia:garbageBeforeNameTok:nameTok:garbageBetweenNameTokAndColon:colon:garbageBetweenColonAndStringOrDeclname:stringOrDeclname:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeNameTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["nameTok",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenNameTokAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndStringOrDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeNameTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["nameTok",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenNameTokAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndStringOrDeclname",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `NamedAttributeStringArgument` using the provided parameters.\n- Parameters:\n  - garbageBeforeNameTok: \n  - nameTok: The label of the argument\n  - garbageBetweenNameTokAndColon: \n  - colon: The colon separating the label and the value\n  - garbageBetweenColonAndStringOrDeclname: \n  - stringOrDeclname: "},{"p":["PrecedenceGroupAssociativity","init(leadingTrivia:garbageBeforeAssociativityKeyword:associativityKeyword:garbageBetweenAssociativityKeywordAndColon:colon:garbageBetweenColonAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAssociativityKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAssociativityKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["TokenSyntax",18,3270],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAssociativityKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAssociativityKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssociativity` using the provided parameters.\n- Parameters:\n  - garbageBeforeAssociativityKeyword: \n  - associativityKeyword: \n  - garbageBetweenAssociativityKeywordAndColon: \n  - colon: \n  - garbageBetweenColonAndValue: \n  - value: Operators that are `left`-associative group left-to-right.Operators that are `right`-associative group right-to-left.Operators that are specified with an associativity of `none`don't associate at all"},{"p":["PrecedenceGroupAssociativity","init(leadingTrivia:garbageBeforeAssociativityKeyword:associativityKeyword:garbageBetweenAssociativityKeywordAndColon:colon:garbageBetweenColonAndValue:value:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAssociativityKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["associativityKeyword",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenAssociativityKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["value",1],[": ",17],["String",18,3346],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAssociativityKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["associativityKeyword",1],[": ",17],["String",18],[", ",17],["garbageBetweenAssociativityKeywordAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndValue",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["value",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupAttributeList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrecedenceGroupAttributeList",18,683],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["PrecedenceGroupAttributeList",18],[")",17]]},{"p":["PrecedenceGroupAttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]],"o":3353},{"p":["PrecedenceGroupAttributeList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsPrecedenceGroupAttributeList",18,424],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsPrecedenceGroupAttributeList",18],["])",17]],"d":"Creates a new `PrecedenceGroupAttributeList` by flattening the elements in `lists`"},{"p":["PrecedenceGroupAttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,165],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `PrecedenceGroupAttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["DifferentiabilityParamsClause","init(leadingTrivia:garbageBeforeWrtLabel:wrtLabel:garbageBetweenWrtLabelAndColon:colon:garbageBetweenColonAndParameters:parameters:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWrtLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wrtLabel",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenWrtLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWrtLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wrtLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWrtLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `DifferentiabilityParamsClause` using the provided parameters.\n- Parameters:\n  - garbageBeforeWrtLabel: \n  - wrtLabel: The \"wrt\" label.\n  - garbageBetweenWrtLabelAndColon: \n  - colon: The colon separating \"wrt\" and the parameter list.\n  - garbageBetweenColonAndParameters: \n  - parameters: "},{"p":["DifferentiabilityParamsClause","init(leadingTrivia:garbageBeforeWrtLabel:wrtLabel:garbageBetweenWrtLabelAndColon:colon:garbageBetweenColonAndParameters:parameters:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWrtLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wrtLabel",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenWrtLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWrtLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wrtLabel",1],[": ",17],["String",18],[", ",17],["garbageBetweenWrtLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityVersionRestriction","init(leadingTrivia:garbageBeforePlatform:platform:garbageBetweenPlatformAndVersion:version:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePlatform",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["platform",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenPlatformAndVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,249],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePlatform",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["platform",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenPlatformAndVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"Creates a `AvailabilityVersionRestriction` using the provided parameters.\n- Parameters:\n  - garbageBeforePlatform: \n  - platform: The name of the OS on which the availability should berestricted or 'swift' if the availability should berestricted based on a Swift version.\n  - garbageBetweenPlatformAndVersion: \n  - version: "},{"p":["AvailabilityVersionRestriction","init(leadingTrivia:garbageBeforePlatform:platform:garbageBetweenPlatformAndVersion:version:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePlatform",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["platform",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenPlatformAndVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,249],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePlatform",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["platform",1],[": ",17],["String",18],[", ",17],["garbageBetweenPlatformAndVersion",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElement","init(leadingTrivia:garbageBeforeLabel:label:garbageBetweenLabelAndColon:colon:garbageBetweenColonAndClosure:closure:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18,221],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndClosure",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18],[")",17]],"d":"Creates a `MultipleTrailingClosureElement` using the provided parameters.\n- Parameters:\n  - garbageBeforeLabel: \n  - label: \n  - garbageBetweenLabelAndColon: \n  - colon: \n  - garbageBetweenColonAndClosure: \n  - closure: "},{"p":["ImplicitlyUnwrappedOptionalType","init(leadingTrivia:garbageBeforeWrappedType:wrappedType:garbageBetweenWrappedTypeAndExclamationMark:exclamationMark:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWrappedType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenWrappedTypeAndExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWrappedType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenWrappedTypeAndExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ImplicitlyUnwrappedOptionalType` using the provided parameters.\n- Parameters:\n  - garbageBeforeWrappedType: \n  - wrappedType: \n  - garbageBetweenWrappedTypeAndExclamationMark: \n  - exclamationMark: "},{"p":["DifferentiableAttributeArguments","init(leadingTrivia:garbageBeforeDiffKind:diffKind:garbageBetweenDiffKindAndDiffKindComma:diffKindComma:garbageBetweenDiffKindCommaAndDiffParams:diffParams:garbageBetweenDiffParamsAndDiffParamsComma:diffParamsComma:garbageBetweenDiffParamsCommaAndWhereClause:whereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDiffKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffKind",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDiffKindAndDiffKindComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDiffKindCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,425],["? = nil, ",17],["garbageBetweenDiffParamsAndDiffParamsComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDiffParamsCommaAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDiffKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDiffKindAndDiffKindComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDiffKindCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["garbageBetweenDiffParamsAndDiffParamsComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDiffParamsCommaAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `DifferentiableAttributeArguments` using the provided parameters.\n- Parameters:\n  - garbageBeforeDiffKind: \n  - diffKind: \n  - garbageBetweenDiffKindAndDiffKindComma: \n  - diffKindComma: The comma following the differentiability kind, if it exists.\n  - garbageBetweenDiffKindCommaAndDiffParams: \n  - diffParams: \n  - garbageBetweenDiffParamsAndDiffParamsComma: \n  - diffParamsComma: The comma following the differentiability parameters clause,if it exists.\n  - garbageBetweenDiffParamsCommaAndWhereClause: \n  - whereClause: "},{"p":["DifferentiableAttributeArguments","init(leadingTrivia:garbageBeforeDiffKind:diffKind:garbageBetweenDiffKindAndDiffKindComma:diffKindComma:garbageBetweenDiffKindCommaAndDiffParams:diffParams:garbageBetweenDiffParamsAndDiffParamsComma:diffParamsComma:garbageBetweenDiffParamsCommaAndWhereClause:whereClause:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDiffKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffKind",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenDiffKindAndDiffKindComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDiffKindCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,425],["? = nil, ",17],["garbageBetweenDiffParamsAndDiffParamsComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenDiffParamsCommaAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDiffKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffKind",1],[": ",17],["String",18],["?, ",17],["garbageBetweenDiffKindAndDiffKindComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDiffKindCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["garbageBetweenDiffParamsAndDiffParamsComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenDiffParamsCommaAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElementList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18,689],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18],[")",17]]},{"p":["MultipleTrailingClosureElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18,427],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18],["...)",17]],"o":3353},{"p":["MultipleTrailingClosureElementList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["])",17]],"d":"Creates a new `MultipleTrailingClosureElementList` by flattening the elements in `lists`"},{"p":["MultipleTrailingClosureElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMultipleTrailingClosureElement",18,427],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMultipleTrailingClosureElement",18],["])",17]],"d":"Creates a `MultipleTrailingClosureElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMultipleTrailingClosureElement`"},{"p":["DerivativeRegistrationAttributeArguments","init(leadingTrivia:garbageBeforeOfLabel:ofLabel:garbageBetweenOfLabelAndColon:colon:garbageBetweenColonAndOriginalDeclName:originalDeclName:garbageBetweenOriginalDeclNameAndPeriod:period:garbageBetweenPeriodAndAccessorKind:accessorKind:garbageBetweenAccessorKindAndComma:comma:garbageBetweenCommaAndDiffParams:diffParams:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOfLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ofLabel",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenOfLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndOriginalDeclName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,341],[", ",17],["garbageBetweenOriginalDeclNameAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenPeriodAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAccessorKindAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,425],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOfLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ofLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenOfLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndOriginalDeclName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["garbageBetweenOriginalDeclNameAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenPeriodAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAccessorKindAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"Creates a `DerivativeRegistrationAttributeArguments` using the provided parameters.\n- Parameters:\n  - garbageBeforeOfLabel: \n  - ofLabel: The \"of\" label.\n  - garbageBetweenOfLabelAndColon: \n  - colon: The colon separating the \"of\" label and the originaldeclaration name.\n  - garbageBetweenColonAndOriginalDeclName: \n  - originalDeclName: The referenced original declaration name.\n  - garbageBetweenOriginalDeclNameAndPeriod: \n  - period: The period separating the original declaration name and theaccessor name.\n  - garbageBetweenPeriodAndAccessorKind: \n  - accessorKind: The accessor name.\n  - garbageBetweenAccessorKindAndComma: \n  - comma: \n  - garbageBetweenCommaAndDiffParams: \n  - diffParams: "},{"p":["DerivativeRegistrationAttributeArguments","init(leadingTrivia:garbageBeforeOfLabel:ofLabel:garbageBetweenOfLabelAndColon:colon:garbageBetweenColonAndOriginalDeclName:originalDeclName:garbageBetweenOriginalDeclNameAndPeriod:period:garbageBetweenPeriodAndAccessorKind:accessorKind:garbageBetweenAccessorKindAndComma:comma:garbageBetweenCommaAndDiffParams:diffParams:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeOfLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ofLabel",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenOfLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`colon`, ",17],["garbageBetweenColonAndOriginalDeclName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,341],[", ",17],["garbageBetweenOriginalDeclNameAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenPeriodAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["accessorKind",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAccessorKindAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,425],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeOfLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ofLabel",1],[": ",17],["String",18],[", ",17],["garbageBetweenOfLabelAndColon",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenColonAndOriginalDeclName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["garbageBetweenOriginalDeclNameAndPeriod",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenPeriodAndAccessorKind",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["accessorKind",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAccessorKindAndComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCommaAndDiffParams",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AsExpr","init(leadingTrivia:garbageBeforeAsTok:asTok:garbageBetweenAsTokAndQuestionOrExclamationMark:questionOrExclamationMark:garbageBetweenQuestionOrExclamationMarkAndTypeName:typeName:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asTok",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`as`, ",17],["garbageBetweenAsTokAndQuestionOrExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenQuestionOrExclamationMarkAndTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asTok",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAsTokAndQuestionOrExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenQuestionOrExclamationMarkAndTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeAsTok: \n  - asTok: \n  - garbageBetweenAsTokAndQuestionOrExclamationMark: \n  - questionOrExclamationMark: \n  - garbageBetweenQuestionOrExclamationMarkAndTypeName: \n  - typeName: "},{"p":["DoStmt","init(leadingTrivia:garbageBeforeDoKeyword:doKeyword:garbageBetweenDoKeywordAndBody:garbageBetweenBodyAndCatchClauses:catchClauses:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDoKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`do`, ",17],["garbageBetweenDoKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenBodyAndCatchClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18,283],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDoKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDoKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenBodyAndCatchClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DoStmt","init(leadingTrivia:garbageBeforeDoKeyword:doKeyword:garbageBetweenDoKeywordAndBody:body:garbageBetweenBodyAndCatchClauses:catchClauses:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDoKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`do`, ",17],["garbageBetweenDoKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[", ",17],["garbageBetweenBodyAndCatchClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18,283],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDoKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDoKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["garbageBetweenBodyAndCatchClauses",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18],["?)",17]],"d":"Creates a `DoStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeDoKeyword: \n  - doKeyword: \n  - garbageBetweenDoKeywordAndBody: \n  - body: \n  - garbageBetweenBodyAndCatchClauses: \n  - catchClauses: "},{"p":["Format","init(indentWidth:)"],"f":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18,3350],[" = 4)",17]],"s":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18],[")",17]]},{"p":["IfStmt","init(leadingTrivia:garbageBeforeIfKeyword:ifKeyword:garbageBetweenIfKeywordAndConditions:conditions:garbageBetweenConditionsAndBody:garbageBetweenBodyAndElseKeyword:elseKeyword:garbageBetweenElseKeywordAndElseBody:elseBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIfKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`if`, ",17],["garbageBetweenIfKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenBodyAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenElseKeywordAndElseBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIfKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIfKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenBodyAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenElseKeywordAndElseBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IfStmt","init(leadingTrivia:garbageBeforeIfKeyword:ifKeyword:garbageBetweenIfKeywordAndConditions:conditions:garbageBetweenConditionsAndBody:body:garbageBetweenBodyAndElseKeyword:elseKeyword:garbageBetweenElseKeywordAndElseBody:elseBody:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIfKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`if`, ",17],["garbageBetweenIfKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[", ",17],["garbageBetweenBodyAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenElseKeywordAndElseBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIfKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIfKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["garbageBetweenBodyAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenElseKeywordAndElseBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `IfStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeIfKeyword: \n  - ifKeyword: \n  - garbageBetweenIfKeywordAndConditions: \n  - conditions: \n  - garbageBetweenConditionsAndBody: \n  - body: \n  - garbageBetweenBodyAndElseKeyword: \n  - elseKeyword: \n  - garbageBetweenElseKeywordAndElseBody: \n  - elseBody: "},{"p":["IfStmt","init(leadingTrivia:conditions:body:elseBody:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["body",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[", ",17],["elseBody",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],["? = { nil })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["body",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["elseBody",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that uses builder closures to express an\nif body, potentially with a second trailing builder closure for an else\nbody."},{"p":["IsExpr","init(leadingTrivia:garbageBeforeIsTok:isTok:garbageBetweenIsTokAndTypeName:typeName:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeIsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["isTok",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`is`, ",17],["garbageBetweenIsTokAndTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeIsTok",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["isTok",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIsTokAndTypeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeIsTok: \n  - isTok: \n  - garbageBetweenIsTokAndTypeName: \n  - typeName: "},{"p":["TryExpr","init(leadingTrivia:garbageBeforeTryKeyword:tryKeyword:garbageBetweenTryKeywordAndQuestionOrExclamationMark:questionOrExclamationMark:garbageBetweenQuestionOrExclamationMarkAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`try`, ",17],["garbageBetweenTryKeywordAndQuestionOrExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenQuestionOrExclamationMarkAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenTryKeywordAndQuestionOrExclamationMark",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenQuestionOrExclamationMarkAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TryExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeTryKeyword: \n  - tryKeyword: \n  - garbageBetweenTryKeywordAndQuestionOrExclamationMark: \n  - questionOrExclamationMark: \n  - garbageBetweenQuestionOrExclamationMarkAndExpression: \n  - expression: "},{"p":["CaseItem","init(leadingTrivia:garbageBeforePattern:pattern:garbageBetweenPatternAndWhereClause:whereClause:garbageBetweenWhereClauseAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,225],["? = nil, ",17],["garbageBetweenWhereClauseAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["garbageBetweenWhereClauseAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CaseItem` using the provided parameters.\n- Parameters:\n  - garbageBeforePattern: \n  - pattern: \n  - garbageBetweenPatternAndWhereClause: \n  - whereClause: \n  - garbageBetweenWhereClauseAndTrailingComma: \n  - trailingComma: "},{"p":["DeclName","init(leadingTrivia:garbageBeforeDeclBaseName:declBaseName:garbageBetweenDeclBaseNameAndDeclNameArguments:declNameArguments:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDeclBaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[", ",17],["garbageBetweenDeclBaseNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,324],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDeclBaseName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["garbageBetweenDeclBaseNameAndDeclNameArguments",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `DeclName` using the provided parameters.\n- Parameters:\n  - garbageBeforeDeclBaseName: \n  - declBaseName: The base name of the protocol's requirement.\n  - garbageBetweenDeclBaseNameAndDeclNameArguments: \n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["EnumDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndEnumKeyword:enumKeyword:garbageBetweenEnumKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameters:genericParameters:garbageBetweenGenericParametersAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndEnumKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`enum`, ",17],["garbageBetweenEnumKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParametersAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndEnumKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenEnumKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParametersAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndEnumKeyword:enumKeyword:garbageBetweenEnumKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameters:genericParameters:garbageBetweenGenericParametersAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndEnumKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`enum`, ",17],["garbageBetweenEnumKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParametersAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndEnumKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenEnumKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameters",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParametersAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `EnumDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: The attributes applied to the enum declaration.\n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: The declaration modifiers applied to the enum declaration.\n  - garbageBetweenModifiersAndEnumKeyword: \n  - enumKeyword: The `enum` keyword for this declaration.\n  - garbageBetweenEnumKeywordAndIdentifier: \n  - identifier: The name of this enum.\n  - garbageBetweenIdentifierAndGenericParameters: \n  - genericParameters: The generic parameters, if any, for this enum.\n  - garbageBetweenGenericParametersAndInheritanceClause: \n  - inheritanceClause: The inheritance clause describing conformances or rawvalues for this enum.\n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: The `where` clause that applies to the generic parameters ofthis enum.\n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: The cases and other members of this enum."},{"p":["ExprList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ExprList",18,700],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ExprList",18],[")",17]]},{"p":["ExprList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsExprBuildable",18,255],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsExprBuildable",18],["...)",17]],"o":3353},{"p":["ExprList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsExprList",18,187],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsExprList",18],["])",17]],"d":"Creates a new `ExprList` by flattening the elements in `lists`"},{"p":["ExprList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsExprBuildable",18,255],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsExprBuildable",18],["])",17]],"d":"Creates a `ExprList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsExprBuildable`"},{"p":["MoveExpr","init(leadingTrivia:garbageBeforeMoveKeyword:moveKeyword:garbageBetweenMoveKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeMoveKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["moveKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenMoveKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeMoveKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["moveKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenMoveKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `MoveExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeMoveKeyword: \n  - moveKeyword: \n  - garbageBetweenMoveKeywordAndExpression: \n  - expression: "},{"p":["MoveExpr","init(leadingTrivia:garbageBeforeMoveKeyword:moveKeyword:garbageBetweenMoveKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeMoveKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["moveKeyword",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenMoveKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeMoveKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["moveKeyword",1],[": ",17],["String",18],[", ",17],["garbageBetweenMoveKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjcName","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ObjcName",18,702],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["ObjcName",18],[")",17]]},{"p":["ObjcName","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjcNamePiece",18,259],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjcNamePiece",18],["...)",17]],"o":3353},{"p":["ObjcName","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsObjcName",18,189],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsObjcName",18],["])",17]],"d":"Creates a new `ObjcName` by flattening the elements in `lists`"},{"p":["ObjcName","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjcNamePiece",18,259],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjcNamePiece",18],["])",17]],"d":"Creates a `ObjcName` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjcNamePiece`"},{"p":["TypeExpr","init(leadingTrivia:garbageBeforeType:type:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeType: \n  - type: "},{"p":["ActorDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndActorKeyword:actorKeyword:garbageBetweenActorKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndActorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["actorKeyword",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenActorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndActorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["actorKeyword",1],[": ",17],["String",18],[", ",17],["garbageBetweenActorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ActorDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndActorKeyword:actorKeyword:garbageBetweenActorKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndActorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["actorKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenActorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndActorKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["actorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenActorKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ActorDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndActorKeyword: \n  - actorKeyword: \n  - garbageBetweenActorKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: "},{"p":["ArrayExpr","init(leadingTrivia:garbageBeforeLeftSquare:leftSquare:garbageBetweenLeftSquareAndElements:garbageBetweenElementsAndRightSquare:rightSquare:elementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenElementsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18,304],[" = { ArrayElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenElementsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ArrayExpr","init(leadingTrivia:garbageBeforeLeftSquare:leftSquare:garbageBetweenLeftSquareAndElements:elements:garbageBetweenElementsAndRightSquare:rightSquare:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18,304],[", ",17],["garbageBetweenElementsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18],[", ",17],["garbageBetweenElementsAndRightSquare",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftSquare: \n  - leftSquare: \n  - garbageBetweenLeftSquareAndElements: \n  - elements: \n  - garbageBetweenElementsAndRightSquare: \n  - rightSquare: "},{"p":["ArrayType","init(leadingTrivia:garbageBeforeLeftSquareBracket:leftSquareBracket:garbageBetweenLeftSquareBracketAndElementType:elementType:garbageBetweenElementTypeAndRightSquareBracket:rightSquareBracket:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftSquareBracket`, ",17],["garbageBetweenLeftSquareBracketAndElementType",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18,266],[", ",17],["garbageBetweenElementTypeAndRightSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftSquareBracketAndElementType",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["garbageBetweenElementTypeAndRightSquareBracket",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayType` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftSquareBracket: \n  - leftSquareBracket: \n  - garbageBetweenLeftSquareBracketAndElementType: \n  - elementType: \n  - garbageBetweenElementTypeAndRightSquareBracket: \n  - rightSquareBracket: "},{"p":["ArrowExpr","init(leadingTrivia:garbageBeforeAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsToken:throwsToken:garbageBetweenThrowsTokenAndArrowToken:arrowToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAsyncKeywordAndThrowsToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsTokenAndArrowToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsTokenAndArrowToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrowExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeAsyncKeyword: \n  - asyncKeyword: \n  - garbageBetweenAsyncKeywordAndThrowsToken: \n  - throwsToken: \n  - garbageBetweenThrowsTokenAndArrowToken: \n  - arrowToken: "},{"p":["ArrowExpr","init(leadingTrivia:garbageBeforeAsyncKeyword:asyncKeyword:garbageBetweenAsyncKeywordAndThrowsToken:throwsToken:garbageBetweenThrowsTokenAndArrowToken:arrowToken:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenThrowsTokenAndArrowToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAsyncKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAsyncKeywordAndThrowsToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenThrowsTokenAndArrowToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["Attribute","init(leadingTrivia:garbageBeforeAtSignToken:atSignToken:garbageBetweenAtSignTokenAndAttributeName:attributeName:garbageBetweenAttributeNameAndLeftParen:leftParen:garbageBetweenLeftParenAndArgument:argument:garbageBetweenArgumentAndRightParen:rightParen:garbageBetweenRightParenAndTokenList:tokenList:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`atSign`, ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributeName",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenLeftParenAndArgument",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],["? = nil, ",17],["garbageBetweenArgumentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenRightParenAndTokenList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18,207],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAtSignToken",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAtSignTokenAndAttributeName",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAttributeNameAndLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenLeftParenAndArgument",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["garbageBetweenArgumentAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenRightParenAndTokenList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"Creates a `Attribute` using the provided parameters.\n- Parameters:\n  - garbageBeforeAtSignToken: \n  - atSignToken: The `@` sign.\n  - garbageBetweenAtSignTokenAndAttributeName: \n  - attributeName: The name of the attribute.\n  - garbageBetweenAttributeNameAndLeftParen: \n  - leftParen: If the attribute takes arguments, the opening parenthesis.\n  - garbageBetweenLeftParenAndArgument: \n  - argument: The arguments of the attribute. In case the attributetakes multiple arguments, they are gather in theappropriate takes first.\n  - garbageBetweenArgumentAndRightParen: \n  - rightParen: If the attribute takes arguments, the closing parenthesis.\n  - garbageBetweenRightParenAndTokenList: \n  - tokenList: "},{"p":["AwaitExpr","init(leadingTrivia:garbageBeforeAwaitKeyword:awaitKeyword:garbageBetweenAwaitKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenAwaitKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAwaitKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `AwaitExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeAwaitKeyword: \n  - awaitKeyword: \n  - garbageBetweenAwaitKeywordAndExpression: \n  - expression: "},{"p":["AwaitExpr","init(leadingTrivia:garbageBeforeAwaitKeyword:awaitKeyword:garbageBetweenAwaitKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["awaitKeyword",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenAwaitKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["awaitKeyword",1],[": ",17],["String",18],[", ",17],["garbageBetweenAwaitKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BreakStmt","init(leadingTrivia:garbageBeforeBreakKeyword:breakKeyword:garbageBetweenBreakKeywordAndLabel:label:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBreakKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`break`, ",17],["garbageBetweenBreakKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["String",18,3346],["?)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBreakKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBreakKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BreakStmt","init(leadingTrivia:garbageBeforeBreakKeyword:breakKeyword:garbageBetweenBreakKeywordAndLabel:label:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeBreakKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`break`, ",17],["garbageBetweenBreakKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["label",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeBreakKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenBreakKeywordAndLabel",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `BreakStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeBreakKeyword: \n  - breakKeyword: \n  - garbageBetweenBreakKeywordAndLabel: \n  - label: "},{"p":["CatchItem","init(leadingTrivia:garbageBeforePattern:pattern:garbageBetweenPatternAndWhereClause:whereClause:garbageBetweenWhereClauseAndTrailingComma:trailingComma:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],["? = nil, ",17],["garbageBetweenPatternAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,225],["? = nil, ",17],["garbageBetweenWhereClauseAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforePattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],["?, ",17],["garbageBetweenPatternAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["garbageBetweenWhereClauseAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CatchItem` using the provided parameters.\n- Parameters:\n  - garbageBeforePattern: \n  - pattern: \n  - garbageBetweenPatternAndWhereClause: \n  - whereClause: \n  - garbageBetweenWhereClauseAndTrailingComma: \n  - trailingComma: "},{"p":["ClassDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndClassKeyword:classKeyword:garbageBetweenClassKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:membersBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`class`, ",17],["garbageBetweenClassKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["String",18,3346],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,276],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenClassKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["String",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClassDecl","init(leadingTrivia:garbageBeforeAttributes:attributes:garbageBetweenAttributesAndModifiers:modifiers:garbageBetweenModifiersAndClassKeyword:classKeyword:garbageBetweenClassKeywordAndIdentifier:identifier:garbageBetweenIdentifierAndGenericParameterClause:genericParameterClause:garbageBetweenGenericParameterClauseAndInheritanceClause:inheritanceClause:garbageBetweenInheritanceClauseAndGenericWhereClause:genericWhereClause:garbageBetweenGenericWhereClauseAndMembers:members:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,251],["? = nil, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,239],["? = nil, ",17],["garbageBetweenModifiersAndClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`class`, ",17],["garbageBetweenClassKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["identifier",1],[": ",17],["TokenSyntax",18,3270],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,398],["? = nil, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,391],["? = nil, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,350],["? = nil, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,294],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAttributes",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["garbageBetweenAttributesAndModifiers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["garbageBetweenModifiersAndClassKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenClassKeywordAndIdentifier",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenIdentifierAndGenericParameterClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["garbageBetweenGenericParameterClauseAndInheritanceClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["garbageBetweenInheritanceClauseAndGenericWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["garbageBetweenGenericWhereClauseAndMembers",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ClassDecl` using the provided parameters.\n- Parameters:\n  - garbageBeforeAttributes: \n  - attributes: \n  - garbageBetweenAttributesAndModifiers: \n  - modifiers: \n  - garbageBetweenModifiersAndClassKeyword: \n  - classKeyword: \n  - garbageBetweenClassKeywordAndIdentifier: \n  - identifier: \n  - garbageBetweenIdentifierAndGenericParameterClause: \n  - genericParameterClause: \n  - garbageBetweenGenericParameterClauseAndInheritanceClause: \n  - inheritanceClause: \n  - garbageBetweenInheritanceClauseAndGenericWhereClause: \n  - genericWhereClause: \n  - garbageBetweenGenericWhereClauseAndMembers: \n  - members: "},{"p":["CodeBlock","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndStatements:garbageBetweenStatementsAndRightBrace:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlock","init(leadingTrivia:garbageBeforeLeftBrace:leftBrace:garbageBetweenLeftBraceAndStatements:statements:garbageBetweenStatementsAndRightBrace:rightBrace:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftBrace`, ",17],["garbageBetweenLeftBraceAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,323],[", ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftBraceAndStatements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["garbageBetweenStatementsAndRightBrace",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `CodeBlock` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftBrace: \n  - leftBrace: \n  - garbageBetweenLeftBraceAndStatements: \n  - statements: \n  - garbageBetweenStatementsAndRightBrace: \n  - rightBrace: "},{"p":["DeferStmt","init(leadingTrivia:garbageBeforeDeferKeyword:deferKeyword:garbageBetweenDeferKeywordAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDeferKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`defer`, ",17],["garbageBetweenDeferKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDeferKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDeferKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeferStmt","init(leadingTrivia:garbageBeforeDeferKeyword:deferKeyword:garbageBetweenDeferKeywordAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeDeferKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`defer`, ",17],["garbageBetweenDeferKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeDeferKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenDeferKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `DeferStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeDeferKeyword: \n  - deferKeyword: \n  - garbageBetweenDeferKeywordAndBody: \n  - body: "},{"p":["ElseBlock","init(leadingTrivia:garbageBeforeElseKeyword:elseKeyword:garbageBetweenElseKeywordAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`else`, ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ElseBlock","init(leadingTrivia:garbageBeforeElseKeyword:elseKeyword:garbageBetweenElseKeywordAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`else`, ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ElseBlock` using the provided parameters.\n- Parameters:\n  - garbageBeforeElseKeyword: \n  - elseKeyword: \n  - garbageBetweenElseKeywordAndBody: \n  - body: "},{"p":["ForInStmt","init(leadingTrivia:garbageBeforeForKeyword:forKeyword:garbageBetweenForKeywordAndTryKeyword:tryKeyword:garbageBetweenTryKeywordAndAwaitKeyword:awaitKeyword:garbageBetweenAwaitKeywordAndCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndPattern:pattern:garbageBetweenPatternAndTypeAnnotation:typeAnnotation:garbageBetweenTypeAnnotationAndInKeyword:inKeyword:garbageBetweenInKeywordAndSequenceExpr:sequenceExpr:garbageBetweenSequenceExprAndWhereClause:whereClause:garbageBetweenWhereClauseAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeForKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`for`, ",17],["garbageBetweenForKeywordAndTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenTryKeywordAndAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["awaitKeyword",1],[": ",17],["String",18,3346],["?, ",17],["garbageBetweenAwaitKeywordAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["garbageBetweenTypeAnnotationAndInKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`in`, ",17],["garbageBetweenInKeywordAndSequenceExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenSequenceExprAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,225],["? = nil, ",17],["garbageBetweenWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeForKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenForKeywordAndTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenTryKeywordAndAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["awaitKeyword",1],[": ",17],["String",18],["?, ",17],["garbageBetweenAwaitKeywordAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["garbageBetweenTypeAnnotationAndInKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenInKeywordAndSequenceExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenSequenceExprAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["garbageBetweenWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ForInStmt","init(leadingTrivia:garbageBeforeForKeyword:forKeyword:garbageBetweenForKeywordAndTryKeyword:tryKeyword:garbageBetweenTryKeywordAndAwaitKeyword:awaitKeyword:garbageBetweenAwaitKeywordAndCaseKeyword:caseKeyword:garbageBetweenCaseKeywordAndPattern:pattern:garbageBetweenPatternAndTypeAnnotation:typeAnnotation:garbageBetweenTypeAnnotationAndInKeyword:inKeyword:garbageBetweenInKeywordAndSequenceExpr:sequenceExpr:garbageBetweenSequenceExprAndWhereClause:whereClause:garbageBetweenWhereClauseAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeForKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`for`, ",17],["garbageBetweenForKeywordAndTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenTryKeywordAndAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenAwaitKeywordAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,315],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,282],["? = nil, ",17],["garbageBetweenTypeAnnotationAndInKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`in`, ",17],["garbageBetweenInKeywordAndSequenceExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[", ",17],["garbageBetweenSequenceExprAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,225],["? = nil, ",17],["garbageBetweenWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeForKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenForKeywordAndTryKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenTryKeywordAndAwaitKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenAwaitKeywordAndCaseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenCaseKeywordAndPattern",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["garbageBetweenPatternAndTypeAnnotation",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["garbageBetweenTypeAnnotationAndInKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenInKeywordAndSequenceExpr",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["garbageBetweenSequenceExprAndWhereClause",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["garbageBetweenWhereClauseAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ForInStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeForKeyword: \n  - forKeyword: \n  - garbageBetweenForKeywordAndTryKeyword: \n  - tryKeyword: \n  - garbageBetweenTryKeywordAndAwaitKeyword: \n  - awaitKeyword: \n  - garbageBetweenAwaitKeywordAndCaseKeyword: \n  - caseKeyword: \n  - garbageBetweenCaseKeywordAndPattern: \n  - pattern: \n  - garbageBetweenPatternAndTypeAnnotation: \n  - typeAnnotation: \n  - garbageBetweenTypeAnnotationAndInKeyword: \n  - inKeyword: \n  - garbageBetweenInKeywordAndSequenceExpr: \n  - sequenceExpr: \n  - garbageBetweenSequenceExprAndWhereClause: \n  - whereClause: \n  - garbageBetweenWhereClauseAndBody: \n  - body: "},{"p":["GuardStmt","init(leadingTrivia:garbageBeforeGuardKeyword:guardKeyword:garbageBetweenGuardKeywordAndConditions:conditions:garbageBetweenConditionsAndElseKeyword:elseKeyword:garbageBetweenElseKeywordAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeGuardKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`guard`, ",17],["garbageBetweenGuardKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`else`, ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeGuardKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenGuardKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GuardStmt","init(leadingTrivia:garbageBeforeGuardKeyword:guardKeyword:garbageBetweenGuardKeywordAndConditions:conditions:garbageBetweenConditionsAndElseKeyword:elseKeyword:garbageBetweenElseKeywordAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeGuardKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`guard`, ",17],["garbageBetweenGuardKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`else`, ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeGuardKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenGuardKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndElseKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenElseKeywordAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `GuardStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeGuardKeyword: \n  - guardKeyword: \n  - garbageBetweenGuardKeywordAndConditions: \n  - conditions: \n  - garbageBetweenConditionsAndElseKeyword: \n  - elseKeyword: \n  - garbageBetweenElseKeywordAndBody: \n  - body: "},{"p":["InOutExpr","init(leadingTrivia:garbageBeforeAmpersand:ampersand:garbageBetweenAmpersandAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeAmpersand",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["ampersand",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`prefixAmpersand`, ",17],["garbageBetweenAmpersandAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeAmpersand",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["ampersand",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenAmpersandAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InOutExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeAmpersand: \n  - ampersand: \n  - garbageBetweenAmpersandAndExpression: \n  - expression: "},{"p":["ThrowStmt","init(leadingTrivia:garbageBeforeThrowKeyword:throwKeyword:garbageBetweenThrowKeywordAndExpression:expression:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeThrowKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["throwKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`throw`, ",17],["garbageBetweenThrowKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,255],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeThrowKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["throwKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenThrowKeywordAndExpression",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ThrowStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeThrowKeyword: \n  - throwKeyword: \n  - garbageBetweenThrowKeywordAndExpression: \n  - expression: "},{"p":["TokenList","init(itemsBuilder:)"],"f":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TokenList",18,720],[")",17]],"s":[["init",10],["(",17],["itemsBuilder",1],[": () -> ",17],["TokenList",18],[")",17]]},{"p":["TokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,3270],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]],"o":3353},{"p":["TokenList","init(combining:)"],"f":[["init",10],["(",17],["combining",1],[" ",17],["lists",2],[": [",17],["ExpressibleAsTokenList",18,207],["])",17]],"s":[["init",10],["(",17],["combining",1],[": [",17],["ExpressibleAsTokenList",18],["])",17]],"d":"Creates a new `TokenList` by flattening the elements in `lists`"},{"p":["TokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,3270],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `TokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["TupleExpr","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElementList:elementList:garbageBetweenElementListAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[", ",17],["garbageBetweenElementListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["garbageBetweenElementListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleExpr` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndElementList: \n  - elementList: \n  - garbageBetweenElementListAndRightParen: \n  - rightParen: "},{"p":["TupleExpr","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElementList:garbageBetweenElementListAndRightParen:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenElementListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,379],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenElementListAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleType","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElements:elements:garbageBetweenElementsAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,380],[", ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElements",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["garbageBetweenElementsAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleType` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndElements: \n  - elements: \n  - garbageBetweenElementsAndRightParen: \n  - rightParen: "},{"p":["WhileStmt","init(leadingTrivia:garbageBeforeWhileKeyword:whileKeyword:garbageBetweenWhileKeywordAndConditions:conditions:garbageBetweenConditionsAndBody:bodyBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`while`, ",17],["garbageBetweenWhileKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,323],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhileKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["WhileStmt","init(leadingTrivia:garbageBeforeWhileKeyword:whileKeyword:garbageBetweenWhileKeywordAndConditions:conditions:garbageBetweenConditionsAndBody:body:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`while`, ",17],["garbageBetweenWhileKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,372],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,200],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeWhileKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenWhileKeywordAndConditions",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["garbageBetweenConditionsAndBody",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `WhileStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeWhileKeyword: \n  - whileKeyword: \n  - garbageBetweenWhileKeywordAndConditions: \n  - conditions: \n  - garbageBetweenConditionsAndBody: \n  - body: "},{"p":["YieldList","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElementList:elementList:garbageBetweenElementListAndTrailingComma:trailingComma:garbageBetweenTrailingCommaAndRightParen:rightParen:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18,187],[", ",17],["garbageBetweenElementListAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenTrailingCommaAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18],[", ",17],["garbageBetweenElementListAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenTrailingCommaAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `YieldList` using the provided parameters.\n- Parameters:\n  - garbageBeforeLeftParen: \n  - leftParen: \n  - garbageBetweenLeftParenAndElementList: \n  - elementList: \n  - garbageBetweenElementListAndTrailingComma: \n  - trailingComma: \n  - garbageBetweenTrailingCommaAndRightParen: \n  - rightParen: "},{"p":["YieldList","init(leadingTrivia:garbageBeforeLeftParen:leftParen:garbageBetweenLeftParenAndElementList:garbageBetweenElementListAndTrailingComma:trailingComma:garbageBetweenTrailingCommaAndRightParen:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`leftParen`, ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["garbageBetweenElementListAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,3270],["? = nil, ",17],["garbageBetweenTrailingCommaAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,187],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeLeftParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenLeftParenAndElementList",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["garbageBetweenElementListAndTrailingComma",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["garbageBetweenTrailingCommaAndRightParen",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["YieldStmt","init(leadingTrivia:garbageBeforeYieldKeyword:yieldKeyword:garbageBetweenYieldKeywordAndYields:yields:)"],"f":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],[" = [], ",17],["garbageBeforeYieldKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18,3270],[" = TokenSyntax.`yield`, ",17],["garbageBetweenYieldKeywordAndYields",1],[": ",17],["ExpressibleAsGarbageNodes",18,236],["? = nil, ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,165],[")",17]],"s":[["init",10],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["garbageBeforeYieldKeyword",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["garbageBetweenYieldKeywordAndYields",1],[": ",17],["ExpressibleAsGarbageNodes",18],["?, ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `YieldStmt` using the provided parameters.\n- Parameters:\n  - garbageBeforeYieldKeyword: \n  - yieldKeyword: \n  - garbageBetweenYieldKeywordAndYields: \n  - yields: "},{"p":["Format","indentWidth"],"f":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18,3350]],"s":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18]]},{"p":["AccessPathBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],["]) -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessPathBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessPathBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],["...) -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessPathBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],["?) -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessPathBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsAccessPath",18,213],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsAccessPath",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["AccessPathBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Expression",18,3093],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessPathBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessPathBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["FinalResult",18,3094]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessPathBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095],[") -> ",17],["AccessPathBuilder",18,432],[".",17],["Component",18,3095]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AccessorListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],["]) -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessorListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessorListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],["...) -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessorListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],["?) -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessorListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsAccessorList",18,227],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsAccessorList",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["AccessorListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Expression",18,3096],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessorListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessorListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["FinalResult",18,3097]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessorListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098],[") -> ",17],["AccessorListBuilder",18,433],[".",17],["Component",18,3098]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CaseItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],["]) -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CaseItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CaseItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],["...) -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CaseItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],["?) -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CaseItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsCaseItemList",18,229],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsCaseItemList",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["CaseItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Expression",18,3099],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CaseItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CaseItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["FinalResult",18,3100]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CaseItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101],[") -> ",17],["CaseItemListBuilder",18,434],[".",17],["Component",18,3101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GarbageNodesBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],["]) -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GarbageNodesBuilder",18],[".",17],["Component",18],["]) -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GarbageNodesBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],["...) -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GarbageNodesBuilder",18],[".",17],["Component",18],["...) -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GarbageNodesBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GarbageNodesBuilder",18],[".",17],["Component",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GarbageNodesBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GarbageNodesBuilder",18],[".",17],["Component",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GarbageNodesBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],["?) -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GarbageNodesBuilder",18],[".",17],["Component",18],["?) -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GarbageNodesBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsGarbageNodes",18,236],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsGarbageNodes",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["GarbageNodesBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Expression",18,3102],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GarbageNodesBuilder",18],[".",17],["Expression",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GarbageNodesBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["FinalResult",18,3103]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GarbageNodesBuilder",18],[".",17],["Component",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GarbageNodesBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104],[") -> ",17],["GarbageNodesBuilder",18,435],[".",17],["Component",18,3104]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GarbageNodesBuilder",18],[".",17],["Component",18],[") -> ",17],["GarbageNodesBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ModifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],["]) -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ModifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ModifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],["...) -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ModifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],["?) -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ModifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsModifierList",18,239],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsModifierList",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ModifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Expression",18,3105],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ModifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ModifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["FinalResult",18,3106]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ModifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107],[") -> ",17],["ModifierListBuilder",18,436],[".",17],["Component",18,3107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjCSelectorBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],["]) -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjCSelectorBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],["...) -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjCSelectorBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],["?) -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjCSelectorBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsObjCSelector",18,240],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsObjCSelector",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ObjCSelectorBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Expression",18,3108],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjCSelectorBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["FinalResult",18,3109]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjCSelectorBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110],[") -> ",17],["ObjCSelectorBuilder",18,437],[".",17],["Component",18,3110]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],["]) -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],["...) -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],["?) -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsAttributeList",18,251],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsAttributeList",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["AttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Expression",18,3111],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["FinalResult",18,3112]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113],[") -> ",17],["AttributeListBuilder",18,438],[".",17],["Component",18,3113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],["]) -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],["...) -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],["?) -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsCatchItemList",18,252],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsCatchItemList",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["CatchItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Expression",18,3114],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["FinalResult",18,3115]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116],[") -> ",17],["CatchItemListBuilder",18,439],[".",17],["Component",18,3116]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IdentifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],["]) -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IdentifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IdentifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],["...) -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IdentifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],["?) -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IdentifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsIdentifierList",18,274],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsIdentifierList",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["IdentifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Expression",18,3117],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IdentifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IdentifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["FinalResult",18,3118]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IdentifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119],[") -> ",17],["IdentifierListBuilder",18,440],[".",17],["Component",18,3119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MemberDeclListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],["]) -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MemberDeclListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],["...) -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MemberDeclListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],["?) -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MemberDeclListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsMemberDeclList",18,276],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsMemberDeclList",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["MemberDeclListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Expression",18,3120],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MemberDeclListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["FinalResult",18,3121]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MemberDeclListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122],[") -> ",17],["MemberDeclListBuilder",18,441],[".",17],["Component",18,3122]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SwitchCaseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],["]) -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SwitchCaseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],["...) -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SwitchCaseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],["?) -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SwitchCaseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsSwitchCaseList",18,281],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsSwitchCaseList",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["SwitchCaseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Expression",18,3123],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SwitchCaseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["FinalResult",18,3124]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SwitchCaseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125],[") -> ",17],["SwitchCaseListBuilder",18,442],[".",17],["Component",18,3125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],["]) -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],["...) -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],["?) -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsCatchClauseList",18,283],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsCatchClauseList",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["CatchClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Expression",18,3126],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["FinalResult",18,3127]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128],[") -> ",17],["CatchClauseListBuilder",18,443],[".",17],["Component",18,3128]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ArrayElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],["]) -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ArrayElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],["...) -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ArrayElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],["?) -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ArrayElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsArrayElementList",18,304],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsArrayElementList",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ArrayElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Expression",18,3129],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ArrayElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["FinalResult",18,3130]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ArrayElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131],[") -> ",17],["ArrayElementListBuilder",18,444],[".",17],["Component",18,3131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],["]) -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],["...) -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],["?) -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsClosureParamList",18,305],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsClosureParamList",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ClosureParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Expression",18,3132],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["FinalResult",18,3133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134],[") -> ",17],["ClosureParamListBuilder",18,445],[".",17],["Component",18,3134]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CodeBlockItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],["...) -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CodeBlockItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],["]) -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],["?) -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CodeBlockItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsCodeBlockItemList",18,323],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsCodeBlockItemList",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["CodeBlockItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Expression",18,3135],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CodeBlockItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["FinalResult",18,3136]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CodeBlockItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137],[") -> ",17],["CodeBlockItemListBuilder",18,446],[".",17],["Component",18,3137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["InheritedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],["]) -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["InheritedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],["...) -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["InheritedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],["?) -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["InheritedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsInheritedTypeList",18,333],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsInheritedTypeList",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["InheritedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Expression",18,3138],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["InheritedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["FinalResult",18,3139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["InheritedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140],[") -> ",17],["InheritedTypeListBuilder",18,447],[".",17],["Component",18,3140]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["NonEmptyTokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],["]) -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["NonEmptyTokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],["...) -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["NonEmptyTokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],["?) -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["NonEmptyTokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsNonEmptyTokenList",18,336],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsNonEmptyTokenList",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["NonEmptyTokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Expression",18,3141],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["NonEmptyTokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["FinalResult",18,3142]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["NonEmptyTokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143],[") -> ",17],["NonEmptyTokenListBuilder",18,448],[".",17],["Component",18,3143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IfConfigClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],["]) -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IfConfigClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],["...) -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IfConfigClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],["?) -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IfConfigClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsIfConfigClauseList",18,351],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsIfConfigClauseList",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["IfConfigClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Expression",18,3144],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IfConfigClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["FinalResult",18,3145]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IfConfigClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146],[") -> ",17],["IfConfigClauseListBuilder",18,449],[".",17],["Component",18,3146]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PatternBindingListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],["]) -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PatternBindingListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],["...) -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PatternBindingListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],["?) -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PatternBindingListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsPatternBindingList",18,354],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsPatternBindingList",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["PatternBindingListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Expression",18,3147],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PatternBindingListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["FinalResult",18,3148]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PatternBindingListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149],[") -> ",17],["PatternBindingListBuilder",18,450],[".",17],["Component",18,3149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["EnumCaseElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],["]) -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["EnumCaseElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],["...) -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["EnumCaseElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],["?) -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["EnumCaseElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsEnumCaseElementList",18,360],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsEnumCaseElementList",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["EnumCaseElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Expression",18,3150],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["EnumCaseElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["FinalResult",18,3151]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["EnumCaseElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152],[") -> ",17],["EnumCaseElementListBuilder",18,451],[".",17],["Component",18,3152]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],["]) -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],["...) -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],["?) -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsGenericArgumentList",18,361],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsGenericArgumentList",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["GenericArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Expression",18,3153],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["FinalResult",18,3154]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155],[") -> ",17],["GenericArgumentListBuilder",18,452],[".",17],["Component",18,3155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],["]) -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AvailabilitySpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],["...) -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AvailabilitySpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],["?) -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AvailabilitySpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsAvailabilitySpecList",18,370],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsAvailabilitySpecList",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["AvailabilitySpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Expression",18,3156],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AvailabilitySpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["Component",18,3158],[") -> ",17],["AvailabilitySpecListBuilder",18,453],[".",17],["FinalResult",18,3157]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],["]) -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ConditionElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],["...) -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ConditionElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],["?) -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ConditionElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsConditionElementList",18,372],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsConditionElementList",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ConditionElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Expression",18,3159],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ConditionElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["FinalResult",18,3160]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161],[") -> ",17],["ConditionElementListBuilder",18,454],[".",17],["Component",18,3161]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DeclNameArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],["]) -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DeclNameArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],["...) -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DeclNameArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],["?) -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DeclNameArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsDeclNameArgumentList",18,374],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsDeclNameArgumentList",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["DeclNameArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Expression",18,3162],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DeclNameArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["FinalResult",18,3163]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DeclNameArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164],[") -> ",17],["DeclNameArgumentListBuilder",18,455],[".",17],["Component",18,3164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],["]) -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],["...) -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],["?) -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsGenericParameterList",18,375],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsGenericParameterList",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["GenericParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Expression",18,3165],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["FinalResult",18,3166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167],[") -> ",17],["GenericParameterListBuilder",18,456],[".",17],["Component",18,3167]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleExprElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],["]) -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleExprElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],["...) -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleExprElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],["?) -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleExprElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsTupleExprElementList",18,379],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsTupleExprElementList",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["TupleExprElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Expression",18,3168],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleExprElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["FinalResult",18,3169]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleExprElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170],[") -> ",17],["TupleExprElementListBuilder",18,457],[".",17],["Component",18,3170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],["]) -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],["...) -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],["?) -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsTupleTypeElementList",18,380],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsTupleTypeElementList",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["TupleTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Expression",18,3171],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["FinalResult",18,3172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173],[") -> ",17],["TupleTypeElementListBuilder",18,458],[".",17],["Component",18,3173]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["BackDeployVersionListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],["]) -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["]) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["BackDeployVersionListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],["...) -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["...) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["BackDeployVersionListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["BackDeployVersionListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["BackDeployVersionListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],["?) -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],["?) -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["BackDeployVersionListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsBackDeployVersionList",18,382],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsBackDeployVersionList",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["BackDeployVersionListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Expression",18,3174],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Expression",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["BackDeployVersionListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["FinalResult",18,3175]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["BackDeployVersionListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176],[") -> ",17],["BackDeployVersionListBuilder",18,459],[".",17],["Component",18,3176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18],[") -> ",17],["BackDeployVersionListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DictionaryElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],["]) -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DictionaryElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],["...) -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DictionaryElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],["?) -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DictionaryElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsDictionaryElementList",18,383],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsDictionaryElementList",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["DictionaryElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Expression",18,3177],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DictionaryElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["FinalResult",18,3178]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DictionaryElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179],[") -> ",17],["DictionaryElementListBuilder",18,460],[".",17],["Component",18,3179]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["FunctionParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],["]) -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["FunctionParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],["...) -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["FunctionParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],["?) -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["FunctionParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsFunctionParameterList",18,386],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsFunctionParameterList",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["FunctionParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Expression",18,3180],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["FunctionParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["FinalResult",18,3181]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["FunctionParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182],[") -> ",17],["FunctionParameterListBuilder",18,461],[".",17],["Component",18,3182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["StringLiteralSegmentsBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],["]) -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["]) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["StringLiteralSegmentsBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],["...) -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["...) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["StringLiteralSegmentsBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],["?) -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["?) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["StringLiteralSegmentsBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsStringLiteralSegments",18,389],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsStringLiteralSegments",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["StringLiteralSegmentsBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Expression",18,3183],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Expression",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["StringLiteralSegmentsBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["FinalResult",18,3184]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["StringLiteralSegmentsBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185],[") -> ",17],["StringLiteralSegmentsBuilder",18,462],[".",17],["Component",18,3185]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureCaptureItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],["]) -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureCaptureItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],["...) -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureCaptureItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],["?) -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureCaptureItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsClosureCaptureItemList",18,394],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsClosureCaptureItemList",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ClosureCaptureItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Expression",18,3186],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureCaptureItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["FinalResult",18,3187]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureCaptureItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188],[") -> ",17],["ClosureCaptureItemListBuilder",18,463],[".",17],["Component",18,3188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericRequirementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],["]) -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericRequirementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],["...) -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericRequirementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],["?) -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericRequirementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsGenericRequirementList",18,399],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsGenericRequirementList",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["GenericRequirementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Expression",18,3189],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericRequirementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["FinalResult",18,3190]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericRequirementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191],[") -> ",17],["GenericRequirementListBuilder",18,464],[".",17],["Component",18,3191]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupNameListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],["]) -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],["...) -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupNameListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],["?) -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupNameListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18,404],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsPrecedenceGroupNameList",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["PrecedenceGroupNameListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Expression",18,3192],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupNameListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["FinalResult",18,3193]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupNameListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194],[") -> ",17],["PrecedenceGroupNameListBuilder",18,465],[".",17],["Component",18,3194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TuplePatternElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],["]) -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TuplePatternElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],["...) -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TuplePatternElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],["?) -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TuplePatternElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsTuplePatternElementList",18,406],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsTuplePatternElementList",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["TuplePatternElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Expression",18,3195],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TuplePatternElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["FinalResult",18,3196]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TuplePatternElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197],[") -> ",17],["TuplePatternElementListBuilder",18,466],[".",17],["Component",18,3197]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrimaryAssociatedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrimaryAssociatedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,412],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsPrimaryAssociatedTypeList",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["PrimaryAssociatedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Expression",18,3198],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrimaryAssociatedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["FinalResult",18,3199]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrimaryAssociatedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,467],[".",17],["Component",18,3200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CompositionTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],["]) -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CompositionTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],["...) -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CompositionTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],["?) -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CompositionTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsCompositionTypeElementList",18,413],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsCompositionTypeElementList",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["CompositionTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Expression",18,3201],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CompositionTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["FinalResult",18,3202]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CompositionTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203],[") -> ",17],["CompositionTypeElementListBuilder",18,468],[".",17],["Component",18,3203]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DifferentiabilityParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],["]) -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DifferentiabilityParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],["...) -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DifferentiabilityParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],["?) -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DifferentiabilityParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsDifferentiabilityParamList",18,414],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsDifferentiabilityParamList",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["DifferentiabilityParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Expression",18,3204],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DifferentiabilityParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["FinalResult",18,3205]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DifferentiabilityParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206],[") -> ",17],["DifferentiabilityParamListBuilder",18,469],[".",17],["Component",18,3206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SpecializeAttributeSpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SpecializeAttributeSpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsSpecializeAttributeSpecList",18,420],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsSpecializeAttributeSpecList",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["SpecializeAttributeSpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Expression",18,3207],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SpecializeAttributeSpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["FinalResult",18,3208]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SpecializeAttributeSpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,470],[".",17],["Component",18,3209]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupAttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupAttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,424],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["PrecedenceGroupAttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Expression",18,3210],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupAttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["FinalResult",18,3211]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupAttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,471],[".",17],["Component",18,3212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MultipleTrailingClosureElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MultipleTrailingClosureElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,430],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsMultipleTrailingClosureElementList",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["MultipleTrailingClosureElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Expression",18,3213],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MultipleTrailingClosureElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["FinalResult",18,3214]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MultipleTrailingClosureElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,472],[".",17],["Component",18,3215]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExprListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],["]) -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ExprListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ExprListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],["...) -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ExprListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],[") -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],[") -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],["?) -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ExprListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsExprList",18,187],[") -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsExprList",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ExprListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Expression",18,3216],[") -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExprListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ExprListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],[") -> ",17],["ExprListBuilder",18,473],[".",17],["FinalResult",18,3217]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ExprListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218],[") -> ",17],["ExprListBuilder",18,473],[".",17],["Component",18,3218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjcNameBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],["]) -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjcNameBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjcNameBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],["...) -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjcNameBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],["?) -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjcNameBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsObjcName",18,189],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsObjcName",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["ObjcNameBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Expression",18,3219],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjcNameBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjcNameBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["FinalResult",18,3220]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjcNameBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221],[") -> ",17],["ObjcNameBuilder",18,474],[".",17],["Component",18,3221]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],["]) -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],["...) -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],[") -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],[") -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],["?) -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExpressibleAsTokenList",18,207],[") -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExpressibleAsTokenList",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Add all the elements of `expression` to this result builder, effectively flattening them."},{"p":["TokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Expression",18,3222],[") -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],[") -> ",17],["TokenListBuilder",18,475],[".",17],["FinalResult",18,3223]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224],[") -> ",17],["TokenListBuilder",18,475],[".",17],["Component",18,3224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExpressibleAsSyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSyntaxBuildable","createGarbageNodes()"],"f":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18,499]],"s":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18]],"d":"Conformance to `ExpressibleAsGarbageNodes`"},{"p":["ExpressibleAsSyntaxBuildable","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,515]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`"},{"p":["ExpressibleAsSyntaxBuildable","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,541]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`"},{"p":["ExpressibleAsSyntaxBuildable","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,648]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`"},{"p":["ExpressibleAsSyntaxBuildable","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,679]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`"},{"p":["ExpressibleAsSyntaxBuildable","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`"},{"p":["ExpressibleAsAsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,514]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]]},{"p":["ExpressibleAsAsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,691]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]]},{"p":["ExpressibleAsAsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["SyntaxListBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["Syntax",18,3275],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["SyntaxBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["SyntaxBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["Syntax",18,3275],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `SyntaxListBuildable`"},{"p":["SyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsSyntaxBuildable`."},{"p":["AccessPath","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["AccessPath","buildAccessPath(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["AccessPathSyntax",18,3225]],"s":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessPathSyntax",18]]},{"p":["AccessPath","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPath` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,476]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`","o":2424},{"p":["ImportDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["ImportDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImportDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ImportDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["ImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,477]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]],"d":"Conformance to `ExpressibleAsImportDecl`.","o":2425},{"p":["ReturnStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["ReturnStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ReturnStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["ReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,478]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]],"d":"Conformance to `ExpressibleAsReturnStmt`.","o":2427},{"p":["SourceFile","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["SourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SourceFile` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,479]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]],"d":"Conformance to `ExpressibleAsSourceFile`.","o":2429},{"p":["StructDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["StructDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StructDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["StructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`StructDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["StructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,480]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]],"d":"Conformance to `ExpressibleAsStructDecl`.","o":2431},{"p":["SwitchCase","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["SwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCase` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,481]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]],"d":"Conformance to `ExpressibleAsSwitchCase`.","o":2433},{"p":["SwitchStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["SwitchStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`SwitchStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["SwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,482]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]],"d":"Conformance to `ExpressibleAsSwitchStmt`.","o":2435},{"p":["CatchClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,483]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]],"d":"Conformance to `ExpressibleAsCatchClause`.","o":2454},{"p":["ClosureExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ClosureExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ClosureExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,484]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]],"d":"Conformance to `ExpressibleAsClosureExpr`.","o":2457},{"p":["KeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["KeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["KeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["KeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,485]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathExpr`.","o":2459},{"p":["LabeledStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["LabeledStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`LabeledStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["LabeledStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`LabeledStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["LabeledStmt","createLabeledStmt()"],"f":[["func",12],[" ",17],["createLabeledStmt",7],["() -> ",17],["LabeledStmt",18,486]],"s":[["func",12],[" ",17],["createLabeledStmt",7],["() -> ",17],["LabeledStmt",18]],"d":"Conformance to `ExpressibleAsLabeledStmt`.","o":2461},{"p":["TernaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["TernaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TernaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TernaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["TernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,487]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]],"d":"Conformance to `ExpressibleAsTernaryExpr`.","o":2463},{"p":["WhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["WhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["WhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,488]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]],"d":"Conformance to `ExpressibleAsWhereClause`.","o":2465},{"p":["AccessorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["AccessorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AccessorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["AccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,489]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]],"d":"Conformance to `ExpressibleAsAccessorDecl`.","o":2476},{"p":["AccessorList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["AccessorList","buildAccessorList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["AccessorListSyntax",18,3226]],"s":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessorListSyntax",18]]},{"p":["AccessorList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,490]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`","o":2479},{"p":["ArrayElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,491]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]],"d":"Conformance to `ExpressibleAsArrayElement`.","o":2481},{"p":["ArrayElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["ArrayElement",18,491]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ArrayElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["CaseItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["CaseItemList","buildCaseItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["CaseItemListSyntax",18,3227]],"s":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CaseItemListSyntax",18]]},{"p":["CaseItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,492]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`","o":2484},{"p":["ClosureParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,493]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]],"d":"Conformance to `ExpressibleAsClosureParam`.","o":2485},{"p":["ClosureParam","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["ClosureParam",18,493]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ClosureParam",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ContinueStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["ContinueStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ContinueStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ContinueStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["ContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,494]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]],"d":"Conformance to `ExpressibleAsContinueStmt`.","o":2488},{"p":["DeclModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,495]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to `ExpressibleAsDeclModifier`.","o":2490},{"p":["EnumCaseDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["EnumCaseDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumCaseDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["EnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,496]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]],"d":"Conformance to `ExpressibleAsEnumCaseDecl`.","o":2493},{"p":["FunctionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["FunctionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`FunctionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["FunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,497]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]],"d":"Conformance to `ExpressibleAsFunctionDecl`.","o":2495},{"p":["FunctionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["FunctionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`FunctionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["FunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,498]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]],"d":"Conformance to `ExpressibleAsFunctionType`.","o":2497},{"p":["GarbageNodes","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["GarbageNodes","buildGarbageNodes(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGarbageNodes",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["GarbageNodesSyntax",18,3228]],"s":[["func",12],[" ",17],["buildGarbageNodes",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GarbageNodesSyntax",18]]},{"p":["GarbageNodes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GarbageNodes` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GarbageNodes","createGarbageNodes()"],"f":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18,499]],"s":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18]],"d":"Conformance to `ExpressibleAsGarbageNodes`","o":2499},{"p":["IfConfigDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["IfConfigDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`IfConfigDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["IfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,500]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]],"d":"Conformance to `ExpressibleAsIfConfigDecl`.","o":2500},{"p":["MetatypeType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["MetatypeType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MetatypeType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MetatypeType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["MetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,501]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]],"d":"Conformance to `ExpressibleAsMetatypeType`.","o":2502},{"p":["ModifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ModifierList","buildModifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ModifierListSyntax",18,3229]],"s":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ModifierListSyntax",18]]},{"p":["ModifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ModifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,502]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`","o":2504},{"p":["ObjCSelector","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ObjCSelector","buildObjCSelector(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ObjCSelectorSyntax",18,3230]],"s":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjCSelectorSyntax",18]]},{"p":["ObjCSelector","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelector` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,503]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`","o":2505},{"p":["OperatorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["OperatorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`OperatorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["OperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,504]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]],"d":"Conformance to `ExpressibleAsOperatorDecl`.","o":2506},{"p":["OptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["OptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`OptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["OptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,505]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]],"d":"Conformance to `ExpressibleAsOptionalType`.","o":2508},{"p":["ProtocolDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["ProtocolDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ProtocolDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ProtocolDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["ProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,506]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]],"d":"Conformance to `ExpressibleAsProtocolDecl`.","o":2510},{"p":["ReturnClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,507]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to `ExpressibleAsReturnClause`.","o":2512},{"p":["SequenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["SequenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SequenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SequenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["SequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,508]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]],"d":"Conformance to `ExpressibleAsSequenceExpr`.","o":2514},{"p":["SuperRefExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["SuperRefExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SuperRefExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SuperRefExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["SuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,509]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]],"d":"Conformance to `ExpressibleAsSuperRefExpr`.","o":2518},{"p":["TuplePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["TuplePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`TuplePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["TuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,510]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]],"d":"Conformance to `ExpressibleAsTuplePattern`.","o":2520},{"p":["VariableDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["VariableDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VariableDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["VariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`VariableDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["VariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,511]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]],"d":"Conformance to `ExpressibleAsVariableDecl`.","o":2522},{"p":["VersionTuple","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["VersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VersionTuple` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["VersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,512]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]],"d":"Conformance to `ExpressibleAsVersionTuple`.","o":2524},{"p":["AccessorBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,513]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to `ExpressibleAsAccessorBlock`.","o":2541},{"p":["AsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["AsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`AsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["AsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,514]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]],"d":"Conformance to `ExpressibleAsAsTypePattern`.","o":1628},{"p":["AttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["AttributeList","buildAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["AttributeListSyntax",18,3231]],"s":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AttributeListSyntax",18]]},{"p":["AttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,515]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`","o":2543},{"p":["CatchItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["CatchItemList","buildCatchItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["CatchItemListSyntax",18,3232]],"s":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchItemListSyntax",18]]},{"p":["CatchItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,516]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`","o":2544},{"p":["CodeBlockItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`.","o":2545},{"p":["DeclBuildable","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["DeclBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `DeclSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n- Returns: A new `Syntax` with the built `DeclSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["DeclBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["DeclSyntax",18,3266],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `DeclListBuildable`"},{"p":["DeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsDeclBuildable`."},{"p":["ExprBuildable","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["ExprBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `ExprSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n- Returns: A new `Syntax` with the built `ExprSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["ExprBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["ExprSyntax",18,3267],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `ExprListBuildable`"},{"p":["ExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsExprBuildable`."},{"p":["ExtensionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["ExtensionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExtensionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ExtensionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["ExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,518]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]],"d":"Conformance to `ExpressibleAsExtensionDecl`.","o":2555},{"p":["InheritedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["InheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,519]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]],"d":"Conformance to `ExpressibleAsInheritedType`.","o":2557},{"p":["InheritedType","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["InheritedType",18,519]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["InheritedType",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["IsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["IsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["IsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,520]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]],"d":"Conformance to `ExpressibleAsIsTypePattern`.","o":2560},{"p":["ObjcNamePiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcNamePiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,521]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]],"d":"Conformance to `ExpressibleAsObjcNamePiece`.","o":2562},{"p":["PoundFileExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundFileExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,522]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileExpr`.","o":2565},{"p":["PoundLineExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundLineExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundLineExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundLineExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,523]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]],"d":"Conformance to `ExpressibleAsPoundLineExpr`.","o":2567},{"p":["StmtBuildable","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["StmtBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `StmtSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n- Returns: A new `Syntax` with the built `StmtSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["StmtBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["StmtSyntax",18,3268],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `StmtListBuildable`"},{"p":["StmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsStmtBuildable`."},{"p":["StringSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["StringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["StringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,524]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]],"d":"Conformance to `ExpressibleAsStringSegment`.","o":2571},{"p":["SubscriptDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["SubscriptDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`SubscriptDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["SubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,525]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]],"d":"Conformance to `ExpressibleAsSubscriptDecl`.","o":2573},{"p":["SubscriptExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["SubscriptExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SubscriptExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["SubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,526]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]],"d":"Conformance to `ExpressibleAsSubscriptExpr`.","o":2575},{"p":["TypeBuildable","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["TypeBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `TypeSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n- Returns: A new `Syntax` with the built `TypeSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["TypeBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["TypeSyntax",18,3269],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `TypeListBuildable`"},{"p":["TypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsTypeBuildable`."},{"p":["TypealiasDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["TypealiasDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypealiasDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`TypealiasDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["TypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,527]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]],"d":"Conformance to `ExpressibleAsTypealiasDecl`.","o":2581},{"p":["AssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["AssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["AssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,528]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]],"d":"Conformance to `ExpressibleAsAssignmentExpr`.","o":2595},{"p":["AttributedType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["AttributedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributedType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`AttributedType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["AttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,529]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]],"d":"Conformance to `ExpressibleAsAttributedType`.","o":2597},{"p":["DictionaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["DictionaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DictionaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["DictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,530]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]],"d":"Conformance to `ExpressibleAsDictionaryExpr`.","o":2599},{"p":["DictionaryType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["DictionaryType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`DictionaryType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["DictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,531]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]],"d":"Conformance to `ExpressibleAsDictionaryType`.","o":2601},{"p":["ExpressionStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["ExpressionStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ExpressionStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["ExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,532]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]],"d":"Conformance to `ExpressibleAsExpressionStmt`.","o":2603},{"p":["IdentifierExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["IdentifierExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IdentifierExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["IdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,533]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to `ExpressibleAsIdentifierExpr`.","o":2605},{"p":["IdentifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["IdentifierList","buildIdentifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["IdentifierListSyntax",18,3233]],"s":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IdentifierListSyntax",18]]},{"p":["IdentifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,534]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]],"d":"Conformance to `ExpressibleAsIdentifierList`","o":2607},{"p":["IfConfigClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["IfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,535]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]],"d":"Conformance to `ExpressibleAsIfConfigClause`.","o":2608},{"p":["MemberDeclList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["MemberDeclList","buildMemberDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["MemberDeclListSyntax",18,3234]],"s":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MemberDeclListSyntax",18]]},{"p":["MemberDeclList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,536]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`","o":2611},{"p":["NilLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["NilLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NilLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["NilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`NilLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["NilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,537]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]],"d":"Conformance to `ExpressibleAsNilLiteralExpr`.","o":2613},{"p":["PatternBinding","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBinding` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,538]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]],"d":"Conformance to `ExpressibleAsPatternBinding`.","o":2615},{"p":["PatternBinding","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["PatternBinding",18,538]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["PatternBinding",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["PoundErrorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["PoundErrorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundErrorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundErrorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["PoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,539]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]],"d":"Conformance to `ExpressibleAsPoundErrorDecl`.","o":2618},{"p":["SpecializeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["SpecializeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SpecializeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["SpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,540]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]],"d":"Conformance to `ExpressibleAsSpecializeExpr`.","o":2620},{"p":["SwitchCaseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["SwitchCaseList","buildSwitchCaseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["SwitchCaseListSyntax",18,3235]],"s":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SwitchCaseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,541]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`","o":2622},{"p":["TypeAnnotation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeAnnotation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,542]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`.","o":2623},{"p":["CatchClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["CatchClauseList","buildCatchClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["CatchClauseListSyntax",18,3236]],"s":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchClauseListSyntax",18]]},{"p":["CatchClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,543]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`","o":2632},{"p":["CompositionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["CompositionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`CompositionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["CompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,544]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]],"d":"Conformance to `ExpressibleAsCompositionType`.","o":2633},{"p":["CustomAttribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CustomAttribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,545]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]],"d":"Conformance to `ExpressibleAsCustomAttribute`.","o":2635},{"p":["DeclarationStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["DeclarationStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclarationStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeclarationStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["DeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,546]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]],"d":"Conformance to `ExpressibleAsDeclarationStmt`.","o":2637},{"p":["EnumCaseElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["EnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,547]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]],"d":"Conformance to `ExpressibleAsEnumCaseElement`.","o":2639},{"p":["EnumCaseElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["EnumCaseElement",18,547]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["EnumCaseElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["EnumCasePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["EnumCasePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCasePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`EnumCasePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["EnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,548]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]],"d":"Conformance to `ExpressibleAsEnumCasePattern`.","o":2642},{"p":["FallthroughStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["FallthroughStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FallthroughStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`FallthroughStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["FallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,549]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]],"d":"Conformance to `ExpressibleAsFallthroughStmt`.","o":2644},{"p":["ForcedValueExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ForcedValueExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForcedValueExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ForcedValueExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,550]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]],"d":"Conformance to `ExpressibleAsForcedValueExpr`.","o":2646},{"p":["GenericArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,551]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]],"d":"Conformance to `ExpressibleAsGenericArgument`.","o":2648},{"p":["GenericArgument","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["GenericArgument",18,551]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericArgument",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["InitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["InitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`InitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["InitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,552]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]],"d":"Conformance to `ExpressibleAsInitializerDecl`.","o":2651},{"p":["KeyPathBaseExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["KeyPathBaseExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["KeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["KeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,553]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathBaseExpr`.","o":2653},{"p":["MemberDeclBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["MemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,554]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to `ExpressibleAsMemberDeclBlock`.","o":2655},{"p":["ObjcKeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ObjcKeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,555]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]],"d":"Conformance to `ExpressibleAsObjcKeyPathExpr`.","o":2657},{"p":["OptionalPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["OptionalPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`OptionalPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["OptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,556]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]],"d":"Conformance to `ExpressibleAsOptionalPattern`.","o":2659},{"p":["ParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,557]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]],"d":"Conformance to `ExpressibleAsParameterClause`.","o":2661},{"p":["PoundAssertStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["PoundAssertStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundAssertStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`PoundAssertStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["PoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,558]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]],"d":"Conformance to `ExpressibleAsPoundAssertStmt`.","o":2663},{"p":["PoundColumnExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundColumnExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundColumnExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundColumnExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,559]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]],"d":"Conformance to `ExpressibleAsPoundColumnExpr`.","o":2665},{"p":["PoundFileIDExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileIDExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,560]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileIDExpr`.","o":2667},{"p":["PoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileIDExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundFileIDExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["RepeatWhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["RepeatWhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RepeatWhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["RepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`RepeatWhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["RepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,561]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]],"d":"Conformance to `ExpressibleAsRepeatWhileStmt`.","o":2669},{"p":["SwitchCaseLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["SwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,562]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]],"d":"Conformance to `ExpressibleAsSwitchCaseLabel`.","o":2671},{"p":["WildcardPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["WildcardPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WildcardPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["WildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`WildcardPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["WildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,563]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]],"d":"Conformance to `ExpressibleAsWildcardPattern`.","o":2673},{"p":["ArrayElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ArrayElementList","buildArrayElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ArrayElementListSyntax",18,3237]],"s":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ArrayElementListSyntax",18]]},{"p":["ArrayElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,564]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`","o":2691},{"p":["ClosureParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ClosureParamList","buildClosureParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ClosureParamListSyntax",18,3238]],"s":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureParamListSyntax",18]]},{"p":["ClosureParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,565]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`","o":2693},{"p":["ClosureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,566]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]],"d":"Conformance to `ExpressibleAsClosureSignature`.","o":2694},{"p":["ConditionElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to `ExpressibleAsConditionElement`.","o":2696},{"p":["ConditionElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ConditionElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["DeclNameArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,568]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]],"d":"Conformance to `ExpressibleAsDeclNameArgument`.","o":2699},{"p":["FloatLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["FloatLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FloatLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FloatLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["FloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,569]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]],"d":"Conformance to `ExpressibleAsFloatLiteralExpr`.","o":2702},{"p":["FunctionCallExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["FunctionCallExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionCallExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FunctionCallExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["FunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,570]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]],"d":"Conformance to `ExpressibleAsFunctionCallExpr`.","o":2704},{"p":["FunctionDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["FunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,571]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]],"d":"Conformance to `ExpressibleAsFunctionDeclName`.","o":2706},{"p":["GenericParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,572]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]],"d":"Conformance to `ExpressibleAsGenericParameter`.","o":2708},{"p":["GenericParameter","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["GenericParameter",18,572]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericParameter",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["MemberAccessExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["MemberAccessExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberAccessExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`MemberAccessExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["MemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,573]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]],"d":"Conformance to `ExpressibleAsMemberAccessExpr`.","o":2711},{"p":["ObjcSelectorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ObjcSelectorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,574]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]],"d":"Conformance to `ExpressibleAsObjcSelectorExpr`.","o":2713},{"p":["PatternBuildable","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["PatternBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `PatternSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n- Returns: A new `Syntax` with the built `PatternSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["PatternBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> [",17],["PatternSyntax",18,3271],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil.\n\nSatisfies conformance to `PatternListBuildable`"},{"p":["PatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsPatternBuildable`."},{"p":["PostfixUnaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PostfixUnaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,575]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]],"d":"Conformance to `ExpressibleAsPostfixUnaryExpr`.","o":2716},{"p":["PoundWarningDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["PoundWarningDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundWarningDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundWarningDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["PoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,576]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]],"d":"Conformance to `ExpressibleAsPoundWarningDecl`.","o":2718},{"p":["RegexLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["RegexLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RegexLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["RegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`RegexLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["RegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,577]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]],"d":"Conformance to `ExpressibleAsRegexLiteralExpr`.","o":2720},{"p":["TupleExprElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,578]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to `ExpressibleAsTupleExprElement`.","o":2722},{"p":["TupleExprElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["TupleExprElement",18,578]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TupleExprElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["TupleTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,579]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]],"d":"Conformance to `ExpressibleAsTupleTypeElement`.","o":2725},{"p":["TupleTypeElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["TupleTypeElement",18,579]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TupleTypeElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["AccessorParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,580]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]],"d":"Conformance to `ExpressibleAsAccessorParameter`.","o":2731},{"p":["AvailabilityEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,581]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]],"d":"Conformance to `ExpressibleAsAvailabilityEntry`.","o":2733},{"p":["CodeBlockItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["CodeBlockItemList","buildCodeBlockItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["CodeBlockItemListSyntax",18,3239]],"s":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["CodeBlockItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,582]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`","o":2735},{"p":["DeclListBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["DeclSyntax",18,3266],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["DeclNameArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,583]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]],"d":"Conformance to `ExpressibleAsDeclNameArguments`.","o":2737},{"p":["DeinitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["DeinitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeinitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`DeinitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["DeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,584]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]],"d":"Conformance to `ExpressibleAsDeinitializerDecl`.","o":2739},{"p":["DictionaryElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,585]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]],"d":"Conformance to `ExpressibleAsDictionaryElement`.","o":2741},{"p":["DictionaryElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["DictionaryElement",18,585]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["DictionaryElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ExprListBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["ExprSyntax",18,3267],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["ExpressionPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["ExpressionPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ExpressionPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["ExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,586]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]],"d":"Conformance to `ExpressibleAsExpressionPattern`.","o":2744},{"p":["ExpressionSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,587]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]],"d":"Conformance to `ExpressibleAsExpressionSegment`.","o":2746},{"p":["FunctionParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["FunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,588]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]],"d":"Conformance to `ExpressibleAsFunctionParameter`.","o":2748},{"p":["FunctionParameter","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["FunctionParameter",18,588]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["FunctionParameter",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["FunctionSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["FunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,589]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]],"d":"Conformance to `ExpressibleAsFunctionSignature`.","o":2751},{"p":["IdentifierPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["IdentifierPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IdentifierPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["IdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,590]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]],"d":"Conformance to `ExpressibleAsIdentifierPattern`.","o":2753},{"p":["InfixOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["InfixOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InfixOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InfixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`InfixOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["InfixOperatorExpr","createInfixOperatorExpr()"],"f":[["func",12],[" ",17],["createInfixOperatorExpr",7],["() -> ",17],["InfixOperatorExpr",18,591]],"s":[["func",12],[" ",17],["createInfixOperatorExpr",7],["() -> ",17],["InfixOperatorExpr",18]],"d":"Conformance to `ExpressibleAsInfixOperatorExpr`.","o":2755},{"p":["InheritedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["InheritedTypeList","buildInheritedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["InheritedTypeListSyntax",18,3240]],"s":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["InheritedTypeListSyntax",18]]},{"p":["InheritedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,592]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`","o":2757},{"p":["InitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["InitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,593]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]],"d":"Conformance to `ExpressibleAsInitializerClause`.","o":2758},{"p":["LayoutRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["LayoutRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`LayoutRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["LayoutRequirement","createLayoutRequirement()"],"f":[["func",12],[" ",17],["createLayoutRequirement",7],["() -> ",17],["LayoutRequirement",18,594]],"s":[["func",12],[" ",17],["createLayoutRequirement",7],["() -> ",17],["LayoutRequirement",18]],"d":"Conformance to `ExpressibleAsLayoutRequirement`.","o":2760},{"p":["NonEmptyTokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["NonEmptyTokenList","buildNonEmptyTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["NonEmptyTokenListSyntax",18,3241]],"s":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["NonEmptyTokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NonEmptyTokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["NonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,595]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to `ExpressibleAsNonEmptyTokenList`","o":2762},{"p":["ObjCSelectorPiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelectorPiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,596]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]],"d":"Conformance to `ExpressibleAsObjCSelectorPiece`.","o":2763},{"p":["ObjectLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ObjectLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,597]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]],"d":"Conformance to `ExpressibleAsObjectLiteralExpr`.","o":2766},{"p":["PoundFilePathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundFilePathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFilePathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFilePathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,598]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]],"d":"Conformance to `ExpressibleAsPoundFilePathExpr`.","o":2768},{"p":["PoundFunctionExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundFunctionExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFunctionExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFunctionExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,599]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]],"d":"Conformance to `ExpressibleAsPoundFunctionExpr`.","o":2770},{"p":["QualifiedDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["QualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`QualifiedDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["QualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,600]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]],"d":"Conformance to `ExpressibleAsQualifiedDeclName`.","o":2772},{"p":["StmtListBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["StmtSyntax",18,3268],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["StringLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["StringLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["StringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`StringLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["StringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,601]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]],"d":"Conformance to `ExpressibleAsStringLiteralExpr`.","o":2774},{"p":["TypeListBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["TypeSyntax",18,3269],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["AssociatedtypeDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["AssociatedtypeDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["AssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,602]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]],"d":"Conformance to `ExpressibleAsAssociatedtypeDecl`.","o":2779},{"p":["BinaryOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["BinaryOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["BinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,603]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to `ExpressibleAsBinaryOperatorExpr`.","o":2781},{"p":["BooleanLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["BooleanLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["BooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,604]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]],"d":"Conformance to `ExpressibleAsBooleanLiteralExpr`.","o":2783},{"p":["ClosureCaptureItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,605]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItem`.","o":2785},{"p":["ClosureCaptureItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["ClosureCaptureItem",18,605]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["ClosureCaptureItem",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["DeclModifierDetail","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DeclModifierDetail","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclModifierDetail` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclModifierDetail","createDeclModifierDetail()"],"f":[["func",12],[" ",17],["createDeclModifierDetail",7],["() -> ",17],["DeclModifierDetail",18,606]],"s":[["func",12],[" ",17],["createDeclModifierDetail",7],["() -> ",17],["DeclModifierDetail",18]],"d":"Conformance to `ExpressibleAsDeclModifierDetail`.","o":2788},{"p":["ElseIfContinuation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseIfContinuation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,607]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]],"d":"Conformance to `ExpressibleAsElseIfContinuation`.","o":2790},{"p":["GenericRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,608]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]],"d":"Conformance to `ExpressibleAsGenericRequirement`.","o":2792},{"p":["GenericRequirement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["GenericRequirement",18,608]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["GenericRequirement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["GenericWhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericWhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,609]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]],"d":"Conformance to `ExpressibleAsGenericWhereClause`.","o":2795},{"p":["IfConfigClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["IfConfigClauseList","buildIfConfigClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["IfConfigClauseListSyntax",18,3242]],"s":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["IfConfigClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,610]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`","o":2797},{"p":["IntegerLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["IntegerLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["IntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,611]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]],"d":"Conformance to `ExpressibleAsIntegerLiteralExpr`.","o":2798},{"p":["MemberDeclListItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["MemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclListItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,612]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to `ExpressibleAsMemberDeclListItem`.","o":2800},{"p":["PatternBindingList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["PatternBindingList","buildPatternBindingList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternBindingListSyntax",18,3243]],"s":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternBindingListSyntax",18]]},{"p":["PatternBindingList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBindingList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,613]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`","o":2803},{"p":["PoundDsohandleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PoundDsohandleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,614]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]],"d":"Conformance to `ExpressibleAsPoundDsohandleExpr`.","o":2804},{"p":["PrefixOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PrefixOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,615]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]],"d":"Conformance to `ExpressibleAsPrefixOperatorExpr`.","o":2806},{"p":["SwitchDefaultLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["SwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchDefaultLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,616]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]],"d":"Conformance to `ExpressibleAsSwitchDefaultLabel`.","o":2808},{"p":["AccessLevelModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessLevelModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,617]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]],"d":"Conformance to `ExpressibleAsAccessLevelModifier`.","o":2817},{"p":["AccessPathComponent","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPathComponent` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,618]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]],"d":"Conformance to `ExpressibleAsAccessPathComponent`.","o":2819},{"p":["EnumCaseElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["EnumCaseElementList","buildEnumCaseElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["EnumCaseElementListSyntax",18,3244]],"s":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["EnumCaseElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,619]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`","o":2822},{"p":["ExpressibleAsDoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,692]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]]},{"p":["ExpressibleAsDoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,694]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]]},{"p":["ExpressibleAsIfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,695]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]]},{"p":["ExpressibleAsIsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["GenericArgumentList","buildGenericArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["GenericArgumentListSyntax",18,3245]],"s":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericArgumentListSyntax",18]]},{"p":["GenericArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,620]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`","o":2823},{"p":["PostfixIfConfigExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["PostfixIfConfigExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["PostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,621]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]],"d":"Conformance to `ExpressibleAsPostfixIfConfigExpr`.","o":2824},{"p":["PoundSourceLocation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocation` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,622]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocation`.","o":2826},{"p":["PoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundSourceLocation` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["PoundSourceLocation","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["PrecedenceGroupDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["PrecedenceGroupDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["PrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,623]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupDecl`.","o":2828},{"p":["SameTypeRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["SameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SameTypeRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,624]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]],"d":"Conformance to `ExpressibleAsSameTypeRequirement`.","o":2830},{"p":["TargetFunctionEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TargetFunctionEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,625]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]],"d":"Conformance to `ExpressibleAsTargetFunctionEntry`.","o":2832},{"p":["TargetFunctionEntry","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["TargetFunctionEntry",18,625]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TargetFunctionEntry",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["TuplePatternElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,626]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]],"d":"Conformance to `ExpressibleAsTuplePatternElement`.","o":2834},{"p":["TuplePatternElement","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["TuplePatternElement",18,626]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["TuplePatternElement",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ValueBindingPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PatternSyntax",18,3271]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`.","o":2028},{"p":["ValueBindingPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ValueBindingPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ValueBindingPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2715},{"p":["ValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,627]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]],"d":"Conformance to `ExpressibleAsValueBindingPattern`.","o":2837},{"p":["AvailabilityArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,628]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityArgument`.","o":2839},{"p":["AvailabilitySpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["AvailabilitySpecList","buildAvailabilitySpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["AvailabilitySpecListSyntax",18,3246]],"s":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilitySpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilitySpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,629]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`","o":2842},{"p":["ClassRestrictionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["ClassRestrictionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassRestrictionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ClassRestrictionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["ClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,630]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]],"d":"Conformance to `ExpressibleAsClassRestrictionType`.","o":2843},{"p":["ConditionElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ConditionElementList","buildConditionElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ConditionElementListSyntax",18,3247]],"s":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ConditionElementListSyntax",18]]},{"p":["ConditionElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,631]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`","o":2845},{"p":["ConstrainedSugarType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["ConstrainedSugarType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConstrainedSugarType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ConstrainedSugarType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ConstrainedSugarType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["ConstrainedSugarType","createConstrainedSugarType()"],"f":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18,632]],"s":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18]],"d":"Conformance to `ExpressibleAsConstrainedSugarType`.","o":2846},{"p":["DeclNameArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["DeclNameArgumentList","buildDeclNameArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclNameArgumentListSyntax",18,3248]],"s":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["DeclNameArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,633]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`","o":2848},{"p":["ExpressibleAsTryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,696]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]]},{"p":["ExpressibleAsTryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["GenericParameterList","buildGenericParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["GenericParameterListSyntax",18,3249]],"s":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericParameterListSyntax",18]]},{"p":["GenericParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,634]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`","o":2849},{"p":["MemberTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["MemberTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["MemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,635]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsMemberTypeIdentifier`.","o":2850},{"p":["OptionalChainingExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["OptionalChainingExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalChainingExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`OptionalChainingExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["OptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,636]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]],"d":"Conformance to `ExpressibleAsOptionalChainingExpr`.","o":2852},{"p":["PatternListBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["?) -> [",17],["PatternSyntax",18,3271],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the last leading trivia if not nil."},{"p":["SimpleTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["SimpleTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["SimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,637]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsSimpleTypeIdentifier`.","o":2854},{"p":["TupleExprElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["TupleExprElementList","buildTupleExprElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TupleExprElementListSyntax",18,3250]],"s":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleExprElementListSyntax",18]]},{"p":["TupleExprElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,638]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`","o":2857},{"p":["TupleTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["TupleTypeElementList","buildTupleTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TupleTypeElementListSyntax",18,3251]],"s":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["TupleTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,639]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`","o":2858},{"p":["AvailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,640]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]],"d":"Conformance to `ExpressibleAsAvailabilityCondition`.","o":2859},{"p":["BackDeployVersionList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["BackDeployVersionList","buildBackDeployVersionList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildBackDeployVersionList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["BackDeployVersionListSyntax",18,3252]],"s":[["func",12],[" ",17],["buildBackDeployVersionList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["BackDeployVersionListSyntax",18]]},{"p":["BackDeployVersionList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployVersionList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BackDeployVersionList","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,641]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionList`","o":2861},{"p":["DictionaryElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["DictionaryElementList","buildDictionaryElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DictionaryElementListSyntax",18,3253]],"s":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DictionaryElementListSyntax",18]]},{"p":["DictionaryElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,642]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`","o":2862},{"p":["DiscardAssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["DiscardAssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["DiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,643]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]],"d":"Conformance to `ExpressibleAsDiscardAssignmentExpr`.","o":2863},{"p":["EditorPlaceholderExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["EditorPlaceholderExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["EditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,644]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]],"d":"Conformance to `ExpressibleAsEditorPlaceholderExpr`.","o":2865},{"p":["ExpressibleAsCaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,697]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]]},{"p":["ExpressibleAsCaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCaseItem","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,492]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`"},{"p":["ExpressibleAsDeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,698]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]]},{"p":["ExpressibleAsDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,699]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]]},{"p":["ExpressibleAsEnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,700]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]]},{"p":["ExpressibleAsExprList","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to ExpressibleAsConditionElement"},{"p":["ExpressibleAsMoveExpr","createMoveExpr()"],"f":[["func",12],[" ",17],["createMoveExpr",7],["() -> ",17],["MoveExpr",18,701]],"s":[["func",12],[" ",17],["createMoveExpr",7],["() -> ",17],["MoveExpr",18]]},{"p":["ExpressibleAsMoveExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]]},{"p":["ExpressibleAsTypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]]},{"p":["ExpressibleAsTypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["FunctionParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["FunctionParameterList","buildFunctionParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["FunctionParameterListSyntax",18,3254]],"s":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["FunctionParameterListSyntax",18]]},{"p":["FunctionParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["FunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,645]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`","o":2867},{"p":["GenericArgumentClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,646]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]],"d":"Conformance to `ExpressibleAsGenericArgumentClause`.","o":2868},{"p":["PrimaryAssociatedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,647]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedType`.","o":2870},{"p":["PrimaryAssociatedType","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["PrimaryAssociatedType",18,647]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["PrimaryAssociatedType",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["StringLiteralSegments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["StringLiteralSegments","buildStringLiteralSegments(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StringLiteralSegmentsSyntax",18,3255]],"s":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["StringLiteralSegments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralSegments` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["StringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,648]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`","o":2873},{"p":["SymbolicReferenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["SymbolicReferenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["SymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,649]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]],"d":"Conformance to `ExpressibleAsSymbolicReferenceExpr`.","o":2874},{"p":["TypeInheritanceClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInheritanceClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,650]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]],"d":"Conformance to `ExpressibleAsTypeInheritanceClause`.","o":2876},{"p":["TypeInitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["TypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,651]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]],"d":"Conformance to `ExpressibleAsTypeInitializerClause`.","o":2878},{"p":["UnresolvedPatternExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["UnresolvedPatternExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["UnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["UnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,652]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]],"d":"Conformance to `ExpressibleAsUnresolvedPatternExpr`.","o":2880},{"p":["ClosureCaptureItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ClosureCaptureItemList","buildClosureCaptureItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ClosureCaptureItemListSyntax",18,3256]],"s":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["ClosureCaptureItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,653]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`","o":2886},{"p":["CompositionTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,654]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElement`.","o":2887},{"p":["ConformanceRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConformanceRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,655]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]],"d":"Conformance to `ExpressibleAsConformanceRequirement`.","o":2890},{"p":["DifferentiabilityParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,656]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParam`.","o":2892},{"p":["DifferentiabilityParam","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["DifferentiabilityParam",18,656]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["DifferentiabilityParam",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ExpressibleAsActorDecl","createActorDecl()"],"f":[["func",12],[" ",17],["createActorDecl",7],["() -> ",17],["ActorDecl",18,704]],"s":[["func",12],[" ",17],["createActorDecl",7],["() -> ",17],["ActorDecl",18]]},{"p":["ExpressibleAsActorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,705]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]]},{"p":["ExpressibleAsArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,706]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]]},{"p":["ExpressibleAsArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,707]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]]},{"p":["ExpressibleAsArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,708]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]]},{"p":["ExpressibleAsAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,709]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]]},{"p":["ExpressibleAsAwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,710]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]]},{"p":["ExpressibleAsBreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,711]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]]},{"p":["ExpressibleAsCatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,516]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`"},{"p":["ExpressibleAsClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,712]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]]},{"p":["ExpressibleAsClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsCodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,713]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]]},{"p":["ExpressibleAsCodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,714]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]]},{"p":["ExpressibleAsDeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,715]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]]},{"p":["ExpressibleAsElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,716]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]]},{"p":["ExpressibleAsForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsGuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,717]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]]},{"p":["ExpressibleAsGuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsInOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,718]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]]},{"p":["ExpressibleAsInOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,719]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]]},{"p":["ExpressibleAsThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsTokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,720]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]]},{"p":["ExpressibleAsTupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,721]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]]},{"p":["ExpressibleAsTupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,722]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]]},{"p":["ExpressibleAsTupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsWhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,723]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]]},{"p":["ExpressibleAsWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsYieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,724]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]]},{"p":["ExpressibleAsYieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsYieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,725]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]]},{"p":["ExpressibleAsYieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["GenericParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["GenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,657]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]],"d":"Conformance to `ExpressibleAsGenericParameterClause`.","o":2895},{"p":["GenericRequirementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["GenericRequirementList","buildGenericRequirementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["GenericRequirementListSyntax",18,3257]],"s":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericRequirementListSyntax",18]]},{"p":["GenericRequirementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,658]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`","o":2897},{"p":["LabeledSpecializeEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["LabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`LabeledSpecializeEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["LabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,659]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]],"d":"Conformance to `ExpressibleAsLabeledSpecializeEntry`.","o":2898},{"p":["LabeledSpecializeEntry","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["LabeledSpecializeEntry",18,659]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["LabeledSpecializeEntry",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ClosureCaptureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,660]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]],"d":"Conformance to `ExpressibleAsClosureCaptureSignature`.","o":2900},{"p":["DifferentiabilityParams","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParams` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,661]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParams`.","o":2902},{"p":["ExpressibleAsAccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,476]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]]},{"p":["ExpressibleAsImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,477]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]]},{"p":["ExpressibleAsImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,478]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]]},{"p":["ExpressibleAsReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,479]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]]},{"p":["ExpressibleAsSourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,480]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]]},{"p":["ExpressibleAsStructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,481]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]]},{"p":["ExpressibleAsSwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,482]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]]},{"p":["ExpressibleAsSwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["PoundSourceLocationArgs","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocationArgs` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,662]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocationArgs`.","o":2904},{"p":["PrecedenceGroupNameList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["PrecedenceGroupNameList","buildPrecedenceGroupNameList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PrecedenceGroupNameListSyntax",18,3258]],"s":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["PrecedenceGroupNameList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,663]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`","o":2906},{"p":["PrecedenceGroupRelation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupRelation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupRelation`.","o":2907},{"p":["TuplePatternElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["TuplePatternElementList","buildTuplePatternElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TuplePatternElementListSyntax",18,3259]],"s":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["TuplePatternElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,665]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`","o":2909},{"p":["UnavailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["UnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnavailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["UnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,666]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]],"d":"Conformance to `ExpressibleAsUnavailabilityCondition`.","o":2910},{"p":["ExpressibleAsCatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,483]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]]},{"p":["ExpressibleAsCatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchClause","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,543]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`"},{"p":["ExpressibleAsClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,484]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]]},{"p":["ExpressibleAsClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsKeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,485]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]]},{"p":["ExpressibleAsKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsLabeledStmt","createLabeledStmt()"],"f":[["func",12],[" ",17],["createLabeledStmt",7],["() -> ",17],["LabeledStmt",18,486]],"s":[["func",12],[" ",17],["createLabeledStmt",7],["() -> ",17],["LabeledStmt",18]]},{"p":["ExpressibleAsLabeledStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsTernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,487]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]]},{"p":["ExpressibleAsTernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsWhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,488]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]]},{"p":["ExpressibleAsWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["MatchingPatternCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["MatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MatchingPatternCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,667]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]],"d":"Conformance to `ExpressibleAsMatchingPatternCondition`.","o":2912},{"p":["OptionalBindingCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["OptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalBindingCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,668]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]],"d":"Conformance to `ExpressibleAsOptionalBindingCondition`.","o":2915},{"p":["BackDeployVersionArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["BackDeployVersionArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployVersionArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BackDeployVersionArgument","createBackDeployVersionArgument()"],"f":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18,669]],"s":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionArgument`.","o":2918},{"p":["ExpressibleAsAccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,489]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]]},{"p":["ExpressibleAsAccessorDecl","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,490]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`"},{"p":["ExpressibleAsAccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsAccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,490]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]]},{"p":["ExpressibleAsAccessorList","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,513]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to ExpressibleAsAccessorBlock"},{"p":["ExpressibleAsArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,491]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]]},{"p":["ExpressibleAsArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsArrayElement","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,564]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`"},{"p":["ExpressibleAsCaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,492]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]]},{"p":["ExpressibleAsClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,493]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]]},{"p":["ExpressibleAsClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureParam","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,565]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`"},{"p":["ExpressibleAsContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,494]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]]},{"p":["ExpressibleAsContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,495]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]]},{"p":["ExpressibleAsDeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,502]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`"},{"p":["ExpressibleAsEnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,496]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]]},{"p":["ExpressibleAsEnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,497]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]]},{"p":["ExpressibleAsFunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,498]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]]},{"p":["ExpressibleAsFunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsGarbageNodes","createGarbageNodes()"],"f":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18,499]],"s":[["func",12],[" ",17],["createGarbageNodes",7],["() -> ",17],["GarbageNodes",18]]},{"p":["ExpressibleAsIfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,500]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]]},{"p":["ExpressibleAsIfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsMetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,501]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]]},{"p":["ExpressibleAsMetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,502]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]]},{"p":["ExpressibleAsObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,503]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]]},{"p":["ExpressibleAsOperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,504]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]]},{"p":["ExpressibleAsOperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsOptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,505]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]]},{"p":["ExpressibleAsOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,506]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]]},{"p":["ExpressibleAsProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,507]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]]},{"p":["ExpressibleAsReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,508]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]]},{"p":["ExpressibleAsSequenceExpr","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,578]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to ExpressibleAsTupleExprElement"},{"p":["ExpressibleAsSequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to ExpressibleAsCodeBlockItem"},{"p":["ExpressibleAsSuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,509]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]]},{"p":["ExpressibleAsSuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,510]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]]},{"p":["ExpressibleAsTuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsVariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,511]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]]},{"p":["ExpressibleAsVariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsVersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,512]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]]},{"p":["ExpressibleAsVersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["PrecedenceGroupAssignment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssignment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,670]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssignment`.","o":2921},{"p":["PrimaryAssociatedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["PrimaryAssociatedTypeList","buildPrimaryAssociatedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PrimaryAssociatedTypeListSyntax",18,3260]],"s":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["PrimaryAssociatedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,671]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`","o":2923},{"p":["CompositionTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["CompositionTypeElementList","buildCompositionTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["CompositionTypeElementListSyntax",18,3261]],"s":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["CompositionTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,672]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`","o":2924},{"p":["DifferentiabilityParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["DifferentiabilityParamList","buildDifferentiabilityParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DifferentiabilityParamListSyntax",18,3262]],"s":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["DifferentiabilityParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,673]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`","o":2925},{"p":["ExpressibleAsAccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,513]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]]},{"p":["ExpressibleAsAccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,515]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]]},{"p":["ExpressibleAsCatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,516]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]]},{"p":["ExpressibleAsCodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,582]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`"},{"p":["ExpressibleAsDeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDeclBuildable","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,612]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to ExpressibleAsMemberDeclListItem"},{"p":["ExpressibleAsDeclBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to ExpressibleAsCodeBlockItem"},{"p":["ExpressibleAsExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsExprBuildable","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,700]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`"},{"p":["ExpressibleAsExprBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to ExpressibleAsCodeBlockItem"},{"p":["ExpressibleAsExprBuildable","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,593]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]],"d":"Conformance to ExpressibleAsInitializerClause"},{"p":["ExpressibleAsExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,518]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]]},{"p":["ExpressibleAsExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,519]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]]},{"p":["ExpressibleAsInheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,592]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`"},{"p":["ExpressibleAsIsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,520]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]]},{"p":["ExpressibleAsIsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,521]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]]},{"p":["ExpressibleAsObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`"},{"p":["ExpressibleAsPoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,522]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]]},{"p":["ExpressibleAsPoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,523]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]]},{"p":["ExpressibleAsPoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,517]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to ExpressibleAsCodeBlockItem"},{"p":["ExpressibleAsStringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,524]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]]},{"p":["ExpressibleAsStringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,525]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]]},{"p":["ExpressibleAsSubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,526]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]]},{"p":["ExpressibleAsSubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,542]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to ExpressibleAsTypeAnnotation"},{"p":["ExpressibleAsTypeBuildable","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,651]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]],"d":"Conformance to ExpressibleAsTypeInitializerClause"},{"p":["ExpressibleAsTypeBuildable","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,507]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to ExpressibleAsReturnClause"},{"p":["ExpressibleAsTypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,527]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]]},{"p":["ExpressibleAsTypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["OperatorPrecedenceAndTypes","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["OperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorPrecedenceAndTypes` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["OperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,674]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]],"d":"Conformance to `ExpressibleAsOperatorPrecedenceAndTypes`.","o":2926},{"p":["PrecedenceGroupNameElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,675]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameElement`.","o":2928},{"p":["AvailabilityLabeledArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityLabeledArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,676]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityLabeledArgument`.","o":2934},{"p":["BackDeployAttributeSpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["BackDeployAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BackDeployAttributeSpecList` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BackDeployAttributeSpecList","createBackDeployAttributeSpecList()"],"f":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18,677]],"s":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsBackDeployAttributeSpecList`.","o":2936},{"p":["ExpressibleAsAssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,528]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]]},{"p":["ExpressibleAsAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,529]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]]},{"p":["ExpressibleAsAttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,530]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]]},{"p":["ExpressibleAsDictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsDictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,531]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]]},{"p":["ExpressibleAsDictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,532]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]]},{"p":["ExpressibleAsExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,533]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]]},{"p":["ExpressibleAsIdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsIdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,534]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,535]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]]},{"p":["ExpressibleAsIfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,610]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`"},{"p":["ExpressibleAsMemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,536]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]]},{"p":["ExpressibleAsMemberDeclList","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,554]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to ExpressibleAsMemberDeclBlock"},{"p":["ExpressibleAsNilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,537]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]]},{"p":["ExpressibleAsNilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,538]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]]},{"p":["ExpressibleAsPatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,613]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`"},{"p":["ExpressibleAsPoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,539]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]]},{"p":["ExpressibleAsPoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,540]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]]},{"p":["ExpressibleAsSpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,541]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]]},{"p":["ExpressibleAsTypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,542]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]]},{"p":["ExpressibleAsTypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["PrimaryAssociatedTypeClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrimaryAssociatedTypeClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedTypeClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrimaryAssociatedTypeClause","createPrimaryAssociatedTypeClause()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18,678]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeClause`.","o":2938},{"p":["SpecializeAttributeSpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["SpecializeAttributeSpecList","buildSpecializeAttributeSpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["SpecializeAttributeSpecListSyntax",18,3263]],"s":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SpecializeAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeAttributeSpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["SpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,679]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`","o":2940},{"p":["ExpressibleAsCatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,543]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]]},{"p":["ExpressibleAsCompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,544]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]]},{"p":["ExpressibleAsCompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsCustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,545]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]]},{"p":["ExpressibleAsCustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,546]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]]},{"p":["ExpressibleAsDeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,547]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]]},{"p":["ExpressibleAsEnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,619]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`"},{"p":["ExpressibleAsEnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,548]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]]},{"p":["ExpressibleAsEnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsFallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,549]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]]},{"p":["ExpressibleAsFallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,550]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]]},{"p":["ExpressibleAsForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,551]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]]},{"p":["ExpressibleAsGenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,620]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`"},{"p":["ExpressibleAsInitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,552]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]]},{"p":["ExpressibleAsInitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,553]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,554]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]]},{"p":["ExpressibleAsMemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,555]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsOptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,556]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]]},{"p":["ExpressibleAsOptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,557]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]]},{"p":["ExpressibleAsParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,558]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]]},{"p":["ExpressibleAsPoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsPoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,559]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]]},{"p":["ExpressibleAsPoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,560]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,561]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,562]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsWildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,563]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]]},{"p":["ExpressibleAsWildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ImplementsAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplementsAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,680]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]],"d":"Conformance to `ExpressibleAsImplementsAttributeArguments`.","o":2941},{"p":["NamedAttributeStringArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["NamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NamedAttributeStringArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["NamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,681]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]],"d":"Conformance to `ExpressibleAsNamedAttributeStringArgument`.","o":2943},{"p":["PrecedenceGroupAssociativity","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["PrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssociativity` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,682]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssociativity`.","o":2945},{"p":["PrecedenceGroupAttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["PrecedenceGroupAttributeList","buildPrecedenceGroupAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["PrecedenceGroupAttributeListSyntax",18,3264]],"s":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["PrecedenceGroupAttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["PrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`","o":2947},{"p":["DifferentiabilityParamsClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamsClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,684]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamsClause`.","o":2948},{"p":["ExpressibleAsArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,564]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]]},{"p":["ExpressibleAsArrayElementList","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,705]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]],"d":"Conformance to ExpressibleAsArrayExpr"},{"p":["ExpressibleAsClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,565]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]]},{"p":["ExpressibleAsClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,566]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]]},{"p":["ExpressibleAsClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]]},{"p":["ExpressibleAsConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,631]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`"},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,568]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]]},{"p":["ExpressibleAsDeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,633]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`"},{"p":["ExpressibleAsFloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,569]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]]},{"p":["ExpressibleAsFloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,570]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]]},{"p":["ExpressibleAsFunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,571]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]]},{"p":["ExpressibleAsFunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,572]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]]},{"p":["ExpressibleAsGenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,634]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`"},{"p":["ExpressibleAsMemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,573]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]]},{"p":["ExpressibleAsMemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,574]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,575]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,576]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]]},{"p":["ExpressibleAsPoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,577]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,578]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]]},{"p":["ExpressibleAsTupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,638]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`"},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,579]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]]},{"p":["ExpressibleAsTupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,639]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`"},{"p":["AvailabilityVersionRestriction","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["AvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityVersionRestriction` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,685]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]],"d":"Conformance to `ExpressibleAsAvailabilityVersionRestriction`.","o":2950},{"p":["ExpressibleAsAccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,580]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]]},{"p":["ExpressibleAsAccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,581]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]]},{"p":["ExpressibleAsAvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,582]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,713]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to ExpressibleAsCodeBlock"},{"p":["ExpressibleAsDeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,583]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]]},{"p":["ExpressibleAsDeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,584]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,585]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]]},{"p":["ExpressibleAsDictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,642]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`"},{"p":["ExpressibleAsExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,586]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]]},{"p":["ExpressibleAsExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,587]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]]},{"p":["ExpressibleAsExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,588]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]]},{"p":["ExpressibleAsFunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,645]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`"},{"p":["ExpressibleAsFunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,589]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]]},{"p":["ExpressibleAsFunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,590]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]]},{"p":["ExpressibleAsIdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsInfixOperatorExpr","createInfixOperatorExpr()"],"f":[["func",12],[" ",17],["createInfixOperatorExpr",7],["() -> ",17],["InfixOperatorExpr",18,591]],"s":[["func",12],[" ",17],["createInfixOperatorExpr",7],["() -> ",17],["InfixOperatorExpr",18]]},{"p":["ExpressibleAsInfixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsInheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,592]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]]},{"p":["ExpressibleAsInitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,593]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]]},{"p":["ExpressibleAsInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsLayoutRequirement","createLayoutRequirement()"],"f":[["func",12],[" ",17],["createLayoutRequirement",7],["() -> ",17],["LayoutRequirement",18,594]],"s":[["func",12],[" ",17],["createLayoutRequirement",7],["() -> ",17],["LayoutRequirement",18]]},{"p":["ExpressibleAsLayoutRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,595]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,596]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,503]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`"},{"p":["ExpressibleAsObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,597]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]]},{"p":["ExpressibleAsObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,598]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,599]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsQualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,600]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]]},{"p":["ExpressibleAsQualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,601]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]]},{"p":["ExpressibleAsStringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["MultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,686]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElement`.","o":2952},{"p":["ExpressibleAsAssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,602]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]]},{"p":["ExpressibleAsAssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,603]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,604]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,605]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]]},{"p":["ExpressibleAsClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,653]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`"},{"p":["ExpressibleAsDeclModifierDetail","createDeclModifierDetail()"],"f":[["func",12],[" ",17],["createDeclModifierDetail",7],["() -> ",17],["DeclModifierDetail",18,606]],"s":[["func",12],[" ",17],["createDeclModifierDetail",7],["() -> ",17],["DeclModifierDetail",18]]},{"p":["ExpressibleAsDeclModifierDetail","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,607]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]]},{"p":["ExpressibleAsElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,608]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]]},{"p":["ExpressibleAsGenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,658]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`"},{"p":["ExpressibleAsGenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,609]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]]},{"p":["ExpressibleAsGenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,610]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,611]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,612]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]]},{"p":["ExpressibleAsMemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,536]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`"},{"p":["ExpressibleAsPatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,613]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,614]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,615]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,616]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ImplicitlyUnwrappedOptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["ImplicitlyUnwrappedOptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["ImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,687]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]],"d":"Conformance to `ExpressibleAsImplicitlyUnwrappedOptionalType`.","o":2955},{"p":["DifferentiableAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiableAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,688]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDifferentiableAttributeArguments`.","o":2957},{"p":["ExpressibleAsAccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,617]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]]},{"p":["ExpressibleAsAccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,618]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]]},{"p":["ExpressibleAsAccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,476]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`"},{"p":["ExpressibleAsEnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,619]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]]},{"p":["ExpressibleAsGenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,620]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,621]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,622]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]]},{"p":["ExpressibleAsPoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,623]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,624]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,625]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,626]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]]},{"p":["ExpressibleAsTuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,665]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`"},{"p":["ExpressibleAsValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,627]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]]},{"p":["ExpressibleAsValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,174]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,628]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]]},{"p":["ExpressibleAsAvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,629]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`"},{"p":["ExpressibleAsAvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,629]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]]},{"p":["ExpressibleAsClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,630]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]]},{"p":["ExpressibleAsClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,631]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]]},{"p":["ExpressibleAsConstrainedSugarType","createConstrainedSugarType()"],"f":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18,632]],"s":[["func",12],[" ",17],["createConstrainedSugarType",7],["() -> ",17],["ConstrainedSugarType",18]]},{"p":["ExpressibleAsConstrainedSugarType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,633]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]]},{"p":["ExpressibleAsGenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,634]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,635]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,636]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,637]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to ExpressibleAsTypeExpr"},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,638]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]]},{"p":["ExpressibleAsTupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,639]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]]},{"p":["ExpressibleAsAvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,640]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]]},{"p":["ExpressibleAsAvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployVersionList","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,641]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]]},{"p":["ExpressibleAsDictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,642]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,643]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,644]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,645]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]]},{"p":["ExpressibleAsGenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,646]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]]},{"p":["ExpressibleAsGenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,647]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,671]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`"},{"p":["ExpressibleAsStringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,648]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,649]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,650]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,651]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]]},{"p":["ExpressibleAsTypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,652]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["MultipleTrailingClosureElementList","buildMultipleTrailingClosureElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["MultipleTrailingClosureElementListSyntax",18,3265]],"s":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["MultipleTrailingClosureElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,689]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`","o":2959},{"p":["ExpressibleAsClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,653]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,654]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]]},{"p":["ExpressibleAsCompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,672]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`"},{"p":["ExpressibleAsConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,655]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]]},{"p":["ExpressibleAsConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,656]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,673]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`"},{"p":["ExpressibleAsGenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,657]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]]},{"p":["ExpressibleAsGenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,658]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,659]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,660]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,661]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,662]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,663]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,664]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,665]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,666]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,667]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to ExpressibleAsConditionElement"},{"p":["ExpressibleAsOptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,668]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,567]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to ExpressibleAsConditionElement"},{"p":["ExpressibleAsBackDeployVersionArgument","createBackDeployVersionArgument()"],"f":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18,669]],"s":[["func",12],[" ",17],["createBackDeployVersionArgument",7],["() -> ",17],["BackDeployVersionArgument",18]]},{"p":["ExpressibleAsBackDeployVersionArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployVersionArgument","createBackDeployVersionList()"],"f":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18,641]],"s":[["func",12],[" ",17],["createBackDeployVersionList",7],["() -> ",17],["BackDeployVersionList",18]],"d":"Conformance to `ExpressibleAsBackDeployVersionList`"},{"p":["ExpressibleAsPrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,670]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]]},{"p":["ExpressibleAsPrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,671]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]]},{"p":["ExpressibleAsCompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,672]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]]},{"p":["ExpressibleAsDifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,673]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,674]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,675]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,663]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`"},{"p":["DerivativeRegistrationAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DerivativeRegistrationAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,690]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDerivativeRegistrationAttributeArguments`.","o":2960},{"p":["ExpressibleAsAvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,676]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]]},{"p":["ExpressibleAsAvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsBackDeployAttributeSpecList","createBackDeployAttributeSpecList()"],"f":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18,677]],"s":[["func",12],[" ",17],["createBackDeployAttributeSpecList",7],["() -> ",17],["BackDeployAttributeSpecList",18]]},{"p":["ExpressibleAsBackDeployAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause","createPrimaryAssociatedTypeClause()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18,678]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeClause",7],["() -> ",17],["PrimaryAssociatedTypeClause",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,679]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,680]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,681]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,682]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,683]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,684]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,685]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,686]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,689]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`"},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,687]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,688]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,689]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,690]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["AsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["AsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["AsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,691]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]],"d":"Conformance to `ExpressibleAsAsExpr`.","o":1630},{"p":["DoStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["DoStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DoStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DoStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["DoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,692]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]],"d":"Conformance to `ExpressibleAsDoStmt`.","o":2200},{"p":["IfStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["IfStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`IfStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["IfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,694]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]],"d":"Conformance to `ExpressibleAsIfStmt`.","o":2202},{"p":["IsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["IsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["IsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["IsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,695]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]],"d":"Conformance to `ExpressibleAsIsExpr`.","o":2204},{"p":["TryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["TryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["TryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,696]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]],"d":"Conformance to `ExpressibleAsTryExpr`.","o":2260},{"p":["CaseItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,697]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]],"d":"Conformance to `ExpressibleAsCaseItem`.","o":2306},{"p":["CaseItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["CaseItem",18,697]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["CaseItem",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["DeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["DeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,698]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]],"d":"Conformance to `ExpressibleAsDeclName`.","o":2309},{"p":["EnumDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["EnumDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["EnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["EnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,699]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]],"d":"Conformance to `ExpressibleAsEnumDecl`.","o":2311},{"p":["ExprList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ExprList","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprListSyntax",18,3272]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprListSyntax",18]]},{"p":["ExprList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExprList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,700]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`","o":2313},{"p":["MoveExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["MoveExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MoveExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["MoveExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`MoveExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["MoveExpr","createMoveExpr()"],"f":[["func",12],[" ",17],["createMoveExpr",7],["() -> ",17],["MoveExpr",18,701]],"s":[["func",12],[" ",17],["createMoveExpr",7],["() -> ",17],["MoveExpr",18]],"d":"Conformance to `ExpressibleAsMoveExpr`.","o":2315},{"p":["ObjcName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["ObjcName","buildObjcName(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ObjcNameSyntax",18,3273]],"s":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjcNameSyntax",18]]},{"p":["ObjcName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcName` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,702]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`","o":2317},{"p":["TypeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["TypeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TypeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["TypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,703]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to `ExpressibleAsTypeExpr`.","o":2318},{"p":["ActorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["ActorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ActorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ActorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ActorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["ActorDecl","createActorDecl()"],"f":[["func",12],[" ",17],["createActorDecl",7],["() -> ",17],["ActorDecl",18,704]],"s":[["func",12],[" ",17],["createActorDecl",7],["() -> ",17],["ActorDecl",18]],"d":"Conformance to `ExpressibleAsActorDecl`.","o":2363},{"p":["ArrayExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ArrayExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrayExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,705]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]],"d":"Conformance to `ExpressibleAsArrayExpr`.","o":2365},{"p":["ArrayType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["ArrayType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ArrayType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["ArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,706]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]],"d":"Conformance to `ExpressibleAsArrayType`.","o":2367},{"p":["ArrowExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["ArrowExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrowExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrowExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["ArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,707]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]],"d":"Conformance to `ExpressibleAsArrowExpr`.","o":2369},{"p":["Attribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["Attribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`Attribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["Attribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,708]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]],"d":"Conformance to `ExpressibleAsAttribute`.","o":2371},{"p":["AwaitExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["AwaitExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AwaitExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["AwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AwaitExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["AwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,709]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]],"d":"Conformance to `ExpressibleAsAwaitExpr`.","o":2373},{"p":["BreakStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["BreakStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BreakStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["BreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`BreakStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["BreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,710]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]],"d":"Conformance to `ExpressibleAsBreakStmt`.","o":2375},{"p":["CatchItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,711]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]],"d":"Conformance to `ExpressibleAsCatchItem`.","o":2377},{"p":["CatchItem","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["withComma",2],[": ",17],["Bool",18,3348],[") -> ",17],["CatchItem",18,711]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["Bool",18],[") -> ",17],["CatchItem",18]],"d":"Conformance to `HasTrailingComma`.","o":3342},{"p":["ClassDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["DeclSyntax",18,3266]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`.","o":1795},{"p":["ClassDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,170]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ClassDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2548},{"p":["ClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,712]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]],"d":"Conformance to `ExpressibleAsClassDecl`.","o":2380},{"p":["CodeBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["CodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["CodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,713]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to `ExpressibleAsCodeBlock`.","o":2382},{"p":["DeferStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["DeferStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeferStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["DeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeferStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["DeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,714]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]],"d":"Conformance to `ExpressibleAsDeferStmt`.","o":2384},{"p":["ElseBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["ElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,715]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]],"d":"Conformance to `ExpressibleAsElseBlock`.","o":2386},{"p":["ForInStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["ForInStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForInStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ForInStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["ForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,716]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]],"d":"Conformance to `ExpressibleAsForInStmt`.","o":2388},{"p":["GuardStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["GuardStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GuardStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["GuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`GuardStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["GuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,717]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]],"d":"Conformance to `ExpressibleAsGuardStmt`.","o":2390},{"p":["InOutExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["InOutExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InOutExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["InOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`InOutExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["InOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,718]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]],"d":"Conformance to `ExpressibleAsInOutExpr`.","o":2392},{"p":["ThrowStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["ThrowStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ThrowStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["ThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ThrowStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["ThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,719]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]],"d":"Conformance to `ExpressibleAsThrowStmt`.","o":2394},{"p":["TokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"o":1633},{"p":["TokenList","buildTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TokenListSyntax",18,3274]],"s":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TokenListSyntax",18]]},{"p":["TokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,720]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to `ExpressibleAsTokenList`","o":2396},{"p":["TupleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["ExprSyntax",18,3267]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`.","o":1799},{"p":["TupleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,171]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TupleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2551},{"p":["TupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,721]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]],"d":"Conformance to `ExpressibleAsTupleExpr`.","o":2397},{"p":["TupleType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["TypeSyntax",18,3269]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`.","o":1841},{"p":["TupleType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["TupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,173]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`TupleType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2577},{"p":["TupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,722]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]],"d":"Conformance to `ExpressibleAsTupleType`.","o":2399},{"p":["WhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["WhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["WhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`WhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["WhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,723]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]],"d":"Conformance to `ExpressibleAsWhileStmt`.","o":2401},{"p":["YieldList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["Syntax",18,3275]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`.","o":1633},{"p":["YieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldList` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["YieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,724]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]],"d":"Conformance to `ExpressibleAsYieldList`.","o":2403},{"p":["YieldStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,693],[", ",17],["leadingTrivia",1],[" ",17],["additionalLeadingTrivia",2],[": ",17],["Trivia",18,3341],["? = nil) -> ",17],["StmtSyntax",18,3268]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`.","o":1826},{"p":["YieldStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,169]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":1621},{"p":["YieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,172]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`YieldStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions.","o":2569},{"p":["YieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,725]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]],"d":"Conformance to `ExpressibleAsYieldStmt`.","o":2405},{"p":["AccessPathBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessPathComponent",18,359]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessPathBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessPath",18,476]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessPathBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessPathComponent",18,359],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AccessorListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessorDecl",18,226]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessorListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessorList",18,490]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessorListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessorDecl",18,226],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CaseItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCaseItem",18,184]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CaseItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CaseItemList",18,492]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CaseItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCaseItem",18,184],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GarbageNodesBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GarbageNodesBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GarbageNodes",18,499]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GarbageNodesBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ModifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclModifier",18,232]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ModifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ModifierList",18,502]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ModifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclModifier",18,232],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjCSelectorBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjCSelectorPiece",18,337]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjCSelectorBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjCSelector",18,503]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjCSelectorBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjCSelectorPiece",18,337],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AttributeList",18,515]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchItem",18,198]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchItemList",18,516]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchItem",18,198],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IdentifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3270]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IdentifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IdentifierList",18,534]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IdentifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3270],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MemberDeclListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMemberDeclListItem",18,353]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MemberDeclListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MemberDeclList",18,536]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MemberDeclListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMemberDeclListItem",18,353],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SwitchCaseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SwitchCaseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SwitchCaseList",18,541]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SwitchCaseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchClause",18,220]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchClauseList",18,543]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchClause",18,220],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ArrayElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsArrayElement",18,228]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ArrayElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ArrayElementList",18,564]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ArrayElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsArrayElement",18,228],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureParam",18,230]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureParamList",18,565]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureParam",18,230],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CodeBlockItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCodeBlockItem",18,253]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CodeBlockItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CodeBlockItemList",18,582]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CodeBlockItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCodeBlockItem",18,253],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["InheritedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsInheritedType",18,257]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["InheritedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["InheritedTypeList",18,592]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["InheritedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsInheritedType",18,257],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["NonEmptyTokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3270]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["NonEmptyTokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["NonEmptyTokenList",18,595]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["NonEmptyTokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3270],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IfConfigClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsIfConfigClause",18,275]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IfConfigClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IfConfigClauseList",18,610]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IfConfigClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsIfConfigClause",18,275],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PatternBindingListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPatternBinding",18,278]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PatternBindingListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PatternBindingList",18,613]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PatternBindingListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPatternBinding",18,278],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["EnumCaseElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsEnumCaseElement",18,287]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["EnumCaseElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["EnumCaseElementList",18,619]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["EnumCaseElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsEnumCaseElement",18,287],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericArgument",18,291]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericArgumentList",18,620]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericArgument",18,291],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AvailabilitySpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAvailabilityArgument",18,369]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AvailabilitySpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AvailabilitySpecList",18,629]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AvailabilitySpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAvailabilityArgument",18,369],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ConditionElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsConditionElement",18,307]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ConditionElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ConditionElementList",18,631]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ConditionElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsConditionElement",18,307],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DeclNameArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclNameArgument",18,308]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DeclNameArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DeclNameArgumentList",18,633]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DeclNameArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclNameArgument",18,308],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericParameter",18,312]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericParameterList",18,634]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericParameter",18,312],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleExprElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleExprElement",18,319]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleExprElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleExprElementList",18,638]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleExprElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleExprElement",18,319],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleTypeElement",18,320]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleTypeElementList",18,639]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleTypeElement",18,320],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["BackDeployVersionListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsBackDeployVersionArgument",18,410]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["BackDeployVersionListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["BackDeployVersionList",18,641]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["BackDeployVersionListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsBackDeployVersionArgument",18,410],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DictionaryElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDictionaryElement",18,326]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DictionaryElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DictionaryElementList",18,642]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DictionaryElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDictionaryElement",18,326],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["FunctionParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsFunctionParameter",18,329]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["FunctionParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["FunctionParameterList",18,645]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["FunctionParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsFunctionParameter",18,329],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["StringLiteralSegmentsBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["StringLiteralSegmentsBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["StringLiteralSegments",18,648]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["StringLiteralSegmentsBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureCaptureItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureCaptureItem",18,346]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureCaptureItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureCaptureItemList",18,653]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureCaptureItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureCaptureItem",18,346],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericRequirementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericRequirement",18,349]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericRequirementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericRequirementList",18,658]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericRequirementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericRequirement",18,349],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupNameListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrecedenceGroupNameElement",18,416]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupNameListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupNameList",18,663]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupNameListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrecedenceGroupNameElement",18,416],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TuplePatternElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTuplePatternElement",18,367]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TuplePatternElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TuplePatternElementList",18,665]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TuplePatternElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTuplePatternElement",18,367],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrimaryAssociatedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrimaryAssociatedType",18,388]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrimaryAssociatedTypeList",18,671]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrimaryAssociatedType",18,388],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CompositionTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCompositionTypeElement",18,395]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CompositionTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CompositionTypeElementList",18,672]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CompositionTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCompositionTypeElement",18,395],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DifferentiabilityParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDifferentiabilityParam",18,397]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DifferentiabilityParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DifferentiabilityParamList",18,673]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DifferentiabilityParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDifferentiabilityParam",18,397],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SpecializeAttributeSpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SpecializeAttributeSpecList",18,679]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupAttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,165]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupAttributeList",18,683]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,165],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MultipleTrailingClosureElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMultipleTrailingClosureElement",18,427]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MultipleTrailingClosureElementList",18,689]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMultipleTrailingClosureElement",18,427],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ExprListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsExprBuildable",18,255]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ExprListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ExprList",18,700]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ExprListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsExprBuildable",18,255],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjcNameBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjcNamePiece",18,259]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjcNameBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjcName",18,702]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjcNameBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjcNamePiece",18,259],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,3270]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TokenList",18,720]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,3270],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."}],"edges":{"conformer":[165,236,[],165,251,[],165,281,[],165,389,[],165,420,[],165,424,[],166,315,[],167,165,[],167,187,[],167,200,[],167,236,[],167,251,[],167,253,[],167,255,[],167,281,[],167,307,[],167,323,[],167,334,[],167,372,[],167,389,[],167,420,[],167,424,[],169,165,[],169,168,[],169,236,[],169,251,[],169,281,[],169,389,[],169,420,[],169,424,[],170,165,[],170,168,[],170,169,[],170,175,[],170,200,[],170,236,[],170,251,[],170,253,[],170,254,[],170,276,[],170,281,[],170,294,[],170,323,[],170,353,[],170,389,[],170,420,[],170,424,[],171,165,[],171,168,[],171,169,[],171,176,[],171,187,[],171,200,[],171,236,[],171,251,[],171,253,[],171,255,[],171,281,[],171,307,[],171,323,[],171,334,[],171,372,[],171,389,[],171,420,[],171,424,[],172,165,[],172,168,[],172,169,[],172,177,[],172,200,[],172,236,[],172,251,[],172,253,[],172,262,[],172,281,[],172,323,[],172,389,[],172,420,[],172,424,[],173,165,[],173,168,[],173,169,[],173,178,[],173,236,[],173,244,[],173,251,[],173,266,[],173,281,[],173,282,[],173,389,[],173,392,[],173,420,[],173,424,[],174,165,[],174,168,[],174,169,[],174,183,[],174,236,[],174,251,[],174,281,[],174,315,[],174,389,[],174,420,[],174,424,[],175,168,[],176,168,[],177,168,[],178,168,[],179,165,[],179,200,[],179,236,[],179,251,[],179,253,[],179,262,[],179,281,[],179,323,[],179,389,[],179,420,[],179,424,[],180,165,[],180,200,[],180,236,[],180,251,[],180,253,[],180,262,[],180,281,[],180,323,[],180,389,[],180,420,[],180,424,[],181,165,[],181,187,[],181,200,[],181,236,[],181,251,[],181,253,[],181,255,[],181,281,[],181,307,[],181,323,[],181,334,[],181,372,[],181,389,[],181,420,[],181,424,[],182,165,[],182,187,[],182,200,[],182,236,[],182,251,[],182,253,[],182,255,[],182,281,[],182,307,[],182,323,[],182,334,[],182,372,[],182,389,[],182,420,[],182,424,[],183,168,[],184,165,[],184,229,[],184,236,[],184,251,[],184,281,[],184,389,[],184,420,[],184,424,[],185,165,[],185,236,[],185,251,[],185,281,[],185,389,[],185,420,[],185,424,[],186,165,[],186,200,[],186,236,[],186,251,[],186,253,[],186,254,[],186,276,[],186,281,[],186,294,[],186,323,[],186,353,[],186,389,[],186,420,[],186,424,[],187,165,[],187,236,[],187,251,[],187,281,[],187,307,[],187,372,[],187,389,[],187,420,[],187,424,[],188,165,[],188,187,[],188,200,[],188,236,[],188,251,[],188,253,[],188,255,[],188,281,[],188,307,[],188,323,[],188,334,[],188,372,[],188,389,[],188,420,[],188,424,[],190,165,[],190,187,[],190,200,[],190,236,[],190,251,[],190,253,[],190,255,[],190,281,[],190,307,[],190,323,[],190,334,[],190,372,[],190,389,[],190,420,[],190,424,[],191,165,[],191,200,[],191,236,[],191,251,[],191,253,[],191,254,[],191,276,[],191,281,[],191,294,[],191,323,[],191,353,[],191,389,[],191,420,[],191,424,[],192,165,[],192,187,[],192,200,[],192,236,[],192,251,[],192,253,[],192,255,[],192,281,[],192,307,[],192,323,[],192,334,[],192,372,[],192,389,[],192,420,[],192,424,[],193,165,[],193,236,[],193,244,[],193,251,[],193,266,[],193,281,[],193,282,[],193,389,[],193,392,[],193,420,[],193,424,[],194,165,[],194,187,[],194,200,[],194,236,[],194,251,[],194,253,[],194,255,[],194,281,[],194,307,[],194,323,[],194,334,[],194,372,[],194,389,[],194,420,[],194,424,[],195,165,[],195,236,[],195,251,[],195,281,[],195,389,[],195,420,[],195,424,[],196,165,[],196,187,[],196,200,[],196,236,[],196,251,[],196,253,[],196,255,[],196,281,[],196,307,[],196,323,[],196,334,[],196,372,[],196,389,[],196,420,[],196,424,[],197,165,[],197,200,[],197,236,[],197,251,[],197,253,[],197,262,[],197,281,[],197,323,[],197,389,[],197,420,[],197,424,[],198,165,[],198,236,[],198,251,[],198,252,[],198,281,[],198,389,[],198,420,[],198,424,[],199,165,[],199,200,[],199,236,[],199,251,[],199,253,[],199,254,[],199,276,[],199,281,[],199,294,[],199,323,[],199,353,[],199,389,[],199,420,[],199,424,[],200,165,[],200,236,[],200,251,[],200,281,[],200,389,[],200,420,[],200,424,[],201,165,[],201,200,[],201,236,[],201,251,[],201,253,[],201,262,[],201,281,[],201,323,[],201,389,[],201,420,[],201,424,[],202,165,[],202,236,[],202,251,[],202,281,[],202,389,[],202,420,[],202,424,[],203,165,[],203,200,[],203,236,[],203,251,[],203,253,[],203,262,[],203,281,[],203,323,[],203,389,[],203,420,[],203,424,[],204,165,[],204,200,[],204,236,[],204,251,[],204,253,[],204,262,[],204,281,[],204,323,[],204,389,[],204,420,[],204,424,[],205,165,[],205,187,[],205,200,[],205,236,[],205,251,[],205,253,[],205,255,[],205,281,[],205,307,[],205,323,[],205,334,[],205,372,[],205,389,[],205,420,[],205,424,[],206,165,[],206,200,[],206,236,[],206,251,[],206,253,[],206,262,[],206,281,[],206,323,[],206,389,[],206,420,[],206,424,[],208,165,[],208,187,[],208,200,[],208,236,[],208,251,[],208,253,[],208,255,[],208,281,[],208,307,[],208,323,[],208,334,[],208,372,[],208,389,[],208,420,[],208,424,[],209,165,[],209,236,[],209,244,[],209,251,[],209,266,[],209,281,[],209,282,[],209,389,[],209,392,[],209,420,[],209,424,[],210,165,[],210,200,[],210,236,[],210,251,[],210,253,[],210,262,[],210,281,[],210,323,[],210,389,[],210,420,[],210,424,[],211,165,[],211,236,[],211,251,[],211,281,[],211,389,[],211,420,[],211,424,[],212,165,[],212,200,[],212,236,[],212,251,[],212,253,[],212,262,[],212,281,[],212,323,[],212,389,[],212,420,[],212,424,[],214,165,[],214,200,[],214,236,[],214,251,[],214,253,[],214,254,[],214,276,[],214,281,[],214,294,[],214,323,[],214,353,[],214,389,[],214,420,[],214,424,[],215,165,[],215,200,[],215,236,[],215,251,[],215,253,[],215,262,[],215,281,[],215,323,[],215,389,[],215,420,[],215,424,[],216,165,[],216,236,[],216,251,[],216,281,[],216,389,[],216,420,[],216,424,[],217,165,[],217,200,[],217,236,[],217,251,[],217,253,[],217,254,[],217,276,[],217,281,[],217,294,[],217,323,[],217,353,[],217,389,[],217,420,[],217,424,[],218,165,[],218,236,[],218,251,[],218,281,[],218,389,[],218,420,[],218,424,[],219,165,[],219,200,[],219,236,[],219,251,[],219,253,[],219,262,[],219,281,[],219,323,[],219,389,[],219,420,[],219,424,[],220,165,[],220,236,[],220,251,[],220,281,[],220,283,[],220,389,[],220,420,[],220,424,[],221,165,[],221,187,[],221,200,[],221,236,[],221,251,[],221,253,[],221,255,[],221,281,[],221,307,[],221,323,[],221,334,[],221,372,[],221,389,[],221,420,[],221,424,[],222,165,[],222,187,[],222,200,[],222,236,[],222,251,[],222,253,[],222,255,[],222,281,[],222,307,[],222,323,[],222,334,[],222,372,[],222,389,[],222,420,[],222,424,[],223,165,[],223,200,[],223,236,[],223,251,[],223,253,[],223,262,[],223,281,[],223,323,[],223,389,[],223,420,[],223,424,[],224,165,[],224,187,[],224,200,[],224,236,[],224,251,[],224,253,[],224,255,[],224,281,[],224,307,[],224,323,[],224,334,[],224,372,[],224,389,[],224,420,[],224,424,[],225,165,[],225,236,[],225,251,[],225,281,[],225,389,[],225,420,[],225,424,[],226,165,[],226,200,[],226,227,[],226,236,[],226,250,[],226,251,[],226,253,[],226,254,[],226,276,[],226,281,[],226,294,[],226,323,[],226,353,[],226,389,[],226,420,[],226,424,[],227,165,[],227,236,[],227,250,[],227,251,[],227,281,[],227,389,[],227,420,[],227,424,[],228,165,[],228,187,[],228,192,[],228,200,[],228,236,[],228,251,[],228,253,[],228,255,[],228,281,[],228,304,[],228,307,[],228,323,[],228,334,[],228,372,[],228,389,[],228,420,[],228,424,[],230,165,[],230,236,[],230,251,[],230,281,[],230,305,[],230,389,[],230,420,[],230,424,[],231,165,[],231,200,[],231,236,[],231,251,[],231,253,[],231,262,[],231,281,[],231,323,[],231,389,[],231,420,[],231,424,[],232,165,[],232,236,[],232,239,[],232,251,[],232,281,[],232,389,[],232,420,[],232,424,[],233,165,[],233,200,[],233,236,[],233,251,[],233,253,[],233,254,[],233,276,[],233,281,[],233,294,[],233,323,[],233,353,[],233,389,[],233,420,[],233,424,[],234,165,[],234,200,[],234,236,[],234,251,[],234,253,[],234,254,[],234,276,[],234,281,[],234,294,[],234,323,[],234,353,[],234,389,[],234,420,[],234,424,[],235,165,[],235,236,[],235,244,[],235,251,[],235,266,[],235,281,[],235,282,[],235,389,[],235,392,[],235,420,[],235,424,[],237,165,[],237,200,[],237,236,[],237,251,[],237,253,[],237,254,[],237,276,[],237,281,[],237,294,[],237,323,[],237,353,[],237,389,[],237,420,[],237,424,[],238,165,[],238,236,[],238,244,[],238,251,[],238,266,[],238,281,[],238,282,[],238,389,[],238,392,[],238,420,[],238,424,[],241,165,[],241,200,[],241,236,[],241,251,[],241,253,[],241,254,[],241,276,[],241,281,[],241,294,[],241,323,[],241,353,[],241,389,[],241,420,[],241,424,[],242,165,[],242,236,[],242,244,[],242,251,[],242,266,[],242,281,[],242,282,[],242,389,[],242,392,[],242,420,[],242,424,[],243,165,[],243,200,[],243,236,[],243,251,[],243,253,[],243,254,[],243,276,[],243,281,[],243,294,[],243,323,[],243,353,[],243,389,[],243,420,[],243,424,[],244,165,[],244,236,[],244,251,[],244,281,[],244,389,[],244,420,[],244,424,[],245,165,[],245,187,[],245,200,[],245,236,[],245,251,[],245,253,[],245,255,[],245,281,[],245,307,[],245,319,[],245,323,[],245,334,[],245,372,[],245,379,[],245,389,[],245,420,[],245,424,[],246,165,[],246,187,[],246,200,[],246,236,[],246,251,[],246,253,[],246,255,[],246,281,[],246,307,[],246,323,[],246,334,[],246,372,[],246,389,[],246,420,[],246,424,[],247,315,[],248,165,[],248,200,[],248,236,[],248,251,[],248,253,[],248,254,[],248,276,[],248,281,[],248,294,[],248,323,[],248,353,[],248,389,[],248,420,[],248,424,[],249,165,[],249,236,[],249,251,[],249,281,[],249,389,[],249,420,[],249,424,[],250,165,[],250,236,[],250,251,[],250,281,[],250,389,[],250,420,[],250,424,[],253,165,[],253,200,[],253,236,[],253,251,[],253,281,[],253,323,[],253,389,[],253,420,[],253,424,[],254,165,[],254,200,[],254,236,[],254,251,[],254,253,[],254,276,[],254,281,[],254,294,[],254,323,[],254,353,[],254,389,[],254,420,[],254,424,[],255,165,[],255,187,[],255,200,[],255,236,[],255,251,[],255,253,[],255,281,[],255,307,[],255,323,[],255,334,[],255,372,[],255,389,[],255,420,[],255,424,[],256,165,[],256,200,[],256,236,[],256,251,[],256,253,[],256,254,[],256,276,[],256,281,[],256,294,[],256,323,[],256,353,[],256,389,[],256,420,[],256,424,[],257,165,[],257,236,[],257,251,[],257,281,[],257,333,[],257,389,[],257,420,[],257,424,[],258,315,[],259,165,[],259,189,[],259,236,[],259,251,[],259,281,[],259,389,[],259,420,[],259,424,[],260,165,[],260,187,[],260,200,[],260,236,[],260,251,[],260,253,[],260,255,[],260,281,[],260,307,[],260,323,[],260,334,[],260,372,[],260,389,[],260,420,[],260,424,[],261,165,[],261,187,[],261,200,[],261,236,[],261,251,[],261,253,[],261,255,[],261,281,[],261,307,[],261,323,[],261,334,[],261,372,[],261,389,[],261,420,[],261,424,[],262,165,[],262,200,[],262,236,[],262,251,[],262,253,[],262,281,[],262,323,[],262,389,[],262,420,[],262,424,[],263,165,[],263,236,[],263,251,[],263,281,[],263,389,[],263,420,[],263,424,[],264,165,[],264,200,[],264,236,[],264,251,[],264,253,[],264,254,[],264,276,[],264,281,[],264,294,[],264,323,[],264,353,[],264,389,[],264,420,[],264,424,[],265,165,[],265,187,[],265,200,[],265,236,[],265,251,[],265,253,[],265,255,[],265,281,[],265,307,[],265,323,[],265,334,[],265,372,[],265,389,[],265,420,[],265,424,[],266,165,[],266,236,[],266,244,[],266,251,[],266,281,[],266,282,[],266,389,[],266,392,[],266,420,[],266,424,[],267,165,[],267,200,[],267,236,[],267,251,[],267,253,[],267,254,[],267,276,[],267,281,[],267,294,[],267,323,[],267,353,[],267,389,[],267,420,[],267,424,[],268,165,[],268,187,[],268,200,[],268,236,[],268,251,[],268,253,[],268,255,[],268,281,[],268,307,[],268,323,[],268,334,[],268,372,[],268,389,[],268,420,[],268,424,[],269,165,[],269,236,[],269,244,[],269,251,[],269,266,[],269,281,[],269,282,[],269,389,[],269,392,[],269,420,[],269,424,[],270,165,[],270,187,[],270,200,[],270,236,[],270,251,[],270,253,[],270,255,[],270,281,[],270,307,[],270,323,[],270,334,[],270,372,[],270,389,[],270,420,[],270,424,[],271,165,[],271,236,[],271,244,[],271,251,[],271,266,[],271,281,[],271,282,[],271,389,[],271,392,[],271,420,[],271,424,[],272,165,[],272,200,[],272,236,[],272,251,[],272,253,[],272,262,[],272,281,[],272,323,[],272,389,[],272,420,[],272,424,[],273,165,[],273,187,[],273,200,[],273,236,[],273,251,[],273,253,[],273,255,[],273,281,[],273,307,[],273,323,[],273,334,[],273,372,[],273,389,[],273,420,[],273,424,[],275,165,[],275,236,[],275,251,[],275,281,[],275,351,[],275,389,[],275,420,[],275,424,[],276,165,[],276,236,[],276,251,[],276,281,[],276,294,[],276,389,[],276,420,[],276,424,[],277,165,[],277,187,[],277,200,[],277,236,[],277,251,[],277,253,[],277,255,[],277,281,[],277,307,[],277,323,[],277,334,[],277,372,[],277,389,[],277,420,[],277,424,[],278,165,[],278,236,[],278,251,[],278,281,[],278,354,[],278,389,[],278,420,[],278,424,[],279,165,[],279,200,[],279,236,[],279,251,[],279,253,[],279,254,[],279,276,[],279,281,[],279,294,[],279,323,[],279,353,[],279,389,[],279,420,[],279,424,[],280,165,[],280,187,[],280,200,[],280,236,[],280,251,[],280,253,[],280,255,[],280,281,[],280,307,[],280,323,[],280,334,[],280,372,[],280,389,[],280,420,[],280,424,[],282,165,[],282,236,[],282,251,[],282,281,[],282,389,[],282,420,[],282,424,[],284,165,[],284,236,[],284,244,[],284,251,[],284,266,[],284,281,[],284,282,[],284,389,[],284,392,[],284,420,[],284,424,[],285,165,[],285,236,[],285,251,[],285,281,[],285,389,[],285,420,[],285,424,[],286,165,[],286,200,[],286,236,[],286,251,[],286,253,[],286,262,[],286,281,[],286,323,[],286,389,[],286,420,[],286,424,[],287,165,[],287,236,[],287,251,[],287,281,[],287,360,[],287,389,[],287,420,[],287,424,[],288,315,[],289,165,[],289,200,[],289,236,[],289,251,[],289,253,[],289,262,[],289,281,[],289,323,[],289,389,[],289,420,[],289,424,[],290,165,[],290,187,[],290,200,[],290,236,[],290,251,[],290,253,[],290,255,[],290,281,[],290,307,[],290,323,[],290,334,[],290,372,[],290,389,[],290,420,[],290,424,[],291,165,[],291,236,[],291,251,[],291,281,[],291,361,[],291,389,[],291,420,[],291,424,[],292,165,[],292,200,[],292,236,[],292,251,[],292,253,[],292,254,[],292,276,[],292,281,[],292,294,[],292,323,[],292,353,[],292,389,[],292,420,[],292,424,[],293,165,[],293,187,[],293,200,[],293,236,[],293,251,[],293,253,[],293,255,[],293,281,[],293,307,[],293,323,[],293,334,[],293,372,[],293,389,[],293,420,[],293,424,[],294,165,[],294,236,[],294,251,[],294,281,[],294,389,[],294,420,[],294,424,[],295,165,[],295,187,[],295,200,[],295,236,[],295,251,[],295,253,[],295,255,[],295,281,[],295,307,[],295,323,[],295,334,[],295,372,[],295,389,[],295,420,[],295,424,[],296,315,[],297,165,[],297,236,[],297,251,[],297,281,[],297,389,[],297,420,[],297,424,[],298,165,[],298,200,[],298,236,[],298,251,[],298,253,[],298,262,[],298,281,[],298,323,[],298,389,[],298,420,[],298,424,[],299,165,[],299,187,[],299,200,[],299,236,[],299,251,[],299,253,[],299,255,[],299,281,[],299,307,[],299,323,[],299,334,[],299,372,[],299,389,[],299,420,[],299,424,[],300,165,[],300,187,[],300,200,[],300,236,[],300,251,[],300,253,[],300,255,[],300,281,[],300,307,[],300,323,[],300,334,[],300,372,[],300,389,[],300,420,[],300,424,[],301,165,[],301,200,[],301,236,[],301,251,[],301,253,[],301,262,[],301,281,[],301,323,[],301,389,[],301,420,[],301,424,[],302,165,[],302,236,[],302,251,[],302,281,[],302,389,[],302,420,[],302,424,[],303,315,[],304,165,[],304,187,[],304,192,[],304,200,[],304,236,[],304,251,[],304,253,[],304,255,[],304,281,[],304,307,[],304,323,[],304,334,[],304,372,[],304,389,[],304,420,[],304,424,[],306,165,[],306,236,[],306,251,[],306,281,[],306,389,[],306,420,[],306,424,[],307,165,[],307,236,[],307,251,[],307,281,[],307,372,[],307,389,[],307,420,[],307,424,[],308,165,[],308,236,[],308,251,[],308,281,[],308,374,[],308,389,[],308,420,[],308,424,[],309,165,[],309,187,[],309,200,[],309,236,[],309,251,[],309,253,[],309,255,[],309,281,[],309,307,[],309,323,[],309,334,[],309,372,[],309,389,[],309,420,[],309,424,[],310,165,[],310,187,[],310,200,[],310,236,[],310,251,[],310,253,[],310,255,[],310,281,[],310,307,[],310,323,[],310,334,[],310,372,[],310,389,[],310,420,[],310,424,[],311,165,[],311,236,[],311,251,[],311,281,[],311,389,[],311,420,[],311,424,[],312,165,[],312,236,[],312,251,[],312,281,[],312,375,[],312,389,[],312,420,[],312,424,[],313,165,[],313,187,[],313,200,[],313,236,[],313,251,[],313,253,[],313,255,[],313,281,[],313,307,[],313,323,[],313,334,[],313,372,[],313,389,[],313,420,[],313,424,[],314,165,[],314,187,[],314,200,[],314,236,[],314,251,[],314,253,[],314,255,[],314,281,[],314,307,[],314,323,[],314,334,[],314,372,[],314,389,[],314,420,[],314,424,[],316,165,[],316,187,[],316,200,[],316,236,[],316,251,[],316,253,[],316,255,[],316,281,[],316,307,[],316,323,[],316,334,[],316,372,[],316,389,[],316,420,[],316,424,[],317,165,[],317,200,[],317,236,[],317,251,[],317,253,[],317,254,[],317,276,[],317,281,[],317,294,[],317,323,[],317,353,[],317,389,[],317,420,[],317,424,[],318,165,[],318,187,[],318,200,[],318,236,[],318,251,[],318,253,[],318,255,[],318,281,[],318,307,[],318,323,[],318,334,[],318,372,[],318,389,[],318,420,[],318,424,[],319,165,[],319,236,[],319,251,[],319,281,[],319,379,[],319,389,[],319,420,[],319,424,[],320,165,[],320,236,[],320,251,[],320,281,[],320,380,[],320,389,[],320,420,[],320,424,[],321,165,[],321,236,[],321,251,[],321,281,[],321,389,[],321,420,[],321,424,[],322,165,[],322,236,[],322,251,[],322,281,[],322,389,[],322,420,[],322,424,[],323,165,[],323,200,[],323,236,[],323,251,[],323,281,[],323,389,[],323,420,[],323,424,[],324,165,[],324,236,[],324,251,[],324,281,[],324,389,[],324,420,[],324,424,[],325,165,[],325,200,[],325,236,[],325,251,[],325,253,[],325,254,[],325,276,[],325,281,[],325,294,[],325,323,[],325,353,[],325,389,[],325,420,[],325,424,[],326,165,[],326,236,[],326,251,[],326,281,[],326,383,[],326,389,[],326,420,[],326,424,[],327,315,[],328,165,[],328,236,[],328,251,[],328,281,[],328,389,[],328,420,[],328,424,[],329,165,[],329,236,[],329,251,[],329,281,[],329,386,[],329,389,[],329,420,[],329,424,[],330,165,[],330,236,[],330,251,[],330,281,[],330,389,[],330,420,[],330,424,[],331,315,[],332,165,[],332,187,[],332,200,[],332,236,[],332,251,[],332,253,[],332,255,[],332,281,[],332,307,[],332,323,[],332,334,[],332,372,[],332,389,[],332,420,[],332,424,[],334,165,[],334,236,[],334,251,[],334,281,[],334,389,[],334,420,[],334,424,[],335,165,[],335,236,[],335,251,[],335,281,[],335,389,[],335,420,[],335,424,[],337,165,[],337,236,[],337,240,[],337,251,[],337,281,[],337,389,[],337,420,[],337,424,[],338,165,[],338,187,[],338,200,[],338,236,[],338,251,[],338,253,[],338,255,[],338,281,[],338,307,[],338,323,[],338,334,[],338,372,[],338,389,[],338,420,[],338,424,[],339,165,[],339,187,[],339,200,[],339,236,[],339,251,[],339,253,[],339,255,[],339,281,[],339,307,[],339,323,[],339,334,[],339,372,[],339,389,[],339,420,[],339,424,[],340,165,[],340,187,[],340,200,[],340,236,[],340,251,[],340,253,[],340,255,[],340,281,[],340,307,[],340,323,[],340,334,[],340,372,[],340,389,[],340,420,[],340,424,[],341,165,[],341,236,[],341,251,[],341,281,[],341,389,[],341,420,[],341,424,[],342,165,[],342,187,[],342,200,[],342,236,[],342,251,[],342,253,[],342,255,[],342,281,[],342,307,[],342,323,[],342,334,[],342,372,[],342,389,[],342,420,[],342,424,[],343,165,[],343,200,[],343,236,[],343,251,[],343,253,[],343,254,[],343,276,[],343,281,[],343,294,[],343,323,[],343,353,[],343,389,[],343,420,[],343,424,[],344,165,[],344,187,[],344,200,[],344,236,[],344,251,[],344,253,[],344,255,[],344,281,[],344,307,[],344,323,[],344,334,[],344,372,[],344,389,[],344,420,[],344,424,[],345,165,[],345,187,[],345,200,[],345,236,[],345,251,[],345,253,[],345,255,[],345,281,[],345,307,[],345,323,[],345,334,[],345,372,[],345,389,[],345,420,[],345,424,[],346,165,[],346,236,[],346,251,[],346,281,[],346,389,[],346,394,[],346,420,[],346,424,[],347,165,[],347,236,[],347,251,[],347,281,[],347,389,[],347,420,[],347,424,[],348,165,[],348,236,[],348,251,[],348,281,[],348,389,[],348,420,[],348,424,[],349,165,[],349,236,[],349,251,[],349,281,[],349,389,[],349,399,[],349,420,[],349,424,[],350,165,[],350,236,[],350,251,[],350,281,[],350,389,[],350,420,[],350,424,[],352,165,[],352,187,[],352,200,[],352,236,[],352,251,[],352,253,[],352,255,[],352,281,[],352,307,[],352,323,[],352,334,[],352,372,[],352,389,[],352,420,[],352,424,[],353,165,[],353,236,[],353,251,[],353,276,[],353,281,[],353,294,[],353,389,[],353,420,[],353,424,[],355,165,[],355,187,[],355,200,[],355,236,[],355,251,[],355,253,[],355,255,[],355,281,[],355,307,[],355,323,[],355,334,[],355,372,[],355,389,[],355,420,[],355,424,[],356,165,[],356,187,[],356,200,[],356,236,[],356,251,[],356,253,[],356,255,[],356,281,[],356,307,[],356,323,[],356,334,[],356,372,[],356,389,[],356,420,[],356,424,[],357,165,[],357,236,[],357,251,[],357,281,[],357,389,[],357,420,[],357,424,[],358,165,[],358,236,[],358,251,[],358,281,[],358,389,[],358,420,[],358,424,[],359,165,[],359,213,[],359,236,[],359,251,[],359,281,[],359,389,[],359,420,[],359,424,[],362,165,[],362,187,[],362,200,[],362,236,[],362,251,[],362,253,[],362,255,[],362,281,[],362,307,[],362,323,[],362,334,[],362,372,[],362,389,[],362,420,[],362,424,[],363,165,[],363,200,[],363,236,[],363,251,[],363,253,[],363,254,[],363,276,[],363,281,[],363,294,[],363,323,[],363,353,[],363,389,[],363,420,[],363,424,[],364,165,[],364,200,[],364,236,[],364,251,[],364,253,[],364,254,[],364,276,[],364,281,[],364,294,[],364,323,[],364,353,[],364,389,[],364,420,[],364,424,[],365,165,[],365,236,[],365,251,[],365,281,[],365,389,[],365,420,[],365,424,[],366,165,[],366,236,[],366,251,[],366,281,[],366,389,[],366,420,[],366,424,[],367,165,[],367,236,[],367,251,[],367,281,[],367,389,[],367,406,[],367,420,[],367,424,[],368,315,[],369,165,[],369,236,[],369,251,[],369,281,[],369,370,[],369,389,[],369,420,[],369,424,[],371,165,[],371,236,[],371,244,[],371,251,[],371,266,[],371,281,[],371,282,[],371,389,[],371,392,[],371,420,[],371,424,[],373,165,[],373,236,[],373,244,[],373,251,[],373,266,[],373,281,[],373,282,[],373,389,[],373,392,[],373,420,[],373,424,[],376,165,[],376,236,[],376,244,[],376,251,[],376,266,[],376,281,[],376,282,[],376,389,[],376,392,[],376,420,[],376,424,[],377,165,[],377,187,[],377,200,[],377,236,[],377,251,[],377,253,[],377,255,[],377,281,[],377,307,[],377,323,[],377,334,[],377,372,[],377,389,[],377,420,[],377,424,[],378,165,[],378,187,[],378,190,[],378,200,[],378,236,[],378,244,[],378,251,[],378,253,[],378,255,[],378,266,[],378,281,[],378,282,[],378,307,[],378,323,[],378,334,[],378,372,[],378,389,[],378,392,[],378,420,[],378,424,[],381,165,[],381,236,[],381,251,[],381,281,[],381,389,[],381,420,[],381,424,[],384,165,[],384,187,[],384,200,[],384,236,[],384,251,[],384,253,[],384,255,[],384,281,[],384,307,[],384,323,[],384,334,[],384,372,[],384,389,[],384,420,[],384,424,[],385,165,[],385,187,[],385,200,[],385,236,[],385,251,[],385,253,[],385,255,[],385,281,[],385,307,[],385,323,[],385,334,[],385,372,[],385,389,[],385,420,[],385,424,[],387,165,[],387,236,[],387,251,[],387,281,[],387,389,[],387,420,[],387,424,[],388,165,[],388,236,[],388,251,[],388,281,[],388,389,[],388,412,[],388,420,[],388,424,[],390,165,[],390,187,[],390,200,[],390,236,[],390,251,[],390,253,[],390,255,[],390,281,[],390,307,[],390,323,[],390,334,[],390,372,[],390,389,[],390,420,[],390,424,[],391,165,[],391,236,[],391,251,[],391,281,[],391,389,[],391,420,[],391,424,[],392,165,[],392,236,[],392,251,[],392,281,[],392,389,[],392,420,[],392,424,[],393,165,[],393,187,[],393,200,[],393,236,[],393,251,[],393,253,[],393,255,[],393,281,[],393,307,[],393,323,[],393,334,[],393,372,[],393,389,[],393,420,[],393,424,[],395,165,[],395,236,[],395,251,[],395,281,[],395,389,[],395,413,[],395,420,[],395,424,[],396,165,[],396,236,[],396,251,[],396,281,[],396,389,[],396,420,[],396,424,[],397,165,[],397,236,[],397,251,[],397,281,[],397,389,[],397,414,[],397,420,[],397,424,[],398,165,[],398,236,[],398,251,[],398,281,[],398,389,[],398,420,[],398,424,[],400,165,[],400,236,[],400,251,[],400,281,[],400,389,[],400,420,[],400,424,[],401,165,[],401,236,[],401,251,[],401,281,[],401,389,[],401,420,[],401,424,[],402,165,[],402,236,[],402,251,[],402,281,[],402,389,[],402,420,[],402,424,[],403,165,[],403,236,[],403,251,[],403,281,[],403,389,[],403,420,[],403,424,[],405,165,[],405,236,[],405,251,[],405,281,[],405,389,[],405,420,[],405,424,[],407,165,[],407,236,[],407,251,[],407,281,[],407,389,[],407,420,[],407,424,[],408,165,[],408,236,[],408,251,[],408,281,[],408,307,[],408,372,[],408,389,[],408,420,[],408,424,[],409,165,[],409,236,[],409,251,[],409,281,[],409,307,[],409,372,[],409,389,[],409,420,[],409,424,[],410,165,[],410,236,[],410,251,[],410,281,[],410,382,[],410,389,[],410,420,[],410,424,[],411,165,[],411,236,[],411,251,[],411,281,[],411,389,[],411,420,[],411,424,[],415,165,[],415,236,[],415,251,[],415,281,[],415,389,[],415,420,[],415,424,[],416,165,[],416,236,[],416,251,[],416,281,[],416,389,[],416,404,[],416,420,[],416,424,[],417,165,[],417,236,[],417,251,[],417,281,[],417,389,[],417,420,[],417,424,[],418,165,[],418,236,[],418,251,[],418,281,[],418,389,[],418,420,[],418,424,[],419,165,[],419,236,[],419,251,[],419,281,[],419,389,[],419,420,[],419,424,[],421,165,[],421,236,[],421,251,[],421,281,[],421,389,[],421,420,[],421,424,[],422,165,[],422,236,[],422,251,[],422,281,[],422,389,[],422,420,[],422,424,[],423,165,[],423,236,[],423,251,[],423,281,[],423,389,[],423,420,[],423,424,[],425,165,[],425,236,[],425,251,[],425,281,[],425,389,[],425,420,[],425,424,[],426,165,[],426,236,[],426,251,[],426,281,[],426,389,[],426,420,[],426,424,[],427,165,[],427,236,[],427,251,[],427,281,[],427,389,[],427,420,[],427,424,[],427,430,[],428,165,[],428,236,[],428,244,[],428,251,[],428,266,[],428,281,[],428,282,[],428,389,[],428,392,[],428,420,[],428,424,[],429,165,[],429,236,[],429,251,[],429,281,[],429,389,[],429,420,[],429,424,[],431,165,[],431,236,[],431,251,[],431,281,[],431,389,[],431,420,[],431,424,[],476,165,[],476,168,[],476,169,[],476,213,[],476,236,[],476,251,[],476,281,[],476,389,[],476,420,[],476,424,[],476,3352,[],477,165,[],477,168,[],477,169,[],477,170,[],477,175,[],477,200,[],477,214,[],477,236,[],477,251,[],477,253,[],477,254,[],477,276,[],477,281,[],477,294,[],477,323,[],477,353,[],477,389,[],477,420,[],477,424,[],478,165,[],478,168,[],478,169,[],478,172,[],478,177,[],478,200,[],478,215,[],478,236,[],478,251,[],478,253,[],478,262,[],478,281,[],478,323,[],478,389,[],478,420,[],478,424,[],479,165,[],479,168,[],479,169,[],479,216,[],479,236,[],479,251,[],479,281,[],479,389,[],479,420,[],479,424,[],480,165,[],480,168,[],480,169,[],480,170,[],480,175,[],480,200,[],480,217,[],480,236,[],480,251,[],480,253,[],480,254,[],480,276,[],480,281,[],480,294,[],480,323,[],480,353,[],480,389,[],480,420,[],480,424,[],481,165,[],481,168,[],481,169,[],481,218,[],481,236,[],481,251,[],481,281,[],481,389,[],481,420,[],481,424,[],482,165,[],482,168,[],482,169,[],482,172,[],482,177,[],482,200,[],482,219,[],482,236,[],482,251,[],482,253,[],482,262,[],482,281,[],482,323,[],482,389,[],482,420,[],482,424,[],483,165,[],483,168,[],483,169,[],483,220,[],483,236,[],483,251,[],483,281,[],483,283,[],483,389,[],483,420,[],483,424,[],484,165,[],484,168,[],484,169,[],484,171,[],484,176,[],484,187,[],484,200,[],484,221,[],484,236,[],484,251,[],484,253,[],484,255,[],484,281,[],484,307,[],484,323,[],484,334,[],484,372,[],484,389,[],484,420,[],484,424,[],485,165,[],485,168,[],485,169,[],485,171,[],485,176,[],485,187,[],485,200,[],485,222,[],485,236,[],485,251,[],485,253,[],485,255,[],485,281,[],485,307,[],485,323,[],485,334,[],485,372,[],485,389,[],485,420,[],485,424,[],486,165,[],486,168,[],486,169,[],486,172,[],486,177,[],486,200,[],486,223,[],486,236,[],486,251,[],486,253,[],486,262,[],486,281,[],486,323,[],486,389,[],486,420,[],486,424,[],487,165,[],487,168,[],487,169,[],487,171,[],487,176,[],487,187,[],487,200,[],487,224,[],487,236,[],487,251,[],487,253,[],487,255,[],487,281,[],487,307,[],487,323,[],487,334,[],487,372,[],487,389,[],487,420,[],487,424,[],488,165,[],488,168,[],488,169,[],488,225,[],488,236,[],488,251,[],488,281,[],488,389,[],488,420,[],488,424,[],489,165,[],489,168,[],489,169,[],489,170,[],489,175,[],489,200,[],489,226,[],489,227,[],489,236,[],489,250,[],489,251,[],489,253,[],489,254,[],489,276,[],489,281,[],489,294,[],489,323,[],489,353,[],489,389,[],489,420,[],489,424,[],490,165,[],490,168,[],490,169,[],490,227,[],490,236,[],490,250,[],490,251,[],490,281,[],490,389,[],490,420,[],490,424,[],490,3352,[],491,165,[],491,168,[],491,169,[],491,187,[],491,192,[],491,200,[],491,228,[],491,236,[],491,251,[],491,253,[],491,255,[],491,281,[],491,304,[],491,307,[],491,323,[],491,334,[],491,372,[],491,389,[],491,420,[],491,424,[],492,165,[],492,168,[],492,169,[],492,229,[],492,236,[],492,251,[],492,281,[],492,389,[],492,420,[],492,424,[],492,3352,[],493,165,[],493,168,[],493,169,[],493,230,[],493,236,[],493,251,[],493,281,[],493,305,[],493,389,[],493,420,[],493,424,[],494,165,[],494,168,[],494,169,[],494,172,[],494,177,[],494,200,[],494,231,[],494,236,[],494,251,[],494,253,[],494,262,[],494,281,[],494,323,[],494,389,[],494,420,[],494,424,[],495,165,[],495,168,[],495,169,[],495,232,[],495,236,[],495,239,[],495,251,[],495,281,[],495,389,[],495,420,[],495,424,[],496,165,[],496,168,[],496,169,[],496,170,[],496,175,[],496,200,[],496,233,[],496,236,[],496,251,[],496,253,[],496,254,[],496,276,[],496,281,[],496,294,[],496,323,[],496,353,[],496,389,[],496,420,[],496,424,[],497,165,[],497,168,[],497,169,[],497,170,[],497,175,[],497,200,[],497,234,[],497,236,[],497,251,[],497,253,[],497,254,[],497,276,[],497,281,[],497,294,[],497,323,[],497,353,[],497,389,[],497,420,[],497,424,[],498,165,[],498,168,[],498,169,[],498,173,[],498,178,[],498,235,[],498,236,[],498,244,[],498,251,[],498,266,[],498,281,[],498,282,[],498,389,[],498,392,[],498,420,[],498,424,[],499,165,[],499,168,[],499,169,[],499,236,[],499,251,[],499,281,[],499,389,[],499,420,[],499,424,[],499,3352,[],500,165,[],500,168,[],500,169,[],500,170,[],500,175,[],500,200,[],500,236,[],500,237,[],500,251,[],500,253,[],500,254,[],500,276,[],500,281,[],500,294,[],500,323,[],500,353,[],500,389,[],500,420,[],500,424,[],501,165,[],501,168,[],501,169,[],501,173,[],501,178,[],501,236,[],501,238,[],501,244,[],501,251,[],501,266,[],501,281,[],501,282,[],501,389,[],501,392,[],501,420,[],501,424,[],502,165,[],502,168,[],502,169,[],502,236,[],502,239,[],502,251,[],502,281,[],502,389,[],502,420,[],502,424,[],502,3352,[],503,165,[],503,168,[],503,169,[],503,236,[],503,240,[],503,251,[],503,281,[],503,389,[],503,420,[],503,424,[],503,3352,[],504,165,[],504,168,[],504,169,[],504,170,[],504,175,[],504,200,[],504,236,[],504,241,[],504,251,[],504,253,[],504,254,[],504,276,[],504,281,[],504,294,[],504,323,[],504,353,[],504,389,[],504,420,[],504,424,[],505,165,[],505,168,[],505,169,[],505,173,[],505,178,[],505,236,[],505,242,[],505,244,[],505,251,[],505,266,[],505,281,[],505,282,[],505,389,[],505,392,[],505,420,[],505,424,[],506,165,[],506,168,[],506,169,[],506,170,[],506,175,[],506,200,[],506,236,[],506,243,[],506,251,[],506,253,[],506,254,[],506,276,[],506,281,[],506,294,[],506,323,[],506,353,[],506,389,[],506,420,[],506,424,[],507,165,[],507,168,[],507,169,[],507,236,[],507,244,[],507,251,[],507,281,[],507,389,[],507,420,[],507,424,[],508,165,[],508,168,[],508,169,[],508,171,[],508,176,[],508,187,[],508,200,[],508,236,[],508,245,[],508,251,[],508,253,[],508,255,[],508,281,[],508,307,[],508,319,[],508,323,[],508,334,[],508,372,[],508,379,[],508,389,[],508,420,[],508,424,[],509,165,[],509,168,[],509,169,[],509,171,[],509,176,[],509,187,[],509,200,[],509,236,[],509,246,[],509,251,[],509,253,[],509,255,[],509,281,[],509,307,[],509,323,[],509,334,[],509,372,[],509,389,[],509,420,[],509,424,[],510,165,[],510,168,[],510,169,[],510,174,[],510,183,[],510,236,[],510,247,[],510,251,[],510,281,[],510,315,[],510,389,[],510,420,[],510,424,[],511,165,[],511,168,[],511,169,[],511,170,[],511,175,[],511,200,[],511,236,[],511,248,[],511,251,[],511,253,[],511,254,[],511,276,[],511,281,[],511,294,[],511,323,[],511,353,[],511,389,[],511,420,[],511,424,[],512,165,[],512,168,[],512,169,[],512,236,[],512,249,[],512,251,[],512,281,[],512,389,[],512,420,[],512,424,[],513,165,[],513,168,[],513,169,[],513,236,[],513,250,[],513,251,[],513,281,[],513,389,[],513,420,[],513,424,[],514,165,[],514,166,[],514,168,[],514,169,[],514,174,[],514,183,[],514,236,[],514,251,[],514,281,[],514,315,[],514,389,[],514,420,[],514,424,[],515,165,[],515,168,[],515,169,[],515,236,[],515,251,[],515,281,[],515,389,[],515,420,[],515,424,[],515,3352,[],516,165,[],516,168,[],516,169,[],516,236,[],516,251,[],516,252,[],516,281,[],516,389,[],516,420,[],516,424,[],516,3352,[],517,165,[],517,168,[],517,169,[],517,200,[],517,236,[],517,251,[],517,253,[],517,281,[],517,323,[],517,389,[],517,420,[],517,424,[],518,165,[],518,168,[],518,169,[],518,170,[],518,175,[],518,200,[],518,236,[],518,251,[],518,253,[],518,254,[],518,256,[],518,276,[],518,281,[],518,294,[],518,323,[],518,353,[],518,389,[],518,420,[],518,424,[],519,165,[],519,168,[],519,169,[],519,236,[],519,251,[],519,257,[],519,281,[],519,333,[],519,389,[],519,420,[],519,424,[],520,165,[],520,168,[],520,169,[],520,174,[],520,183,[],520,236,[],520,251,[],520,258,[],520,281,[],520,315,[],520,389,[],520,420,[],520,424,[],521,165,[],521,168,[],521,169,[],521,189,[],521,236,[],521,251,[],521,259,[],521,281,[],521,389,[],521,420,[],521,424,[],522,165,[],522,168,[],522,169,[],522,171,[],522,176,[],522,187,[],522,200,[],522,236,[],522,251,[],522,253,[],522,255,[],522,260,[],522,281,[],522,307,[],522,323,[],522,334,[],522,372,[],522,389,[],522,420,[],522,424,[],523,165,[],523,168,[],523,169,[],523,171,[],523,176,[],523,187,[],523,200,[],523,236,[],523,251,[],523,253,[],523,255,[],523,261,[],523,281,[],523,307,[],523,323,[],523,334,[],523,372,[],523,389,[],523,420,[],523,424,[],524,165,[],524,168,[],524,169,[],524,236,[],524,251,[],524,263,[],524,281,[],524,389,[],524,420,[],524,424,[],525,165,[],525,168,[],525,169,[],525,170,[],525,175,[],525,200,[],525,236,[],525,251,[],525,253,[],525,254,[],525,264,[],525,276,[],525,281,[],525,294,[],525,323,[],525,353,[],525,389,[],525,420,[],525,424,[],526,165,[],526,168,[],526,169,[],526,171,[],526,176,[],526,187,[],526,200,[],526,236,[],526,251,[],526,253,[],526,255,[],526,265,[],526,281,[],526,307,[],526,323,[],526,334,[],526,372,[],526,389,[],526,420,[],526,424,[],527,165,[],527,168,[],527,169,[],527,170,[],527,175,[],527,200,[],527,236,[],527,251,[],527,253,[],527,254,[],527,267,[],527,276,[],527,281,[],527,294,[],527,323,[],527,353,[],527,389,[],527,420,[],527,424,[],528,165,[],528,168,[],528,169,[],528,171,[],528,176,[],528,187,[],528,200,[],528,236,[],528,251,[],528,253,[],528,255,[],528,268,[],528,281,[],528,307,[],528,323,[],528,334,[],528,372,[],528,389,[],528,420,[],528,424,[],529,165,[],529,168,[],529,169,[],529,173,[],529,178,[],529,236,[],529,244,[],529,251,[],529,266,[],529,269,[],529,281,[],529,282,[],529,389,[],529,392,[],529,420,[],529,424,[],530,165,[],530,168,[],530,169,[],530,171,[],530,176,[],530,187,[],530,200,[],530,236,[],530,251,[],530,253,[],530,255,[],530,270,[],530,281,[],530,307,[],530,323,[],530,334,[],530,372,[],530,389,[],530,420,[],530,424,[],531,165,[],531,168,[],531,169,[],531,173,[],531,178,[],531,236,[],531,244,[],531,251,[],531,266,[],531,271,[],531,281,[],531,282,[],531,389,[],531,392,[],531,420,[],531,424,[],532,165,[],532,168,[],532,169,[],532,172,[],532,177,[],532,200,[],532,236,[],532,251,[],532,253,[],532,262,[],532,272,[],532,281,[],532,323,[],532,389,[],532,420,[],532,424,[],533,165,[],533,168,[],533,169,[],533,171,[],533,176,[],533,187,[],533,200,[],533,236,[],533,251,[],533,253,[],533,255,[],533,273,[],533,281,[],533,307,[],533,323,[],533,334,[],533,372,[],533,389,[],533,420,[],533,424,[],534,165,[],534,168,[],534,169,[],534,236,[],534,251,[],534,274,[],534,281,[],534,389,[],534,420,[],534,424,[],534,3352,[],535,165,[],535,168,[],535,169,[],535,236,[],535,251,[],535,275,[],535,281,[],535,351,[],535,389,[],535,420,[],535,424,[],536,165,[],536,168,[],536,169,[],536,236,[],536,251,[],536,276,[],536,281,[],536,294,[],536,389,[],536,420,[],536,424,[],536,3352,[],537,165,[],537,168,[],537,169,[],537,171,[],537,176,[],537,187,[],537,200,[],537,236,[],537,251,[],537,253,[],537,255,[],537,277,[],537,281,[],537,307,[],537,323,[],537,334,[],537,372,[],537,389,[],537,420,[],537,424,[],538,165,[],538,168,[],538,169,[],538,236,[],538,251,[],538,278,[],538,281,[],538,354,[],538,389,[],538,420,[],538,424,[],539,165,[],539,168,[],539,169,[],539,170,[],539,175,[],539,200,[],539,236,[],539,251,[],539,253,[],539,254,[],539,276,[],539,279,[],539,281,[],539,294,[],539,323,[],539,353,[],539,389,[],539,420,[],539,424,[],540,165,[],540,168,[],540,169,[],540,171,[],540,176,[],540,187,[],540,200,[],540,236,[],540,251,[],540,253,[],540,255,[],540,280,[],540,281,[],540,307,[],540,323,[],540,334,[],540,372,[],540,389,[],540,420,[],540,424,[],541,165,[],541,168,[],541,169,[],541,236,[],541,251,[],541,281,[],541,389,[],541,420,[],541,424,[],541,3352,[],542,165,[],542,168,[],542,169,[],542,236,[],542,251,[],542,281,[],542,282,[],542,389,[],542,420,[],542,424,[],543,165,[],543,168,[],543,169,[],543,236,[],543,251,[],543,281,[],543,283,[],543,389,[],543,420,[],543,424,[],543,3352,[],544,165,[],544,168,[],544,169,[],544,173,[],544,178,[],544,236,[],544,244,[],544,251,[],544,266,[],544,281,[],544,282,[],544,284,[],544,389,[],544,392,[],544,420,[],544,424,[],545,165,[],545,168,[],545,169,[],545,236,[],545,251,[],545,281,[],545,285,[],545,389,[],545,420,[],545,424,[],546,165,[],546,168,[],546,169,[],546,172,[],546,177,[],546,200,[],546,236,[],546,251,[],546,253,[],546,262,[],546,281,[],546,286,[],546,323,[],546,389,[],546,420,[],546,424,[],547,165,[],547,168,[],547,169,[],547,236,[],547,251,[],547,281,[],547,287,[],547,360,[],547,389,[],547,420,[],547,424,[],548,165,[],548,168,[],548,169,[],548,174,[],548,183,[],548,236,[],548,251,[],548,281,[],548,288,[],548,315,[],548,389,[],548,420,[],548,424,[],549,165,[],549,168,[],549,169,[],549,172,[],549,177,[],549,200,[],549,236,[],549,251,[],549,253,[],549,262,[],549,281,[],549,289,[],549,323,[],549,389,[],549,420,[],549,424,[],550,165,[],550,168,[],550,169,[],550,171,[],550,176,[],550,187,[],550,200,[],550,236,[],550,251,[],550,253,[],550,255,[],550,281,[],550,290,[],550,307,[],550,323,[],550,334,[],550,372,[],550,389,[],550,420,[],550,424,[],551,165,[],551,168,[],551,169,[],551,236,[],551,251,[],551,281,[],551,291,[],551,361,[],551,389,[],551,420,[],551,424,[],552,165,[],552,168,[],552,169,[],552,170,[],552,175,[],552,200,[],552,236,[],552,251,[],552,253,[],552,254,[],552,276,[],552,281,[],552,292,[],552,294,[],552,323,[],552,353,[],552,389,[],552,420,[],552,424,[],553,165,[],553,168,[],553,169,[],553,171,[],553,176,[],553,187,[],553,200,[],553,236,[],553,251,[],553,253,[],553,255,[],553,281,[],553,293,[],553,307,[],553,323,[],553,334,[],553,372,[],553,389,[],553,420,[],553,424,[],554,165,[],554,168,[],554,169,[],554,236,[],554,251,[],554,281,[],554,294,[],554,389,[],554,420,[],554,424,[],555,165,[],555,168,[],555,169,[],555,171,[],555,176,[],555,187,[],555,200,[],555,236,[],555,251,[],555,253,[],555,255,[],555,281,[],555,295,[],555,307,[],555,323,[],555,334,[],555,372,[],555,389,[],555,420,[],555,424,[],556,165,[],556,168,[],556,169,[],556,174,[],556,183,[],556,236,[],556,251,[],556,281,[],556,296,[],556,315,[],556,389,[],556,420,[],556,424,[],557,165,[],557,168,[],557,169,[],557,236,[],557,251,[],557,281,[],557,297,[],557,389,[],557,420,[],557,424,[],558,165,[],558,168,[],558,169,[],558,172,[],558,177,[],558,200,[],558,236,[],558,251,[],558,253,[],558,262,[],558,281,[],558,298,[],558,323,[],558,389,[],558,420,[],558,424,[],559,165,[],559,168,[],559,169,[],559,171,[],559,176,[],559,187,[],559,200,[],559,236,[],559,251,[],559,253,[],559,255,[],559,281,[],559,299,[],559,307,[],559,323,[],559,334,[],559,372,[],559,389,[],559,420,[],559,424,[],560,165,[],560,168,[],560,169,[],560,171,[],560,176,[],560,187,[],560,200,[],560,236,[],560,251,[],560,253,[],560,255,[],560,281,[],560,300,[],560,307,[],560,323,[],560,334,[],560,372,[],560,389,[],560,420,[],560,424,[],561,165,[],561,168,[],561,169,[],561,172,[],561,177,[],561,200,[],561,236,[],561,251,[],561,253,[],561,262,[],561,281,[],561,301,[],561,323,[],561,389,[],561,420,[],561,424,[],562,165,[],562,168,[],562,169,[],562,236,[],562,251,[],562,281,[],562,302,[],562,389,[],562,420,[],562,424,[],563,165,[],563,168,[],563,169,[],563,174,[],563,183,[],563,236,[],563,251,[],563,281,[],563,303,[],563,315,[],563,389,[],563,420,[],563,424,[],564,165,[],564,168,[],564,169,[],564,187,[],564,192,[],564,200,[],564,236,[],564,251,[],564,253,[],564,255,[],564,281,[],564,304,[],564,307,[],564,323,[],564,334,[],564,372,[],564,389,[],564,420,[],564,424,[],564,3352,[],565,165,[],565,168,[],565,169,[],565,236,[],565,251,[],565,281,[],565,305,[],565,389,[],565,420,[],565,424,[],565,3352,[],566,165,[],566,168,[],566,169,[],566,236,[],566,251,[],566,281,[],566,306,[],566,389,[],566,420,[],566,424,[],567,165,[],567,168,[],567,169,[],567,236,[],567,251,[],567,281,[],567,307,[],567,372,[],567,389,[],567,420,[],567,424,[],568,165,[],568,168,[],568,169,[],568,236,[],568,251,[],568,281,[],568,308,[],568,374,[],568,389,[],568,420,[],568,424,[],569,165,[],569,168,[],569,169,[],569,171,[],569,176,[],569,187,[],569,200,[],569,236,[],569,251,[],569,253,[],569,255,[],569,281,[],569,307,[],569,309,[],569,323,[],569,334,[],569,372,[],569,389,[],569,420,[],569,424,[],569,3354,[],570,165,[],570,168,[],570,169,[],570,171,[],570,176,[],570,187,[],570,200,[],570,236,[],570,251,[],570,253,[],570,255,[],570,281,[],570,307,[],570,310,[],570,323,[],570,334,[],570,372,[],570,389,[],570,420,[],570,424,[],571,165,[],571,168,[],571,169,[],571,236,[],571,251,[],571,281,[],571,311,[],571,389,[],571,420,[],571,424,[],572,165,[],572,168,[],572,169,[],572,236,[],572,251,[],572,281,[],572,312,[],572,375,[],572,389,[],572,420,[],572,424,[],573,165,[],573,168,[],573,169,[],573,171,[],573,176,[],573,187,[],573,200,[],573,236,[],573,251,[],573,253,[],573,255,[],573,281,[],573,307,[],573,313,[],573,323,[],573,334,[],573,372,[],573,389,[],573,420,[],573,424,[],574,165,[],574,168,[],574,169,[],574,171,[],574,176,[],574,187,[],574,200,[],574,236,[],574,251,[],574,253,[],574,255,[],574,281,[],574,307,[],574,314,[],574,323,[],574,334,[],574,372,[],574,389,[],574,420,[],574,424,[],575,165,[],575,168,[],575,169,[],575,171,[],575,176,[],575,187,[],575,200,[],575,236,[],575,251,[],575,253,[],575,255,[],575,281,[],575,307,[],575,316,[],575,323,[],575,334,[],575,372,[],575,389,[],575,420,[],575,424,[],576,165,[],576,168,[],576,169,[],576,170,[],576,175,[],576,200,[],576,236,[],576,251,[],576,253,[],576,254,[],576,276,[],576,281,[],576,294,[],576,317,[],576,323,[],576,353,[],576,389,[],576,420,[],576,424,[],577,165,[],577,168,[],577,169,[],577,171,[],577,176,[],577,187,[],577,200,[],577,236,[],577,251,[],577,253,[],577,255,[],577,281,[],577,307,[],577,318,[],577,323,[],577,334,[],577,372,[],577,389,[],577,420,[],577,424,[],578,165,[],578,168,[],578,169,[],578,236,[],578,251,[],578,281,[],578,319,[],578,379,[],578,389,[],578,420,[],578,424,[],579,165,[],579,168,[],579,169,[],579,236,[],579,251,[],579,281,[],579,320,[],579,380,[],579,389,[],579,420,[],579,424,[],580,165,[],580,168,[],580,169,[],580,236,[],580,251,[],580,281,[],580,321,[],580,389,[],580,420,[],580,424,[],581,165,[],581,168,[],581,169,[],581,236,[],581,251,[],581,281,[],581,322,[],581,389,[],581,420,[],581,424,[],582,165,[],582,168,[],582,169,[],582,200,[],582,236,[],582,251,[],582,281,[],582,323,[],582,389,[],582,420,[],582,424,[],582,3352,[],583,165,[],583,168,[],583,169,[],583,236,[],583,251,[],583,281,[],583,324,[],583,389,[],583,420,[],583,424,[],584,165,[],584,168,[],584,169,[],584,170,[],584,175,[],584,200,[],584,236,[],584,251,[],584,253,[],584,254,[],584,276,[],584,281,[],584,294,[],584,323,[],584,325,[],584,353,[],584,389,[],584,420,[],584,424,[],585,165,[],585,168,[],585,169,[],585,236,[],585,251,[],585,281,[],585,326,[],585,383,[],585,389,[],585,420,[],585,424,[],586,165,[],586,168,[],586,169,[],586,174,[],586,183,[],586,236,[],586,251,[],586,281,[],586,315,[],586,327,[],586,389,[],586,420,[],586,424,[],587,165,[],587,168,[],587,169,[],587,236,[],587,251,[],587,281,[],587,328,[],587,389,[],587,420,[],587,424,[],588,165,[],588,168,[],588,169,[],588,236,[],588,251,[],588,281,[],588,329,[],588,386,[],588,389,[],588,420,[],588,424,[],589,165,[],589,168,[],589,169,[],589,236,[],589,251,[],589,281,[],589,330,[],589,389,[],589,420,[],589,424,[],590,165,[],590,168,[],590,169,[],590,174,[],590,183,[],590,236,[],590,251,[],590,281,[],590,315,[],590,331,[],590,389,[],590,420,[],590,424,[],591,165,[],591,168,[],591,169,[],591,171,[],591,176,[],591,187,[],591,200,[],591,236,[],591,251,[],591,253,[],591,255,[],591,281,[],591,307,[],591,323,[],591,332,[],591,334,[],591,372,[],591,389,[],591,420,[],591,424,[],592,165,[],592,168,[],592,169,[],592,236,[],592,251,[],592,281,[],592,333,[],592,389,[],592,420,[],592,424,[],592,3352,[],593,165,[],593,168,[],593,169,[],593,236,[],593,251,[],593,281,[],593,334,[],593,389,[],593,420,[],593,424,[],594,165,[],594,168,[],594,169,[],594,236,[],594,251,[],594,281,[],594,335,[],594,389,[],594,420,[],594,424,[],595,165,[],595,168,[],595,169,[],595,236,[],595,251,[],595,281,[],595,336,[],595,389,[],595,420,[],595,424,[],595,3352,[],596,165,[],596,168,[],596,169,[],596,236,[],596,240,[],596,251,[],596,281,[],596,337,[],596,389,[],596,420,[],596,424,[],597,165,[],597,168,[],597,169,[],597,171,[],597,176,[],597,187,[],597,200,[],597,236,[],597,251,[],597,253,[],597,255,[],597,281,[],597,307,[],597,323,[],597,334,[],597,338,[],597,372,[],597,389,[],597,420,[],597,424,[],598,165,[],598,168,[],598,169,[],598,171,[],598,176,[],598,187,[],598,200,[],598,236,[],598,251,[],598,253,[],598,255,[],598,281,[],598,307,[],598,323,[],598,334,[],598,339,[],598,372,[],598,389,[],598,420,[],598,424,[],599,165,[],599,168,[],599,169,[],599,171,[],599,176,[],599,187,[],599,200,[],599,236,[],599,251,[],599,253,[],599,255,[],599,281,[],599,307,[],599,323,[],599,334,[],599,340,[],599,372,[],599,389,[],599,420,[],599,424,[],600,165,[],600,168,[],600,169,[],600,236,[],600,251,[],600,281,[],600,341,[],600,389,[],600,420,[],600,424,[],601,165,[],601,168,[],601,169,[],601,171,[],601,176,[],601,187,[],601,200,[],601,236,[],601,251,[],601,253,[],601,255,[],601,281,[],601,307,[],601,323,[],601,334,[],601,342,[],601,372,[],601,389,[],601,420,[],601,424,[],602,165,[],602,168,[],602,169,[],602,170,[],602,175,[],602,200,[],602,236,[],602,251,[],602,253,[],602,254,[],602,276,[],602,281,[],602,294,[],602,323,[],602,343,[],602,353,[],602,389,[],602,420,[],602,424,[],603,165,[],603,168,[],603,169,[],603,171,[],603,176,[],603,187,[],603,200,[],603,236,[],603,251,[],603,253,[],603,255,[],603,281,[],603,307,[],603,323,[],603,334,[],603,344,[],603,372,[],603,389,[],603,420,[],603,424,[],604,165,[],604,168,[],604,169,[],604,171,[],604,176,[],604,187,[],604,200,[],604,236,[],604,251,[],604,253,[],604,255,[],604,281,[],604,307,[],604,323,[],604,334,[],604,345,[],604,372,[],604,389,[],604,420,[],604,424,[],604,3356,[],605,165,[],605,168,[],605,169,[],605,236,[],605,251,[],605,281,[],605,346,[],605,389,[],605,394,[],605,420,[],605,424,[],606,165,[],606,168,[],606,169,[],606,236,[],606,251,[],606,281,[],606,347,[],606,389,[],606,420,[],606,424,[],607,165,[],607,168,[],607,169,[],607,236,[],607,251,[],607,281,[],607,348,[],607,389,[],607,420,[],607,424,[],608,165,[],608,168,[],608,169,[],608,236,[],608,251,[],608,281,[],608,349,[],608,389,[],608,399,[],608,420,[],608,424,[],609,165,[],609,168,[],609,169,[],609,236,[],609,251,[],609,281,[],609,350,[],609,389,[],609,420,[],609,424,[],610,165,[],610,168,[],610,169,[],610,236,[],610,251,[],610,281,[],610,351,[],610,389,[],610,420,[],610,424,[],610,3352,[],611,165,[],611,168,[],611,169,[],611,171,[],611,176,[],611,187,[],611,200,[],611,236,[],611,251,[],611,253,[],611,255,[],611,281,[],611,307,[],611,323,[],611,334,[],611,352,[],611,372,[],611,389,[],611,420,[],611,424,[],611,3358,[],612,165,[],612,168,[],612,169,[],612,236,[],612,251,[],612,276,[],612,281,[],612,294,[],612,353,[],612,389,[],612,420,[],612,424,[],613,165,[],613,168,[],613,169,[],613,236,[],613,251,[],613,281,[],613,354,[],613,389,[],613,420,[],613,424,[],613,3352,[],614,165,[],614,168,[],614,169,[],614,171,[],614,176,[],614,187,[],614,200,[],614,236,[],614,251,[],614,253,[],614,255,[],614,281,[],614,307,[],614,323,[],614,334,[],614,355,[],614,372,[],614,389,[],614,420,[],614,424,[],615,165,[],615,168,[],615,169,[],615,171,[],615,176,[],615,187,[],615,200,[],615,236,[],615,251,[],615,253,[],615,255,[],615,281,[],615,307,[],615,323,[],615,334,[],615,356,[],615,372,[],615,389,[],615,420,[],615,424,[],616,165,[],616,168,[],616,169,[],616,236,[],616,251,[],616,281,[],616,357,[],616,389,[],616,420,[],616,424,[],617,165,[],617,168,[],617,169,[],617,236,[],617,251,[],617,281,[],617,358,[],617,389,[],617,420,[],617,424,[],618,165,[],618,168,[],618,169,[],618,213,[],618,236,[],618,251,[],618,281,[],618,359,[],618,389,[],618,420,[],618,424,[],619,165,[],619,168,[],619,169,[],619,236,[],619,251,[],619,281,[],619,360,[],619,389,[],619,420,[],619,424,[],619,3352,[],620,165,[],620,168,[],620,169,[],620,236,[],620,251,[],620,281,[],620,361,[],620,389,[],620,420,[],620,424,[],620,3352,[],621,165,[],621,168,[],621,169,[],621,171,[],621,176,[],621,187,[],621,200,[],621,236,[],621,251,[],621,253,[],621,255,[],621,281,[],621,307,[],621,323,[],621,334,[],621,362,[],621,372,[],621,389,[],621,420,[],621,424,[],622,165,[],622,168,[],622,169,[],622,170,[],622,175,[],622,200,[],622,236,[],622,251,[],622,253,[],622,254,[],622,276,[],622,281,[],622,294,[],622,323,[],622,353,[],622,363,[],622,389,[],622,420,[],622,424,[],623,165,[],623,168,[],623,169,[],623,170,[],623,175,[],623,200,[],623,236,[],623,251,[],623,253,[],623,254,[],623,276,[],623,281,[],623,294,[],623,323,[],623,353,[],623,364,[],623,389,[],623,420,[],623,424,[],624,165,[],624,168,[],624,169,[],624,236,[],624,251,[],624,281,[],624,365,[],624,389,[],624,420,[],624,424,[],625,165,[],625,168,[],625,169,[],625,236,[],625,251,[],625,281,[],625,366,[],625,389,[],625,420,[],625,424,[],626,165,[],626,168,[],626,169,[],626,236,[],626,251,[],626,281,[],626,367,[],626,389,[],626,406,[],626,420,[],626,424,[],627,165,[],627,168,[],627,169,[],627,174,[],627,183,[],627,236,[],627,251,[],627,281,[],627,315,[],627,368,[],627,389,[],627,420,[],627,424,[],628,165,[],628,168,[],628,169,[],628,236,[],628,251,[],628,281,[],628,369,[],628,370,[],628,389,[],628,420,[],628,424,[],629,165,[],629,168,[],629,169,[],629,236,[],629,251,[],629,281,[],629,370,[],629,389,[],629,420,[],629,424,[],629,3352,[],630,165,[],630,168,[],630,169,[],630,173,[],630,178,[],630,236,[],630,244,[],630,251,[],630,266,[],630,281,[],630,282,[],630,371,[],630,389,[],630,392,[],630,420,[],630,424,[],631,165,[],631,168,[],631,169,[],631,236,[],631,251,[],631,281,[],631,372,[],631,389,[],631,420,[],631,424,[],631,3352,[],632,165,[],632,168,[],632,169,[],632,173,[],632,178,[],632,236,[],632,244,[],632,251,[],632,266,[],632,281,[],632,282,[],632,373,[],632,389,[],632,392,[],632,420,[],632,424,[],633,165,[],633,168,[],633,169,[],633,236,[],633,251,[],633,281,[],633,374,[],633,389,[],633,420,[],633,424,[],633,3352,[],634,165,[],634,168,[],634,169,[],634,236,[],634,251,[],634,281,[],634,375,[],634,389,[],634,420,[],634,424,[],634,3352,[],635,165,[],635,168,[],635,169,[],635,173,[],635,178,[],635,236,[],635,244,[],635,251,[],635,266,[],635,281,[],635,282,[],635,376,[],635,389,[],635,392,[],635,420,[],635,424,[],636,165,[],636,168,[],636,169,[],636,171,[],636,176,[],636,187,[],636,200,[],636,236,[],636,251,[],636,253,[],636,255,[],636,281,[],636,307,[],636,323,[],636,334,[],636,372,[],636,377,[],636,389,[],636,420,[],636,424,[],637,165,[],637,168,[],637,169,[],637,173,[],637,178,[],637,187,[],637,190,[],637,200,[],637,236,[],637,244,[],637,251,[],637,253,[],637,255,[],637,266,[],637,281,[],637,282,[],637,307,[],637,323,[],637,334,[],637,372,[],637,378,[],637,389,[],637,392,[],637,420,[],637,424,[],638,165,[],638,168,[],638,169,[],638,236,[],638,251,[],638,281,[],638,379,[],638,389,[],638,420,[],638,424,[],638,3352,[],639,165,[],639,168,[],639,169,[],639,236,[],639,251,[],639,281,[],639,380,[],639,389,[],639,420,[],639,424,[],639,3352,[],640,165,[],640,168,[],640,169,[],640,236,[],640,251,[],640,281,[],640,381,[],640,389,[],640,420,[],640,424,[],641,165,[],641,168,[],641,169,[],641,236,[],641,251,[],641,281,[],641,382,[],641,389,[],641,420,[],641,424,[],641,3352,[],642,165,[],642,168,[],642,169,[],642,236,[],642,251,[],642,281,[],642,383,[],642,389,[],642,420,[],642,424,[],642,3352,[],643,165,[],643,168,[],643,169,[],643,171,[],643,176,[],643,187,[],643,200,[],643,236,[],643,251,[],643,253,[],643,255,[],643,281,[],643,307,[],643,323,[],643,334,[],643,372,[],643,384,[],643,389,[],643,420,[],643,424,[],644,165,[],644,168,[],644,169,[],644,171,[],644,176,[],644,187,[],644,200,[],644,236,[],644,251,[],644,253,[],644,255,[],644,281,[],644,307,[],644,323,[],644,334,[],644,372,[],644,385,[],644,389,[],644,420,[],644,424,[],645,165,[],645,168,[],645,169,[],645,236,[],645,251,[],645,281,[],645,386,[],645,389,[],645,420,[],645,424,[],645,3352,[],646,165,[],646,168,[],646,169,[],646,236,[],646,251,[],646,281,[],646,387,[],646,389,[],646,420,[],646,424,[],647,165,[],647,168,[],647,169,[],647,236,[],647,251,[],647,281,[],647,388,[],647,389,[],647,412,[],647,420,[],647,424,[],648,165,[],648,168,[],648,169,[],648,236,[],648,251,[],648,281,[],648,389,[],648,420,[],648,424,[],648,3352,[],649,165,[],649,168,[],649,169,[],649,171,[],649,176,[],649,187,[],649,200,[],649,236,[],649,251,[],649,253,[],649,255,[],649,281,[],649,307,[],649,323,[],649,334,[],649,372,[],649,389,[],649,390,[],649,420,[],649,424,[],650,165,[],650,168,[],650,169,[],650,236,[],650,251,[],650,281,[],650,389,[],650,391,[],650,420,[],650,424,[],651,165,[],651,168,[],651,169,[],651,236,[],651,251,[],651,281,[],651,389,[],651,392,[],651,420,[],651,424,[],652,165,[],652,168,[],652,169,[],652,171,[],652,176,[],652,187,[],652,200,[],652,236,[],652,251,[],652,253,[],652,255,[],652,281,[],652,307,[],652,323,[],652,334,[],652,372,[],652,389,[],652,393,[],652,420,[],652,424,[],653,165,[],653,168,[],653,169,[],653,236,[],653,251,[],653,281,[],653,389,[],653,394,[],653,420,[],653,424,[],653,3352,[],654,165,[],654,168,[],654,169,[],654,236,[],654,251,[],654,281,[],654,389,[],654,395,[],654,413,[],654,420,[],654,424,[],655,165,[],655,168,[],655,169,[],655,236,[],655,251,[],655,281,[],655,389,[],655,396,[],655,420,[],655,424,[],656,165,[],656,168,[],656,169,[],656,236,[],656,251,[],656,281,[],656,389,[],656,397,[],656,414,[],656,420,[],656,424,[],657,165,[],657,168,[],657,169,[],657,236,[],657,251,[],657,281,[],657,389,[],657,398,[],657,420,[],657,424,[],658,165,[],658,168,[],658,169,[],658,236,[],658,251,[],658,281,[],658,389,[],658,399,[],658,420,[],658,424,[],658,3352,[],659,165,[],659,168,[],659,169,[],659,236,[],659,251,[],659,281,[],659,389,[],659,400,[],659,420,[],659,424,[],660,165,[],660,168,[],660,169,[],660,236,[],660,251,[],660,281,[],660,389,[],660,401,[],660,420,[],660,424,[],661,165,[],661,168,[],661,169,[],661,236,[],661,251,[],661,281,[],661,389,[],661,402,[],661,420,[],661,424,[],662,165,[],662,168,[],662,169,[],662,236,[],662,251,[],662,281,[],662,389,[],662,403,[],662,420,[],662,424,[],663,165,[],663,168,[],663,169,[],663,236,[],663,251,[],663,281,[],663,389,[],663,404,[],663,420,[],663,424,[],663,3352,[],664,165,[],664,168,[],664,169,[],664,236,[],664,251,[],664,281,[],664,389,[],664,405,[],664,420,[],664,424,[],665,165,[],665,168,[],665,169,[],665,236,[],665,251,[],665,281,[],665,389,[],665,406,[],665,420,[],665,424,[],665,3352,[],666,165,[],666,168,[],666,169,[],666,236,[],666,251,[],666,281,[],666,389,[],666,407,[],666,420,[],666,424,[],667,165,[],667,168,[],667,169,[],667,236,[],667,251,[],667,281,[],667,307,[],667,372,[],667,389,[],667,408,[],667,420,[],667,424,[],668,165,[],668,168,[],668,169,[],668,236,[],668,251,[],668,281,[],668,307,[],668,372,[],668,389,[],668,409,[],668,420,[],668,424,[],669,165,[],669,168,[],669,169,[],669,236,[],669,251,[],669,281,[],669,382,[],669,389,[],669,410,[],669,420,[],669,424,[],670,165,[],670,168,[],670,169,[],670,236,[],670,251,[],670,281,[],670,389,[],670,411,[],670,420,[],670,424,[],671,165,[],671,168,[],671,169,[],671,236,[],671,251,[],671,281,[],671,389,[],671,412,[],671,420,[],671,424,[],671,3352,[],672,165,[],672,168,[],672,169,[],672,236,[],672,251,[],672,281,[],672,389,[],672,413,[],672,420,[],672,424,[],672,3352,[],673,165,[],673,168,[],673,169,[],673,236,[],673,251,[],673,281,[],673,389,[],673,414,[],673,420,[],673,424,[],673,3352,[],674,165,[],674,168,[],674,169,[],674,236,[],674,251,[],674,281,[],674,389,[],674,415,[],674,420,[],674,424,[],675,165,[],675,168,[],675,169,[],675,236,[],675,251,[],675,281,[],675,389,[],675,404,[],675,416,[],675,420,[],675,424,[],676,165,[],676,168,[],676,169,[],676,236,[],676,251,[],676,281,[],676,389,[],676,417,[],676,420,[],676,424,[],677,165,[],677,168,[],677,169,[],677,236,[],677,251,[],677,281,[],677,389,[],677,418,[],677,420,[],677,424,[],678,165,[],678,168,[],678,169,[],678,236,[],678,251,[],678,281,[],678,389,[],678,419,[],678,420,[],678,424,[],679,165,[],679,168,[],679,169,[],679,236,[],679,251,[],679,281,[],679,389,[],679,420,[],679,424,[],679,3352,[],680,165,[],680,168,[],680,169,[],680,236,[],680,251,[],680,281,[],680,389,[],680,420,[],680,421,[],680,424,[],681,165,[],681,168,[],681,169,[],681,236,[],681,251,[],681,281,[],681,389,[],681,420,[],681,422,[],681,424,[],682,165,[],682,168,[],682,169,[],682,236,[],682,251,[],682,281,[],682,389,[],682,420,[],682,423,[],682,424,[],683,165,[],683,168,[],683,169,[],683,236,[],683,251,[],683,281,[],683,389,[],683,420,[],683,424,[],683,3352,[],684,165,[],684,168,[],684,169,[],684,236,[],684,251,[],684,281,[],684,389,[],684,420,[],684,424,[],684,425,[],685,165,[],685,168,[],685,169,[],685,236,[],685,251,[],685,281,[],685,389,[],685,420,[],685,424,[],685,426,[],686,165,[],686,168,[],686,169,[],686,236,[],686,251,[],686,281,[],686,389,[],686,420,[],686,424,[],686,427,[],686,430,[],687,165,[],687,168,[],687,169,[],687,173,[],687,178,[],687,236,[],687,244,[],687,251,[],687,266,[],687,281,[],687,282,[],687,389,[],687,392,[],687,420,[],687,424,[],687,428,[],688,165,[],688,168,[],688,169,[],688,236,[],688,251,[],688,281,[],688,389,[],688,420,[],688,424,[],688,429,[],689,165,[],689,168,[],689,169,[],689,236,[],689,251,[],689,281,[],689,389,[],689,420,[],689,424,[],689,430,[],689,3352,[],690,165,[],690,168,[],690,169,[],690,236,[],690,251,[],690,281,[],690,389,[],690,420,[],690,424,[],690,431,[],691,165,[],691,167,[],691,168,[],691,169,[],691,171,[],691,176,[],691,187,[],691,200,[],691,236,[],691,251,[],691,253,[],691,255,[],691,281,[],691,307,[],691,323,[],691,334,[],691,372,[],691,389,[],691,420,[],691,424,[],692,165,[],692,168,[],692,169,[],692,172,[],692,177,[],692,179,[],692,200,[],692,236,[],692,251,[],692,253,[],692,262,[],692,281,[],692,323,[],692,389,[],692,420,[],692,424,[],694,165,[],694,168,[],694,169,[],694,172,[],694,177,[],694,180,[],694,200,[],694,236,[],694,251,[],694,253,[],694,262,[],694,281,[],694,323,[],694,389,[],694,420,[],694,424,[],695,165,[],695,168,[],695,169,[],695,171,[],695,176,[],695,181,[],695,187,[],695,200,[],695,236,[],695,251,[],695,253,[],695,255,[],695,281,[],695,307,[],695,323,[],695,334,[],695,372,[],695,389,[],695,420,[],695,424,[],696,165,[],696,168,[],696,169,[],696,171,[],696,176,[],696,182,[],696,187,[],696,200,[],696,236,[],696,251,[],696,253,[],696,255,[],696,281,[],696,307,[],696,323,[],696,334,[],696,372,[],696,389,[],696,420,[],696,424,[],697,165,[],697,168,[],697,169,[],697,184,[],697,229,[],697,236,[],697,251,[],697,281,[],697,389,[],697,420,[],697,424,[],698,165,[],698,168,[],698,169,[],698,185,[],698,236,[],698,251,[],698,281,[],698,389,[],698,420,[],698,424,[],699,165,[],699,168,[],699,169,[],699,170,[],699,175,[],699,186,[],699,200,[],699,236,[],699,251,[],699,253,[],699,254,[],699,276,[],699,281,[],699,294,[],699,323,[],699,353,[],699,389,[],699,420,[],699,424,[],700,165,[],700,168,[],700,169,[],700,187,[],700,236,[],700,251,[],700,281,[],700,307,[],700,372,[],700,389,[],700,420,[],700,424,[],700,3352,[],701,165,[],701,168,[],701,169,[],701,171,[],701,176,[],701,187,[],701,188,[],701,200,[],701,236,[],701,251,[],701,253,[],701,255,[],701,281,[],701,307,[],701,323,[],701,334,[],701,372,[],701,389,[],701,420,[],701,424,[],702,165,[],702,168,[],702,169,[],702,189,[],702,236,[],702,251,[],702,281,[],702,389,[],702,420,[],702,424,[],702,3352,[],703,165,[],703,168,[],703,169,[],703,171,[],703,176,[],703,187,[],703,190,[],703,200,[],703,236,[],703,251,[],703,253,[],703,255,[],703,281,[],703,307,[],703,323,[],703,334,[],703,372,[],703,389,[],703,420,[],703,424,[],704,165,[],704,168,[],704,169,[],704,170,[],704,175,[],704,191,[],704,200,[],704,236,[],704,251,[],704,253,[],704,254,[],704,276,[],704,281,[],704,294,[],704,323,[],704,353,[],704,389,[],704,420,[],704,424,[],705,165,[],705,168,[],705,169,[],705,171,[],705,176,[],705,187,[],705,192,[],705,200,[],705,236,[],705,251,[],705,253,[],705,255,[],705,281,[],705,307,[],705,323,[],705,334,[],705,372,[],705,389,[],705,420,[],705,424,[],706,165,[],706,168,[],706,169,[],706,173,[],706,178,[],706,193,[],706,236,[],706,244,[],706,251,[],706,266,[],706,281,[],706,282,[],706,389,[],706,392,[],706,420,[],706,424,[],707,165,[],707,168,[],707,169,[],707,171,[],707,176,[],707,187,[],707,194,[],707,200,[],707,236,[],707,251,[],707,253,[],707,255,[],707,281,[],707,307,[],707,323,[],707,334,[],707,372,[],707,389,[],707,420,[],707,424,[],708,165,[],708,168,[],708,169,[],708,195,[],708,236,[],708,251,[],708,281,[],708,389,[],708,420,[],708,424,[],709,165,[],709,168,[],709,169,[],709,171,[],709,176,[],709,187,[],709,196,[],709,200,[],709,236,[],709,251,[],709,253,[],709,255,[],709,281,[],709,307,[],709,323,[],709,334,[],709,372,[],709,389,[],709,420,[],709,424,[],710,165,[],710,168,[],710,169,[],710,172,[],710,177,[],710,197,[],710,200,[],710,236,[],710,251,[],710,253,[],710,262,[],710,281,[],710,323,[],710,389,[],710,420,[],710,424,[],711,165,[],711,168,[],711,169,[],711,198,[],711,236,[],711,251,[],711,252,[],711,281,[],711,389,[],711,420,[],711,424,[],712,165,[],712,168,[],712,169,[],712,170,[],712,175,[],712,199,[],712,200,[],712,236,[],712,251,[],712,253,[],712,254,[],712,276,[],712,281,[],712,294,[],712,323,[],712,353,[],712,389,[],712,420,[],712,424,[],713,165,[],713,168,[],713,169,[],713,200,[],713,236,[],713,251,[],713,281,[],713,389,[],713,420,[],713,424,[],714,165,[],714,168,[],714,169,[],714,172,[],714,177,[],714,200,[],714,201,[],714,236,[],714,251,[],714,253,[],714,262,[],714,281,[],714,323,[],714,389,[],714,420,[],714,424,[],715,165,[],715,168,[],715,169,[],715,202,[],715,236,[],715,251,[],715,281,[],715,389,[],715,420,[],715,424,[],716,165,[],716,168,[],716,169,[],716,172,[],716,177,[],716,200,[],716,203,[],716,236,[],716,251,[],716,253,[],716,262,[],716,281,[],716,323,[],716,389,[],716,420,[],716,424,[],717,165,[],717,168,[],717,169,[],717,172,[],717,177,[],717,200,[],717,204,[],717,236,[],717,251,[],717,253,[],717,262,[],717,281,[],717,323,[],717,389,[],717,420,[],717,424,[],718,165,[],718,168,[],718,169,[],718,171,[],718,176,[],718,187,[],718,200,[],718,205,[],718,236,[],718,251,[],718,253,[],718,255,[],718,281,[],718,307,[],718,323,[],718,334,[],718,372,[],718,389,[],718,420,[],718,424,[],719,165,[],719,168,[],719,169,[],719,172,[],719,177,[],719,200,[],719,206,[],719,236,[],719,251,[],719,253,[],719,262,[],719,281,[],719,323,[],719,389,[],719,420,[],719,424,[],720,165,[],720,168,[],720,169,[],720,207,[],720,236,[],720,251,[],720,281,[],720,389,[],720,420,[],720,424,[],720,3352,[],721,165,[],721,168,[],721,169,[],721,171,[],721,176,[],721,187,[],721,200,[],721,208,[],721,236,[],721,251,[],721,253,[],721,255,[],721,281,[],721,307,[],721,323,[],721,334,[],721,372,[],721,389,[],721,420,[],721,424,[],722,165,[],722,168,[],722,169,[],722,173,[],722,178,[],722,209,[],722,236,[],722,244,[],722,251,[],722,266,[],722,281,[],722,282,[],722,389,[],722,392,[],722,420,[],722,424,[],723,165,[],723,168,[],723,169,[],723,172,[],723,177,[],723,200,[],723,210,[],723,236,[],723,251,[],723,253,[],723,262,[],723,281,[],723,323,[],723,389,[],723,420,[],723,424,[],724,165,[],724,168,[],724,169,[],724,211,[],724,236,[],724,251,[],724,281,[],724,389,[],724,420,[],724,424,[],725,165,[],725,168,[],725,169,[],725,172,[],725,177,[],725,200,[],725,212,[],725,236,[],725,251,[],725,253,[],725,262,[],725,281,[],725,323,[],725,389,[],725,420,[],725,424,[],3270,207,[],3270,232,[],3270,273,[],3270,336,[],3270,344,[],3346,244,[],3346,273,[],3346,331,[],3346,342,[],3346,344,[],3346,359,[],3346,378,[],3346,392,[],3347,189,[["Element",2,"ExpressibleAsObjcNamePiece",259]],3347,207,[["Element",2,"TokenSyntax",3270]],3347,213,[["Element",2,"ExpressibleAsAccessPathComponent",359]],3347,229,[["Element",2,"ExpressibleAsCaseItem",184]],3347,236,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,239,[["Element",2,"ExpressibleAsDeclModifier",232]],3347,240,[["Element",2,"ExpressibleAsObjCSelectorPiece",337]],3347,251,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,252,[["Element",2,"ExpressibleAsCatchItem",198]],3347,274,[["Element",2,"TokenSyntax",3270]],3347,281,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,283,[["Element",2,"ExpressibleAsCatchClause",220]],3347,305,[["Element",2,"ExpressibleAsClosureParam",230]],3347,333,[["Element",2,"ExpressibleAsInheritedType",257]],3347,336,[["Element",2,"TokenSyntax",3270]],3347,351,[["Element",2,"ExpressibleAsIfConfigClause",275]],3347,354,[["Element",2,"ExpressibleAsPatternBinding",278]],3347,360,[["Element",2,"ExpressibleAsEnumCaseElement",287]],3347,361,[["Element",2,"ExpressibleAsGenericArgument",291]],3347,370,[["Element",2,"ExpressibleAsAvailabilityArgument",369]],3347,372,[["Element",2,"ExpressibleAsConditionElement",307]],3347,374,[["Element",2,"ExpressibleAsDeclNameArgument",308]],3347,375,[["Element",2,"ExpressibleAsGenericParameter",312]],3347,379,[["Element",2,"ExpressibleAsTupleExprElement",319]],3347,380,[["Element",2,"ExpressibleAsTupleTypeElement",320]],3347,382,[["Element",2,"ExpressibleAsBackDeployVersionArgument",410]],3347,383,[["Element",2,"ExpressibleAsDictionaryElement",326]],3347,386,[["Element",2,"ExpressibleAsFunctionParameter",329]],3347,389,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,394,[["Element",2,"ExpressibleAsClosureCaptureItem",346]],3347,399,[["Element",2,"ExpressibleAsGenericRequirement",349]],3347,404,[["Element",2,"ExpressibleAsPrecedenceGroupNameElement",416]],3347,406,[["Element",2,"ExpressibleAsTuplePatternElement",367]],3347,412,[["Element",2,"ExpressibleAsPrimaryAssociatedType",388]],3347,413,[["Element",2,"ExpressibleAsCompositionTypeElement",395]],3347,414,[["Element",2,"ExpressibleAsDifferentiabilityParam",397]],3347,420,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,424,[["Element",2,"ExpressibleAsSyntaxBuildable",165]],3347,430,[["Element",2,"ExpressibleAsMultipleTrailingClosureElement",427]]],"feature":[1622,476,1622,477,1622,478,1622,479,1622,480,1622,481,1622,482,1622,483,1622,484,1622,485,1622,486,1622,487,1622,488,1622,489,1622,490,1622,491,1622,492,1622,493,1622,494,1622,495,1622,496,1622,497,1622,498,1622,500,1622,501,1622,502,1622,503,1622,504,1622,505,1622,506,1622,507,1622,508,1622,509,1622,510,1622,511,1622,512,1622,513,1622,514,1622,515,1622,516,1622,517,1622,518,1622,519,1622,520,1622,521,1622,522,1622,523,1622,524,1622,525,1622,526,1622,527,1622,528,1622,529,1622,530,1622,531,1622,532,1622,533,1622,534,1622,535,1622,536,1622,537,1622,538,1622,539,1622,540,1622,541,1622,542,1622,543,1622,544,1622,545,1622,546,1622,547,1622,548,1622,549,1622,550,1622,551,1622,552,1622,553,1622,554,1622,555,1622,556,1622,557,1622,558,1622,559,1622,560,1622,561,1622,562,1622,563,1622,564,1622,565,1622,566,1622,567,1622,568,1622,569,1622,570,1622,571,1622,572,1622,573,1622,574,1622,575,1622,576,1622,577,1622,578,1622,579,1622,580,1622,581,1622,582,1622,583,1622,584,1622,585,1622,586,1622,587,1622,588,1622,589,1622,590,1622,591,1622,592,1622,593,1622,594,1622,595,1622,596,1622,597,1622,598,1622,599,1622,600,1622,601,1622,602,1622,603,1622,604,1622,605,1622,606,1622,607,1622,608,1622,609,1622,610,1622,611,1622,612,1622,613,1622,614,1622,615,1622,616,1622,617,1622,618,1622,619,1622,620,1622,621,1622,622,1622,623,1622,624,1622,625,1622,626,1622,627,1622,628,1622,629,1622,630,1622,631,1622,632,1622,633,1622,634,1622,635,1622,636,1622,637,1622,638,1622,639,1622,640,1622,641,1622,642,1622,643,1622,644,1622,645,1622,646,1622,647,1622,648,1622,649,1622,650,1622,651,1622,652,1622,653,1622,654,1622,655,1622,656,1622,657,1622,658,1622,659,1622,660,1622,661,1622,662,1622,663,1622,664,1622,665,1622,666,1622,667,1622,668,1622,669,1622,670,1622,671,1622,672,1622,673,1622,674,1622,675,1622,676,1622,677,1622,678,1622,679,1622,680,1622,681,1622,682,1622,683,1622,684,1622,685,1622,686,1622,687,1622,688,1622,689,1622,690,1622,691,1622,692,1622,694,1622,695,1622,696,1622,697,1622,698,1622,699,1622,700,1622,701,1622,702,1622,703,1622,704,1622,705,1622,706,1622,707,1622,708,1622,709,1622,710,1622,711,1622,712,1622,713,1622,714,1622,715,1622,716,1622,717,1622,718,1622,719,1622,720,1622,721,1622,722,1622,723,1622,724,1622,725,1622,3270,1622,3346,1623,476,1623,477,1623,478,1623,479,1623,480,1623,481,1623,482,1623,483,1623,484,1623,485,1623,486,1623,487,1623,488,1623,489,1623,490,1623,491,1623,492,1623,493,1623,494,1623,495,1623,496,1623,497,1623,498,1623,499,1623,500,1623,501,1623,502,1623,503,1623,504,1623,505,1623,506,1623,507,1623,508,1623,509,1623,510,1623,511,1623,512,1623,513,1623,514,1623,516,1623,517,1623,518,1623,519,1623,520,1623,521,1623,522,1623,523,1623,524,1623,525,1623,526,1623,527,1623,528,1623,529,1623,530,1623,531,1623,532,1623,533,1623,534,1623,535,1623,536,1623,537,1623,538,1623,539,1623,540,1623,541,1623,542,1623,543,1623,544,1623,545,1623,546,1623,547,1623,548,1623,549,1623,550,1623,551,1623,552,1623,553,1623,554,1623,555,1623,556,1623,557,1623,558,1623,559,1623,560,1623,561,1623,562,1623,563,1623,564,1623,565,1623,566,1623,567,1623,568,1623,569,1623,570,1623,571,1623,572,1623,573,1623,574,1623,575,1623,576,1623,577,1623,578,1623,579,1623,580,1623,581,1623,582,1623,583,1623,584,1623,585,1623,586,1623,587,1623,588,1623,589,1623,590,1623,591,1623,592,1623,593,1623,594,1623,595,1623,596,1623,597,1623,598,1623,599,1623,600,1623,601,1623,602,1623,603,1623,604,1623,605,1623,606,1623,607,1623,608,1623,609,1623,610,1623,611,1623,612,1623,613,1623,614,1623,615,1623,616,1623,617,1623,618,1623,619,1623,620,1623,621,1623,622,1623,623,1623,624,1623,625,1623,626,1623,627,1623,628,1623,629,1623,630,1623,631,1623,632,1623,633,1623,634,1623,635,1623,636,1623,637,1623,638,1623,639,1623,640,1623,641,1623,642,1623,643,1623,644,1623,645,1623,646,1623,647,1623,648,1623,649,1623,650,1623,651,1623,652,1623,653,1623,654,1623,655,1623,656,1623,657,1623,658,1623,659,1623,660,1623,661,1623,662,1623,663,1623,664,1623,665,1623,666,1623,667,1623,668,1623,669,1623,670,1623,671,1623,672,1623,673,1623,674,1623,675,1623,676,1623,677,1623,678,1623,679,1623,680,1623,681,1623,682,1623,683,1623,684,1623,685,1623,686,1623,687,1623,688,1623,689,1623,690,1623,691,1623,692,1623,694,1623,695,1623,696,1623,697,1623,698,1623,699,1623,700,1623,701,1623,702,1623,703,1623,704,1623,705,1623,706,1623,707,1623,708,1623,709,1623,710,1623,711,1623,712,1623,713,1623,714,1623,715,1623,716,1623,717,1623,718,1623,719,1623,720,1623,721,1623,722,1623,723,1623,724,1623,725,1623,3270,1623,3346,1624,476,1624,477,1624,478,1624,479,1624,480,1624,481,1624,482,1624,483,1624,484,1624,485,1624,486,1624,487,1624,488,1624,489,1624,490,1624,491,1624,492,1624,493,1624,494,1624,495,1624,496,1624,497,1624,498,1624,499,1624,500,1624,501,1624,502,1624,503,1624,504,1624,505,1624,506,1624,507,1624,508,1624,509,1624,510,1624,511,1624,512,1624,513,1624,514,1624,515,1624,516,1624,517,1624,518,1624,519,1624,520,1624,521,1624,522,1624,523,1624,524,1624,525,1624,526,1624,527,1624,528,1624,529,1624,530,1624,531,1624,532,1624,533,1624,534,1624,535,1624,536,1624,537,1624,538,1624,539,1624,540,1624,542,1624,543,1624,544,1624,545,1624,546,1624,547,1624,548,1624,549,1624,550,1624,551,1624,552,1624,553,1624,554,1624,555,1624,556,1624,557,1624,558,1624,559,1624,560,1624,561,1624,562,1624,563,1624,564,1624,565,1624,566,1624,567,1624,568,1624,569,1624,570,1624,571,1624,572,1624,573,1624,574,1624,575,1624,576,1624,577,1624,578,1624,579,1624,580,1624,581,1624,582,1624,583,1624,584,1624,585,1624,586,1624,587,1624,588,1624,589,1624,590,1624,591,1624,592,1624,593,1624,594,1624,595,1624,596,1624,597,1624,598,1624,599,1624,600,1624,601,1624,602,1624,603,1624,604,1624,605,1624,606,1624,607,1624,608,1624,609,1624,610,1624,611,1624,612,1624,613,1624,614,1624,615,1624,616,1624,617,1624,618,1624,619,1624,620,1624,621,1624,622,1624,623,1624,624,1624,625,1624,626,1624,627,1624,628,1624,629,1624,630,1624,631,1624,632,1624,633,1624,634,1624,635,1624,636,1624,637,1624,638,1624,639,1624,640,1624,641,1624,642,1624,643,1624,644,1624,645,1624,646,1624,647,1624,648,1624,649,1624,650,1624,651,1624,652,1624,653,1624,654,1624,655,1624,656,1624,657,1624,658,1624,659,1624,660,1624,661,1624,662,1624,663,1624,664,1624,665,1624,666,1624,667,1624,668,1624,669,1624,670,1624,671,1624,672,1624,673,1624,674,1624,675,1624,676,1624,677,1624,678,1624,679,1624,680,1624,681,1624,682,1624,683,1624,684,1624,685,1624,686,1624,687,1624,688,1624,689,1624,690,1624,691,1624,692,1624,694,1624,695,1624,696,1624,697,1624,698,1624,699,1624,700,1624,701,1624,702,1624,703,1624,704,1624,705,1624,706,1624,707,1624,708,1624,709,1624,710,1624,711,1624,712,1624,713,1624,714,1624,715,1624,716,1624,717,1624,718,1624,719,1624,720,1624,721,1624,722,1624,723,1624,724,1624,725,1624,3270,1624,3346,1625,476,1625,477,1625,478,1625,479,1625,480,1625,481,1625,482,1625,483,1625,484,1625,485,1625,486,1625,487,1625,488,1625,489,1625,490,1625,491,1625,492,1625,493,1625,494,1625,495,1625,496,1625,497,1625,498,1625,499,1625,500,1625,501,1625,502,1625,503,1625,504,1625,505,1625,506,1625,507,1625,508,1625,509,1625,510,1625,511,1625,512,1625,513,1625,514,1625,515,1625,516,1625,517,1625,518,1625,519,1625,520,1625,521,1625,522,1625,523,1625,524,1625,525,1625,526,1625,527,1625,528,1625,529,1625,530,1625,531,1625,532,1625,533,1625,534,1625,535,1625,536,1625,537,1625,538,1625,539,1625,540,1625,541,1625,542,1625,543,1625,544,1625,545,1625,546,1625,547,1625,548,1625,549,1625,550,1625,551,1625,552,1625,553,1625,554,1625,555,1625,556,1625,557,1625,558,1625,559,1625,560,1625,561,1625,562,1625,563,1625,564,1625,565,1625,566,1625,567,1625,568,1625,569,1625,570,1625,571,1625,572,1625,573,1625,574,1625,575,1625,576,1625,577,1625,578,1625,579,1625,580,1625,581,1625,582,1625,583,1625,584,1625,585,1625,586,1625,587,1625,588,1625,589,1625,590,1625,591,1625,592,1625,593,1625,594,1625,595,1625,596,1625,597,1625,598,1625,599,1625,600,1625,601,1625,602,1625,603,1625,604,1625,605,1625,606,1625,607,1625,608,1625,609,1625,610,1625,611,1625,612,1625,613,1625,614,1625,615,1625,616,1625,617,1625,618,1625,619,1625,620,1625,621,1625,622,1625,623,1625,624,1625,625,1625,626,1625,627,1625,628,1625,629,1625,630,1625,631,1625,632,1625,633,1625,634,1625,635,1625,636,1625,637,1625,638,1625,639,1625,640,1625,641,1625,642,1625,643,1625,644,1625,645,1625,646,1625,647,1625,649,1625,650,1625,651,1625,652,1625,653,1625,654,1625,655,1625,656,1625,657,1625,658,1625,659,1625,660,1625,661,1625,662,1625,663,1625,664,1625,665,1625,666,1625,667,1625,668,1625,669,1625,670,1625,671,1625,672,1625,673,1625,674,1625,675,1625,676,1625,677,1625,678,1625,679,1625,680,1625,681,1625,682,1625,683,1625,684,1625,685,1625,686,1625,687,1625,688,1625,689,1625,690,1625,691,1625,692,1625,694,1625,695,1625,696,1625,697,1625,698,1625,699,1625,700,1625,701,1625,702,1625,703,1625,704,1625,705,1625,706,1625,707,1625,708,1625,709,1625,710,1625,711,1625,712,1625,713,1625,714,1625,715,1625,716,1625,717,1625,718,1625,719,1625,720,1625,721,1625,722,1625,723,1625,724,1625,725,1625,3270,1625,3346,1626,476,1626,477,1626,478,1626,479,1626,480,1626,481,1626,482,1626,483,1626,484,1626,485,1626,486,1626,487,1626,488,1626,489,1626,490,1626,491,1626,492,1626,493,1626,494,1626,495,1626,496,1626,497,1626,498,1626,499,1626,500,1626,501,1626,502,1626,503,1626,504,1626,505,1626,506,1626,507,1626,508,1626,509,1626,510,1626,511,1626,512,1626,513,1626,514,1626,515,1626,516,1626,517,1626,518,1626,519,1626,520,1626,521,1626,522,1626,523,1626,524,1626,525,1626,526,1626,527,1626,528,1626,529,1626,530,1626,531,1626,532,1626,533,1626,534,1626,535,1626,536,1626,537,1626,538,1626,539,1626,540,1626,541,1626,542,1626,543,1626,544,1626,545,1626,546,1626,547,1626,548,1626,549,1626,550,1626,551,1626,552,1626,553,1626,554,1626,555,1626,556,1626,557,1626,558,1626,559,1626,560,1626,561,1626,562,1626,563,1626,564,1626,565,1626,566,1626,567,1626,568,1626,569,1626,570,1626,571,1626,572,1626,573,1626,574,1626,575,1626,576,1626,577,1626,578,1626,579,1626,580,1626,581,1626,582,1626,583,1626,584,1626,585,1626,586,1626,587,1626,588,1626,589,1626,590,1626,591,1626,592,1626,593,1626,594,1626,595,1626,596,1626,597,1626,598,1626,599,1626,600,1626,601,1626,602,1626,603,1626,604,1626,605,1626,606,1626,607,1626,608,1626,609,1626,610,1626,611,1626,612,1626,613,1626,614,1626,615,1626,616,1626,617,1626,618,1626,619,1626,620,1626,621,1626,622,1626,623,1626,624,1626,625,1626,626,1626,627,1626,628,1626,629,1626,630,1626,631,1626,632,1626,633,1626,634,1626,635,1626,636,1626,637,1626,638,1626,639,1626,640,1626,641,1626,642,1626,643,1626,644,1626,645,1626,646,1626,647,1626,648,1626,649,1626,650,1626,651,1626,652,1626,653,1626,654,1626,655,1626,656,1626,657,1626,658,1626,659,1626,660,1626,661,1626,662,1626,663,1626,664,1626,665,1626,666,1626,667,1626,668,1626,669,1626,670,1626,671,1626,672,1626,673,1626,674,1626,675,1626,676,1626,677,1626,678,1626,680,1626,681,1626,682,1626,683,1626,684,1626,685,1626,686,1626,687,1626,688,1626,689,1626,690,1626,691,1626,692,1626,694,1626,695,1626,696,1626,697,1626,698,1626,699,1626,700,1626,701,1626,702,1626,703,1626,704,1626,705,1626,706,1626,707,1626,708,1626,709,1626,710,1626,711,1626,712,1626,713,1626,714,1626,715,1626,716,1626,717,1626,718,1626,719,1626,720,1626,721,1626,722,1626,723,1626,724,1626,725,1626,3270,1626,3346,1627,476,1627,477,1627,478,1627,479,1627,480,1627,481,1627,482,1627,483,1627,484,1627,485,1627,486,1627,487,1627,488,1627,489,1627,490,1627,491,1627,492,1627,493,1627,494,1627,495,1627,496,1627,497,1627,498,1627,499,1627,500,1627,501,1627,502,1627,503,1627,504,1627,505,1627,506,1627,507,1627,508,1627,509,1627,510,1627,511,1627,512,1627,513,1627,514,1627,515,1627,516,1627,517,1627,518,1627,519,1627,520,1627,521,1627,522,1627,523,1627,524,1627,525,1627,526,1627,527,1627,528,1627,529,1627,530,1627,531,1627,532,1627,533,1627,534,1627,535,1627,536,1627,537,1627,538,1627,539,1627,540,1627,541,1627,542,1627,543,1627,544,1627,545,1627,546,1627,547,1627,548,1627,549,1627,550,1627,551,1627,552,1627,553,1627,554,1627,555,1627,556,1627,557,1627,558,1627,559,1627,560,1627,561,1627,562,1627,563,1627,564,1627,565,1627,566,1627,567,1627,568,1627,569,1627,570,1627,571,1627,572,1627,573,1627,574,1627,575,1627,576,1627,577,1627,578,1627,579,1627,580,1627,581,1627,582,1627,583,1627,584,1627,585,1627,586,1627,587,1627,588,1627,589,1627,590,1627,591,1627,592,1627,593,1627,594,1627,595,1627,596,1627,597,1627,598,1627,599,1627,600,1627,601,1627,602,1627,603,1627,604,1627,605,1627,606,1627,607,1627,608,1627,609,1627,610,1627,611,1627,612,1627,613,1627,614,1627,615,1627,616,1627,617,1627,618,1627,619,1627,620,1627,621,1627,622,1627,623,1627,624,1627,625,1627,626,1627,627,1627,628,1627,629,1627,630,1627,631,1627,632,1627,633,1627,634,1627,635,1627,636,1627,637,1627,638,1627,639,1627,640,1627,641,1627,642,1627,643,1627,644,1627,645,1627,646,1627,647,1627,648,1627,649,1627,650,1627,651,1627,652,1627,653,1627,654,1627,655,1627,656,1627,657,1627,658,1627,659,1627,660,1627,661,1627,662,1627,663,1627,664,1627,665,1627,666,1627,667,1627,668,1627,669,1627,670,1627,671,1627,672,1627,673,1627,674,1627,675,1627,676,1627,677,1627,678,1627,679,1627,680,1627,681,1627,682,1627,684,1627,685,1627,686,1627,687,1627,688,1627,689,1627,690,1627,691,1627,692,1627,694,1627,695,1627,696,1627,697,1627,698,1627,699,1627,700,1627,701,1627,702,1627,703,1627,704,1627,705,1627,706,1627,707,1627,708,1627,709,1627,710,1627,711,1627,712,1627,713,1627,714,1627,715,1627,716,1627,717,1627,718,1627,719,1627,720,1627,721,1627,722,1627,723,1627,724,1627,725,1627,3270,1627,3346,1634,476,1634,477,1634,478,1634,479,1634,480,1634,481,1634,482,1634,483,1634,484,1634,485,1634,486,1634,487,1634,488,1634,489,1634,490,1634,491,1634,492,1634,493,1634,494,1634,495,1634,496,1634,497,1634,498,1634,499,1634,500,1634,501,1634,502,1634,503,1634,504,1634,505,1634,506,1634,507,1634,508,1634,509,1634,510,1634,511,1634,512,1634,513,1634,514,1634,515,1634,516,1634,517,1634,518,1634,519,1634,520,1634,521,1634,522,1634,523,1634,524,1634,525,1634,526,1634,527,1634,528,1634,529,1634,530,1634,531,1634,532,1634,533,1634,534,1634,535,1634,536,1634,537,1634,538,1634,539,1634,540,1634,541,1634,542,1634,543,1634,544,1634,545,1634,546,1634,547,1634,548,1634,549,1634,550,1634,551,1634,552,1634,553,1634,554,1634,555,1634,556,1634,557,1634,558,1634,559,1634,560,1634,561,1634,562,1634,563,1634,564,1634,565,1634,566,1634,567,1634,568,1634,569,1634,570,1634,571,1634,572,1634,573,1634,574,1634,575,1634,576,1634,577,1634,578,1634,579,1634,580,1634,581,1634,582,1634,583,1634,584,1634,585,1634,586,1634,587,1634,588,1634,589,1634,590,1634,591,1634,592,1634,593,1634,594,1634,595,1634,596,1634,597,1634,598,1634,599,1634,600,1634,601,1634,602,1634,603,1634,604,1634,605,1634,606,1634,607,1634,608,1634,609,1634,610,1634,611,1634,612,1634,613,1634,614,1634,615,1634,616,1634,617,1634,618,1634,619,1634,620,1634,621,1634,622,1634,623,1634,624,1634,625,1634,626,1634,627,1634,628,1634,629,1634,630,1634,631,1634,632,1634,633,1634,634,1634,635,1634,636,1634,637,1634,638,1634,639,1634,640,1634,641,1634,642,1634,643,1634,644,1634,645,1634,646,1634,647,1634,648,1634,649,1634,650,1634,651,1634,652,1634,653,1634,654,1634,655,1634,656,1634,657,1634,658,1634,659,1634,660,1634,661,1634,662,1634,663,1634,664,1634,665,1634,666,1634,667,1634,668,1634,669,1634,670,1634,671,1634,672,1634,673,1634,674,1634,675,1634,676,1634,677,1634,678,1634,679,1634,680,1634,681,1634,682,1634,683,1634,684,1634,685,1634,686,1634,687,1634,688,1634,689,1634,690,1634,691,1634,692,1634,694,1634,695,1634,696,1634,697,1634,698,1634,699,1634,700,1634,701,1634,702,1634,703,1634,704,1634,705,1634,706,1634,707,1634,708,1634,709,1634,710,1634,711,1634,712,1634,713,1634,714,1634,715,1634,716,1634,717,1634,718,1634,719,1634,720,1634,721,1634,722,1634,723,1634,724,1634,725,1796,477,1796,480,1796,489,1796,496,1796,497,1796,500,1796,504,1796,506,1796,511,1796,518,1796,525,1796,527,1796,539,1796,552,1796,576,1796,584,1796,602,1796,622,1796,623,1796,699,1796,704,1796,712,1797,477,1797,480,1797,489,1797,496,1797,497,1797,500,1797,504,1797,506,1797,511,1797,518,1797,525,1797,527,1797,539,1797,552,1797,576,1797,584,1797,602,1797,622,1797,623,1797,699,1797,704,1797,712,1800,484,1800,485,1800,487,1800,508,1800,509,1800,522,1800,523,1800,526,1800,528,1800,530,1800,533,1800,537,1800,540,1800,550,1800,553,1800,555,1800,559,1800,560,1800,569,1800,570,1800,573,1800,574,1800,575,1800,577,1800,591,1800,597,1800,598,1800,599,1800,601,1800,603,1800,604,1800,611,1800,614,1800,615,1800,621,1800,636,1800,643,1800,644,1800,649,1800,652,1800,691,1800,695,1800,696,1800,701,1800,703,1800,705,1800,707,1800,709,1800,718,1800,721,1801,484,1801,485,1801,487,1801,508,1801,509,1801,522,1801,523,1801,526,1801,528,1801,530,1801,533,1801,537,1801,540,1801,550,1801,553,1801,555,1801,559,1801,560,1801,569,1801,570,1801,573,1801,574,1801,575,1801,577,1801,591,1801,597,1801,598,1801,599,1801,601,1801,603,1801,604,1801,611,1801,614,1801,615,1801,621,1801,636,1801,643,1801,644,1801,649,1801,652,1801,691,1801,695,1801,696,1801,701,1801,703,1801,705,1801,707,1801,709,1801,718,1801,721,1827,478,1827,482,1827,486,1827,494,1827,532,1827,546,1827,549,1827,558,1827,561,1827,692,1827,694,1827,710,1827,714,1827,716,1827,717,1827,719,1827,723,1827,725,1828,478,1828,482,1828,486,1828,494,1828,532,1828,546,1828,549,1828,558,1828,561,1828,692,1828,694,1828,710,1828,714,1828,716,1828,717,1828,719,1828,723,1828,725,1842,498,1842,501,1842,505,1842,529,1842,531,1842,544,1842,630,1842,632,1842,635,1842,637,1842,687,1842,706,1842,722,1843,498,1843,501,1843,505,1843,529,1843,531,1843,544,1843,630,1843,632,1843,635,1843,637,1843,687,1843,706,1843,722,2029,510,2029,514,2029,520,2029,548,2029,556,2029,563,2029,586,2029,590,2029,627,2030,510,2030,514,2030,520,2030,548,2030,556,2030,563,2030,586,2030,590,2030,627,2308,697,2314,484,2314,485,2314,487,2314,491,2314,508,2314,509,2314,522,2314,523,2314,526,2314,528,2314,530,2314,533,2314,537,2314,540,2314,550,2314,553,2314,555,2314,559,2314,560,2314,564,2314,569,2314,570,2314,573,2314,574,2314,575,2314,577,2314,591,2314,597,2314,598,2314,599,2314,601,2314,603,2314,604,2314,611,2314,614,2314,615,2314,621,2314,636,2314,637,2314,643,2314,644,2314,649,2314,652,2314,691,2314,695,2314,696,2314,700,2314,701,2314,703,2314,705,2314,707,2314,709,2314,718,2314,721,2314,3270,2314,3346,2319,637,2366,491,2366,564,2379,711,2456,483,2477,489,2480,489,2480,490,2483,491,2487,493,2492,495,2492,3270,2515,508,2517,508,2547,477,2547,478,2547,480,2547,482,2547,484,2547,485,2547,486,2547,487,2547,489,2547,491,2547,494,2547,496,2547,497,2547,500,2547,504,2547,506,2547,508,2547,509,2547,511,2547,517,2547,518,2547,522,2547,523,2547,525,2547,526,2547,527,2547,528,2547,530,2547,532,2547,533,2547,537,2547,539,2547,540,2547,546,2547,549,2547,550,2547,552,2547,553,2547,555,2547,558,2547,559,2547,560,2547,561,2547,564,2547,569,2547,570,2547,573,2547,574,2547,575,2547,576,2547,577,2547,584,2547,591,2547,597,2547,598,2547,599,2547,601,2547,602,2547,603,2547,604,2547,611,2547,614,2547,615,2547,621,2547,622,2547,623,2547,636,2547,637,2547,643,2547,644,2547,649,2547,652,2547,691,2547,692,2547,694,2547,695,2547,696,2547,699,2547,701,2547,703,2547,704,2547,705,2547,707,2547,709,2547,710,2547,712,2547,714,2547,716,2547,717,2547,718,2547,719,2547,721,2547,723,2547,725,2547,3270,2547,3346,2549,477,2549,480,2549,489,2549,496,2549,497,2549,500,2549,504,2549,506,2549,511,2549,518,2549,525,2549,527,2549,539,2549,552,2549,576,2549,584,2549,602,2549,622,2549,623,2549,699,2549,704,2549,712,2550,477,2550,480,2550,489,2550,496,2550,497,2550,500,2550,504,2550,506,2550,511,2550,518,2550,525,2550,527,2550,539,2550,552,2550,576,2550,584,2550,602,2550,622,2550,623,2550,699,2550,704,2550,712,2552,484,2552,485,2552,487,2552,491,2552,508,2552,509,2552,522,2552,523,2552,526,2552,528,2552,530,2552,533,2552,537,2552,540,2552,550,2552,553,2552,555,2552,559,2552,560,2552,564,2552,569,2552,570,2552,573,2552,574,2552,575,2552,577,2552,591,2552,597,2552,598,2552,599,2552,601,2552,603,2552,604,2552,611,2552,614,2552,615,2552,621,2552,636,2552,637,2552,643,2552,644,2552,649,2552,652,2552,691,2552,695,2552,696,2552,701,2552,703,2552,705,2552,707,2552,709,2552,718,2552,721,2552,3270,2552,3346,2553,484,2553,485,2553,487,2553,491,2553,509,2553,522,2553,523,2553,526,2553,528,2553,530,2553,533,2553,537,2553,540,2553,550,2553,553,2553,555,2553,559,2553,560,2553,564,2553,569,2553,570,2553,573,2553,574,2553,575,2553,577,2553,591,2553,597,2553,598,2553,599,2553,601,2553,603,2553,604,2553,611,2553,614,2553,615,2553,621,2553,636,2553,637,2553,643,2553,644,2553,649,2553,652,2553,691,2553,695,2553,696,2553,701,2553,703,2553,705,2553,707,2553,709,2553,718,2553,721,2553,3270,2553,3346,2554,484,2554,485,2554,487,2554,491,2554,508,2554,509,2554,522,2554,523,2554,526,2554,528,2554,530,2554,533,2554,537,2554,540,2554,550,2554,553,2554,555,2554,559,2554,560,2554,564,2554,569,2554,570,2554,573,2554,574,2554,575,2554,577,2554,591,2554,597,2554,598,2554,599,2554,601,2554,603,2554,604,2554,611,2554,614,2554,615,2554,621,2554,636,2554,637,2554,643,2554,644,2554,649,2554,652,2554,691,2554,695,2554,696,2554,701,2554,703,2554,705,2554,707,2554,709,2554,718,2554,721,2554,3270,2554,3346,2559,519,2564,521,2570,478,2570,482,2570,486,2570,494,2570,532,2570,546,2570,549,2570,558,2570,561,2570,692,2570,694,2570,710,2570,714,2570,716,2570,717,2570,719,2570,723,2570,725,2578,498,2578,501,2578,505,2578,529,2578,531,2578,544,2578,630,2578,632,2578,635,2578,637,2578,687,2578,706,2578,722,2578,3346,2579,498,2579,501,2579,505,2579,529,2579,531,2579,544,2579,630,2579,632,2579,635,2579,637,2579,687,2579,706,2579,722,2580,498,2580,501,2580,505,2580,529,2580,531,2580,544,2580,630,2580,632,2580,635,2580,637,2580,687,2580,706,2580,722,2610,535,2612,477,2612,480,2612,489,2612,496,2612,497,2612,500,2612,504,2612,506,2612,511,2612,518,2612,525,2612,527,2612,536,2612,539,2612,552,2612,576,2612,584,2612,602,2612,612,2612,622,2612,623,2612,699,2612,704,2612,712,2617,538,2641,547,2650,551,2692,491,2692,564,2698,484,2698,485,2698,487,2698,491,2698,508,2698,509,2698,522,2698,523,2698,526,2698,528,2698,530,2698,533,2698,537,2698,540,2698,550,2698,553,2698,555,2698,559,2698,560,2698,564,2698,567,2698,569,2698,570,2698,573,2698,574,2698,575,2698,577,2698,591,2698,597,2698,598,2698,599,2698,601,2698,603,2698,604,2698,611,2698,614,2698,615,2698,621,2698,636,2698,637,2698,643,2698,644,2698,649,2698,652,2698,667,2698,668,2698,691,2698,695,2698,696,2698,700,2698,701,2698,703,2698,705,2698,707,2698,709,2698,718,2698,721,2698,3270,2698,3346,2701,568,2710,572,2724,508,2724,578,2727,579,2736,477,2736,478,2736,480,2736,482,2736,484,2736,485,2736,486,2736,487,2736,489,2736,491,2736,494,2736,496,2736,497,2736,500,2736,504,2736,506,2736,508,2736,509,2736,511,2736,517,2736,518,2736,522,2736,523,2736,525,2736,526,2736,527,2736,528,2736,530,2736,532,2736,533,2736,537,2736,539,2736,540,2736,546,2736,549,2736,550,2736,552,2736,553,2736,555,2736,558,2736,559,2736,560,2736,561,2736,564,2736,569,2736,570,2736,573,2736,574,2736,575,2736,576,2736,577,2736,582,2736,584,2736,591,2736,597,2736,598,2736,599,2736,601,2736,602,2736,603,2736,604,2736,611,2736,614,2736,615,2736,621,2736,622,2736,623,2736,636,2736,637,2736,643,2736,644,2736,649,2736,652,2736,691,2736,692,2736,694,2736,695,2736,696,2736,699,2736,701,2736,703,2736,704,2736,705,2736,707,2736,709,2736,710,2736,712,2736,714,2736,716,2736,717,2736,718,2736,719,2736,721,2736,723,2736,725,2736,3270,2736,3346,2743,585,2750,588,2765,596,2787,605,2794,608,2802,477,2802,480,2802,489,2802,496,2802,497,2802,500,2802,504,2802,506,2802,511,2802,518,2802,525,2802,527,2802,539,2802,552,2802,576,2802,584,2802,602,2802,612,2802,622,2802,623,2802,699,2802,704,2802,712,2821,618,2821,3346,2836,626,2841,628,2855,637,2855,3346,2872,647,2889,654,2894,656,2914,667,2917,668,2920,669,2930,675,2954,686,3276,3270,3277,3270,3278,3270,3279,3270,3280,3270,3281,3270,3282,3270,3283,3270,3284,3270,3285,3270,3286,3270,3287,3270,3288,3270,3289,3270,3290,3270,3291,3270,3292,3270,3293,3270,3294,3270,3295,3270,3296,3270,3297,3270,3298,3270,3299,3270,3300,3270,3301,3270,3302,3270,3303,3270,3304,3270,3305,3270,3306,3270,3307,3270,3308,3270,3309,3270,3310,3270,3311,3270,3312,3270,3313,3270,3314,3270,3315,3270,3316,3270,3317,3270,3318,3270,3319,3270,3320,3270,3321,3270,3322,3270,3323,3270,3324,3270,3325,3270,3326,3270,3327,3270,3328,3270,3329,3270,3330,3270,3331,3270,3332,3270,3333,3270,3334,3270,3335,3270,3336,3270,3337,3270,3338,3270,3339,3270,3340,3270,3345,3270,3351,3270],"member":[0,3346,1,3346,2,3346,3,3346,4,3346,5,3346,6,3346,7,3346,8,3346,9,3346,10,3346,11,3346,12,3347,13,3347,14,3347,15,3347,16,3347,17,3347,18,3347,19,3347,20,3347,21,3347,22,3347,23,3347,24,3347,25,3347,26,3347,27,3347,28,3347,29,3347,30,3347,31,3347,32,3347,33,3347,34,3347,35,3347,36,3347,37,3347,38,3347,39,3347,40,3347,41,3347,42,3347,43,3347,44,3347,45,3347,46,3347,47,3347,48,3347,49,3347,50,3347,51,3270,52,3270,53,3270,54,3270,55,3270,56,3270,57,3270,58,3270,59,3270,60,3270,61,3270,62,3270,63,3270,64,3270,65,3270,66,3270,67,3270,68,3270,69,3270,70,3270,71,3270,72,3270,73,3270,74,3270,75,3270,76,3270,77,3270,78,3270,79,3270,80,3270,81,3270,82,3270,83,3270,84,3270,85,3270,86,3270,87,3270,88,3270,89,3270,90,3270,91,3270,92,3270,93,3270,94,3270,95,3270,96,3270,97,3270,98,3270,99,3270,100,3270,101,3270,102,3270,103,3270,104,3270,105,3270,106,3270,107,3270,108,3270,109,3270,110,3270,111,3270,112,3270,113,3270,114,3270,115,3270,116,3270,117,3270,118,3270,119,3270,120,3270,121,3270,122,3270,123,3270,124,3270,125,3270,126,3270,127,3270,128,3270,129,3270,130,3270,131,3270,132,3270,133,3270,134,3270,135,3270,136,3270,137,3270,138,3270,139,3270,140,3270,141,3270,142,3270,143,3270,144,3270,145,3270,146,3270,147,3270,148,3270,149,3270,150,3270,151,3270,152,3270,153,3270,154,3270,155,3270,156,3270,157,3270,158,3270,159,3270,160,3270,161,3270,162,3270,163,3270,164,3270,726,476,727,476,728,476,729,476,730,477,731,478,732,479,733,479,734,480,735,480,736,481,737,481,738,482,739,482,740,483,741,483,742,483,743,484,744,484,745,485,746,486,747,486,748,487,749,488,750,489,751,489,752,490,753,490,754,490,755,490,756,491,757,492,758,492,759,492,760,492,761,493,762,494,763,494,764,495,765,496,766,496,767,497,768,497,769,498,770,499,771,499,772,499,773,499,774,500,775,501,776,501,777,502,778,502,779,502,780,502,781,503,782,503,783,503,784,503,785,504,786,505,787,506,788,506,789,507,790,508,791,508,792,509,793,510,794,510,795,511,796,511,797,511,798,512,799,512,800,513,801,514,802,515,803,515,804,515,805,515,806,516,807,516,808,516,809,516,810,517,811,518,812,518,813,519,814,520,815,521,816,521,817,522,818,523,819,524,820,524,821,525,822,526,823,526,824,527,825,527,826,528,827,529,828,530,829,530,830,531,831,532,832,533,833,533,834,534,835,534,836,534,837,534,838,535,839,536,840,536,841,536,842,536,843,537,844,538,845,539,846,540,847,541,848,541,849,541,850,541,851,542,852,542,853,543,854,543,855,543,856,543,857,544,858,545,859,545,860,546,861,547,862,547,863,548,864,548,865,549,866,550,867,551,868,552,869,552,870,553,871,554,872,554,873,555,874,556,875,557,876,557,877,558,878,558,879,559,880,560,881,561,882,561,883,562,884,562,885,563,886,564,887,564,888,564,889,564,890,565,891,565,892,565,893,565,894,566,895,566,896,567,897,568,898,569,899,569,900,569,901,569,902,570,903,570,904,570,905,571,906,572,907,572,908,573,909,573,910,574,911,574,912,575,913,575,914,576,915,577,916,577,917,578,918,578,919,579,920,580,921,580,922,581,923,581,924,582,925,582,926,582,927,582,928,583,929,584,930,584,931,585,932,586,933,587,934,587,935,588,936,589,937,589,938,590,939,590,940,591,941,592,942,592,943,592,944,592,945,593,946,594,947,594,948,595,949,595,950,595,951,595,952,596,953,596,954,597,955,597,956,598,957,599,958,600,959,601,960,601,961,601,962,601,963,602,964,602,965,603,966,603,967,604,968,604,969,604,970,605,971,605,972,606,973,606,974,607,975,608,976,609,977,609,978,610,979,610,980,610,981,610,982,611,983,611,984,611,985,611,986,612,987,613,988,613,989,613,990,613,991,614,992,615,993,615,994,616,995,617,996,617,997,618,998,618,999,619,1000,619,1001,619,1002,619,1003,620,1004,620,1005,620,1006,620,1007,621,1008,622,1009,623,1010,623,1011,624,1012,625,1013,625,1014,626,1015,626,1016,627,1017,628,1018,629,1019,629,1020,629,1021,629,1022,630,1023,631,1024,631,1025,631,1026,631,1027,632,1028,632,1029,633,1030,633,1031,633,1032,633,1033,634,1034,634,1035,634,1036,634,1037,635,1038,636,1039,637,1040,637,1041,638,1042,638,1043,638,1044,638,1045,639,1046,639,1047,639,1048,639,1049,640,1050,641,1051,641,1052,641,1053,641,1054,642,1055,642,1056,642,1057,642,1058,643,1059,644,1060,644,1061,645,1062,645,1063,645,1064,645,1065,646,1066,646,1067,647,1068,647,1069,648,1070,648,1071,648,1072,648,1073,649,1074,649,1075,650,1076,650,1077,651,1078,652,1079,653,1080,653,1081,653,1082,653,1083,654,1084,655,1085,656,1086,657,1087,657,1088,658,1089,658,1090,658,1091,658,1092,659,1093,659,1094,660,1095,660,1096,661,1097,662,1098,662,1099,663,1100,663,1101,663,1102,663,1103,664,1104,664,1105,665,1106,665,1107,665,1108,665,1109,666,1110,667,1111,668,1112,669,1113,670,1114,670,1115,671,1116,671,1117,671,1118,671,1119,672,1120,672,1121,672,1122,672,1123,673,1124,673,1125,673,1126,673,1127,674,1128,675,1129,675,1130,676,1131,676,1132,677,1133,677,1134,678,1135,679,1136,679,1137,679,1138,679,1139,680,1140,681,1141,682,1142,682,1143,683,1144,683,1145,683,1146,683,1147,684,1148,684,1149,685,1150,685,1151,686,1152,687,1153,688,1154,688,1155,689,1156,689,1157,689,1158,689,1159,690,1160,690,1161,691,1162,692,1163,692,1164,693,1165,694,1166,694,1167,694,1168,695,1169,696,1170,697,1171,698,1172,699,1173,699,1174,700,1175,700,1176,700,1177,700,1178,701,1179,701,1180,702,1181,702,1182,702,1183,702,1184,703,1185,704,1186,704,1187,705,1188,705,1189,706,1190,707,1191,707,1192,708,1193,709,1194,709,1195,710,1196,710,1197,711,1198,712,1199,712,1200,713,1201,713,1202,714,1203,714,1204,715,1205,715,1206,716,1207,716,1208,717,1209,717,1210,718,1211,719,1212,720,1213,720,1214,720,1215,720,1216,721,1217,721,1218,722,1219,723,1220,723,1221,724,1222,724,1223,725,1224,693,1225,432,1226,432,1227,432,1228,432,1229,432,1230,432,1231,432,1232,432,1233,432,1234,433,1235,433,1236,433,1237,433,1238,433,1239,433,1240,433,1241,433,1242,433,1243,434,1244,434,1245,434,1246,434,1247,434,1248,434,1249,434,1250,434,1251,434,1252,435,1253,435,1254,435,1255,435,1256,435,1257,435,1258,435,1259,435,1260,435,1261,436,1262,436,1263,436,1264,436,1265,436,1266,436,1267,436,1268,436,1269,436,1270,437,1271,437,1272,437,1273,437,1274,437,1275,437,1276,437,1277,437,1278,437,1279,438,1280,438,1281,438,1282,438,1283,438,1284,438,1285,438,1286,438,1287,438,1288,439,1289,439,1290,439,1291,439,1292,439,1293,439,1294,439,1295,439,1296,439,1297,440,1298,440,1299,440,1300,440,1301,440,1302,440,1303,440,1304,440,1305,440,1306,441,1307,441,1308,441,1309,441,1310,441,1311,441,1312,441,1313,441,1314,441,1315,442,1316,442,1317,442,1318,442,1319,442,1320,442,1321,442,1322,442,1323,442,1324,443,1325,443,1326,443,1327,443,1328,443,1329,443,1330,443,1331,443,1332,443,1333,444,1334,444,1335,444,1336,444,1337,444,1338,444,1339,444,1340,444,1341,444,1342,445,1343,445,1344,445,1345,445,1346,445,1347,445,1348,445,1349,445,1350,445,1351,446,1352,446,1353,446,1354,446,1355,446,1356,446,1357,446,1358,446,1359,446,1360,447,1361,447,1362,447,1363,447,1364,447,1365,447,1366,447,1367,447,1368,447,1369,448,1370,448,1371,448,1372,448,1373,448,1374,448,1375,448,1376,448,1377,448,1378,449,1379,449,1380,449,1381,449,1382,449,1383,449,1384,449,1385,449,1386,449,1387,450,1388,450,1389,450,1390,450,1391,450,1392,450,1393,450,1394,450,1395,450,1396,451,1397,451,1398,451,1399,451,1400,451,1401,451,1402,451,1403,451,1404,451,1405,452,1406,452,1407,452,1408,452,1409,452,1410,452,1411,452,1412,452,1413,452,1414,453,1415,453,1416,453,1417,453,1418,453,1419,453,1420,453,1421,453,1422,453,1423,454,1424,454,1425,454,1426,454,1427,454,1428,454,1429,454,1430,454,1431,454,1432,455,1433,455,1434,455,1435,455,1436,455,1437,455,1438,455,1439,455,1440,455,1441,456,1442,456,1443,456,1444,456,1445,456,1446,456,1447,456,1448,456,1449,456,1450,457,1451,457,1452,457,1453,457,1454,457,1455,457,1456,457,1457,457,1458,457,1459,458,1460,458,1461,458,1462,458,1463,458,1464,458,1465,458,1466,458,1467,458,1468,459,1469,459,1470,459,1471,459,1472,459,1473,459,1474,459,1475,459,1476,459,1477,460,1478,460,1479,460,1480,460,1481,460,1482,460,1483,460,1484,460,1485,460,1486,461,1487,461,1488,461,1489,461,1490,461,1491,461,1492,461,1493,461,1494,461,1495,462,1496,462,1497,462,1498,462,1499,462,1500,462,1501,462,1502,462,1503,462,1504,463,1505,463,1506,463,1507,463,1508,463,1509,463,1510,463,1511,463,1512,463,1513,464,1514,464,1515,464,1516,464,1517,464,1518,464,1519,464,1520,464,1521,464,1522,465,1523,465,1524,465,1525,465,1526,465,1527,465,1528,465,1529,465,1530,465,1531,466,1532,466,1533,466,1534,466,1535,466,1536,466,1537,466,1538,466,1539,466,1540,467,1541,467,1542,467,1543,467,1544,467,1545,467,1546,467,1547,467,1548,467,1549,468,1550,468,1551,468,1552,468,1553,468,1554,468,1555,468,1556,468,1557,468,1558,469,1559,469,1560,469,1561,469,1562,469,1563,469,1564,469,1565,469,1566,469,1567,470,1568,470,1569,470,1570,470,1571,470,1572,470,1573,470,1574,470,1575,470,1576,471,1577,471,1578,471,1579,471,1580,471,1581,471,1582,471,1583,471,1584,471,1585,472,1586,472,1587,472,1588,472,1589,472,1590,472,1591,472,1592,472,1593,472,1594,473,1595,473,1596,473,1597,473,1598,473,1599,473,1600,473,1601,473,1602,473,1603,474,1604,474,1605,474,1606,474,1607,474,1608,474,1609,474,1610,474,1611,474,1612,475,1613,475,1614,475,1615,475,1616,475,1617,475,1618,475,1619,475,1620,475,1636,476,1637,476,1638,476,1639,476,1640,477,1641,477,1642,477,1643,477,1644,478,1645,478,1646,478,1647,478,1648,479,1649,479,1650,479,1651,480,1652,480,1653,480,1654,480,1655,481,1656,481,1657,481,1658,482,1659,482,1660,482,1661,482,1662,483,1663,483,1664,483,1665,484,1666,484,1667,484,1668,484,1669,485,1670,485,1671,485,1672,485,1673,486,1674,486,1675,486,1676,486,1677,487,1678,487,1679,487,1680,487,1681,488,1682,488,1683,488,1684,489,1685,489,1686,489,1687,489,1688,490,1689,490,1690,490,1691,490,1692,491,1693,491,1694,491,1695,491,1696,492,1697,492,1698,492,1699,492,1700,493,1701,493,1702,493,1703,493,1704,494,1705,494,1706,494,1707,494,1708,495,1709,495,1710,495,1711,496,1712,496,1713,496,1714,496,1715,497,1716,497,1717,497,1718,497,1719,498,1720,498,1721,498,1722,498,1723,499,1724,499,1725,499,1726,499,1727,500,1728,500,1729,500,1730,500,1731,501,1732,501,1733,501,1734,501,1735,502,1736,502,1737,502,1738,502,1739,503,1740,503,1741,503,1742,503,1743,504,1744,504,1745,504,1746,504,1747,505,1748,505,1749,505,1750,505,1751,506,1752,506,1753,506,1754,506,1755,507,1756,507,1757,507,1758,508,1759,508,1760,508,1761,508,1762,509,1763,509,1764,509,1765,509,1766,510,1767,510,1768,510,1769,510,1770,511,1771,511,1772,511,1773,511,1774,512,1775,512,1776,512,1777,513,1778,513,1779,513,1780,514,1781,514,1782,514,1783,514,1784,515,1785,515,1786,515,1787,515,1788,516,1789,516,1790,516,1791,516,1792,517,1793,517,1794,517,1803,518,1804,518,1805,518,1806,518,1807,519,1808,519,1809,519,1810,519,1811,520,1812,520,1813,520,1814,520,1815,521,1816,521,1817,521,1818,522,1819,522,1820,522,1821,522,1822,523,1823,523,1824,523,1825,523,1830,524,1831,524,1832,524,1833,525,1834,525,1835,525,1836,525,1837,526,1838,526,1839,526,1840,526,1845,527,1846,527,1847,527,1848,527,1849,528,1850,528,1851,528,1852,528,1853,529,1854,529,1855,529,1856,529,1857,530,1858,530,1859,530,1860,530,1861,531,1862,531,1863,531,1864,531,1865,532,1866,532,1867,532,1868,532,1869,533,1870,533,1871,533,1872,533,1873,534,1874,534,1875,534,1876,534,1877,535,1878,535,1879,535,1880,536,1881,536,1882,536,1883,536,1884,537,1885,537,1886,537,1887,537,1888,538,1889,538,1890,538,1891,538,1892,539,1893,539,1894,539,1895,539,1896,540,1897,540,1898,540,1899,540,1900,541,1901,541,1902,541,1903,541,1904,542,1905,542,1906,542,1907,543,1908,543,1909,543,1910,543,1911,544,1912,544,1913,544,1914,544,1915,545,1916,545,1917,545,1918,546,1919,546,1920,546,1921,546,1922,547,1923,547,1924,547,1925,547,1926,548,1927,548,1928,548,1929,548,1930,549,1931,549,1932,549,1933,549,1934,550,1935,550,1936,550,1937,550,1938,551,1939,551,1940,551,1941,551,1942,552,1943,552,1944,552,1945,552,1946,553,1947,553,1948,553,1949,553,1950,554,1951,554,1952,554,1953,555,1954,555,1955,555,1956,555,1957,556,1958,556,1959,556,1960,556,1961,557,1962,557,1963,557,1964,558,1965,558,1966,558,1967,558,1968,559,1969,559,1970,559,1971,559,1972,560,1973,560,1974,560,1975,560,1976,561,1977,561,1978,561,1979,561,1980,562,1981,562,1982,562,1983,563,1984,563,1985,563,1986,563,1987,564,1988,564,1989,564,1990,564,1991,565,1992,565,1993,565,1994,565,1995,566,1996,566,1997,566,1998,567,1999,567,2000,567,2001,567,2002,568,2003,568,2004,568,2005,569,2006,569,2007,569,2008,569,2009,570,2010,570,2011,570,2012,570,2013,571,2014,571,2015,571,2016,572,2017,572,2018,572,2019,572,2020,573,2021,573,2022,573,2023,573,2024,574,2025,574,2026,574,2027,574,2032,575,2033,575,2034,575,2035,575,2036,576,2037,576,2038,576,2039,576,2040,577,2041,577,2042,577,2043,577,2044,578,2045,578,2046,578,2047,578,2048,579,2049,579,2050,579,2051,579,2052,580,2053,580,2054,580,2055,581,2056,581,2057,581,2058,582,2059,582,2060,582,2061,582,2063,583,2064,583,2065,583,2066,584,2067,584,2068,584,2069,584,2070,585,2071,585,2072,585,2073,585,2075,586,2076,586,2077,586,2078,586,2079,587,2080,587,2081,587,2082,588,2083,588,2084,588,2085,588,2086,589,2087,589,2088,589,2089,590,2090,590,2091,590,2092,590,2093,591,2094,591,2095,591,2096,591,2097,592,2098,592,2099,592,2100,592,2101,593,2102,593,2103,593,2104,594,2105,594,2106,594,2107,595,2108,595,2109,595,2110,595,2111,596,2112,596,2113,596,2114,597,2115,597,2116,597,2117,597,2118,598,2119,598,2120,598,2121,598,2122,599,2123,599,2124,599,2125,599,2126,600,2127,600,2128,600,2130,601,2131,601,2132,601,2133,601,2135,602,2136,602,2137,602,2138,602,2139,603,2140,603,2141,603,2142,603,2143,604,2144,604,2145,604,2146,604,2147,605,2148,605,2149,605,2150,605,2151,606,2152,606,2153,606,2154,607,2155,607,2156,607,2157,608,2158,608,2159,608,2160,608,2161,609,2162,609,2163,609,2164,610,2165,610,2166,610,2167,610,2168,611,2169,611,2170,611,2171,611,2172,612,2173,612,2174,612,2175,613,2176,613,2177,613,2178,613,2179,614,2180,614,2181,614,2182,614,2183,615,2184,615,2185,615,2186,615,2187,616,2188,616,2189,616,2190,617,2191,617,2192,617,2193,618,2194,618,2195,618,2196,619,2197,619,2198,619,2199,619,2206,620,2207,620,2208,620,2209,620,2210,621,2211,621,2212,621,2213,621,2214,622,2215,622,2216,622,2217,622,2218,623,2219,623,2220,623,2221,623,2222,624,2223,624,2224,624,2225,625,2226,625,2227,625,2228,625,2229,626,2230,626,2231,626,2232,626,2233,627,2234,627,2235,627,2236,627,2237,628,2238,628,2239,628,2240,629,2241,629,2242,629,2243,629,2244,630,2245,630,2246,630,2247,630,2248,631,2249,631,2250,631,2251,631,2252,632,2253,632,2254,632,2255,632,2256,633,2257,633,2258,633,2259,633,2262,634,2263,634,2264,634,2265,634,2266,635,2267,635,2268,635,2269,635,2270,636,2271,636,2272,636,2273,636,2275,637,2276,637,2277,637,2278,637,2279,638,2280,638,2281,638,2282,638,2283,639,2284,639,2285,639,2286,639,2287,640,2288,640,2289,640,2290,641,2291,641,2292,641,2293,641,2294,642,2295,642,2296,642,2297,642,2298,643,2299,643,2300,643,2301,643,2302,644,2303,644,2304,644,2305,644,2320,645,2321,645,2322,645,2323,645,2324,646,2325,646,2326,646,2327,647,2328,647,2329,647,2330,647,2331,648,2332,648,2333,648,2334,648,2335,649,2336,649,2337,649,2338,649,2339,650,2340,650,2341,650,2342,651,2343,651,2344,651,2345,652,2346,652,2347,652,2348,652,2349,653,2350,653,2351,653,2352,653,2353,654,2354,654,2355,654,2356,655,2357,655,2358,655,2359,656,2360,656,2361,656,2362,656,2407,657,2408,657,2409,657,2410,658,2411,658,2412,658,2413,658,2414,659,2415,659,2416,659,2417,659,2418,660,2419,660,2420,660,2421,661,2422,661,2423,661,2437,662,2438,662,2439,662,2440,663,2441,663,2442,663,2443,663,2444,664,2445,664,2446,664,2447,665,2448,665,2449,665,2450,665,2451,666,2452,666,2453,666,2467,667,2468,667,2469,667,2470,668,2471,668,2472,668,2473,669,2474,669,2475,669,2482,228,2517,245,2526,670,2527,670,2528,670,2529,671,2530,671,2531,671,2532,671,2533,672,2534,672,2535,672,2536,672,2537,673,2538,673,2539,673,2540,673,2546,253,2583,674,2584,674,2585,674,2586,675,2587,675,2588,675,2589,676,2590,676,2591,676,2592,677,2593,677,2594,677,2625,678,2626,678,2627,678,2628,679,2629,679,2630,679,2631,679,2675,680,2676,680,2677,680,2678,681,2679,681,2680,681,2681,682,2682,682,2683,682,2684,683,2685,683,2686,683,2687,683,2688,684,2689,684,2690,684,2728,685,2729,685,2730,685,2776,686,2777,686,2778,686,2801,353,2810,687,2811,687,2812,687,2813,687,2814,688,2815,688,2816,688,2882,689,2883,689,2884,689,2885,689,2913,408,2916,409,2931,690,2932,690,2933,690,2962,691,2963,691,2964,691,2965,691,2966,692,2967,692,2968,692,2969,692,2970,694,2971,694,2972,694,2973,694,2974,695,2975,695,2976,695,2977,695,2978,696,2979,696,2980,696,2981,696,2982,697,2983,697,2984,697,2985,697,2986,698,2987,698,2988,698,2989,699,2990,699,2991,699,2992,699,2993,700,2994,700,2995,700,2996,700,2997,701,2998,701,2999,701,3000,701,3001,702,3002,702,3003,702,3004,702,3005,703,3006,703,3007,703,3008,703,3009,704,3010,704,3011,704,3012,704,3013,705,3014,705,3015,705,3016,705,3017,706,3018,706,3019,706,3020,706,3021,707,3022,707,3023,707,3024,707,3025,708,3026,708,3027,708,3028,709,3029,709,3030,709,3031,709,3032,710,3033,710,3034,710,3035,710,3036,711,3037,711,3038,711,3039,711,3040,712,3041,712,3042,712,3043,712,3044,713,3045,713,3046,713,3047,714,3048,714,3049,714,3050,714,3051,715,3052,715,3053,715,3054,716,3055,716,3056,716,3057,716,3058,717,3059,717,3060,717,3061,717,3062,718,3063,718,3064,718,3065,718,3066,719,3067,719,3068,719,3069,719,3070,720,3071,720,3072,720,3073,720,3074,721,3075,721,3076,721,3077,721,3078,722,3079,722,3080,722,3081,722,3082,723,3083,723,3084,723,3085,723,3086,724,3087,724,3088,724,3089,725,3090,725,3091,725,3092,725,3093,432,3094,432,3095,432,3096,433,3097,433,3098,433,3099,434,3100,434,3101,434,3102,435,3103,435,3104,435,3105,436,3106,436,3107,436,3108,437,3109,437,3110,437,3111,438,3112,438,3113,438,3114,439,3115,439,3116,439,3117,440,3118,440,3119,440,3120,441,3121,441,3122,441,3123,442,3124,442,3125,442,3126,443,3127,443,3128,443,3129,444,3130,444,3131,444,3132,445,3133,445,3134,445,3135,446,3136,446,3137,446,3138,447,3139,447,3140,447,3141,448,3142,448,3143,448,3144,449,3145,449,3146,449,3147,450,3148,450,3149,450,3150,451,3151,451,3152,451,3153,452,3154,452,3155,452,3156,453,3157,453,3158,453,3159,454,3160,454,3161,454,3162,455,3163,455,3164,455,3165,456,3166,456,3167,456,3168,457,3169,457,3170,457,3171,458,3172,458,3173,458,3174,459,3175,459,3176,459,3177,460,3178,460,3179,460,3180,461,3181,461,3182,461,3183,462,3184,462,3185,462,3186,463,3187,463,3188,463,3189,464,3190,464,3191,464,3192,465,3193,465,3194,465,3195,466,3196,466,3197,466,3198,467,3199,467,3200,467,3201,468,3202,468,3203,468,3204,469,3205,469,3206,469,3207,470,3208,470,3209,470,3210,471,3211,471,3212,471,3213,472,3214,472,3215,472,3216,473,3217,473,3218,473,3219,474,3220,474,3221,474,3222,475,3223,475,3224,475],"requirement":[1621,165,1628,166,1630,167,1632,168,1633,169,1795,170,1799,171,1826,172,1841,173,2028,174,2062,175,2074,176,2129,177,2134,178,2200,179,2202,180,2204,181,2260,182,2274,183,2306,184,2309,185,2311,186,2313,187,2315,188,2317,189,2318,190,2363,191,2365,192,2367,193,2369,194,2371,195,2373,196,2375,197,2377,198,2380,199,2382,200,2384,201,2386,202,2388,203,2390,204,2392,205,2394,206,2396,207,2397,208,2399,209,2401,210,2403,211,2405,212,2424,213,2425,214,2427,215,2429,216,2431,217,2433,218,2435,219,2454,220,2457,221,2459,222,2461,223,2463,224,2465,225,2476,226,2479,227,2481,228,2484,229,2485,230,2488,231,2490,232,2493,233,2495,234,2497,235,2499,236,2500,237,2502,238,2504,239,2505,240,2506,241,2508,242,2510,243,2512,244,2514,245,2518,246,2520,247,2522,248,2524,249,2541,250,2543,251,2544,252,2545,253,2548,254,2551,255,2555,256,2557,257,2560,258,2562,259,2565,260,2567,261,2569,262,2571,263,2573,264,2575,265,2577,266,2581,267,2595,268,2597,269,2599,270,2601,271,2603,272,2605,273,2607,274,2608,275,2611,276,2613,277,2615,278,2618,279,2620,280,2622,281,2623,282,2632,283,2633,284,2635,285,2637,286,2639,287,2642,288,2644,289,2646,290,2648,291,2651,292,2653,293,2655,294,2657,295,2659,296,2661,297,2663,298,2665,299,2667,300,2669,301,2671,302,2673,303,2691,304,2693,305,2694,306,2696,307,2699,308,2702,309,2704,310,2706,311,2708,312,2711,313,2713,314,2715,315,2716,316,2718,317,2720,318,2722,319,2725,320,2731,321,2733,322,2735,323,2737,324,2739,325,2741,326,2744,327,2746,328,2748,329,2751,330,2753,331,2755,332,2757,333,2758,334,2760,335,2762,336,2763,337,2766,338,2768,339,2770,340,2772,341,2774,342,2779,343,2781,344,2783,345,2785,346,2788,347,2790,348,2792,349,2795,350,2797,351,2798,352,2800,353,2803,354,2804,355,2806,356,2808,357,2817,358,2819,359,2822,360,2823,361,2824,362,2826,363,2828,364,2830,365,2832,366,2834,367,2837,368,2839,369,2842,370,2843,371,2845,372,2846,373,2848,374,2849,375,2850,376,2852,377,2854,378,2857,379,2858,380,2859,381,2861,382,2862,383,2863,384,2865,385,2867,386,2868,387,2870,388,2873,389,2874,390,2876,391,2878,392,2880,393,2886,394,2887,395,2890,396,2892,397,2895,398,2897,399,2898,400,2900,401,2902,402,2904,403,2906,404,2907,405,2909,406,2910,407,2912,408,2915,409,2918,410,2921,411,2923,412,2924,413,2925,414,2926,415,2928,416,2934,417,2936,418,2938,419,2940,420,2941,421,2943,422,2945,423,2947,424,2948,425,2950,426,2952,427,2955,428,2957,429,2959,430,2960,431],"defaultImplementation":[1622,2499,1623,2543,1624,2622,1625,2873,1626,2940,1627,2947,1629,2715,1631,2551,1634,1632,1635,1621,1796,1633,1797,2062,1798,2548,1800,1633,1801,2074,1802,2551,1827,1633,1828,2129,1829,2569,1842,1633,1843,2134,1844,2577,2029,1633,2030,2274,2031,2715,2201,2569,2203,2569,2205,2551,2261,2551,2307,1621,2308,2484,2310,1621,2312,2548,2314,2696,2316,2551,2319,2551,2364,2548,2366,2551,2368,2577,2370,2551,2372,1621,2374,2551,2376,2569,2378,1621,2379,2544,2381,2548,2383,1621,2385,2569,2387,1621,2389,2569,2391,2569,2393,2551,2395,2569,2398,2551,2400,2577,2402,2569,2404,1621,2406,2569,2426,2548,2428,2569,2430,1621,2432,2548,2434,1621,2436,2569,2455,1621,2456,2632,2458,2551,2460,2551,2462,2569,2464,2551,2466,1621,2477,2479,2478,2548,2480,2541,2483,2691,2486,1621,2487,2693,2489,2569,2491,1621,2492,2504,2494,2548,2496,2548,2498,2577,2501,2548,2503,2577,2507,2548,2509,2577,2511,2548,2513,1621,2515,2722,2516,2551,2519,2551,2521,2715,2523,2548,2525,1621,2542,1621,2547,2735,2549,2800,2550,2545,2552,2313,2553,2545,2554,2758,2556,2548,2558,1621,2559,2757,2561,2715,2563,1621,2564,2317,2566,2551,2568,2551,2570,2545,2572,1621,2574,2548,2576,2551,2578,2623,2579,2878,2580,2512,2582,2548,2596,2551,2598,2577,2600,2551,2602,2577,2604,2569,2606,2551,2609,1621,2610,2797,2612,2655,2614,2551,2616,1621,2617,2803,2619,2548,2621,2551,2624,1621,2634,2577,2636,1621,2638,2569,2640,1621,2641,2822,2643,2715,2645,2569,2647,2551,2649,1621,2650,2823,2652,2548,2654,2551,2656,1621,2658,2551,2660,2715,2662,1621,2664,2569,2666,2551,2668,2551,2670,2569,2672,1621,2674,2715,2692,2365,2695,1621,2697,1621,2698,2845,2700,1621,2701,2848,2703,2551,2705,2551,2707,1621,2709,1621,2710,2849,2712,2551,2714,2551,2717,2551,2719,2548,2721,2551,2723,1621,2724,2857,2726,1621,2727,2858,2732,1621,2734,1621,2736,2382,2738,1621,2740,2548,2742,1621,2743,2862,2745,2715,2747,1621,2749,1621,2750,2867,2752,1621,2754,2715,2756,2551,2759,1621,2761,1621,2764,1621,2765,2505,2767,2551,2769,2551,2771,2551,2773,1621,2775,2551,2780,2548,2782,2551,2784,2551,2786,1621,2787,2886,2789,1621,2791,1621,2793,1621,2794,2897,2796,1621,2799,2551,2802,2611,2805,2551,2807,2551,2809,1621,2818,1621,2820,1621,2821,2424,2825,2551,2827,2548,2829,2548,2831,1621,2833,1621,2835,1621,2836,2909,2838,2715,2840,1621,2841,2842,2844,2577,2847,2577,2851,2577,2853,2551,2855,2318,2856,2577,2860,1621,2864,2551,2866,2551,2869,1621,2871,1621,2872,2923,2875,2551,2877,1621,2879,1621,2881,2551,2888,1621,2889,2924,2891,1621,2893,1621,2894,2925,2896,1621,2899,1621,2901,1621,2903,1621,2905,1621,2908,1621,2911,1621,2914,2696,2917,2696,2919,1621,2920,2861,2922,1621,2927,1621,2929,1621,2930,2906,2935,1621,2937,1621,2939,1621,2942,1621,2944,1621,2946,1621,2949,1621,2951,1621,2953,1621,2954,2959,2956,2577,2958,1621,2961,1621]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BinaryOperatorExprConvenienceInitializers.swift","symbols":[15,9,966]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BooleanLiteralExprConvenienceInitializers.swift","symbols":[15,9,969,21,9,967]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/CatchClauseConvenienceInitializer.swift","symbols":[16,9,742]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/DictionaryExprConvenienceInitializers.swift","symbols":[17,9,828]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FloatLiteralExprConvenienceInitializers.swift","symbols":[13,9,901,19,9,898]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/Format.swift","symbols":[14,14,693,15,13,1224,19,9,1164]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FunctionCallExprConvenienceInitializers.swift","symbols":[19,9,904]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierExprConvenienceInitializers.swift","symbols":[13,9,833]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierPatternConvenienceInitializers.swift","symbols":[13,9,939]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IfStmtConvenienceInitializers.swift","symbols":[18,2,1167]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IntegerLiteralExprConvenienceInitializers.swift","symbols":[15,9,985,21,9,982]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/MemberAccessExprConvenienceInitializers.swift","symbols":[16,9,909]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/SimpleTypeIdentifierConvenienceInitializers.swift","symbols":[15,9,1040]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringConvenienceInitializers.swift","symbols":[13,14,10,19,14,6,25,14,4,31,14,7,37,14,8,43,14,1,49,14,9,55,14,11,62,14,3,69,14,5,76,14,2,79,14,0]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringLiteralExprConvenienceInitializers.swift","symbols":[27,9,961,49,9,962]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/TupleExprElementConvenienceInitializers.swift","symbols":[17,2,918]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/TypeAnnotationConvenienceInitializers.swift","symbols":[13,9,852]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/VariableDeclConvenienceInitializers.swift","symbols":[15,9,797]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/BuildableBaseProtocols.swift","symbols":[16,16,175,20,7,2062,22,16,170,26,7,1795,30,7,1798,38,7,1797,47,7,1796,51,16,176,55,7,2074,57,16,171,61,7,1799,65,7,1802,73,7,1801,82,7,1800,86,16,183,90,7,2274,92,16,174,96,7,2028,100,7,2031,108,7,2030,117,7,2029,121,16,177,125,7,2129,127,16,172,131,7,1826,135,7,1829,143,7,1828,152,7,1827,156,16,168,160,7,1632,162,16,169,166,7,1633,170,7,1635,178,7,1634,182,16,178,186,7,2134,188,16,173,192,7,1841,196,7,1844,204,7,1843,213,7,1842]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/BuildableCollectionNodes.swift","symbols":[17,14,582,22,9,927,28,9,926,33,9,925,36,14,2059,46,14,2058,50,14,2061,56,14,2060,61,14,499,66,9,773,72,9,772,77,9,771,80,14,1724,90,14,1723,94,14,1726,100,14,1725,105,14,15,110,14,638,115,9,1044,121,9,1043,126,9,1042,129,14,2280,139,14,2279,143,14,2282,149,14,2281,154,14,35,159,14,564,164,9,889,170,9,888,175,9,887,178,14,1988,188,14,1987,192,14,1990,198,14,1989,203,14,642,208,9,1057,214,9,1056,219,9,1055,222,14,2295,232,14,2294,236,14,2297,242,14,2296,247,14,37,252,14,648,257,9,1072,263,9,1071,268,9,1069,271,14,2332,281,14,2331,285,14,2334,291,14,2333,296,14,18,301,14,633,306,9,1032,312,9,1031,317,9,1030,320,14,2257,330,14,2256,334,14,2259,340,14,2258,345,14,33,350,14,700,355,9,1177,361,9,1176,366,9,1175,369,14,2994,379,14,2993,383,14,2996,389,14,2995,394,14,653,399,9,1082,405,9,1081,410,9,1080,413,14,2350,423,14,2349,427,14,2352,433,14,2351,438,14,40,443,14,565,448,9,893,454,9,892,459,9,891,462,14,1992,472,14,1991,476,14,1994,482,14,1993,487,14,24,492,14,689,497,9,1158,503,9,1157,508,9,1156,511,14,2883,521,14,2882,525,14,2885,531,14,2884,536,14,50,541,14,702,546,9,1183,552,9,1182,557,9,1181,560,14,3002,570,14,3001,574,14,3004,580,14,3003,585,14,27,590,14,645,595,9,1064,601,9,1063,606,9,1062,609,14,2321,619,14,2320,623,14,2323,629,14,2322,634,14,38,639,14,610,644,9,981,650,9,980,655,9,979,658,14,2165,668,14,2164,672,14,2167,678,14,2166,683,14,28,688,14,592,693,9,944,699,9,943,704,9,942,707,14,2098,717,14,2097,721,14,2100,727,14,2099,732,14,26,737,14,536,742,9,842,748,9,841,753,9,840,756,14,1881,766,14,1880,770,14,1883,776,14,1882,781,14,502,786,9,780,792,9,779,797,9,778,800,14,1736,810,14,1735,814,14,1738,820,14,1737,825,14,25,830,14,476,835,9,729,841,9,728,846,9,727,849,14,1637,859,14,1636,863,14,1639,869,14,1638,874,14,42,879,14,490,884,9,755,890,9,754,895,9,753,898,14,1689,908,14,1688,912,14,1691,918,14,1690,923,14,613,928,9,990,934,9,989,939,9,988,942,14,2176,952,14,2175,956,14,2178,962,14,2177,967,14,29,972,14,619,977,9,1002,983,9,1001,988,9,1000,991,14,2197,1001,14,2196,1005,14,2199,1011,14,2198,1016,14,30,1021,14,534,1026,9,837,1030,9,836,1035,9,835,1038,14,1874,1046,14,1873,1050,14,1876,1056,14,1875,1061,14,14,1066,14,683,1071,9,1146,1077,9,1145,1082,9,1144,1085,14,2685,1095,14,2684,1099,14,2687,1105,14,2686,1110,14,20,1115,14,663,1120,9,1102,1126,9,1101,1131,9,1100,1134,14,2441,1144,14,2440,1148,14,2443,1154,14,2442,1159,14,49,1164,14,720,1169,9,1215,1173,9,1214,1178,9,1213,1181,14,3071,1189,14,3070,1193,14,3073,1199,14,3072,1204,14,13,1209,14,595,1214,9,951,1218,9,950,1223,9,949,1226,14,2108,1234,14,2107,1238,14,2110,1244,14,2109,1249,14,12,1254,14,515,1259,9,805,1265,9,804,1270,9,803,1273,14,1785,1283,14,1784,1287,14,1787,1293,14,1786,1298,14,16,1303,14,679,1308,9,1138,1314,9,1137,1319,9,1136,1322,14,2629,1332,14,2628,1336,14,2631,1342,14,2630,1347,14,19,1352,14,503,1357,9,784,1363,9,783,1368,9,782,1371,14,1740,1381,14,1739,1385,14,1742,1391,14,1741,1396,14,39,1401,14,673,1406,9,1126,1412,9,1125,1417,9,1124,1420,14,2538,1430,14,2537,1434,14,2540,1440,14,2539,1445,14,47,1450,14,641,1455,9,1053,1461,9,1052,1466,9,1051,1469,14,2291,1479,14,2290,1483,14,2293,1489,14,2292,1494,14,48,1499,14,541,1504,9,850,1510,9,849,1515,9,848,1518,14,1901,1528,14,1900,1532,14,1903,1538,14,1902,1543,14,17,1548,14,543,1553,9,856,1559,9,855,1564,9,854,1567,14,1908,1577,14,1907,1581,14,1910,1587,14,1909,1592,14,23,1597,14,492,1602,9,760,1608,9,759,1613,9,758,1616,14,1697,1626,14,1696,1630,14,1699,1636,14,1698,1641,14,21,1646,14,516,1651,9,809,1657,9,808,1662,9,807,1665,14,1789,1675,14,1788,1679,14,1791,1685,14,1790,1690,14,22,1695,14,631,1700,9,1026,1706,9,1025,1711,9,1024,1714,14,2249,1724,14,2248,1728,14,2251,1734,14,2250,1739,14,32,1744,14,658,1749,9,1091,1755,9,1090,1760,9,1089,1763,14,2411,1773,14,2410,1777,14,2413,1783,14,2412,1788,14,41,1793,14,634,1798,9,1036,1804,9,1035,1809,9,1034,1812,14,2263,1822,14,2262,1826,14,2265,1832,14,2264,1837,14,34,1842,14,671,1847,9,1118,1853,9,1117,1858,9,1116,1861,14,2530,1871,14,2529,1875,14,2532,1881,14,2531,1886,14,45,1891,14,672,1896,9,1122,1902,9,1121,1907,9,1120,1910,14,2534,1920,14,2533,1924,14,2536,1930,14,2535,1935,14,46,1940,14,639,1945,9,1048,1951,9,1047,1956,9,1046,1959,14,2284,1969,14,2283,1973,14,2286,1979,14,2285,1984,14,36,1989,14,620,1994,9,1006,2000,9,1005,2005,9,1004,2008,14,2207,2018,14,2206,2022,14,2209,2028,14,2208,2033,14,31,2038,14,665,2043,9,1108,2049,9,1107,2054,9,1106,2057,14,2448,2067,14,2447,2071,14,2450,2077,14,2449,2082,14,43,2087,14,629,2092,9,1021,2098,9,1020,2103,9,1019,2106,14,2241,2116,14,2240,2120,14,2243,2126,14,2242,2131,14,44]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/ExpressibleAsProtocols.swift","symbols":[16,16,254,17,7,2548,21,7,2550,25,7,2549,29,16,255,30,7,2551,34,7,2552,38,7,2553,42,7,2554,46,16,315,47,7,2715,49,16,262,50,7,2569,54,7,2570,58,16,165,59,7,1621,63,7,1622,67,7,1625,71,7,1627,75,7,1623,79,7,1626,83,7,1624,87,16,266,88,7,2577,92,7,2580,96,7,2579,100,7,2578,104,16,253,105,7,2545,109,7,2547,112,7,2546,116,16,323,117,7,2735,121,7,2736,125,16,200,126,7,2382,129,7,2383,133,16,236,134,7,2499,136,16,205,137,7,2392,140,7,2393,144,16,299,145,7,2665,148,7,2666,152,16,379,153,7,2857,155,16,304,156,7,2691,160,7,2692,164,16,383,165,7,2862,167,16,389,168,7,2873,170,16,182,171,7,2260,174,7,2261,178,16,196,179,7,2373,182,7,2374,186,16,188,187,7,2315,190,7,2316,194,16,308,195,7,2699,199,7,2701,202,7,2700,206,16,374,207,7,2848,209,16,324,210,7,2737,213,7,2738,217,16,273,218,7,2605,221,7,2606,225,16,246,226,7,2518,229,7,2519,233,16,277,234,7,2613,237,7,2614,241,16,384,242,7,2863,245,7,2864,249,16,268,250,7,2595,253,7,2596,257,16,245,258,7,2514,262,7,2517,266,7,2515,269,7,2516,273,16,187,274,7,2313,278,7,2314,282,16,261,283,7,2567,286,7,2568,290,16,260,291,7,2565,294,7,2566,298,16,300,299,7,2667,302,7,2668,306,16,339,307,7,2768,310,7,2769,314,16,340,315,7,2770,318,7,2771,322,16,355,323,7,2804,326,7,2805,330,16,390,331,7,2874,334,7,2875,338,16,356,339,7,2806,342,7,2807,346,16,344,347,7,2781,350,7,2782,354,16,194,355,7,2369,358,7,2370,362,16,332,363,7,2755,366,7,2756,370,16,309,371,7,2702,374,7,2703,378,16,208,379,7,2397,382,7,2398,386,16,192,387,7,2365,390,7,2366,394,16,270,395,7,2599,398,7,2600,402,16,319,403,7,2722,407,7,2724,410,7,2723,414,16,228,415,7,2481,419,7,2483,422,7,2482,426,16,326,427,7,2741,431,7,2743,434,7,2742,438,16,352,439,7,2798,442,7,2799,446,16,345,447,7,2783,450,7,2784,454,16,224,455,7,2463,458,7,2464,462,16,313,463,7,2711,466,7,2712,470,16,181,471,7,2204,474,7,2205,478,16,167,479,7,1630,482,7,1631,486,16,190,487,7,2318,490,7,2319,494,16,346,495,7,2785,499,7,2787,502,7,2786,506,16,394,507,7,2886,509,16,401,510,7,2900,513,7,2901,517,16,230,518,7,2485,522,7,2487,525,7,2486,529,16,305,530,7,2693,532,16,306,533,7,2694,536,7,2695,540,16,221,541,7,2457,544,7,2458,548,16,393,549,7,2880,552,7,2881,556,16,427,557,7,2952,561,7,2954,564,7,2953,568,16,430,569,7,2959,571,16,310,572,7,2704,575,7,2705,579,16,265,580,7,2575,583,7,2576,587,16,377,588,7,2852,591,7,2853,595,16,290,596,7,2646,599,7,2647,603,16,316,604,7,2716,607,7,2717,611,16,280,612,7,2620,615,7,2621,619,16,263,620,7,2571,623,7,2572,627,16,328,628,7,2746,631,7,2747,635,16,342,636,7,2774,639,7,2775,643,16,318,644,7,2720,647,7,2721,651,16,222,652,7,2459,655,7,2460,659,16,293,660,7,2653,663,7,2654,667,16,259,668,7,2562,672,7,2564,675,7,2563,679,16,189,680,7,2317,682,16,295,683,7,2657,686,7,2658,690,16,314,691,7,2713,694,7,2714,698,16,362,699,7,2824,702,7,2825,706,16,385,707,7,2865,710,7,2866,714,16,338,715,7,2766,718,7,2767,722,16,392,723,7,2878,726,7,2879,730,16,267,731,7,2581,734,7,2582,738,16,343,739,7,2779,742,7,2780,746,16,386,747,7,2867,749,16,297,750,7,2661,753,7,2662,757,16,244,758,7,2512,761,7,2513,765,16,330,766,7,2751,769,7,2752,773,16,275,774,7,2608,778,7,2610,781,7,2609,785,16,351,786,7,2797,788,16,237,789,7,2500,792,7,2501,796,16,279,797,7,2618,800,7,2619,804,16,317,805,7,2718,808,7,2719,812,16,363,813,7,2826,816,7,2827,820,16,403,821,7,2904,824,7,2905,828,16,347,829,7,2788,832,7,2789,836,16,232,837,7,2490,841,7,2492,844,7,2491,848,16,257,849,7,2557,853,7,2559,856,7,2558,860,16,333,861,7,2757,863,16,391,864,7,2876,867,7,2877,871,16,199,872,7,2380,875,7,2381,879,16,191,880,7,2363,883,7,2364,887,16,217,888,7,2431,891,7,2432,895,16,243,896,7,2510,899,7,2511,903,16,256,904,7,2555,907,7,2556,911,16,294,912,7,2655,915,7,2656,919,16,276,920,7,2611,924,7,2612,928,16,353,929,7,2800,933,7,2802,936,7,2801,940,16,216,941,7,2429,944,7,2430,948,16,334,949,7,2758,952,7,2759,956,16,329,957,7,2748,961,7,2750,964,7,2749,968,16,239,969,7,2504,971,16,234,972,7,2495,975,7,2496,979,16,292,980,7,2651,983,7,2652,987,16,325,988,7,2739,991,7,2740,995,16,264,996,7,2573,999,7,2574,1003,16,358,1004,7,2817,1007,7,2818,1011,16,359,1012,7,2819,1016,7,2821,1019,7,2820,1023,16,213,1024,7,2424,1026,16,214,1027,7,2425,1030,7,2426,1034,16,321,1035,7,2731,1038,7,2732,1042,16,226,1043,7,2476,1047,7,2477,1050,7,2478,1054,16,227,1055,7,2479,1059,7,2480,1063,16,250,1064,7,2541,1067,7,2542,1071,16,278,1072,7,2615,1076,7,2617,1079,7,2616,1083,16,354,1084,7,2803,1086,16,248,1087,7,2522,1090,7,2523,1094,16,287,1095,7,2639,1099,7,2641,1102,7,2640,1106,16,360,1107,7,2822,1109,16,233,1110,7,2493,1113,7,2494,1117,16,186,1118,7,2311,1121,7,2312,1125,16,241,1126,7,2506,1129,7,2507,1133,16,274,1134,7,2607,1136,16,415,1137,7,2926,1140,7,2927,1144,16,364,1145,7,2828,1148,7,2829,1152,16,424,1153,7,2947,1155,16,405,1156,7,2907,1159,7,2908,1163,16,404,1164,7,2906,1166,16,416,1167,7,2928,1171,7,2930,1174,7,2929,1178,16,411,1179,7,2921,1182,7,2922,1186,16,423,1187,7,2945,1190,7,2946,1194,16,207,1195,7,2396,1197,16,336,1198,7,2762,1200,16,285,1201,7,2635,1204,7,2636,1208,16,195,1209,7,2371,1212,7,2372,1216,16,251,1217,7,2543,1219,16,420,1220,7,2940,1222,16,322,1223,7,2733,1226,7,2734,1230,16,400,1231,7,2898,1234,7,2899,1238,16,366,1239,7,2832,1242,7,2833,1246,16,422,1247,7,2943,1250,7,2944,1254,16,185,1255,7,2309,1258,7,2310,1262,16,421,1263,7,2941,1266,7,2942,1270,16,337,1271,7,2763,1275,7,2765,1278,7,2764,1282,16,240,1283,7,2505,1285,16,429,1286,7,2957,1289,7,2958,1293,16,425,1294,7,2948,1297,7,2949,1301,16,402,1302,7,2902,1305,7,2903,1309,16,414,1310,7,2925,1312,16,397,1313,7,2892,1317,7,2894,1320,7,2893,1324,16,431,1325,7,2960,1328,7,2961,1332,16,341,1333,7,2772,1336,7,2773,1340,16,311,1341,7,2706,1344,7,2707,1348,16,418,1349,7,2936,1352,7,2937,1356,16,382,1357,7,2861,1359,16,410,1360,7,2918,1364,7,2920,1367,7,2919,1371,16,223,1372,7,2461,1375,7,2462,1379,16,231,1380,7,2488,1383,7,2489,1387,16,210,1388,7,2401,1391,7,2402,1395,16,201,1396,7,2384,1399,7,2385,1403,16,272,1404,7,2603,1407,7,2604,1411,16,281,1412,7,2622,1414,16,301,1415,7,2669,1418,7,2670,1422,16,204,1423,7,2390,1426,7,2391,1430,16,225,1431,7,2465,1434,7,2466,1438,16,203,1439,7,2388,1442,7,2389,1446,16,219,1447,7,2435,1450,7,2436,1454,16,283,1455,7,2632,1457,16,179,1458,7,2200,1461,7,2201,1465,16,215,1466,7,2427,1469,7,2428,1473,16,212,1474,7,2405,1477,7,2406,1481,16,211,1482,7,2403,1485,7,2404,1489,16,289,1490,7,2644,1493,7,2645,1497,16,197,1498,7,2375,1501,7,2376,1505,16,229,1506,7,2484,1508,16,252,1509,7,2544,1511,16,307,1512,7,2696,1516,7,2698,1519,7,2697,1523,16,381,1524,7,2859,1527,7,2860,1531,16,408,1532,7,2912,1536,7,2914,1539,7,2913,1543,16,409,1544,7,2915,1548,7,2917,1551,7,2916,1555,16,407,1556,7,2910,1559,7,2911,1563,16,372,1564,7,2845,1566,16,286,1567,7,2637,1570,7,2638,1574,16,206,1575,7,2394,1578,7,2395,1582,16,180,1583,7,2202,1586,7,2203,1590,16,348,1591,7,2790,1594,7,2791,1598,16,202,1599,7,2386,1602,7,2387,1606,16,218,1607,7,2433,1610,7,2434,1614,16,357,1615,7,2808,1618,7,2809,1622,16,184,1623,7,2306,1627,7,2308,1630,7,2307,1634,16,198,1635,7,2377,1639,7,2379,1642,7,2378,1646,16,302,1647,7,2671,1650,7,2672,1654,16,220,1655,7,2454,1659,7,2456,1662,7,2455,1666,16,298,1667,7,2663,1670,7,2664,1674,16,350,1675,7,2795,1678,7,2796,1682,16,399,1683,7,2897,1685,16,349,1686,7,2792,1690,7,2794,1693,7,2793,1697,16,365,1698,7,2830,1701,7,2831,1705,16,335,1706,7,2760,1709,7,2761,1713,16,375,1714,7,2849,1716,16,312,1717,7,2708,1721,7,2710,1724,7,2709,1728,16,412,1729,7,2923,1731,16,388,1732,7,2870,1736,7,2872,1739,7,2871,1743,16,398,1744,7,2895,1747,7,2896,1751,16,396,1752,7,2890,1755,7,2891,1759,16,419,1760,7,2938,1763,7,2939,1767,16,378,1768,7,2854,1772,7,2855,1775,7,2856,1779,16,376,1780,7,2850,1783,7,2851,1787,16,371,1788,7,2843,1791,7,2844,1795,16,193,1796,7,2367,1799,7,2368,1803,16,271,1804,7,2601,1807,7,2602,1811,16,238,1812,7,2502,1815,7,2503,1819,16,242,1820,7,2508,1823,7,2509,1827,16,373,1828,7,2846,1831,7,2847,1835,16,428,1836,7,2955,1839,7,2956,1843,16,395,1844,7,2887,1848,7,2889,1851,7,2888,1855,16,413,1856,7,2924,1858,16,284,1859,7,2633,1862,7,2634,1866,16,320,1867,7,2725,1871,7,2727,1874,7,2726,1878,16,380,1879,7,2858,1881,16,209,1882,7,2399,1885,7,2400,1889,16,235,1890,7,2497,1893,7,2498,1897,16,269,1898,7,2597,1901,7,2598,1905,16,361,1906,7,2823,1908,16,291,1909,7,2648,1913,7,2650,1916,7,2649,1920,16,387,1921,7,2868,1924,7,2869,1928,16,282,1929,7,2623,1932,7,2624,1936,16,288,1937,7,2642,1940,7,2643,1944,16,258,1945,7,2560,1948,7,2561,1952,16,296,1953,7,2659,1956,7,2660,1960,16,331,1961,7,2753,1964,7,2754,1968,16,166,1969,7,1628,1972,7,1629,1976,16,247,1977,7,2520,1980,7,2521,1984,16,303,1985,7,2673,1988,7,2674,1992,16,367,1993,7,2834,1997,7,2836,2000,7,2835,2004,16,327,2005,7,2744,2008,7,2745,2012,16,406,2013,7,2909,2015,16,368,2016,7,2837,2019,7,2838,2023,16,370,2024,7,2842,2026,16,369,2027,7,2839,2031,7,2841,2034,7,2840,2038,16,417,2039,7,2934,2042,7,2935,2046,16,426,2047,7,2950,2050,7,2951,2054,16,249,2055,7,2524,2058,7,2525]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/TokenSyntax.swift","symbols":[18,14,160,22,14,158,26,14,164,30,14,161,34,14,163,41,14,159,44,14,162]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/generated/Tokens.swift","symbols":[21,13,71,26,13,111,31,13,126,36,13,102,41,13,148,46,13,103,51,13,127,56,13,104,61,13,118,66,13,96,71,13,143,76,13,75,81,13,144,86,13,133,91,13,156,96,13,157,101,13,99,106,13,58,111,13,142,116,13,138,121,13,129,126,13,132,131,13,114,136,13,90,141,13,117,146,13,89,151,13,130,156,13,101,161,13,95,166,13,91,171,13,123,176,13,131,181,13,109,186,13,140,191,13,57,196,13,134,201,13,100,206,13,136,211,13,122,216,13,110,221,13,121,226,13,88,231,13,93,236,13,116,241,13,92,246,13,97,251,13,145,256,13,120,261,13,106,266,13,56,271,13,107,276,13,98,281,13,135,311,13,146,316,13,151,321,13,55,326,13,150,331,13,54,336,13,80,341,13,83,346,13,149,351,13,53,356,13,128,361,13,67,366,13,113,371,13,141,376,13,112,381,13,155,386,13,115,391,13,125,396,13,119,401,13,76,406,13,108,411,13,139,416,13,147,421,13,74,426,13,84,431,13,79,436,13,64,441,13,63,446,13,86,451,13,65,456,13,154,461,13,70,466,13,153,471,13,62,476,13,68,481,13,60,486,13,69,491,13,73,496,13,59,501,13,85,506,13,66,511,13,52,516,13,137,521,13,152,526,13,61,531,13,51,536,13,72,541,13,78,546,13,77,551,13,82,556,13,81,561,13,87,566,13,124,571,13,94,576,13,105]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableNodes.swift","symbols":[17,14,517,37,9,810,75,14,1792,81,14,1794,88,14,1793,93,14,713,113,9,1201,136,9,1200,174,14,3044,180,14,3046,187,14,3045,192,14,718,208,9,1210,240,14,3062,246,14,3065,253,14,3064,260,14,3063,264,14,559,276,9,879,302,14,1968,308,14,1971,315,14,1970,322,14,1969,326,14,696,346,9,1169,385,14,2978,391,14,2981,398,14,2980,405,14,2979,409,14,709,425,9,1193,443,9,1194,475,14,3028,481,14,3031,488,14,3030,495,14,3029,499,14,701,515,9,1178,533,9,1179,565,14,2997,571,14,3000,578,14,2999,585,14,2998,589,14,568,605,9,897,637,14,2002,643,14,2004,650,14,2003,655,14,583,675,9,928,714,14,2063,720,14,2065,727,14,2064,732,14,533,748,9,832,779,14,1869,785,14,1872,792,14,1871,799,14,1870,803,14,509,815,9,792,841,14,1762,847,14,1765,854,14,1764,861,14,1763,865,14,537,877,9,843,903,14,1884,909,14,1887,916,14,1886,923,14,1885,927,14,643,939,9,1058,965,14,2298,971,14,2301,978,14,2300,985,14,2299,989,14,528,1001,9,826,1027,14,1849,1033,14,1852,1040,14,1851,1047,14,1850,1051,14,508,1063,9,791,1076,9,790,1102,14,1758,1108,14,1761,1115,14,1760,1122,14,1759,1126,14,523,1138,9,818,1164,14,1822,1170,14,1825,1177,14,1824,1184,14,1823,1188,14,522,1200,9,817,1226,14,1818,1232,14,1821,1239,14,1820,1246,14,1819,1250,14,560,1262,9,880,1288,14,1975,1294,14,1973,1301,14,1974,1308,14,1972,1312,14,598,1324,9,956,1350,14,2118,1356,14,2121,1363,14,2120,1370,14,2119,1374,14,599,1386,9,957,1412,14,2122,1418,14,2125,1425,14,2124,1432,14,2123,1436,14,614,1448,9,991,1474,14,2179,1480,14,2182,1487,14,2181,1494,14,2180,1498,14,649,1514,9,1073,1531,9,1074,1563,14,2335,1569,14,2338,1576,14,2337,1583,14,2336,1587,14,615,1603,9,992,1620,9,993,1652,14,2183,1658,14,2186,1665,14,2185,1672,14,2184,1676,14,603,1688,9,965,1713,14,2139,1719,14,2142,1726,14,2141,1733,14,2140,1737,14,707,1757,9,1190,1781,9,1191,1819,14,3021,1825,14,3024,1832,14,3023,1839,14,3022,1843,14,591,1863,9,940,1900,14,2093,1906,14,2096,1913,14,2095,1920,14,2094,1924,14,569,1936,9,899,1949,9,900,1975,14,2005,1981,14,2008,1988,14,2007,1995,14,2006,1999,14,721,2019,9,1216,2042,9,1217,2080,14,3074,2086,14,3077,2093,14,3076,2100,14,3075,2104,14,705,2124,9,1188,2147,9,1187,2185,14,3013,2191,14,3016,2198,14,3015,2205,14,3014,2209,14,530,2229,9,829,2268,14,1857,2274,14,1860,2281,14,1859,2288,14,1858,2292,14,578,2316,9,917,2361,14,2044,2367,14,2046,2372,14,2047,2388,14,2045,2393,14,491,2409,9,756,2441,14,1692,2447,14,1694,2452,14,1695,2464,14,1693,2469,14,585,2493,9,931,2538,14,2070,2544,14,2072,2549,14,2073,2565,14,2071,2570,14,611,2582,9,983,2595,9,984,2621,14,2168,2627,14,2171,2634,14,2170,2641,14,2169,2645,14,604,2657,9,968,2683,14,2143,2689,14,2146,2696,14,2145,2703,14,2144,2707,14,487,2735,9,748,2786,14,1677,2792,14,1680,2799,14,1679,2806,14,1678,2810,14,573,2834,9,908,2878,14,2020,2884,14,2023,2891,14,2022,2898,14,2021,2902,14,695,2918,9,1168,2950,14,2974,2956,14,2977,2963,14,2976,2970,14,2975,2974,14,691,2994,9,1161,3033,14,2962,3039,14,2965,3046,14,2964,3053,14,2963,3057,14,703,3069,9,1184,3094,14,3005,3100,14,3008,3107,14,3007,3114,14,3006,3118,14,605,3146,9,971,3177,9,970,3227,14,2147,3233,14,2149,3238,14,2150,3256,14,2148,3261,14,660,3281,9,1095,3304,9,1094,3342,14,2418,3348,14,2420,3355,14,2419,3360,14,493,3376,9,761,3408,14,1700,3414,14,1702,3419,14,1703,3431,14,1701,3436,14,566,3472,9,895,3512,9,894,3574,14,1995,3580,14,1997,3587,14,1996,3592,14,484,3616,9,744,3643,9,743,3687,14,1665,3693,14,1668,3700,14,1667,3707,14,1666,3711,14,652,3723,9,1078,3748,14,2345,3754,14,2348,3761,14,2347,3768,14,2346,3772,14,686,3792,9,1151,3830,14,2776,3836,14,2778,3843,14,2777,3848,14,570,3880,9,902,3915,9,903,3971,14,2009,3977,14,2012,3984,14,2011,3991,14,2010,3995,14,526,4027,9,822,4062,9,823,4118,14,1837,4124,14,1840,4131,14,1839,4138,14,1838,4142,14,636,4158,9,1038,4190,14,2270,4196,14,2273,4203,14,2272,4210,14,2271,4214,14,550,4230,9,866,4262,14,1934,4268,14,1937,4275,14,1936,4282,14,1935,4286,14,575,4302,9,913,4319,9,912,4351,14,2032,4357,14,2035,4364,14,2034,4371,14,2033,4375,14,540,4391,9,846,4422,14,1896,4428,14,1899,4435,14,1898,4442,14,1897,4446,14,524,4458,9,819,4471,9,820,4497,14,1830,4503,14,1832,4510,14,1831,4515,14,587,4543,9,934,4575,9,933,4625,14,2079,4631,14,2081,4638,14,2080,4643,14,601,4671,9,959,4702,9,960,4752,14,2130,4758,14,2133,4765,14,2132,4772,14,2131,4776,14,577,4788,9,915,4801,9,916,4827,14,2040,4833,14,2043,4840,14,2042,4847,14,2041,4851,14,485,4871,9,745,4909,14,1669,4915,14,1672,4922,14,1671,4929,14,1670,4933,14,553,4945,9,870,4971,14,1946,4977,14,1949,4984,14,1948,4991,14,1947,4995,14,521,5011,9,815,5029,9,816,5061,14,1815,5067,14,1817,5074,14,1816,5079,14,555,5103,9,873,5149,14,1953,5155,14,1956,5162,14,1955,5169,14,1954,5173,14,574,5205,9,911,5243,9,910,5299,14,2024,5305,14,2027,5312,14,2026,5319,14,2025,5323,14,621,5339,9,1007,5370,14,2210,5376,14,2213,5383,14,2212,5390,14,2211,5394,14,644,5406,9,1059,5419,9,1060,5445,14,2302,5451,14,2305,5458,14,2304,5465,14,2303,5469,14,597,5493,9,955,5521,9,954,5565,14,2114,5571,14,2117,5578,14,2116,5585,14,2115,5589,14,651,5605,9,1077,5637,14,2342,5643,14,2344,5650,14,2343,5655,14,527,5691,9,824,5729,9,825,5791,14,1845,5797,14,1848,5804,14,1847,5811,14,1846,5815,14,602,5851,9,963,5889,9,964,5951,14,2135,5957,14,2138,5964,14,2137,5971,14,2136,5975,14,557,5995,9,875,6018,9,876,6056,14,1961,6062,14,1963,6069,14,1962,6074,14,507,6090,9,789,6122,14,1755,6128,14,1757,6135,14,1756,6140,14,589,6164,9,937,6191,9,936,6235,14,2086,6241,14,2088,6248,14,2087,6253,14,535,6273,9,838,6311,14,1877,6317,14,1879,6324,14,1878,6329,14,500,6345,9,774,6377,14,1727,6383,14,1730,6390,14,1729,6397,14,1728,6401,14,539,6425,9,845,6471,14,1892,6477,14,1895,6484,14,1894,6491,14,1893,6495,14,576,6519,9,914,6565,14,2036,6571,14,2039,6578,14,2038,6585,14,2037,6589,14,622,6613,9,1008,6659,14,2217,6665,14,2215,6672,14,2216,6679,14,2214,6683,14,662,6719,9,1097,6761,9,1098,6823,14,2437,6829,14,2439,6836,14,2438,6841,14,606,6861,9,973,6884,9,972,6922,14,2151,6928,14,2153,6935,14,2152,6940,14,495,6956,9,764,6988,14,1708,6994,14,1710,7001,14,1709,7006,14,519,7022,9,813,7054,14,1807,7060,14,1809,7065,14,1810,7077,14,1808,7082,14,650,7098,9,1075,7116,9,1076,7148,14,2339,7154,14,2341,7161,14,2340,7166,14,712,7206,9,1199,7248,9,1198,7316,14,3040,7322,14,3043,7329,14,3042,7336,14,3041,7340,14,704,7380,9,1186,7422,9,1185,7490,14,3009,7496,14,3012,7503,14,3011,7510,14,3010,7514,14,480,7554,9,735,7596,9,734,7664,14,1651,7670,14,1654,7677,14,1653,7684,14,1652,7688,14,506,7728,9,788,7770,9,787,7838,14,1751,7844,14,1754,7851,14,1753,7858,14,1752,7862,14,518,7898,9,812,7936,9,811,7998,14,1803,8004,14,1806,8011,14,1805,8018,14,1804,8022,14,554,8042,9,872,8065,9,871,8103,14,1950,8109,14,1952,8116,14,1951,8122,14,612,8138,9,986,8170,14,2172,8176,14,2174,8183,14,2173,8188,14,479,8204,9,733,8221,9,732,8253,14,1648,8259,14,1650,8266,14,1649,8271,14,593,8287,9,945,8319,14,2101,8325,14,2103,8332,14,2102,8337,14,588,8377,9,935,8447,14,2082,8453,14,2084,8458,14,2085,8482,14,2083,8487,14,497,8527,9,768,8569,9,767,8637,14,1715,8643,14,1718,8650,14,1717,8657,14,1716,8661,14,552,8701,9,869,8744,9,868,8812,14,1942,8818,14,1945,8825,14,1944,8832,14,1943,8836,14,584,8860,9,930,8886,9,929,8930,14,2066,8936,14,2069,8943,14,2068,8950,14,2067,8954,14,525,8994,9,821,9062,14,1833,9068,14,1836,9075,14,1835,9082,14,1834,9086,14,617,9102,9,995,9119,9,996,9151,14,2190,9157,14,2192,9164,14,2191,9169,14,618,9185,9,997,9203,9,998,9235,14,2193,9241,14,2195,9248,14,2194,9253,14,477,9281,9,730,9332,14,1640,9338,14,1643,9345,14,1642,9352,14,1641,9356,14,580,9376,9,921,9399,9,920,9437,14,2052,9443,14,2054,9450,14,2053,9455,14,489,9491,9,751,9531,9,750,9593,14,1684,9599,14,1687,9606,14,1686,9613,14,1685,9617,14,513,9637,9,800,9676,14,1777,9682,14,1779,9689,14,1778,9694,14,538,9722,9,844,9772,14,1888,9778,14,1890,9783,14,1891,9801,14,1889,9806,14,511,9830,9,796,9856,9,795,9900,14,1770,9906,14,1773,9913,14,1772,9920,14,1771,9925,14,547,9949,9,861,9975,9,862,10019,14,1922,10025,14,1924,10030,14,1925,10046,14,1923,10052,14,496,10076,9,766,10102,9,765,10146,14,1711,10152,14,1714,10159,14,1713,10166,14,1712,10171,14,699,10211,9,1173,10253,9,1172,10321,14,2989,10327,14,2992,10334,14,2991,10341,14,2990,10346,14,504,10374,9,785,10424,14,1743,10430,14,1746,10437,14,1745,10444,14,1744,10449,14,674,10465,9,1127,10497,14,2583,10503,14,2585,10510,14,2584,10516,14,623,10552,9,1009,10592,9,1010,10654,14,2218,10660,14,2221,10667,14,2220,10674,14,2219,10679,14,664,10699,9,1103,10722,9,1104,10760,14,2444,10766,14,2446,10773,14,2445,10778,14,675,10794,9,1128,10812,9,1129,10844,14,2586,10850,14,2588,10857,14,2587,10863,14,670,10883,9,1113,10907,9,1114,10945,14,2526,10951,14,2528,10958,14,2527,10964,14,682,10984,9,1141,11008,9,1142,11046,14,2681,11052,14,2683,11059,14,2682,11065,14,545,11093,9,858,11125,9,859,11175,14,1915,11181,14,1917,11188,14,1916,11194,14,708,11226,9,1192,11284,14,3025,11290,14,3027,11297,14,3026,11303,14,581,11327,9,922,11354,9,923,11398,14,2055,11404,14,2057,11411,14,2056,11417,14,659,11441,9,1092,11468,9,1093,11512,14,2414,11518,14,2416,11523,14,2417,11539,14,2415,11545,14,625,11569,9,1012,11596,9,1013,11640,14,2225,11646,14,2227,11651,14,2228,11667,14,2226,11673,14,681,11693,9,1140,11731,14,2678,11737,14,2680,11744,14,2679,11749,14,698,11765,9,1171,11796,14,2986,11802,14,2988,11809,14,2987,11815,14,680,11839,9,1139,11883,14,2675,11889,14,2677,11896,14,2676,11902,14,596,11918,9,952,11936,9,953,11968,14,2111,11974,14,2113,11981,14,2112,11987,14,688,12015,9,1153,12047,9,1154,12097,14,2814,12103,14,2816,12110,14,2815,12116,14,684,12136,9,1147,12159,9,1148,12197,14,2688,12203,14,2690,12210,14,2689,12216,14,661,12236,9,1096,12275,14,2421,12281,14,2423,12288,14,2422,12294,14,656,12310,9,1085,12342,14,2359,12348,14,2361,12353,14,2362,12365,14,2360,12371,14,690,12407,9,1159,12449,9,1160,12511,14,2931,12517,14,2933,12524,14,2932,12530,14,600,12554,9,958,12598,14,2126,12604,14,2128,12611,14,2127,12617,14,571,12633,9,905,12664,14,2013,12670,14,2015,12677,14,2014,12683,14,677,12703,9,1132,12726,9,1133,12764,14,2592,12770,14,2594,12777,14,2593,12783,14,669,12799,9,1112,12831,14,2473,12837,14,2475,12844,14,2474,12849,14,486,12869,9,746,12891,9,747,12929,14,1673,12935,14,1676,12942,14,1675,12949,14,1674,12953,14,494,12969,9,763,12987,9,762,13019,14,1704,13025,14,1707,13032,14,1706,13039,14,1705,13043,14,723,13063,9,1220,13085,9,1219,13123,14,3082,13129,14,3085,13136,14,3084,13143,14,3083,13147,14,714,13163,9,1203,13181,9,1202,13213,14,3047,13219,14,3050,13226,14,3049,13233,14,3048,13237,14,532,13249,9,831,13274,14,1865,13280,14,1868,13287,14,1867,13294,14,1866,13298,14,561,13322,9,882,13349,9,881,13393,14,1976,13399,14,1979,13406,14,1978,13413,14,1977,13417,14,717,13441,9,1209,13468,9,1208,13512,14,3058,13518,14,3061,13525,14,3060,13532,14,3059,13536,14,488,13552,9,749,13584,14,1681,13590,14,1683,13597,14,1682,13602,14,716,13650,9,1207,13704,9,1206,13784,14,3054,13790,14,3057,13797,14,3056,13804,14,3055,13808,14,482,13836,9,739,13868,9,738,13918,14,1658,13924,14,1661,13931,14,1660,13938,14,1659,13942,14,692,13962,9,1163,13984,9,1162,14022,14,2966,14028,14,2969,14035,14,2968,14042,14,2967,14046,14,478,14062,9,731,14094,14,1644,14100,14,1647,14107,14,1646,14114,14,1645,14118,14,725,14134,9,1223,14166,14,3089,14172,14,3092,14179,14,3091,14186,14,3090,14190,14,724,14214,9,1221,14242,9,1222,14286,14,3086,14292,14,3088,14299,14,3087,14304,14,549,14316,9,865,14342,14,1930,14348,14,1933,14355,14,1932,14362,14,1931,14366,14,710,14382,9,1196,14400,9,1195,14432,14,3032,14438,14,3035,14445,14,3034,14452,14,3033,14456,14,567,14472,9,896,14504,14,1998,14510,14,2000,14515,14,2001,14527,14,1999,14532,14,640,14556,9,1049,14602,14,2287,14608,14,2289,14615,14,2288,14620,14,667,14644,9,1110,14688,14,2467,14694,14,2469,14701,14,2468,14706,14,668,14730,9,1111,14774,14,2470,14780,14,2472,14787,14,2471,14792,14,666,14816,9,1109,14862,14,2451,14868,14,2453,14875,14,2452,14880,14,546,14892,9,860,14917,14,1918,14923,14,1921,14930,14,1920,14937,14,1919,14941,14,719,14957,9,1211,14989,14,3066,14995,14,3069,15002,14,3068,15009,14,3067,15013,14,694,15041,9,1166,15072,9,1165,15122,14,2970,15128,14,2973,15135,14,2972,15142,14,2971,15146,14,607,15158,9,974,15183,14,2154,15189,14,2156,15196,14,2155,15201,14,715,15217,9,1205,15235,9,1204,15267,14,3051,15273,14,3053,15280,14,3052,15285,14,481,15305,9,737,15326,9,736,15364,14,1655,15370,14,1657,15377,14,1656,15382,14,616,15398,9,994,15431,14,2187,15437,14,2189,15444,14,2188,15449,14,697,15469,9,1170,15507,14,2982,15513,14,2984,15518,14,2985,15532,14,2983,15537,14,711,15557,9,1197,15595,14,3036,15601,14,3038,15606,14,3039,15620,14,3037,15625,14,562,15645,9,884,15668,9,883,15706,14,1980,15712,14,1982,15719,14,1981,15724,14,483,15744,9,741,15766,9,740,15804,14,1662,15810,14,1664,15817,14,1663,15822,14,558,15854,9,878,15891,9,877,15947,14,1964,15953,14,1967,15960,14,1966,15967,14,1965,15971,14,609,15987,9,976,16005,9,977,16037,14,2161,16043,14,2163,16050,14,2162,16055,14,608,16071,9,975,16103,14,2157,16109,14,2159,16114,14,2160,16126,14,2158,16131,14,624,16151,9,1011,16188,14,2222,16194,14,2224,16201,14,2223,16206,14,594,16246,9,946,16291,9,947,16359,14,2104,16365,14,2106,16372,14,2105,16377,14,572,16405,9,907,16436,9,906,16486,14,2016,16492,14,2018,16497,14,2019,16515,14,2017,16520,14,647,16536,9,1067,16554,9,1068,16586,14,2327,16592,14,2329,16597,14,2330,16609,14,2328,16614,14,657,16634,9,1086,16657,9,1087,16695,14,2407,16701,14,2409,16708,14,2408,16713,14,655,16733,9,1084,16771,14,2356,16777,14,2358,16784,14,2357,16789,14,678,16809,9,1134,16848,14,2625,16854,14,2627,16861,14,2626,16866,14,637,16882,9,1039,16913,14,2275,16919,14,2278,16926,14,2277,16933,14,2276,16937,14,635,16961,9,1037,17005,14,2266,17011,14,2269,17018,14,2268,17025,14,2267,17029,14,630,17041,9,1022,17067,14,2244,17073,14,2247,17080,14,2246,17087,14,2245,17091,14,706,17111,9,1189,17150,14,3017,17156,14,3020,17163,14,3019,17170,14,3018,17174,14,531,17202,9,830,17254,14,1861,17260,14,1864,17267,14,1863,17274,14,1862,17278,14,501,17298,9,776,17321,9,775,17359,14,1731,17365,14,1734,17372,14,1733,17379,14,1732,17383,14,505,17399,9,786,17431,14,1747,17437,14,1750,17444,14,1749,17451,14,1748,17455,14,632,17471,9,1027,17489,9,1028,17521,14,2252,17527,14,2255,17534,14,2254,17541,14,2253,17545,14,687,17561,9,1152,17593,14,2810,17599,14,2813,17606,14,2812,17613,14,2811,17617,14,654,17633,9,1083,17665,14,2353,17671,14,2355,17678,14,2354,17683,14,544,17695,9,857,17720,14,1911,17726,14,1914,17733,14,1913,17740,14,1912,17744,14,579,17784,9,919,17855,14,2048,17861,14,2050,17866,14,2051,17890,14,2049,17895,14,722,17915,9,1218,17954,14,3078,17960,14,3081,17967,14,3080,17974,14,3079,17978,14,498,18014,9,769,18080,14,1719,18086,14,1722,18093,14,1721,18100,14,1720,18104,14,529,18124,9,827,18162,14,1853,18168,14,1856,18175,14,1855,18182,14,1854,18186,14,551,18202,9,867,18234,14,1938,18240,14,1940,18245,14,1941,18257,14,1939,18262,14,646,18282,9,1066,18305,9,1065,18343,14,2324,18349,14,2326,18356,14,2325,18361,14,542,18377,9,851,18409,14,1904,18415,14,1906,18422,14,1905,18427,14,548,18451,9,864,18477,9,863,18521,14,1926,18527,14,1929,18534,14,1928,18541,14,1927,18545,14,520,18561,9,814,18593,14,1811,18599,14,1814,18606,14,1813,18613,14,1812,18617,14,556,18633,9,874,18665,14,1957,18671,14,1960,18678,14,1959,18685,14,1958,18689,14,590,18701,9,938,18726,14,2089,18732,14,2092,18739,14,2091,18746,14,2090,18750,14,514,18770,9,801,18808,14,1780,18814,14,1783,18821,14,1782,18828,14,1781,18832,14,510,18852,9,794,18875,9,793,18913,14,1766,18919,14,1769,18926,14,1768,18933,14,1767,18937,14,563,18953,9,885,18985,14,1983,18991,14,1986,18998,14,1985,19005,14,1984,19009,14,626,19033,9,1014,19060,9,1015,19104,14,2229,19110,14,2231,19115,14,2232,19131,14,2230,19136,14,586,19148,9,932,19173,14,2075,19179,14,2078,19186,14,2077,19193,14,2076,19197,14,627,19213,9,1016,19245,14,2233,19251,14,2236,19258,14,2235,19265,14,2234,19270,14,628,19286,9,1017,19318,14,2237,19324,14,2239,19331,14,2238,19337,14,676,19357,9,1130,19379,9,1131,19417,14,2589,19423,14,2591,19430,14,2590,19436,14,685,19452,9,1149,19469,9,1150,19501,14,2728,19507,14,2730,19514,14,2729,19520,14,512,19540,9,799,19562,9,798,19600,14,1774,19606,14,1776,19613,14,1775]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-08-15-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/ResultBuilders.swift","symbols":[17,14,446,21,19,3135,25,19,3137,29,19,3136,33,21,1351,39,21,1357,44,21,1356,49,21,1355,55,21,1353,61,21,1354,67,21,1352,74,21,1359,80,21,1358,86,2,924,92,14,435,96,19,3102,100,19,3104,104,19,3103,108,21,1253,114,21,1258,119,21,1257,124,21,1256,130,21,1254,136,21,1255,142,21,1252,149,21,1260,155,21,1259,161,2,770,167,14,457,171,19,3168,175,19,3170,179,19,3169,183,21,1451,189,21,1456,194,21,1455,199,21,1454,205,21,1452,211,21,1453,217,21,1450,224,21,1458,230,21,1457,240,2,1041,246,14,444,250,19,3129,254,19,3131,258,19,3130,262,21,1334,268,21,1339,273,21,1338,278,21,1337,284,21,1335,290,21,1336,296,21,1333,303,21,1341,309,21,1340,319,2,886,325,14,460,329,19,3177,333,19,3179,337,19,3178,341,21,1478,347,21,1483,352,21,1482,357,21,1481,363,21,1479,369,21,1480,375,21,1477,382,21,1485,388,21,1484,398,2,1054,404,14,462,408,19,3183,412,19,3185,416,19,3184,420,21,1496,426,21,1501,431,21,1500,436,21,1499,442,21,1497,448,21,1498,454,21,1495,461,21,1503,467,21,1502,473,2,1070,479,14,455,483,19,3162,487,19,3164,491,19,3163,495,21,1433,501,21,1438,506,21,1437,511,21,1436,517,21,1434,523,21,1435,529,21,1432,536,21,1440,542,21,1439,548,2,1029,554,14,473,558,19,3216,562,19,3218,566,19,3217,570,21,1595,576,21,1600,581,21,1599,586,21,1598,592,21,1596,598,21,1597,604,21,1594,611,21,1602,617,21,1601,623,2,1174,629,14,463,633,19,3186,637,19,3188,641,19,3187,645,21,1505,651,21,1510,656,21,1509,661,21,1508,667,21,1506,673,21,1507,679,21,1504,686,21,1512,692,21,1511,702,2,1079,708,14,445,712,19,3132,716,19,3134,720,19,3133,724,21,1343,730,21,1348,735,21,1347,740,21,1346,746,21,1344,752,21,1345,758,21,1342,765,21,1350,771,21,1349,781,2,890,787,14,472,791,19,3213,795,19,3215,799,19,3214,803,21,1586,809,21,1591,814,21,1590,819,21,1589,825,21,1587,831,21,1588,837,21,1585,844,21,1593,850,21,1592,856,2,1155,862,14,474,866,19,3219,870,19,3221,874,19,3220,878,21,1604,884,21,1609,889,21,1608,894,21,1607,900,21,1605,906,21,1606,912,21,1603,919,21,1611,925,21,1610,931,2,1180,937,14,461,941,19,3180,945,19,3182,949,19,3181,953,21,1487,959,21,1492,964,21,1491,969,21,1490,975,21,1488,981,21,1489,987,21,1486,994,21,1494,1000,21,1493,1010,2,1061,1016,14,449,1020,19,3144,1024,19,3146,1028,19,3145,1032,21,1379,1038,21,1384,1043,21,1383,1048,21,1382,1054,21,1380,1060,21,1381,1066,21,1378,1073,21,1386,1079,21,1385,1085,2,978,1091,14,447,1095,19,3138,1099,19,3140,1103,19,3139,1107,21,1361,1113,21,1366,1118,21,1365,1123,21,1364,1129,21,1362,1135,21,1363,1141,21,1360,1148,21,1368,1154,21,1367,1164,2,941,1170,14,441,1174,19,3120,1178,19,3122,1182,19,3121,1186,21,1307,1192,21,1312,1197,21,1311,1202,21,1310,1208,21,1308,1214,21,1309,1220,21,1306,1227,21,1314,1233,21,1313,1239,2,839,1245,14,436,1249,19,3105,1253,19,3107,1257,19,3106,1261,21,1262,1267,21,1267,1272,21,1266,1277,21,1265,1283,21,1263,1289,21,1264,1295,21,1261,1302,21,1269,1308,21,1268,1314,2,777,1320,14,432,1324,19,3093,1328,19,3095,1332,19,3094,1336,21,1226,1342,21,1231,1347,21,1230,1352,21,1229,1358,21,1227,1364,21,1228,1370,21,1225,1377,21,1233,1383,21,1232,1389,2,726,1395,14,433,1399,19,3096,1403,19,3098,1407,19,3097,1411,21,1235,1417,21,1240,1422,21,1239,1427,21,1238,1433,21,1236,1439,21,1237,1445,21,1234,1452,21,1242,1458,21,1241,1464,2,752,1470,14,450,1474,19,3147,1478,19,3149,1482,19,3148,1486,21,1388,1492,21,1393,1497,21,1392,1502,21,1391,1508,21,1389,1514,21,1390,1520,21,1387,1527,21,1395,1533,21,1394,1543,2,987,1549,14,451,1553,19,3150,1557,19,3152,1561,19,3151,1565,21,1397,1571,21,1402,1576,21,1401,1581,21,1400,1587,21,1398,1593,21,1399,1599,21,1396,1606,21,1404,1612,21,1403,1622,2,999,1628,14,440,1632,19,3117,1636,19,3119,1640,19,3118,1644,21,1298,1650,21,1303,1655,21,1302,1660,21,1301,1666,21,1299,1672,21,1300,1678,21,1297,1685,21,1305,1691,21,1304,1697,2,834,1703,14,471,1707,19,3210,1711,19,3212,1715,19,3211,1719,21,1577,1725,21,1582,1730,21,1581,1735,21,1580,1741,21,1578,1747,21,1579,1753,21,1576,1760,21,1584,1766,21,1583,1772,2,1143,1778,14,465,1782,19,3192,1786,19,3194,1790,19,3193,1794,21,1523,1800,21,1528,1805,21,1527,1810,21,1526,1816,21,1524,1822,21,1525,1828,21,1522,1835,21,1530,1841,21,1529,1847,2,1099,1853,14,475,1857,19,3222,1861,19,3224,1865,19,3223,1869,21,1613,1875,21,1618,1880,21,1617,1885,21,1616,1891,21,1614,1897,21,1615,1903,21,1612,1910,21,1620,1916,21,1619,1922,2,1212,1928,14,448,1932,19,3141,1936,19,3143,1940,19,3142,1944,21,1370,1950,21,1375,1955,21,1374,1960,21,1373,1966,21,1371,1972,21,1372,1978,21,1369,1985,21,1377,1991,21,1376,1997,2,948,2003,14,438,2007,19,3111,2011,19,3113,2015,19,3112,2019,21,1280,2025,21,1285,2030,21,1284,2035,21,1283,2041,21,1281,2047,21,1282,2053,21,1279,2060,21,1287,2066,21,1286,2072,2,802,2078,14,470,2082,19,3207,2086,19,3209,2090,19,3208,2094,21,1568,2100,21,1573,2105,21,1572,2110,21,1571,2116,21,1569,2122,21,1570,2128,21,1567,2135,21,1575,2141,21,1574,2147,2,1135,2153,14,437,2157,19,3108,2161,19,3110,2165,19,3109,2169,21,1271,2175,21,1276,2180,21,1275,2185,21,1274,2191,21,1272,2197,21,1273,2203,21,1270,2210,21,1278,2216,21,1277,2222,2,781,2228,14,469,2232,19,3204,2236,19,3206,2240,19,3205,2244,21,1559,2250,21,1564,2255,21,1563,2260,21,1562,2266,21,1560,2272,21,1561,2278,21,1558,2285,21,1566,2291,21,1565,2301,2,1123,2307,14,459,2311,19,3174,2315,19,3176,2319,19,3175,2323,21,1469,2329,21,1474,2334,21,1473,2339,21,1472,2345,21,1470,2351,21,1471,2357,21,1468,2364,21,1476,2370,21,1475,2376,2,1050,2382,14,442,2386,19,3123,2390,19,3125,2394,19,3124,2398,21,1316,2404,21,1321,2409,21,1320,2414,21,1319,2420,21,1317,2426,21,1318,2432,21,1315,2439,21,1323,2445,21,1322,2451,2,847,2457,14,443,2461,19,3126,2465,19,3128,2469,19,3127,2473,21,1325,2479,21,1330,2484,21,1329,2489,21,1328,2495,21,1326,2501,21,1327,2507,21,1324,2514,21,1332,2520,21,1331,2526,2,853,2532,14,434,2536,19,3099,2540,19,3101,2544,19,3100,2548,21,1244,2554,21,1249,2559,21,1248,2564,21,1247,2570,21,1245,2576,21,1246,2582,21,1243,2589,21,1251,2595,21,1250,2605,2,757,2611,14,439,2615,19,3114,2619,19,3116,2623,19,3115,2627,21,1289,2633,21,1294,2638,21,1293,2643,21,1292,2649,21,1290,2655,21,1291,2661,21,1288,2668,21,1296,2674,21,1295,2684,2,806,2690,14,454,2694,19,3159,2698,19,3161,2702,19,3160,2706,21,1424,2712,21,1429,2717,21,1428,2722,21,1427,2728,21,1425,2734,21,1426,2740,21,1423,2747,21,1431,2753,21,1430,2763,2,1023,2769,14,464,2773,19,3189,2777,19,3191,2781,19,3190,2785,21,1514,2791,21,1519,2796,21,1518,2801,21,1517,2807,21,1515,2813,21,1516,2819,21,1513,2826,21,1521,2832,21,1520,2842,2,1088,2848,14,456,2852,19,3165,2856,19,3167,2860,19,3166,2864,21,1442,2870,21,1447,2875,21,1446,2880,21,1445,2886,21,1443,2892,21,1444,2898,21,1441,2905,21,1449,2911,21,1448,2921,2,1033,2927,14,467,2931,19,3198,2935,19,3200,2939,19,3199,2943,21,1541,2949,21,1546,2954,21,1545,2959,21,1544,2965,21,1542,2971,21,1543,2977,21,1540,2984,21,1548,2990,21,1547,3000,2,1115,3006,14,468,3010,19,3201,3014,19,3203,3018,19,3202,3022,21,1550,3028,21,1555,3033,21,1554,3038,21,1553,3044,21,1551,3050,21,1552,3056,21,1549,3063,21,1557,3069,21,1556,3075,2,1119,3081,14,458,3085,19,3171,3089,19,3173,3093,19,3172,3097,21,1460,3103,21,1465,3108,21,1464,3113,21,1463,3119,21,1461,3125,21,1462,3131,21,1459,3138,21,1467,3144,21,1466,3154,2,1045,3160,14,452,3164,19,3153,3168,19,3155,3172,19,3154,3176,21,1406,3182,21,1411,3187,21,1410,3192,21,1409,3198,21,1407,3204,21,1408,3210,21,1405,3217,21,1413,3223,21,1412,3233,2,1003,3239,14,466,3243,19,3195,3247,19,3197,3251,19,3196,3255,21,1532,3261,21,1537,3266,21,1536,3271,21,1535,3277,21,1533,3283,21,1534,3289,21,1531,3296,21,1539,3302,21,1538,3312,2,1105,3318,14,453,3322,19,3156,3326,19,3158,3330,19,3157,3334,21,1416,3340,21,1421,3345,21,1420,3350,21,1419,3356,21,1417,3362,21,1418,3368,21,1415,3375,21,1414,3381,21,1422,3387,2,1018]}]}