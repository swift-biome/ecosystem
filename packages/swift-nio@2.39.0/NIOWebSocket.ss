{"culture":"NIOWebSocket","dependencies":[{"package":"swift-nio","modules":["NIO","NIOConcurrencyHelpers","NIOCore","NIOEmbedded","NIOHTTP1","NIOPosix","_NIODataStructures"]}],"extensions":[],"partitions":[{"namespace":"NIOCore","communities":[{"community":"method","startIndex":0,"endIndex":5}]},{"namespace":"NIOWebSocket","communities":[{"community":"enum","startIndex":5,"endIndex":8},{"community":"struct","startIndex":8,"endIndex":12},{"community":"class","startIndex":12,"endIndex":18},{"community":"enum.case","startIndex":18,"endIndex":36},{"community":"init","startIndex":36,"endIndex":49},{"community":"subscript","startIndex":49,"endIndex":50},{"community":"type.property","startIndex":50,"endIndex":59},{"community":"property","startIndex":59,"endIndex":78},{"community":"type.method","startIndex":78,"endIndex":82},{"community":"method","startIndex":82,"endIndex":95},{"community":"type.op","startIndex":95,"endIndex":96},{"community":"typealias","startIndex":96,"endIndex":110}]},{"namespace":"Swift","communities":[{"community":"init","startIndex":110,"endIndex":113}]}],"identifiers":["s7NIOCore10ByteBufferV12NIOWebSocketE03webE4Mask_11indexOffsetyAD03WebE10MaskingKeyV_SitF","s7NIOCore10ByteBufferV12NIOWebSocketE03webE6Unmask_11indexOffsetyAD03WebE10MaskingKeyV_SitF","s7NIOCore10ByteBufferV12NIOWebSocketE06getWebE9ErrorCode2atAD0gehI0OSgSi_tF","s7NIOCore10ByteBufferV12NIOWebSocketE07readWebE9ErrorCodeAD0gehI0OSgyF","s7NIOCore10ByteBufferV12NIOWebSocketE5write03webE9ErrorCodeyAD03WebehI0O_tF","s12NIOWebSocket03WebB9ErrorCodeO","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO","s12NIOWebSocket0aB5ErrorO","s12NIOWebSocket03WebB10MaskingKeyV","s12NIOWebSocket03WebB5FrameV","s12NIOWebSocket03WebB6OpcodeV","s12NIOWebSocket0aB12UpgradeErrorV","s12NIOWebSocket03WebB12FrameDecoderC","s12NIOWebSocket03WebB12FrameEncoderC","s12NIOWebSocket03WebB20ProtocolErrorHandlerC","s12NIOWebSocket0aB14ClientUpgraderC","s12NIOWebSocket0aB14ServerUpgraderC","s12NIOWebSocket0aB15FrameAggregatorC","s12NIOWebSocket03WebB9ErrorCodeO016unexpectedServerD0yA2CmF","s12NIOWebSocket03WebB9ErrorCodeO08protocolD0yA2CmF","s12NIOWebSocket03WebB9ErrorCodeO13normalClosureyA2CmF","s12NIOWebSocket03WebB9ErrorCodeO15messageTooLargeyA2CmF","s12NIOWebSocket03WebB9ErrorCodeO15policyViolationyA2CmF","s12NIOWebSocket03WebB9ErrorCodeO16missingExtensionyA2CmF","s12NIOWebSocket03WebB9ErrorCodeO16unacceptableDatayA2CmF","s12NIOWebSocket03WebB9ErrorCodeO27dataInconsistentWithMessageyA2CmF","s12NIOWebSocket03WebB9ErrorCodeO7unknownyACs6UInt16VcACmF","s12NIOWebSocket03WebB9ErrorCodeO9goingAwayyA2CmF","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO011accumulatedC14SizeIsTooLargeyA2EmF","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO011receivedNewC24WithoutFinishingPreviousyA2EmF","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO045didReceiveFragmentBeforeReceivingTextOrBinaryC0yA2EmF","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO16tooManyFragmentsyA2EmF","s12NIOWebSocket0aB15FrameAggregatorC5ErrorO30nonFinalFragmentSizeIsTooSmallyA2EmF","s12NIOWebSocket0aB5ErrorO18invalidFrameLengthyA2CmF","s12NIOWebSocket0aB5ErrorO22fragmentedControlFrameyA2CmF","s12NIOWebSocket0aB5ErrorO27multiByteControlFrameLengthyA2CmF","s12NIOWebSocket03WebB10MaskingKeyV12arrayLiteralACs5UInt8Vd_tcfc","s12NIOWebSocket03WebB10MaskingKeyVyACSgxcSlRzs5UInt8V7ElementRtzlufc","s12NIOWebSocket03WebB12FrameDecoderC03maxD4SizeACSi_tcfc","s12NIOWebSocket03WebB12FrameEncoderCACycfc","s12NIOWebSocket03WebB20ProtocolErrorHandlerCACycfc","s12NIOWebSocket03WebB5FrameV3fin4rsv14rsv24rsv36opcode7maskKey4data13extensionDataACSb_S3bAA0cB6OpcodeVAA0cb7MaskingK0VSg7NIOCore10ByteBufferVASSgtcfc","s12NIOWebSocket03WebB5FrameV9allocatorAC7NIOCore19ByteBufferAllocatorV_tcfc","s12NIOWebSocket03WebB6OpcodeV07encodedcbD0ACSgs5UInt8V_tcfc","s12NIOWebSocket03WebB9ErrorCodeO10codeNumberACSi_tcfc","s12NIOWebSocket0aB14ClientUpgraderC10requestKey12maxFrameSize22automaticErrorHandling22upgradePipelineHandlerACSS_SiSb7NIOCore15EventLoopFutureCyytGAH7Channel_p_8NIOHTTP116HTTPResponseHeadVtctcfc","s12NIOWebSocket0aB14ServerUpgraderC12maxFrameSize22automaticErrorHandling13shouldUpgrade22upgradePipelineHandlerACSi_Sb7NIOCore15EventLoopFutureCy8NIOHTTP111HTTPHeadersVSgGAH7Channel_p_AK15HTTPRequestHeadVtcAJyytGAhP_p_ARtctcfc","s12NIOWebSocket0aB14ServerUpgraderC22automaticErrorHandling13shouldUpgrade22upgradePipelineHandlerACSb_7NIOCore15EventLoopFutureCy8NIOHTTP111HTTPHeadersVSgGAG7Channel_p_AJ15HTTPRequestHeadVtcAIyytGAgO_p_AQtctcfc","s12NIOWebSocket0aB15FrameAggregatorC23minNonFinalFragmentSize014maxAccumulatedC5Count0jkcI0ACSi_S2itcfc","s12NIOWebSocket03WebB10MaskingKeyVys5UInt8VSicip","s12NIOWebSocket03WebB6OpcodeV12continuationACvpZ","s12NIOWebSocket03WebB6OpcodeV15connectionCloseACvpZ","s12NIOWebSocket03WebB6OpcodeV4pingACvpZ","s12NIOWebSocket03WebB6OpcodeV4pongACvpZ","s12NIOWebSocket03WebB6OpcodeV4textACvpZ","s12NIOWebSocket03WebB6OpcodeV6binaryACvpZ","s12NIOWebSocket03WebB6OpcodeV8allCasesSayACGvpZ","s12NIOWebSocket0aB12UpgradeErrorV014unsupportedWebB6TargetACvpZ","s12NIOWebSocket0aB12UpgradeErrorV07invalidC6HeaderACvpZ","s12NIOWebSocket03WebB10MaskingKeyV10startIndexSivp","s12NIOWebSocket03WebB10MaskingKeyV8endIndexSivp","s12NIOWebSocket03WebB5FrameV12unmaskedData7NIOCore10ByteBufferVvp","s12NIOWebSocket03WebB5FrameV13extensionData7NIOCore10ByteBufferVSgvp","s12NIOWebSocket03WebB5FrameV21unmaskedExtensionData7NIOCore10ByteBufferVSgvp","s12NIOWebSocket03WebB5FrameV3finSbvp","s12NIOWebSocket03WebB5FrameV4data7NIOCore10ByteBufferVvp","s12NIOWebSocket03WebB5FrameV4rsv1Sbvp","s12NIOWebSocket03WebB5FrameV4rsv2Sbvp","s12NIOWebSocket03WebB5FrameV4rsv3Sbvp","s12NIOWebSocket03WebB5FrameV6lengthSivp","s12NIOWebSocket03WebB5FrameV6opcodeAA0cB6OpcodeVvp","s12NIOWebSocket03WebB5FrameV7maskKeyAA0cb7MaskingF0VSgvp","s12NIOWebSocket03WebB6OpcodeV09isControlD0Sbvp","s12NIOWebSocket03WebB6OpcodeV11descriptionSSvp","s12NIOWebSocket0aB14ClientUpgraderC17supportedProtocolSSvp","s12NIOWebSocket0aB14ClientUpgraderC22requiredUpgradeHeadersSaySSGvp","s12NIOWebSocket0aB14ServerUpgraderC17supportedProtocolSSvp","s12NIOWebSocket0aB14ServerUpgraderC22requiredUpgradeHeadersSaySSGvp","s12NIOWebSocket03WebB10MaskingKeyV6random5usingACxz_tSGRzlFZ","s12NIOWebSocket03WebB10MaskingKeyV6randomACyFZ","s12NIOWebSocket0aB14ClientUpgraderC16randomRequestKey5usingSSxz_tSGRzlFZ","s12NIOWebSocket0aB14ClientUpgraderC16randomRequestKeySSyFZ","s12NIOWebSocket03WebB10MaskingKeyV32withContiguousStorageIfAvailableyxSgxSRys5UInt8VGKXEKlF","s12NIOWebSocket03WebB10MaskingKeyV5index5afterS2i_tF","s12NIOWebSocket03WebB12FrameDecoderC6decode7context6buffer7NIOCore13DecodingStateOAG21ChannelHandlerContextC_AG10ByteBufferVztKF","s12NIOWebSocket03WebB12FrameEncoderC12handlerAdded7contexty7NIOCore21ChannelHandlerContextC_tF","s12NIOWebSocket03WebB12FrameEncoderC14handlerRemoved7contexty7NIOCore21ChannelHandlerContextC_tF","s12NIOWebSocket03WebB12FrameEncoderC5write7context4data7promisey7NIOCore21ChannelHandlerContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s12NIOWebSocket03WebB20ProtocolErrorHandlerC11errorCaught7context0G0y7NIOCore07ChannelF7ContextC_s0E0_ptF","s12NIOWebSocket0aB14ClientUpgraderC18shouldAllowUpgrade15upgradeResponseSb8NIOHTTP116HTTPResponseHeadV_tF","s12NIOWebSocket0aB14ClientUpgraderC7upgrade7context0E8Response7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_8NIOHTTP116HTTPResponseHeadVtF","s12NIOWebSocket0aB14ClientUpgraderC9addCustom21upgradeRequestHeadersy8NIOHTTP111HTTPHeadersVz_tF","s12NIOWebSocket0aB14ServerUpgraderC20buildUpgradeResponse7channel14upgradeRequest07initialG7Headers7NIOCore15EventLoopFutureCy8NIOHTTP111HTTPHeadersVGAH7Channel_p_AK15HTTPRequestHeadVAMtF","s12NIOWebSocket0aB14ServerUpgraderC7upgrade7context0E7Request7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_8NIOHTTP115HTTPRequestHeadVtF","s12NIOWebSocket0aB15FrameAggregatorC11channelRead7context4datay7NIOCore21ChannelHandlerContextC_AG6NIOAnyVtF","s12NIOWebSocket03WebB10MaskingKeyV2eeoiySbAC_ACtFZ","s12NIOWebSocket03WebB10MaskingKeyV19ArrayLiteralElementa","s12NIOWebSocket03WebB10MaskingKeyV5Indexa","s12NIOWebSocket03WebB10MaskingKeyV7Elementa","s12NIOWebSocket03WebB12FrameDecoderC10InboundOuta","s12NIOWebSocket03WebB12FrameDecoderC11OutboundOuta","s12NIOWebSocket03WebB12FrameDecoderC9InboundIna","s12NIOWebSocket03WebB12FrameEncoderC10OutboundIna","s12NIOWebSocket03WebB12FrameEncoderC11OutboundOuta","s12NIOWebSocket03WebB20ProtocolErrorHandlerC11OutboundOuta","s12NIOWebSocket03WebB20ProtocolErrorHandlerC9InboundIna","s12NIOWebSocket03WebB8Upgradera","s12NIOWebSocket0a6ClientB8Upgradera","s12NIOWebSocket0aB15FrameAggregatorC10InboundOuta","s12NIOWebSocket0aB15FrameAggregatorC9InboundIna","sSi12NIOWebSocketE03webB6OpcodeSiAA03WebbD0V_tcfc","ss5UInt8V12NIOWebSocketE03webC6OpcodeAbC03WebcE0V_tcfc","ss6UInt16V12NIOWebSocketE03webC9ErrorCodeAbC03WebceF0O_tcfc","s7NIOCore10ByteBufferV","s7NIOCore13DecodingStateO","s7NIOCore14ChannelHandlerP","s7NIOCore14ChannelHandlerP12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerP14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerPAAE14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore15EventLoopFutureC","s7NIOCore16EventLoopPromiseV","s7NIOCore19ByteBufferAllocatorV","s7NIOCore20ByteToMessageDecoderP","s7NIOCore20ByteToMessageDecoderP10InboundOutQa","s7NIOCore20ByteToMessageDecoderP10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVzSbtKF","s7NIOCore20ByteToMessageDecoderP12decoderAdded7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP14decoderRemoved7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderP6decode7context6bufferAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVztKF","s7NIOCore20ByteToMessageDecoderPAAE10decodeLast7context6buffer7seenEOFAA13DecodingStateOAA21ChannelHandlerContextC_AA0B6BufferVzSbtKF","s7NIOCore20ByteToMessageDecoderPAAE12decoderAdded7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderPAAE14decoderRemoved7contextyAA21ChannelHandlerContextC_tF","s7NIOCore20ByteToMessageDecoderPAAE14wrapInboundOutyAA6NIOAnyV0gH0QzF","s7NIOCore20ByteToMessageDecoderPAAE18shouldReclaimBytes6bufferSbAA0B6BufferV_tF","s7NIOCore21ChannelHandlerContextC","s7NIOCore21ChannelInboundHandlerP","s7NIOCore21ChannelInboundHandlerP04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore21ChannelInboundHandlerP0C2InQa","s7NIOCore21ChannelInboundHandlerP0C3OutQa","s7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP","s7NIOCore22ChannelOutboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP0C2InQa","s7NIOCore22ChannelOutboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22_ChannelInboundHandlerP11channelRead7context4datayAA0bD7ContextC_AA6NIOAnyVtF","s7NIOCore22_ChannelInboundHandlerP11errorCaught7context0E0yAA0bD7ContextC_s5Error_ptF","s7NIOCore23_ChannelOutboundHandlerP5write7context4data7promiseyAA0bD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore23_EmittingChannelHandlerP11OutboundOutQa","s7NIOCore6NIOAnyV","s7NIOCore7ChannelP","s8NIOHTTP111HTTPHeadersV","s8NIOHTTP115HTTPRequestHeadV","s8NIOHTTP116HTTPResponseHeadV","s8NIOHTTP126HTTPServerProtocolUpgraderP","s8NIOHTTP126HTTPServerProtocolUpgraderP09supportedC0SSvp","s8NIOHTTP126HTTPServerProtocolUpgraderP20buildUpgradeResponse7channel14upgradeRequest07initialG7Headers7NIOCore15EventLoopFutureCyAA11HTTPHeadersVGAH7Channel_p_AA15HTTPRequestHeadVALtF","s8NIOHTTP126HTTPServerProtocolUpgraderP22requiredUpgradeHeadersSaySSGvp","s8NIOHTTP126HTTPServerProtocolUpgraderP7upgrade7context0E7Request7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_AA15HTTPRequestHeadVtF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP09supportedC0SSvp","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP18shouldAllowUpgrade15upgradeResponseSbAA16HTTPResponseHeadV_tF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP22requiredUpgradeHeadersSaySSGvp","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP7upgrade7context0E8Response7NIOCore15EventLoopFutureCyytGAG21ChannelHandlerContextC_AA16HTTPResponseHeadVtF","s8NIOHTTP129NIOHTTPClientProtocolUpgraderP9addCustom21upgradeRequestHeadersyAA11HTTPHeadersVz_tF","sSG","sSH","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSR","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF","sSTsSL7ElementRpzrlE3maxABSgyF","sSTsSL7ElementRpzrlE3minABSgyF","sSTsSL7ElementRpzrlE6sortedSayABGyF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSb","sSi","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5index5after5IndexQzAD_tF","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSlsE5index_8offsetBy5IndexQzAD_SitF","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE6suffixy11SubSequenceQzSiF","sSlsE7isEmptySbvp","sSlsE8distance4from2toSi5IndexQz_AEtF","sSlsE8dropLasty11SubSequenceQzSiF","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","ss12CaseIterableP","ss12CaseIterableP8allCases03AllD0QzvpZ","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByArrayLiteralP0cD7ElementQa","ss4Voida","ss5ErrorP","ss5NeverO","ss5UInt8V","ss6UInt16V","ss8SendableP"],"vertices":[{"p":["ByteBuffer","webSocketMask(_:indexOffset:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["webSocketMask",7],["(",17],["_",1],[" ",17],["maskingKey",2],[": ",17],["WebSocketMaskingKey",18,8],[", ",17],["indexOffset",1],[": ",17],["Int",18,211],[" = 0)",17]],"s":[["func",12],[" ",17],["webSocketMask",7],["(",17],["WebSocketMaskingKey",18],[", ",17],["indexOffset",1],[": ",17],["Int",18],[")",17]],"d":"Applies the websocket masking operation.\n\n- parameters:\n    - maskingKey: The masking key.\n    - indexOffset: An integer offset to apply to the index into the masking key.\n        This is used when masking multiple \"contiguous\" byte buffers, to ensure that\n        the masking key is applied uniformly to the collection rather than from the\n        start each time."},{"p":["ByteBuffer","webSocketUnmask(_:indexOffset:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["webSocketUnmask",7],["(",17],["_",1],[" ",17],["maskingKey",2],[": ",17],["WebSocketMaskingKey",18,8],[", ",17],["indexOffset",1],[": ",17],["Int",18,211],[" = 0)",17]],"s":[["func",12],[" ",17],["webSocketUnmask",7],["(",17],["WebSocketMaskingKey",18],[", ",17],["indexOffset",1],[": ",17],["Int",18],[")",17]],"d":"Applies the WebSocket unmasking operation.\n\n- parameters:\n    - maskingKey: The masking key."},{"p":["ByteBuffer","getWebSocketErrorCode(at:)"],"f":[["func",12],[" ",17],["getWebSocketErrorCode",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,211],[") -> ",17],["WebSocketErrorCode",18,5],["?",17]],"s":[["func",12],[" ",17],["getWebSocketErrorCode",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["WebSocketErrorCode",18],["?",17]],"d":"Get a websocket error code from a byte buffer.\n\nThis method does not increment the reader index, and may be used to read an error\ncode from outside the readable range of bytes.\n\n- parameters:\n    - index: The index into the buffer to read the error code from.\n- returns: The error code, or `nil` if there were not enough bytes at that index."},{"p":["ByteBuffer","readWebSocketErrorCode()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readWebSocketErrorCode",7],["() -> ",17],["WebSocketErrorCode",18,5],["?",17]],"s":[["func",12],[" ",17],["readWebSocketErrorCode",7],["() -> ",17],["WebSocketErrorCode",18],["?",17]],"d":"Read a websocket error code from a byte buffer.\n\nThis method increments the reader index.\n\n- returns: The error code, or `nil` if there were not enough readable bytes."},{"p":["ByteBuffer","write(webSocketErrorCode:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["write",7],["(",17],["webSocketErrorCode",1],[" ",17],["code",2],[": ",17],["WebSocketErrorCode",18,5],[")",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["webSocketErrorCode",1],[": ",17],["WebSocketErrorCode",18],[")",17]],"d":"Write the given error code to the buffer.\n\n- parameters:\n    - code: The code to write into the buffer."},{"p":["WebSocketErrorCode"],"f":[["enum",12],[" ",17],["WebSocketErrorCode",7]],"s":[["enum",12],[" ",17],["WebSocketErrorCode",7]],"d":"An enum that represents websocket error codes.\n\nThis enum provides names to all non-reserved code numbers,\nto avoid users needing to remember the specific numerical values\nof those codes."},{"p":["NIOWebSocketFrameAggregator","Error"],"f":[["enum",12],[" ",17],["Error",7]],"s":[["enum",12],[" ",17],["Error",7]]},{"p":["NIOWebSocketError"],"f":[["enum",12],[" ",17],["NIOWebSocketError",7]],"s":[["enum",12],[" ",17],["NIOWebSocketError",7]],"d":"Errors thrown by the NIO websocket module."},{"p":["WebSocketMaskingKey"],"f":[["struct",12],[" ",17],["WebSocketMaskingKey",7]],"s":[["struct",12],[" ",17],["WebSocketMaskingKey",7]],"d":"A single 4-byte websocket masking key.\n\nWebSockets uses a masking key to prevent malicious users from injecting\npredictable binary sequences into websocket data streams. This structure provides\na more convenient method of interacting with a masking key than simply by passing\naround a four-tuple."},{"p":["WebSocketFrame"],"f":[["struct",12],[" ",17],["WebSocketFrame",7]],"s":[["struct",12],[" ",17],["WebSocketFrame",7]],"d":"A structured representation of a single WebSocket frame."},{"p":["WebSocketOpcode"],"f":[["struct",12],[" ",17],["WebSocketOpcode",7]],"s":[["struct",12],[" ",17],["WebSocketOpcode",7]],"d":"An operation code for a websocket frame."},{"p":["NIOWebSocketUpgradeError"],"f":[["struct",12],[" ",17],["NIOWebSocketUpgradeError",7]],"s":[["struct",12],[" ",17],["NIOWebSocketUpgradeError",7]],"d":"Errors that can be thrown by `NIOWebSocket` during protocol upgrade."},{"p":["WebSocketFrameDecoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["WebSocketFrameDecoder",7]],"s":[["class",12],[" ",17],["WebSocketFrameDecoder",7]],"d":"An inbound `ChannelHandler` that deserializes websocket frames into a structured\nformat for further processing.\n\nThis decoder has limited enforcement of compliance to RFC 6455. In particular, to guarantee\nthat the decoder can handle arbitrary extensions, only normative MUST/MUST NOTs that do not\nrelate to extensions (e.g. the requirement that control frames not have lengths larger than\n125 bytes) are enforced by this decoder.\n\nThis decoder does not have any support for decoding extensions. If you wish to support\nextensions, you should implement a message-to-message decoder that performs the appropriate\nframe transformation as needed. All the frame data is assumed to be application data by this\nparser."},{"p":["WebSocketFrameEncoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["WebSocketFrameEncoder",7]],"s":[["class",12],[" ",17],["WebSocketFrameEncoder",7]],"d":"An inbound `ChannelHandler` that serializes structured websocket frames into a byte stream\nfor sending on the network.\n\nThis encoder has limited enforcement of compliance to RFC 6455. In particular, to guarantee\nthat the encoder can handle arbitrary extensions, only normative MUST/MUST NOTs that do not\nrelate to extensions (e.g. the requirement that control frames not have lengths larger than\n125 bytes) are enforced by this encoder.\n\nThis encoder does not have any support for encoder extensions. If you wish to support\nextensions, you should implement a message-to-message encoder that performs the appropriate\nframe transformation as needed."},{"p":["WebSocketProtocolErrorHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["WebSocketProtocolErrorHandler",7]],"s":[["class",12],[" ",17],["WebSocketProtocolErrorHandler",7]],"d":"A simple `ChannelHandler` that catches protocol errors emitted by the\n`WebSocketFrameDecoder` and automatically generates protocol error responses.\n\nThis `ChannelHandler` provides default error handling for basic errors in the\nWebSocket protocol, and can be used by users when custom behaviour is not required."},{"p":["NIOWebSocketClientUpgrader"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOWebSocketClientUpgrader",7]],"s":[["class",12],[" ",17],["NIOWebSocketClientUpgrader",7]],"d":"A `HTTPClientProtocolUpgrader` that knows how to do the WebSocket upgrade dance.\n\nThis upgrader assumes that the `HTTPClientUpgradeHandler` will create and send the upgrade request. \nThis upgrader also assumes that the `HTTPClientUpgradeHandler` will appropriately mutate the\npipeline to remove the HTTP `ChannelHandler`s."},{"p":["NIOWebSocketServerUpgrader"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOWebSocketServerUpgrader",7]],"s":[["class",12],[" ",17],["NIOWebSocketServerUpgrader",7]],"d":"A `HTTPServerProtocolUpgrader` that knows how to do the WebSocket upgrade dance.\n\nUsers may frequently want to offer multiple websocket endpoints on the same port. For this\nreason, this `WebServerSocketUpgrader` only knows how to do the required parts of the upgrade and to\ncomplete the handshake. Users are expected to provide a callback that examines the HTTP headers\n(including the path) and determines whether this is a websocket upgrade request that is acceptable\nto them.\n\nThis upgrader assumes that the `HTTPServerUpgradeHandler` will appropriately mutate the pipeline to\nremove the HTTP `ChannelHandler`s."},{"p":["NIOWebSocketFrameAggregator"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOWebSocketFrameAggregator",7]],"s":[["class",12],[" ",17],["NIOWebSocketFrameAggregator",7]],"d":"`NIOWebSocketFrameAggregator` buffers inbound fragmented `WebSocketFrame`'s and aggregates them into a single `WebSocketFrame`.\nIt guarantees that a `WebSocketFrame` with an `opcode` of `.continuation` is never forwarded.\nFrames which are not fragmented are just forwarded without any processing.\nFragmented frames are unmasked, concatenated and forwarded as a new `WebSocketFrame` which is either a `.binary` or `.text` frame.\n`extensionData`, `rsv1`, `rsv2` and `rsv3` are lost if a frame is fragmented because they cannot be concatenated.\n- Note: `.ping`, `.pong`, `.closeConnection` frames are forwarded during frame aggregation"},{"p":["WebSocketErrorCode","unexpectedServerError"],"f":[["case",12],[" ",17],["unexpectedServerError",7]],"s":[["case",12],[" ",17],["unexpectedServerError",7]],"d":"Indicates that a server is terminating the connection because\nit encountered an unexpected condition that prevented it from\nfulfilling the request.\nCorresponds to code 1011."},{"p":["WebSocketErrorCode","protocolError"],"f":[["case",12],[" ",17],["protocolError",7]],"s":[["case",12],[" ",17],["protocolError",7]],"d":"Indicates that an endpoint is terminating the connection due\nto a protocol error.\nCorresponds to code 1002."},{"p":["WebSocketErrorCode","normalClosure"],"f":[["case",12],[" ",17],["normalClosure",7]],"s":[["case",12],[" ",17],["normalClosure",7]],"d":"Indicates a normal closure, meaning that the purpose for\nwhich the connection was established has been fulfilled.\nCorresponds to code 1000."},{"p":["WebSocketErrorCode","messageTooLarge"],"f":[["case",12],[" ",17],["messageTooLarge",7]],"s":[["case",12],[" ",17],["messageTooLarge",7]],"d":"Indicates that an endpoint is terminating the connection\nbecause it has received a message that is too big for it to\nprocess.\nCorresponds to code 1009."},{"p":["WebSocketErrorCode","policyViolation"],"f":[["case",12],[" ",17],["policyViolation",7]],"s":[["case",12],[" ",17],["policyViolation",7]],"d":"Indicates that an endpoint is terminating the connection\nbecause it has received a message that violates its policy.  This\nis a generic status code that can be returned when there is no\nother more suitable status code (e.g. 1003 or 1009) or if there\nis a need to hide specific details about the policy.\nCorresponds to code 1008."},{"p":["WebSocketErrorCode","missingExtension"],"f":[["case",12],[" ",17],["missingExtension",7]],"s":[["case",12],[" ",17],["missingExtension",7]],"d":"Indicates that an endpoint (client) is terminating the\nconnection because it has expected the server to negotiate one or\nmore extension, but the server didn't return them in the response\nmessage of the WebSocket handshake.  The list of extensions that\nare needed should appear in the `reason` part of the Close frame.\nNote that this status code is not used by the server, because it\ncan fail the WebSocket handshake instead.\nCorresponds to code 1010."},{"p":["WebSocketErrorCode","unacceptableData"],"f":[["case",12],[" ",17],["unacceptableData",7]],"s":[["case",12],[" ",17],["unacceptableData",7]],"d":"Indicates that an endpoint is terminating the connection\nbecause it has received a type of data it cannot accept (e.g. an\nendpoint that understands only text data may send this if it\nreceives a binary message).\nCorresponds to code 1003."},{"p":["WebSocketErrorCode","dataInconsistentWithMessage"],"f":[["case",12],[" ",17],["dataInconsistentWithMessage",7]],"s":[["case",12],[" ",17],["dataInconsistentWithMessage",7]],"d":"Indicates that an endpoint is terminating the connection\nbecause it has received data within a message that was not\nconsistent with the type of the message (e.g. non-UTF-8\ndata within a text message).\nCorresponds to code 1007."},{"p":["WebSocketErrorCode","unknown(_:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["UInt16",18,275],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["UInt16",18],[")",17]],"d":"We don't have a better name for this error code."},{"p":["WebSocketErrorCode","goingAway"],"f":[["case",12],[" ",17],["goingAway",7]],"s":[["case",12],[" ",17],["goingAway",7]],"d":"Ondicates that an endpoint is \"going away\", such as a server\ngoing down or a browser having navigated away from a page.\nCorresponds to code 1001."},{"p":["NIOWebSocketFrameAggregator","Error","accumulatedFrameSizeIsTooLarge"],"f":[["case",12],[" ",17],["accumulatedFrameSizeIsTooLarge",7]],"s":[["case",12],[" ",17],["accumulatedFrameSizeIsTooLarge",7]]},{"p":["NIOWebSocketFrameAggregator","Error","receivedNewFrameWithoutFinishingPrevious"],"f":[["case",12],[" ",17],["receivedNewFrameWithoutFinishingPrevious",7]],"s":[["case",12],[" ",17],["receivedNewFrameWithoutFinishingPrevious",7]]},{"p":["NIOWebSocketFrameAggregator","Error","didReceiveFragmentBeforeReceivingTextOrBinaryFrame"],"f":[["case",12],[" ",17],["didReceiveFragmentBeforeReceivingTextOrBinaryFrame",7]],"s":[["case",12],[" ",17],["didReceiveFragmentBeforeReceivingTextOrBinaryFrame",7]]},{"p":["NIOWebSocketFrameAggregator","Error","tooManyFragments"],"f":[["case",12],[" ",17],["tooManyFragments",7]],"s":[["case",12],[" ",17],["tooManyFragments",7]]},{"p":["NIOWebSocketFrameAggregator","Error","nonFinalFragmentSizeIsTooSmall"],"f":[["case",12],[" ",17],["nonFinalFragmentSizeIsTooSmall",7]],"s":[["case",12],[" ",17],["nonFinalFragmentSizeIsTooSmall",7]]},{"p":["NIOWebSocketError","invalidFrameLength"],"f":[["case",12],[" ",17],["invalidFrameLength",7]],"s":[["case",12],[" ",17],["invalidFrameLength",7]],"d":"The frame being sent is larger than the configured maximum\nacceptable frame size"},{"p":["NIOWebSocketError","fragmentedControlFrame"],"f":[["case",12],[" ",17],["fragmentedControlFrame",7]],"s":[["case",12],[" ",17],["fragmentedControlFrame",7]],"d":"A control frame may not be fragmented."},{"p":["NIOWebSocketError","multiByteControlFrameLength"],"f":[["case",12],[" ",17],["multiByteControlFrameLength",7]],"s":[["case",12],[" ",17],["multiByteControlFrameLength",7]],"d":"A control frame may not have a length more than 125 bytes."},{"p":["WebSocketMaskingKey","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["UInt8",18,274],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["UInt8",18],["...)",17]]},{"p":["WebSocketMaskingKey","init(_:)"],"f":[["init",10],["?<",17],["T",0],[">(",17],["_",1],[" ",17],["buffer",2],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["Collection",18,212],[", ",17],["T",18],[".",17],["Element",18],[" == ",17],["UInt8",18,274]],"s":[["init",10],["?<",17],["T",0],[">(",17],["T",18],[")",17]],"c":[["T",1,"Collection",212],["T.Element",2,"UInt8",274]],"g":[["T",0,0]]},{"p":["WebSocketFrameDecoder","init(maxFrameSize:)"],"f":[["init",10],["(",17],["maxFrameSize",1],[": ",17],["Int",18,211],[" = 1 << 14)",17]],"s":[["init",10],["(",17],["maxFrameSize",1],[": ",17],["Int",18],[")",17]],"d":"Construct a new `WebSocketFrameDecoder`\n\n- parameters:\n    - maxFrameSize: The maximum frame size the decoder is willing to tolerate from the\n        remote peer. WebSockets in principle allows frame sizes up to `2**64` bytes, but\n        this is an objectively unreasonable maximum value (on AMD64 systems it is not\n        possible to even allocate a buffer large enough to handle this size), so we\n        set a lower one. The default value is the same as the default HTTP/2 max frame\n        size, `2**14` bytes. Users may override this to any value up to `UInt32.max`.\n        Users are strongly encouraged not to increase this value unless they absolutely\n        must, as the decoder will not produce partial frames, meaning that it will hold\n        on to data until the *entire* body is received.\n    - automaticErrorHandling: Whether this `ChannelHandler` should automatically handle\n        protocol errors in frame serialization, or whether it should allow the pipeline\n        to handle them."},{"p":["WebSocketFrameEncoder","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["WebSocketProtocolErrorHandler","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["WebSocketFrame","init(fin:rsv1:rsv2:rsv3:opcode:maskKey:data:extensionData:)"],"f":[["init",10],["(",17],["fin",1],[": ",17],["Bool",18,210],[" = false, ",17],["rsv1",1],[": ",17],["Bool",18,210],[" = false, ",17],["rsv2",1],[": ",17],["Bool",18,210],[" = false, ",17],["rsv3",1],[": ",17],["Bool",18,210],[" = false, ",17],["opcode",1],[": ",17],["WebSocketOpcode",18,10],[" = .continuation, ",17],["maskKey",1],[": ",17],["WebSocketMaskingKey",18,8],["? = nil, ",17],["data",1],[": ",17],["ByteBuffer",18,113],[", ",17],["extensionData",1],[": ",17],["ByteBuffer",18,113],["? = nil)",17]],"s":[["init",10],["(",17],["fin",1],[": ",17],["Bool",18],[", ",17],["rsv1",1],[": ",17],["Bool",18],[", ",17],["rsv2",1],[": ",17],["Bool",18],[", ",17],["rsv3",1],[": ",17],["Bool",18],[", ",17],["opcode",1],[": ",17],["WebSocketOpcode",18],[", ",17],["maskKey",1],[": ",17],["WebSocketMaskingKey",18],["?, ",17],["data",1],[": ",17],["ByteBuffer",18],[", ",17],["extensionData",1],[": ",17],["ByteBuffer",18],["?)",17]],"d":"Create a `WebSocketFrame` with the given properties.\n\n- parameters:\n    - fin: The value of the `fin` bit. Defaults to `false`.\n    - rsv1: The value of the first reserved bit. Defaults to `false`.\n    - rsv2: The value of the second reserved bit. Defaults to `false`.\n    - rsv3: The value of the third reserved bit. Defaults to `false`.\n    - opcode: The opcode for the frame. Defaults to `.continuation`.\n    - maskKey: The masking key for the frame, if any. Defaults to `nil`.\n    - data: The application data for the frame.\n    - extensionData: The extension data for the frame."},{"p":["WebSocketFrame","init(allocator:)"],"f":[["init",10],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18,122],[")",17]],"s":[["init",10],["(",17],["allocator",1],[": ",17],["ByteBufferAllocator",18],[")",17]],"d":"Creates an empty `WebSocketFrame`.\n\n- parameters:\n    - allocator: The `ByteBufferAllocator` to use when editing the empty buffers."},{"p":["WebSocketOpcode","init(encodedWebSocketOpcode:)"],"f":[["init",10],["?(",17],["encodedWebSocketOpcode",1],[" ",17],["encoded",2],[": ",17],["UInt8",18,274],[")",17]],"s":[["init",10],["?(",17],["encodedWebSocketOpcode",1],[": ",17],["UInt8",18],[")",17]],"d":"Create an opcode from the encoded representation.\n\n- parameters\n    - encoded: The encoded representation of the opcode as an 8-bit integer.\n         Must be no more than 4 bits large."},{"p":["WebSocketErrorCode","init(codeNumber:)"],"f":[["init",10],["(",17],["codeNumber",1],[": ",17],["Int",18,211],[")",17]],"s":[["init",10],["(",17],["codeNumber",1],[": ",17],["Int",18],[")",17]],"d":"Create an error code from an integer.\n\nWill trap if the error code is not in the valid range.\n\n- parameters:\n    - codeNumber: The integer form of the status code."},{"p":["NIOWebSocketClientUpgrader","init(requestKey:maxFrameSize:automaticErrorHandling:upgradePipelineHandler:)"],"f":[["init",10],["(",17],["requestKey",1],[": ",17],["String",18,172],[" = randomRequestKey(), ",17],["maxFrameSize",1],[": ",17],["Int",18,211],[" = 1 << 14, ",17],["automaticErrorHandling",1],[": ",17],["Bool",18,210],[" = true, ",17],["upgradePipelineHandler",1],[": ",17],["@escaping",12],[" (",17],["Channel",18,151],[", ",17],["HTTPResponseHead",18,154],[") -> ",17],["EventLoopFuture",18,120],["<",17],["Void",18,271],[">)",17]],"s":[["init",10],["(",17],["requestKey",1],[": ",17],["String",18],[", ",17],["maxFrameSize",1],[": ",17],["Int",18],[", ",17],["automaticErrorHandling",1],[": ",17],["Bool",18],[", ",17],["upgradePipelineHandler",1],[": (",17],["Channel",18],[", ",17],["HTTPResponseHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">)",17]],"d":"- Parameters:\n  - requestKey: sent to the server in the `Sec-WebSocket-Key` HTTP header. Default is random request key.\n  - maxFrameSize: largest incoming `WebSocketFrame` size in bytes. Default is 16,384 bytes.\n  - automaticErrorHandling: If true, adds `WebSocketProtocolErrorHandler` to the channel pipeline to catch and respond to WebSocket protocol errors. Default is true.\n  - upgradePipelineHandler: called once the upgrade was successful"},{"p":["NIOWebSocketServerUpgrader","init(maxFrameSize:automaticErrorHandling:shouldUpgrade:upgradePipelineHandler:)"],"f":[["init",10],["(",17],["maxFrameSize",1],[": ",17],["Int",18,211],[", ",17],["automaticErrorHandling",1],[": ",17],["Bool",18,210],[" = true, ",17],["shouldUpgrade",1],[": ",17],["@escaping",12],[" (",17],["Channel",18,151],[", ",17],["HTTPRequestHead",18,153],[") -> ",17],["EventLoopFuture",18,120],["<",17],["HTTPHeaders",18,152],["?>, ",17],["upgradePipelineHandler",1],[": ",17],["@escaping",12],[" (",17],["Channel",18,151],[", ",17],["HTTPRequestHead",18,153],[") -> ",17],["EventLoopFuture",18,120],["<",17],["Void",18,271],[">)",17]],"s":[["init",10],["(",17],["maxFrameSize",1],[": ",17],["Int",18],[", ",17],["automaticErrorHandling",1],[": ",17],["Bool",18],[", ",17],["shouldUpgrade",1],[": (",17],["Channel",18],[", ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["HTTPHeaders",18],["?>, ",17],["upgradePipelineHandler",1],[": (",17],["Channel",18],[", ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">)",17]],"d":"Create a new `NIOWebSocketServerUpgrader`.\n\n- parameters:\n    - maxFrameSize: The maximum frame size the decoder is willing to tolerate from the\n        remote peer. WebSockets in principle allows frame sizes up to `2**64` bytes, but\n        this is an objectively unreasonable maximum value (on AMD64 systems it is not\n        possible to even. Users may set this to any value up to `UInt32.max`.\n    - automaticErrorHandling: Whether the pipeline should automatically handle protocol\n        errors by sending error responses and closing the connection. Defaults to `true`,\n        may be set to `false` if the user wishes to handle their own errors.\n    - shouldUpgrade: A callback that determines whether the websocket request should be\n        upgraded. This callback is responsible for creating a `HTTPHeaders` object with\n        any headers that it needs on the response *except for* the `Upgrade`, `Connection`,\n        and `Sec-WebSocket-Accept` headers, which this upgrader will handle. Should return\n        an `EventLoopFuture` containing `nil` if the upgrade should be refused.\n    - upgradePipelineHandler: A function that will be called once the upgrade response is\n        flushed, and that is expected to mutate the `Channel` appropriately to handle the\n        websocket protocol. This only needs to add the user handlers: the\n        `WebSocketFrameEncoder` and `WebSocketFrameDecoder` will have been added to the\n        pipeline automatically."},{"p":["NIOWebSocketServerUpgrader","init(automaticErrorHandling:shouldUpgrade:upgradePipelineHandler:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["automaticErrorHandling",1],[": ",17],["Bool",18,210],[" = true, ",17],["shouldUpgrade",1],[": ",17],["@escaping",12],[" (",17],["Channel",18,151],[", ",17],["HTTPRequestHead",18,153],[") -> ",17],["EventLoopFuture",18,120],["<",17],["HTTPHeaders",18,152],["?>, ",17],["upgradePipelineHandler",1],[": ",17],["@escaping",12],[" (",17],["Channel",18,151],[", ",17],["HTTPRequestHead",18,153],[") -> ",17],["EventLoopFuture",18,120],["<",17],["Void",18,271],[">)",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["automaticErrorHandling",1],[": ",17],["Bool",18],[", ",17],["shouldUpgrade",1],[": (",17],["Channel",18],[", ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["HTTPHeaders",18],["?>, ",17],["upgradePipelineHandler",1],[": (",17],["Channel",18],[", ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">)",17]],"d":"Create a new `NIOWebSocketServerUpgrader`.\n\n- parameters:\n    - automaticErrorHandling: Whether the pipeline should automatically handle protocol\n        errors by sending error responses and closing the connection. Defaults to `true`,\n        may be set to `false` if the user wishes to handle their own errors.\n    - shouldUpgrade: A callback that determines whether the websocket request should be\n        upgraded. This callback is responsible for creating a `HTTPHeaders` object with\n        any headers that it needs on the response *except for* the `Upgrade`, `Connection`,\n        and `Sec-WebSocket-Accept` headers, which this upgrader will handle. Should return\n        an `EventLoopFuture` containing `nil` if the upgrade should be refused.\n    - upgradePipelineHandler: A function that will be called once the upgrade response is\n        flushed, and that is expected to mutate the `Channel` appropriately to handle the\n        websocket protocol. This only needs to add the user handlers: the\n        `WebSocketFrameEncoder` and `WebSocketFrameDecoder` will have been added to the\n        pipeline automatically."},{"p":["NIOWebSocketFrameAggregator","init(minNonFinalFragmentSize:maxAccumulatedFrameCount:maxAccumulatedFrameSize:)"],"f":[["init",10],["(",17],["minNonFinalFragmentSize",1],[": ",17],["Int",18,211],[", ",17],["maxAccumulatedFrameCount",1],[": ",17],["Int",18,211],[", ",17],["maxAccumulatedFrameSize",1],[": ",17],["Int",18,211],[")",17]],"s":[["init",10],["(",17],["minNonFinalFragmentSize",1],[": ",17],["Int",18],[", ",17],["maxAccumulatedFrameCount",1],[": ",17],["Int",18],[", ",17],["maxAccumulatedFrameSize",1],[": ",17],["Int",18],[")",17]],"d":"Configures a `NIOWebSocketFrameAggregator`.\n- Parameters:\n  - minNonFinalFragmentSize: Minimum size in bytes of a fragment which is not the last fragment of a complete frame. Used to defend against many really small payloads.\n  - maxAccumulatedFrameCount: Maximum number of fragments which are allowed to result in a complete frame.\n  - maxAccumulatedFrameSize: Maximum accumulated size in bytes of buffered fragments. It is essentially the maximum allowed size of an incoming frame after all fragments are concatenated."},{"p":["WebSocketMaskingKey","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Int",18,211],[") -> ",17],["UInt8",18,274],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["UInt8",18]]},{"p":["WebSocketOpcode","continuation"],"f":[["static",12],[" ",17],["let",12],[" ",17],["continuation",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["continuation",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","connectionClose"],"f":[["static",12],[" ",17],["let",12],[" ",17],["connectionClose",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["connectionClose",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","ping"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ping",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ping",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","pong"],"f":[["static",12],[" ",17],["let",12],[" ",17],["pong",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["pong",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","text"],"f":[["static",12],[" ",17],["let",12],[" ",17],["text",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["text",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","binary"],"f":[["static",12],[" ",17],["let",12],[" ",17],["binary",7],[": ",17],["WebSocketOpcode",18,10]],"s":[["static",12],[" ",17],["let",12],[" ",17],["binary",7],[": ",17],["WebSocketOpcode",18]]},{"p":["WebSocketOpcode","allCases"],"f":[["static",12],[" ",17],["var",12],[" ",17],["allCases",7],[": [",17],["WebSocketOpcode",18,10],["]",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["allCases",7],[": [",17],["WebSocketOpcode",18],["]",17]]},{"p":["NIOWebSocketUpgradeError","unsupportedWebSocketTarget"],"f":[["static",12],[" ",17],["let",12],[" ",17],["unsupportedWebSocketTarget",7],[": ",17],["NIOWebSocketUpgradeError",18,11]],"s":[["static",12],[" ",17],["let",12],[" ",17],["unsupportedWebSocketTarget",7],[": ",17],["NIOWebSocketUpgradeError",18]],"d":"The HTTP request targets a websocket pipeline that does not support\nit in some way."},{"p":["NIOWebSocketUpgradeError","invalidUpgradeHeader"],"f":[["static",12],[" ",17],["let",12],[" ",17],["invalidUpgradeHeader",7],[": ",17],["NIOWebSocketUpgradeError",18,11]],"s":[["static",12],[" ",17],["let",12],[" ",17],["invalidUpgradeHeader",7],[": ",17],["NIOWebSocketUpgradeError",18]],"d":"A HTTP header on the upgrade request was invalid."},{"p":["WebSocketMaskingKey","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,211],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]]},{"p":["WebSocketMaskingKey","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,211],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]]},{"p":["WebSocketFrame","unmaskedData"],"f":[["var",12],[" ",17],["unmaskedData",7],[": ",17],["ByteBuffer",18,113],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["unmaskedData",7],[": ",17],["ByteBuffer",18]],"d":"The unmasked application data.\n\nIf a masking key is present on the frame, this property will automatically unmask the underlying data\nand return the unmasked data to the user. This is a convenience method that should only be used when\npersisting the underlying masked data is worthwhile: otherwise, performance will often be better to\nmanually unmask the data with `data.unmask(maskKey)`."},{"p":["WebSocketFrame","extensionData"],"f":[["var",12],[" ",17],["extensionData",7],[": ",17],["ByteBuffer",18,113],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["extensionData",7],[": ",17],["ByteBuffer",18],["?",17]],"d":"The extension data, if any.\n\nOn frames received from the network, this data is not necessarily unmasked. This is to provide as much\ninformation as possible. If unmasked data is desired, either use the computed `unmaskedExtensionData` property to\nobtain it, or transform this data directly by calling `extensionData.unmask(maskKey)`."},{"p":["WebSocketFrame","unmaskedExtensionData"],"f":[["var",12],[" ",17],["unmaskedExtensionData",7],[": ",17],["ByteBuffer",18,113],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["unmaskedExtensionData",7],[": ",17],["ByteBuffer",18],["?",17]],"d":"The unmasked extension data.\n\nIf a masking key is present on the frame, this property will automatically unmask the underlying data\nand return the unmasked data to the user. This is a convenience method that should only be used when\npersisting the underlying masked data is worthwhile: otherwise, performance will often be better to\nmanually unmask the data with `data.unmask(maskKey)`."},{"p":["WebSocketFrame","fin"],"f":[["var",12],[" ",17],["fin",7],[": ",17],["Bool",18,210],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fin",7],[": ",17],["Bool",18]],"d":"The value of the `fin` bit. If set, this is the last frame in a fragmented frame. If not\nset, this frame is one of the intermediate frames in a fragmented frame. Must be set if\na frame is not fragmented at all."},{"p":["WebSocketFrame","data"],"f":[["var",12],[" ",17],["data",7],[": ",17],["ByteBuffer",18,113],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["data",7],[": ",17],["ByteBuffer",18]],"d":"The application data.\n\nOn frames received from the network, this data is not necessarily unmasked. This is to provide as much\ninformation as possible. If unmasked data is desired, either use the computed `unmaskedData` property to\nobtain it, or transform this data directly by calling `data.unmask(maskKey)`."},{"p":["WebSocketFrame","rsv1"],"f":[["var",12],[" ",17],["rsv1",7],[": ",17],["Bool",18,210],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rsv1",7],[": ",17],["Bool",18]],"d":"The value of the first reserved bit. Must be `false` unless using an extension that defines its use."},{"p":["WebSocketFrame","rsv2"],"f":[["var",12],[" ",17],["rsv2",7],[": ",17],["Bool",18,210],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rsv2",7],[": ",17],["Bool",18]],"d":"The value of the second reserved bit. Must be `false` unless using an extension that defines its use."},{"p":["WebSocketFrame","rsv3"],"f":[["var",12],[" ",17],["rsv3",7],[": ",17],["Bool",18,210],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rsv3",7],[": ",17],["Bool",18]],"d":"The value of the third reserved bit. Must be `false` unless using an extension that defines its use."},{"p":["WebSocketFrame","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,211],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]],"d":"The total length of the data in the frame."},{"p":["WebSocketFrame","opcode"],"f":[["var",12],[" ",17],["opcode",7],[": ",17],["WebSocketOpcode",18,10],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["opcode",7],[": ",17],["WebSocketOpcode",18]],"d":"The opcode for this frame."},{"p":["WebSocketFrame","maskKey"],"f":[["var",12],[" ",17],["maskKey",7],[": ",17],["WebSocketMaskingKey",18,8],["?",17]],"s":[["var",12],[" ",17],["maskKey",7],[": ",17],["WebSocketMaskingKey",18],["?",17]],"d":"The masking key, if any.\n\nA masking key is used to prevent specific byte sequences from appearing in the network\nstream. This is primarily used by entities like browsers, but should be used any time it\nis possible for a malicious user to control the data that appears in a websocket stream.\n\nIf this value is `nil`, and this frame was *received from* the network, the data in `data`\nis not masked. If this value is `nil`, and this frame is being *sent to* the network, the\ndata in `data` will not be masked."},{"p":["WebSocketOpcode","isControlOpcode"],"f":[["var",12],[" ",17],["isControlOpcode",7],[": ",17],["Bool",18,210],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isControlOpcode",7],[": ",17],["Bool",18]],"d":"Whether the opcode is in the control range: that is, if the\nhigh bit of the opcode nibble is `1`."},{"p":["WebSocketOpcode","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,172],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["NIOWebSocketClientUpgrader","supportedProtocol"],"f":[["let",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18,172]],"s":[["let",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18]],"d":"RFC 6455 specs this as the required entry in the Upgrade header."},{"p":["NIOWebSocketClientUpgrader","requiredUpgradeHeaders"],"f":[["let",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18,172],["]",17]],"s":[["let",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18],["]",17]],"d":"None of the websocket headers are actually defined as 'required'."},{"p":["NIOWebSocketServerUpgrader","supportedProtocol"],"f":[["let",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18,172]],"s":[["let",12],[" ",17],["supportedProtocol",7],[": ",17],["String",18]],"d":"RFC 6455 specs this as the required entry in the Upgrade header."},{"p":["NIOWebSocketServerUpgrader","requiredUpgradeHeaders"],"f":[["let",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18,172],["]",17]],"s":[["let",12],[" ",17],["requiredUpgradeHeaders",7],[": [",17],["String",18],["]",17]],"d":"We deliberately do not actually set any required headers here, because the websocket\nspec annoyingly does not actually force the client to send these in the Upgrade header,\nwhich NIO requires. We check for these manually."},{"p":["WebSocketMaskingKey","random(using:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["random",7],["<",17],["Generator",0],[">(",17],["using",1],[" ",17],["generator",2],[": ",17],["inout",12],[" ",17],["Generator",18],[") -> ",17],["WebSocketMaskingKey",18,8],[" ",17],["where",12],[" ",17],["Generator",18],[" : ",17],["RandomNumberGenerator",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["random",7],["<",17],["Generator",0],[">(",17],["using",1],[": ",17],["inout",12],[" ",17],["Generator",18],[") -> ",17],["WebSocketMaskingKey",18]],"c":[["Generator",1,"RandomNumberGenerator",166]],"g":[["Generator",0,0]],"d":"Returns a random masking key, using the given generator as a source for randomness.\n- Parameter generator: The random number generator to use when creating the\n    new random masking key.\n- Returns: A random masking key"},{"p":["WebSocketMaskingKey","random()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["random",7],["() -> ",17],["WebSocketMaskingKey",18,8]],"s":[["static",12],[" ",17],["func",12],[" ",17],["random",7],["() -> ",17],["WebSocketMaskingKey",18]],"d":"Returns a random masking key, using the `SystemRandomNumberGenerator` as a source for randomness.\n- Returns: A random masking key"},{"p":["NIOWebSocketClientUpgrader","randomRequestKey(using:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["randomRequestKey",7],["<",17],["Generator",0],[">(",17],["using",1],[" ",17],["generator",2],[": ",17],["inout",12],[" ",17],["Generator",18],[") -> ",17],["String",18,172],[" ",17],["where",12],[" ",17],["Generator",18],[" : ",17],["RandomNumberGenerator",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["randomRequestKey",7],["<",17],["Generator",0],[">(",17],["using",1],[": ",17],["inout",12],[" ",17],["Generator",18],[") -> ",17],["String",18]],"c":[["Generator",1,"RandomNumberGenerator",166]],"g":[["Generator",0,0]],"d":"Generates a random WebSocket Request Key by generating 16 bytes randomly and encoding them as a base64 string as defined in RFC6455 https://tools.ietf.org/html/rfc6455#section-4.1\n- Parameter generator: the `RandomNumberGenerator` used as a the source of randomness\n- Returns: base64 encoded request key"},{"p":["NIOWebSocketClientUpgrader","randomRequestKey()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["randomRequestKey",7],["() -> ",17],["String",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["randomRequestKey",7],["() -> ",17],["String",18]],"d":"Generates a random WebSocket Request Key by generating 16 bytes randomly using the `SystemRandomNumberGenerator` and encoding them as a base64 string as defined in RFC6455 https://tools.ietf.org/html/rfc6455#section-4.1.\n- Returns: base64 encoded request key"},{"p":["WebSocketMaskingKey","withContiguousStorageIfAvailable(_:)"],"f":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeBufferPointer",18,171],["<",17],["UInt8",18,274],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"s":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">((",17],["UnsafeBufferPointer",18],["<",17],["UInt8",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"g":[["R",0,0]]},{"p":["WebSocketMaskingKey","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18,211],[") -> ",17],["Int",18,211]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18],[") -> ",17],["Int",18]]},{"p":["WebSocketFrameDecoder","decode(context:buffer:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,113],[") ",17],["throws",12],[" -> ",17],["DecodingState",18,114]],"s":[["func",12],[" ",17],["decode",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["buffer",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["DecodingState",18]]},{"p":["WebSocketFrameEncoder","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["WebSocketFrameEncoder","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["WebSocketFrameEncoder","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["data",1],[": ",17],["NIOAny",18,150],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,121],["<",17],["Void",18,271],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]]},{"p":["WebSocketProtocolErrorHandler","errorCaught(context:error:)"],"f":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["error",1],[": ",17],["Error",18,272],[")",17]],"s":[["func",12],[" ",17],["errorCaught",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["error",1],[": ",17],["Error",18],[")",17]]},{"p":["NIOWebSocketClientUpgrader","shouldAllowUpgrade(upgradeResponse:)"],"f":[["func",12],[" ",17],["shouldAllowUpgrade",7],["(",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18,154],[") -> ",17],["Bool",18,210]],"s":[["func",12],[" ",17],["shouldAllowUpgrade",7],["(",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18],[") -> ",17],["Bool",18]],"d":"Allow or deny the upgrade based on the upgrade HTTP response\nheaders containing the correct accept key."},{"p":["NIOWebSocketClientUpgrader","upgrade(context:upgradeResponse:)"],"f":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18,154],[") -> ",17],["EventLoopFuture",18,120],["<",17],["Void",18,271],[">",17]],"s":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["upgradeResponse",1],[": ",17],["HTTPResponseHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]],"d":"Called when the upgrade response has been flushed and it is safe to mutate the channel\npipeline. Adds channel handlers for websocket frame encoding, decoding and errors."},{"p":["NIOWebSocketClientUpgrader","addCustom(upgradeRequestHeaders:)"],"f":[["func",12],[" ",17],["addCustom",7],["(",17],["upgradeRequestHeaders",1],[": ",17],["inout",12],[" ",17],["HTTPHeaders",18,152],[")",17]],"s":[["func",12],[" ",17],["addCustom",7],["(",17],["upgradeRequestHeaders",1],[": ",17],["inout",12],[" ",17],["HTTPHeaders",18],[")",17]],"d":"Add additional headers that are needed for a WebSocket upgrade request."},{"p":["NIOWebSocketServerUpgrader","buildUpgradeResponse(channel:upgradeRequest:initialResponseHeaders:)"],"f":[["func",12],[" ",17],["buildUpgradeResponse",7],["(",17],["channel",1],[": ",17],["Channel",18,151],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18,153],[", ",17],["initialResponseHeaders",1],[": ",17],["HTTPHeaders",18,152],[") -> ",17],["EventLoopFuture",18,120],["<",17],["HTTPHeaders",18,152],[">",17]],"s":[["func",12],[" ",17],["buildUpgradeResponse",7],["(",17],["channel",1],[": ",17],["Channel",18],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18],[", ",17],["initialResponseHeaders",1],[": ",17],["HTTPHeaders",18],[") -> ",17],["EventLoopFuture",18],["<",17],["HTTPHeaders",18],[">",17]]},{"p":["NIOWebSocketServerUpgrader","upgrade(context:upgradeRequest:)"],"f":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18,153],[") -> ",17],["EventLoopFuture",18,120],["<",17],["Void",18,271],[">",17]],"s":[["func",12],[" ",17],["upgrade",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["upgradeRequest",1],[": ",17],["HTTPRequestHead",18],[") -> ",17],["EventLoopFuture",18],["<",17],["Void",18],[">",17]]},{"p":["NIOWebSocketFrameAggregator","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,134],[", ",17],["data",1],[": ",17],["NIOAny",18,150],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]]},{"p":["WebSocketMaskingKey","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["WebSocketMaskingKey",18,8],[", ",17],["rhs",2],[": ",17],["WebSocketMaskingKey",18,8],[") -> ",17],["Bool",18,210]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["WebSocketMaskingKey",18],[", ",17],["WebSocketMaskingKey",18],[") -> ",17],["Bool",18]]},{"p":["WebSocketMaskingKey","ArrayLiteralElement"],"f":[["typealias",12],[" ",17],["ArrayLiteralElement",7],[" = ",17],["UInt8",18,274]],"s":[["typealias",12],[" ",17],["ArrayLiteralElement",7]]},{"p":["WebSocketMaskingKey","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["Int",18,211]],"s":[["typealias",12],[" ",17],["Index",7]]},{"p":["WebSocketMaskingKey","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["UInt8",18,274]],"s":[["typealias",12],[" ",17],["Element",7]]},{"p":["WebSocketFrameDecoder","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["InboundOut",7]]},{"p":["WebSocketFrameDecoder","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["OutboundOut",7]]},{"p":["WebSocketFrameDecoder","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["ByteBuffer",18,113]],"s":[["typealias",12],[" ",17],["InboundIn",7]]},{"p":["WebSocketFrameEncoder","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["OutboundIn",7]]},{"p":["WebSocketFrameEncoder","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["ByteBuffer",18,113]],"s":[["typealias",12],[" ",17],["OutboundOut",7]]},{"p":["WebSocketProtocolErrorHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["OutboundOut",7]]},{"p":["WebSocketProtocolErrorHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["Never",18,273]],"s":[["typealias",12],[" ",17],["InboundIn",7]]},{"p":["WebSocketUpgrader"],"f":[["typealias",12],[" ",17],["WebSocketUpgrader",7],[" = ",17],["NIOWebSocketServerUpgrader",18,16]],"s":[["typealias",12],[" ",17],["WebSocketUpgrader",7]],"a":{"a":{"d":true,"r":"NIOWebSocketServerUpgrader"}}},{"p":["NIOWebClientSocketUpgrader"],"f":[["typealias",12],[" ",17],["NIOWebClientSocketUpgrader",7],[" = ",17],["NIOWebSocketClientUpgrader",18,15]],"s":[["typealias",12],[" ",17],["NIOWebClientSocketUpgrader",7]],"a":{"a":{"d":true,"r":"NIOWebSocketClientUpgrader"}}},{"p":["NIOWebSocketFrameAggregator","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["InboundOut",7]]},{"p":["NIOWebSocketFrameAggregator","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["WebSocketFrame",18,9]],"s":[["typealias",12],[" ",17],["InboundIn",7]]},{"p":["Int","init(webSocketOpcode:)"],"f":[["init",10],["(",17],["webSocketOpcode",1],[" ",17],["opcode",2],[": ",17],["WebSocketOpcode",18,10],[")",17]],"s":[["init",10],["(",17],["webSocketOpcode",1],[": ",17],["WebSocketOpcode",18],[")",17]],"d":"Create a UInt8 corresponding to the integer value for a given `WebSocketOpcode`.\n\n- parameters:\n    - opcode: The `WebSocketOpcode`."},{"p":["UInt8","init(webSocketOpcode:)"],"f":[["init",10],["(",17],["webSocketOpcode",1],[" ",17],["opcode",2],[": ",17],["WebSocketOpcode",18,10],[")",17]],"s":[["init",10],["(",17],["webSocketOpcode",1],[": ",17],["WebSocketOpcode",18],[")",17]],"d":"Create a UInt8 corresponding to a given `WebSocketOpcode`.\n\nThis places the opcode in the four least-significant bits, in\na form suitable for sending on the wire.\n\n- parameters:\n    - opcode: The `WebSocketOpcode`."},{"p":["UInt16","init(webSocketErrorCode:)"],"f":[["init",10],["(",17],["webSocketErrorCode",1],[" ",17],["code",2],[": ",17],["WebSocketErrorCode",18,5],[")",17]],"s":[["init",10],["(",17],["webSocketErrorCode",1],[": ",17],["WebSocketErrorCode",18],[")",17]],"d":"Create a UInt16 corresponding to a given `WebSocketErrorCode`.\n\n- parameters:\n    - code: The `WebSocketErrorCode`."}],"edges":{"conformer":[5,168,[],6,167,[],6,168,[],6,272,[],6,276,[],7,167,[],7,168,[],7,272,[],7,276,[],8,168,[],8,173,[],8,212,[],8,268,[],9,168,[],10,167,[],10,168,[],10,263,[],10,265,[],11,168,[],11,272,[],11,276,[],12,123,[],13,115,[],13,142,[],14,115,[],14,135,[],15,160,[],16,155,[],17,115,[],17,135,[]],"feature":[118,14,118,17,119,14,119,17,129,12,130,12,131,12,132,12,133,12,140,14,140,17,141,14,141,17,145,13,170,5,170,6,170,7,170,8,170,9,170,10,170,11,174,8,175,8,176,8,179,8,180,8,181,8,182,8,183,8,184,8,185,8,186,8,187,8,188,8,189,8,190,8,191,8,192,8,193,8,194,8,195,8,196,8,197,8,198,8,199,8,200,8,201,8,202,8,203,8,204,8,205,8,206,8,207,8,208,8,209,8,214,8,215,8,216,8,217,8,218,8,219,8,220,8,221,8,222,8,223,8,224,8,225,8,226,8,230,8,231,8,232,8,233,8,234,8,235,8,236,8,237,8,238,8,239,8,240,8,241,8,242,8,243,8,244,8,245,8,246,8,247,8,248,8,249,8,250,8,251,8,252,8,253,8,254,8,255,8,256,8,257,8,258,8,259,8,260,8,261,8,267,10],"member":[0,113,1,113,2,113,3,113,4,113,6,17,18,5,19,5,20,5,21,5,22,5,23,5,24,5,25,5,26,5,27,5,28,6,29,6,30,6,31,6,32,6,33,7,34,7,35,7,36,8,37,8,38,12,39,13,40,14,41,9,42,9,43,10,44,5,45,15,46,16,47,16,48,17,49,8,50,10,51,10,52,10,53,10,54,10,55,10,56,10,57,11,58,11,59,8,60,8,61,9,62,9,63,9,64,9,65,9,66,9,67,9,68,9,69,9,70,9,71,9,72,10,73,10,74,15,75,15,76,16,77,16,78,8,79,8,80,15,81,15,82,8,83,8,84,12,85,13,86,13,87,13,88,14,89,15,90,15,91,15,92,16,93,16,94,17,95,8,96,8,97,8,98,8,99,12,100,12,101,12,102,13,103,13,104,14,105,14,108,17,109,17,110,211,111,274,112,275]},"hints":[36,269,49,262,56,264,59,213,60,229,73,266,74,161,75,163,76,156,77,158,82,177,83,228,84,128,85,116,86,117,87,148,88,147,89,162,90,164,91,165,92,157,93,159,94,146,95,169,96,270,97,227,98,178,99,124,102,144,103,149,104,149,105,138,108,139,109,138,118,118,119,119,129,125,130,126,131,127,132,132,133,133,140,136,141,137,145,143,170,170,174,174,175,175,176,176,179,179,180,180,181,181,182,182,183,183,184,184,185,177,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,256,256,257,257,258,258,259,259,260,260,261,261,267,267],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/NIOWebSocketClientUpgrader.swift","symbols":[18,17,107,25,19,15,28,15,74,30,15,75,42,11,45,56,16,91,63,16,89,82,16,90,105,23,80,120,23,81]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/NIOWebSocketFrameAggregator.swift","symbols":[22,19,17,23,16,6,24,13,32,25,13,31,26,13,28,27,13,29,28,13,30,30,21,109,31,21,108,46,11,48,57,16,94]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/NIOWebSocketServerUpgrader.swift","symbols":[21,17,106,24,14,11,36,22,58,40,22,57,63,19,16,65,15,76,70,15,77,93,23,47,120,11,46,129,16,92,171,16,93]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketErrorCodes.swift","symbols":[21,12,5,25,9,20,30,9,27,35,9,19,42,9,24,49,9,25,57,9,22,63,9,21,73,9,23,79,9,18,82,9,26,120,11,44,133,25,3,145,16,2,153,25,4,163,11,112]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketFrame.swift","symbols":[36,14,8,39,11,37,66,21,96,68,11,36,80,23,78,89,23,79,96,23,95,102,21,98,103,21,97,105,15,59,106,15,60,108,16,83,112,11,49,128,16,82,140,14,9,152,15,71,162,15,64,172,15,66,182,15,67,192,15,68,202,15,70,214,15,69,223,15,65,240,15,62,258,15,61,275,15,63,290,11,42,305,11,41]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketFrameDecoder.swift","symbols":[17,12,7,20,9,33,23,9,34,26,9,35,46,25,1,59,25,0,222,19,12,223,21,101,224,21,99,225,21,100,248,11,38,253,16,84]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketFrameEncoder.swift","symbols":[37,19,13,38,21,102,39,21,103,50,11,39,52,16,85,56,16,86,60,16,87]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketOpcode.swift","symbols":[15,14,10,18,22,50,19,22,54,20,22,55,21,22,51,22,22,52,23,22,53,30,11,43,47,15,72,57,22,56,61,15,73,91,11,111,102,11,110]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOWebSocket/WebSocketProtocolErrorHandler.swift","symbols":[21,19,14,22,21,105,23,21,104,25,11,40,27,16,88]}]}