{"culture":"NIOFoundationCompat","dependencies":[{"package":"swift-nio","modules":["NIO","NIOConcurrencyHelpers","NIOCore","NIOEmbedded","NIOPosix","_NIODataStructures"]}],"extensions":[],"partitions":[{"namespace":"Foundation","communities":[{"community":"init","startIndex":0,"endIndex":1},{"community":"type.method","startIndex":1,"endIndex":2},{"community":"method","startIndex":2,"endIndex":5}]},{"namespace":"NIOCore","communities":[{"community":"enum","startIndex":5,"endIndex":6},{"community":"enum.case","startIndex":6,"endIndex":9},{"community":"init","startIndex":9,"endIndex":10},{"community":"property","startIndex":10,"endIndex":11},{"community":"method","startIndex":11,"endIndex":28},{"community":"typealias","startIndex":28,"endIndex":29}]},{"namespace":"NIOFoundationCompat","communities":[{"community":"enum","startIndex":29,"endIndex":30},{"community":"enum.case","startIndex":30,"endIndex":31}]}],"identifiers":["s10Foundation4DataV19NIOFoundationCompatE6buffer20byteTransferStrategyAC7NIOCore10ByteBufferV_AiDE0jgH0Otcfc","s10Foundation17JSONSerializationC19NIOFoundationCompatE10jsonObject4with7optionsyp7NIOCore10ByteBufferV_AC14ReadingOptionsVtKFZ","s10Foundation11JSONDecoderC19NIOFoundationCompatE6decode_4fromxxm_7NIOCore10ByteBufferVtKSeRzlF","s10Foundation11JSONEncoderC19NIOFoundationCompatE18encodeAsByteBuffer_9allocator7NIOCore0gH0Vx_AG0gH9AllocatorVtKSERzlF","s10Foundation11JSONEncoderC19NIOFoundationCompatE6encode_4intoyx_7NIOCore10ByteBufferVztKSERzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE0B16TransferStrategyO","s7NIOCore10ByteBufferV19NIOFoundationCompatE0B16TransferStrategyO4copyyA2FmF","s7NIOCore10ByteBufferV19NIOFoundationCompatE0B16TransferStrategyO6noCopyyA2FmF","s7NIOCore10ByteBufferV19NIOFoundationCompatE0B16TransferStrategyO9automaticyA2FmF","s7NIOCore10ByteBufferV19NIOFoundationCompatE4dataAC10Foundation4DataV_tcfc","s7NIOCore14ByteBufferViewV19NIOFoundationCompatE7regionss15CollectionOfOneVyACGvp","s7NIOCore10ByteBufferV19NIOFoundationCompatE10readString6length8encodingSSSgSi_SS10FoundationE8EncodingVtF","s7NIOCore10ByteBufferV19NIOFoundationCompatE11writeString_8encodingSiSS_SS10FoundationE8EncodingVtKF","s7NIOCore10ByteBufferV19NIOFoundationCompatE16getJSONDecodable_7decoder2at6lengthxSgxm_10Foundation11JSONDecoderCS2itKSeRzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE16setJSONEncodable_7encoder2atSix_10Foundation11JSONEncoderCSitKSERzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE17readJSONDecodable_7decoder6lengthxSgxm_10Foundation11JSONDecoderCSitKSeRzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE18setContiguousBytes_2atSix_Sit10Foundation0gH0RzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE18writeJSONEncodable_7encoderSix_10Foundation11JSONEncoderCtKSERzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE20writeContiguousBytesySix10Foundation0gH0RzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE7getData2at6length10Foundation0G0VSgSi_SitF","s7NIOCore10ByteBufferV19NIOFoundationCompatE7getData2at6length20byteTransferStrategy10Foundation0G0VSgSi_SiAcDE0bkL0OtF","s7NIOCore10ByteBufferV19NIOFoundationCompatE7setData_2atSix_Sit10Foundation0G8ProtocolRzlF","s7NIOCore10ByteBufferV19NIOFoundationCompatE8readData6length10Foundation0G0VSgSi_tF","s7NIOCore10ByteBufferV19NIOFoundationCompatE8readData6length20byteTransferStrategy10Foundation0G0VSgSi_AcDE0bjK0OtF","s7NIOCore10ByteBufferV19NIOFoundationCompatE9getString2at6length8encodingSSSgSi_SiSS10FoundationE8EncodingVtF","s7NIOCore10ByteBufferV19NIOFoundationCompatE9setString_8encoding2atSiSS_SS10FoundationE8EncodingVSitKF","s7NIOCore10ByteBufferV19NIOFoundationCompatE9writeDataySix10Foundation0G8ProtocolRzlF","s7NIOCore19ByteBufferAllocatorV19NIOFoundationCompatE6buffer4dataAA0bC0V10Foundation4DataV_tF","s7NIOCore14ByteBufferViewV19NIOFoundationCompatE7Regionsa","s19NIOFoundationCompat25ByteBufferFoundationErrorO","s19NIOFoundationCompat25ByteBufferFoundationErrorO20failedToEncodeStringyA2CmF","s10Foundation11JSONDecoderC","s10Foundation11JSONEncoderC","s10Foundation12DataProtocolP","s10Foundation12DataProtocolP10firstRange2of2inSny5IndexQzGSgqd___qd_0_tAaBRd__SXRd_0_5BoundQyd_0_AHRSr0_lF","s10Foundation12DataProtocolP7RegionsQa","s10Foundation12DataProtocolP7regions7RegionsQzvp","s10Foundation12DataProtocolP9lastRange2of2inSny5IndexQzGSgqd___qd_0_tAaBRd__SXRd_0_5BoundQyd_0_AHRSr0_lF","s10Foundation12DataProtocolPA2A15ContiguousBytesRzrlE04copyE02to4fromySryqd__G_qd_0_tSXRd_0_5BoundQyd_0_5IndexSlRtzr0_lF","s10Foundation12DataProtocolPAAE10firstRange2of2inSny5IndexQzGSgqd___qd_0_tAaBRd__SXRd_0_5BoundQyd_0_AHRSr0_lF","s10Foundation12DataProtocolPAAE10firstRange2ofSny5IndexQzGSgqd___tAaBRd__lF","s10Foundation12DataProtocolPAAE9copyBytes2to4fromSiSryqd__G_qd_0_tSXRd_0_5BoundQyd_0_5IndexRtzr0_lF","s10Foundation12DataProtocolPAAE9copyBytes2to4fromSiSw_qd__tSXRd__5BoundQyd__5IndexRtzlF","s10Foundation12DataProtocolPAAE9copyBytes2to5countSiSw_SitF","s10Foundation12DataProtocolPAAE9copyBytes2toSiSw_tF","s10Foundation12DataProtocolPAAE9lastRange2of2inSny5IndexQzGSgqd___qd_0_tAaBRd__SXRd_0_5BoundQyd_0_AHRSr0_lF","s10Foundation12DataProtocolPAAE9lastRange2ofSny5IndexQzGSgqd___tAaBRd__lF","s10Foundation15ContiguousBytesP","s10Foundation17JSONSerializationC","s10Foundation17JSONSerializationC14ReadingOptionsV","s10Foundation19MutableDataProtocolP","s10Foundation19MutableDataProtocolP10resetBytes2inyqd___tSXRd__5BoundQyd__5IndexRtzlF","s10Foundation19MutableDataProtocolPAAE10resetBytes2inyqd___tSXRd__5BoundQyd__5IndexRtzlF","s10Foundation4DataV","s7NIOCore10ByteBufferV","s7NIOCore14ByteBufferViewV","s7NIOCore19ByteBufferAllocatorV","sSE","sSH","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSK9formIndex6beforey0B0Qzz_tF","sSKs11SubSequenceQzRszrlE10removeLast7ElementQzyF","sSKs11SubSequenceQzRszrlE10removeLastyySiF","sSKs11SubSequenceQzRszrlE7popLast7ElementQzSgyF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSQ","sSQsE2neoiySbx_xtFZ","sSS","sSS10FoundationE8EncodingV","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF","sSTsSL7ElementRpzrlE3maxABSgyF","sSTsSL7ElementRpzrlE3minABSgyF","sSTsSL7ElementRpzrlE6sortedSayABGyF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSe","sSi","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessing11SubSequenceQzRszSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ADQyd__AERSlF","sSl17_StringProcessing11SubSequenceQzRszrlE10trimPrefix5whileySb7ElementQzKXE_tKF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSls11SubSequenceQzRszrlE11removeFirst7ElementQzyF","sSls11SubSequenceQzRszrlE11removeFirstyySiF","sSls11SubSequenceQzRszrlE8popFirst7ElementQzSgyF","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","ss15CollectionOfOneV","ss5ErrorP","ss5ErrorP10FoundationE20localizedDescriptionSSvp","ss8SendableP"],"vertices":[{"p":["Data","init(buffer:byteTransferStrategy:)"],"f":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18,54],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18,54],[".",17],["ByteTransferStrategy",18,5],[" = .automatic)",17]],"s":[["init",10],["(",17],["buffer",1],[": ",17],["ByteBuffer",18],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18],[".",17],["ByteTransferStrategy",18],[")",17]],"d":"Creates a `Data` from a given `ByteBuffer`. The entire readable portion of the buffer will be read.\n- parameter buffer: The buffer to read."},{"p":["JSONSerialization","jsonObject(with:options:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["jsonObject",7],["(",17],["with",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,54],[", ",17],["options",1],[" ",17],["opt",2],[": ",17],["JSONSerialization",18,48],[".",17],["ReadingOptions",18,49],[" = []) ",17],["throws",12],[" -> ",17],["Any",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["jsonObject",7],["(",17],["with",1],[": ",17],["ByteBuffer",18],[", ",17],["options",1],[": ",17],["JSONSerialization",18],[".",17],["ReadingOptions",18],[") ",17],["throws",12],[" -> ",17],["Any",12]],"d":"Attempts to derive a Foundation object from a ByteBuffer and return it as `T`.\n\n- parameters:\n   - buffer: The ByteBuffer being used to derive the Foundation type.\n   - options: The reading option used when the parser derives the Foundation type from the ByteBuffer.\n- returns: The Foundation value if successful or `nil` if there was an issue creating the Foundation type."},{"p":["JSONDecoder","decode(_:from:)"],"f":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type, ",17],["from",1],[" ",17],["buffer",2],[": ",17],["ByteBuffer",18,54],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,113]],"s":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["T",18],[".Type, ",17],["from",1],[": ",17],["ByteBuffer",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"Decodable",113]],"g":[["T",0,0]],"d":"Returns a value of the type you specify, decoded from a JSON object inside the readable bytes of a `ByteBuffer`.\n\nIf the `ByteBuffer` does not contain valid JSON, this method throws the\n`DecodingError.dataCorrupted(_:)` error. If a value within the JSON\nfails to decode, this method throws the corresponding error.\n\n- note: The provided `ByteBuffer` remains unchanged, neither the `readerIndex` nor the `writerIndex` will move.\n        If you would like the `readerIndex` to move, consider using `ByteBuffer.readJSONDecodable(_:length:)`.\n\n- parameters:\n    - type: The type of the value to decode from the supplied JSON object.\n    - buffer: The `ByteBuffer` that contains JSON object to decode.\n- returns: The decoded object."},{"p":["JSONEncoder","encodeAsByteBuffer(_:allocator:)"],"f":[["func",12],[" ",17],["encodeAsByteBuffer",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["T",18],[", ",17],["allocator",1],[": ",17],["ByteBufferAllocator",18,56],[") ",17],["throws",12],[" -> ",17],["ByteBuffer",18,54],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Encodable",18,57]],"s":[["func",12],[" ",17],["encodeAsByteBuffer",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["allocator",1],[": ",17],["ByteBufferAllocator",18],[") ",17],["throws",12],[" -> ",17],["ByteBuffer",18]],"c":[["T",1,"Encodable",57]],"g":[["T",0,0]],"d":"Writes a JSON-encoded representation of the value you supply into a `ByteBuffer` that is freshly allocated.\n\n- parameters:\n    - value: The value to encode as JSON.\n    - allocator: The `ByteBufferAllocator` which is used to allocate the `ByteBuffer` to be returned.\n- returns: The `ByteBuffer` containing the encoded JSON."},{"p":["JSONEncoder","encode(_:into:)"],"f":[["func",12],[" ",17],["encode",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["T",18],[", ",17],["into",1],[" ",17],["buffer",2],[": ",17],["inout",12],[" ",17],["ByteBuffer",18,54],[") ",17],["throws",12],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Encodable",18,57]],"s":[["func",12],[" ",17],["encode",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["into",1],[": ",17],["inout",12],[" ",17],["ByteBuffer",18],[") ",17],["throws",12]],"c":[["T",1,"Encodable",57]],"g":[["T",0,0]],"d":"Writes a JSON-encoded representation of the value you supply into the supplied `ByteBuffer`.\n\n- parameters:\n    - value: The value to encode as JSON.\n    - buffer: The `ByteBuffer` to encode into."},{"p":["ByteBuffer","ByteTransferStrategy"],"f":[["enum",12],[" ",17],["ByteTransferStrategy",7]],"s":[["enum",12],[" ",17],["ByteTransferStrategy",7]],"d":"Controls how bytes are transferred between `ByteBuffer` and other storage types."},{"p":["ByteBuffer","ByteTransferStrategy","copy"],"f":[["case",12],[" ",17],["copy",7]],"s":[["case",12],[" ",17],["copy",7]],"d":"Force a copy of the bytes."},{"p":["ByteBuffer","ByteTransferStrategy","noCopy"],"f":[["case",12],[" ",17],["noCopy",7]],"s":[["case",12],[" ",17],["noCopy",7]],"d":"Do not copy the bytes if at all possible."},{"p":["ByteBuffer","ByteTransferStrategy","automatic"],"f":[["case",12],[" ",17],["automatic",7]],"s":[["case",12],[" ",17],["automatic",7]],"d":"Use a heuristic to decide whether to copy the bytes or not."},{"p":["ByteBuffer","init(data:)"],"f":[["init",10],["(",17],["data",1],[": ",17],["Data",18,53],[")",17]],"s":[["init",10],["(",17],["data",1],[": ",17],["Data",18],[")",17]]},{"p":["ByteBufferView","regions"],"f":[["var",12],[" ",17],["regions",7],[": ",17],["CollectionOfOne",18,159],["<",17],["ByteBufferView",18,55],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["regions",7],[": ",17],["CollectionOfOne",18],["<",17],["ByteBufferView",18],[">",17]]},{"p":["ByteBuffer","readString(length:encoding:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readString",7],["(",17],["length",1],[": ",17],["Int",18,114],[", ",17],["encoding",1],[": ",17],["String",18,78],[".",17],["Encoding",18,79],[") -> ",17],["String",18,78],["?",17]],"s":[["func",12],[" ",17],["readString",7],["(",17],["length",1],[": ",17],["Int",18],[", ",17],["encoding",1],[": ",17],["String",18],[".",17],["Encoding",18],[") -> ",17],["String",18],["?",17]],"d":"Read a `String` decoding `length` bytes with `encoding` from the `readerIndex`, moving the `readerIndex` appropriately.\n\n- parameters:\n    - length: The number of bytes to read.\n    - encoding: The `String` encoding to be used.\n- returns: A `String` value containing the bytes of interest or `nil` if the `ByteBuffer` doesn't contain enough bytes, or\n    if those bytes cannot be decoded with the given encoding."},{"p":["ByteBuffer","writeString(_:encoding:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,78],[", ",17],["encoding",1],[": ",17],["String",18,78],[".",17],["Encoding",18,79],[") ",17],["throws",12],[" -> ",17],["Int",18,114]],"s":[["func",12],[" ",17],["writeString",7],["(",17],["String",18],[", ",17],["encoding",1],[": ",17],["String",18],[".",17],["Encoding",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"d":"Write `string` into this `ByteBuffer` using the encoding `encoding`, moving the writer index forward appropriately.\n\n- parameters:\n    - string: The string to write.\n    - encoding: The encoding to use to encode the string.\n- returns: The number of bytes written."},{"p":["ByteBuffer","getJSONDecodable(_:decoder:at:length:)"],"f":[["func",12],[" ",17],["getJSONDecodable",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type, ",17],["decoder",1],[": ",17],["JSONDecoder",18,31],[" = JSONDecoder(), ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[", ",17],["length",1],[": ",17],["Int",18,114],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,113]],"s":[["func",12],[" ",17],["getJSONDecodable",7],["<",17],["T",0],[">(",17],["T",18],[".Type, ",17],["decoder",1],[": ",17],["JSONDecoder",18],[", ",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"Decodable",113]],"g":[["T",0,0]],"d":"Attempts to decode the `length` bytes from `index` using the `JSONDecoder` `decoder` as `T`.\n\n- parameters:\n   - type: The type type that is attempted to be decoded.\n   - decoder: The `JSONDecoder` that is used for the decoding.\n   - index: The index of the first byte to decode.\n   - length: The number of bytes to decode.\n- returns: The decoded value if successful or `nil` if there are not enough readable bytes available."},{"p":["ByteBuffer","setJSONEncodable(_:encoder:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setJSONEncodable",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["T",18],[", ",17],["encoder",1],[": ",17],["JSONEncoder",18,32],[" = JSONEncoder(), ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[") ",17],["throws",12],[" -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Encodable",18,57]],"s":[["func",12],[" ",17],["setJSONEncodable",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["encoder",1],[": ",17],["JSONEncoder",18],[", ",17],["at",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"c":[["T",1,"Encodable",57]],"g":[["T",0,0]],"d":"Encodes `value` using the `JSONEncoder` `encoder` and set the resulting bytes into this `ByteBuffer` at the\ngiven `index`.\n\n- note: The `writerIndex` remains unchanged.\n\n- parameters:\n    - value: An `Encodable` value to encode.\n    - encoder: The `JSONEncoder` to encode `value` with.\n- returns: The number of bytes written."},{"p":["ByteBuffer","readJSONDecodable(_:decoder:length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readJSONDecodable",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type, ",17],["decoder",1],[": ",17],["JSONDecoder",18,31],[" = JSONDecoder(), ",17],["length",1],[": ",17],["Int",18,114],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,113]],"s":[["func",12],[" ",17],["readJSONDecodable",7],["<",17],["T",0],[">(",17],["T",18],[".Type, ",17],["decoder",1],[": ",17],["JSONDecoder",18],[", ",17],["length",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"Decodable",113]],"g":[["T",0,0]],"d":"Reads `length` bytes from this `ByteBuffer` and then attempts to decode them using the `JSONDecoder` `decoder`.\n\n- parameters:\n   - type: The type type that is attempted to be decoded.\n   - decoder: The `JSONDecoder` that is used for the decoding.\n   - length: The number of bytes to decode.\n- returns: The decoded value is successful or `nil` if there are not enough readable bytes available."},{"p":["ByteBuffer","setContiguousBytes(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setContiguousBytes",7],["<",17],["Bytes",0],[">(",17],["_",1],[" ",17],["bytes",2],[": ",17],["Bytes",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[") -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["ContiguousBytes",18,47]],"s":[["func",12],[" ",17],["setContiguousBytes",7],["<",17],["Bytes",0],[">(",17],["Bytes",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"c":[["Bytes",1,"ContiguousBytes",47]],"g":[["Bytes",0,0]],"d":"Write `bytes` into this `ByteBuffer` at `index`. Does not move the writer index.\n\n- parameters:\n    - bytes: The bytes to write.\n    - index: The index for the first byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeJSONEncodable(_:encoder:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeJSONEncodable",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["value",2],[": ",17],["T",18],[", ",17],["encoder",1],[": ",17],["JSONEncoder",18,32],[" = JSONEncoder()) ",17],["throws",12],[" -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Encodable",18,57]],"s":[["func",12],[" ",17],["writeJSONEncodable",7],["<",17],["T",0],[">(",17],["T",18],[", ",17],["encoder",1],[": ",17],["JSONEncoder",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"c":[["T",1,"Encodable",57]],"g":[["T",0,0]],"d":"Encodes `value` using the `JSONEncoder` `encoder` and writes the resulting bytes into this `ByteBuffer`.\n\nIf successful, this will move the writer index forward by the number of bytes written.\n\n- parameters:\n    - value: An `Encodable` value to encode.\n    - encoder: The `JSONEncoder` to encode `value` with.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeContiguousBytes(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeContiguousBytes",7],["<",17],["Bytes",0],[">(",17],["_",1],[" ",17],["bytes",2],[": ",17],["Bytes",18],[") -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["ContiguousBytes",18,47]],"s":[["func",12],[" ",17],["writeContiguousBytes",7],["<",17],["Bytes",0],[">(",17],["Bytes",18],[") -> ",17],["Int",18]],"c":[["Bytes",1,"ContiguousBytes",47]],"g":[["Bytes",0,0]],"d":"Write `bytes` into this `ByteBuffer` at the writer index, moving the writer index forward appropriately.\n\n- parameters:\n    - bytes: The bytes to write.\n- returns: The number of bytes written."},{"p":["ByteBuffer","getData(at:length:)"],"f":[["func",12],[" ",17],["getData",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[", ",17],["length",1],[": ",17],["Int",18,114],[") -> ",17],["Data",18,53],["?",17]],"s":[["func",12],[" ",17],["getData",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[") -> ",17],["Data",18],["?",17]],"d":"Return `length` bytes starting at `index` and return the result as `Data`. This will not change the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n`ByteBuffer` will use a heuristic to decide whether to copy the bytes or whether to reference `ByteBuffer`'s\nunderlying storage from the returned `Data` value. If you want manual control over the byte transferring\nbehaviour, please use `getData(at:byteTransferStrategy:)`.\n\n- parameters:\n    - index: The starting index of the bytes of interest into the `ByteBuffer`\n    - length: The number of bytes of interest\n- returns: A `Data` value containing the bytes of interest or `nil` if the selected bytes are not readable."},{"p":["ByteBuffer","getData(at:length:byteTransferStrategy:)"],"f":[["func",12],[" ",17],["getData",7],["(",17],["at",1],[" ",17],["index0",2],[": ",17],["Int",18,114],[", ",17],["length",1],[": ",17],["Int",18,114],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18,54],[".",17],["ByteTransferStrategy",18,5],[") -> ",17],["Data",18,53],["?",17]],"s":[["func",12],[" ",17],["getData",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18],[".",17],["ByteTransferStrategy",18],[") -> ",17],["Data",18],["?",17]],"d":"Return `length` bytes starting at `index` and return the result as `Data`. This will not change the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index of the bytes of interest into the `ByteBuffer`\n    - length: The number of bytes of interest\n    - byteTransferStrategy: Controls how to transfer the bytes. See `ByteTransferStrategy` for an explanation\n                            of the options.\n- returns: A `Data` value containing the bytes of interest or `nil` if the selected bytes are not readable."},{"p":["ByteBuffer","setData(_:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setData",7],["<",17],["D",0],[">(",17],["_",1],[" ",17],["data",2],[": ",17],["D",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[") -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["D",18],[" : ",17],["DataProtocol",18,33]],"s":[["func",12],[" ",17],["setData",7],["<",17],["D",0],[">(",17],["D",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"c":[["D",1,"DataProtocol",33]],"g":[["D",0,0]],"d":"Write the bytes of `data` into this `ByteBuffer` at `index`. Does not move the writer index.\n\n- parameters:\n    - data: The data to write.\n    - index: The index for the first byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","readData(length:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readData",7],["(",17],["length",1],[": ",17],["Int",18,114],[") -> ",17],["Data",18,53],["?",17]],"s":[["func",12],[" ",17],["readData",7],["(",17],["length",1],[": ",17],["Int",18],[") -> ",17],["Data",18],["?",17]],"d":"Read `length` bytes off this `ByteBuffer`, move the reader index forward by `length` bytes and return the result\nas `Data`.\n\n`ByteBuffer` will use a heuristic to decide whether to copy the bytes or whether to reference `ByteBuffer`'s\nunderlying storage from the returned `Data` value. If you want manual control over the byte transferring\nbehaviour, please use `readData(length:byteTransferStrategy:)`.\n\n- parameters:\n    - length: The number of bytes to be read from this `ByteBuffer`.\n- returns: A `Data` value containing `length` bytes or `nil` if there aren't at least `length` bytes readable."},{"p":["ByteBuffer","readData(length:byteTransferStrategy:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["readData",7],["(",17],["length",1],[": ",17],["Int",18,114],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18,54],[".",17],["ByteTransferStrategy",18,5],[") -> ",17],["Data",18,53],["?",17]],"s":[["func",12],[" ",17],["readData",7],["(",17],["length",1],[": ",17],["Int",18],[", ",17],["byteTransferStrategy",1],[": ",17],["ByteBuffer",18],[".",17],["ByteTransferStrategy",18],[") -> ",17],["Data",18],["?",17]],"d":"Read `length` bytes off this `ByteBuffer`, move the reader index forward by `length` bytes and return the result\nas `Data`.\n\n- parameters:\n    - length: The number of bytes to be read from this `ByteBuffer`.\n    - byteTransferStrategy: Controls how to transfer the bytes. See `ByteTransferStrategy` for an explanation\n                            of the options.\n- returns: A `Data` value containing `length` bytes or `nil` if there aren't at least `length` bytes readable."},{"p":["ByteBuffer","getString(at:length:encoding:)"],"f":[["func",12],[" ",17],["getString",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[", ",17],["length",1],[": ",17],["Int",18,114],[", ",17],["encoding",1],[": ",17],["String",18,78],[".",17],["Encoding",18,79],[") -> ",17],["String",18,78],["?",17]],"s":[["func",12],[" ",17],["getString",7],["(",17],["at",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[", ",17],["encoding",1],[": ",17],["String",18],[".",17],["Encoding",18],[") -> ",17],["String",18],["?",17]],"d":"Get a `String` decoding `length` bytes starting at `index` with `encoding`. This will not change the reader index.\nThe selected bytes must be readable or else `nil` will be returned.\n\n- parameters:\n    - index: The starting index of the bytes of interest into the `ByteBuffer`.\n    - length: The number of bytes of interest.\n    - encoding: The `String` encoding to be used.\n- returns: A `String` value containing the bytes of interest or `nil` if the selected bytes are not readable or\n           cannot be decoded with the given encoding."},{"p":["ByteBuffer","setString(_:encoding:at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["setString",7],["(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,78],[", ",17],["encoding",1],[": ",17],["String",18,78],[".",17],["Encoding",18,79],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,114],[") ",17],["throws",12],[" -> ",17],["Int",18,114]],"s":[["func",12],[" ",17],["setString",7],["(",17],["String",18],[", ",17],["encoding",1],[": ",17],["String",18],[".",17],["Encoding",18],[", ",17],["at",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Int",18]],"d":"Write `string` into this `ByteBuffer` at `index` using the encoding `encoding`. Does not move the writer index.\n\n- parameters:\n    - string: The string to write.\n    - encoding: The encoding to use to encode the string.\n    - index: The index for the first serialized byte.\n- returns: The number of bytes written."},{"p":["ByteBuffer","writeData(_:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["writeData",7],["<",17],["D",0],[">(",17],["_",1],[" ",17],["data",2],[": ",17],["D",18],[") -> ",17],["Int",18,114],[" ",17],["where",12],[" ",17],["D",18],[" : ",17],["DataProtocol",18,33]],"s":[["func",12],[" ",17],["writeData",7],["<",17],["D",0],[">(",17],["D",18],[") -> ",17],["Int",18]],"c":[["D",1,"DataProtocol",33]],"g":[["D",0,0]],"d":"Write the bytes of `data` into this `ByteBuffer` at the writer index, moving the writer index forward appropriately.\n\n- parameters:\n    - data: The data to write.\n- returns: The number of bytes written."},{"p":["ByteBufferAllocator","buffer(data:)"],"f":[["func",12],[" ",17],["buffer",7],["(",17],["data",1],[": ",17],["Data",18,53],[") -> ",17],["ByteBuffer",18,54]],"s":[["func",12],[" ",17],["buffer",7],["(",17],["data",1],[": ",17],["Data",18],[") -> ",17],["ByteBuffer",18]],"d":"Create a fresh `ByteBuffer` containing the bytes contained in the given `Data`.\n\nThis will allocate a new `ByteBuffer` with enough space to fit the bytes of the `Data` and potentially\nsome extra space using Swift's default allocator."},{"p":["ByteBufferView","Regions"],"f":[["typealias",12],[" ",17],["Regions",7],[" = ",17],["CollectionOfOne",18,159],["<",17],["ByteBufferView",18,55],[">",17]],"s":[["typealias",12],[" ",17],["Regions",7]]},{"p":["ByteBufferFoundationError"],"f":[["enum",12],[" ",17],["ByteBufferFoundationError",7]],"s":[["enum",12],[" ",17],["ByteBufferFoundationError",7]],"d":"Errors that may be thrown by ByteBuffer methods that call into Foundation."},{"p":["ByteBufferFoundationError","failedToEncodeString"],"f":[["case",12],[" ",17],["failedToEncodeString",7]],"s":[["case",12],[" ",17],["failedToEncodeString",7]],"d":"Attempting to encode the given string failed."}],"edges":{"conformer":[5,58,[],5,76,[],29,58,[],29,76,[],29,160,[],29,162,[],55,33,[],55,47,[],55,50,[]],"feature":[38,55,39,55,40,55,41,55,42,55,43,55,44,55,45,55,46,55,52,55,59,55,60,55,61,55,63,55,64,55,65,55,66,55,67,55,68,55,69,55,70,55,71,55,72,55,73,55,74,55,75,55,77,5,77,29,80,55,81,55,82,55,84,55,85,55,86,55,87,55,88,55,89,55,90,55,91,55,92,55,93,55,94,55,95,55,96,55,97,55,98,55,99,55,100,55,101,55,102,55,103,55,104,55,105,55,106,55,107,55,108,55,109,55,110,55,111,55,112,55,115,55,116,55,117,55,118,55,119,55,120,55,121,55,122,55,123,55,124,55,125,55,126,55,127,55,128,55,129,55,130,55,131,55,132,55,133,55,134,55,135,55,136,55,137,55,138,55,139,55,140,55,141,55,142,55,143,55,144,55,145,55,146,55,147,55,148,55,149,55,150,55,151,55,152,55,153,55,154,55,155,55,156,55,157,55,158,55,161,29],"member":[0,53,1,48,2,31,3,32,4,32,5,54,6,5,7,5,8,5,9,54,10,55,11,54,12,54,13,54,14,54,15,54,16,54,17,54,18,54,19,54,20,54,21,54,22,54,23,54,24,54,25,54,26,54,27,56,28,55,30,29]},"hints":[10,36,28,35,38,38,39,34,40,40,41,41,42,42,43,43,44,44,45,37,46,46,52,51,59,59,60,60,61,61,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,62,73,73,74,74,75,75,77,77,80,80,81,81,82,82,84,84,85,85,86,86,87,87,88,88,89,89,90,83,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,161,161],"sourcemap":[{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOFoundationCompat/ByteBuffer-foundation.swift","symbols":[19,12,29,21,9,30,41,16,5,43,13,6,46,13,7,49,13,8,64,25,22,77,25,23,96,16,19,109,16,20,148,16,24,162,25,11,181,25,12,195,25,25,202,11,9,214,25,18,228,25,16,241,25,26,255,25,21,274,16,27,285,21,28,287,15,10,299,11,0]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOFoundationCompat/Codable+ByteBuffer.swift","symbols":[27,16,13,44,25,15,68,25,14,85,25,17,107,16,2,121,16,4,132,16,3]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-nio@2.39.0/.build/checkouts/swift-nio/Sources/NIOFoundationCompat/JSONSerialization+ByteBuffer.swift","symbols":[26,23,1]}]}